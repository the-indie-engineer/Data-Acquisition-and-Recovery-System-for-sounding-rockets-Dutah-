
NRF_Module_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000912c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080092f0  080092f0  000192f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800935c  0800935c  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800935c  0800935c  0001935c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009364  08009364  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009364  08009364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0800936c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000114  08009480  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dfc  08009480  00021dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015624  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339c  00000000  00000000  00035768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00038b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00039b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024780  00000000  00000000  0003aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155bf  00000000  00000000  0005f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce1bb  00000000  00000000  000747bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014297a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  001429cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000114 	.word	0x20000114
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080092d8 	.word	0x080092d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000118 	.word	0x20000118
 8000200:	080092d8 	.word	0x080092d8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <CS_Select>:
#define NRF24_CSN_PORT   GPIOC
#define NRF24_CSN_PIN    GPIO_PIN_7


void CS_Select (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <CS_Select+0x14>)
 8000522:	f000 fff1 	bl	8001508 <HAL_GPIO_WritePin>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40020800 	.word	0x40020800

08000530 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <CS_UnSelect+0x14>)
 800053a:	f000 ffe5 	bl	8001508 <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020800 	.word	0x40020800

08000548 <CE_Enable>:


void CE_Enable (void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <CE_Enable+0x14>)
 8000552:	f000 ffd9 	bl	8001508 <HAL_GPIO_WritePin>
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40020400 	.word	0x40020400

08000560 <CE_Disable>:

void CE_Disable (void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <CE_Disable+0x14>)
 800056a:	f000 ffcd 	bl	8001508 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020400 	.word	0x40020400

08000578 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	b2db      	uxtb	r3, r3
 8000590:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000596:	f7ff ffbf 	bl	8000518 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	2202      	movs	r2, #2
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <nrf24_WriteReg+0x40>)
 80005a6:	f003 fc2c 	bl	8003e02 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005aa:	f7ff ffc1 	bl	8000530 <CS_UnSelect>
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000130 	.word	0x20000130

080005bc <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f043 0320 	orr.w	r3, r3, #32
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005d4:	f7ff ffa0 	bl	8000518 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80005d8:	f107 0114 	add.w	r1, r7, #20
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	2201      	movs	r2, #1
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <nrf24_WriteRegMulti+0x48>)
 80005e2:	f003 fc0e 	bl	8003e02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <nrf24_WriteRegMulti+0x48>)
 80005f2:	f003 fc06 	bl	8003e02 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005f6:	f7ff ff9b 	bl	8000530 <CS_UnSelect>
}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000130 	.word	0x20000130

08000608 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000616:	f7ff ff7f 	bl	8000518 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800061a:	1df9      	adds	r1, r7, #7
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	2201      	movs	r2, #1
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <nrf24_ReadReg+0x3c>)
 8000622:	f003 fbee 	bl	8003e02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000626:	f107 010f 	add.w	r1, r7, #15
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	2201      	movs	r2, #1
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <nrf24_ReadReg+0x3c>)
 8000630:	f003 fd23 	bl	800407a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000634:	f7ff ff7c 	bl	8000530 <CS_UnSelect>

	return data;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000130 	.word	0x20000130

08000648 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000652:	f7ff ff61 	bl	8000518 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000656:	1df9      	adds	r1, r7, #7
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	2201      	movs	r2, #1
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <nrfsendCmd+0x28>)
 800065e:	f003 fbd0 	bl	8003e02 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000662:	f7ff ff65 	bl	8000530 <CS_UnSelect>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000130 	.word	0x20000130

08000674 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d104      	bne.n	800068e <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000684:	2100      	movs	r1, #0
 8000686:	2007      	movs	r0, #7
 8000688:	f7ff ff76 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 800068c:	e090      	b.n	80007b0 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b17      	cmp	r3, #23
 8000692:	d104      	bne.n	800069e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000694:	2111      	movs	r1, #17
 8000696:	2017      	movs	r0, #23
 8000698:	f7ff ff6e 	bl	8000578 <nrf24_WriteReg>
}
 800069c:	e088      	b.n	80007b0 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800069e:	2108      	movs	r1, #8
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff69 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80006a6:	213f      	movs	r1, #63	; 0x3f
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff65 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80006ae:	2103      	movs	r1, #3
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff ff61 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80006b6:	2103      	movs	r1, #3
 80006b8:	2003      	movs	r0, #3
 80006ba:	f7ff ff5d 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80006be:	2103      	movs	r1, #3
 80006c0:	2004      	movs	r0, #4
 80006c2:	f7ff ff59 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80006c6:	2102      	movs	r1, #2
 80006c8:	2005      	movs	r0, #5
 80006ca:	f7ff ff55 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80006ce:	210e      	movs	r1, #14
 80006d0:	2006      	movs	r0, #6
 80006d2:	f7ff ff51 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80006d6:	2100      	movs	r1, #0
 80006d8:	2007      	movs	r0, #7
 80006da:	f7ff ff4d 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80006de:	2100      	movs	r1, #0
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff49 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2009      	movs	r0, #9
 80006ea:	f7ff ff45 	bl	8000578 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006ee:	4a32      	ldr	r2, [pc, #200]	; (80007b8 <nrf24_reset+0x144>)
 80006f0:	f107 0318 	add.w	r3, r7, #24
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	6018      	str	r0, [r3, #0]
 80006fa:	3304      	adds	r3, #4
 80006fc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2205      	movs	r2, #5
 8000704:	4619      	mov	r1, r3
 8000706:	200a      	movs	r0, #10
 8000708:	f7ff ff58 	bl	80005bc <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800070c:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <nrf24_reset+0x148>)
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000716:	6018      	str	r0, [r3, #0]
 8000718:	3304      	adds	r3, #4
 800071a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2205      	movs	r2, #5
 8000722:	4619      	mov	r1, r3
 8000724:	200b      	movs	r0, #11
 8000726:	f7ff ff49 	bl	80005bc <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800072a:	21c3      	movs	r1, #195	; 0xc3
 800072c:	200c      	movs	r0, #12
 800072e:	f7ff ff23 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000732:	21c4      	movs	r1, #196	; 0xc4
 8000734:	200d      	movs	r0, #13
 8000736:	f7ff ff1f 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800073a:	21c5      	movs	r1, #197	; 0xc5
 800073c:	200e      	movs	r0, #14
 800073e:	f7ff ff1b 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000742:	21c6      	movs	r1, #198	; 0xc6
 8000744:	200f      	movs	r0, #15
 8000746:	f7ff ff17 	bl	8000578 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800074a:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <nrf24_reset+0x144>)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000754:	6018      	str	r0, [r3, #0]
 8000756:	3304      	adds	r3, #4
 8000758:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2205      	movs	r2, #5
 8000760:	4619      	mov	r1, r3
 8000762:	2010      	movs	r0, #16
 8000764:	f7ff ff2a 	bl	80005bc <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000768:	2100      	movs	r1, #0
 800076a:	2011      	movs	r0, #17
 800076c:	f7ff ff04 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2012      	movs	r0, #18
 8000774:	f7ff ff00 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000778:	2100      	movs	r1, #0
 800077a:	2013      	movs	r0, #19
 800077c:	f7ff fefc 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000780:	2100      	movs	r1, #0
 8000782:	2014      	movs	r0, #20
 8000784:	f7ff fef8 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000788:	2100      	movs	r1, #0
 800078a:	2015      	movs	r0, #21
 800078c:	f7ff fef4 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	2016      	movs	r0, #22
 8000794:	f7ff fef0 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000798:	2111      	movs	r1, #17
 800079a:	2017      	movs	r0, #23
 800079c:	f7ff feec 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80007a0:	2100      	movs	r1, #0
 80007a2:	201c      	movs	r0, #28
 80007a4:	f7ff fee8 	bl	8000578 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	201d      	movs	r0, #29
 80007ac:	f7ff fee4 	bl	8000578 <nrf24_WriteReg>
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080092f0 	.word	0x080092f0
 80007bc:	080092f8 	.word	0x080092f8

080007c0 <NRF24_Init>:




void NRF24_Init (void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80007c4:	f7ff fecc 	bl	8000560 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff53 	bl	8000674 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fed1 	bl	8000578 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80007d6:	2100      	movs	r1, #0
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fecd 	bl	8000578 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80007de:	2100      	movs	r1, #0
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff fec9 	bl	8000578 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80007e6:	2103      	movs	r1, #3
 80007e8:	2003      	movs	r0, #3
 80007ea:	f7ff fec5 	bl	8000578 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80007ee:	2100      	movs	r1, #0
 80007f0:	2004      	movs	r0, #4
 80007f2:	f7ff fec1 	bl	8000578 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80007f6:	2100      	movs	r1, #0
 80007f8:	2005      	movs	r0, #5
 80007fa:	f7ff febd 	bl	8000578 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80007fe:	210e      	movs	r1, #14
 8000800:	2006      	movs	r0, #6
 8000802:	f7ff feb9 	bl	8000578 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000806:	f7ff fe9f 	bl	8000548 <CE_Enable>

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}

0800080e <NRF24_RxMode>:
	return 0;
}
*/

void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800081a:	f7ff fea1 	bl	8000560 <CE_Disable>

	nrf24_reset (STATUS);
 800081e:	2007      	movs	r0, #7
 8000820:	f7ff ff28 	bl	8000674 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	4619      	mov	r1, r3
 8000828:	2005      	movs	r0, #5
 800082a:	f7ff fea5 	bl	8000578 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff feea 	bl	8000608 <nrf24_ReadReg>
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	4619      	mov	r1, r3
 8000844:	2002      	movs	r0, #2
 8000846:	f7ff fe97 	bl	8000578 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800084a:	2205      	movs	r2, #5
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	200b      	movs	r0, #11
 8000850:	f7ff feb4 	bl	80005bc <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000854:	21ee      	movs	r1, #238	; 0xee
 8000856:	200c      	movs	r0, #12
 8000858:	f7ff fe8e 	bl	8000578 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 800085c:	2120      	movs	r1, #32
 800085e:	2013      	movs	r0, #19
 8000860:	f7ff fe8a 	bl	8000578 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fecf 	bl	8000608 <nrf24_ReadReg>
 800086a:	4603      	mov	r3, r0
 800086c:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	f043 0303 	orr.w	r3, r3, #3
 8000874:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	4619      	mov	r1, r3
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fe7c 	bl	8000578 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000880:	f7ff fe62 	bl	8000548 <CE_Enable>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000894:	2007      	movs	r0, #7
 8000896:	f7ff feb7 	bl	8000608 <nrf24_ReadReg>
 800089a:	4603      	mov	r3, r0
 800089c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00b      	beq.n	80008c0 <isDataAvailable+0x34>
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4013      	ands	r3, r2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	2007      	movs	r0, #7
 80008b8:	f7ff fe5e 	bl	8000578 <nrf24_WriteReg>

		return 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	e000      	b.n	80008c2 <isDataAvailable+0x36>
	}

	return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80008d8:	f7ff fe1e 	bl	8000518 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80008dc:	2361      	movs	r3, #97	; 0x61
 80008de:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80008e0:	f107 010f 	add.w	r1, r7, #15
 80008e4:	2364      	movs	r3, #100	; 0x64
 80008e6:	2201      	movs	r2, #1
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <NRF24_Receive+0x50>)
 80008ea:	f003 fa8a 	bl	8003e02 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	2220      	movs	r2, #32
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <NRF24_Receive+0x50>)
 80008f8:	f003 fbbf 	bl	800407a <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 80008fc:	f7ff fe18 	bl	8000530 <CS_UnSelect>

	HAL_Delay(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f000 fb37 	bl	8000f74 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000906:	23e2      	movs	r3, #226	; 0xe2
 8000908:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe9b 	bl	8000648 <nrfsendCmd>
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000130 	.word	0x20000130

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000924:	f000 fab4 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000928:	f000 f82e 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092c:	f000 f8f8 	bl	8000b20 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000930:	f000 f896 	bl	8000a60 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000934:	f000 f8ca 	bl	8000acc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000938:	f007 ff38 	bl	80087ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 800093c:	f7ff ff40 	bl	80007c0 <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);
 8000940:	210a      	movs	r1, #10
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <main+0x5c>)
 8000944:	f7ff ff63 	bl	800080e <NRF24_RxMode>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (isDataAvailable(1) == 1)
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff ff9f 	bl	800088c <isDataAvailable>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d10d      	bne.n	8000970 <main+0x50>
	 	  {
	 		  NRF24_Receive(RxData);
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <main+0x60>)
 8000956:	f7ff ffb9 	bl	80008cc <NRF24_Receive>
	 		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <main+0x60>)
 800095c:	f7ff fc52 	bl	8000204 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000968:	4905      	ldr	r1, [pc, #20]	; (8000980 <main+0x60>)
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <main+0x64>)
 800096c:	f003 ffb5 	bl	80048da <HAL_UART_Transmit>
	 	  }
	  HAL_Delay(1000);
 8000970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000974:	f000 fafe 	bl	8000f74 <HAL_Delay>
	  if (isDataAvailable(1) == 1)
 8000978:	e7e6      	b.n	8000948 <main+0x28>
 800097a:	bf00      	nop
 800097c:	20000000 	.word	0x20000000
 8000980:	200001cc 	.word	0x200001cc
 8000984:	20000188 	.word	0x20000188

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2234      	movs	r2, #52	; 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f008 fc96 	bl	80092c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <SystemClock_Config+0xd0>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <SystemClock_Config+0xd0>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <SystemClock_Config+0xd0>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <SystemClock_Config+0xd4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <SystemClock_Config+0xd4>)
 80009d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <SystemClock_Config+0xd4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009fc:	23a8      	movs	r3, #168	; 0xa8
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a04:	2303      	movs	r3, #3
 8000a06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fecf 	bl	80037b4 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a1c:	f000 f90a 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 f844 	bl	8002acc <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a4a:	f000 f8f3 	bl	8000c34 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	; 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <MX_SPI1_Init+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000aac:	220a      	movs	r2, #10
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_SPI1_Init+0x64>)
 8000ab2:	f003 f91d 	bl	8003cf0 <HAL_SPI_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000abc:	f000 f8ba 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000130 	.word	0x20000130
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_USART2_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f003 fe9c 	bl	8004840 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f891 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000188 	.word	0x20000188
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a39      	ldr	r2, [pc, #228]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a32      	ldr	r2, [pc, #200]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2b      	ldr	r2, [pc, #172]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_GPIO_Init+0x104>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	481f      	ldr	r0, [pc, #124]	; (8000c28 <MX_GPIO_Init+0x108>)
 8000bac:	f000 fcac 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <MX_GPIO_Init+0x10c>)
 8000bb8:	f000 fca6 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	481b      	ldr	r0, [pc, #108]	; (8000c30 <MX_GPIO_Init+0x110>)
 8000bc2:	f000 fca1 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <MX_GPIO_Init+0x108>)
 8000bde:	f000 faff 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_GPIO_Init+0x10c>)
 8000bfc:	f000 faf0 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_GPIO_Init+0x110>)
 8000c18:	f000 fae2 	bl	80011e0 <HAL_GPIO_Init>

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020400 	.word	0x40020400

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f000 fa6c 	bl	800115c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_SPI_MspInit+0x84>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12b      	bne.n	8000d0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cea:	2338      	movs	r3, #56	; 0x38
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_SPI_MspInit+0x8c>)
 8000d06:	f000 fa6b 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40013000 	.word	0x40013000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d96:	f000 fa23 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f89a 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <OTG_FS_IRQHandler+0x10>)
 8000e0a:	f000 fced 	bl	80017e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200016d0 	.word	0x200016d0

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e42:	490e      	ldr	r1, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e58:	4c0b      	ldr	r4, [pc, #44]	; (8000e88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e66:	f7ff ffd7 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f008 fa09 	bl	8009280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fd57 	bl	8000920 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8000e80:	0800936c 	.word	0x0800936c
  ldr r2, =_sbss
 8000e84:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8000e88:	20001dfc 	.word	0x20001dfc

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f94f 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff febc 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f967 	bl	80011c6 <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f92f 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	2000000c 	.word	0x2000000c

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000010 	.word	0x20000010
 8000f58:	200001ec 	.word	0x200001ec

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001ec 	.word	0x200001ec

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000010 	.word	0x20000010

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff3e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff31 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e165      	b.n	80014c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8154 	bne.w	80014c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d005      	beq.n	8001232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	2b02      	cmp	r3, #2
 8001230:	d130      	bne.n	8001294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 0201 	and.w	r2, r3, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b03      	cmp	r3, #3
 800129e:	d017      	beq.n	80012d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80ae 	beq.w	80014c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <HAL_GPIO_Init+0x304>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x308>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d025      	beq.n	80013fa <HAL_GPIO_Init+0x21a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x30c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01f      	beq.n	80013f6 <HAL_GPIO_Init+0x216>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x310>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x212>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x314>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x20e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x318>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x20a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x31c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x206>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a49      	ldr	r2, [pc, #292]	; (8001500 <HAL_GPIO_Init+0x320>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x202>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00c      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013e2:	2307      	movs	r3, #7
 80013e4:	e00a      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x304>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <HAL_GPIO_Init+0x324>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a31      	ldr	r2, [pc, #196]	; (8001504 <HAL_GPIO_Init+0x324>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x324>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a26      	ldr	r2, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x324>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_GPIO_Init+0x324>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <HAL_GPIO_Init+0x324>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_GPIO_Init+0x324>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_GPIO_Init+0x324>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f ae96 	bls.w	80011fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40021400 	.word	0x40021400
 8001500:	40021800 	.word	0x40021800
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800153a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153c:	b08f      	sub	sp, #60	; 0x3c
 800153e:	af0a      	add	r7, sp, #40	; 0x28
 8001540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e116      	b.n	800177a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f007 fb12 	bl	8008b90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f003 fe2f 	bl	80051ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	687e      	ldr	r6, [r7, #4]
 8001598:	466d      	mov	r5, sp
 800159a:	f106 0410 	add.w	r4, r6, #16
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ae:	1d33      	adds	r3, r6, #4
 80015b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f003 fd06 	bl	8004fc4 <USB_CoreInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0d7      	b.n	800177a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fe1d 	bl	8005210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e04a      	b.n	8001672 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	333d      	adds	r3, #61	; 0x3d
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	333c      	adds	r3, #60	; 0x3c
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	b298      	uxth	r0, r3
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	3344      	adds	r3, #68	; 0x44
 8001618:	4602      	mov	r2, r0
 800161a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3340      	adds	r3, #64	; 0x40
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	3348      	adds	r3, #72	; 0x48
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	334c      	adds	r3, #76	; 0x4c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3354      	adds	r3, #84	; 0x54
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	3301      	adds	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3af      	bcc.n	80015dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e044      	b.n	800170c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	3301      	adds	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3b5      	bcc.n	8001682 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	687e      	ldr	r6, [r7, #4]
 800171e:	466d      	mov	r5, sp
 8001720:	f106 0410 	add.w	r4, r6, #16
 8001724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001730:	e885 0003 	stmia.w	r5, {r0, r1}
 8001734:	1d33      	adds	r3, r6, #4
 8001736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f003 fdb5 	bl	80052a8 <USB_DevInit>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e014      	b.n	800177a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f001 f98b 	bl	8002a84 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fef7 	bl	8006566 <USB_DevDisconnect>

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001782 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_PCD_Start+0x1c>
 800179a:	2302      	movs	r3, #2
 800179c:	e020      	b.n	80017e0 <HAL_PCD_Start+0x5e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d109      	bne.n	80017c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d005      	beq.n	80017c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fd00 	bl	80051cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 fea7 	bl	8006524 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b08d      	sub	sp, #52	; 0x34
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 ff65 	bl	80066ce <USB_GetMode>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 84b7 	bne.w	800217a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f004 fec9 	bl	80065a8 <USB_ReadInterrupts>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 84ad 	beq.w	8002178 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f004 feb6 	bl	80065a8 <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d107      	bne.n	8001856 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f002 0202 	and.w	r2, r2, #2
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f004 fea4 	bl	80065a8 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b10      	cmp	r3, #16
 8001868:	d161      	bne.n	800192e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0210 	bic.w	r2, r2, #16
 8001878:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f003 020f 	and.w	r2, r3, #15
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	3304      	adds	r3, #4
 8001898:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	0c5b      	lsrs	r3, r3, #17
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d124      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d035      	beq.n	800191e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	6a38      	ldr	r0, [r7, #32]
 80018c6:	f004 fcdb 	bl	8006280 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d6:	441a      	add	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018e8:	441a      	add	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	621a      	str	r2, [r3, #32]
 80018ee:	e016      	b.n	800191e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	0c5b      	lsrs	r3, r3, #17
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b06      	cmp	r3, #6
 80018fa:	d110      	bne.n	800191e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001902:	2208      	movs	r2, #8
 8001904:	4619      	mov	r1, r3
 8001906:	6a38      	ldr	r0, [r7, #32]
 8001908:	f004 fcba 	bl	8006280 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	6a1a      	ldr	r2, [r3, #32]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001918:	441a      	add	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699a      	ldr	r2, [r3, #24]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0210 	orr.w	r2, r2, #16
 800192c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f004 fe38 	bl	80065a8 <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800193e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001942:	f040 80a7 	bne.w	8001a94 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f004 fe3d 	bl	80065ce <USB_ReadDevAllOutEpInterrupt>
 8001954:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001956:	e099      	b.n	8001a8c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 808e 	beq.w	8001a80 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fe61 	bl	8006636 <USB_ReadDevOutEPInterrupt>
 8001974:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00c      	beq.n	800199a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198c:	461a      	mov	r2, r3
 800198e:	2301      	movs	r3, #1
 8001990:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 feef 	bl	8002778 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b0:	461a      	mov	r2, r3
 80019b2:	2308      	movs	r3, #8
 80019b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 ffc5 	bl	8002948 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d4:	461a      	mov	r2, r3
 80019d6:	2310      	movs	r3, #16
 80019d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d030      	beq.n	8001a46 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ec:	2b80      	cmp	r3, #128	; 0x80
 80019ee:	d109      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	3304      	adds	r3, #4
 8001a18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	78db      	ldrb	r3, [r3, #3]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d108      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2200      	movs	r2, #0
 8001a26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f007 f9ca 	bl	8008dc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a40:	461a      	mov	r2, r3
 8001a42:	2302      	movs	r3, #2
 8001a44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2320      	movs	r3, #32
 8001a60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	3301      	adds	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f47f af62 	bne.w	8001958 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f004 fd85 	bl	80065a8 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001aa8:	f040 80db 	bne.w	8001c62 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 fda6 	bl	8006602 <USB_ReadDevAllInEpInterrupt>
 8001ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001abc:	e0cd      	b.n	8001c5a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80c2 	beq.w	8001c4e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fdcc 	bl	8006672 <USB_ReadDevInEPInterrupt>
 8001ada:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d057      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	2201      	movs	r2, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69f9      	ldr	r1, [r7, #28]
 8001b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b06:	4013      	ands	r3, r2
 8001b08:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b16:	461a      	mov	r2, r3
 8001b18:	2301      	movs	r3, #1
 8001b1a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d132      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	334c      	adds	r3, #76	; 0x4c
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4403      	add	r3, r0
 8001b44:	3348      	adds	r3, #72	; 0x48
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4419      	add	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4403      	add	r3, r0
 8001b58:	334c      	adds	r3, #76	; 0x4c
 8001b5a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d113      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x3a2>
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3354      	adds	r3, #84	; 0x54
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d108      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b82:	461a      	mov	r2, r3
 8001b84:	2101      	movs	r1, #1
 8001b86:	f004 fdd3 	bl	8006730 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f007 f894 	bl	8008cbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bac:	461a      	mov	r2, r3
 8001bae:	2308      	movs	r3, #8
 8001bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2310      	movs	r3, #16
 8001bcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be4:	461a      	mov	r2, r3
 8001be6:	2340      	movs	r3, #64	; 0x40
 8001be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf6:	6a38      	ldr	r0, [r7, #32]
 8001bf8:	f003 fcb4 	bl	8005564 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	3338      	adds	r3, #56	; 0x38
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	78db      	ldrb	r3, [r3, #3]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f007 f8e1 	bl	8008dec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c36:	461a      	mov	r2, r3
 8001c38:	2302      	movs	r3, #2
 8001c3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fd08 	bl	800265e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f af2e 	bne.w	8001abe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 fc9e 	bl	80065a8 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c76:	d122      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f007 fa5b 	bl	800915c <HAL_PCDEx_LPM_Callback>
 8001ca6:	e002      	b.n	8001cae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f007 f87f 	bl	8008dac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fc70 	bl	80065a8 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd2:	d112      	bne.n	8001cfa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d102      	bne.n	8001cea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f007 f83b 	bl	8008d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cf8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 fc52 	bl	80065a8 <USB_ReadInterrupts>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d0e:	d121      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d1e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d111      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d44:	2101      	movs	r1, #1
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f007 fa08 	bl	800915c <HAL_PCDEx_LPM_Callback>
 8001d4c:	e002      	b.n	8001d54 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f007 f806 	bl	8008d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fc25 	bl	80065a8 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d68:	f040 80b7 	bne.w	8001eda <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2110      	movs	r1, #16
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fbec 	bl	8005564 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d90:	e046      	b.n	8001e20 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001da4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	0151      	lsls	r1, r2, #5
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	440a      	add	r2, r1
 8001dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dd8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	0151      	lsls	r1, r2, #5
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	440a      	add	r2, r1
 8001df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001df4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001df8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0a:	0151      	lsls	r1, r2, #5
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	440a      	add	r2, r1
 8001e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3b3      	bcc.n	8001d92 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e56:	f043 030b 	orr.w	r3, r3, #11
 8001e5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6c:	f043 030b 	orr.w	r3, r3, #11
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	e015      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e9a:	f043 030b 	orr.w	r3, r3, #11
 8001e9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001eb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f004 fc33 	bl	8006730 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fb62 	bl	80065a8 <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eee:	d124      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 fbf8 	bl	80066ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fbad 	bl	800565e <USB_GetDevSpeed>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681c      	ldr	r4, [r3, #0]
 8001f10:	f000 fec2 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8001f14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f003 f8b2 	bl	8005088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f006 fef2 	bl	8008d0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 fb32 	bl	80065a8 <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d10a      	bne.n	8001f64 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f006 fecf 	bl	8008cf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f002 0208 	and.w	r2, r2, #8
 8001f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 fb1d 	bl	80065a8 <USB_ReadInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d122      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	e014      	b.n	8001fb4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fb27 	bl	80025fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3e5      	bcc.n	8001f8a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 faf0 	bl	80065a8 <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fd2:	d13b      	bne.n	800204c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd8:	e02b      	b.n	8002032 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3340      	adds	r3, #64	; 0x40
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d115      	bne.n	800202c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002000:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002002:	2b00      	cmp	r3, #0
 8002004:	da12      	bge.n	800202c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	333f      	adds	r3, #63	; 0x3f
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fae8 	bl	80025fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3301      	adds	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	429a      	cmp	r2, r3
 800203a:	d3ce      	bcc.n	8001fda <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800204a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f004 faa9 	bl	80065a8 <USB_ReadInterrupts>
 8002056:	4603      	mov	r3, r0
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002060:	d155      	bne.n	800210e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002062:	2301      	movs	r3, #1
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	e045      	b.n	80020f4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d12e      	bne.n	80020ee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002090:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	da2b      	bge.n	80020ee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80020a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d121      	bne.n	80020ee <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ea:	6053      	str	r3, [r2, #4]
            break;
 80020ec:	e007      	b.n	80020fe <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3301      	adds	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d3b4      	bcc.n	8002068 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800210c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 fa48 	bl	80065a8 <USB_ReadInterrupts>
 8002118:	4603      	mov	r3, r0
 800211a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d10a      	bne.n	800213a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f006 fe73 	bl	8008e10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fa32 	bl	80065a8 <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b04      	cmp	r3, #4
 800214c:	d115      	bne.n	800217a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f006 fe63 	bl	8008e2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	e000      	b.n	800217a <HAL_PCD_IRQHandler+0x992>
      return;
 8002178:	bf00      	nop
    }
  }
}
 800217a:	3734      	adds	r7, #52	; 0x34
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}

08002180 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_PCD_SetAddress+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e013      	b.n	80021c2 <HAL_PCD_SetAddress+0x42>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 f990 	bl	80064d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	4608      	mov	r0, r1
 80021d4:	4611      	mov	r1, r2
 80021d6:	461a      	mov	r2, r3
 80021d8:	4603      	mov	r3, r0
 80021da:	70fb      	strb	r3, [r7, #3]
 80021dc:	460b      	mov	r3, r1
 80021de:	803b      	strh	r3, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da0f      	bge.n	8002210 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 020f 	and.w	r2, r3, #15
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	3338      	adds	r3, #56	; 0x38
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	705a      	strb	r2, [r3, #1]
 800220e:	e00f      	b.n	8002230 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	3304      	adds	r3, #4
 8002228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800223c:	883a      	ldrh	r2, [r7, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	78ba      	ldrb	r2, [r7, #2]
 8002246:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800225a:	78bb      	ldrb	r3, [r7, #2]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d102      	bne.n	8002266 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_PCD_EP_Open+0xaa>
 8002270:	2302      	movs	r3, #2
 8002272:	e00e      	b.n	8002292 <HAL_PCD_EP_Open+0xc8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fa10 	bl	80056a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002290:	7afb      	ldrb	r3, [r7, #11]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da0f      	bge.n	80022ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f003 020f 	and.w	r2, r3, #15
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	3338      	adds	r3, #56	; 0x38
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	705a      	strb	r2, [r3, #1]
 80022cc:	e00f      	b.n	80022ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f003 020f 	and.w	r2, r3, #15
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_PCD_EP_Close+0x6e>
 8002304:	2302      	movs	r3, #2
 8002306:	e00e      	b.n	8002326 <HAL_PCD_EP_Close+0x8c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fa4e 	bl	80057b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	460b      	mov	r3, r1
 800233c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002370:	7afb      	ldrb	r3, [r7, #11]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	b2da      	uxtb	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800238a:	7afb      	ldrb	r3, [r7, #11]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	f003 fd2d 	bl	8005e00 <USB_EP0StartXfer>
 80023a6:	e008      	b.n	80023ba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	f003 fadb 	bl	8005970 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	460b      	mov	r3, r1
 8002402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3338      	adds	r3, #56	; 0x38
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	3304      	adds	r3, #4
 800241a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2200      	movs	r2, #0
 800242c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2201      	movs	r2, #1
 8002432:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	b2da      	uxtb	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d102      	bne.n	800244e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	6979      	ldr	r1, [r7, #20]
 8002466:	f003 fccb 	bl	8005e00 <USB_EP0StartXfer>
 800246a:	e008      	b.n	800247e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6979      	ldr	r1, [r7, #20]
 800247a:	f003 fa79 	bl	8005970 <USB_EPStartXfer>
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	f003 020f 	and.w	r2, r3, #15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d901      	bls.n	80024a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e050      	b.n	8002548 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da0f      	bge.n	80024ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	3338      	adds	r3, #56	; 0x38
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	705a      	strb	r2, [r3, #1]
 80024cc:	e00d      	b.n	80024ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_PCD_EP_SetStall+0x82>
 8002506:	2302      	movs	r3, #2
 8002508:	e01e      	b.n	8002548 <HAL_PCD_EP_SetStall+0xc0>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 ff09 	bl	8006330 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	b2d9      	uxtb	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002538:	461a      	mov	r2, r3
 800253a:	f004 f8f9 	bl	8006730 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d901      	bls.n	800256e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e042      	b.n	80025f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800256e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002572:	2b00      	cmp	r3, #0
 8002574:	da0f      	bge.n	8002596 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	f003 020f 	and.w	r2, r3, #15
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	3338      	adds	r3, #56	; 0x38
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	705a      	strb	r2, [r3, #1]
 8002594:	e00f      	b.n	80025b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 020f 	and.w	r2, r3, #15
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_PCD_EP_ClrStall+0x86>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e00e      	b.n	80025f4 <HAL_PCD_EP_ClrStall+0xa4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 ff11 	bl	800640c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	da0c      	bge.n	800262a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	3338      	adds	r3, #56	; 0x38
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e00c      	b.n	8002644 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f003 020f 	and.w	r2, r3, #15
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fd30 	bl	80060b0 <USB_EPStopXfer>
 8002650:	4603      	mov	r3, r0
 8002652:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002654:	7afb      	ldrb	r3, [r7, #11]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b08a      	sub	sp, #40	; 0x28
 8002662:	af02      	add	r7, sp, #8
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	3338      	adds	r3, #56	; 0x38
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	3304      	adds	r3, #4
 8002684:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1a      	ldr	r2, [r3, #32]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	429a      	cmp	r2, r3
 8002690:	d901      	bls.n	8002696 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06c      	b.n	8002770 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d902      	bls.n	80026b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3303      	adds	r3, #3
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ba:	e02b      	b.n	8002714 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	699a      	ldr	r2, [r3, #24]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d902      	bls.n	80026d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3303      	adds	r3, #3
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4603      	mov	r3, r0
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f003 fd84 	bl	8006204 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	441a      	add	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	441a      	add	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	b29b      	uxth	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	429a      	cmp	r2, r3
 8002728:	d809      	bhi.n	800273e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002732:	429a      	cmp	r2, r3
 8002734:	d203      	bcs.n	800273e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1be      	bne.n	80026bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	429a      	cmp	r2, r3
 8002748:	d811      	bhi.n	800276e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	2201      	movs	r2, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	43db      	mvns	r3, r3
 8002764:	6939      	ldr	r1, [r7, #16]
 8002766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800276a:	4013      	ands	r3, r2
 800276c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	333c      	adds	r3, #60	; 0x3c
 8002790:	3304      	adds	r3, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d17b      	bne.n	80028a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	4a61      	ldr	r2, [pc, #388]	; (8002940 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	f240 80b9 	bls.w	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80b3 	beq.w	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e0:	6093      	str	r3, [r2, #8]
 80027e2:	e0a7      	b.n	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	2320      	movs	r3, #32
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	e098      	b.n	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 8093 	bne.w	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a4b      	ldr	r2, [pc, #300]	; (8002940 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d90f      	bls.n	8002836 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	e07e      	b.n	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	3304      	adds	r3, #4
 800284a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	0159      	lsls	r1, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	440b      	add	r3, r1
 8002858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002862:	1ad2      	subs	r2, r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d114      	bne.n	8002898 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002880:	461a      	mov	r2, r3
 8002882:	2101      	movs	r1, #1
 8002884:	f003 ff54 	bl	8006730 <USB_EP0_OutStart>
 8002888:	e006      	b.n	8002898 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	441a      	add	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f006 f9f2 	bl	8008c88 <HAL_PCD_DataOutStageCallback>
 80028a4:	e046      	b.n	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d124      	bne.n	80028f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ca:	6093      	str	r3, [r2, #8]
 80028cc:	e032      	b.n	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2320      	movs	r3, #32
 80028e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f006 f9c9 	bl	8008c88 <HAL_PCD_DataOutStageCallback>
 80028f6:	e01d      	b.n	8002934 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d114      	bne.n	8002928 <PCD_EP_OutXfrComplete_int+0x1b0>
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002920:	461a      	mov	r2, r3
 8002922:	2100      	movs	r1, #0
 8002924:	f003 ff04 	bl	8006730 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f006 f9aa 	bl	8008c88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	4f54300a 	.word	0x4f54300a
 8002944:	4f54310a 	.word	0x4f54310a

08002948 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	333c      	adds	r3, #60	; 0x3c
 8002960:	3304      	adds	r3, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d90e      	bls.n	800299c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f006 f961 	bl	8008c64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d90c      	bls.n	80029c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029bc:	461a      	mov	r2, r3
 80029be:	2101      	movs	r1, #1
 80029c0:	f003 feb6 	bl	8006730 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	4f54300a 	.word	0x4f54300a

080029d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
 80029e0:	4613      	mov	r3, r2
 80029e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029f2:	883b      	ldrh	r3, [r7, #0]
 80029f4:	0419      	lsls	r1, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002a00:	e028      	b.n	8002a54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e00d      	b.n	8002a32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3340      	adds	r3, #64	; 0x40
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d3ec      	bcc.n	8002a16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a3c:	883b      	ldrh	r3, [r7, #0]
 8002a3e:	0418      	lsls	r0, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	4302      	orrs	r2, r0
 8002a4c:	3340      	adds	r3, #64	; 0x40
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	f043 0303 	orr.w	r3, r3, #3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe f9ce 	bl	8000f5c <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe f9ca 	bl	8000f5c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 fb7f 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe f92e 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08009344 	.word	0x08009344
 8002c90:	20000008 	.word	0x20000008
 8002c94:	2000000c 	.word	0x2000000c

08002c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000008 	.word	0x20000008

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	08009354 	.word	0x08009354

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffdc 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0b5b      	lsrs	r3, r3, #13
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08009354 	.word	0x08009354

08002d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	; 0x30
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d38:	4b6f      	ldr	r3, [pc, #444]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d3e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	496c      	ldr	r1, [pc, #432]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002d56:	2301      	movs	r3, #1
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d66:	4b64      	ldr	r3, [pc, #400]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	4960      	ldr	r1, [pc, #384]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002d84:	2301      	movs	r3, #1
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d017      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4955      	ldr	r1, [pc, #340]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db2:	d101      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002db4:	2301      	movs	r3, #1
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dd0:	4b49      	ldr	r3, [pc, #292]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	4946      	ldr	r1, [pc, #280]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dee:	d101      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002df0:	2301      	movs	r3, #1
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 808a 	beq.w	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a33      	ldr	r2, [pc, #204]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e36:	f7fe f891 	bl	8000f5c <HAL_GetTick>
 8002e3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fe f88d 	bl	8000f5c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e278      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e64:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02f      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d028      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e82:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d114      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe f85b 	bl	8000f5c <HAL_GetTick>
 8002ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe f857 	bl	8000f5c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e240      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ee      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed8:	d114      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eee:	4902      	ldr	r1, [pc, #8]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]
 8002ef4:	e00c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000
 8002f00:	42470e40 	.word	0x42470e40
 8002f04:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a49      	ldr	r2, [pc, #292]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	4944      	ldr	r1, [pc, #272]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f36:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f44:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	4937      	ldr	r1, [pc, #220]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f66:	4b32      	ldr	r3, [pc, #200]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	492e      	ldr	r1, [pc, #184]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f88:	4b29      	ldr	r3, [pc, #164]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	4926      	ldr	r1, [pc, #152]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa6:	d101      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	491a      	ldr	r1, [pc, #104]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d011      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002fda:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe8:	4911      	ldr	r1, [pc, #68]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d005      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300c:	f040 80ff 	bne.w	800320e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003016:	f7fd ffa1 	bl	8000f5c <HAL_GetTick>
 800301a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301c:	e00e      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800301e:	f7fd ff9d 	bl	8000f5c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d907      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e188      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003030:	40023800 	.word	0x40023800
 8003034:	424711e0 	.word	0x424711e0
 8003038:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800303c:	4b7e      	ldr	r3, [pc, #504]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ea      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003064:	2b00      	cmp	r3, #0
 8003066:	d028      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d124      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003070:	4b71      	ldr	r3, [pc, #452]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	0c1b      	lsrs	r3, r3, #16
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	3301      	adds	r3, #1
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003082:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	0e1b      	lsrs	r3, r3, #24
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	431a      	orrs	r2, r3
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	4961      	ldr	r1, [pc, #388]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d035      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e4:	d130      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030e6:	4b54      	ldr	r3, [pc, #336]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030f8:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fe:	0f1b      	lsrs	r3, r3, #28
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	019b      	lsls	r3, r3, #6
 8003110:	431a      	orrs	r2, r3
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	431a      	orrs	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	071b      	lsls	r3, r3, #28
 8003128:	4943      	ldr	r1, [pc, #268]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003136:	f023 021f 	bic.w	r2, r3, #31
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	493d      	ldr	r1, [pc, #244]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d029      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315c:	d124      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003170:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	019b      	lsls	r3, r3, #6
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	431a      	orrs	r2, r3
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	431a      	orrs	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	071b      	lsls	r3, r3, #28
 80031a0:	4925      	ldr	r1, [pc, #148]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d016      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	4917      	ldr	r1, [pc, #92]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031e8:	f7fd feb8 	bl	8000f5c <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031f0:	f7fd feb4 	bl	8000f5c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e09f      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 8095 	bne.w	8003340 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800321c:	f7fd fe9e 	bl	8000f5c <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003222:	e00f      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003224:	f7fd fe9a 	bl	8000f5c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d908      	bls.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e085      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	42470068 	.word	0x42470068
 8003240:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003244:	4b41      	ldr	r3, [pc, #260]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800324c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003250:	d0e8      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02b      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	2b00      	cmp	r3, #0
 8003278:	d127      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800327a:	4b34      	ldr	r3, [pc, #208]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	431a      	orrs	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	061b      	lsls	r3, r3, #24
 80032a8:	4928      	ldr	r1, [pc, #160]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032b0:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	3b01      	subs	r3, #1
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	4922      	ldr	r1, [pc, #136]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01d      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032de:	d118      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	0e1b      	lsrs	r3, r3, #24
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	4910      	ldr	r1, [pc, #64]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003318:	f7fd fe20 	bl	8000f5c <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003320:	f7fd fe1c 	bl	8000f5c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e007      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333e:	d1ef      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3730      	adds	r7, #48	; 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	42470070 	.word	0x42470070

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b0ae      	sub	sp, #184	; 0xb8
 800335a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337a:	4bcb      	ldr	r3, [pc, #812]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b0c      	cmp	r3, #12
 8003384:	f200 8206 	bhi.w	8003794 <HAL_RCC_GetSysClockFreq+0x440>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <HAL_RCC_GetSysClockFreq+0x3c>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033c5 	.word	0x080033c5
 8003394:	08003795 	.word	0x08003795
 8003398:	08003795 	.word	0x08003795
 800339c:	08003795 	.word	0x08003795
 80033a0:	080033cd 	.word	0x080033cd
 80033a4:	08003795 	.word	0x08003795
 80033a8:	08003795 	.word	0x08003795
 80033ac:	08003795 	.word	0x08003795
 80033b0:	080033d5 	.word	0x080033d5
 80033b4:	08003795 	.word	0x08003795
 80033b8:	08003795 	.word	0x08003795
 80033bc:	08003795 	.word	0x08003795
 80033c0:	080035c5 	.word	0x080035c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c4:	4bb9      	ldr	r3, [pc, #740]	; (80036ac <HAL_RCC_GetSysClockFreq+0x358>)
 80033c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80033ca:	e1e7      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033cc:	4bb8      	ldr	r3, [pc, #736]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033d2:	e1e3      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d4:	4bb4      	ldr	r3, [pc, #720]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e0:	4bb1      	ldr	r3, [pc, #708]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d071      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4bae      	ldr	r3, [pc, #696]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80033fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800340e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003412:	4622      	mov	r2, r4
 8003414:	462b      	mov	r3, r5
 8003416:	f04f 0000 	mov.w	r0, #0
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	0159      	lsls	r1, r3, #5
 8003420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003424:	0150      	lsls	r0, r2, #5
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4621      	mov	r1, r4
 800342c:	1a51      	subs	r1, r2, r1
 800342e:	6439      	str	r1, [r7, #64]	; 0x40
 8003430:	4629      	mov	r1, r5
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	647b      	str	r3, [r7, #68]	; 0x44
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003444:	4649      	mov	r1, r9
 8003446:	018b      	lsls	r3, r1, #6
 8003448:	4641      	mov	r1, r8
 800344a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344e:	4641      	mov	r1, r8
 8003450:	018a      	lsls	r2, r1, #6
 8003452:	4641      	mov	r1, r8
 8003454:	1a51      	subs	r1, r2, r1
 8003456:	63b9      	str	r1, [r7, #56]	; 0x38
 8003458:	4649      	mov	r1, r9
 800345a:	eb63 0301 	sbc.w	r3, r3, r1
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800346c:	4649      	mov	r1, r9
 800346e:	00cb      	lsls	r3, r1, #3
 8003470:	4641      	mov	r1, r8
 8003472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003476:	4641      	mov	r1, r8
 8003478:	00ca      	lsls	r2, r1, #3
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	4603      	mov	r3, r0
 8003480:	4622      	mov	r2, r4
 8003482:	189b      	adds	r3, r3, r2
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
 8003486:	462b      	mov	r3, r5
 8003488:	460a      	mov	r2, r1
 800348a:	eb42 0303 	adc.w	r3, r2, r3
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800349c:	4629      	mov	r1, r5
 800349e:	024b      	lsls	r3, r1, #9
 80034a0:	4621      	mov	r1, r4
 80034a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a6:	4621      	mov	r1, r4
 80034a8:	024a      	lsls	r2, r1, #9
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80034c0:	f7fc fea8 	bl	8000214 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4613      	mov	r3, r2
 80034ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034ce:	e067      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d0:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ea:	2300      	movs	r3, #0
 80034ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	0159      	lsls	r1, r3, #5
 8003500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003504:	0150      	lsls	r0, r2, #5
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4621      	mov	r1, r4
 800350c:	1a51      	subs	r1, r2, r1
 800350e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003510:	4629      	mov	r1, r5
 8003512:	eb63 0301 	sbc.w	r3, r3, r1
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003524:	4649      	mov	r1, r9
 8003526:	018b      	lsls	r3, r1, #6
 8003528:	4641      	mov	r1, r8
 800352a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800352e:	4641      	mov	r1, r8
 8003530:	018a      	lsls	r2, r1, #6
 8003532:	4641      	mov	r1, r8
 8003534:	ebb2 0a01 	subs.w	sl, r2, r1
 8003538:	4649      	mov	r1, r9
 800353a:	eb63 0b01 	sbc.w	fp, r3, r1
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800354a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800354e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003552:	4692      	mov	sl, r2
 8003554:	469b      	mov	fp, r3
 8003556:	4623      	mov	r3, r4
 8003558:	eb1a 0303 	adds.w	r3, sl, r3
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	462b      	mov	r3, r5
 8003560:	eb4b 0303 	adc.w	r3, fp, r3
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003572:	4629      	mov	r1, r5
 8003574:	028b      	lsls	r3, r1, #10
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800357c:	4621      	mov	r1, r4
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003588:	2200      	movs	r2, #0
 800358a:	673b      	str	r3, [r7, #112]	; 0x70
 800358c:	677a      	str	r2, [r7, #116]	; 0x74
 800358e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003592:	f7fc fe3f 	bl	8000214 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4613      	mov	r3, r2
 800359c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	3301      	adds	r3, #1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80035b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035c2:	e0eb      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d06b      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	2200      	movs	r2, #0
 80035e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	663b      	str	r3, [r7, #96]	; 0x60
 80035f0:	2300      	movs	r3, #0
 80035f2:	667b      	str	r3, [r7, #100]	; 0x64
 80035f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80035f8:	4622      	mov	r2, r4
 80035fa:	462b      	mov	r3, r5
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	0159      	lsls	r1, r3, #5
 8003606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360a:	0150      	lsls	r0, r2, #5
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4621      	mov	r1, r4
 8003612:	1a51      	subs	r1, r2, r1
 8003614:	61b9      	str	r1, [r7, #24]
 8003616:	4629      	mov	r1, r5
 8003618:	eb63 0301 	sbc.w	r3, r3, r1
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800362a:	4659      	mov	r1, fp
 800362c:	018b      	lsls	r3, r1, #6
 800362e:	4651      	mov	r1, sl
 8003630:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003634:	4651      	mov	r1, sl
 8003636:	018a      	lsls	r2, r1, #6
 8003638:	4651      	mov	r1, sl
 800363a:	ebb2 0801 	subs.w	r8, r2, r1
 800363e:	4659      	mov	r1, fp
 8003640:	eb63 0901 	sbc.w	r9, r3, r1
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003650:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003654:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003658:	4690      	mov	r8, r2
 800365a:	4699      	mov	r9, r3
 800365c:	4623      	mov	r3, r4
 800365e:	eb18 0303 	adds.w	r3, r8, r3
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	462b      	mov	r3, r5
 8003666:	eb49 0303 	adc.w	r3, r9, r3
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003678:	4629      	mov	r1, r5
 800367a:	024b      	lsls	r3, r1, #9
 800367c:	4621      	mov	r1, r4
 800367e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003682:	4621      	mov	r1, r4
 8003684:	024a      	lsls	r2, r1, #9
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800368e:	2200      	movs	r2, #0
 8003690:	65bb      	str	r3, [r7, #88]	; 0x58
 8003692:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003698:	f7fc fdbc 	bl	8000214 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a6:	e065      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x420>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	4b3d      	ldr	r3, [pc, #244]	; (80037ac <HAL_RCC_GetSysClockFreq+0x458>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	2200      	movs	r2, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	4611      	mov	r1, r2
 80036c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036c4:	653b      	str	r3, [r7, #80]	; 0x50
 80036c6:	2300      	movs	r3, #0
 80036c8:	657b      	str	r3, [r7, #84]	; 0x54
 80036ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80036ce:	4642      	mov	r2, r8
 80036d0:	464b      	mov	r3, r9
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	0159      	lsls	r1, r3, #5
 80036dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e0:	0150      	lsls	r0, r2, #5
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4641      	mov	r1, r8
 80036e8:	1a51      	subs	r1, r2, r1
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	4649      	mov	r1, r9
 80036ee:	eb63 0301 	sbc.w	r3, r3, r1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003700:	4659      	mov	r1, fp
 8003702:	018b      	lsls	r3, r1, #6
 8003704:	4651      	mov	r1, sl
 8003706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800370a:	4651      	mov	r1, sl
 800370c:	018a      	lsls	r2, r1, #6
 800370e:	4651      	mov	r1, sl
 8003710:	1a54      	subs	r4, r2, r1
 8003712:	4659      	mov	r1, fp
 8003714:	eb63 0501 	sbc.w	r5, r3, r1
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	00eb      	lsls	r3, r5, #3
 8003722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003726:	00e2      	lsls	r2, r4, #3
 8003728:	4614      	mov	r4, r2
 800372a:	461d      	mov	r5, r3
 800372c:	4643      	mov	r3, r8
 800372e:	18e3      	adds	r3, r4, r3
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	464b      	mov	r3, r9
 8003734:	eb45 0303 	adc.w	r3, r5, r3
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003746:	4629      	mov	r1, r5
 8003748:	028b      	lsls	r3, r1, #10
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003750:	4621      	mov	r1, r4
 8003752:	028a      	lsls	r2, r1, #10
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800375c:	2200      	movs	r2, #0
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003760:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003762:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003766:	f7fc fd55 	bl	8000214 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4613      	mov	r3, r2
 8003770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <HAL_RCC_GetSysClockFreq+0x458>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	0f1b      	lsrs	r3, r3, #28
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003792:	e003      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800379a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	37b8      	adds	r7, #184	; 0xb8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	00f42400 	.word	0x00f42400

080037b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e28d      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8083 	beq.w	80038da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037d4:	4b94      	ldr	r3, [pc, #592]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d019      	beq.n	8003814 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037e0:	4b91      	ldr	r3, [pc, #580]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037ec:	4b8e      	ldr	r3, [pc, #568]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f8:	d00c      	beq.n	8003814 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fa:	4b8b      	ldr	r3, [pc, #556]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d112      	bne.n	800382c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003806:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003812:	d10b      	bne.n	800382c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	4b84      	ldr	r3, [pc, #528]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05b      	beq.n	80038d8 <HAL_RCC_OscConfig+0x124>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d157      	bne.n	80038d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e25a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003834:	d106      	bne.n	8003844 <HAL_RCC_OscConfig+0x90>
 8003836:	4b7c      	ldr	r3, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7b      	ldr	r2, [pc, #492]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e01d      	b.n	8003880 <HAL_RCC_OscConfig+0xcc>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0xb4>
 800384e:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a75      	ldr	r2, [pc, #468]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b73      	ldr	r3, [pc, #460]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a72      	ldr	r2, [pc, #456]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0xcc>
 8003868:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6e      	ldr	r2, [pc, #440]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b6c      	ldr	r3, [pc, #432]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a6b      	ldr	r2, [pc, #428]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800387a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd fb68 	bl	8000f5c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fd fb64 	bl	8000f5c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e21f      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0xdc>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fb54 	bl	8000f5c <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fd fb50 	bl	8000f5c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e20b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ca:	4b57      	ldr	r3, [pc, #348]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x104>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d06f      	beq.n	80039c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038e6:	4b50      	ldr	r3, [pc, #320]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038f2:	4b4d      	ldr	r3, [pc, #308]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d105      	bne.n	800390a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038fe:	4b4a      	ldr	r3, [pc, #296]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003916:	4b44      	ldr	r3, [pc, #272]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x186>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e1d3      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4937      	ldr	r1, [pc, #220]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	e03a      	b.n	80039c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <HAL_RCC_OscConfig+0x278>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fafd 	bl	8000f5c <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003966:	f7fd faf9 	bl	8000f5c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1b4      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4925      	ldr	r1, [pc, #148]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	e015      	b.n	80039c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_RCC_OscConfig+0x278>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fadc 	bl	8000f5c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a8:	f7fd fad8 	bl	8000f5c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e193      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d036      	beq.n	8003a40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d016      	beq.n	8003a08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fabc 	bl	8000f5c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e8:	f7fd fab8 	bl	8000f5c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e173      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_OscConfig+0x274>)
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x234>
 8003a06:	e01b      	b.n	8003a40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0e:	f7fd faa5 	bl	8000f5c <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a14:	e00e      	b.n	8003a34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a16:	f7fd faa1 	bl	8000f5c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d907      	bls.n	8003a34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e15c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	42470000 	.word	0x42470000
 8003a30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	4b8a      	ldr	r3, [pc, #552]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ea      	bne.n	8003a16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8097 	beq.w	8003b7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a52:	4b83      	ldr	r3, [pc, #524]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a7e      	ldr	r2, [pc, #504]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7e:	4b79      	ldr	r3, [pc, #484]	; (8003c64 <HAL_RCC_OscConfig+0x4b0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d118      	bne.n	8003abc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8a:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x4b0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a75      	ldr	r2, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x4b0>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a96:	f7fd fa61 	bl	8000f5c <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9e:	f7fd fa5d 	bl	8000f5c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e118      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <HAL_RCC_OscConfig+0x4b0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d106      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x31e>
 8003ac4:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a65      	ldr	r2, [pc, #404]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad0:	e01c      	b.n	8003b0c <HAL_RCC_OscConfig+0x358>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x340>
 8003ada:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a60      	ldr	r2, [pc, #384]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae6:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4a5d      	ldr	r2, [pc, #372]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	6713      	str	r3, [r2, #112]	; 0x70
 8003af2:	e00b      	b.n	8003b0c <HAL_RCC_OscConfig+0x358>
 8003af4:	4b5a      	ldr	r3, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a59      	ldr	r2, [pc, #356]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
 8003b00:	4b57      	ldr	r3, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a56      	ldr	r2, [pc, #344]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fa22 	bl	8000f5c <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fa1e 	bl	8000f5c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e0d7      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b32:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ee      	beq.n	8003b1c <HAL_RCC_OscConfig+0x368>
 8003b3e:	e014      	b.n	8003b6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fa0c 	bl	8000f5c <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fd fa08 	bl	8000f5c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0c1      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5e:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ee      	bne.n	8003b48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	4a3a      	ldr	r2, [pc, #232]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80ad 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b86:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d060      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d145      	bne.n	8003c26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCC_OscConfig+0x4b4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd f9dc 	bl	8000f5c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fd f9d8 	bl	8000f5c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e093      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	019b      	lsls	r3, r3, #6
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	3b01      	subs	r3, #1
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	061b      	lsls	r3, r3, #24
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	071b      	lsls	r3, r3, #28
 8003bf2:	491b      	ldr	r1, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x4b4>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd f9ad 	bl	8000f5c <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd f9a9 	bl	8000f5c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e064      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x452>
 8003c24:	e05c      	b.n	8003ce0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x4b4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd f996 	bl	8000f5c <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd f992 	bl	8000f5c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e04d      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x480>
 8003c52:	e045      	b.n	8003ce0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e040      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c6c:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <HAL_RCC_OscConfig+0x538>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d030      	beq.n	8003cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d129      	bne.n	8003cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d122      	bne.n	8003cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d119      	bne.n	8003cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d10f      	bne.n	8003cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07b      	b.n	8003dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fc ffa4 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	ea42 0103 	orr.w	r1, r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0104 	and.w	r1, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0210 	and.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b088      	sub	sp, #32
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_SPI_Transmit+0x22>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e126      	b.n	8004072 <HAL_SPI_Transmit+0x270>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2c:	f7fd f896 	bl	8000f5c <HAL_GetTick>
 8003e30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
 8003e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e46:	e10b      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Transmit+0x52>
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e58:	e102      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d007      	beq.n	8003ee0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d14b      	bne.n	8003f82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_Transmit+0xf6>
 8003ef2:	8afb      	ldrh	r3, [r7, #22]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d13e      	bne.n	8003f76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f1c:	e02b      	b.n	8003f76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d112      	bne.n	8003f52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	881a      	ldrh	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	1c9a      	adds	r2, r3, #2
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f50:	e011      	b.n	8003f76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f52:	f7fd f803 	bl	8000f5c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d803      	bhi.n	8003f6a <HAL_SPI_Transmit+0x168>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d102      	bne.n	8003f70 <HAL_SPI_Transmit+0x16e>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f74:	e074      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ce      	bne.n	8003f1e <HAL_SPI_Transmit+0x11c>
 8003f80:	e04c      	b.n	800401c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Transmit+0x18e>
 8003f8a:	8afb      	ldrh	r3, [r7, #22]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d140      	bne.n	8004012 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fb6:	e02c      	b.n	8004012 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d113      	bne.n	8003fee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fec:	e011      	b.n	8004012 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fee:	f7fc ffb5 	bl	8000f5c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d803      	bhi.n	8004006 <HAL_SPI_Transmit+0x204>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d102      	bne.n	800400c <HAL_SPI_Transmit+0x20a>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004010:	e026      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1cd      	bne.n	8003fb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fbcb 	bl	80047bc <SPI_EndRxTxTransaction>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e000      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
  }

error:
 800405e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004070:	7ffb      	ldrb	r3, [r7, #31]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b088      	sub	sp, #32
 800407e:	af02      	add	r7, sp, #8
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004096:	d112      	bne.n	80040be <HAL_SPI_Receive+0x44>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10e      	bne.n	80040be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2204      	movs	r2, #4
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f8f1 	bl	800429c <HAL_SPI_TransmitReceive>
 80040ba:	4603      	mov	r3, r0
 80040bc:	e0ea      	b.n	8004294 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_SPI_Receive+0x52>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e0e3      	b.n	8004294 <HAL_SPI_Receive+0x21a>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d4:	f7fc ff42 	bl	8000f5c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
 80040e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040ea:	e0ca      	b.n	8004282 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_SPI_Receive+0x7e>
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040fc:	e0c1      	b.n	8004282 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2204      	movs	r2, #4
 8004102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004144:	d10f      	bne.n	8004166 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004164:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d007      	beq.n	8004184 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004182:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d162      	bne.n	8004252 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800418c:	e02e      	b.n	80041ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d115      	bne.n	80041c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f103 020c 	add.w	r2, r3, #12
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c6:	e011      	b.n	80041ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c8:	f7fc fec8 	bl	8000f5c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d803      	bhi.n	80041e0 <HAL_SPI_Receive+0x166>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d102      	bne.n	80041e6 <HAL_SPI_Receive+0x16c>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041ea:	e04a      	b.n	8004282 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1cb      	bne.n	800418e <HAL_SPI_Receive+0x114>
 80041f6:	e031      	b.n	800425c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d113      	bne.n	800422e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	b292      	uxth	r2, r2
 8004212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	1c9a      	adds	r2, r3, #2
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800422c:	e011      	b.n	8004252 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422e:	f7fc fe95 	bl	8000f5c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d803      	bhi.n	8004246 <HAL_SPI_Receive+0x1cc>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d102      	bne.n	800424c <HAL_SPI_Receive+0x1d2>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004250:	e017      	b.n	8004282 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1cd      	bne.n	80041f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fa45 	bl	80046f0 <SPI_EndRxTransaction>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
 800427e:	e000      	b.n	8004282 <HAL_SPI_Receive+0x208>
  }

error :
 8004280:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004292:	7dfb      	ldrb	r3, [r7, #23]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	; 0x30
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042aa:	2301      	movs	r3, #1
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x26>
 80042be:	2302      	movs	r3, #2
 80042c0:	e18a      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x33c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ca:	f7fc fe47 	bl	8000f5c <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042e0:	887b      	ldrh	r3, [r7, #2]
 80042e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d00f      	beq.n	800430c <HAL_SPI_TransmitReceive+0x70>
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f2:	d107      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x68>
 80042fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004300:	2b04      	cmp	r3, #4
 8004302:	d003      	beq.n	800430c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004304:	2302      	movs	r3, #2
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800430a:	e15b      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_SPI_TransmitReceive+0x82>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_SPI_TransmitReceive+0x82>
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004324:	e14e      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b04      	cmp	r3, #4
 8004330:	d003      	beq.n	800433a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2205      	movs	r2, #5
 8004336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	887a      	ldrh	r2, [r7, #2]
 800434a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	887a      	ldrh	r2, [r7, #2]
 8004362:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d007      	beq.n	800438e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004396:	d178      	bne.n	800448a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x10a>
 80043a0:	8b7b      	ldrh	r3, [r7, #26]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d166      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	1c9a      	adds	r2, r3, #2
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ca:	e053      	b.n	8004474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d11b      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x176>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d016      	beq.n	8004412 <HAL_SPI_TransmitReceive+0x176>
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d113      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d119      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x1b8>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d014      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	b292      	uxth	r2, r2
 8004436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	1c9a      	adds	r2, r3, #2
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004450:	2301      	movs	r3, #1
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004454:	f7fc fd82 	bl	8000f5c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004460:	429a      	cmp	r2, r3
 8004462:	d807      	bhi.n	8004474 <HAL_SPI_TransmitReceive+0x1d8>
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d003      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004472:	e0a7      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1a6      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x130>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1a1      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x130>
 8004488:	e07c      	b.n	8004584 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x1fc>
 8004492:	8b7b      	ldrh	r3, [r7, #26]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d16b      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044be:	e057      	b.n	8004570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d11c      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x26c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x26c>
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d114      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d119      	bne.n	800454a <HAL_SPI_TransmitReceive+0x2ae>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d014      	beq.n	800454a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004546:	2301      	movs	r3, #1
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800454a:	f7fc fd07 	bl	8000f5c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004556:	429a      	cmp	r2, r3
 8004558:	d803      	bhi.n	8004562 <HAL_SPI_TransmitReceive+0x2c6>
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d102      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x2cc>
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800456e:	e029      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1a2      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x224>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d19d      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f917 	bl	80047bc <SPI_EndRxTxTransaction>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045a0:	e010      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	e000      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3730      	adds	r7, #48	; 0x30
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f0:	f7fc fcb4 	bl	8000f5c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004600:	f7fc fcac 	bl	8000f5c <HAL_GetTick>
 8004604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004616:	e054      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d050      	beq.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004620:	f7fc fc9c 	bl	8000f5c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	429a      	cmp	r2, r3
 800462e:	d902      	bls.n	8004636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d13d      	bne.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464e:	d111      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	d004      	beq.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d107      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467c:	d10f      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800469c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e017      	b.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3b01      	subs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d19b      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000008 	.word	0x20000008

080046f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004704:	d111      	bne.n	800472a <SPI_EndRxTransaction+0x3a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470e:	d004      	beq.n	800471a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004718:	d107      	bne.n	800472a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004728:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004732:	d12a      	bne.n	800478a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d012      	beq.n	8004764 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff ff49 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02d      	beq.n	80047b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e026      	b.n	80047b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	2101      	movs	r1, #1
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff ff36 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01a      	beq.n	80047b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e013      	b.n	80047b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2200      	movs	r2, #0
 8004792:	2101      	movs	r1, #1
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff ff23 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e000      	b.n	80047b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <SPI_EndRxTxTransaction+0x7c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <SPI_EndRxTxTransaction+0x80>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0d5b      	lsrs	r3, r3, #21
 80047d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e6:	d112      	bne.n	800480e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2180      	movs	r1, #128	; 0x80
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fef4 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e00f      	b.n	800482e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3b01      	subs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d0f2      	beq.n	800480e <SPI_EndRxTxTransaction+0x52>
 8004828:	e000      	b.n	800482c <SPI_EndRxTxTransaction+0x70>
        break;
 800482a:	bf00      	nop
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000008 	.word	0x20000008
 800483c:	165e9f81 	.word	0x165e9f81

08004840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e03f      	b.n	80048d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fa5a 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f929 	bl	8004adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b08a      	sub	sp, #40	; 0x28
 80048de:	af02      	add	r7, sp, #8
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d17c      	bne.n	80049f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_UART_Transmit+0x2c>
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e075      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit+0x3e>
 8004914:	2302      	movs	r3, #2
 8004916:	e06e      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fc fb15 	bl	8000f5c <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004948:	d108      	bne.n	800495c <HAL_UART_Transmit+0x82>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e003      	b.n	8004964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004960:	2300      	movs	r3, #0
 8004962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800496c:	e02a      	b.n	80049c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f840 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e036      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	3302      	adds	r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e007      	b.n	80049b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cf      	bne.n	800496e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f810 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b090      	sub	sp, #64	; 0x40
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	e050      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d04c      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1e:	f7fc fa9d 	bl	8000f5c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d241      	bcs.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	613b      	str	r3, [r7, #16]
   return(result);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a82:	623a      	str	r2, [r7, #32]
 8004a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d09f      	beq.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3740      	adds	r7, #64	; 0x40
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae0:	b0c0      	sub	sp, #256	; 0x100
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	ea40 0301 	orr.w	r3, r0, r1
 8004b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b34:	f021 010c 	bic.w	r1, r1, #12
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b42:	430b      	orrs	r3, r1
 8004b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	6999      	ldr	r1, [r3, #24]
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	ea40 0301 	orr.w	r3, r0, r1
 8004b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <UART_SetConfig+0x2cc>)
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d005      	beq.n	8004b7c <UART_SetConfig+0xa0>
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b8d      	ldr	r3, [pc, #564]	; (8004dac <UART_SetConfig+0x2d0>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d104      	bne.n	8004b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7fe f8ac 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8004b80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b84:	e003      	b.n	8004b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fe f893 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	f040 810c 	bne.w	8004db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	eb12 0801 	adds.w	r8, r2, r1
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	eb43 0901 	adc.w	r9, r3, r1
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bde:	4690      	mov	r8, r2
 8004be0:	4699      	mov	r9, r3
 8004be2:	4623      	mov	r3, r4
 8004be4:	eb18 0303 	adds.w	r3, r8, r3
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bec:	462b      	mov	r3, r5
 8004bee:	eb49 0303 	adc.w	r3, r9, r3
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	18db      	adds	r3, r3, r3
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c10:	4613      	mov	r3, r2
 8004c12:	eb42 0303 	adc.w	r3, r2, r3
 8004c16:	657b      	str	r3, [r7, #84]	; 0x54
 8004c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c20:	f7fb faf8 	bl	8000214 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	011c      	lsls	r4, r3, #4
 8004c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c44:	4642      	mov	r2, r8
 8004c46:	464b      	mov	r3, r9
 8004c48:	1891      	adds	r1, r2, r2
 8004c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c54:	4641      	mov	r1, r8
 8004c56:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c74:	4692      	mov	sl, r2
 8004c76:	469b      	mov	fp, r3
 8004c78:	4643      	mov	r3, r8
 8004c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c82:	464b      	mov	r3, r9
 8004c84:	eb4b 0303 	adc.w	r3, fp, r3
 8004c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	18db      	adds	r3, r3, r3
 8004ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
 8004cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb6:	f7fb faad 	bl	8000214 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2264      	movs	r2, #100	; 0x64
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	1acb      	subs	r3, r1, r3
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce4:	441c      	add	r4, r3
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d00:	415b      	adcs	r3, r3
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d08:	4641      	mov	r1, r8
 8004d0a:	1851      	adds	r1, r2, r1
 8004d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0e:	4649      	mov	r1, r9
 8004d10:	414b      	adcs	r3, r1
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d20:	4659      	mov	r1, fp
 8004d22:	00cb      	lsls	r3, r1, #3
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	00ca      	lsls	r2, r1, #3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	4642      	mov	r2, r8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	18db      	adds	r3, r3, r3
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d62:	4613      	mov	r3, r2
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d72:	f7fb fa4f 	bl	8000214 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 0207 	and.w	r2, r3, #7
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4422      	add	r2, r4
 8004da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da4:	e105      	b.n	8004fb2 <UART_SetConfig+0x4d6>
 8004da6:	bf00      	nop
 8004da8:	40011000 	.word	0x40011000
 8004dac:	40011400 	.word	0x40011400
 8004db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	464b      	mov	r3, r9
 8004dca:	1891      	adds	r1, r2, r2
 8004dcc:	6239      	str	r1, [r7, #32]
 8004dce:	415b      	adcs	r3, r3
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	1854      	adds	r4, r2, r1
 8004dda:	4649      	mov	r1, r9
 8004ddc:	eb43 0501 	adc.w	r5, r3, r1
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	00eb      	lsls	r3, r5, #3
 8004dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dee:	00e2      	lsls	r2, r4, #3
 8004df0:	4614      	mov	r4, r2
 8004df2:	461d      	mov	r5, r3
 8004df4:	4643      	mov	r3, r8
 8004df6:	18e3      	adds	r3, r4, r3
 8004df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	eb45 0303 	adc.w	r3, r5, r3
 8004e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e22:	4629      	mov	r1, r5
 8004e24:	008b      	lsls	r3, r1, #2
 8004e26:	4621      	mov	r1, r4
 8004e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	008a      	lsls	r2, r1, #2
 8004e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e34:	f7fb f9ee 	bl	8000214 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4b60      	ldr	r3, [pc, #384]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	011c      	lsls	r4, r3, #4
 8004e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	61b9      	str	r1, [r7, #24]
 8004e60:	415b      	adcs	r3, r3
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e68:	4641      	mov	r1, r8
 8004e6a:	1851      	adds	r1, r2, r1
 8004e6c:	6139      	str	r1, [r7, #16]
 8004e6e:	4649      	mov	r1, r9
 8004e70:	414b      	adcs	r3, r1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e80:	4659      	mov	r1, fp
 8004e82:	00cb      	lsls	r3, r1, #3
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	00ca      	lsls	r2, r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	4642      	mov	r2, r8
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	eb42 0303 	adc.w	r3, r2, r3
 8004ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	008b      	lsls	r3, r1, #2
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eca:	4641      	mov	r1, r8
 8004ecc:	008a      	lsls	r2, r1, #2
 8004ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ed2:	f7fb f99f 	bl	8000214 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004edc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	2164      	movs	r1, #100	; 0x64
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	3332      	adds	r3, #50	; 0x32
 8004eee:	4a34      	ldr	r2, [pc, #208]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efa:	441c      	add	r4, r3
 8004efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f00:	2200      	movs	r2, #0
 8004f02:	673b      	str	r3, [r7, #112]	; 0x70
 8004f04:	677a      	str	r2, [r7, #116]	; 0x74
 8004f06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	1891      	adds	r1, r2, r2
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	415b      	adcs	r3, r3
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	1851      	adds	r1, r2, r1
 8004f1e:	6039      	str	r1, [r7, #0]
 8004f20:	4649      	mov	r1, r9
 8004f22:	414b      	adcs	r3, r1
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f32:	4659      	mov	r1, fp
 8004f34:	00cb      	lsls	r3, r1, #3
 8004f36:	4651      	mov	r1, sl
 8004f38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	00ca      	lsls	r2, r1, #3
 8004f40:	4610      	mov	r0, r2
 8004f42:	4619      	mov	r1, r3
 8004f44:	4603      	mov	r3, r0
 8004f46:	4642      	mov	r2, r8
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f60:	667a      	str	r2, [r7, #100]	; 0x64
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f6e:	4649      	mov	r1, r9
 8004f70:	008b      	lsls	r3, r1, #2
 8004f72:	4641      	mov	r1, r8
 8004f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f78:	4641      	mov	r1, r8
 8004f7a:	008a      	lsls	r2, r1, #2
 8004f7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f80:	f7fb f948 	bl	8000214 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2164      	movs	r1, #100	; 0x64
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	3332      	adds	r3, #50	; 0x32
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	f003 020f 	and.w	r2, r3, #15
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4422      	add	r2, r4
 8004fb0:	609a      	str	r2, [r3, #8]
}
 8004fb2:	bf00      	nop
 8004fb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbe:	bf00      	nop
 8004fc0:	51eb851f 	.word	0x51eb851f

08004fc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	f107 001c 	add.w	r0, r7, #28
 8004fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d122      	bne.n	8005022 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 fbe8 	bl	80067ec <USB_CoreReset>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	e01a      	b.n	8005058 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fbdc 	bl	80067ec <USB_CoreReset>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
 800504a:	e005      	b.n	8005058 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10b      	bne.n	8005076 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0206 	orr.w	r2, r3, #6
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005082:	b004      	add	sp, #16
 8005084:	4770      	bx	lr
	...

08005088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d165      	bne.n	8005168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a41      	ldr	r2, [pc, #260]	; (80051a4 <USB_SetTurnaroundTime+0x11c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d906      	bls.n	80050b2 <USB_SetTurnaroundTime+0x2a>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a40      	ldr	r2, [pc, #256]	; (80051a8 <USB_SetTurnaroundTime+0x120>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d202      	bcs.n	80050b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050ac:	230f      	movs	r3, #15
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e062      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <USB_SetTurnaroundTime+0x120>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d306      	bcc.n	80050c8 <USB_SetTurnaroundTime+0x40>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <USB_SetTurnaroundTime+0x124>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d202      	bcs.n	80050c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050c2:	230e      	movs	r3, #14
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e057      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a38      	ldr	r2, [pc, #224]	; (80051ac <USB_SetTurnaroundTime+0x124>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d306      	bcc.n	80050de <USB_SetTurnaroundTime+0x56>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a37      	ldr	r2, [pc, #220]	; (80051b0 <USB_SetTurnaroundTime+0x128>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d202      	bcs.n	80050de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050d8:	230d      	movs	r3, #13
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e04c      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <USB_SetTurnaroundTime+0x128>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d306      	bcc.n	80050f4 <USB_SetTurnaroundTime+0x6c>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a32      	ldr	r2, [pc, #200]	; (80051b4 <USB_SetTurnaroundTime+0x12c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050ee:	230c      	movs	r3, #12
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e041      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a2f      	ldr	r2, [pc, #188]	; (80051b4 <USB_SetTurnaroundTime+0x12c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <USB_SetTurnaroundTime+0x82>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <USB_SetTurnaroundTime+0x130>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d802      	bhi.n	800510a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005104:	230b      	movs	r3, #11
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e036      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <USB_SetTurnaroundTime+0x130>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d906      	bls.n	8005120 <USB_SetTurnaroundTime+0x98>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a29      	ldr	r2, [pc, #164]	; (80051bc <USB_SetTurnaroundTime+0x134>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800511a:	230a      	movs	r3, #10
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e02b      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a26      	ldr	r2, [pc, #152]	; (80051bc <USB_SetTurnaroundTime+0x134>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d906      	bls.n	8005136 <USB_SetTurnaroundTime+0xae>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4a25      	ldr	r2, [pc, #148]	; (80051c0 <USB_SetTurnaroundTime+0x138>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d202      	bcs.n	8005136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005130:	2309      	movs	r3, #9
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e020      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <USB_SetTurnaroundTime+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d306      	bcc.n	800514c <USB_SetTurnaroundTime+0xc4>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <USB_SetTurnaroundTime+0x13c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d802      	bhi.n	800514c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005146:	2308      	movs	r3, #8
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e015      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <USB_SetTurnaroundTime+0x13c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d906      	bls.n	8005162 <USB_SetTurnaroundTime+0xda>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <USB_SetTurnaroundTime+0x140>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d202      	bcs.n	8005162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800515c:	2307      	movs	r3, #7
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e00a      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005162:	2306      	movs	r3, #6
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e007      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800516e:	2309      	movs	r3, #9
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e001      	b.n	8005178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005174:	2309      	movs	r3, #9
 8005176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	00d8acbf 	.word	0x00d8acbf
 80051a8:	00e4e1c0 	.word	0x00e4e1c0
 80051ac:	00f42400 	.word	0x00f42400
 80051b0:	01067380 	.word	0x01067380
 80051b4:	011a499f 	.word	0x011a499f
 80051b8:	01312cff 	.word	0x01312cff
 80051bc:	014ca43f 	.word	0x014ca43f
 80051c0:	016e3600 	.word	0x016e3600
 80051c4:	01a6ab1f 	.word	0x01a6ab1f
 80051c8:	01e84800 	.word	0x01e84800

080051cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d115      	bne.n	800525e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800523e:	2001      	movs	r0, #1
 8005240:	f7fb fe98 	bl	8000f74 <HAL_Delay>
      ms++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 fa3f 	bl	80066ce <USB_GetMode>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d01e      	beq.n	8005294 <USB_SetCurrentMode+0x84>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b31      	cmp	r3, #49	; 0x31
 800525a:	d9f0      	bls.n	800523e <USB_SetCurrentMode+0x2e>
 800525c:	e01a      	b.n	8005294 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d115      	bne.n	8005290 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005270:	2001      	movs	r0, #1
 8005272:	f7fb fe7f 	bl	8000f74 <HAL_Delay>
      ms++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 fa26 	bl	80066ce <USB_GetMode>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <USB_SetCurrentMode+0x84>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b31      	cmp	r3, #49	; 0x31
 800528c:	d9f0      	bls.n	8005270 <USB_SetCurrentMode+0x60>
 800528e:	e001      	b.n	8005294 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e005      	b.n	80052a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b32      	cmp	r3, #50	; 0x32
 8005298:	d101      	bne.n	800529e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a8:	b084      	sub	sp, #16
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e009      	b.n	80052dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3340      	adds	r3, #64	; 0x40
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3301      	adds	r3, #1
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b0e      	cmp	r3, #14
 80052e0:	d9f2      	bls.n	80052c8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d11c      	bne.n	8005322 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e005      	b.n	800532e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005334:	461a      	mov	r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	4619      	mov	r1, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	461a      	mov	r2, r3
 800534a:	680b      	ldr	r3, [r1, #0]
 800534c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10c      	bne.n	800536e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800535a:	2100      	movs	r1, #0
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f965 	bl	800562c <USB_SetDevSpeed>
 8005362:	e008      	b.n	8005376 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005364:	2101      	movs	r1, #1
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f960 	bl	800562c <USB_SetDevSpeed>
 800536c:	e003      	b.n	8005376 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800536e:	2103      	movs	r1, #3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f95b 	bl	800562c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005376:	2110      	movs	r1, #16
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8f3 	bl	8005564 <USB_FlushTxFifo>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f91f 	bl	80055cc <USB_FlushRxFifo>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	461a      	mov	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	461a      	mov	r2, r3
 80053b8:	2300      	movs	r3, #0
 80053ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e043      	b.n	800544a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d8:	d118      	bne.n	800540c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	461a      	mov	r2, r3
 80053ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e013      	b.n	800541e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	461a      	mov	r2, r3
 8005404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e008      	b.n	800541e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	461a      	mov	r2, r3
 800541a:	2300      	movs	r3, #0
 800541c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	461a      	mov	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	461a      	mov	r2, r3
 800543e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	3301      	adds	r3, #1
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	429a      	cmp	r2, r3
 8005450:	d3b7      	bcc.n	80053c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	e043      	b.n	80054e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546e:	d118      	bne.n	80054a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	461a      	mov	r2, r3
 8005484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e013      	b.n	80054b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	461a      	mov	r2, r3
 800549a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	e008      	b.n	80054b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	2300      	movs	r3, #0
 80054c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	461a      	mov	r2, r3
 80054d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3301      	adds	r3, #1
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d3b7      	bcc.n	8005458 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005508:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f043 0210 	orr.w	r2, r3, #16
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699a      	ldr	r2, [r3, #24]
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <USB_DevInit+0x2b8>)
 8005522:	4313      	orrs	r3, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f043 0208 	orr.w	r2, r3, #8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005548:	f043 0304 	orr.w	r3, r3, #4
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800555c:	b004      	add	sp, #16
 800555e:	4770      	bx	lr
 8005560:	803c3800 	.word	0x803c3800

08005564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3301      	adds	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <USB_FlushTxFifo+0x64>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d901      	bls.n	8005584 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e01b      	b.n	80055bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	daf2      	bge.n	8005572 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	019b      	lsls	r3, r3, #6
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <USB_FlushTxFifo+0x64>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e006      	b.n	80055bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d0f0      	beq.n	800559c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	00030d40 	.word	0x00030d40

080055cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3301      	adds	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a11      	ldr	r2, [pc, #68]	; (8005628 <USB_FlushRxFifo+0x5c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e018      	b.n	800561c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	daf2      	bge.n	80055d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2210      	movs	r2, #16
 80055fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a08      	ldr	r2, [pc, #32]	; (8005628 <USB_FlushRxFifo+0x5c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e006      	b.n	800561c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b10      	cmp	r3, #16
 8005618:	d0f0      	beq.n	80055fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	00030d40 	.word	0x00030d40

0800562c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0306 	and.w	r3, r3, #6
 8005676:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
 8005682:	e00a      	b.n	800569a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d002      	beq.n	8005690 <USB_GetDevSpeed+0x32>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b06      	cmp	r3, #6
 800568e:	d102      	bne.n	8005696 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005690:	2302      	movs	r3, #2
 8005692:	75fb      	strb	r3, [r7, #23]
 8005694:	e001      	b.n	800569a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005696:	230f      	movs	r3, #15
 8005698:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
}
 800569c:	4618      	mov	r0, r3
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d13a      	bne.n	800573a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	b29b      	uxth	r3, r3
 80056dc:	68f9      	ldr	r1, [r7, #12]
 80056de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d155      	bne.n	80057a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	791b      	ldrb	r3, [r3, #4]
 8005716:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005718:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	059b      	lsls	r3, r3, #22
 800571e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005720:	4313      	orrs	r3, r2
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e036      	b.n	80057a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	2101      	movs	r1, #1
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	041b      	lsls	r3, r3, #16
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005758:	4313      	orrs	r3, r2
 800575a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11a      	bne.n	80057a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800578e:	430b      	orrs	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d161      	bne.n	8005898 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ea:	d11f      	bne.n	800582c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800580a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800582a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	2101      	movs	r1, #1
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	b29b      	uxth	r3, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584c:	4013      	ands	r3, r2
 800584e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	2101      	movs	r1, #1
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	b29b      	uxth	r3, r3
 8005868:	43db      	mvns	r3, r3
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005870:	4013      	ands	r3, r2
 8005872:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	0159      	lsls	r1, r3, #5
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	440b      	add	r3, r1
 800588a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588e:	4619      	mov	r1, r3
 8005890:	4b35      	ldr	r3, [pc, #212]	; (8005968 <USB_DeactivateEndpoint+0x1b0>)
 8005892:	4013      	ands	r3, r2
 8005894:	600b      	str	r3, [r1, #0]
 8005896:	e060      	b.n	800595a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ae:	d11f      	bne.n	80058f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	2101      	movs	r1, #1
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	43db      	mvns	r3, r3
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005910:	4013      	ands	r3, r2
 8005912:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	2101      	movs	r1, #1
 8005926:	fa01 f303 	lsl.w	r3, r1, r3
 800592a:	041b      	lsls	r3, r3, #16
 800592c:	43db      	mvns	r3, r3
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005934:	4013      	ands	r3, r2
 8005936:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	0159      	lsls	r1, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	440b      	add	r3, r1
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	4619      	mov	r1, r3
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <USB_DeactivateEndpoint+0x1b4>)
 8005956:	4013      	ands	r3, r2
 8005958:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	ec337800 	.word	0xec337800
 800596c:	eff37800 	.word	0xeff37800

08005970 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b01      	cmp	r3, #1
 800598e:	f040 815c 	bne.w	8005c4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d132      	bne.n	8005a00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f8:	0cdb      	lsrs	r3, r3, #19
 80059fa:	04db      	lsls	r3, r3, #19
 80059fc:	6113      	str	r3, [r2, #16]
 80059fe:	e074      	b.n	8005aea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1a:	0cdb      	lsrs	r3, r3, #19
 8005a1c:	04db      	lsls	r3, r3, #19
 8005a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6999      	ldr	r1, [r3, #24]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	440b      	add	r3, r1
 8005a5c:	1e59      	subs	r1, r3, #1
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a68:	4b9d      	ldr	r3, [pc, #628]	; (8005ce0 <USB_EPStartXfer+0x370>)
 8005a6a:	400b      	ands	r3, r1
 8005a6c:	69b9      	ldr	r1, [r7, #24]
 8005a6e:	0148      	lsls	r0, r1, #5
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	4401      	add	r1, r0
 8005a74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a92:	69b9      	ldr	r1, [r7, #24]
 8005a94:	0148      	lsls	r0, r1, #5
 8005a96:	69f9      	ldr	r1, [r7, #28]
 8005a98:	4401      	add	r1, r0
 8005a9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	791b      	ldrb	r3, [r3, #4]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d11f      	bne.n	8005aea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ac8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d14b      	bne.n	8005b88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	791b      	ldrb	r3, [r3, #4]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d128      	bne.n	8005b66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d110      	bne.n	8005b46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e00f      	b.n	8005b66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e133      	b.n	8005df0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ba6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	791b      	ldrb	r3, [r3, #4]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d015      	beq.n	8005bdc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 811b 	beq.w	8005df0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	69f9      	ldr	r1, [r7, #28]
 8005bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	634b      	str	r3, [r1, #52]	; 0x34
 8005bda:	e109      	b.n	8005df0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d110      	bne.n	8005c0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	e00f      	b.n	8005c2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6919      	ldr	r1, [r3, #16]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	781a      	ldrb	r2, [r3, #0]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	b298      	uxth	r0, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	4603      	mov	r3, r0
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fade 	bl	8006204 <USB_WritePacket>
 8005c48:	e0d2      	b.n	8005df0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c64:	0cdb      	lsrs	r3, r3, #19
 8005c66:	04db      	lsls	r3, r3, #19
 8005c68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d126      	bne.n	8005ce4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	0148      	lsls	r0, r1, #5
 8005cb0:	69f9      	ldr	r1, [r7, #28]
 8005cb2:	4401      	add	r1, r0
 8005cb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cda:	6113      	str	r3, [r2, #16]
 8005cdc:	e03a      	b.n	8005d54 <USB_EPStartXfer+0x3e4>
 8005cde:	bf00      	nop
 8005ce0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	1e5a      	subs	r2, r3, #1
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	8afa      	ldrh	r2, [r7, #22]
 8005d00:	fb03 f202 	mul.w	r2, r3, r2
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	04d9      	lsls	r1, r3, #19
 8005d1a:	4b38      	ldr	r3, [pc, #224]	; (8005dfc <USB_EPStartXfer+0x48c>)
 8005d1c:	400b      	ands	r3, r1
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	0148      	lsls	r0, r1, #5
 8005d22:	69f9      	ldr	r1, [r7, #28]
 8005d24:	4401      	add	r1, r0
 8005d26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	0148      	lsls	r0, r1, #5
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	4401      	add	r1, r0
 8005d4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d50:	4313      	orrs	r3, r2
 8005d52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d10d      	bne.n	8005d76 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6919      	ldr	r1, [r3, #16]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	460a      	mov	r2, r1
 8005d74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	791b      	ldrb	r3, [r3, #4]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d128      	bne.n	8005dd0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d110      	bne.n	8005db0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	e00f      	b.n	8005dd0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	1ff80000 	.word	0x1ff80000

08005e00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	f040 80ce 	bne.w	8005fbe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d132      	bne.n	8005e90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	0cdb      	lsrs	r3, r3, #19
 8005e8a:	04db      	lsls	r3, r3, #19
 8005e8c:	6113      	str	r3, [r2, #16]
 8005e8e:	e04e      	b.n	8005f2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	0cdb      	lsrs	r3, r3, #19
 8005eac:	04db      	lsls	r3, r3, #19
 8005eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ece:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ed2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d903      	bls.n	8005ee8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f1e:	6939      	ldr	r1, [r7, #16]
 8005f20:	0148      	lsls	r0, r1, #5
 8005f22:	6979      	ldr	r1, [r7, #20]
 8005f24:	4401      	add	r1, r0
 8005f26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d11e      	bne.n	8005f72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d009      	beq.n	8005f50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e097      	b.n	80060a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8083 	beq.w	80060a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	2101      	movs	r1, #1
 8005fae:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	634b      	str	r3, [r1, #52]	; 0x34
 8005fbc:	e071      	b.n	80060a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd8:	0cdb      	lsrs	r3, r3, #19
 8005fda:	04db      	lsls	r3, r3, #19
 8005fdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006000:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006050:	6939      	ldr	r1, [r7, #16]
 8006052:	0148      	lsls	r0, r1, #5
 8006054:	6979      	ldr	r1, [r7, #20]
 8006056:	4401      	add	r1, r0
 8006058:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800605c:	4313      	orrs	r3, r2
 800605e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d10d      	bne.n	8006082 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6919      	ldr	r1, [r3, #16]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	460a      	mov	r2, r1
 8006080:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d14a      	bne.n	8006164 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e6:	f040 8086 	bne.w	80061f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006108:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800610c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006130:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f242 7210 	movw	r2, #10000	; 0x2710
 800613e:	4293      	cmp	r3, r2
 8006140:	d902      	bls.n	8006148 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	75fb      	strb	r3, [r7, #23]
          break;
 8006146:	e056      	b.n	80061f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800615c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006160:	d0e7      	beq.n	8006132 <USB_EPStopXfer+0x82>
 8006162:	e048      	b.n	80061f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800617c:	d13b      	bne.n	80061f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	7812      	ldrb	r2, [r2, #0]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d902      	bls.n	80061dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
          break;
 80061da:	e00c      	b.n	80061f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f4:	d0e7      	beq.n	80061c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	; 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	460b      	mov	r3, r1
 8006214:	71fb      	strb	r3, [r7, #7]
 8006216:	4613      	mov	r3, r2
 8006218:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006222:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d123      	bne.n	8006272 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800622a:	88bb      	ldrh	r3, [r7, #4]
 800622c:	3303      	adds	r3, #3
 800622e:	089b      	lsrs	r3, r3, #2
 8006230:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e018      	b.n	800626a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	031a      	lsls	r2, r3, #12
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006244:	461a      	mov	r2, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	3301      	adds	r3, #1
 8006250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	3301      	adds	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	3301      	adds	r3, #1
 8006262:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	3301      	adds	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	429a      	cmp	r2, r3
 8006270:	d3e2      	bcc.n	8006238 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3724      	adds	r7, #36	; 0x24
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006280:	b480      	push	{r7}
 8006282:	b08b      	sub	sp, #44	; 0x2c
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	089b      	lsrs	r3, r3, #2
 800629a:	b29b      	uxth	r3, r3
 800629c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	e014      	b.n	80062d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	3301      	adds	r3, #1
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	3301      	adds	r3, #1
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	3301      	adds	r3, #1
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	3301      	adds	r3, #1
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	3301      	adds	r3, #1
 80062d4:	623b      	str	r3, [r7, #32]
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d3e6      	bcc.n	80062ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062de:	8bfb      	ldrh	r3, [r7, #30]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ee:	461a      	mov	r2, r3
 80062f0:	f107 0310 	add.w	r3, r7, #16
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	701a      	strb	r2, [r3, #0]
      i++;
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	3301      	adds	r3, #1
 800630e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	3301      	adds	r3, #1
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006316:	8bfb      	ldrh	r3, [r7, #30]
 8006318:	3b01      	subs	r3, #1
 800631a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800631c:	8bfb      	ldrh	r3, [r7, #30]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ea      	bne.n	80062f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006324:	4618      	mov	r0, r3
 8006326:	372c      	adds	r7, #44	; 0x2c
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d12c      	bne.n	80063a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	db12      	blt.n	8006384 <USB_EPSetStall+0x54>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006382:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	e02b      	b.n	80063fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	db12      	blt.n	80063de <USB_EPSetStall+0xae>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00f      	beq.n	80063de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d128      	bne.n	800647a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006446:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	791b      	ldrb	r3, [r3, #4]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d003      	beq.n	8006458 <USB_EPClearStall+0x4c>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	791b      	ldrb	r3, [r3, #4]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d138      	bne.n	80064ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e027      	b.n	80064ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006494:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006498:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d003      	beq.n	80064aa <USB_EPClearStall+0x9e>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d10f      	bne.n	80064ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800650c:	68f9      	ldr	r1, [r7, #12]
 800650e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006512:	4313      	orrs	r3, r2
 8006514:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006552:	f023 0302 	bic.w	r3, r3, #2
 8006556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4013      	ands	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065c0:	68fb      	ldr	r3, [r7, #12]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	0c1b      	lsrs	r3, r3, #16
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	b29b      	uxth	r3, r3
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006664:	68bb      	ldr	r3, [r7, #8]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006672:	b480      	push	{r7}
 8006674:	b087      	sub	sp, #28
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	01db      	lsls	r3, r3, #7
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4013      	ands	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066c0:	68bb      	ldr	r3, [r7, #8]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f003 0301 	and.w	r3, r3, #1
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006704:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006708:	f023 0307 	bic.w	r3, r3, #7
 800670c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	460b      	mov	r3, r1
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	333c      	adds	r3, #60	; 0x3c
 8006746:	3304      	adds	r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <USB_EP0_OutStart+0xb8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d90a      	bls.n	800676a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006764:	d101      	bne.n	800676a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e037      	b.n	80067da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	461a      	mov	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	f043 0318 	orr.w	r3, r3, #24
 800679c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10f      	bne.n	80067d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	4f54300a 	.word	0x4f54300a

080067ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4a13      	ldr	r2, [pc, #76]	; (8006850 <USB_CoreReset+0x64>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e01b      	b.n	8006842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	daf2      	bge.n	80067f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a09      	ldr	r2, [pc, #36]	; (8006850 <USB_CoreReset+0x64>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e006      	b.n	8006842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d0f0      	beq.n	8006822 <USB_CoreReset+0x36>

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	00030d40 	.word	0x00030d40

08006854 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006860:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006864:	f002 fcc8 	bl	80091f8 <USBD_static_malloc>
 8006868:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d109      	bne.n	8006884 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	32b0      	adds	r2, #176	; 0xb0
 800687a:	2100      	movs	r1, #0
 800687c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006880:	2302      	movs	r3, #2
 8006882:	e0d4      	b.n	8006a2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006884:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006888:	2100      	movs	r1, #0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f002 fd1c 	bl	80092c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	32b0      	adds	r2, #176	; 0xb0
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32b0      	adds	r2, #176	; 0xb0
 80068aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7c1b      	ldrb	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d138      	bne.n	800692e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068bc:	4b5e      	ldr	r3, [pc, #376]	; (8006a38 <USBD_CDC_Init+0x1e4>)
 80068be:	7819      	ldrb	r1, [r3, #0]
 80068c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c4:	2202      	movs	r2, #2
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f002 fb25 	bl	8008f16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068cc:	4b5a      	ldr	r3, [pc, #360]	; (8006a38 <USBD_CDC_Init+0x1e4>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3324      	adds	r3, #36	; 0x24
 80068e2:	2201      	movs	r2, #1
 80068e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068e6:	4b55      	ldr	r3, [pc, #340]	; (8006a3c <USBD_CDC_Init+0x1e8>)
 80068e8:	7819      	ldrb	r1, [r3, #0]
 80068ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ee:	2202      	movs	r2, #2
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 fb10 	bl	8008f16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068f6:	4b51      	ldr	r3, [pc, #324]	; (8006a3c <USBD_CDC_Init+0x1e8>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800690e:	2201      	movs	r2, #1
 8006910:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006912:	4b4b      	ldr	r3, [pc, #300]	; (8006a40 <USBD_CDC_Init+0x1ec>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 020f 	and.w	r2, r3, #15
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	3326      	adds	r3, #38	; 0x26
 8006928:	2210      	movs	r2, #16
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	e035      	b.n	800699a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800692e:	4b42      	ldr	r3, [pc, #264]	; (8006a38 <USBD_CDC_Init+0x1e4>)
 8006930:	7819      	ldrb	r1, [r3, #0]
 8006932:	2340      	movs	r3, #64	; 0x40
 8006934:	2202      	movs	r2, #2
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f002 faed 	bl	8008f16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800693c:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <USBD_CDC_Init+0x1e4>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	3324      	adds	r3, #36	; 0x24
 8006952:	2201      	movs	r2, #1
 8006954:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006956:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <USBD_CDC_Init+0x1e8>)
 8006958:	7819      	ldrb	r1, [r3, #0]
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	2202      	movs	r2, #2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 fad9 	bl	8008f16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006964:	4b35      	ldr	r3, [pc, #212]	; (8006a3c <USBD_CDC_Init+0x1e8>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	f003 020f 	and.w	r2, r3, #15
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800697c:	2201      	movs	r2, #1
 800697e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006980:	4b2f      	ldr	r3, [pc, #188]	; (8006a40 <USBD_CDC_Init+0x1ec>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 020f 	and.w	r2, r3, #15
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	3326      	adds	r3, #38	; 0x26
 8006996:	2210      	movs	r2, #16
 8006998:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800699a:	4b29      	ldr	r3, [pc, #164]	; (8006a40 <USBD_CDC_Init+0x1ec>)
 800699c:	7819      	ldrb	r1, [r3, #0]
 800699e:	2308      	movs	r3, #8
 80069a0:	2203      	movs	r2, #3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f002 fab7 	bl	8008f16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069a8:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <USBD_CDC_Init+0x1ec>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	440b      	add	r3, r1
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	2201      	movs	r2, #1
 80069c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	33b0      	adds	r3, #176	; 0xb0
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80069f8:	2302      	movs	r3, #2
 80069fa:	e018      	b.n	8006a2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7c1b      	ldrb	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <USBD_CDC_Init+0x1e8>)
 8006a06:	7819      	ldrb	r1, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f002 fb6e 	bl	80090f4 <USBD_LL_PrepareReceive>
 8006a18:	e008      	b.n	8006a2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <USBD_CDC_Init+0x1e8>)
 8006a1c:	7819      	ldrb	r1, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a24:	2340      	movs	r3, #64	; 0x40
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f002 fb64 	bl	80090f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	2000009b 	.word	0x2000009b
 8006a3c:	2000009c 	.word	0x2000009c
 8006a40:	2000009d 	.word	0x2000009d

08006a44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a50:	4b3a      	ldr	r3, [pc, #232]	; (8006b3c <USBD_CDC_DeInit+0xf8>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 fa83 	bl	8008f62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a5c:	4b37      	ldr	r3, [pc, #220]	; (8006b3c <USBD_CDC_DeInit+0xf8>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	3324      	adds	r3, #36	; 0x24
 8006a72:	2200      	movs	r2, #0
 8006a74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a76:	4b32      	ldr	r3, [pc, #200]	; (8006b40 <USBD_CDC_DeInit+0xfc>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f002 fa70 	bl	8008f62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a82:	4b2f      	ldr	r3, [pc, #188]	; (8006b40 <USBD_CDC_DeInit+0xfc>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	f003 020f 	and.w	r2, r3, #15
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a9e:	4b29      	ldr	r3, [pc, #164]	; (8006b44 <USBD_CDC_DeInit+0x100>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f002 fa5c 	bl	8008f62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006aaa:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <USBD_CDC_DeInit+0x100>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 020f 	and.w	r2, r3, #15
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	440b      	add	r3, r1
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ac4:	4b1f      	ldr	r3, [pc, #124]	; (8006b44 <USBD_CDC_DeInit+0x100>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f003 020f 	and.w	r2, r3, #15
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3326      	adds	r3, #38	; 0x26
 8006ada:	2200      	movs	r2, #0
 8006adc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	32b0      	adds	r2, #176	; 0xb0
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01f      	beq.n	8006b30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	33b0      	adds	r3, #176	; 0xb0
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	32b0      	adds	r2, #176	; 0xb0
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f002 fb7e 	bl	8009214 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	32b0      	adds	r2, #176	; 0xb0
 8006b22:	2100      	movs	r1, #0
 8006b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	2000009b 	.word	0x2000009b
 8006b40:	2000009c 	.word	0x2000009c
 8006b44:	2000009d 	.word	0x2000009d

08006b48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	32b0      	adds	r2, #176	; 0xb0
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e0bf      	b.n	8006cf8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d050      	beq.n	8006c26 <USBD_CDC_Setup+0xde>
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	f040 80af 	bne.w	8006ce8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	88db      	ldrh	r3, [r3, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d03a      	beq.n	8006c08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	b25b      	sxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da1b      	bge.n	8006bd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	33b0      	adds	r3, #176	; 0xb0
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006bb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	88d2      	ldrh	r2, [r2, #6]
 8006bb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	88db      	ldrh	r3, [r3, #6]
 8006bbe:	2b07      	cmp	r3, #7
 8006bc0:	bf28      	it	cs
 8006bc2:	2307      	movcs	r3, #7
 8006bc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	89fa      	ldrh	r2, [r7, #14]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 fd6d 	bl	80086ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006bd2:	e090      	b.n	8006cf6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	785a      	ldrb	r2, [r3, #1]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	88db      	ldrh	r3, [r3, #6]
 8006be2:	2b3f      	cmp	r3, #63	; 0x3f
 8006be4:	d803      	bhi.n	8006bee <USBD_CDC_Setup+0xa6>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	88db      	ldrh	r3, [r3, #6]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	e000      	b.n	8006bf0 <USBD_CDC_Setup+0xa8>
 8006bee:	2240      	movs	r2, #64	; 0x40
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006bf6:	6939      	ldr	r1, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fd7f 	bl	8008704 <USBD_CtlPrepareRx>
      break;
 8006c06:	e076      	b.n	8006cf6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	33b0      	adds	r3, #176	; 0xb0
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	7850      	ldrb	r0, [r2, #1]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	4798      	blx	r3
      break;
 8006c24:	e067      	b.n	8006cf6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	785b      	ldrb	r3, [r3, #1]
 8006c2a:	2b0b      	cmp	r3, #11
 8006c2c:	d851      	bhi.n	8006cd2 <USBD_CDC_Setup+0x18a>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <USBD_CDC_Setup+0xec>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006ce1 	.word	0x08006ce1
 8006c3c:	08006cd3 	.word	0x08006cd3
 8006c40:	08006cd3 	.word	0x08006cd3
 8006c44:	08006cd3 	.word	0x08006cd3
 8006c48:	08006cd3 	.word	0x08006cd3
 8006c4c:	08006cd3 	.word	0x08006cd3
 8006c50:	08006cd3 	.word	0x08006cd3
 8006c54:	08006cd3 	.word	0x08006cd3
 8006c58:	08006cd3 	.word	0x08006cd3
 8006c5c:	08006c8f 	.word	0x08006c8f
 8006c60:	08006cb9 	.word	0x08006cb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d107      	bne.n	8006c80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c70:	f107 030a 	add.w	r3, r7, #10
 8006c74:	2202      	movs	r2, #2
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fd17 	bl	80086ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c7e:	e032      	b.n	8006ce6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fca1 	bl	80085ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	75fb      	strb	r3, [r7, #23]
          break;
 8006c8c:	e02b      	b.n	8006ce6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d107      	bne.n	8006caa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c9a:	f107 030d 	add.w	r3, r7, #13
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fd02 	bl	80086ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ca8:	e01d      	b.n	8006ce6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fc8c 	bl	80085ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cb6:	e016      	b.n	8006ce6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d00f      	beq.n	8006ce4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fc7f 	bl	80085ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cd0:	e008      	b.n	8006ce4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fc78 	bl	80085ca <USBD_CtlError>
          ret = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cde:	e002      	b.n	8006ce6 <USBD_CDC_Setup+0x19e>
          break;
 8006ce0:	bf00      	nop
 8006ce2:	e008      	b.n	8006cf6 <USBD_CDC_Setup+0x1ae>
          break;
 8006ce4:	bf00      	nop
      }
      break;
 8006ce6:	e006      	b.n	8006cf6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fc6d 	bl	80085ca <USBD_CtlError>
      ret = USBD_FAIL;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32b0      	adds	r2, #176	; 0xb0
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e065      	b.n	8006df6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	32b0      	adds	r2, #176	; 0xb0
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3318      	adds	r3, #24
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d02f      	beq.n	8006db4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	f003 020f 	and.w	r2, r3, #15
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	3318      	adds	r3, #24
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	f003 010f 	and.w	r1, r3, #15
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	460b      	mov	r3, r1
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	440b      	add	r3, r1
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4403      	add	r3, r0
 8006d7c:	3348      	adds	r3, #72	; 0x48
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d112      	bne.n	8006db4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3318      	adds	r3, #24
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006da6:	78f9      	ldrb	r1, [r7, #3]
 8006da8:	2300      	movs	r3, #0
 8006daa:	2200      	movs	r2, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f002 f980 	bl	80090b2 <USBD_LL_Transmit>
 8006db2:	e01f      	b.n	8006df4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	33b0      	adds	r3, #176	; 0xb0
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	33b0      	adds	r3, #176	; 0xb0
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	32b0      	adds	r2, #176	; 0xb0
 8006e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	32b0      	adds	r2, #176	; 0xb0
 8006e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e01a      	b.n	8006e66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f002 f97e 	bl	8009136 <USBD_LL_GetRxDataSize>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	33b0      	adds	r3, #176	; 0xb0
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e60:	4611      	mov	r1, r2
 8006e62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	32b0      	adds	r2, #176	; 0xb0
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e025      	b.n	8006edc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	33b0      	adds	r3, #176	; 0xb0
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01a      	beq.n	8006eda <USBD_CDC_EP0_RxReady+0x6c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006eaa:	2bff      	cmp	r3, #255	; 0xff
 8006eac:	d015      	beq.n	8006eda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	33b0      	adds	r3, #176	; 0xb0
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ec6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006eec:	2182      	movs	r1, #130	; 0x82
 8006eee:	4818      	ldr	r0, [pc, #96]	; (8006f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ef0:	f000 fd09 	bl	8007906 <USBD_GetEpDesc>
 8006ef4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	4815      	ldr	r0, [pc, #84]	; (8006f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006efa:	f000 fd04 	bl	8007906 <USBD_GetEpDesc>
 8006efe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f00:	2181      	movs	r1, #129	; 0x81
 8006f02:	4813      	ldr	r0, [pc, #76]	; (8006f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f04:	f000 fcff 	bl	8007906 <USBD_GetEpDesc>
 8006f08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2210      	movs	r2, #16
 8006f14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f24:	711a      	strb	r2, [r3, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f38:	711a      	strb	r2, [r3, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2243      	movs	r2, #67	; 0x43
 8006f42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000058 	.word	0x20000058

08006f54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f5c:	2182      	movs	r1, #130	; 0x82
 8006f5e:	4818      	ldr	r0, [pc, #96]	; (8006fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f60:	f000 fcd1 	bl	8007906 <USBD_GetEpDesc>
 8006f64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f66:	2101      	movs	r1, #1
 8006f68:	4815      	ldr	r0, [pc, #84]	; (8006fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f6a:	f000 fccc 	bl	8007906 <USBD_GetEpDesc>
 8006f6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f70:	2181      	movs	r1, #129	; 0x81
 8006f72:	4813      	ldr	r0, [pc, #76]	; (8006fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f74:	f000 fcc7 	bl	8007906 <USBD_GetEpDesc>
 8006f78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2210      	movs	r2, #16
 8006f84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d006      	beq.n	8006f9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	711a      	strb	r2, [r3, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f042 0202 	orr.w	r2, r2, #2
 8006f98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	711a      	strb	r2, [r3, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f042 0202 	orr.w	r2, r2, #2
 8006fac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2243      	movs	r2, #67	; 0x43
 8006fb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000058 	.word	0x20000058

08006fc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fcc:	2182      	movs	r1, #130	; 0x82
 8006fce:	4818      	ldr	r0, [pc, #96]	; (8007030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fd0:	f000 fc99 	bl	8007906 <USBD_GetEpDesc>
 8006fd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	4815      	ldr	r0, [pc, #84]	; (8007030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fda:	f000 fc94 	bl	8007906 <USBD_GetEpDesc>
 8006fde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fe0:	2181      	movs	r1, #129	; 0x81
 8006fe2:	4813      	ldr	r0, [pc, #76]	; (8007030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fe4:	f000 fc8f 	bl	8007906 <USBD_GetEpDesc>
 8006fe8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d006      	beq.n	800700a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007004:	711a      	strb	r2, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d006      	beq.n	800701e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007018:	711a      	strb	r2, [r3, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2243      	movs	r2, #67	; 0x43
 8007022:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007024:	4b02      	ldr	r3, [pc, #8]	; (8007030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000058 	.word	0x20000058

08007034 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	220a      	movs	r2, #10
 8007040:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	20000014 	.word	0x20000014

08007054 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007064:	2303      	movs	r3, #3
 8007066:	e009      	b.n	800707c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	33b0      	adds	r3, #176	; 0xb0
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	32b0      	adds	r2, #176	; 0xb0
 800709e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e008      	b.n	80070c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	32b0      	adds	r2, #176	; 0xb0
 80070e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e004      	b.n	80070fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	32b0      	adds	r2, #176	; 0xb0
 800711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	32b0      	adds	r2, #176	; 0xb0
 800712a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007132:	2303      	movs	r3, #3
 8007134:	e018      	b.n	8007168 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7c1b      	ldrb	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800713e:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <USBD_CDC_ReceivePacket+0x68>)
 8007140:	7819      	ldrb	r1, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 ffd1 	bl	80090f4 <USBD_LL_PrepareReceive>
 8007152:	e008      	b.n	8007166 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <USBD_CDC_ReceivePacket+0x68>)
 8007156:	7819      	ldrb	r1, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 ffc7 	bl	80090f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	2000009c 	.word	0x2000009c

08007174 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007188:	2303      	movs	r3, #3
 800718a:	e01f      	b.n	80071cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	79fa      	ldrb	r2, [r7, #7]
 80071be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f001 fe41 	bl	8008e48 <USBD_LL_Init>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e025      	b.n	8007238 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	32ae      	adds	r2, #174	; 0xae
 80071fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00f      	beq.n	8007228 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	32ae      	adds	r2, #174	; 0xae
 8007212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	f107 020e 	add.w	r2, r7, #14
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	4602      	mov	r2, r0
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fe49 	bl	8008ee0 <USBD_LL_Start>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007260:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d009      	beq.n	800729c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	78fa      	ldrb	r2, [r7, #3]
 8007292:	4611      	mov	r1, r2
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	4611      	mov	r1, r2
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f001 f932 	bl	8008556 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007300:	461a      	mov	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	2b02      	cmp	r3, #2
 8007314:	d01a      	beq.n	800734c <USBD_LL_SetupStage+0x72>
 8007316:	2b02      	cmp	r3, #2
 8007318:	d822      	bhi.n	8007360 <USBD_LL_SetupStage+0x86>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <USBD_LL_SetupStage+0x4a>
 800731e:	2b01      	cmp	r3, #1
 8007320:	d00a      	beq.n	8007338 <USBD_LL_SetupStage+0x5e>
 8007322:	e01d      	b.n	8007360 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fb5f 	bl	80079f0 <USBD_StdDevReq>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
      break;
 8007336:	e020      	b.n	800737a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fbc7 	bl	8007ad4 <USBD_StdItfReq>
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
      break;
 800734a:	e016      	b.n	800737a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc29 	bl	8007bac <USBD_StdEPReq>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
      break;
 800735e:	e00c      	b.n	800737a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fe16 	bl	8008fa0 <USBD_LL_StallEP>
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]
      break;
 8007378:	bf00      	nop
  }

  return ret;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	460b      	mov	r3, r1
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007396:	7afb      	ldrb	r3, [r7, #11]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d16e      	bne.n	800747a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	f040 8098 	bne.w	80074e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d913      	bls.n	80073e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	1ad2      	subs	r2, r2, r3
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bf28      	it	cs
 80073d6:	4613      	movcs	r3, r2
 80073d8:	461a      	mov	r2, r3
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f001 f9ae 	bl	800873e <USBD_CtlContinueRx>
 80073e2:	e07d      	b.n	80074e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073ea:	f003 031f 	and.w	r3, r3, #31
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d014      	beq.n	800741c <USBD_LL_DataOutStage+0x98>
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d81d      	bhi.n	8007432 <USBD_LL_DataOutStage+0xae>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <USBD_LL_DataOutStage+0x7c>
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d003      	beq.n	8007406 <USBD_LL_DataOutStage+0x82>
 80073fe:	e018      	b.n	8007432 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	75bb      	strb	r3, [r7, #22]
            break;
 8007404:	e018      	b.n	8007438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800740c:	b2db      	uxtb	r3, r3
 800740e:	4619      	mov	r1, r3
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fa5e 	bl	80078d2 <USBD_CoreFindIF>
 8007416:	4603      	mov	r3, r0
 8007418:	75bb      	strb	r3, [r7, #22]
            break;
 800741a:	e00d      	b.n	8007438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007422:	b2db      	uxtb	r3, r3
 8007424:	4619      	mov	r1, r3
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fa60 	bl	80078ec <USBD_CoreFindEP>
 800742c:	4603      	mov	r3, r0
 800742e:	75bb      	strb	r3, [r7, #22]
            break;
 8007430:	e002      	b.n	8007438 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	75bb      	strb	r3, [r7, #22]
            break;
 8007436:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007438:	7dbb      	ldrb	r3, [r7, #22]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d119      	bne.n	8007472 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b03      	cmp	r3, #3
 8007448:	d113      	bne.n	8007472 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800744a:	7dba      	ldrb	r2, [r7, #22]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	32ae      	adds	r2, #174	; 0xae
 8007450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00b      	beq.n	8007472 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800745a:	7dba      	ldrb	r2, [r7, #22]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007462:	7dba      	ldrb	r2, [r7, #22]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	32ae      	adds	r2, #174	; 0xae
 8007468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f001 f974 	bl	8008760 <USBD_CtlSendStatus>
 8007478:	e032      	b.n	80074e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007480:	b2db      	uxtb	r3, r3
 8007482:	4619      	mov	r1, r3
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fa31 	bl	80078ec <USBD_CoreFindEP>
 800748a:	4603      	mov	r3, r0
 800748c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800748e:	7dbb      	ldrb	r3, [r7, #22]
 8007490:	2bff      	cmp	r3, #255	; 0xff
 8007492:	d025      	beq.n	80074e0 <USBD_LL_DataOutStage+0x15c>
 8007494:	7dbb      	ldrb	r3, [r7, #22]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d122      	bne.n	80074e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d117      	bne.n	80074d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074a6:	7dba      	ldrb	r2, [r7, #22]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	32ae      	adds	r2, #174	; 0xae
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00f      	beq.n	80074d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80074b6:	7dba      	ldrb	r2, [r7, #22]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80074be:	7dba      	ldrb	r2, [r7, #22]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	32ae      	adds	r2, #174	; 0xae
 80074c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	7afa      	ldrb	r2, [r7, #11]
 80074cc:	4611      	mov	r1, r2
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	4798      	blx	r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	e000      	b.n	80074e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	460b      	mov	r3, r1
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80074f8:	7afb      	ldrb	r3, [r7, #11]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d16f      	bne.n	80075de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3314      	adds	r3, #20
 8007502:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800750a:	2b02      	cmp	r3, #2
 800750c:	d15a      	bne.n	80075c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	429a      	cmp	r2, r3
 8007518:	d914      	bls.n	8007544 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	1ad2      	subs	r2, r2, r3
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	461a      	mov	r2, r3
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f001 f8d6 	bl	80086e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007536:	2300      	movs	r3, #0
 8007538:	2200      	movs	r2, #0
 800753a:	2100      	movs	r1, #0
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f001 fdd9 	bl	80090f4 <USBD_LL_PrepareReceive>
 8007542:	e03f      	b.n	80075c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	429a      	cmp	r2, r3
 800754e:	d11c      	bne.n	800758a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007558:	429a      	cmp	r2, r3
 800755a:	d316      	bcc.n	800758a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007566:	429a      	cmp	r2, r3
 8007568:	d20f      	bcs.n	800758a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800756a:	2200      	movs	r2, #0
 800756c:	2100      	movs	r1, #0
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f001 f8b7 	bl	80086e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800757c:	2300      	movs	r3, #0
 800757e:	2200      	movs	r2, #0
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f001 fdb6 	bl	80090f4 <USBD_LL_PrepareReceive>
 8007588:	e01c      	b.n	80075c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b03      	cmp	r3, #3
 8007594:	d10f      	bne.n	80075b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075b6:	2180      	movs	r1, #128	; 0x80
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f001 fcf1 	bl	8008fa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f001 f8e1 	bl	8008786 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d03a      	beq.n	8007644 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff fe42 	bl	8007258 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075dc:	e032      	b.n	8007644 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f97f 	bl	80078ec <USBD_CoreFindEP>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	2bff      	cmp	r3, #255	; 0xff
 80075f6:	d025      	beq.n	8007644 <USBD_LL_DataInStage+0x15a>
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d122      	bne.n	8007644 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b03      	cmp	r3, #3
 8007608:	d11c      	bne.n	8007644 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800760a:	7dfa      	ldrb	r2, [r7, #23]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	32ae      	adds	r2, #174	; 0xae
 8007610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d014      	beq.n	8007644 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800761a:	7dfa      	ldrb	r2, [r7, #23]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007622:	7dfa      	ldrb	r2, [r7, #23]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	32ae      	adds	r2, #174	; 0xae
 8007628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	7afa      	ldrb	r2, [r7, #11]
 8007630:	4611      	mov	r1, r2
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	4798      	blx	r3
 8007636:	4603      	mov	r3, r0
 8007638:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800763a:	7dbb      	ldrb	r3, [r7, #22]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007640:	7dbb      	ldrb	r3, [r7, #22]
 8007642:	e000      	b.n	8007646 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d014      	beq.n	80076b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00e      	beq.n	80076b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6852      	ldr	r2, [r2, #4]
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	4611      	mov	r1, r2
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076b0:	2303      	movs	r3, #3
 80076b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076b4:	2340      	movs	r3, #64	; 0x40
 80076b6:	2200      	movs	r2, #0
 80076b8:	2100      	movs	r1, #0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fc2b 	bl	8008f16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2240      	movs	r2, #64	; 0x40
 80076cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076d0:	2340      	movs	r3, #64	; 0x40
 80076d2:	2200      	movs	r2, #0
 80076d4:	2180      	movs	r1, #128	; 0x80
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fc1d 	bl	8008f16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2240      	movs	r2, #64	; 0x40
 80076e6:	621a      	str	r2, [r3, #32]

  return ret;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	460b      	mov	r3, r1
 80076fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	b2da      	uxtb	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2204      	movs	r2, #4
 800772c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b04      	cmp	r3, #4
 8007750:	d106      	bne.n	8007760 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007758:	b2da      	uxtb	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d110      	bne.n	80077a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	460b      	mov	r3, r1
 80077b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	32ae      	adds	r2, #174	; 0xae
 80077c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e01c      	b.n	800780a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d115      	bne.n	8007808 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32ae      	adds	r2, #174	; 0xae
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32ae      	adds	r2, #174	; 0xae
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	4611      	mov	r1, r2
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	32ae      	adds	r2, #174	; 0xae
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007830:	2303      	movs	r3, #3
 8007832:	e01c      	b.n	800786e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b03      	cmp	r3, #3
 800783e:	d115      	bne.n	800786c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	32ae      	adds	r2, #174	; 0xae
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	32ae      	adds	r2, #174	; 0xae
 800785e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	4611      	mov	r1, r2
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00e      	beq.n	80078c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6852      	ldr	r2, [r2, #4]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	4611      	mov	r1, r2
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	885b      	ldrh	r3, [r3, #2]
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	429a      	cmp	r2, r3
 800792c:	d920      	bls.n	8007970 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007936:	e013      	b.n	8007960 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007938:	f107 030a 	add.w	r3, r7, #10
 800793c:	4619      	mov	r1, r3
 800793e:	6978      	ldr	r0, [r7, #20]
 8007940:	f000 f81b 	bl	800797a <USBD_GetNextDesc>
 8007944:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	2b05      	cmp	r3, #5
 800794c:	d108      	bne.n	8007960 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	789b      	ldrb	r3, [r3, #2]
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	429a      	cmp	r2, r3
 800795a:	d008      	beq.n	800796e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	885b      	ldrh	r3, [r3, #2]
 8007964:	b29a      	uxth	r2, r3
 8007966:	897b      	ldrh	r3, [r7, #10]
 8007968:	429a      	cmp	r2, r3
 800796a:	d8e5      	bhi.n	8007938 <USBD_GetEpDesc+0x32>
 800796c:	e000      	b.n	8007970 <USBD_GetEpDesc+0x6a>
          break;
 800796e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007970:	693b      	ldr	r3, [r7, #16]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	881a      	ldrh	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	4413      	add	r3, r2
 8007994:	b29a      	uxth	r2, r3
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079a6:	68fb      	ldr	r3, [r7, #12]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	3301      	adds	r3, #1
 80079ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079d2:	8a3b      	ldrh	r3, [r7, #16]
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	b21a      	sxth	r2, r3
 80079d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079dc:	4313      	orrs	r3, r2
 80079de:	b21b      	sxth	r3, r3
 80079e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079e2:	89fb      	ldrh	r3, [r7, #14]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a06:	2b40      	cmp	r3, #64	; 0x40
 8007a08:	d005      	beq.n	8007a16 <USBD_StdDevReq+0x26>
 8007a0a:	2b40      	cmp	r3, #64	; 0x40
 8007a0c:	d857      	bhi.n	8007abe <USBD_StdDevReq+0xce>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00f      	beq.n	8007a32 <USBD_StdDevReq+0x42>
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d153      	bne.n	8007abe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	32ae      	adds	r2, #174	; 0xae
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a30:	e04a      	b.n	8007ac8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d83b      	bhi.n	8007ab2 <USBD_StdDevReq+0xc2>
 8007a3a:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <USBD_StdDevReq+0x50>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007aa9 	.word	0x08007aa9
 8007a48:	08007ab3 	.word	0x08007ab3
 8007a4c:	08007a9f 	.word	0x08007a9f
 8007a50:	08007ab3 	.word	0x08007ab3
 8007a54:	08007a73 	.word	0x08007a73
 8007a58:	08007a69 	.word	0x08007a69
 8007a5c:	08007ab3 	.word	0x08007ab3
 8007a60:	08007a8b 	.word	0x08007a8b
 8007a64:	08007a7d 	.word	0x08007a7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa3c 	bl	8007ee8 <USBD_GetDescriptor>
          break;
 8007a70:	e024      	b.n	8007abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fbcb 	bl	8008210 <USBD_SetAddress>
          break;
 8007a7a:	e01f      	b.n	8007abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fc0a 	bl	8008298 <USBD_SetConfig>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
          break;
 8007a88:	e018      	b.n	8007abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fcad 	bl	80083ec <USBD_GetConfig>
          break;
 8007a92:	e013      	b.n	8007abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fcde 	bl	8008458 <USBD_GetStatus>
          break;
 8007a9c:	e00e      	b.n	8007abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fd0d 	bl	80084c0 <USBD_SetFeature>
          break;
 8007aa6:	e009      	b.n	8007abc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fd31 	bl	8008512 <USBD_ClrFeature>
          break;
 8007ab0:	e004      	b.n	8007abc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fd88 	bl	80085ca <USBD_CtlError>
          break;
 8007aba:	bf00      	nop
      }
      break;
 8007abc:	e004      	b.n	8007ac8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fd82 	bl	80085ca <USBD_CtlError>
      break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop

08007ad4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	d005      	beq.n	8007afa <USBD_StdItfReq+0x26>
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d852      	bhi.n	8007b98 <USBD_StdItfReq+0xc4>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <USBD_StdItfReq+0x26>
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d14e      	bne.n	8007b98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d840      	bhi.n	8007b8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	889b      	ldrh	r3, [r3, #4]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d836      	bhi.n	8007b80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	889b      	ldrh	r3, [r3, #4]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fed9 	bl	80078d2 <USBD_CoreFindIF>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2bff      	cmp	r3, #255	; 0xff
 8007b28:	d01d      	beq.n	8007b66 <USBD_StdItfReq+0x92>
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11a      	bne.n	8007b66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b30:	7bba      	ldrb	r2, [r7, #14]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	32ae      	adds	r2, #174	; 0xae
 8007b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00f      	beq.n	8007b60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b40:	7bba      	ldrb	r2, [r7, #14]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b48:	7bba      	ldrb	r2, [r7, #14]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	; 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b5e:	e004      	b.n	8007b6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b60:	2303      	movs	r3, #3
 8007b62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b64:	e001      	b.n	8007b6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	88db      	ldrh	r3, [r3, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d110      	bne.n	8007b94 <USBD_StdItfReq+0xc0>
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10d      	bne.n	8007b94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fdf1 	bl	8008760 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b7e:	e009      	b.n	8007b94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd21 	bl	80085ca <USBD_CtlError>
          break;
 8007b88:	e004      	b.n	8007b94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fd1c 	bl	80085ca <USBD_CtlError>
          break;
 8007b92:	e000      	b.n	8007b96 <USBD_StdItfReq+0xc2>
          break;
 8007b94:	bf00      	nop
      }
      break;
 8007b96:	e004      	b.n	8007ba2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fd15 	bl	80085ca <USBD_CtlError>
      break;
 8007ba0:	bf00      	nop
  }

  return ret;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	889b      	ldrh	r3, [r3, #4]
 8007bbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	d007      	beq.n	8007bdc <USBD_StdEPReq+0x30>
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	f200 817f 	bhi.w	8007ed0 <USBD_StdEPReq+0x324>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02a      	beq.n	8007c2c <USBD_StdEPReq+0x80>
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	f040 817a 	bne.w	8007ed0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fe83 	bl	80078ec <USBD_CoreFindEP>
 8007be6:	4603      	mov	r3, r0
 8007be8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bea:	7b7b      	ldrb	r3, [r7, #13]
 8007bec:	2bff      	cmp	r3, #255	; 0xff
 8007bee:	f000 8174 	beq.w	8007eda <USBD_StdEPReq+0x32e>
 8007bf2:	7b7b      	ldrb	r3, [r7, #13]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f040 8170 	bne.w	8007eda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007bfa:	7b7a      	ldrb	r2, [r7, #13]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c02:	7b7a      	ldrb	r2, [r7, #13]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	32ae      	adds	r2, #174	; 0xae
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8163 	beq.w	8007eda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c14:	7b7a      	ldrb	r2, [r7, #13]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	32ae      	adds	r2, #174	; 0xae
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c2a:	e156      	b.n	8007eda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	785b      	ldrb	r3, [r3, #1]
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d008      	beq.n	8007c46 <USBD_StdEPReq+0x9a>
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	f300 8145 	bgt.w	8007ec4 <USBD_StdEPReq+0x318>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 809b 	beq.w	8007d76 <USBD_StdEPReq+0x1ca>
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d03c      	beq.n	8007cbe <USBD_StdEPReq+0x112>
 8007c44:	e13e      	b.n	8007ec4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d002      	beq.n	8007c58 <USBD_StdEPReq+0xac>
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d016      	beq.n	8007c84 <USBD_StdEPReq+0xd8>
 8007c56:	e02c      	b.n	8007cb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <USBD_StdEPReq+0xce>
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b80      	cmp	r3, #128	; 0x80
 8007c62:	d00a      	beq.n	8007c7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 f999 	bl	8008fa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c6e:	2180      	movs	r1, #128	; 0x80
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 f995 	bl	8008fa0 <USBD_LL_StallEP>
 8007c76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c78:	e020      	b.n	8007cbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fca4 	bl	80085ca <USBD_CtlError>
              break;
 8007c82:	e01b      	b.n	8007cbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	885b      	ldrh	r3, [r3, #2]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10e      	bne.n	8007caa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <USBD_StdEPReq+0xfe>
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d008      	beq.n	8007caa <USBD_StdEPReq+0xfe>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	88db      	ldrh	r3, [r3, #6]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 f97b 	bl	8008fa0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fd58 	bl	8008760 <USBD_CtlSendStatus>

              break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fc88 	bl	80085ca <USBD_CtlError>
              break;
 8007cba:	bf00      	nop
          }
          break;
 8007cbc:	e107      	b.n	8007ece <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d002      	beq.n	8007cd0 <USBD_StdEPReq+0x124>
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d016      	beq.n	8007cfc <USBD_StdEPReq+0x150>
 8007cce:	e04b      	b.n	8007d68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00d      	beq.n	8007cf2 <USBD_StdEPReq+0x146>
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b80      	cmp	r3, #128	; 0x80
 8007cda:	d00a      	beq.n	8007cf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 f95d 	bl	8008fa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ce6:	2180      	movs	r1, #128	; 0x80
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 f959 	bl	8008fa0 <USBD_LL_StallEP>
 8007cee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cf0:	e040      	b.n	8007d74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fc68 	bl	80085ca <USBD_CtlError>
              break;
 8007cfa:	e03b      	b.n	8007d74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	885b      	ldrh	r3, [r3, #2]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d136      	bne.n	8007d72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 f963 	bl	8008fde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fd21 	bl	8008760 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fde2 	bl	80078ec <USBD_CoreFindEP>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d2c:	7b7b      	ldrb	r3, [r7, #13]
 8007d2e:	2bff      	cmp	r3, #255	; 0xff
 8007d30:	d01f      	beq.n	8007d72 <USBD_StdEPReq+0x1c6>
 8007d32:	7b7b      	ldrb	r3, [r7, #13]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11c      	bne.n	8007d72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d38:	7b7a      	ldrb	r2, [r7, #13]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d40:	7b7a      	ldrb	r2, [r7, #13]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	32ae      	adds	r2, #174	; 0xae
 8007d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d010      	beq.n	8007d72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d50:	7b7a      	ldrb	r2, [r7, #13]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	32ae      	adds	r2, #174	; 0xae
 8007d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d66:	e004      	b.n	8007d72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fc2d 	bl	80085ca <USBD_CtlError>
              break;
 8007d70:	e000      	b.n	8007d74 <USBD_StdEPReq+0x1c8>
              break;
 8007d72:	bf00      	nop
          }
          break;
 8007d74:	e0ab      	b.n	8007ece <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d002      	beq.n	8007d88 <USBD_StdEPReq+0x1dc>
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d032      	beq.n	8007dec <USBD_StdEPReq+0x240>
 8007d86:	e097      	b.n	8007eb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <USBD_StdEPReq+0x1f2>
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b80      	cmp	r3, #128	; 0x80
 8007d92:	d004      	beq.n	8007d9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc17 	bl	80085ca <USBD_CtlError>
                break;
 8007d9c:	e091      	b.n	8007ec2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	da0b      	bge.n	8007dbe <USBD_StdEPReq+0x212>
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	3310      	adds	r3, #16
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4413      	add	r3, r2
 8007dba:	3304      	adds	r3, #4
 8007dbc:	e00b      	b.n	8007dd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2202      	movs	r2, #2
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fc61 	bl	80086ac <USBD_CtlSendData>
              break;
 8007dea:	e06a      	b.n	8007ec2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	da11      	bge.n	8007e18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	f003 020f 	and.w	r2, r3, #15
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	3324      	adds	r3, #36	; 0x24
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d117      	bne.n	8007e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fbda 	bl	80085ca <USBD_CtlError>
                  break;
 8007e16:	e054      	b.n	8007ec2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	f003 020f 	and.w	r2, r3, #15
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fbc7 	bl	80085ca <USBD_CtlError>
                  break;
 8007e3c:	e041      	b.n	8007ec2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	da0b      	bge.n	8007e5e <USBD_StdEPReq+0x2b2>
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	3310      	adds	r3, #16
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	4413      	add	r3, r2
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	e00b      	b.n	8007e76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	3304      	adds	r3, #4
 8007e76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <USBD_StdEPReq+0x2d8>
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b80      	cmp	r3, #128	; 0x80
 8007e82:	d103      	bne.n	8007e8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e00e      	b.n	8007eaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 f8c3 	bl	800901c <USBD_LL_IsStallEP>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e002      	b.n	8007eaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2202      	movs	r2, #2
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fbfb 	bl	80086ac <USBD_CtlSendData>
              break;
 8007eb6:	e004      	b.n	8007ec2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fb85 	bl	80085ca <USBD_CtlError>
              break;
 8007ec0:	bf00      	nop
          }
          break;
 8007ec2:	e004      	b.n	8007ece <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fb7f 	bl	80085ca <USBD_CtlError>
          break;
 8007ecc:	bf00      	nop
      }
      break;
 8007ece:	e005      	b.n	8007edc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fb79 	bl	80085ca <USBD_CtlError>
      break;
 8007ed8:	e000      	b.n	8007edc <USBD_StdEPReq+0x330>
      break;
 8007eda:	bf00      	nop
  }

  return ret;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	2b0e      	cmp	r3, #14
 8007f0a:	f200 8152 	bhi.w	80081b2 <USBD_GetDescriptor+0x2ca>
 8007f0e:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <USBD_GetDescriptor+0x2c>)
 8007f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f14:	08007f85 	.word	0x08007f85
 8007f18:	08007f9d 	.word	0x08007f9d
 8007f1c:	08007fdd 	.word	0x08007fdd
 8007f20:	080081b3 	.word	0x080081b3
 8007f24:	080081b3 	.word	0x080081b3
 8007f28:	08008153 	.word	0x08008153
 8007f2c:	0800817f 	.word	0x0800817f
 8007f30:	080081b3 	.word	0x080081b3
 8007f34:	080081b3 	.word	0x080081b3
 8007f38:	080081b3 	.word	0x080081b3
 8007f3c:	080081b3 	.word	0x080081b3
 8007f40:	080081b3 	.word	0x080081b3
 8007f44:	080081b3 	.word	0x080081b3
 8007f48:	080081b3 	.word	0x080081b3
 8007f4c:	08007f51 	.word	0x08007f51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	7c12      	ldrb	r2, [r2, #16]
 8007f68:	f107 0108 	add.w	r1, r7, #8
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3
 8007f70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f72:	e126      	b.n	80081c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fb27 	bl	80085ca <USBD_CtlError>
        err++;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	72fb      	strb	r3, [r7, #11]
      break;
 8007f82:	e11e      	b.n	80081c2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7c12      	ldrb	r2, [r2, #16]
 8007f90:	f107 0108 	add.w	r1, r7, #8
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
 8007f98:	60f8      	str	r0, [r7, #12]
      break;
 8007f9a:	e112      	b.n	80081c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7c1b      	ldrb	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	f107 0208 	add.w	r2, r7, #8
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
 8007fb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	2202      	movs	r2, #2
 8007fbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fbe:	e100      	b.n	80081c2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	f107 0208 	add.w	r2, r7, #8
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
 8007fd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	701a      	strb	r2, [r3, #0]
      break;
 8007fda:	e0f2      	b.n	80081c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	885b      	ldrh	r3, [r3, #2]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b05      	cmp	r3, #5
 8007fe4:	f200 80ac 	bhi.w	8008140 <USBD_GetDescriptor+0x258>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <USBD_GetDescriptor+0x108>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	0800803d 	.word	0x0800803d
 8007ff8:	08008071 	.word	0x08008071
 8007ffc:	080080a5 	.word	0x080080a5
 8008000:	080080d9 	.word	0x080080d9
 8008004:	0800810d 	.word	0x0800810d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	7c12      	ldrb	r2, [r2, #16]
 8008020:	f107 0108 	add.w	r1, r7, #8
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
 8008028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802a:	e091      	b.n	8008150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 facb 	bl	80085ca <USBD_CtlError>
            err++;
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	3301      	adds	r3, #1
 8008038:	72fb      	strb	r3, [r7, #11]
          break;
 800803a:	e089      	b.n	8008150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	7c12      	ldrb	r2, [r2, #16]
 8008054:	f107 0108 	add.w	r1, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800805e:	e077      	b.n	8008150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fab1 	bl	80085ca <USBD_CtlError>
            err++;
 8008068:	7afb      	ldrb	r3, [r7, #11]
 800806a:	3301      	adds	r3, #1
 800806c:	72fb      	strb	r3, [r7, #11]
          break;
 800806e:	e06f      	b.n	8008150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	7c12      	ldrb	r2, [r2, #16]
 8008088:	f107 0108 	add.w	r1, r7, #8
 800808c:	4610      	mov	r0, r2
 800808e:	4798      	blx	r3
 8008090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008092:	e05d      	b.n	8008150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa97 	bl	80085ca <USBD_CtlError>
            err++;
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	3301      	adds	r3, #1
 80080a0:	72fb      	strb	r3, [r7, #11]
          break;
 80080a2:	e055      	b.n	8008150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	7c12      	ldrb	r2, [r2, #16]
 80080bc:	f107 0108 	add.w	r1, r7, #8
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
 80080c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080c6:	e043      	b.n	8008150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa7d 	bl	80085ca <USBD_CtlError>
            err++;
 80080d0:	7afb      	ldrb	r3, [r7, #11]
 80080d2:	3301      	adds	r3, #1
 80080d4:	72fb      	strb	r3, [r7, #11]
          break;
 80080d6:	e03b      	b.n	8008150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	7c12      	ldrb	r2, [r2, #16]
 80080f0:	f107 0108 	add.w	r1, r7, #8
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fa:	e029      	b.n	8008150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa63 	bl	80085ca <USBD_CtlError>
            err++;
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	3301      	adds	r3, #1
 8008108:	72fb      	strb	r3, [r7, #11]
          break;
 800810a:	e021      	b.n	8008150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	7c12      	ldrb	r2, [r2, #16]
 8008124:	f107 0108 	add.w	r1, r7, #8
 8008128:	4610      	mov	r0, r2
 800812a:	4798      	blx	r3
 800812c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812e:	e00f      	b.n	8008150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa49 	bl	80085ca <USBD_CtlError>
            err++;
 8008138:	7afb      	ldrb	r3, [r7, #11]
 800813a:	3301      	adds	r3, #1
 800813c:	72fb      	strb	r3, [r7, #11]
          break;
 800813e:	e007      	b.n	8008150 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa41 	bl	80085ca <USBD_CtlError>
          err++;
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	3301      	adds	r3, #1
 800814c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800814e:	bf00      	nop
      }
      break;
 8008150:	e037      	b.n	80081c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	7c1b      	ldrb	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008162:	f107 0208 	add.w	r2, r7, #8
 8008166:	4610      	mov	r0, r2
 8008168:	4798      	blx	r3
 800816a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800816c:	e029      	b.n	80081c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa2a 	bl	80085ca <USBD_CtlError>
        err++;
 8008176:	7afb      	ldrb	r3, [r7, #11]
 8008178:	3301      	adds	r3, #1
 800817a:	72fb      	strb	r3, [r7, #11]
      break;
 800817c:	e021      	b.n	80081c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	7c1b      	ldrb	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10d      	bne.n	80081a2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	f107 0208 	add.w	r2, r7, #8
 8008192:	4610      	mov	r0, r2
 8008194:	4798      	blx	r3
 8008196:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	2207      	movs	r2, #7
 800819e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081a0:	e00f      	b.n	80081c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fa10 	bl	80085ca <USBD_CtlError>
        err++;
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	3301      	adds	r3, #1
 80081ae:	72fb      	strb	r3, [r7, #11]
      break;
 80081b0:	e007      	b.n	80081c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fa08 	bl	80085ca <USBD_CtlError>
      err++;
 80081ba:	7afb      	ldrb	r3, [r7, #11]
 80081bc:	3301      	adds	r3, #1
 80081be:	72fb      	strb	r3, [r7, #11]
      break;
 80081c0:	bf00      	nop
  }

  if (err != 0U)
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11e      	bne.n	8008206 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	88db      	ldrh	r3, [r3, #6]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d016      	beq.n	80081fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80081d0:	893b      	ldrh	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00e      	beq.n	80081f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	88da      	ldrh	r2, [r3, #6]
 80081da:	893b      	ldrh	r3, [r7, #8]
 80081dc:	4293      	cmp	r3, r2
 80081de:	bf28      	it	cs
 80081e0:	4613      	movcs	r3, r2
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081e6:	893b      	ldrh	r3, [r7, #8]
 80081e8:	461a      	mov	r2, r3
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa5d 	bl	80086ac <USBD_CtlSendData>
 80081f2:	e009      	b.n	8008208 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f9e7 	bl	80085ca <USBD_CtlError>
 80081fc:	e004      	b.n	8008208 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 faae 	bl	8008760 <USBD_CtlSendStatus>
 8008204:	e000      	b.n	8008208 <USBD_GetDescriptor+0x320>
    return;
 8008206:	bf00      	nop
  }
}
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop

08008210 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	889b      	ldrh	r3, [r3, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d131      	bne.n	8008286 <USBD_SetAddress+0x76>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	88db      	ldrh	r3, [r3, #6]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d12d      	bne.n	8008286 <USBD_SetAddress+0x76>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	2b7f      	cmp	r3, #127	; 0x7f
 8008230:	d829      	bhi.n	8008286 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	885b      	ldrh	r3, [r3, #2]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b03      	cmp	r3, #3
 8008248:	d104      	bne.n	8008254 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f9bc 	bl	80085ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008252:	e01d      	b.n	8008290 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7bfa      	ldrb	r2, [r7, #15]
 8008258:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 ff07 	bl	8009074 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa7a 	bl	8008760 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827a:	e009      	b.n	8008290 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008284:	e004      	b.n	8008290 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f99e 	bl	80085ca <USBD_CtlError>
  }
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	4b4e      	ldr	r3, [pc, #312]	; (80083e8 <USBD_SetConfig+0x150>)
 80082ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082b0:	4b4d      	ldr	r3, [pc, #308]	; (80083e8 <USBD_SetConfig+0x150>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d905      	bls.n	80082c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f985 	bl	80085ca <USBD_CtlError>
    return USBD_FAIL;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e08c      	b.n	80083de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d002      	beq.n	80082d6 <USBD_SetConfig+0x3e>
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d029      	beq.n	8008328 <USBD_SetConfig+0x90>
 80082d4:	e075      	b.n	80083c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082d6:	4b44      	ldr	r3, [pc, #272]	; (80083e8 <USBD_SetConfig+0x150>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d020      	beq.n	8008320 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082de:	4b42      	ldr	r3, [pc, #264]	; (80083e8 <USBD_SetConfig+0x150>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082e8:	4b3f      	ldr	r3, [pc, #252]	; (80083e8 <USBD_SetConfig+0x150>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fe ffbd 	bl	800726e <USBD_SetClassConfig>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f962 	bl	80085ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800830e:	e065      	b.n	80083dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fa25 	bl	8008760 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2203      	movs	r2, #3
 800831a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800831e:	e05d      	b.n	80083dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa1d 	bl	8008760 <USBD_CtlSendStatus>
      break;
 8008326:	e059      	b.n	80083dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008328:	4b2f      	ldr	r3, [pc, #188]	; (80083e8 <USBD_SetConfig+0x150>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d112      	bne.n	8008356 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008338:	4b2b      	ldr	r3, [pc, #172]	; (80083e8 <USBD_SetConfig+0x150>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008342:	4b29      	ldr	r3, [pc, #164]	; (80083e8 <USBD_SetConfig+0x150>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fe ffac 	bl	80072a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa06 	bl	8008760 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008354:	e042      	b.n	80083dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008356:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <USBD_SetConfig+0x150>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d02a      	beq.n	80083ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	b2db      	uxtb	r3, r3
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7fe ff9a 	bl	80072a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008372:	4b1d      	ldr	r3, [pc, #116]	; (80083e8 <USBD_SetConfig+0x150>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800837c:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <USBD_SetConfig+0x150>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7fe ff73 	bl	800726e <USBD_SetClassConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00f      	beq.n	80083b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f918 	bl	80085ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fe ff7f 	bl	80072a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083b0:	e014      	b.n	80083dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9d4 	bl	8008760 <USBD_CtlSendStatus>
      break;
 80083b8:	e010      	b.n	80083dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f9d0 	bl	8008760 <USBD_CtlSendStatus>
      break;
 80083c0:	e00c      	b.n	80083dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f900 	bl	80085ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <USBD_SetConfig+0x150>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7fe ff68 	bl	80072a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083d6:	2303      	movs	r3, #3
 80083d8:	73fb      	strb	r3, [r7, #15]
      break;
 80083da:	bf00      	nop
  }

  return ret;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200001f0 	.word	0x200001f0

080083ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d004      	beq.n	8008408 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f8e2 	bl	80085ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008406:	e023      	b.n	8008450 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	dc02      	bgt.n	800841a <USBD_GetConfig+0x2e>
 8008414:	2b00      	cmp	r3, #0
 8008416:	dc03      	bgt.n	8008420 <USBD_GetConfig+0x34>
 8008418:	e015      	b.n	8008446 <USBD_GetConfig+0x5a>
 800841a:	2b03      	cmp	r3, #3
 800841c:	d00b      	beq.n	8008436 <USBD_GetConfig+0x4a>
 800841e:	e012      	b.n	8008446 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3308      	adds	r3, #8
 800842a:	2201      	movs	r2, #1
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f93c 	bl	80086ac <USBD_CtlSendData>
        break;
 8008434:	e00c      	b.n	8008450 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3304      	adds	r3, #4
 800843a:	2201      	movs	r2, #1
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f934 	bl	80086ac <USBD_CtlSendData>
        break;
 8008444:	e004      	b.n	8008450 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f8be 	bl	80085ca <USBD_CtlError>
        break;
 800844e:	bf00      	nop
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008468:	b2db      	uxtb	r3, r3
 800846a:	3b01      	subs	r3, #1
 800846c:	2b02      	cmp	r3, #2
 800846e:	d81e      	bhi.n	80084ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	88db      	ldrh	r3, [r3, #6]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d004      	beq.n	8008482 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8a5 	bl	80085ca <USBD_CtlError>
        break;
 8008480:	e01a      	b.n	80084b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800848e:	2b00      	cmp	r3, #0
 8008490:	d005      	beq.n	800849e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f043 0202 	orr.w	r2, r3, #2
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	330c      	adds	r3, #12
 80084a2:	2202      	movs	r2, #2
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f900 	bl	80086ac <USBD_CtlSendData>
      break;
 80084ac:	e004      	b.n	80084b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f88a 	bl	80085ca <USBD_CtlError>
      break;
 80084b6:	bf00      	nop
  }
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	885b      	ldrh	r3, [r3, #2]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d107      	bne.n	80084e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f940 	bl	8008760 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084e0:	e013      	b.n	800850a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	885b      	ldrh	r3, [r3, #2]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d10b      	bne.n	8008502 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	889b      	ldrh	r3, [r3, #4]
 80084ee:	0a1b      	lsrs	r3, r3, #8
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f930 	bl	8008760 <USBD_CtlSendStatus>
}
 8008500:	e003      	b.n	800850a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f860 	bl	80085ca <USBD_CtlError>
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008522:	b2db      	uxtb	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	2b02      	cmp	r3, #2
 8008528:	d80b      	bhi.n	8008542 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	885b      	ldrh	r3, [r3, #2]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d10c      	bne.n	800854c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f910 	bl	8008760 <USBD_CtlSendStatus>
      }
      break;
 8008540:	e004      	b.n	800854c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f840 	bl	80085ca <USBD_CtlError>
      break;
 800854a:	e000      	b.n	800854e <USBD_ClrFeature+0x3c>
      break;
 800854c:	bf00      	nop
  }
}
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3301      	adds	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fa17 	bl	80079b4 <SWAPBYTE>
 8008586:	4603      	mov	r3, r0
 8008588:	461a      	mov	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3301      	adds	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	3301      	adds	r3, #1
 8008598:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff fa0a 	bl	80079b4 <SWAPBYTE>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3301      	adds	r3, #1
 80085ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff f9fd 	bl	80079b4 <SWAPBYTE>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	80da      	strh	r2, [r3, #6]
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d4:	2180      	movs	r1, #128	; 0x80
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fce2 	bl	8008fa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085dc:	2100      	movs	r1, #0
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fcde 	bl	8008fa0 <USBD_LL_StallEP>
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d036      	beq.n	8008670 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008606:	6938      	ldr	r0, [r7, #16]
 8008608:	f000 f836 	bl	8008678 <USBD_GetLen>
 800860c:	4603      	mov	r3, r0
 800860e:	3301      	adds	r3, #1
 8008610:	b29b      	uxth	r3, r3
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	4413      	add	r3, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7812      	ldrb	r2, [r2, #0]
 8008624:	701a      	strb	r2, [r3, #0]
  idx++;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	3301      	adds	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	4413      	add	r3, r2
 8008632:	2203      	movs	r2, #3
 8008634:	701a      	strb	r2, [r3, #0]
  idx++;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	3301      	adds	r3, #1
 800863a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800863c:	e013      	b.n	8008666 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	4413      	add	r3, r2
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	3301      	adds	r3, #1
 800864e:	613b      	str	r3, [r7, #16]
    idx++;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	3301      	adds	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	4413      	add	r3, r2
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	3301      	adds	r3, #1
 8008664:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e7      	bne.n	800863e <USBD_GetString+0x52>
 800866e:	e000      	b.n	8008672 <USBD_GetString+0x86>
    return;
 8008670:	bf00      	nop
  }
}
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008688:	e005      	b.n	8008696 <USBD_GetLen+0x1e>
  {
    len++;
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	3301      	adds	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	3301      	adds	r3, #1
 8008694:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1f5      	bne.n	800868a <USBD_GetLen+0x12>
  }

  return len;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	2100      	movs	r1, #0
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 fced 	bl	80090b2 <USBD_LL_Transmit>

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	2100      	movs	r1, #0
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 fcdc 	bl	80090b2 <USBD_LL_Transmit>

  return USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2203      	movs	r2, #3
 8008714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fce0 	bl	80090f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	2100      	movs	r1, #0
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 fccf 	bl	80090f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2204      	movs	r2, #4
 800876c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008770:	2300      	movs	r3, #0
 8008772:	2200      	movs	r2, #0
 8008774:	2100      	movs	r1, #0
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fc9b 	bl	80090b2 <USBD_LL_Transmit>

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2205      	movs	r2, #5
 8008792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008796:	2300      	movs	r3, #0
 8008798:	2200      	movs	r2, #0
 800879a:	2100      	movs	r1, #0
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fca9 	bl	80090f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087b0:	2200      	movs	r2, #0
 80087b2:	4912      	ldr	r1, [pc, #72]	; (80087fc <MX_USB_DEVICE_Init+0x50>)
 80087b4:	4812      	ldr	r0, [pc, #72]	; (8008800 <MX_USB_DEVICE_Init+0x54>)
 80087b6:	f7fe fcdd 	bl	8007174 <USBD_Init>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087c0:	f7f8 fa38 	bl	8000c34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087c4:	490f      	ldr	r1, [pc, #60]	; (8008804 <MX_USB_DEVICE_Init+0x58>)
 80087c6:	480e      	ldr	r0, [pc, #56]	; (8008800 <MX_USB_DEVICE_Init+0x54>)
 80087c8:	f7fe fd04 	bl	80071d4 <USBD_RegisterClass>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087d2:	f7f8 fa2f 	bl	8000c34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087d6:	490c      	ldr	r1, [pc, #48]	; (8008808 <MX_USB_DEVICE_Init+0x5c>)
 80087d8:	4809      	ldr	r0, [pc, #36]	; (8008800 <MX_USB_DEVICE_Init+0x54>)
 80087da:	f7fe fc3b 	bl	8007054 <USBD_CDC_RegisterInterface>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087e4:	f7f8 fa26 	bl	8000c34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087e8:	4805      	ldr	r0, [pc, #20]	; (8008800 <MX_USB_DEVICE_Init+0x54>)
 80087ea:	f7fe fd29 	bl	8007240 <USBD_Start>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087f4:	f7f8 fa1e 	bl	8000c34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087f8:	bf00      	nop
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200000b4 	.word	0x200000b4
 8008800:	200001f4 	.word	0x200001f4
 8008804:	20000020 	.word	0x20000020
 8008808:	200000a0 	.word	0x200000a0

0800880c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008810:	2200      	movs	r2, #0
 8008812:	4905      	ldr	r1, [pc, #20]	; (8008828 <CDC_Init_FS+0x1c>)
 8008814:	4805      	ldr	r0, [pc, #20]	; (800882c <CDC_Init_FS+0x20>)
 8008816:	f7fe fc37 	bl	8007088 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800881a:	4905      	ldr	r1, [pc, #20]	; (8008830 <CDC_Init_FS+0x24>)
 800881c:	4803      	ldr	r0, [pc, #12]	; (800882c <CDC_Init_FS+0x20>)
 800881e:	f7fe fc55 	bl	80070cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008822:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20000cd0 	.word	0x20000cd0
 800882c:	200001f4 	.word	0x200001f4
 8008830:	200004d0 	.word	0x200004d0

08008834 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008838:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800883a:	4618      	mov	r0, r3
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
 8008850:	4613      	mov	r3, r2
 8008852:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	2b23      	cmp	r3, #35	; 0x23
 8008858:	d84a      	bhi.n	80088f0 <CDC_Control_FS+0xac>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <CDC_Control_FS+0x1c>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	080088f1 	.word	0x080088f1
 8008864:	080088f1 	.word	0x080088f1
 8008868:	080088f1 	.word	0x080088f1
 800886c:	080088f1 	.word	0x080088f1
 8008870:	080088f1 	.word	0x080088f1
 8008874:	080088f1 	.word	0x080088f1
 8008878:	080088f1 	.word	0x080088f1
 800887c:	080088f1 	.word	0x080088f1
 8008880:	080088f1 	.word	0x080088f1
 8008884:	080088f1 	.word	0x080088f1
 8008888:	080088f1 	.word	0x080088f1
 800888c:	080088f1 	.word	0x080088f1
 8008890:	080088f1 	.word	0x080088f1
 8008894:	080088f1 	.word	0x080088f1
 8008898:	080088f1 	.word	0x080088f1
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	080088f1 	.word	0x080088f1
 80088a4:	080088f1 	.word	0x080088f1
 80088a8:	080088f1 	.word	0x080088f1
 80088ac:	080088f1 	.word	0x080088f1
 80088b0:	080088f1 	.word	0x080088f1
 80088b4:	080088f1 	.word	0x080088f1
 80088b8:	080088f1 	.word	0x080088f1
 80088bc:	080088f1 	.word	0x080088f1
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088f1 	.word	0x080088f1
 80088d0:	080088f1 	.word	0x080088f1
 80088d4:	080088f1 	.word	0x080088f1
 80088d8:	080088f1 	.word	0x080088f1
 80088dc:	080088f1 	.word	0x080088f1
 80088e0:	080088f1 	.word	0x080088f1
 80088e4:	080088f1 	.word	0x080088f1
 80088e8:	080088f1 	.word	0x080088f1
 80088ec:	080088f1 	.word	0x080088f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088f0:	bf00      	nop
  }

  return (USBD_OK);
 80088f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4805      	ldr	r0, [pc, #20]	; (8008924 <CDC_Receive_FS+0x24>)
 800890e:	f7fe fbdd 	bl	80070cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008912:	4804      	ldr	r0, [pc, #16]	; (8008924 <CDC_Receive_FS+0x24>)
 8008914:	f7fe fbf8 	bl	8007108 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008918:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200001f4 	.word	0x200001f4

08008928 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800893a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800893e:	4618      	mov	r0, r3
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2212      	movs	r2, #18
 800895c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800895e:	4b03      	ldr	r3, [pc, #12]	; (800896c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	200000d4 	.word	0x200000d4

08008970 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2204      	movs	r2, #4
 8008980:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008982:	4b03      	ldr	r3, [pc, #12]	; (8008990 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	200000f4 	.word	0x200000f4

08008994 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4907      	ldr	r1, [pc, #28]	; (80089c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80089aa:	4808      	ldr	r0, [pc, #32]	; (80089cc <USBD_FS_ProductStrDescriptor+0x38>)
 80089ac:	f7ff fe1e 	bl	80085ec <USBD_GetString>
 80089b0:	e004      	b.n	80089bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	4904      	ldr	r1, [pc, #16]	; (80089c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80089b6:	4805      	ldr	r0, [pc, #20]	; (80089cc <USBD_FS_ProductStrDescriptor+0x38>)
 80089b8:	f7ff fe18 	bl	80085ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80089bc:	4b02      	ldr	r3, [pc, #8]	; (80089c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	200014d0 	.word	0x200014d0
 80089cc:	08009300 	.word	0x08009300

080089d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	6039      	str	r1, [r7, #0]
 80089da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	4904      	ldr	r1, [pc, #16]	; (80089f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089e0:	4804      	ldr	r0, [pc, #16]	; (80089f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089e2:	f7ff fe03 	bl	80085ec <USBD_GetString>
  return USBD_StrDesc;
 80089e6:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	200014d0 	.word	0x200014d0
 80089f4:	08009314 	.word	0x08009314

080089f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	221a      	movs	r2, #26
 8008a08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a0a:	f000 f855 	bl	8008ab8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a0e:	4b02      	ldr	r3, [pc, #8]	; (8008a18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	200000f8 	.word	0x200000f8

08008a1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d105      	bne.n	8008a3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4907      	ldr	r1, [pc, #28]	; (8008a50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a32:	4808      	ldr	r0, [pc, #32]	; (8008a54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a34:	f7ff fdda 	bl	80085ec <USBD_GetString>
 8008a38:	e004      	b.n	8008a44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4904      	ldr	r1, [pc, #16]	; (8008a50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a3e:	4805      	ldr	r0, [pc, #20]	; (8008a54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a40:	f7ff fdd4 	bl	80085ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	200014d0 	.word	0x200014d0
 8008a54:	08009328 	.word	0x08009328

08008a58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	6039      	str	r1, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d105      	bne.n	8008a76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4907      	ldr	r1, [pc, #28]	; (8008a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a6e:	4808      	ldr	r0, [pc, #32]	; (8008a90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a70:	f7ff fdbc 	bl	80085ec <USBD_GetString>
 8008a74:	e004      	b.n	8008a80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	4904      	ldr	r1, [pc, #16]	; (8008a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a7a:	4805      	ldr	r0, [pc, #20]	; (8008a90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a7c:	f7ff fdb6 	bl	80085ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200014d0 	.word	0x200014d0
 8008a90:	08009334 	.word	0x08009334

08008a94 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	220c      	movs	r2, #12
 8008aa4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008aa6:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	200000e8 	.word	0x200000e8

08008ab8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008abe:	4b0f      	ldr	r3, [pc, #60]	; (8008afc <Get_SerialNum+0x44>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <Get_SerialNum+0x48>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aca:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <Get_SerialNum+0x4c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d009      	beq.n	8008af2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ade:	2208      	movs	r2, #8
 8008ae0:	4909      	ldr	r1, [pc, #36]	; (8008b08 <Get_SerialNum+0x50>)
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 f814 	bl	8008b10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ae8:	2204      	movs	r2, #4
 8008aea:	4908      	ldr	r1, [pc, #32]	; (8008b0c <Get_SerialNum+0x54>)
 8008aec:	68b8      	ldr	r0, [r7, #8]
 8008aee:	f000 f80f 	bl	8008b10 <IntToUnicode>
  }
}
 8008af2:	bf00      	nop
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	1fff7a10 	.word	0x1fff7a10
 8008b00:	1fff7a14 	.word	0x1fff7a14
 8008b04:	1fff7a18 	.word	0x1fff7a18
 8008b08:	200000fa 	.word	0x200000fa
 8008b0c:	2000010a 	.word	0x2000010a

08008b10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]
 8008b26:	e027      	b.n	8008b78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	0f1b      	lsrs	r3, r3, #28
 8008b2c:	2b09      	cmp	r3, #9
 8008b2e:	d80b      	bhi.n	8008b48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0f1b      	lsrs	r3, r3, #28
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	440b      	add	r3, r1
 8008b40:	3230      	adds	r2, #48	; 0x30
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	e00a      	b.n	8008b5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0f1b      	lsrs	r3, r3, #28
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	4619      	mov	r1, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	440b      	add	r3, r1
 8008b58:	3237      	adds	r2, #55	; 0x37
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	3301      	adds	r3, #1
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	2200      	movs	r2, #0
 8008b70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	3301      	adds	r3, #1
 8008b76:	75fb      	strb	r3, [r7, #23]
 8008b78:	7dfa      	ldrb	r2, [r7, #23]
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d3d3      	bcc.n	8008b28 <IntToUnicode+0x18>
  }
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
	...

08008b90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b0a0      	sub	sp, #128	; 0x80
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	605a      	str	r2, [r3, #4]
 8008ba2:	609a      	str	r2, [r3, #8]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	225c      	movs	r2, #92	; 0x5c
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fb89 	bl	80092c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bbe:	d149      	bne.n	8008c54 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bc4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008bca:	f107 0310 	add.w	r3, r7, #16
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fa f896 	bl	8002d00 <HAL_RCCEx_PeriphCLKConfig>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8008bda:	f7f8 f82b 	bl	8000c34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	4b1e      	ldr	r3, [pc, #120]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	4a1d      	ldr	r2, [pc, #116]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	6313      	str	r3, [r2, #48]	; 0x30
 8008bee:	4b1b      	ldr	r3, [pc, #108]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008bfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c00:	2302      	movs	r3, #2
 8008c02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c0c:	230a      	movs	r3, #10
 8008c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008c14:	4619      	mov	r1, r3
 8008c16:	4812      	ldr	r0, [pc, #72]	; (8008c60 <HAL_PCD_MspInit+0xd0>)
 8008c18:	f7f8 fae2 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c20:	4a0e      	ldr	r2, [pc, #56]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c26:	6353      	str	r3, [r2, #52]	; 0x34
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60bb      	str	r3, [r7, #8]
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c30:	4a0a      	ldr	r2, [pc, #40]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c36:	6453      	str	r3, [r2, #68]	; 0x44
 8008c38:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <HAL_PCD_MspInit+0xcc>)
 8008c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c44:	2200      	movs	r2, #0
 8008c46:	2100      	movs	r1, #0
 8008c48:	2043      	movs	r0, #67	; 0x43
 8008c4a:	f7f8 fa92 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c4e:	2043      	movs	r0, #67	; 0x43
 8008c50:	f7f8 faab 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c54:	bf00      	nop
 8008c56:	3780      	adds	r7, #128	; 0x80
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40023800 	.word	0x40023800
 8008c60:	40020000 	.word	0x40020000

08008c64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	f7fe fb2d 	bl	80072da <USBD_LL_SetupStage>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c9a:	78fa      	ldrb	r2, [r7, #3]
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	f7fe fb67 	bl	8007384 <USBD_LL_DataOutStage>
}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	334c      	adds	r3, #76	; 0x4c
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	f7fe fc00 	bl	80074ea <USBD_LL_DataInStage>
}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fd34 	bl	800776e <USBD_LL_SOF>
}
 8008d06:	bf00      	nop
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d16:	2301      	movs	r3, #1
 8008d18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]
 8008d26:	e008      	b.n	8008d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d102      	bne.n	8008d36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
 8008d34:	e001      	b.n	8008d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d36:	f7f7 ff7d 	bl	8000c34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d40:	7bfa      	ldrb	r2, [r7, #15]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fe fcd4 	bl	80076f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe fc7c 	bl	800764e <USBD_LL_Reset>
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fccf 	bl	8007712 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d86:	f043 0301 	orr.w	r3, r3, #1
 8008d8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <HAL_PCD_SuspendCallback+0x48>)
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	4a03      	ldr	r2, [pc, #12]	; (8008da8 <HAL_PCD_SuspendCallback+0x48>)
 8008d9a:	f043 0306 	orr.w	r3, r3, #6
 8008d9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed00 	.word	0xe000ed00

08008dac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe fcbf 	bl	800773e <USBD_LL_Resume>
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fd17 	bl	8007812 <USBD_LL_IsoOUTIncomplete>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	4611      	mov	r1, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fcd3 	bl	80077ae <USBD_LL_IsoINIncomplete>
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fd29 	bl	8007876 <USBD_LL_DevConnected>
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fd26 	bl	800788c <USBD_LL_DevDisconnected>
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d13c      	bne.n	8008ed2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e58:	4a20      	ldr	r2, [pc, #128]	; (8008edc <USBD_LL_Init+0x94>)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a1e      	ldr	r2, [pc, #120]	; (8008edc <USBD_LL_Init+0x94>)
 8008e64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e68:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <USBD_LL_Init+0x94>)
 8008e6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008e70:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <USBD_LL_Init+0x94>)
 8008e72:	2206      	movs	r2, #6
 8008e74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e76:	4b19      	ldr	r3, [pc, #100]	; (8008edc <USBD_LL_Init+0x94>)
 8008e78:	2202      	movs	r2, #2
 8008e7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e7c:	4b17      	ldr	r3, [pc, #92]	; (8008edc <USBD_LL_Init+0x94>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e82:	4b16      	ldr	r3, [pc, #88]	; (8008edc <USBD_LL_Init+0x94>)
 8008e84:	2202      	movs	r2, #2
 8008e86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e88:	4b14      	ldr	r3, [pc, #80]	; (8008edc <USBD_LL_Init+0x94>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <USBD_LL_Init+0x94>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e94:	4b11      	ldr	r3, [pc, #68]	; (8008edc <USBD_LL_Init+0x94>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e9a:	4b10      	ldr	r3, [pc, #64]	; (8008edc <USBD_LL_Init+0x94>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ea0:	4b0e      	ldr	r3, [pc, #56]	; (8008edc <USBD_LL_Init+0x94>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ea6:	480d      	ldr	r0, [pc, #52]	; (8008edc <USBD_LL_Init+0x94>)
 8008ea8:	f7f8 fb47 	bl	800153a <HAL_PCD_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008eb2:	f7f7 febf 	bl	8000c34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008eb6:	2180      	movs	r1, #128	; 0x80
 8008eb8:	4808      	ldr	r0, [pc, #32]	; (8008edc <USBD_LL_Init+0x94>)
 8008eba:	f7f9 fdd2 	bl	8002a62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ebe:	2240      	movs	r2, #64	; 0x40
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4806      	ldr	r0, [pc, #24]	; (8008edc <USBD_LL_Init+0x94>)
 8008ec4:	f7f9 fd86 	bl	80029d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ec8:	2280      	movs	r2, #128	; 0x80
 8008eca:	2101      	movs	r1, #1
 8008ecc:	4803      	ldr	r0, [pc, #12]	; (8008edc <USBD_LL_Init+0x94>)
 8008ece:	f7f9 fd81 	bl	80029d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	200016d0 	.word	0x200016d0

08008ee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f8 fc43 	bl	8001782 <HAL_PCD_Start>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f990 	bl	8009228 <USBD_Get_USB_Status>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	461a      	mov	r2, r3
 8008f24:	4603      	mov	r3, r0
 8008f26:	70fb      	strb	r3, [r7, #3]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70bb      	strb	r3, [r7, #2]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f3e:	78bb      	ldrb	r3, [r7, #2]
 8008f40:	883a      	ldrh	r2, [r7, #0]
 8008f42:	78f9      	ldrb	r1, [r7, #3]
 8008f44:	f7f9 f941 	bl	80021ca <HAL_PCD_EP_Open>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f96a 	bl	8009228 <USBD_Get_USB_Status>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f7c:	78fa      	ldrb	r2, [r7, #3]
 8008f7e:	4611      	mov	r1, r2
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7f9 f98a 	bl	800229a <HAL_PCD_EP_Close>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 f94b 	bl	8009228 <USBD_Get_USB_Status>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fba:	78fa      	ldrb	r2, [r7, #3]
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f9 fa62 	bl	8002488 <HAL_PCD_EP_SetStall>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 f92c 	bl	8009228 <USBD_Get_USB_Status>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ff8:	78fa      	ldrb	r2, [r7, #3]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f9 faa7 	bl	8002550 <HAL_PCD_EP_ClrStall>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f90d 	bl	8009228 <USBD_Get_USB_Status>
 800900e:	4603      	mov	r3, r0
 8009010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009012:	7bbb      	ldrb	r3, [r7, #14]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800902e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009034:	2b00      	cmp	r3, #0
 8009036:	da0b      	bge.n	8009050 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800903e:	68f9      	ldr	r1, [r7, #12]
 8009040:	4613      	mov	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	440b      	add	r3, r1
 800904a:	333e      	adds	r3, #62	; 0x3e
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	e00b      	b.n	8009068 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	4613      	mov	r3, r2
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009066:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7f9 f874 	bl	8002180 <HAL_PCD_SetAddress>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 f8c2 	bl	8009228 <USBD_Get_USB_Status>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	460b      	mov	r3, r1
 80090c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090d0:	7af9      	ldrb	r1, [r7, #11]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	f7f9 f98d 	bl	80023f4 <HAL_PCD_EP_Transmit>
 80090da:	4603      	mov	r3, r0
 80090dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 f8a1 	bl	8009228 <USBD_Get_USB_Status>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	607a      	str	r2, [r7, #4]
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	460b      	mov	r3, r1
 8009102:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009112:	7af9      	ldrb	r1, [r7, #11]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	f7f9 f909 	bl	800232e <HAL_PCD_EP_Receive>
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f880 	bl	8009228 <USBD_Get_USB_Status>
 8009128:	4603      	mov	r3, r0
 800912a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800912c:	7dbb      	ldrb	r3, [r7, #22]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	4611      	mov	r1, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f7f9 f939 	bl	80023c4 <HAL_PCD_EP_GetRxCount>
 8009152:	4603      	mov	r3, r0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_PCDEx_LPM_Callback+0x18>
 800916e:	2b01      	cmp	r3, #1
 8009170:	d01f      	beq.n	80091b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009172:	e03b      	b.n	80091ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d007      	beq.n	800918c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800917c:	f7f7 fc04 	bl	8000988 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009180:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	4a1b      	ldr	r2, [pc, #108]	; (80091f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009186:	f023 0306 	bic.w	r3, r3, #6
 800918a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6812      	ldr	r2, [r2, #0]
 800919a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fac7 	bl	800773e <USBD_LL_Resume>
    break;
 80091b0:	e01c      	b.n	80091ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091c4:	f043 0301 	orr.w	r3, r3, #1
 80091c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe fa9e 	bl	8007712 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091de:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	4a04      	ldr	r2, [pc, #16]	; (80091f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80091e4:	f043 0306 	orr.w	r3, r3, #6
 80091e8:	6113      	str	r3, [r2, #16]
    break;
 80091ea:	bf00      	nop
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	e000ed00 	.word	0xe000ed00

080091f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009200:	4b03      	ldr	r3, [pc, #12]	; (8009210 <USBD_static_malloc+0x18>)
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	20001bdc 	.word	0x20001bdc

08009214 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]

}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b03      	cmp	r3, #3
 800923a:	d817      	bhi.n	800926c <USBD_Get_USB_Status+0x44>
 800923c:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <USBD_Get_USB_Status+0x1c>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	08009255 	.word	0x08009255
 8009248:	0800925b 	.word	0x0800925b
 800924c:	08009261 	.word	0x08009261
 8009250:	08009267 	.word	0x08009267
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
    break;
 8009258:	e00b      	b.n	8009272 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800925a:	2303      	movs	r3, #3
 800925c:	73fb      	strb	r3, [r7, #15]
    break;
 800925e:	e008      	b.n	8009272 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009260:	2301      	movs	r3, #1
 8009262:	73fb      	strb	r3, [r7, #15]
    break;
 8009264:	e005      	b.n	8009272 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	73fb      	strb	r3, [r7, #15]
    break;
 800926a:	e002      	b.n	8009272 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	73fb      	strb	r3, [r7, #15]
    break;
 8009270:	bf00      	nop
  }
  return usb_status;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <__libc_init_array>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4d0d      	ldr	r5, [pc, #52]	; (80092b8 <__libc_init_array+0x38>)
 8009284:	4c0d      	ldr	r4, [pc, #52]	; (80092bc <__libc_init_array+0x3c>)
 8009286:	1b64      	subs	r4, r4, r5
 8009288:	10a4      	asrs	r4, r4, #2
 800928a:	2600      	movs	r6, #0
 800928c:	42a6      	cmp	r6, r4
 800928e:	d109      	bne.n	80092a4 <__libc_init_array+0x24>
 8009290:	4d0b      	ldr	r5, [pc, #44]	; (80092c0 <__libc_init_array+0x40>)
 8009292:	4c0c      	ldr	r4, [pc, #48]	; (80092c4 <__libc_init_array+0x44>)
 8009294:	f000 f820 	bl	80092d8 <_init>
 8009298:	1b64      	subs	r4, r4, r5
 800929a:	10a4      	asrs	r4, r4, #2
 800929c:	2600      	movs	r6, #0
 800929e:	42a6      	cmp	r6, r4
 80092a0:	d105      	bne.n	80092ae <__libc_init_array+0x2e>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a8:	4798      	blx	r3
 80092aa:	3601      	adds	r6, #1
 80092ac:	e7ee      	b.n	800928c <__libc_init_array+0xc>
 80092ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b2:	4798      	blx	r3
 80092b4:	3601      	adds	r6, #1
 80092b6:	e7f2      	b.n	800929e <__libc_init_array+0x1e>
 80092b8:	08009364 	.word	0x08009364
 80092bc:	08009364 	.word	0x08009364
 80092c0:	08009364 	.word	0x08009364
 80092c4:	08009368 	.word	0x08009368

080092c8 <memset>:
 80092c8:	4402      	add	r2, r0
 80092ca:	4603      	mov	r3, r0
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d100      	bne.n	80092d2 <memset+0xa>
 80092d0:	4770      	bx	lr
 80092d2:	f803 1b01 	strb.w	r1, [r3], #1
 80092d6:	e7f9      	b.n	80092cc <memset+0x4>

080092d8 <_init>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr

080092e4 <_fini>:
 80092e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e6:	bf00      	nop
 80092e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ea:	bc08      	pop	{r3}
 80092ec:	469e      	mov	lr, r3
 80092ee:	4770      	bx	lr
