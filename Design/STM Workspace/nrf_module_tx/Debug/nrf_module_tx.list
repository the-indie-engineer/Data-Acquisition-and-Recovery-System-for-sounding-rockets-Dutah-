
nrf_module_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003264  08003264  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800326c  0800326c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000024  08003298  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003298  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b203  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae4  00000000  00000000  0002b257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211e1  00000000  00000000  0002df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9b4  00000000  00000000  0004f149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c90ea  00000000  00000000  0005aafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123be7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b4  00000000  00000000  00123c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003224 	.word	0x08003224

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08003224 	.word	0x08003224

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_1


void CS_Select (void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2102      	movs	r1, #2
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <CS_Select+0x14>)
 8000512:	f000 ff85 	bl	8001420 <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2102      	movs	r1, #2
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <CS_UnSelect+0x14>)
 800052a:	f000 ff79 	bl	8001420 <HAL_GPIO_WritePin>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020400 	.word	0x40020400

08000538 <CE_Enable>:


void CE_Enable (void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2101      	movs	r1, #1
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <CE_Enable+0x14>)
 8000542:	f000 ff6d 	bl	8001420 <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40020400 	.word	0x40020400

08000550 <CE_Disable>:

void CE_Disable (void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <CE_Disable+0x14>)
 800055a:	f000 ff61 	bl	8001420 <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020400 	.word	0x40020400

08000568 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	b2db      	uxtb	r3, r3
 8000580:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000586:	f7ff ffbf 	bl	8000508 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800058a:	f107 010c 	add.w	r1, r7, #12
 800058e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000592:	2202      	movs	r2, #2
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <nrf24_WriteReg+0x40>)
 8000596:	f001 fe38 	bl	800220a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800059a:	f7ff ffc1 	bl	8000520 <CS_UnSelect>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000040 	.word	0x20000040

080005ac <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f043 0320 	orr.w	r3, r3, #32
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005c4:	f7ff ffa0 	bl	8000508 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80005c8:	f107 0114 	add.w	r1, r7, #20
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <nrf24_WriteRegMulti+0x48>)
 80005d2:	f001 fe1a 	bl	800220a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	68b9      	ldr	r1, [r7, #8]
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <nrf24_WriteRegMulti+0x48>)
 80005e2:	f001 fe12 	bl	800220a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005e6:	f7ff ff9b 	bl	8000520 <CS_UnSelect>
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000040 	.word	0x20000040

080005f8 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000606:	f7ff ff7f 	bl	8000508 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800060a:	1df9      	adds	r1, r7, #7
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	2201      	movs	r2, #1
 8000610:	4808      	ldr	r0, [pc, #32]	; (8000634 <nrf24_ReadReg+0x3c>)
 8000612:	f001 fdfa 	bl	800220a <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000616:	f107 010f 	add.w	r1, r7, #15
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	2201      	movs	r2, #1
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <nrf24_ReadReg+0x3c>)
 8000620:	f001 ff2f 	bl	8002482 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000624:	f7ff ff7c 	bl	8000520 <CS_UnSelect>

	return data;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000040 	.word	0x20000040

08000638 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000642:	f7ff ff61 	bl	8000508 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000646:	1df9      	adds	r1, r7, #7
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2201      	movs	r2, #1
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <nrfsendCmd+0x28>)
 800064e:	f001 fddc 	bl	800220a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000652:	f7ff ff65 	bl	8000520 <CS_UnSelect>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000040 	.word	0x20000040

08000664 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b07      	cmp	r3, #7
 8000672:	d104      	bne.n	800067e <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000674:	2100      	movs	r1, #0
 8000676:	2007      	movs	r0, #7
 8000678:	f7ff ff76 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 800067c:	e090      	b.n	80007a0 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b17      	cmp	r3, #23
 8000682:	d104      	bne.n	800068e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000684:	2111      	movs	r1, #17
 8000686:	2017      	movs	r0, #23
 8000688:	f7ff ff6e 	bl	8000568 <nrf24_WriteReg>
}
 800068c:	e088      	b.n	80007a0 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800068e:	2108      	movs	r1, #8
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff69 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000696:	213f      	movs	r1, #63	; 0x3f
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ff65 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800069e:	2103      	movs	r1, #3
 80006a0:	2002      	movs	r0, #2
 80006a2:	f7ff ff61 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80006a6:	2103      	movs	r1, #3
 80006a8:	2003      	movs	r0, #3
 80006aa:	f7ff ff5d 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80006ae:	2103      	movs	r1, #3
 80006b0:	2004      	movs	r0, #4
 80006b2:	f7ff ff59 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80006b6:	2102      	movs	r1, #2
 80006b8:	2005      	movs	r0, #5
 80006ba:	f7ff ff55 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80006be:	210e      	movs	r1, #14
 80006c0:	2006      	movs	r0, #6
 80006c2:	f7ff ff51 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80006c6:	2100      	movs	r1, #0
 80006c8:	2007      	movs	r0, #7
 80006ca:	f7ff ff4d 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80006ce:	2100      	movs	r1, #0
 80006d0:	2008      	movs	r0, #8
 80006d2:	f7ff ff49 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80006d6:	2100      	movs	r1, #0
 80006d8:	2009      	movs	r0, #9
 80006da:	f7ff ff45 	bl	8000568 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006de:	4a32      	ldr	r2, [pc, #200]	; (80007a8 <nrf24_reset+0x144>)
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e8:	6018      	str	r0, [r3, #0]
 80006ea:	3304      	adds	r3, #4
 80006ec:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	2205      	movs	r2, #5
 80006f4:	4619      	mov	r1, r3
 80006f6:	200a      	movs	r0, #10
 80006f8:	f7ff ff58 	bl	80005ac <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80006fc:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <nrf24_reset+0x148>)
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000706:	6018      	str	r0, [r3, #0]
 8000708:	3304      	adds	r3, #4
 800070a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2205      	movs	r2, #5
 8000712:	4619      	mov	r1, r3
 8000714:	200b      	movs	r0, #11
 8000716:	f7ff ff49 	bl	80005ac <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800071a:	21c3      	movs	r1, #195	; 0xc3
 800071c:	200c      	movs	r0, #12
 800071e:	f7ff ff23 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000722:	21c4      	movs	r1, #196	; 0xc4
 8000724:	200d      	movs	r0, #13
 8000726:	f7ff ff1f 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800072a:	21c5      	movs	r1, #197	; 0xc5
 800072c:	200e      	movs	r0, #14
 800072e:	f7ff ff1b 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000732:	21c6      	movs	r1, #198	; 0xc6
 8000734:	200f      	movs	r0, #15
 8000736:	f7ff ff17 	bl	8000568 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <nrf24_reset+0x144>)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000744:	6018      	str	r0, [r3, #0]
 8000746:	3304      	adds	r3, #4
 8000748:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	2205      	movs	r2, #5
 8000750:	4619      	mov	r1, r3
 8000752:	2010      	movs	r0, #16
 8000754:	f7ff ff2a 	bl	80005ac <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000758:	2100      	movs	r1, #0
 800075a:	2011      	movs	r0, #17
 800075c:	f7ff ff04 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	2012      	movs	r0, #18
 8000764:	f7ff ff00 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000768:	2100      	movs	r1, #0
 800076a:	2013      	movs	r0, #19
 800076c:	f7ff fefc 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2014      	movs	r0, #20
 8000774:	f7ff fef8 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000778:	2100      	movs	r1, #0
 800077a:	2015      	movs	r0, #21
 800077c:	f7ff fef4 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000780:	2100      	movs	r1, #0
 8000782:	2016      	movs	r0, #22
 8000784:	f7ff fef0 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000788:	2111      	movs	r1, #17
 800078a:	2017      	movs	r0, #23
 800078c:	f7ff feec 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	201c      	movs	r0, #28
 8000794:	f7ff fee8 	bl	8000568 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000798:	2100      	movs	r1, #0
 800079a:	201d      	movs	r0, #29
 800079c:	f7ff fee4 	bl	8000568 <nrf24_WriteReg>
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	0800323c 	.word	0x0800323c
 80007ac:	08003244 	.word	0x08003244

080007b0 <NRF24_Init>:




void NRF24_Init (void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80007b4:	f7ff fecc 	bl	8000550 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff53 	bl	8000664 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80007be:	2100      	movs	r1, #0
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff fed1 	bl	8000568 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80007c6:	2100      	movs	r1, #0
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fecd 	bl	8000568 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80007ce:	2100      	movs	r1, #0
 80007d0:	2002      	movs	r0, #2
 80007d2:	f7ff fec9 	bl	8000568 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80007d6:	2103      	movs	r1, #3
 80007d8:	2003      	movs	r0, #3
 80007da:	f7ff fec5 	bl	8000568 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80007de:	2100      	movs	r1, #0
 80007e0:	2004      	movs	r0, #4
 80007e2:	f7ff fec1 	bl	8000568 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80007e6:	2100      	movs	r1, #0
 80007e8:	2005      	movs	r0, #5
 80007ea:	f7ff febd 	bl	8000568 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80007ee:	210e      	movs	r1, #14
 80007f0:	2006      	movs	r0, #6
 80007f2:	f7ff feb9 	bl	8000568 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007f6:	f7ff fe9f 	bl	8000538 <CE_Enable>

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}

080007fe <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800080a:	f7ff fea1 	bl	8000550 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	4619      	mov	r1, r3
 8000812:	2005      	movs	r0, #5
 8000814:	f7ff fea8 	bl	8000568 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000818:	2205      	movs	r2, #5
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	2010      	movs	r0, #16
 800081e:	f7ff fec5 	bl	80005ac <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fee8 	bl	80005f8 <nrf24_ReadReg>
 8000828:	4603      	mov	r3, r0
 800082a:	73fb      	strb	r3, [r7, #15]
//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	f023 030d 	bic.w	r3, r3, #13
 8000832:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	4619      	mov	r1, r3
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fe95 	bl	8000568 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800083e:	f7ff fe7b 	bl	8000538 <CE_Enable>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 8000858:	f7ff fe56 	bl	8000508 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 800085c:	23a0      	movs	r3, #160	; 0xa0
 800085e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000860:	f107 010e 	add.w	r1, r7, #14
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <NRF24_Transmit+0x78>)
 800086a:	f001 fcce 	bl	800220a <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	2220      	movs	r2, #32
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4813      	ldr	r0, [pc, #76]	; (80008c4 <NRF24_Transmit+0x78>)
 8000878:	f001 fcc7 	bl	800220a <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 800087c:	f7ff fe50 	bl	8000520 <CS_UnSelect>

	HAL_Delay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 fb2f 	bl	8000ee4 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000886:	2017      	movs	r0, #23
 8000888:	f7ff feb6 	bl	80005f8 <nrf24_ReadReg>
 800088c:	4603      	mov	r3, r0
 800088e:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00f      	beq.n	80008ba <NRF24_Transmit+0x6e>
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10a      	bne.n	80008ba <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 80008a4:	23e1      	movs	r3, #225	; 0xe1
 80008a6:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fec4 	bl	8000638 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 80008b0:	2017      	movs	r0, #23
 80008b2:	f7ff fed7 	bl	8000664 <nrf24_reset>

		return 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <NRF24_Transmit+0x70>
	}

	return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000040 	.word	0x20000040

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f000 fa98 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f822 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f000 f8f2 	bl	8000abc <MX_GPIO_Init>
  MX_SPI1_Init();
 80008d8:	f000 f890 	bl	80009fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008dc:	f000 f8c4 	bl	8000a68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 80008e0:	f7ff ff66 	bl	80007b0 <NRF24_Init>
//  NRF24_RxMode(RxAddress, 10);
  NRF24_TxMode(TxAddress, 10);
 80008e4:	210a      	movs	r1, #10
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <main+0x44>)
 80008e8:	f7ff ff89 	bl	80007fe <NRF24_TxMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (NRF24_Transmit(TxData) == 1)
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <main+0x48>)
 80008ee:	f7ff ffad 	bl	800084c <NRF24_Transmit>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d104      	bne.n	8000902 <main+0x3a>
	  	  {
	  		  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
 80008f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <main+0x4c>)
 80008fe:	f000 fda8 	bl	8001452 <HAL_GPIO_TogglePin>
	  	  }
	  	  HAL_Delay(1000);
 8000902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000906:	f000 faed 	bl	8000ee4 <HAL_Delay>
	  if (NRF24_Transmit(TxData) == 1)
 800090a:	e7ef      	b.n	80008ec <main+0x24>
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	40021400 	.word	0x40021400

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fc74 	bl	8003214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <SystemClock_Config+0xdc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a2b      	ldr	r2, [pc, #172]	; (80009f4 <SystemClock_Config+0xdc>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <SystemClock_Config+0xdc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	2300      	movs	r3, #0
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <SystemClock_Config+0xe0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a25      	ldr	r2, [pc, #148]	; (80009f8 <SystemClock_Config+0xe0>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <SystemClock_Config+0xe0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000988:	2308      	movs	r3, #8
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800098c:	23b4      	movs	r3, #180	; 0xb4
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 f90b 	bl	8001bbc <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009ac:	f000 f8fc 	bl	8000ba8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009b0:	f000 fd6a 	bl	8001488 <HAL_PWREx_EnableOverDrive>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ba:	f000 f8f5 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2105      	movs	r1, #5
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fda3 	bl	8001528 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009e8:	f000 f8de 	bl	8000ba8 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a4e:	f001 fb53 	bl	80020f8 <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a58:	f000 f8a6 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000040 	.word	0x20000040
 8000a64:	40013000 	.word	0x40013000

08000a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART2_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f002 f8d2 	bl	8002c48 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f87d 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000098 	.word	0x20000098
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_GPIO_Init+0xe0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2103      	movs	r1, #3
 8000b46:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000b48:	f000 fc6a 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000b52:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <MX_GPIO_Init+0xe8>)
 8000b54:	f000 fc64 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000b70:	f000 fac2 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b74:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0xe8>)
 8000b8e:	f000 fab3 	bl	80010f8 <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb6:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <Error_Handler+0x18>)
 8000bb8:	f000 fc32 	bl	8001420 <HAL_GPIO_WritePin>
 8000bbc:	e7f8      	b.n	8000bb0 <Error_Handler+0x8>
 8000bbe:	bf00      	nop
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 fa44 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_SPI_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23e0      	movs	r3, #224	; 0xe0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c8a:	f000 fa35 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40013000 	.word	0x40013000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000d1a:	f000 f9ed 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f890 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f002 f9f7 	bl	80031cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fd73 	bl	80008c8 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000df0:	08003274 	.word	0x08003274
  ldr r2, =_sbss
 8000df4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000df8:	200000e0 	.word	0x200000e0

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f931 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fec6 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f93b 	bl	80010de <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f911 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000018 	.word	0x20000018
 8000e9c:	20000020 	.word	0x20000020
 8000ea0:	2000001c 	.word	0x2000001c

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000020 	.word	0x20000020
 8000ec8:	200000dc 	.word	0x200000dc

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200000dc 	.word	0x200000dc

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000020 	.word	0x20000020

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff47 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff5c 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffb0 	bl	800104c <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e165      	b.n	80013e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8154 	bne.w	80013da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80ae 	beq.w	80013da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a5c      	ldr	r2, [pc, #368]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a58      	ldr	r2, [pc, #352]	; (80013fc <HAL_GPIO_Init+0x304>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x308>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d025      	beq.n	8001312 <HAL_GPIO_Init+0x21a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_GPIO_Init+0x30c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01f      	beq.n	800130e <HAL_GPIO_Init+0x216>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x310>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x212>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x20e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x20a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x206>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a49      	ldr	r2, [pc, #292]	; (8001418 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x202>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00c      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00a      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 80012fe:	2305      	movs	r3, #5
 8001300:	e008      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 8001302:	2304      	movs	r3, #4
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 8001312:	2300      	movs	r3, #0
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001324:	4935      	ldr	r1, [pc, #212]	; (80013fc <HAL_GPIO_Init+0x304>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <HAL_GPIO_Init+0x324>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a31      	ldr	r2, [pc, #196]	; (800141c <HAL_GPIO_Init+0x324>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_GPIO_Init+0x324>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_GPIO_Init+0x324>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_GPIO_Init+0x324>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_GPIO_Init+0x324>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_GPIO_Init+0x324>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_GPIO_Init+0x324>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	f67f ae96 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40013800 	.word	0x40013800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40021400 	.word	0x40021400
 8001418:	40021800 	.word	0x40021800
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	041a      	lsls	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43d9      	mvns	r1, r3
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	400b      	ands	r3, r1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_PWREx_EnableOverDrive+0x90>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_PWREx_EnableOverDrive+0x90>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_PWREx_EnableOverDrive+0x90>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_PWREx_EnableOverDrive+0x94>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff fd0a 	bl	8000ecc <HAL_GetTick>
 80014b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ba:	e009      	b.n	80014d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014bc:	f7ff fd06 	bl	8000ecc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ca:	d901      	bls.n	80014d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e01f      	b.n	8001510 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d1ee      	bne.n	80014bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e4:	f7ff fcf2 	bl	8000ecc <HAL_GetTick>
 80014e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014ea:	e009      	b.n	8001500 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014ec:	f7ff fcee 	bl	8000ecc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fa:	d901      	bls.n	8001500 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e007      	b.n	8001510 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_PWREx_EnableOverDrive+0x98>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800150c:	d1ee      	bne.n	80014ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	420e0040 	.word	0x420e0040
 8001520:	40007000 	.word	0x40007000
 8001524:	420e0044 	.word	0x420e0044

08001528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0cc      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d90c      	bls.n	8001564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0b8      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800159e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	494d      	ldr	r1, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d044      	beq.n	8001648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e07f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e067      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4934      	ldr	r1, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff fc58 	bl	8000ecc <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff fc54 	bl	8000ecc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e04f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d20c      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e032      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4916      	ldr	r1, [pc, #88]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	490e      	ldr	r1, [pc, #56]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ae:	f000 f855 	bl	800175c <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490a      	ldr	r1, [pc, #40]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fbb8 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	0800324c 	.word	0x0800324c
 80016ec:	20000018 	.word	0x20000018
 80016f0:	2000001c 	.word	0x2000001c

080016f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_RCC_GetHCLKFreq+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000018 	.word	0x20000018

0800170c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001710:	f7ff fff0 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	0a9b      	lsrs	r3, r3, #10
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4903      	ldr	r1, [pc, #12]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	0800325c 	.word	0x0800325c

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001738:	f7ff ffdc 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	0b5b      	lsrs	r3, r3, #13
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4903      	ldr	r1, [pc, #12]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	0800325c 	.word	0x0800325c

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001760:	b0ae      	sub	sp, #184	; 0xb8
 8001762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001782:	4bcb      	ldr	r3, [pc, #812]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b0c      	cmp	r3, #12
 800178c:	f200 8206 	bhi.w	8001b9c <HAL_RCC_GetSysClockFreq+0x440>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017cd 	.word	0x080017cd
 800179c:	08001b9d 	.word	0x08001b9d
 80017a0:	08001b9d 	.word	0x08001b9d
 80017a4:	08001b9d 	.word	0x08001b9d
 80017a8:	080017d5 	.word	0x080017d5
 80017ac:	08001b9d 	.word	0x08001b9d
 80017b0:	08001b9d 	.word	0x08001b9d
 80017b4:	08001b9d 	.word	0x08001b9d
 80017b8:	080017dd 	.word	0x080017dd
 80017bc:	08001b9d 	.word	0x08001b9d
 80017c0:	08001b9d 	.word	0x08001b9d
 80017c4:	08001b9d 	.word	0x08001b9d
 80017c8:	080019cd 	.word	0x080019cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4bb9      	ldr	r3, [pc, #740]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x358>)
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80017d2:	e1e7      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d4:	4bb8      	ldr	r3, [pc, #736]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017da:	e1e3      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017dc:	4bb4      	ldr	r3, [pc, #720]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017e8:	4bb1      	ldr	r3, [pc, #708]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d071      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f4:	4bae      	ldr	r3, [pc, #696]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	2200      	movs	r2, #0
 80017fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001800:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800181a:	4622      	mov	r2, r4
 800181c:	462b      	mov	r3, r5
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	0159      	lsls	r1, r3, #5
 8001828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182c:	0150      	lsls	r0, r2, #5
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4621      	mov	r1, r4
 8001834:	1a51      	subs	r1, r2, r1
 8001836:	6439      	str	r1, [r7, #64]	; 0x40
 8001838:	4629      	mov	r1, r5
 800183a:	eb63 0301 	sbc.w	r3, r3, r1
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800184c:	4649      	mov	r1, r9
 800184e:	018b      	lsls	r3, r1, #6
 8001850:	4641      	mov	r1, r8
 8001852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001856:	4641      	mov	r1, r8
 8001858:	018a      	lsls	r2, r1, #6
 800185a:	4641      	mov	r1, r8
 800185c:	1a51      	subs	r1, r2, r1
 800185e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001860:	4649      	mov	r1, r9
 8001862:	eb63 0301 	sbc.w	r3, r3, r1
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001874:	4649      	mov	r1, r9
 8001876:	00cb      	lsls	r3, r1, #3
 8001878:	4641      	mov	r1, r8
 800187a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800187e:	4641      	mov	r1, r8
 8001880:	00ca      	lsls	r2, r1, #3
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	4603      	mov	r3, r0
 8001888:	4622      	mov	r2, r4
 800188a:	189b      	adds	r3, r3, r2
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
 800188e:	462b      	mov	r3, r5
 8001890:	460a      	mov	r2, r1
 8001892:	eb42 0303 	adc.w	r3, r2, r3
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018a4:	4629      	mov	r1, r5
 80018a6:	024b      	lsls	r3, r1, #9
 80018a8:	4621      	mov	r1, r4
 80018aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ae:	4621      	mov	r1, r4
 80018b0:	024a      	lsls	r2, r1, #9
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018ba:	2200      	movs	r2, #0
 80018bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80018c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80018c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80018c8:	f7fe fc9c 	bl	8000204 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018d6:	e067      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	4b75      	ldr	r3, [pc, #468]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	2200      	movs	r2, #0
 80018e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80018e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80018f2:	2300      	movs	r3, #0
 80018f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018fa:	4622      	mov	r2, r4
 80018fc:	462b      	mov	r3, r5
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	0159      	lsls	r1, r3, #5
 8001908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190c:	0150      	lsls	r0, r2, #5
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4621      	mov	r1, r4
 8001914:	1a51      	subs	r1, r2, r1
 8001916:	62b9      	str	r1, [r7, #40]	; 0x28
 8001918:	4629      	mov	r1, r5
 800191a:	eb63 0301 	sbc.w	r3, r3, r1
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800192c:	4649      	mov	r1, r9
 800192e:	018b      	lsls	r3, r1, #6
 8001930:	4641      	mov	r1, r8
 8001932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001936:	4641      	mov	r1, r8
 8001938:	018a      	lsls	r2, r1, #6
 800193a:	4641      	mov	r1, r8
 800193c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001940:	4649      	mov	r1, r9
 8001942:	eb63 0b01 	sbc.w	fp, r3, r1
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001952:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800195a:	4692      	mov	sl, r2
 800195c:	469b      	mov	fp, r3
 800195e:	4623      	mov	r3, r4
 8001960:	eb1a 0303 	adds.w	r3, sl, r3
 8001964:	623b      	str	r3, [r7, #32]
 8001966:	462b      	mov	r3, r5
 8001968:	eb4b 0303 	adc.w	r3, fp, r3
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800197a:	4629      	mov	r1, r5
 800197c:	028b      	lsls	r3, r1, #10
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001984:	4621      	mov	r1, r4
 8001986:	028a      	lsls	r2, r1, #10
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001990:	2200      	movs	r2, #0
 8001992:	673b      	str	r3, [r7, #112]	; 0x70
 8001994:	677a      	str	r2, [r7, #116]	; 0x74
 8001996:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800199a:	f7fe fc33 	bl	8000204 <__aeabi_uldivmod>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4613      	mov	r3, r2
 80019a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	0c1b      	lsrs	r3, r3, #16
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	3301      	adds	r3, #1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80019ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019ca:	e0eb      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d06b      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e4:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	2200      	movs	r2, #0
 80019ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80019ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f6:	663b      	str	r3, [r7, #96]	; 0x60
 80019f8:	2300      	movs	r3, #0
 80019fa:	667b      	str	r3, [r7, #100]	; 0x64
 80019fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a00:	4622      	mov	r2, r4
 8001a02:	462b      	mov	r3, r5
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	0159      	lsls	r1, r3, #5
 8001a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a12:	0150      	lsls	r0, r2, #5
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4621      	mov	r1, r4
 8001a1a:	1a51      	subs	r1, r2, r1
 8001a1c:	61b9      	str	r1, [r7, #24]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	eb63 0301 	sbc.w	r3, r3, r1
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a32:	4659      	mov	r1, fp
 8001a34:	018b      	lsls	r3, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3c:	4651      	mov	r1, sl
 8001a3e:	018a      	lsls	r2, r1, #6
 8001a40:	4651      	mov	r1, sl
 8001a42:	ebb2 0801 	subs.w	r8, r2, r1
 8001a46:	4659      	mov	r1, fp
 8001a48:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a60:	4690      	mov	r8, r2
 8001a62:	4699      	mov	r9, r3
 8001a64:	4623      	mov	r3, r4
 8001a66:	eb18 0303 	adds.w	r3, r8, r3
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	eb49 0303 	adc.w	r3, r9, r3
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a80:	4629      	mov	r1, r5
 8001a82:	024b      	lsls	r3, r1, #9
 8001a84:	4621      	mov	r1, r4
 8001a86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	024a      	lsls	r2, r1, #9
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a96:	2200      	movs	r2, #0
 8001a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001aa0:	f7fe fbb0 	bl	8000204 <__aeabi_uldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001aae:	e065      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x420>
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abc:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001acc:	653b      	str	r3, [r7, #80]	; 0x50
 8001ace:	2300      	movs	r3, #0
 8001ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ad2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	464b      	mov	r3, r9
 8001ada:	f04f 0000 	mov.w	r0, #0
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	0159      	lsls	r1, r3, #5
 8001ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae8:	0150      	lsls	r0, r2, #5
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4641      	mov	r1, r8
 8001af0:	1a51      	subs	r1, r2, r1
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	4649      	mov	r1, r9
 8001af6:	eb63 0301 	sbc.w	r3, r3, r1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b08:	4659      	mov	r1, fp
 8001b0a:	018b      	lsls	r3, r1, #6
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b12:	4651      	mov	r1, sl
 8001b14:	018a      	lsls	r2, r1, #6
 8001b16:	4651      	mov	r1, sl
 8001b18:	1a54      	subs	r4, r2, r1
 8001b1a:	4659      	mov	r1, fp
 8001b1c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	00eb      	lsls	r3, r5, #3
 8001b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b2e:	00e2      	lsls	r2, r4, #3
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
 8001b34:	4643      	mov	r3, r8
 8001b36:	18e3      	adds	r3, r4, r3
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	eb45 0303 	adc.w	r3, r5, r3
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b4e:	4629      	mov	r1, r5
 8001b50:	028b      	lsls	r3, r1, #10
 8001b52:	4621      	mov	r1, r4
 8001b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b58:	4621      	mov	r1, r4
 8001b5a:	028a      	lsls	r2, r1, #10
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b64:	2200      	movs	r2, #0
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b6e:	f7fe fb49 	bl	8000204 <__aeabi_uldivmod>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4613      	mov	r3, r2
 8001b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	0f1b      	lsrs	r3, r3, #28
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b9a:	e003      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ba2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	37b8      	adds	r7, #184	; 0xb8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	00f42400 	.word	0x00f42400

08001bbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e28d      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8083 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bdc:	4b94      	ldr	r3, [pc, #592]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d019      	beq.n	8001c1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001be8:	4b91      	ldr	r3, [pc, #580]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bf4:	4b8e      	ldr	r3, [pc, #568]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c00:	d00c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c02:	4b8b      	ldr	r3, [pc, #556]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0e:	4b88      	ldr	r3, [pc, #544]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c1a:	d10b      	bne.n	8001c34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d05b      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x124>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d157      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e25a      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3c:	d106      	bne.n	8001c4c <HAL_RCC_OscConfig+0x90>
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7b      	ldr	r2, [pc, #492]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xcc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xb4>
 8001c56:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a72      	ldr	r2, [pc, #456]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xcc>
 8001c70:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6e      	ldr	r2, [pc, #440]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6b      	ldr	r2, [pc, #428]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f91c 	bl	8000ecc <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff f918 	bl	8000ecc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e21f      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xdc>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f908 	bl	8000ecc <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f904 	bl	8000ecc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e20b      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x104>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d06f      	beq.n	8001dce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cee:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d017      	beq.n	8001d2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cfa:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d105      	bne.n	8001d12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d06:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d12:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x186>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1d3      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4937      	ldr	r1, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <HAL_RCC_OscConfig+0x278>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff f8b1 	bl	8000ecc <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f8ad 	bl	8000ecc <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1b4      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4925      	ldr	r1, [pc, #148]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_OscConfig+0x278>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f890 	bl	8000ecc <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff f88c 	bl	8000ecc <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e193      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d036      	beq.n	8001e48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f870 	bl	8000ecc <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff f86c 	bl	8000ecc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e173      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x234>
 8001e0e:	e01b      	b.n	8001e48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_OscConfig+0x27c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff f859 	bl	8000ecc <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	e00e      	b.n	8001e3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f855 	bl	8000ecc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d907      	bls.n	8001e3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e15c      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	42470000 	.word	0x42470000
 8001e38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b8a      	ldr	r3, [pc, #552]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ea      	bne.n	8001e1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8097 	beq.w	8001f84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b83      	ldr	r3, [pc, #524]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a7e      	ldr	r2, [pc, #504]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b79      	ldr	r3, [pc, #484]	; (800206c <HAL_RCC_OscConfig+0x4b0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x4b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a75      	ldr	r2, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x4b0>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f815 	bl	8000ecc <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff f811 	bl	8000ecc <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e118      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_RCC_OscConfig+0x4b0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x31e>
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	e01c      	b.n	8001f14 <HAL_RCC_OscConfig+0x358>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x340>
 8001ee2:	4b61      	ldr	r3, [pc, #388]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a60      	ldr	r2, [pc, #384]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0x358>
 8001efc:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	4a59      	ldr	r2, [pc, #356]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6713      	str	r3, [r2, #112]	; 0x70
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7fe ffd6 	bl	8000ecc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7fe ffd2 	bl	8000ecc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0d7      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ee      	beq.n	8001f24 <HAL_RCC_OscConfig+0x368>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7fe ffc0 	bl	8000ecc <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7fe ffbc 	bl	8000ecc <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0c1      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ee      	bne.n	8001f50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a3a      	ldr	r2, [pc, #232]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80ad 	beq.w	80020e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d060      	beq.n	800205c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d145      	bne.n	800202e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_RCC_OscConfig+0x4b4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ff90 	bl	8000ecc <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe ff8c 	bl	8000ecc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e093      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	071b      	lsls	r3, r3, #28
 8001ffa:	491b      	ldr	r1, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4b4>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7fe ff61 	bl	8000ecc <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe ff5d 	bl	8000ecc <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e064      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x452>
 800202c:	e05c      	b.n	80020e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x4b4>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe ff4a 	bl	8000ecc <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe ff46 	bl	8000ecc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e04d      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x480>
 800205a:	e045      	b.n	80020e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e040      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
 8002068:	40023800 	.word	0x40023800
 800206c:	40007000 	.word	0x40007000
 8002070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_RCC_OscConfig+0x538>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d030      	beq.n	80020e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d129      	bne.n	80020e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d122      	bne.n	80020e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d119      	bne.n	80020e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10f      	bne.n	80020e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07b      	b.n	8002202 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211a:	d009      	beq.n	8002130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
 8002122:	e005      	b.n	8002130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fd62 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	ea42 0103 	orr.w	r1, r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	f003 0104 	and.w	r1, r3, #4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f003 0210 	and.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b088      	sub	sp, #32
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_SPI_Transmit+0x22>
 8002228:	2302      	movs	r3, #2
 800222a:	e126      	b.n	800247a <HAL_SPI_Transmit+0x270>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002234:	f7fe fe4a 	bl	8000ecc <HAL_GetTick>
 8002238:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800224a:	2302      	movs	r3, #2
 800224c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800224e:	e10b      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Transmit+0x52>
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002260:	e102      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a8:	d10f      	bne.n	80022ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d007      	beq.n	80022e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f0:	d14b      	bne.n	800238a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_SPI_Transmit+0xf6>
 80022fa:	8afb      	ldrh	r3, [r7, #22]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d13e      	bne.n	800237e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	881a      	ldrh	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	1c9a      	adds	r2, r3, #2
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002324:	e02b      	b.n	800237e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d112      	bne.n	800235a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	1c9a      	adds	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	86da      	strh	r2, [r3, #54]	; 0x36
 8002358:	e011      	b.n	800237e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235a:	f7fe fdb7 	bl	8000ecc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d803      	bhi.n	8002372 <HAL_SPI_Transmit+0x168>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d102      	bne.n	8002378 <HAL_SPI_Transmit+0x16e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800237c:	e074      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ce      	bne.n	8002326 <HAL_SPI_Transmit+0x11c>
 8002388:	e04c      	b.n	8002424 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_SPI_Transmit+0x18e>
 8002392:	8afb      	ldrh	r3, [r7, #22]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d140      	bne.n	800241a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	7812      	ldrb	r2, [r2, #0]
 80023a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023be:	e02c      	b.n	800241a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d113      	bne.n	80023f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80023f4:	e011      	b.n	800241a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023f6:	f7fe fd69 	bl	8000ecc <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d803      	bhi.n	800240e <HAL_SPI_Transmit+0x204>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d102      	bne.n	8002414 <HAL_SPI_Transmit+0x20a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002418:	e026      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1cd      	bne.n	80023c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fbcb 	bl	8002bc4 <SPI_EndRxTxTransaction>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]
 8002464:	e000      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002466:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002478:	7ffb      	ldrb	r3, [r7, #31]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af02      	add	r7, sp, #8
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249e:	d112      	bne.n	80024c6 <HAL_SPI_Receive+0x44>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10e      	bne.n	80024c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2204      	movs	r2, #4
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024b0:	88fa      	ldrh	r2, [r7, #6]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f8f1 	bl	80026a4 <HAL_SPI_TransmitReceive>
 80024c2:	4603      	mov	r3, r0
 80024c4:	e0ea      	b.n	800269c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_SPI_Receive+0x52>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0e3      	b.n	800269c <HAL_SPI_Receive+0x21a>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024dc:	f7fe fcf6 	bl	8000ecc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
 80024f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024f2:	e0ca      	b.n	800268a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_SPI_Receive+0x7e>
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002504:	e0c1      	b.n	800268a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2204      	movs	r2, #4
 800250a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	88fa      	ldrh	r2, [r7, #6]
 8002524:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254c:	d10f      	bne.n	800256e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d007      	beq.n	800258c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d162      	bne.n	800265a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002594:	e02e      	b.n	80025f4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f103 020c 	add.w	r2, r3, #12
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025ce:	e011      	b.n	80025f4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d0:	f7fe fc7c 	bl	8000ecc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d803      	bhi.n	80025e8 <HAL_SPI_Receive+0x166>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d102      	bne.n	80025ee <HAL_SPI_Receive+0x16c>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025f2:	e04a      	b.n	800268a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1cb      	bne.n	8002596 <HAL_SPI_Receive+0x114>
 80025fe:	e031      	b.n	8002664 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d113      	bne.n	8002636 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	b292      	uxth	r2, r2
 800261a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	1c9a      	adds	r2, r3, #2
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002634:	e011      	b.n	800265a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002636:	f7fe fc49 	bl	8000ecc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d803      	bhi.n	800264e <HAL_SPI_Receive+0x1cc>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d102      	bne.n	8002654 <HAL_SPI_Receive+0x1d2>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002658:	e017      	b.n	800268a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1cd      	bne.n	8002600 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa45 	bl	8002af8 <SPI_EndRxTransaction>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
 8002686:	e000      	b.n	800268a <HAL_SPI_Receive+0x208>
  }

error :
 8002688:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026b2:	2301      	movs	r3, #1
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_TransmitReceive+0x26>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e18a      	b.n	80029e0 <HAL_SPI_TransmitReceive+0x33c>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d2:	f7fe fbfb 	bl	8000ecc <HAL_GetTick>
 80026d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d00f      	beq.n	8002714 <HAL_SPI_TransmitReceive+0x70>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fa:	d107      	bne.n	800270c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d103      	bne.n	800270c <HAL_SPI_TransmitReceive+0x68>
 8002704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002708:	2b04      	cmp	r3, #4
 800270a:	d003      	beq.n	8002714 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800270c:	2302      	movs	r3, #2
 800270e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002712:	e15b      	b.n	80029cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x82>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x82>
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800272c:	e14e      	b.n	80029cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b04      	cmp	r3, #4
 8002738:	d003      	beq.n	8002742 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2205      	movs	r2, #5
 800273e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d007      	beq.n	8002796 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800279e:	d178      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x10a>
 80027a8:	8b7b      	ldrh	r3, [r7, #26]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d166      	bne.n	800287c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	881a      	ldrh	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	1c9a      	adds	r2, r3, #2
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d2:	e053      	b.n	800287c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d11b      	bne.n	800281a <HAL_SPI_TransmitReceive+0x176>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d016      	beq.n	800281a <HAL_SPI_TransmitReceive+0x176>
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d113      	bne.n	800281a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	1c9a      	adds	r2, r3, #2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d119      	bne.n	800285c <HAL_SPI_TransmitReceive+0x1b8>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d014      	beq.n	800285c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	b292      	uxth	r2, r2
 800283e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002858:	2301      	movs	r3, #1
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800285c:	f7fe fb36 	bl	8000ecc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002868:	429a      	cmp	r2, r3
 800286a:	d807      	bhi.n	800287c <HAL_SPI_TransmitReceive+0x1d8>
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d003      	beq.n	800287c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800287a:	e0a7      	b.n	80029cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1a6      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x130>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1a1      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x130>
 8002890:	e07c      	b.n	800298c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x1fc>
 800289a:	8b7b      	ldrh	r3, [r7, #26]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d16b      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c6:	e057      	b.n	8002978 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d11c      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x26c>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d017      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x26c>
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d114      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d119      	bne.n	8002952 <HAL_SPI_TransmitReceive+0x2ae>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d014      	beq.n	8002952 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800294e:	2301      	movs	r3, #1
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002952:	f7fe fabb 	bl	8000ecc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800295e:	429a      	cmp	r2, r3
 8002960:	d803      	bhi.n	800296a <HAL_SPI_TransmitReceive+0x2c6>
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d102      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x2cc>
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002976:	e029      	b.n	80029cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1a2      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x224>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d19d      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800298c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f917 	bl	8002bc4 <SPI_EndRxTxTransaction>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029a8:	e010      	b.n	80029cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	e000      	b.n	80029cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3730      	adds	r7, #48	; 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029f8:	f7fe fa68 	bl	8000ecc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a08:	f7fe fa60 	bl	8000ecc <HAL_GetTick>
 8002a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	015b      	lsls	r3, r3, #5
 8002a14:	0d1b      	lsrs	r3, r3, #20
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1e:	e054      	b.n	8002aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d050      	beq.n	8002aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a28:	f7fe fa50 	bl	8000ecc <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d902      	bls.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d13d      	bne.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a56:	d111      	bne.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a60:	d004      	beq.n	8002a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d107      	bne.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a84:	d10f      	bne.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e017      	b.n	8002aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d19b      	bne.n	8002a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000018 	.word	0x20000018

08002af8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b0c:	d111      	bne.n	8002b32 <SPI_EndRxTransaction+0x3a>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b16:	d004      	beq.n	8002b22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b20:	d107      	bne.n	8002b32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3a:	d12a      	bne.n	8002b92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b44:	d012      	beq.n	8002b6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff ff49 	bl	80029e8 <SPI_WaitFlagStateUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d02d      	beq.n	8002bb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e026      	b.n	8002bba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2101      	movs	r1, #1
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f7ff ff36 	bl	80029e8 <SPI_WaitFlagStateUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01a      	beq.n	8002bb8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e013      	b.n	8002bba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff ff23 	bl	80029e8 <SPI_WaitFlagStateUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e000      	b.n	8002bba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <SPI_EndRxTxTransaction+0x7c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <SPI_EndRxTxTransaction+0x80>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0d5b      	lsrs	r3, r3, #21
 8002bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bee:	d112      	bne.n	8002c16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff fef4 	bl	80029e8 <SPI_WaitFlagStateUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e00f      	b.n	8002c36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d0f2      	beq.n	8002c16 <SPI_EndRxTxTransaction+0x52>
 8002c30:	e000      	b.n	8002c34 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c32:	bf00      	nop
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000018 	.word	0x20000018
 8002c44:	165e9f81 	.word	0x165e9f81

08002c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e03f      	b.n	8002cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f818 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f829 	bl	8002ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b0c0      	sub	sp, #256	; 0x100
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	68d9      	ldr	r1, [r3, #12]
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	ea40 0301 	orr.w	r3, r0, r1
 8002d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d3c:	f021 010c 	bic.w	r1, r1, #12
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	6999      	ldr	r1, [r3, #24]
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	ea40 0301 	orr.w	r3, r0, r1
 8002d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <UART_SetConfig+0x2cc>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d005      	beq.n	8002d84 <UART_SetConfig+0xa0>
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <UART_SetConfig+0x2d0>)
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d104      	bne.n	8002d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7fe fcd6 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8002d88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d8c:	e003      	b.n	8002d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d8e:	f7fe fcbd 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8002d92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da0:	f040 810c 	bne.w	8002fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da8:	2200      	movs	r2, #0
 8002daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002db6:	4622      	mov	r2, r4
 8002db8:	462b      	mov	r3, r5
 8002dba:	1891      	adds	r1, r2, r2
 8002dbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	eb12 0801 	adds.w	r8, r2, r1
 8002dcc:	4629      	mov	r1, r5
 8002dce:	eb43 0901 	adc.w	r9, r3, r1
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de6:	4690      	mov	r8, r2
 8002de8:	4699      	mov	r9, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	eb18 0303 	adds.w	r3, r8, r3
 8002df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002df4:	462b      	mov	r3, r5
 8002df6:	eb49 0303 	adc.w	r3, r9, r3
 8002dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e12:	460b      	mov	r3, r1
 8002e14:	18db      	adds	r3, r3, r3
 8002e16:	653b      	str	r3, [r7, #80]	; 0x50
 8002e18:	4613      	mov	r3, r2
 8002e1a:	eb42 0303 	adc.w	r3, r2, r3
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e28:	f7fd f9ec 	bl	8000204 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e54:	415b      	adcs	r3, r3
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e62:	4649      	mov	r1, r9
 8002e64:	eb43 0b01 	adc.w	fp, r3, r1
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7c:	4692      	mov	sl, r2
 8002e7e:	469b      	mov	fp, r3
 8002e80:	4643      	mov	r3, r8
 8002e82:	eb1a 0303 	adds.w	r3, sl, r3
 8002e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	18db      	adds	r3, r3, r3
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
 8002eae:	4613      	mov	r3, r2
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ebe:	f7fd f9a1 	bl	8000204 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002eca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2264      	movs	r2, #100	; 0x64
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	1acb      	subs	r3, r1, r3
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eec:	441c      	add	r4, r3
 8002eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f10:	4641      	mov	r1, r8
 8002f12:	1851      	adds	r1, r2, r1
 8002f14:	6339      	str	r1, [r7, #48]	; 0x30
 8002f16:	4649      	mov	r1, r9
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f28:	4659      	mov	r1, fp
 8002f2a:	00cb      	lsls	r3, r1, #3
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f32:	4651      	mov	r1, sl
 8002f34:	00ca      	lsls	r2, r1, #3
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f44:	464b      	mov	r3, r9
 8002f46:	460a      	mov	r2, r1
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f64:	460b      	mov	r3, r1
 8002f66:	18db      	adds	r3, r3, r3
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	eb42 0303 	adc.w	r3, r2, r3
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f7a:	f7fd f943 	bl	8000204 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4422      	add	r2, r4
 8002faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fac:	e105      	b.n	80031ba <UART_SetConfig+0x4d6>
 8002fae:	bf00      	nop
 8002fb0:	40011000 	.word	0x40011000
 8002fb4:	40011400 	.word	0x40011400
 8002fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fce:	4642      	mov	r2, r8
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	1891      	adds	r1, r2, r2
 8002fd4:	6239      	str	r1, [r7, #32]
 8002fd6:	415b      	adcs	r3, r3
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fde:	4641      	mov	r1, r8
 8002fe0:	1854      	adds	r4, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb43 0501 	adc.w	r5, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	00eb      	lsls	r3, r5, #3
 8002ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff6:	00e2      	lsls	r2, r4, #3
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	18e3      	adds	r3, r4, r3
 8003000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003004:	464b      	mov	r3, r9
 8003006:	eb45 0303 	adc.w	r3, r5, r3
 800300a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800301a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800302a:	4629      	mov	r1, r5
 800302c:	008b      	lsls	r3, r1, #2
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003034:	4621      	mov	r1, r4
 8003036:	008a      	lsls	r2, r1, #2
 8003038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800303c:	f7fd f8e2 	bl	8000204 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4b60      	ldr	r3, [pc, #384]	; (80031c8 <UART_SetConfig+0x4e4>)
 8003046:	fba3 2302 	umull	r2, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	011c      	lsls	r4, r3, #4
 800304e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003052:	2200      	movs	r2, #0
 8003054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800305c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003060:	4642      	mov	r2, r8
 8003062:	464b      	mov	r3, r9
 8003064:	1891      	adds	r1, r2, r2
 8003066:	61b9      	str	r1, [r7, #24]
 8003068:	415b      	adcs	r3, r3
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	4641      	mov	r1, r8
 8003072:	1851      	adds	r1, r2, r1
 8003074:	6139      	str	r1, [r7, #16]
 8003076:	4649      	mov	r1, r9
 8003078:	414b      	adcs	r3, r1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003088:	4659      	mov	r1, fp
 800308a:	00cb      	lsls	r3, r1, #3
 800308c:	4651      	mov	r1, sl
 800308e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003092:	4651      	mov	r1, sl
 8003094:	00ca      	lsls	r2, r1, #3
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	4603      	mov	r3, r0
 800309c:	4642      	mov	r2, r8
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a4:	464b      	mov	r3, r9
 80030a6:	460a      	mov	r2, r1
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030c8:	4649      	mov	r1, r9
 80030ca:	008b      	lsls	r3, r1, #2
 80030cc:	4641      	mov	r1, r8
 80030ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d2:	4641      	mov	r1, r8
 80030d4:	008a      	lsls	r2, r1, #2
 80030d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030da:	f7fd f893 	bl	8000204 <__aeabi_uldivmod>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <UART_SetConfig+0x4e4>)
 80030e4:	fba3 1302 	umull	r1, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	2164      	movs	r1, #100	; 0x64
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	3332      	adds	r3, #50	; 0x32
 80030f6:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <UART_SetConfig+0x4e4>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003102:	441c      	add	r4, r3
 8003104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003108:	2200      	movs	r2, #0
 800310a:	673b      	str	r3, [r7, #112]	; 0x70
 800310c:	677a      	str	r2, [r7, #116]	; 0x74
 800310e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	1891      	adds	r1, r2, r2
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	415b      	adcs	r3, r3
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003122:	4641      	mov	r1, r8
 8003124:	1851      	adds	r1, r2, r1
 8003126:	6039      	str	r1, [r7, #0]
 8003128:	4649      	mov	r1, r9
 800312a:	414b      	adcs	r3, r1
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800313a:	4659      	mov	r1, fp
 800313c:	00cb      	lsls	r3, r1, #3
 800313e:	4651      	mov	r1, sl
 8003140:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003144:	4651      	mov	r1, sl
 8003146:	00ca      	lsls	r2, r1, #3
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	4603      	mov	r3, r0
 800314e:	4642      	mov	r2, r8
 8003150:	189b      	adds	r3, r3, r2
 8003152:	66bb      	str	r3, [r7, #104]	; 0x68
 8003154:	464b      	mov	r3, r9
 8003156:	460a      	mov	r2, r1
 8003158:	eb42 0303 	adc.w	r3, r2, r3
 800315c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	663b      	str	r3, [r7, #96]	; 0x60
 8003168:	667a      	str	r2, [r7, #100]	; 0x64
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003176:	4649      	mov	r1, r9
 8003178:	008b      	lsls	r3, r1, #2
 800317a:	4641      	mov	r1, r8
 800317c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003180:	4641      	mov	r1, r8
 8003182:	008a      	lsls	r2, r1, #2
 8003184:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003188:	f7fd f83c 	bl	8000204 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <UART_SetConfig+0x4e4>)
 8003192:	fba3 1302 	umull	r1, r3, r3, r2
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2164      	movs	r1, #100	; 0x64
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	3332      	adds	r3, #50	; 0x32
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <UART_SetConfig+0x4e4>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4422      	add	r2, r4
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	bf00      	nop
 80031bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	51eb851f 	.word	0x51eb851f

080031cc <__libc_init_array>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	4d0d      	ldr	r5, [pc, #52]	; (8003204 <__libc_init_array+0x38>)
 80031d0:	4c0d      	ldr	r4, [pc, #52]	; (8003208 <__libc_init_array+0x3c>)
 80031d2:	1b64      	subs	r4, r4, r5
 80031d4:	10a4      	asrs	r4, r4, #2
 80031d6:	2600      	movs	r6, #0
 80031d8:	42a6      	cmp	r6, r4
 80031da:	d109      	bne.n	80031f0 <__libc_init_array+0x24>
 80031dc:	4d0b      	ldr	r5, [pc, #44]	; (800320c <__libc_init_array+0x40>)
 80031de:	4c0c      	ldr	r4, [pc, #48]	; (8003210 <__libc_init_array+0x44>)
 80031e0:	f000 f820 	bl	8003224 <_init>
 80031e4:	1b64      	subs	r4, r4, r5
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	2600      	movs	r6, #0
 80031ea:	42a6      	cmp	r6, r4
 80031ec:	d105      	bne.n	80031fa <__libc_init_array+0x2e>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f4:	4798      	blx	r3
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7ee      	b.n	80031d8 <__libc_init_array+0xc>
 80031fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fe:	4798      	blx	r3
 8003200:	3601      	adds	r6, #1
 8003202:	e7f2      	b.n	80031ea <__libc_init_array+0x1e>
 8003204:	0800326c 	.word	0x0800326c
 8003208:	0800326c 	.word	0x0800326c
 800320c:	0800326c 	.word	0x0800326c
 8003210:	08003270 	.word	0x08003270

08003214 <memset>:
 8003214:	4402      	add	r2, r0
 8003216:	4603      	mov	r3, r0
 8003218:	4293      	cmp	r3, r2
 800321a:	d100      	bne.n	800321e <memset+0xa>
 800321c:	4770      	bx	lr
 800321e:	f803 1b01 	strb.w	r1, [r3], #1
 8003222:	e7f9      	b.n	8003218 <memset+0x4>

08003224 <_init>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr

08003230 <_fini>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	bf00      	nop
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr
