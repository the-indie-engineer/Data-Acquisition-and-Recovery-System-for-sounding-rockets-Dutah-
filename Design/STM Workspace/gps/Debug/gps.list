
gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000522c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080053f8  080053f8  000153f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005550  08005550  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005558  08005558  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000074  080055d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  080055d4  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a405  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8b  00000000  00000000  0002a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211a5  00000000  00000000  0002d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af26  00000000  00000000  0004e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e90  00000000  00000000  00059103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  00120fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080053dc 	.word	0x080053dc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	080053dc 	.word	0x080053dc

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	b08c      	sub	sp, #48	; 0x30
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000ea4:	4b5b      	ldr	r3, [pc, #364]	; (8001014 <decodeGGA+0x17c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000eae:	e004      	b.n	8000eba <decodeGGA+0x22>
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <decodeGGA+0x17c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a57      	ldr	r2, [pc, #348]	; (8001014 <decodeGGA+0x17c>)
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b56      	ldr	r3, [pc, #344]	; (8001014 <decodeGGA+0x17c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b2c      	cmp	r3, #44	; 0x2c
 8000ec8:	d1f2      	bne.n	8000eb0 <decodeGGA+0x18>
	inx++;
 8000eca:	4b52      	ldr	r3, [pc, #328]	; (8001014 <decodeGGA+0x17c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a50      	ldr	r2, [pc, #320]	; (8001014 <decodeGGA+0x17c>)
 8000ed2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000ed4:	e004      	b.n	8000ee0 <decodeGGA+0x48>
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <decodeGGA+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a4d      	ldr	r2, [pc, #308]	; (8001014 <decodeGGA+0x17c>)
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <decodeGGA+0x17c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b2c      	cmp	r3, #44	; 0x2c
 8000eee:	d1f2      	bne.n	8000ed6 <decodeGGA+0x3e>
	inx++;
 8000ef0:	4b48      	ldr	r3, [pc, #288]	; (8001014 <decodeGGA+0x17c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a47      	ldr	r2, [pc, #284]	; (8001014 <decodeGGA+0x17c>)
 8000ef8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000efa:	e004      	b.n	8000f06 <decodeGGA+0x6e>
 8000efc:	4b45      	ldr	r3, [pc, #276]	; (8001014 <decodeGGA+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a44      	ldr	r2, [pc, #272]	; (8001014 <decodeGGA+0x17c>)
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <decodeGGA+0x17c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b2c      	cmp	r3, #44	; 0x2c
 8000f14:	d1f2      	bne.n	8000efc <decodeGGA+0x64>
	inx++;
 8000f16:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <decodeGGA+0x17c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a3d      	ldr	r2, [pc, #244]	; (8001014 <decodeGGA+0x17c>)
 8000f1e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000f20:	e004      	b.n	8000f2c <decodeGGA+0x94>
 8000f22:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <decodeGGA+0x17c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a3a      	ldr	r2, [pc, #232]	; (8001014 <decodeGGA+0x17c>)
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <decodeGGA+0x17c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b2c      	cmp	r3, #44	; 0x2c
 8000f3a:	d1f2      	bne.n	8000f22 <decodeGGA+0x8a>
	inx++;
 8000f3c:	4b35      	ldr	r3, [pc, #212]	; (8001014 <decodeGGA+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <decodeGGA+0x17c>)
 8000f44:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000f46:	e004      	b.n	8000f52 <decodeGGA+0xba>
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <decodeGGA+0x17c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	4a31      	ldr	r2, [pc, #196]	; (8001014 <decodeGGA+0x17c>)
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <decodeGGA+0x17c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f60:	d1f2      	bne.n	8000f48 <decodeGGA+0xb0>
	inx++;
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <decodeGGA+0x17c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	4a2a      	ldr	r2, [pc, #168]	; (8001014 <decodeGGA+0x17c>)
 8000f6a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000f6c:	e004      	b.n	8000f78 <decodeGGA+0xe0>
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <decodeGGA+0x17c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <decodeGGA+0x17c>)
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <decodeGGA+0x17c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b2c      	cmp	r3, #44	; 0x2c
 8000f86:	d1f2      	bne.n	8000f6e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <decodeGGA+0x17c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <decodeGGA+0x17c>)
 8000f90:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <decodeGGA+0x17c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b31      	cmp	r3, #49	; 0x31
 8000fa0:	d00f      	beq.n	8000fc2 <decodeGGA+0x12a>
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <decodeGGA+0x17c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b32      	cmp	r3, #50	; 0x32
 8000fb0:	d007      	beq.n	8000fc2 <decodeGGA+0x12a>
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <decodeGGA+0x17c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b36      	cmp	r3, #54	; 0x36
 8000fc0:	d106      	bne.n	8000fd0 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <decodeGGA+0x17c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000fce:	e009      	b.n	8000fe4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e2fd      	b.n	80015d6 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <decodeGGA+0x17c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <decodeGGA+0x17c>)
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <decodeGGA+0x17c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b2c      	cmp	r3, #44	; 0x2c
 8000ff2:	d1f2      	bne.n	8000fda <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <decodeGGA+0x17c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a06      	ldr	r2, [pc, #24]	; (8001014 <decodeGGA+0x17c>)
 8000ffc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	220c      	movs	r2, #12
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fa38 	bl	800447c <memset>
	i=0;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001010:	e016      	b.n	8001040 <decodeGGA+0x1a8>
 8001012:	bf00      	nop
 8001014:	20000090 	.word	0x20000090
	{
		buffer[i] = GGAbuffer[inx];
 8001018:	4bab      	ldr	r3, [pc, #684]	; (80012c8 <decodeGGA+0x430>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	7819      	ldrb	r1, [r3, #0]
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	4413      	add	r3, r2
 800102c:	460a      	mov	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
		i++;
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	3301      	adds	r3, #1
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001036:	4ba4      	ldr	r3, [pc, #656]	; (80012c8 <decodeGGA+0x430>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4aa2      	ldr	r2, [pc, #648]	; (80012c8 <decodeGGA+0x430>)
 800103e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001040:	4ba1      	ldr	r3, [pc, #644]	; (80012c8 <decodeGGA+0x430>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b2c      	cmp	r3, #44	; 0x2c
 800104e:	d1e3      	bne.n	8001018 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4618      	mov	r0, r3
 8001056:	f003 f9e3 	bl	8004420 <atoi>
 800105a:	4603      	mov	r3, r0
 800105c:	4a9b      	ldr	r2, [pc, #620]	; (80012cc <decodeGGA+0x434>)
 800105e:	fb82 1203 	smull	r1, r2, r2, r3
 8001062:	1312      	asrs	r2, r2, #12
 8001064:	17db      	asrs	r3, r3, #31
 8001066:	1ad2      	subs	r2, r2, r3
 8001068:	4b99      	ldr	r3, [pc, #612]	; (80012d0 <decodeGGA+0x438>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4999      	ldr	r1, [pc, #612]	; (80012d4 <decodeGGA+0x43c>)
 800106e:	fb81 0103 	smull	r0, r1, r1, r3
 8001072:	1149      	asrs	r1, r1, #5
 8001074:	17db      	asrs	r3, r3, #31
 8001076:	1acb      	subs	r3, r1, r3
 8001078:	4413      	add	r3, r2
 800107a:	4a97      	ldr	r2, [pc, #604]	; (80012d8 <decodeGGA+0x440>)
 800107c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4618      	mov	r0, r3
 8001084:	f003 f9cc 	bl	8004420 <atoi>
 8001088:	4603      	mov	r3, r0
 800108a:	4a92      	ldr	r2, [pc, #584]	; (80012d4 <decodeGGA+0x43c>)
 800108c:	fb82 1203 	smull	r1, r2, r2, r3
 8001090:	1152      	asrs	r2, r2, #5
 8001092:	17db      	asrs	r3, r3, #31
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a8f      	ldr	r2, [pc, #572]	; (80012d4 <decodeGGA+0x43c>)
 8001098:	fb82 1203 	smull	r1, r2, r2, r3
 800109c:	1151      	asrs	r1, r2, #5
 800109e:	17da      	asrs	r2, r3, #31
 80010a0:	1a8a      	subs	r2, r1, r2
 80010a2:	2164      	movs	r1, #100	; 0x64
 80010a4:	fb01 f202 	mul.w	r2, r1, r2
 80010a8:	1a9a      	subs	r2, r3, r2
 80010aa:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <decodeGGA+0x438>)
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	4b89      	ldr	r3, [pc, #548]	; (80012d4 <decodeGGA+0x43c>)
 80010b0:	fb83 0301 	smull	r0, r3, r3, r1
 80010b4:	1158      	asrs	r0, r3, #5
 80010b6:	17cb      	asrs	r3, r1, #31
 80010b8:	1ac3      	subs	r3, r0, r3
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	fb00 f303 	mul.w	r3, r0, r3
 80010c0:	1acb      	subs	r3, r1, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	4a85      	ldr	r2, [pc, #532]	; (80012dc <decodeGGA+0x444>)
 80010c6:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 80010c8:	4b84      	ldr	r3, [pc, #528]	; (80012dc <decodeGGA+0x444>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b3b      	cmp	r3, #59	; 0x3b
 80010ce:	dd09      	ble.n	80010e4 <decodeGGA+0x24c>
	{
		min = min-60;
 80010d0:	4b82      	ldr	r3, [pc, #520]	; (80012dc <decodeGGA+0x444>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3b3c      	subs	r3, #60	; 0x3c
 80010d6:	4a81      	ldr	r2, [pc, #516]	; (80012dc <decodeGGA+0x444>)
 80010d8:	6013      	str	r3, [r2, #0]
		hr++;
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <decodeGGA+0x440>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a7d      	ldr	r2, [pc, #500]	; (80012d8 <decodeGGA+0x440>)
 80010e2:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 80010e4:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <decodeGGA+0x440>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da09      	bge.n	8001100 <decodeGGA+0x268>
	{
		hr=24+hr;
 80010ec:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <decodeGGA+0x440>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3318      	adds	r3, #24
 80010f2:	4a79      	ldr	r2, [pc, #484]	; (80012d8 <decodeGGA+0x440>)
 80010f4:	6013      	str	r3, [r2, #0]
		daychange--;
 80010f6:	4b7a      	ldr	r3, [pc, #488]	; (80012e0 <decodeGGA+0x448>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a78      	ldr	r2, [pc, #480]	; (80012e0 <decodeGGA+0x448>)
 80010fe:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001100:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <decodeGGA+0x440>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b17      	cmp	r3, #23
 8001106:	dd09      	ble.n	800111c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001108:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <decodeGGA+0x440>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3b18      	subs	r3, #24
 800110e:	4a72      	ldr	r2, [pc, #456]	; (80012d8 <decodeGGA+0x440>)
 8001110:	6013      	str	r3, [r2, #0]
		daychange++;
 8001112:	4b73      	ldr	r3, [pc, #460]	; (80012e0 <decodeGGA+0x448>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a71      	ldr	r2, [pc, #452]	; (80012e0 <decodeGGA+0x448>)
 800111a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 800111c:	4b6e      	ldr	r3, [pc, #440]	; (80012d8 <decodeGGA+0x440>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001124:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <decodeGGA+0x444>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f975 	bl	8004420 <atoi>
 8001136:	4602      	mov	r2, r0
 8001138:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <decodeGGA+0x43c>)
 800113a:	fb83 1302 	smull	r1, r3, r3, r2
 800113e:	1159      	asrs	r1, r3, #5
 8001140:	17d3      	asrs	r3, r2, #31
 8001142:	1acb      	subs	r3, r1, r3
 8001144:	2164      	movs	r1, #100	; 0x64
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001150:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <decodeGGA+0x430>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a5c      	ldr	r2, [pc, #368]	; (80012c8 <decodeGGA+0x430>)
 8001158:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	220c      	movs	r2, #12
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f003 f98a 	bl	800447c <memset>
	i=0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800116c:	e013      	b.n	8001196 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800116e:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <decodeGGA+0x430>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	7819      	ldrb	r1, [r3, #0]
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	4413      	add	r3, r2
 8001182:	460a      	mov	r2, r1
 8001184:	701a      	strb	r2, [r3, #0]
		i++;
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	3301      	adds	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800118c:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <decodeGGA+0x430>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a4d      	ldr	r2, [pc, #308]	; (80012c8 <decodeGGA+0x430>)
 8001194:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <decodeGGA+0x430>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b2c      	cmp	r3, #44	; 0x2c
 80011a4:	d1e3      	bne.n	800116e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f82c 	bl	8000208 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d801      	bhi.n	80011ba <decodeGGA+0x322>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e20d      	b.n	80015d6 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f92e 	bl	8004420 <atoi>
 80011c4:	4603      	mov	r3, r0
 80011c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 80011cc:	e002      	b.n	80011d4 <decodeGGA+0x33c>
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	3301      	adds	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b2e      	cmp	r3, #46	; 0x2e
 80011e0:	d1f5      	bne.n	80011ce <decodeGGA+0x336>
	j++;
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	3301      	adds	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f80b 	bl	8000208 <strlen>
 80011f2:	4602      	mov	r2, r0
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	f107 020c 	add.w	r2, r7, #12
 8001200:	4413      	add	r3, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f003 f90c 	bl	8004420 <atoi>
 8001208:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800120a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f954 	bl	80004bc <__aeabi_i2d>
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <decodeGGA+0x44c>)
 800121a:	f7ff fae3 	bl	80007e4 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4690      	mov	r8, r2
 8001224:	4699      	mov	r9, r3
 8001226:	69f8      	ldr	r0, [r7, #28]
 8001228:	f7ff f948 	bl	80004bc <__aeabi_i2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	3302      	adds	r3, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f941 	bl	80004bc <__aeabi_i2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	ec43 2b11 	vmov	d1, r2, r3
 8001242:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80012c0 <decodeGGA+0x428>
 8001246:	f003 f9ad 	bl	80045a4 <pow>
 800124a:	ec53 2b10 	vmov	r2, r3, d0
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff fac7 	bl	80007e4 <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4640      	mov	r0, r8
 800125c:	4649      	mov	r1, r9
 800125e:	f7fe ffe1 	bl	8000224 <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fc41 	bl	8000af0 <__aeabi_d2f>
 800126e:	4603      	mov	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]
	inx++;  
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <decodeGGA+0x430>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <decodeGGA+0x430>)
 8001280:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <decodeGGA+0x430>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <decodeGGA+0x430>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <decodeGGA+0x430>)
 800129a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <decodeGGA+0x430>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <decodeGGA+0x430>)
 80012a4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	220c      	movs	r2, #12
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f8e4 	bl	800447c <memset>
	i=0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80012b8:	e02a      	b.n	8001310 <decodeGGA+0x478>
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40240000 	.word	0x40240000
 80012c8:	20000090 	.word	0x20000090
 80012cc:	68db8bad 	.word	0x68db8bad
 80012d0:	20000000 	.word	0x20000000
 80012d4:	51eb851f 	.word	0x51eb851f
 80012d8:	20000094 	.word	0x20000094
 80012dc:	20000098 	.word	0x20000098
 80012e0:	200000a8 	.word	0x200000a8
 80012e4:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 80012e8:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <decodeGGA+0x680>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	7819      	ldrb	r1, [r3, #0]
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	4413      	add	r3, r2
 80012fc:	460a      	mov	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
		i++;
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001302:	3301      	adds	r3, #1
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001306:	4b84      	ldr	r3, [pc, #528]	; (8001518 <decodeGGA+0x680>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a82      	ldr	r2, [pc, #520]	; (8001518 <decodeGGA+0x680>)
 800130e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <decodeGGA+0x680>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b2c      	cmp	r3, #44	; 0x2c
 800131e:	d1e3      	bne.n	80012e8 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4618      	mov	r0, r3
 8001326:	f003 f87b 	bl	8004420 <atoi>
 800132a:	4603      	mov	r3, r0
 800132c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001332:	e002      	b.n	800133a <decodeGGA+0x4a2>
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	3301      	adds	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
 800133a:	f107 020c 	add.w	r2, r7, #12
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b2e      	cmp	r3, #46	; 0x2e
 8001346:	d1f5      	bne.n	8001334 <decodeGGA+0x49c>
	j++;
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	3301      	adds	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ff58 	bl	8000208 <strlen>
 8001358:	4602      	mov	r2, r0
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	4413      	add	r3, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f003 f859 	bl	8004420 <atoi>
 800136e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001370:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8a1 	bl	80004bc <__aeabi_i2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b67      	ldr	r3, [pc, #412]	; (800151c <decodeGGA+0x684>)
 8001380:	f7ff fa30 	bl	80007e4 <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4690      	mov	r8, r2
 800138a:	4699      	mov	r9, r3
 800138c:	69f8      	ldr	r0, [r7, #28]
 800138e:	f7ff f895 	bl	80004bc <__aeabi_i2d>
 8001392:	4604      	mov	r4, r0
 8001394:	460d      	mov	r5, r1
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	3302      	adds	r3, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f88e 	bl	80004bc <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	ec43 2b11 	vmov	d1, r2, r3
 80013a8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001510 <decodeGGA+0x678>
 80013ac:	f003 f8fa 	bl	80045a4 <pow>
 80013b0:	ec53 2b10 	vmov	r2, r3, d0
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff fa14 	bl	80007e4 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4640      	mov	r0, r8
 80013c2:	4649      	mov	r1, r9
 80013c4:	f7fe ff2e 	bl	8000224 <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fb8e 	bl	8000af0 <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]
	inx++;
 80013de:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <decodeGGA+0x680>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <decodeGGA+0x680>)
 80013e6:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <decodeGGA+0x680>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	781a      	ldrb	r2, [r3, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80013f8:	4b47      	ldr	r3, [pc, #284]	; (8001518 <decodeGGA+0x680>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <decodeGGA+0x680>)
 8001400:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001402:	4b45      	ldr	r3, [pc, #276]	; (8001518 <decodeGGA+0x680>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a43      	ldr	r2, [pc, #268]	; (8001518 <decodeGGA+0x680>)
 800140a:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800140c:	4b42      	ldr	r3, [pc, #264]	; (8001518 <decodeGGA+0x680>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a41      	ldr	r2, [pc, #260]	; (8001518 <decodeGGA+0x680>)
 8001414:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <decodeGGA+0x680>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <decodeGGA+0x680>)
 800141e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	220c      	movs	r2, #12
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f827 	bl	800447c <memset>
	i=0;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001432:	e013      	b.n	800145c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <decodeGGA+0x680>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	7819      	ldrb	r1, [r3, #0]
 8001440:	f107 020c 	add.w	r2, r7, #12
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	4413      	add	r3, r2
 8001448:	460a      	mov	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
		i++;
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	3301      	adds	r3, #1
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <decodeGGA+0x680>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a2f      	ldr	r2, [pc, #188]	; (8001518 <decodeGGA+0x680>)
 800145a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800145c:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <decodeGGA+0x680>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b2c      	cmp	r3, #44	; 0x2c
 800146a:	d1e3      	bne.n	8001434 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4618      	mov	r0, r3
 8001472:	f002 ffd5 	bl	8004420 <atoi>
 8001476:	4602      	mov	r2, r0
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <decodeGGA+0x680>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <decodeGGA+0x680>)
 8001484:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001486:	e004      	b.n	8001492 <decodeGGA+0x5fa>
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <decodeGGA+0x680>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a22      	ldr	r2, [pc, #136]	; (8001518 <decodeGGA+0x680>)
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <decodeGGA+0x680>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b2c      	cmp	r3, #44	; 0x2c
 80014a0:	d1f2      	bne.n	8001488 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <decodeGGA+0x680>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <decodeGGA+0x680>)
 80014aa:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	220c      	movs	r2, #12
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 ffe1 	bl	800447c <memset>
	i=0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80014be:	e013      	b.n	80014e8 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <decodeGGA+0x680>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	7819      	ldrb	r1, [r3, #0]
 80014cc:	f107 020c 	add.w	r2, r7, #12
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	4413      	add	r3, r2
 80014d4:	460a      	mov	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]
		i++;
 80014d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014da:	3301      	adds	r3, #1
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <decodeGGA+0x680>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <decodeGGA+0x680>)
 80014e6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <decodeGGA+0x680>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b2c      	cmp	r3, #44	; 0x2c
 80014f6:	d1e3      	bne.n	80014c0 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 ff8f 	bl	8004420 <atoi>
 8001502:	4603      	mov	r3, r0
 8001504:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800150a:	e00c      	b.n	8001526 <decodeGGA+0x68e>
 800150c:	f3af 8000 	nop.w
 8001510:	00000000 	.word	0x00000000
 8001514:	40240000 	.word	0x40240000
 8001518:	20000090 	.word	0x20000090
 800151c:	40590000 	.word	0x40590000
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	3301      	adds	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b2e      	cmp	r3, #46	; 0x2e
 8001532:	d1f5      	bne.n	8001520 <decodeGGA+0x688>
	j++;
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	3301      	adds	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe fe62 	bl	8000208 <strlen>
 8001544:	4602      	mov	r2, r0
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	f107 020c 	add.w	r2, r7, #12
 8001552:	4413      	add	r3, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f002 ff63 	bl	8004420 <atoi>
 800155a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800155c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffab 	bl	80004bc <__aeabi_i2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
 800156a:	69f8      	ldr	r0, [r7, #28]
 800156c:	f7fe ffa6 	bl	80004bc <__aeabi_i2d>
 8001570:	4680      	mov	r8, r0
 8001572:	4689      	mov	r9, r1
 8001574:	6a38      	ldr	r0, [r7, #32]
 8001576:	f7fe ffa1 	bl	80004bc <__aeabi_i2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ec43 2b11 	vmov	d1, r2, r3
 8001582:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80015e0 <decodeGGA+0x748>
 8001586:	f003 f80d 	bl	80045a4 <pow>
 800158a:	ec53 2b10 	vmov	r2, r3, d0
 800158e:	4640      	mov	r0, r8
 8001590:	4649      	mov	r1, r9
 8001592:	f7ff f927 	bl	80007e4 <__aeabi_ddiv>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fe41 	bl	8000224 <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff faa1 	bl	8000af0 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	621a      	str	r2, [r3, #32]

	inx++;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <decodeGGA+0x750>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <decodeGGA+0x750>)
 80015c0:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <decodeGGA+0x750>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80015d4:	2300      	movs	r3, #0

}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3730      	adds	r7, #48	; 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40240000 	.word	0x40240000
 80015e8:	20000090 	.word	0x20000090
 80015ec:	00000000 	.word	0x00000000

080015f0 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 80015f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015f4:	b090      	sub	sp, #64	; 0x40
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	inx = 0;
 80015fc:	4b94      	ldr	r3, [pc, #592]	; (8001850 <decodeRMC+0x260>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8001606:	e004      	b.n	8001612 <decodeRMC+0x22>
 8001608:	4b91      	ldr	r3, [pc, #580]	; (8001850 <decodeRMC+0x260>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a90      	ldr	r2, [pc, #576]	; (8001850 <decodeRMC+0x260>)
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <decodeRMC+0x260>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b2c      	cmp	r3, #44	; 0x2c
 8001620:	d1f2      	bne.n	8001608 <decodeRMC+0x18>
	inx++;
 8001622:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <decodeRMC+0x260>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a89      	ldr	r2, [pc, #548]	; (8001850 <decodeRMC+0x260>)
 800162a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 800162c:	e004      	b.n	8001638 <decodeRMC+0x48>
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <decodeRMC+0x260>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a86      	ldr	r2, [pc, #536]	; (8001850 <decodeRMC+0x260>)
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b85      	ldr	r3, [pc, #532]	; (8001850 <decodeRMC+0x260>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b2c      	cmp	r3, #44	; 0x2c
 8001646:	d1f2      	bne.n	800162e <decodeRMC+0x3e>
	inx++;
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <decodeRMC+0x260>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	4a80      	ldr	r2, [pc, #512]	; (8001850 <decodeRMC+0x260>)
 8001650:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001652:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <decodeRMC+0x260>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b41      	cmp	r3, #65	; 0x41
 8001660:	d10d      	bne.n	800167e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2201      	movs	r2, #1
 8001666:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001668:	4b79      	ldr	r3, [pc, #484]	; (8001850 <decodeRMC+0x260>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a78      	ldr	r2, [pc, #480]	; (8001850 <decodeRMC+0x260>)
 8001670:	6013      	str	r3, [r2, #0]
	inx++;
 8001672:	4b77      	ldr	r3, [pc, #476]	; (8001850 <decodeRMC+0x260>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	4a75      	ldr	r2, [pc, #468]	; (8001850 <decodeRMC+0x260>)
 800167a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800167c:	e009      	b.n	8001692 <decodeRMC+0xa2>
		rmc->isValid =0;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
		return 1;
 8001684:	2301      	movs	r3, #1
 8001686:	e1d8      	b.n	8001a3a <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001688:	4b71      	ldr	r3, [pc, #452]	; (8001850 <decodeRMC+0x260>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	4a70      	ldr	r2, [pc, #448]	; (8001850 <decodeRMC+0x260>)
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <decodeRMC+0x260>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b2c      	cmp	r3, #44	; 0x2c
 80016a0:	d1f2      	bne.n	8001688 <decodeRMC+0x98>
	inx++;
 80016a2:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <decodeRMC+0x260>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a69      	ldr	r2, [pc, #420]	; (8001850 <decodeRMC+0x260>)
 80016aa:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80016ac:	e004      	b.n	80016b8 <decodeRMC+0xc8>
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <decodeRMC+0x260>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a66      	ldr	r2, [pc, #408]	; (8001850 <decodeRMC+0x260>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b65      	ldr	r3, [pc, #404]	; (8001850 <decodeRMC+0x260>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b2c      	cmp	r3, #44	; 0x2c
 80016c6:	d1f2      	bne.n	80016ae <decodeRMC+0xbe>
	inx++;
 80016c8:	4b61      	ldr	r3, [pc, #388]	; (8001850 <decodeRMC+0x260>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a60      	ldr	r2, [pc, #384]	; (8001850 <decodeRMC+0x260>)
 80016d0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80016d2:	e004      	b.n	80016de <decodeRMC+0xee>
 80016d4:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <decodeRMC+0x260>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a5d      	ldr	r2, [pc, #372]	; (8001850 <decodeRMC+0x260>)
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <decodeRMC+0x260>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b2c      	cmp	r3, #44	; 0x2c
 80016ec:	d1f2      	bne.n	80016d4 <decodeRMC+0xe4>
	inx++;
 80016ee:	4b58      	ldr	r3, [pc, #352]	; (8001850 <decodeRMC+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a56      	ldr	r2, [pc, #344]	; (8001850 <decodeRMC+0x260>)
 80016f6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 80016f8:	e004      	b.n	8001704 <decodeRMC+0x114>
 80016fa:	4b55      	ldr	r3, [pc, #340]	; (8001850 <decodeRMC+0x260>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a53      	ldr	r2, [pc, #332]	; (8001850 <decodeRMC+0x260>)
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b52      	ldr	r3, [pc, #328]	; (8001850 <decodeRMC+0x260>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b2c      	cmp	r3, #44	; 0x2c
 8001712:	d1f2      	bne.n	80016fa <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001714:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <decodeRMC+0x260>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a4d      	ldr	r2, [pc, #308]	; (8001850 <decodeRMC+0x260>)
 800171c:	6013      	str	r3, [r2, #0]
	i=0;
 800171e:	2300      	movs	r3, #0
 8001720:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	220c      	movs	r2, #12
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fea6 	bl	800447c <memset>
	while (RMCbuffer[inx] != ',')
 8001730:	e013      	b.n	800175a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <decodeRMC+0x260>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	7819      	ldrb	r1, [r3, #0]
 800173e:	f107 0208 	add.w	r2, r7, #8
 8001742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001744:	4413      	add	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
		i++;
 800174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174c:	3301      	adds	r3, #1
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <decodeRMC+0x260>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <decodeRMC+0x260>)
 8001758:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <decodeRMC+0x260>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b2c      	cmp	r3, #44	; 0x2c
 8001768:	d1e3      	bne.n	8001732 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d056      	beq.n	8001822 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fe51 	bl	8004420 <atoi>
 800177e:	4603      	mov	r3, r0
 8001780:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001786:	e002      	b.n	800178e <decodeRMC+0x19e>
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	3301      	adds	r3, #1
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
 800178e:	f107 0208 	add.w	r2, r7, #8
 8001792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b2e      	cmp	r3, #46	; 0x2e
 800179a:	d1f5      	bne.n	8001788 <decodeRMC+0x198>
		j++;
 800179c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179e:	3301      	adds	r3, #1
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd2e 	bl	8000208 <strlen>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80017b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b6:	f107 0208 	add.w	r2, r7, #8
 80017ba:	4413      	add	r3, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fe2f 	bl	8004420 <atoi>
 80017c2:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 80017c4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe77 	bl	80004bc <__aeabi_i2d>
 80017ce:	4604      	mov	r4, r0
 80017d0:	460d      	mov	r5, r1
 80017d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017d4:	f7fe fe72 	bl	80004bc <__aeabi_i2d>
 80017d8:	4680      	mov	r8, r0
 80017da:	4689      	mov	r9, r1
 80017dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017de:	f7fe fe6d 	bl	80004bc <__aeabi_i2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	ec43 2b11 	vmov	d1, r2, r3
 80017ea:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001848 <decodeRMC+0x258>
 80017ee:	f002 fed9 	bl	80045a4 <pow>
 80017f2:	ec53 2b10 	vmov	r2, r3, d0
 80017f6:	4640      	mov	r0, r8
 80017f8:	4649      	mov	r1, r9
 80017fa:	f7fe fff3 	bl	80007e4 <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe fd0d 	bl	8000224 <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f96d 	bl	8000af0 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	e003      	b.n	800182a <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <decodeRMC+0x260>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <decodeRMC+0x260>)
 8001832:	6013      	str	r3, [r2, #0]
	i=0;
 8001834:	2300      	movs	r3, #0
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	220c      	movs	r2, #12
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fe1b 	bl	800447c <memset>
	while (RMCbuffer[inx] != ',')
 8001846:	e019      	b.n	800187c <decodeRMC+0x28c>
 8001848:	00000000 	.word	0x00000000
 800184c:	40240000 	.word	0x40240000
 8001850:	20000090 	.word	0x20000090
	{
		buffer[i] = RMCbuffer[inx];
 8001854:	4b7e      	ldr	r3, [pc, #504]	; (8001a50 <decodeRMC+0x460>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	7819      	ldrb	r1, [r3, #0]
 8001860:	f107 0208 	add.w	r2, r7, #8
 8001864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001866:	4413      	add	r3, r2
 8001868:	460a      	mov	r2, r1
 800186a:	701a      	strb	r2, [r3, #0]
		i++;
 800186c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186e:	3301      	adds	r3, #1
 8001870:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001872:	4b77      	ldr	r3, [pc, #476]	; (8001a50 <decodeRMC+0x460>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a75      	ldr	r2, [pc, #468]	; (8001a50 <decodeRMC+0x460>)
 800187a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800187c:	4b74      	ldr	r3, [pc, #464]	; (8001a50 <decodeRMC+0x460>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b2c      	cmp	r3, #44	; 0x2c
 800188a:	d1e3      	bne.n	8001854 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d056      	beq.n	8001944 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fdc0 	bl	8004420 <atoi>
 80018a0:	4603      	mov	r3, r0
 80018a2:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80018a8:	e002      	b.n	80018b0 <decodeRMC+0x2c0>
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	3301      	adds	r3, #1
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
 80018b0:	f107 0208 	add.w	r2, r7, #8
 80018b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b2e      	cmp	r3, #46	; 0x2e
 80018bc:	d1f5      	bne.n	80018aa <decodeRMC+0x2ba>
		j++;
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	3301      	adds	r3, #1
 80018c2:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fc9d 	bl	8000208 <strlen>
 80018ce:	4602      	mov	r2, r0
 80018d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 80018d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d8:	f107 0208 	add.w	r2, r7, #8
 80018dc:	4413      	add	r3, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fd9e 	bl	8004420 <atoi>
 80018e4:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 80018e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fde6 	bl	80004bc <__aeabi_i2d>
 80018f0:	4604      	mov	r4, r0
 80018f2:	460d      	mov	r5, r1
 80018f4:	69b8      	ldr	r0, [r7, #24]
 80018f6:	f7fe fde1 	bl	80004bc <__aeabi_i2d>
 80018fa:	4680      	mov	r8, r0
 80018fc:	4689      	mov	r9, r1
 80018fe:	69f8      	ldr	r0, [r7, #28]
 8001900:	f7fe fddc 	bl	80004bc <__aeabi_i2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	ec43 2b11 	vmov	d1, r2, r3
 800190c:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001a48 <decodeRMC+0x458>
 8001910:	f002 fe48 	bl	80045a4 <pow>
 8001914:	ec53 2b10 	vmov	r2, r3, d0
 8001918:	4640      	mov	r0, r8
 800191a:	4649      	mov	r1, r9
 800191c:	f7fe ff62 	bl	80007e4 <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7fe fc7c 	bl	8000224 <__adddf3>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f8dc 	bl	8000af0 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	e003      	b.n	800194c <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <decodeRMC+0x460>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a3f      	ldr	r2, [pc, #252]	; (8001a50 <decodeRMC+0x460>)
 8001954:	6013      	str	r3, [r2, #0]
	i=0;
 8001956:	2300      	movs	r3, #0
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	220c      	movs	r2, #12
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fd8a 	bl	800447c <memset>
	while (RMCbuffer[inx] != ',')
 8001968:	e013      	b.n	8001992 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 800196a:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <decodeRMC+0x460>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	7819      	ldrb	r1, [r3, #0]
 8001976:	f107 0208 	add.w	r2, r7, #8
 800197a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800197c:	4413      	add	r3, r2
 800197e:	460a      	mov	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
		i++;
 8001982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001984:	3301      	adds	r3, #1
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001988:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <decodeRMC+0x460>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a30      	ldr	r2, [pc, #192]	; (8001a50 <decodeRMC+0x460>)
 8001990:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <decodeRMC+0x460>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b2c      	cmp	r3, #44	; 0x2c
 80019a0:	d1e3      	bne.n	800196a <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fd3a 	bl	8004420 <atoi>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <decodeRMC+0x464>)
 80019b0:	fb82 1203 	smull	r1, r2, r2, r3
 80019b4:	1312      	asrs	r2, r2, #12
 80019b6:	17db      	asrs	r3, r3, #31
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <decodeRMC+0x468>)
 80019bc:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fd2c 	bl	8004420 <atoi>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <decodeRMC+0x46c>)
 80019cc:	fb82 1203 	smull	r1, r2, r2, r3
 80019d0:	1152      	asrs	r2, r2, #5
 80019d2:	17db      	asrs	r3, r3, #31
 80019d4:	1ad2      	subs	r2, r2, r3
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <decodeRMC+0x46c>)
 80019d8:	fb83 1302 	smull	r1, r3, r3, r2
 80019dc:	1159      	asrs	r1, r3, #5
 80019de:	17d3      	asrs	r3, r2, #31
 80019e0:	1acb      	subs	r3, r1, r3
 80019e2:	2164      	movs	r1, #100	; 0x64
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <decodeRMC+0x470>)
 80019ec:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fd14 	bl	8004420 <atoi>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <decodeRMC+0x46c>)
 80019fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001a00:	1159      	asrs	r1, r3, #5
 8001a02:	17d3      	asrs	r3, r2, #31
 8001a04:	1acb      	subs	r3, r1, r3
 8001a06:	2164      	movs	r1, #100	; 0x64
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <decodeRMC+0x474>)
 8001a10:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <decodeRMC+0x468>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <decodeRMC+0x478>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <decodeRMC+0x468>)
 8001a1e:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <decodeRMC+0x468>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <decodeRMC+0x470>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <decodeRMC+0x474>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	609a      	str	r2, [r3, #8]

	return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3740      	adds	r7, #64	; 0x40
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a44:	f3af 8000 	nop.w
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40240000 	.word	0x40240000
 8001a50:	20000090 	.word	0x20000090
 8001a54:	68db8bad 	.word	0x68db8bad
 8001a58:	2000009c 	.word	0x2000009c
 8001a5c:	51eb851f 	.word	0x51eb851f
 8001a60:	200000a0 	.word	0x200000a0
 8001a64:	200000a4 	.word	0x200000a4
 8001a68:	200000a8 	.word	0x200000a8

08001a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a70:	f000 fc0c 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a74:	f000 f838 	bl	8001ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a78:	f000 f8ce 	bl	8001c18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a7c:	f000 f8a2 	bl	8001bc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
Ringbuf_init();
 8001a80:	f000 f9c4 	bl	8001e0c <Ringbuf_init>
HAL_Delay(500);
 8001a84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a88:	f000 fc72 	bl	8002370 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(5);
 8001a8c:	2005      	movs	r0, #5
 8001a8e:	f000 fc6f 	bl	8002370 <HAL_Delay>
	  if(Wait_for("GGA")==1)
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <main+0x60>)
 8001a94:	f000 faea 	bl	800206c <Wait_for>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d107      	bne.n	8001aae <main+0x42>
	  {
		  Copy_upto("*", GGA);
 8001a9e:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <main+0x64>)
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <main+0x68>)
 8001aa2:	f000 fa63 	bl	8001f6c <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 8001aa6:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <main+0x6c>)
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <main+0x64>)
 8001aaa:	f7ff f9f5 	bl	8000e98 <decodeGGA>
	  }
	  if (Wait_for("RMC")==1)
 8001aae:	480b      	ldr	r0, [pc, #44]	; (8001adc <main+0x70>)
 8001ab0:	f000 fadc 	bl	800206c <Wait_for>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d1e8      	bne.n	8001a8c <main+0x20>
	  {
		  Copy_upto("*",RMC);
 8001aba:	4909      	ldr	r1, [pc, #36]	; (8001ae0 <main+0x74>)
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <main+0x68>)
 8001abe:	f000 fa55 	bl	8001f6c <Copy_upto>
		  decodeRMC(RMC, &gpsData.rmcstruct);
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <main+0x78>)
 8001ac4:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <main+0x74>)
 8001ac6:	f7ff fd93 	bl	80015f0 <decodeRMC>
	  HAL_Delay(5);
 8001aca:	e7df      	b.n	8001a8c <main+0x20>
 8001acc:	080053f8 	.word	0x080053f8
 8001ad0:	200000ac 	.word	0x200000ac
 8001ad4:	080053fc 	.word	0x080053fc
 8001ad8:	20000174 	.word	0x20000174
 8001adc:	08005400 	.word	0x08005400
 8001ae0:	20000110 	.word	0x20000110
 8001ae4:	200001a0 	.word	0x200001a0

08001ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b094      	sub	sp, #80	; 0x50
 8001aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	2234      	movs	r2, #52	; 0x34
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fcc0 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <SystemClock_Config+0xd4>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <SystemClock_Config+0xd4>)
 8001b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <SystemClock_Config+0xd4>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <SystemClock_Config+0xd8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <SystemClock_Config+0xd8>)
 8001b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <SystemClock_Config+0xd8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b52:	2302      	movs	r3, #2
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b66:	2304      	movs	r3, #4
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 faa0 	bl	80030bc <HAL_RCC_OscConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b82:	f000 f871 	bl	8001c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b86:	230f      	movs	r3, #15
 8001b88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 ff40 	bl	8002a28 <HAL_RCC_ClockConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001bae:	f000 f85b 	bl	8001c68 <Error_Handler>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3750      	adds	r7, #80	; 0x50
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <MX_USART1_UART_Init+0x50>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bfc:	f001 fcfc 	bl	80035f8 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c06:	f000 f82f 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200001b8 	.word	0x200001b8
 8001c14:	40011000 	.word	0x40011000

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <MX_GPIO_Init+0x4c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <MX_GPIO_Init+0x4c>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <MX_GPIO_Init+0x4c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_GPIO_Init+0x4c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <MX_GPIO_Init+0x4c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_GPIO_Init+0x4c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <Error_Handler+0x8>
	...

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cb2:	2007      	movs	r0, #7
 8001cb4:	f000 fc50 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_UART_MspInit+0x94>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d134      	bne.n	8001d50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_UART_MspInit+0x98>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <HAL_UART_MspInit+0x98>)
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_UART_MspInit+0x98>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_UART_MspInit+0x98>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_UART_MspInit+0x98>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_UART_MspInit+0x98>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d30:	2307      	movs	r3, #7
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <HAL_UART_MspInit+0x9c>)
 8001d3c:	f000 fce0 	bl	8002700 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	2025      	movs	r0, #37	; 0x25
 8001d46:	f000 fc12 	bl	800256e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d4a:	2025      	movs	r0, #37	; 0x25
 8001d4c:	f000 fc2b 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(timeout >0) timeout--;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <SysTick_Handler+0x20>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <SysTick_Handler+0x18>
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Handler+0x20>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <SysTick_Handler+0x20>)
 8001dc2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 fab4 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200001fc 	.word	0x200001fc

08001dd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <USART1_IRQHandler+0x14>)
 8001dd6:	f000 f9d1 	bl	800217c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dda:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART1_IRQHandler+0x14>)
 8001ddc:	f001 fc5a 	bl	8003694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200001b8 	.word	0x200001b8

08001de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <SystemInit+0x20>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <SystemInit+0x20>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <Ringbuf_init+0x3c>)
 8001e12:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <Ringbuf_init+0x40>)
 8001e14:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <Ringbuf_init+0x44>)
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <Ringbuf_init+0x48>)
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <Ringbuf_init+0x4c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <Ringbuf_init+0x4c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <Ringbuf_init+0x4c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <Ringbuf_init+0x4c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	60da      	str	r2, [r3, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000610 	.word	0x20000610
 8001e4c:	20000200 	.word	0x20000200
 8001e50:	20000614 	.word	0x20000614
 8001e54:	20000408 	.word	0x20000408
 8001e58:	200001b8 	.word	0x200001b8

08001e5c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e74:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d009      	beq.n	8001e96 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	79f9      	ldrb	r1, [r7, #7]
 8001e8c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <Uart_read+0x54>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <Uart_read+0x54>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d102      	bne.n	8001ec4 <Uart_read+0x20>
  {
    return -1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e013      	b.n	8001eec <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <Uart_read+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <Uart_read+0x54>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <Uart_read+0x54>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <Uart_read+0x54>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001eea:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	20000610 	.word	0x20000610

08001efc <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <IsDataAvailable+0x30>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <IsDataAvailable+0x30>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	20000610 	.word	0x20000610

08001f30 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <Uart_peek+0x38>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <Uart_peek+0x38>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d102      	bne.n	8001f4e <Uart_peek+0x1e>
  {
    return -1;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	e006      	b.n	8001f5c <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <Uart_peek+0x38>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <Uart_peek+0x38>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000610 	.word	0x20000610

08001f6c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe f944 	bl	8000208 <strlen>
 8001f80:	4603      	mov	r3, r0
 8001f82:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001f88:	e01e      	b.n	8001fc8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001f8a:	4b36      	ldr	r3, [pc, #216]	; (8002064 <Copy_upto+0xf8>)
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	4b35      	ldr	r3, [pc, #212]	; (8002064 <Copy_upto+0xf8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	4403      	add	r3, r0
 8001f9c:	5c8a      	ldrb	r2, [r1, r2]
 8001f9e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <Copy_upto+0xf8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <Copy_upto+0xf8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001fbc:	bf00      	nop
 8001fbe:	f7ff ff9d 	bl	8001efc <IsDataAvailable>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0fa      	beq.n	8001fbe <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001fc8:	f7ff ffb2 	bl	8001f30 <Uart_peek>
 8001fcc:	4601      	mov	r1, r0
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4299      	cmp	r1, r3
 8001fd8:	d1d7      	bne.n	8001f8a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001fda:	e027      	b.n	800202c <Copy_upto+0xc0>
	{
		so_far++;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001fe2:	f7ff ff5f 	bl	8001ea4 <Uart_read>
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	613a      	str	r2, [r7, #16]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2ca      	uxtb	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d101      	bne.n	8002004 <Copy_upto+0x98>
 8002000:	2301      	movs	r3, #1
 8002002:	e02a      	b.n	800205a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <Copy_upto+0xfc>)
 8002006:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800200a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800200c:	bf00      	nop
 800200e:	f7ff ff75 	bl	8001efc <IsDataAvailable>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <Copy_upto+0xb4>
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <Copy_upto+0xfc>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f6      	bne.n	800200e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <Copy_upto+0xfc>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <Copy_upto+0xc0>
 8002028:	2300      	movs	r3, #0
 800202a:	e016      	b.n	800205a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 800202c:	f7ff ff80 	bl	8001f30 <Uart_peek>
 8002030:	4601      	mov	r1, r0
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4299      	cmp	r1, r3
 800203c:	d0ce      	beq.n	8001fdc <Copy_upto+0x70>
	}

	if (so_far != len)
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	429a      	cmp	r2, r3
 8002044:	d002      	beq.n	800204c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
		goto again;
 800204a:	e79d      	b.n	8001f88 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d101      	bne.n	8002058 <Copy_upto+0xec>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <Copy_upto+0xee>
	else return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000610 	.word	0x20000610
 8002068:	200001fc 	.word	0x200001fc

0800206c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe f8c5 	bl	8000208 <strlen>
 800207e:	4603      	mov	r3, r0
 8002080:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002082:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <Wait_for+0x108>)
 8002084:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002088:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800208a:	bf00      	nop
 800208c:	f7ff ff36 	bl	8001efc <IsDataAvailable>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <Wait_for+0x32>
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <Wait_for+0x108>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f6      	bne.n	800208c <Wait_for+0x20>
	if (timeout == 0) return 0;
 800209e:	4b35      	ldr	r3, [pc, #212]	; (8002174 <Wait_for+0x108>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d119      	bne.n	80020da <Wait_for+0x6e>
 80020a6:	2300      	movs	r3, #0
 80020a8:	e060      	b.n	800216c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <Wait_for+0x10c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <Wait_for+0x10c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d00b      	beq.n	80020d6 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <Wait_for+0x10c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <Wait_for+0x10c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020d4:	e001      	b.n	80020da <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e048      	b.n	800216c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80020da:	f7ff ff29 	bl	8001f30 <Uart_peek>
 80020de:	4601      	mov	r1, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4299      	cmp	r1, r3
 80020ea:	d1de      	bne.n	80020aa <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80020ec:	e027      	b.n	800213e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3301      	adds	r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <Wait_for+0x10c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <Wait_for+0x10c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002106:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	429a      	cmp	r2, r3
 8002110:	d101      	bne.n	8002116 <Wait_for+0xaa>
 8002112:	2301      	movs	r3, #1
 8002114:	e02a      	b.n	800216c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <Wait_for+0x108>)
 8002118:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800211c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800211e:	bf00      	nop
 8002120:	f7ff feec 	bl	8001efc <IsDataAvailable>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <Wait_for+0xc6>
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <Wait_for+0x108>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f6      	bne.n	8002120 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <Wait_for+0x108>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <Wait_for+0xd2>
 800213a:	2300      	movs	r3, #0
 800213c:	e016      	b.n	800216c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800213e:	f7ff fef7 	bl	8001f30 <Uart_peek>
 8002142:	4601      	mov	r1, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4299      	cmp	r1, r3
 800214e:	d0ce      	beq.n	80020ee <Wait_for+0x82>
	}

	if (so_far != len)
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	d002      	beq.n	800215e <Wait_for+0xf2>
	{
		so_far = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
		goto again;
 800215c:	e791      	b.n	8002082 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	d101      	bne.n	800216a <Wait_for+0xfe>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <Wait_for+0x100>
	else return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200001fc 	.word	0x200001fc
 8002178:	20000610 	.word	0x20000610

0800217c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d013      	beq.n	80021c6 <Uart_isr+0x4a>
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00e      	beq.n	80021c6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <Uart_isr+0xb4>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fe4c 	bl	8001e5c <store_char>
        return;
 80021c4:	e031      	b.n	800222a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02c      	beq.n	800222a <Uart_isr+0xae>
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d027      	beq.n	800222a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <Uart_isr+0xb8>)
 80021dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <Uart_isr+0xb8>)
 80021e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d108      	bne.n	80021fc <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80021fa:	e015      	b.n	8002228 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <Uart_isr+0xb8>)
 80021fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <Uart_isr+0xb8>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <Uart_isr+0xb8>)
 800220a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800220e:	3301      	adds	r3, #1
 8002210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <Uart_isr+0xb8>)
 8002216:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	7bba      	ldrb	r2, [r7, #14]
 8002226:	605a      	str	r2, [r3, #4]
    	return;
 8002228:	bf00      	nop
    }
}
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000610 	.word	0x20000610
 8002234:	20000408 	.word	0x20000408

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002270 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002254:	4c0b      	ldr	r4, [pc, #44]	; (8002284 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002262:	f7ff fdc1 	bl	8001de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002266:	f002 f8e5 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226a:	f7ff fbff 	bl	8001a6c <main>
  bx  lr    
 800226e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800227c:	08005560 	.word	0x08005560
  ldr r2, =_sbss
 8002280:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002284:	2000061c 	.word	0x2000061c

08002288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC_IRQHandler>
	...

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_Init+0x40>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_Init+0x40>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x40>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 f94f 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff fcd8 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f967 	bl	80025c2 <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 f92f 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000004 	.word	0x20000004
 8002328:	2000000c 	.word	0x2000000c
 800232c:	20000008 	.word	0x20000008

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000000c 	.word	0x2000000c
 8002354:	20000618 	.word	0x20000618

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000618 	.word	0x20000618

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000000c 	.word	0x2000000c

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff29 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff3e 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff31 	bl	800241c <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa2 	bl	8002514 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff feb6 	bl	8002358 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d008      	beq.n	800260c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e052      	b.n	80026b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0216 	bic.w	r2, r2, #22
 800261a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800262a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <HAL_DMA_Abort+0x62>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0208 	bic.w	r2, r2, #8
 800264a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265c:	e013      	b.n	8002686 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265e:	f7ff fe7b 	bl	8002358 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b05      	cmp	r3, #5
 800266a:	d90c      	bls.n	8002686 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2203      	movs	r2, #3
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e015      	b.n	80026b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e4      	bne.n	800265e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	223f      	movs	r2, #63	; 0x3f
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d004      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e00c      	b.n	80026f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2205      	movs	r2, #5
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e165      	b.n	80029e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 8154 	bne.w	80029e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	2b02      	cmp	r3, #2
 8002750:	d130      	bne.n	80027b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 0201 	and.w	r2, r3, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d017      	beq.n	80027f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d123      	bne.n	8002844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80ae 	beq.w	80029e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <HAL_GPIO_Init+0x300>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <HAL_GPIO_Init+0x300>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <HAL_GPIO_Init+0x300>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a2:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_GPIO_Init+0x304>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <HAL_GPIO_Init+0x308>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d025      	beq.n	800291a <HAL_GPIO_Init+0x21a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4e      	ldr	r2, [pc, #312]	; (8002a0c <HAL_GPIO_Init+0x30c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01f      	beq.n	8002916 <HAL_GPIO_Init+0x216>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <HAL_GPIO_Init+0x310>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d019      	beq.n	8002912 <HAL_GPIO_Init+0x212>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <HAL_GPIO_Init+0x314>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d013      	beq.n	800290e <HAL_GPIO_Init+0x20e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <HAL_GPIO_Init+0x318>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00d      	beq.n	800290a <HAL_GPIO_Init+0x20a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4a      	ldr	r2, [pc, #296]	; (8002a1c <HAL_GPIO_Init+0x31c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <HAL_GPIO_Init+0x206>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a49      	ldr	r2, [pc, #292]	; (8002a20 <HAL_GPIO_Init+0x320>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_GPIO_Init+0x202>
 80028fe:	2306      	movs	r3, #6
 8002900:	e00c      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002902:	2307      	movs	r3, #7
 8002904:	e00a      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002906:	2305      	movs	r3, #5
 8002908:	e008      	b.n	800291c <HAL_GPIO_Init+0x21c>
 800290a:	2304      	movs	r3, #4
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x21c>
 800290e:	2303      	movs	r3, #3
 8002910:	e004      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002912:	2302      	movs	r3, #2
 8002914:	e002      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_GPIO_Init+0x21c>
 800291a:	2300      	movs	r3, #0
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f002 0203 	and.w	r2, r2, #3
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	4093      	lsls	r3, r2
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292c:	4935      	ldr	r1, [pc, #212]	; (8002a04 <HAL_GPIO_Init+0x304>)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_GPIO_Init+0x324>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295e:	4a31      	ldr	r2, [pc, #196]	; (8002a24 <HAL_GPIO_Init+0x324>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_GPIO_Init+0x324>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002988:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_GPIO_Init+0x324>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800298e:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_GPIO_Init+0x324>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_GPIO_Init+0x324>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_GPIO_Init+0x324>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029dc:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_GPIO_Init+0x324>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3301      	adds	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	f67f ae96 	bls.w	800271c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40021400 	.word	0x40021400
 8002a20:	40021800 	.word	0x40021800
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d90c      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d044      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e067      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7ff fc1e 	bl	8002358 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7ff fc1a 	bl	8002358 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d20c      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f855 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fb7e 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08005404 	.word	0x08005404
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08005414 	.word	0x08005414

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffdc 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0b5b      	lsrs	r3, r3, #13
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08005414 	.word	0x08005414

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c60:	b0ae      	sub	sp, #184	; 0xb8
 8002c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c82:	4bcb      	ldr	r3, [pc, #812]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	f200 8206 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x440>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ccd 	.word	0x08002ccd
 8002c9c:	0800309d 	.word	0x0800309d
 8002ca0:	0800309d 	.word	0x0800309d
 8002ca4:	0800309d 	.word	0x0800309d
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	0800309d 	.word	0x0800309d
 8002cb0:	0800309d 	.word	0x0800309d
 8002cb4:	0800309d 	.word	0x0800309d
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	0800309d 	.word	0x0800309d
 8002cc0:	0800309d 	.word	0x0800309d
 8002cc4:	0800309d 	.word	0x0800309d
 8002cc8:	08002ecd 	.word	0x08002ecd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4bb9      	ldr	r3, [pc, #740]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cd2:	e1e7      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd4:	4bb8      	ldr	r3, [pc, #736]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cda:	e1e3      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cdc:	4bb4      	ldr	r3, [pc, #720]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce8:	4bb1      	ldr	r3, [pc, #708]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d071      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf4:	4bae      	ldr	r3, [pc, #696]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2c:	0150      	lsls	r0, r2, #5
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4621      	mov	r1, r4
 8002d34:	1a51      	subs	r1, r2, r1
 8002d36:	6439      	str	r1, [r7, #64]	; 0x40
 8002d38:	4629      	mov	r1, r5
 8002d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	018b      	lsls	r3, r1, #6
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d56:	4641      	mov	r1, r8
 8002d58:	018a      	lsls	r2, r1, #6
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	1a51      	subs	r1, r2, r1
 8002d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d60:	4649      	mov	r1, r9
 8002d62:	eb63 0301 	sbc.w	r3, r3, r1
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d74:	4649      	mov	r1, r9
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4641      	mov	r1, r8
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4641      	mov	r1, r8
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4622      	mov	r2, r4
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d8e:	462b      	mov	r3, r5
 8002d90:	460a      	mov	r2, r1
 8002d92:	eb42 0303 	adc.w	r3, r2, r3
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002da4:	4629      	mov	r1, r5
 8002da6:	024b      	lsls	r3, r1, #9
 8002da8:	4621      	mov	r1, r4
 8002daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dae:	4621      	mov	r1, r4
 8002db0:	024a      	lsls	r2, r1, #9
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002dc8:	f7fd fee2 	bl	8000b90 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dd6:	e067      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd8:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002df2:	2300      	movs	r3, #0
 8002df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002df6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4621      	mov	r1, r4
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e18:	4629      	mov	r1, r5
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4641      	mov	r1, r8
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4641      	mov	r1, r8
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e5a:	4692      	mov	sl, r2
 8002e5c:	469b      	mov	fp, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	eb1a 0303 	adds.w	r3, sl, r3
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	462b      	mov	r3, r5
 8002e68:	eb4b 0303 	adc.w	r3, fp, r3
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	028b      	lsls	r3, r1, #10
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e84:	4621      	mov	r1, r4
 8002e86:	028a      	lsls	r2, r1, #10
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e90:	2200      	movs	r2, #0
 8002e92:	673b      	str	r3, [r7, #112]	; 0x70
 8002e94:	677a      	str	r2, [r7, #116]	; 0x74
 8002e96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e9a:	f7fd fe79 	bl	8000b90 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eca:	e0eb      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d06b      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	2200      	movs	r2, #0
 8002eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef8:	2300      	movs	r3, #0
 8002efa:	667b      	str	r3, [r7, #100]	; 0x64
 8002efc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f00:	4622      	mov	r2, r4
 8002f02:	462b      	mov	r3, r5
 8002f04:	f04f 0000 	mov.w	r0, #0
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	0159      	lsls	r1, r3, #5
 8002f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f12:	0150      	lsls	r0, r2, #5
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4621      	mov	r1, r4
 8002f1a:	1a51      	subs	r1, r2, r1
 8002f1c:	61b9      	str	r1, [r7, #24]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	eb63 0301 	sbc.w	r3, r3, r1
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f32:	4659      	mov	r1, fp
 8002f34:	018b      	lsls	r3, r1, #6
 8002f36:	4651      	mov	r1, sl
 8002f38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3c:	4651      	mov	r1, sl
 8002f3e:	018a      	lsls	r2, r1, #6
 8002f40:	4651      	mov	r1, sl
 8002f42:	ebb2 0801 	subs.w	r8, r2, r1
 8002f46:	4659      	mov	r1, fp
 8002f48:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f60:	4690      	mov	r8, r2
 8002f62:	4699      	mov	r9, r3
 8002f64:	4623      	mov	r3, r4
 8002f66:	eb18 0303 	adds.w	r3, r8, r3
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	eb49 0303 	adc.w	r3, r9, r3
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f80:	4629      	mov	r1, r5
 8002f82:	024b      	lsls	r3, r1, #9
 8002f84:	4621      	mov	r1, r4
 8002f86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	024a      	lsls	r2, r1, #9
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f96:	2200      	movs	r2, #0
 8002f98:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fa0:	f7fd fdf6 	bl	8000b90 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fae:	e065      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x420>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbc:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8002fce:	2300      	movs	r3, #0
 8002fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002fd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	464b      	mov	r3, r9
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4641      	mov	r1, r8
 8002ff0:	1a51      	subs	r1, r2, r1
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003008:	4659      	mov	r1, fp
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003012:	4651      	mov	r1, sl
 8003014:	018a      	lsls	r2, r1, #6
 8003016:	4651      	mov	r1, sl
 8003018:	1a54      	subs	r4, r2, r1
 800301a:	4659      	mov	r1, fp
 800301c:	eb63 0501 	sbc.w	r5, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	00eb      	lsls	r3, r5, #3
 800302a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800302e:	00e2      	lsls	r2, r4, #3
 8003030:	4614      	mov	r4, r2
 8003032:	461d      	mov	r5, r3
 8003034:	4643      	mov	r3, r8
 8003036:	18e3      	adds	r3, r4, r3
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	464b      	mov	r3, r9
 800303c:	eb45 0303 	adc.w	r3, r5, r3
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800304e:	4629      	mov	r1, r5
 8003050:	028b      	lsls	r3, r1, #10
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003058:	4621      	mov	r1, r4
 800305a:	028a      	lsls	r2, r1, #10
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003064:	2200      	movs	r2, #0
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
 8003068:	64fa      	str	r2, [r7, #76]	; 0x4c
 800306a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800306e:	f7fd fd8f 	bl	8000b90 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4613      	mov	r3, r2
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0f1b      	lsrs	r3, r3, #28
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800308a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800308e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800309a:	e003      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800309e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	37b8      	adds	r7, #184	; 0xb8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400

080030bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e28d      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8083 	beq.w	80031e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030dc:	4b94      	ldr	r3, [pc, #592]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d019      	beq.n	800311c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e8:	4b91      	ldr	r3, [pc, #580]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030f4:	4b8e      	ldr	r3, [pc, #568]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003100:	d00c      	beq.n	800311c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b8b      	ldr	r3, [pc, #556]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d112      	bne.n	8003134 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310e:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311a:	d10b      	bne.n	8003134 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	4b84      	ldr	r3, [pc, #528]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05b      	beq.n	80031e0 <HAL_RCC_OscConfig+0x124>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d157      	bne.n	80031e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e25a      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x90>
 800313e:	4b7c      	ldr	r3, [pc, #496]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7b      	ldr	r2, [pc, #492]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xcc>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0xb4>
 8003156:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a75      	ldr	r2, [pc, #468]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b73      	ldr	r3, [pc, #460]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a72      	ldr	r2, [pc, #456]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xcc>
 8003170:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6b      	ldr	r2, [pc, #428]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7ff f8e2 	bl	8002358 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7ff f8de 	bl	8002358 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e21f      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b61      	ldr	r3, [pc, #388]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xdc>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7ff f8ce 	bl	8002358 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff f8ca 	bl	8002358 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e20b      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b57      	ldr	r3, [pc, #348]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x104>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06f      	beq.n	80032ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ee:	4b50      	ldr	r3, [pc, #320]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031fa:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d105      	bne.n	8003212 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003206:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003212:	4b47      	ldr	r3, [pc, #284]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b44      	ldr	r3, [pc, #272]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x186>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1d3      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e03a      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b34      	ldr	r3, [pc, #208]	; (8003334 <HAL_RCC_OscConfig+0x278>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7ff f877 	bl	8002358 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326e:	f7ff f873 	bl	8002358 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1b4      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4925      	ldr	r1, [pc, #148]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
 80032a0:	e015      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x278>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7ff f856 	bl	8002358 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b0:	f7ff f852 	bl	8002358 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e193      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d036      	beq.n	8003348 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_RCC_OscConfig+0x27c>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7ff f836 	bl	8002358 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f0:	f7ff f832 	bl	8002358 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e173      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x234>
 800330e:	e01b      	b.n	8003348 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7ff f81f 	bl	8002358 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	e00e      	b.n	800333c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331e:	f7ff f81b 	bl	8002358 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d907      	bls.n	800333c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e15c      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
 8003330:	40023800 	.word	0x40023800
 8003334:	42470000 	.word	0x42470000
 8003338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800333e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ea      	bne.n	800331e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8097 	beq.w	8003484 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b83      	ldr	r3, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	4b7f      	ldr	r3, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a7e      	ldr	r2, [pc, #504]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b7c      	ldr	r3, [pc, #496]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003382:	2301      	movs	r3, #1
 8003384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003386:	4b79      	ldr	r3, [pc, #484]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d118      	bne.n	80033c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339e:	f7fe ffdb 	bl	8002358 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a6:	f7fe ffd7 	bl	8002358 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e118      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	4b6c      	ldr	r3, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d106      	bne.n	80033da <HAL_RCC_OscConfig+0x31e>
 80033cc:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a65      	ldr	r2, [pc, #404]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e01c      	b.n	8003414 <HAL_RCC_OscConfig+0x358>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x340>
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a60      	ldr	r2, [pc, #384]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b5e      	ldr	r3, [pc, #376]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0x358>
 80033fc:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a59      	ldr	r2, [pc, #356]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	4b57      	ldr	r3, [pc, #348]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a56      	ldr	r2, [pc, #344]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe ff9c 	bl	8002358 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fe ff98 	bl	8002358 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0d7      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ee      	beq.n	8003424 <HAL_RCC_OscConfig+0x368>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe ff86 	bl	8002358 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe ff82 	bl	8002358 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e0c1      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ee      	bne.n	8003450 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80ad 	beq.w	80035e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d060      	beq.n	800355c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d145      	bne.n	800352e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_RCC_OscConfig+0x4b4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe ff56 	bl	8002358 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe ff52 	bl	8002358 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e093      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	3b01      	subs	r3, #1
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	071b      	lsls	r3, r3, #28
 80034fa:	491b      	ldr	r1, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x4b4>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe ff27 	bl	8002358 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe ff23 	bl	8002358 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e064      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x452>
 800352c:	e05c      	b.n	80035e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <HAL_RCC_OscConfig+0x4b4>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe ff10 	bl	8002358 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe ff0c 	bl	8002358 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04d      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x480>
 800355a:	e045      	b.n	80035e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e040      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
 8003568:	40023800 	.word	0x40023800
 800356c:	40007000 	.word	0x40007000
 8003570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <HAL_RCC_OscConfig+0x538>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d030      	beq.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d129      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d122      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035a4:	4013      	ands	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d119      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	3b01      	subs	r3, #1
 80035be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d10f      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e03f      	b.n	800368a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fb50 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fc7b 	bl	8003f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b0ba      	sub	sp, #232	; 0xe8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_UART_IRQHandler+0x66>
 80036e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fb65 	bl	8003dc2 <UART_Receive_IT>
      return;
 80036f8:	e256      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80de 	beq.w	80038c0 <HAL_UART_IRQHandler+0x22c>
 8003704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80d1 	beq.w	80038c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_UART_IRQHandler+0xae>
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xd2>
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xf6>
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0204 	orr.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d011      	beq.n	80037ba <HAL_UART_IRQHandler+0x126>
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0208 	orr.w	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 81ed 	beq.w	8003b9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_UART_IRQHandler+0x14e>
 80037d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 faf0 	bl	8003dc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_UART_IRQHandler+0x17a>
 8003806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d04f      	beq.n	80038ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9f8 	bl	8003c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d141      	bne.n	80038a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3314      	adds	r3, #20
 8003828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800383c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800384e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800385a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1d9      	bne.n	8003822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	2b00      	cmp	r3, #0
 8003874:	d013      	beq.n	800389e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	4a7d      	ldr	r2, [pc, #500]	; (8003a70 <HAL_UART_IRQHandler+0x3dc>)
 800387c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe ff19 	bl	80026ba <HAL_DMA_Abort_IT>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d016      	beq.n	80038bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003898:	4610      	mov	r0, r2
 800389a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e00e      	b.n	80038bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f99a 	bl	8003bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e00a      	b.n	80038bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f996 	bl	8003bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	e006      	b.n	80038bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f992 	bl	8003bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038ba:	e170      	b.n	8003b9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	bf00      	nop
    return;
 80038be:	e16e      	b.n	8003b9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 814a 	bne.w	8003b5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8143 	beq.w	8003b5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 813c 	beq.w	8003b5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	f040 80b4 	bne.w	8003a74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8140 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800392a:	429a      	cmp	r2, r3
 800392c:	f080 8139 	bcs.w	8003ba2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003942:	f000 8088 	beq.w	8003a56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800395c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800397e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800398a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1d9      	bne.n	8003946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e1      	bne.n	8003992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e3      	bne.n	80039ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a26:	f023 0310 	bic.w	r3, r3, #16
 8003a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a38:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e3      	bne.n	8003a14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fdc2 	bl	80025da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8c0 	bl	8003bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a6c:	e099      	b.n	8003ba2 <HAL_UART_IRQHandler+0x50e>
 8003a6e:	bf00      	nop
 8003a70:	08003ccb 	.word	0x08003ccb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 808b 	beq.w	8003ba6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8086 	beq.w	8003ba6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003abe:	647a      	str	r2, [r7, #68]	; 0x44
 8003ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e3      	bne.n	8003a9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003af6:	633a      	str	r2, [r7, #48]	; 0x30
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e3      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0310 	bic.w	r3, r3, #16
 8003b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b3c:	61fa      	str	r2, [r7, #28]
 8003b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	69b9      	ldr	r1, [r7, #24]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	617b      	str	r3, [r7, #20]
   return(result);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e3      	bne.n	8003b18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f848 	bl	8003bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b5c:	e023      	b.n	8003ba6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_UART_IRQHandler+0x4ea>
 8003b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8bb 	bl	8003cf2 <UART_Transmit_IT>
    return;
 8003b7c:	e014      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x514>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8fb 	bl	8003d92 <UART_EndTransmit_IT>
    return;
 8003b9c:	e004      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
    return;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ba6:	bf00      	nop
  }
}
 8003ba8:	37e8      	adds	r7, #232	; 0xe8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop

08003bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b095      	sub	sp, #84	; 0x54
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c2c:	643a      	str	r2, [r7, #64]	; 0x40
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e5      	bne.n	8003c40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d119      	bne.n	8003cb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f023 0310 	bic.w	r3, r3, #16
 8003c92:	647b      	str	r3, [r7, #68]	; 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c9c:	61ba      	str	r2, [r7, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6979      	ldr	r1, [r7, #20]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cbe:	bf00      	nop
 8003cc0:	3754      	adds	r7, #84	; 0x54
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff ff77 	bl	8003bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b21      	cmp	r3, #33	; 0x21
 8003d04:	d13e      	bne.n	8003d84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0e:	d114      	bne.n	8003d3a <UART_Transmit_IT+0x48>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d110      	bne.n	8003d3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]
 8003d38:	e008      	b.n	8003d4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	1c59      	adds	r1, r3, #1
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6211      	str	r1, [r2, #32]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10f      	bne.n	8003d80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff fefc 	bl	8003bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b08c      	sub	sp, #48	; 0x30
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b22      	cmp	r3, #34	; 0x22
 8003dd4:	f040 80ab 	bne.w	8003f2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de0:	d117      	bne.n	8003e12 <UART_Receive_IT+0x50>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d113      	bne.n	8003e12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e10:	e026      	b.n	8003e60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e24:	d007      	beq.n	8003e36 <UART_Receive_IT+0x74>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <UART_Receive_IT+0x82>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e008      	b.n	8003e56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d15a      	bne.n	8003f2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0220 	bic.w	r2, r2, #32
 8003e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d135      	bne.n	8003f20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f023 0310 	bic.w	r3, r3, #16
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	623a      	str	r2, [r7, #32]
 8003edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	69f9      	ldr	r1, [r7, #28]
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d10a      	bne.n	8003f12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff fe67 	bl	8003bec <HAL_UARTEx_RxEventCallback>
 8003f1e:	e002      	b.n	8003f26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff fe4f 	bl	8003bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e002      	b.n	8003f30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
  }
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3730      	adds	r7, #48	; 0x30
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f3c:	b0c0      	sub	sp, #256	; 0x100
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	68d9      	ldr	r1, [r3, #12]
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	ea40 0301 	orr.w	r3, r0, r1
 8003f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f90:	f021 010c 	bic.w	r1, r1, #12
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	6999      	ldr	r1, [r3, #24]
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	ea40 0301 	orr.w	r3, r0, r1
 8003fbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b8f      	ldr	r3, [pc, #572]	; (8004204 <UART_SetConfig+0x2cc>)
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d005      	beq.n	8003fd8 <UART_SetConfig+0xa0>
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <UART_SetConfig+0x2d0>)
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d104      	bne.n	8003fe2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fd8:	f7fe fe2c 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003fdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fe0:	e003      	b.n	8003fea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fe2:	f7fe fe13 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8003fe6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff4:	f040 810c 	bne.w	8004210 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004002:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004006:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800400a:	4622      	mov	r2, r4
 800400c:	462b      	mov	r3, r5
 800400e:	1891      	adds	r1, r2, r2
 8004010:	65b9      	str	r1, [r7, #88]	; 0x58
 8004012:	415b      	adcs	r3, r3
 8004014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004016:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800401a:	4621      	mov	r1, r4
 800401c:	eb12 0801 	adds.w	r8, r2, r1
 8004020:	4629      	mov	r1, r5
 8004022:	eb43 0901 	adc.w	r9, r3, r1
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800403a:	4690      	mov	r8, r2
 800403c:	4699      	mov	r9, r3
 800403e:	4623      	mov	r3, r4
 8004040:	eb18 0303 	adds.w	r3, r8, r3
 8004044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004048:	462b      	mov	r3, r5
 800404a:	eb49 0303 	adc.w	r3, r9, r3
 800404e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800405e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004062:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004066:	460b      	mov	r3, r1
 8004068:	18db      	adds	r3, r3, r3
 800406a:	653b      	str	r3, [r7, #80]	; 0x50
 800406c:	4613      	mov	r3, r2
 800406e:	eb42 0303 	adc.w	r3, r2, r3
 8004072:	657b      	str	r3, [r7, #84]	; 0x54
 8004074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800407c:	f7fc fd88 	bl	8000b90 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4b61      	ldr	r3, [pc, #388]	; (800420c <UART_SetConfig+0x2d4>)
 8004086:	fba3 2302 	umull	r2, r3, r3, r2
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	011c      	lsls	r4, r3, #4
 800408e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004092:	2200      	movs	r2, #0
 8004094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004098:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800409c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040a0:	4642      	mov	r2, r8
 80040a2:	464b      	mov	r3, r9
 80040a4:	1891      	adds	r1, r2, r2
 80040a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80040a8:	415b      	adcs	r3, r3
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040b0:	4641      	mov	r1, r8
 80040b2:	eb12 0a01 	adds.w	sl, r2, r1
 80040b6:	4649      	mov	r1, r9
 80040b8:	eb43 0b01 	adc.w	fp, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d0:	4692      	mov	sl, r2
 80040d2:	469b      	mov	fp, r3
 80040d4:	4643      	mov	r3, r8
 80040d6:	eb1a 0303 	adds.w	r3, sl, r3
 80040da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040de:	464b      	mov	r3, r9
 80040e0:	eb4b 0303 	adc.w	r3, fp, r3
 80040e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040fc:	460b      	mov	r3, r1
 80040fe:	18db      	adds	r3, r3, r3
 8004100:	643b      	str	r3, [r7, #64]	; 0x40
 8004102:	4613      	mov	r3, r2
 8004104:	eb42 0303 	adc.w	r3, r2, r3
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
 800410a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800410e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004112:	f7fc fd3d 	bl	8000b90 <__aeabi_uldivmod>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4611      	mov	r1, r2
 800411c:	4b3b      	ldr	r3, [pc, #236]	; (800420c <UART_SetConfig+0x2d4>)
 800411e:	fba3 2301 	umull	r2, r3, r3, r1
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	2264      	movs	r2, #100	; 0x64
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	1acb      	subs	r3, r1, r3
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004132:	4b36      	ldr	r3, [pc, #216]	; (800420c <UART_SetConfig+0x2d4>)
 8004134:	fba3 2302 	umull	r2, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004140:	441c      	add	r4, r3
 8004142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800414c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004150:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	1891      	adds	r1, r2, r2
 800415a:	63b9      	str	r1, [r7, #56]	; 0x38
 800415c:	415b      	adcs	r3, r3
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004164:	4641      	mov	r1, r8
 8004166:	1851      	adds	r1, r2, r1
 8004168:	6339      	str	r1, [r7, #48]	; 0x30
 800416a:	4649      	mov	r1, r9
 800416c:	414b      	adcs	r3, r1
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800417c:	4659      	mov	r1, fp
 800417e:	00cb      	lsls	r3, r1, #3
 8004180:	4651      	mov	r1, sl
 8004182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004186:	4651      	mov	r1, sl
 8004188:	00ca      	lsls	r2, r1, #3
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	4603      	mov	r3, r0
 8004190:	4642      	mov	r2, r8
 8004192:	189b      	adds	r3, r3, r2
 8004194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004198:	464b      	mov	r3, r9
 800419a:	460a      	mov	r2, r1
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041b8:	460b      	mov	r3, r1
 80041ba:	18db      	adds	r3, r3, r3
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041be:	4613      	mov	r3, r2
 80041c0:	eb42 0303 	adc.w	r3, r2, r3
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041ce:	f7fc fcdf 	bl	8000b90 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <UART_SetConfig+0x2d4>)
 80041d8:	fba3 1302 	umull	r1, r3, r3, r2
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	2164      	movs	r1, #100	; 0x64
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	3332      	adds	r3, #50	; 0x32
 80041ea:	4a08      	ldr	r2, [pc, #32]	; (800420c <UART_SetConfig+0x2d4>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	f003 0207 	and.w	r2, r3, #7
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4422      	add	r2, r4
 80041fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004200:	e105      	b.n	800440e <UART_SetConfig+0x4d6>
 8004202:	bf00      	nop
 8004204:	40011000 	.word	0x40011000
 8004208:	40011400 	.word	0x40011400
 800420c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004214:	2200      	movs	r2, #0
 8004216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800421a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800421e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004222:	4642      	mov	r2, r8
 8004224:	464b      	mov	r3, r9
 8004226:	1891      	adds	r1, r2, r2
 8004228:	6239      	str	r1, [r7, #32]
 800422a:	415b      	adcs	r3, r3
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004232:	4641      	mov	r1, r8
 8004234:	1854      	adds	r4, r2, r1
 8004236:	4649      	mov	r1, r9
 8004238:	eb43 0501 	adc.w	r5, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	00eb      	lsls	r3, r5, #3
 8004246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424a:	00e2      	lsls	r2, r4, #3
 800424c:	4614      	mov	r4, r2
 800424e:	461d      	mov	r5, r3
 8004250:	4643      	mov	r3, r8
 8004252:	18e3      	adds	r3, r4, r3
 8004254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004258:	464b      	mov	r3, r9
 800425a:	eb45 0303 	adc.w	r3, r5, r3
 800425e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800426e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800427e:	4629      	mov	r1, r5
 8004280:	008b      	lsls	r3, r1, #2
 8004282:	4621      	mov	r1, r4
 8004284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004288:	4621      	mov	r1, r4
 800428a:	008a      	lsls	r2, r1, #2
 800428c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004290:	f7fc fc7e 	bl	8000b90 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4b60      	ldr	r3, [pc, #384]	; (800441c <UART_SetConfig+0x4e4>)
 800429a:	fba3 2302 	umull	r2, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	011c      	lsls	r4, r3, #4
 80042a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	1891      	adds	r1, r2, r2
 80042ba:	61b9      	str	r1, [r7, #24]
 80042bc:	415b      	adcs	r3, r3
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c4:	4641      	mov	r1, r8
 80042c6:	1851      	adds	r1, r2, r1
 80042c8:	6139      	str	r1, [r7, #16]
 80042ca:	4649      	mov	r1, r9
 80042cc:	414b      	adcs	r3, r1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042dc:	4659      	mov	r1, fp
 80042de:	00cb      	lsls	r3, r1, #3
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e6:	4651      	mov	r1, sl
 80042e8:	00ca      	lsls	r2, r1, #3
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	4642      	mov	r2, r8
 80042f2:	189b      	adds	r3, r3, r2
 80042f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042f8:	464b      	mov	r3, r9
 80042fa:	460a      	mov	r2, r1
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	67bb      	str	r3, [r7, #120]	; 0x78
 800430e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800431c:	4649      	mov	r1, r9
 800431e:	008b      	lsls	r3, r1, #2
 8004320:	4641      	mov	r1, r8
 8004322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004326:	4641      	mov	r1, r8
 8004328:	008a      	lsls	r2, r1, #2
 800432a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800432e:	f7fc fc2f 	bl	8000b90 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4b39      	ldr	r3, [pc, #228]	; (800441c <UART_SetConfig+0x4e4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a34      	ldr	r2, [pc, #208]	; (800441c <UART_SetConfig+0x4e4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004356:	441c      	add	r4, r3
 8004358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435c:	2200      	movs	r2, #0
 800435e:	673b      	str	r3, [r7, #112]	; 0x70
 8004360:	677a      	str	r2, [r7, #116]	; 0x74
 8004362:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004366:	4642      	mov	r2, r8
 8004368:	464b      	mov	r3, r9
 800436a:	1891      	adds	r1, r2, r2
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	415b      	adcs	r3, r3
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004376:	4641      	mov	r1, r8
 8004378:	1851      	adds	r1, r2, r1
 800437a:	6039      	str	r1, [r7, #0]
 800437c:	4649      	mov	r1, r9
 800437e:	414b      	adcs	r3, r1
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800438e:	4659      	mov	r1, fp
 8004390:	00cb      	lsls	r3, r1, #3
 8004392:	4651      	mov	r1, sl
 8004394:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004398:	4651      	mov	r1, sl
 800439a:	00ca      	lsls	r2, r1, #3
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	4603      	mov	r3, r0
 80043a2:	4642      	mov	r2, r8
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a8:	464b      	mov	r3, r9
 80043aa:	460a      	mov	r2, r1
 80043ac:	eb42 0303 	adc.w	r3, r2, r3
 80043b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	663b      	str	r3, [r7, #96]	; 0x60
 80043bc:	667a      	str	r2, [r7, #100]	; 0x64
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043ca:	4649      	mov	r1, r9
 80043cc:	008b      	lsls	r3, r1, #2
 80043ce:	4641      	mov	r1, r8
 80043d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d4:	4641      	mov	r1, r8
 80043d6:	008a      	lsls	r2, r1, #2
 80043d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043dc:	f7fc fbd8 	bl	8000b90 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <UART_SetConfig+0x4e4>)
 80043e6:	fba3 1302 	umull	r1, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2164      	movs	r1, #100	; 0x64
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	3332      	adds	r3, #50	; 0x32
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <UART_SetConfig+0x4e4>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4422      	add	r2, r4
 800440c:	609a      	str	r2, [r3, #8]
}
 800440e:	bf00      	nop
 8004410:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004414:	46bd      	mov	sp, r7
 8004416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441a:	bf00      	nop
 800441c:	51eb851f 	.word	0x51eb851f

08004420 <atoi>:
 8004420:	220a      	movs	r2, #10
 8004422:	2100      	movs	r1, #0
 8004424:	f000 b8b4 	b.w	8004590 <strtol>

08004428 <__errno>:
 8004428:	4b01      	ldr	r3, [pc, #4]	; (8004430 <__errno+0x8>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000010 	.word	0x20000010

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	4d0d      	ldr	r5, [pc, #52]	; (800446c <__libc_init_array+0x38>)
 8004438:	4c0d      	ldr	r4, [pc, #52]	; (8004470 <__libc_init_array+0x3c>)
 800443a:	1b64      	subs	r4, r4, r5
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	2600      	movs	r6, #0
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	4d0b      	ldr	r5, [pc, #44]	; (8004474 <__libc_init_array+0x40>)
 8004446:	4c0c      	ldr	r4, [pc, #48]	; (8004478 <__libc_init_array+0x44>)
 8004448:	f000 ffc8 	bl	80053dc <_init>
 800444c:	1b64      	subs	r4, r4, r5
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	2600      	movs	r6, #0
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	f855 3b04 	ldr.w	r3, [r5], #4
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	f855 3b04 	ldr.w	r3, [r5], #4
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	08005558 	.word	0x08005558
 8004470:	08005558 	.word	0x08005558
 8004474:	08005558 	.word	0x08005558
 8004478:	0800555c 	.word	0x0800555c

0800447c <memset>:
 800447c:	4402      	add	r2, r0
 800447e:	4603      	mov	r3, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <_strtol_l.constprop.0>:
 800448c:	2b01      	cmp	r3, #1
 800448e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004492:	d001      	beq.n	8004498 <_strtol_l.constprop.0+0xc>
 8004494:	2b24      	cmp	r3, #36	; 0x24
 8004496:	d906      	bls.n	80044a6 <_strtol_l.constprop.0+0x1a>
 8004498:	f7ff ffc6 	bl	8004428 <__errno>
 800449c:	2316      	movs	r3, #22
 800449e:	6003      	str	r3, [r0, #0]
 80044a0:	2000      	movs	r0, #0
 80044a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800458c <_strtol_l.constprop.0+0x100>
 80044aa:	460d      	mov	r5, r1
 80044ac:	462e      	mov	r6, r5
 80044ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80044b6:	f017 0708 	ands.w	r7, r7, #8
 80044ba:	d1f7      	bne.n	80044ac <_strtol_l.constprop.0+0x20>
 80044bc:	2c2d      	cmp	r4, #45	; 0x2d
 80044be:	d132      	bne.n	8004526 <_strtol_l.constprop.0+0x9a>
 80044c0:	782c      	ldrb	r4, [r5, #0]
 80044c2:	2701      	movs	r7, #1
 80044c4:	1cb5      	adds	r5, r6, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d05b      	beq.n	8004582 <_strtol_l.constprop.0+0xf6>
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d109      	bne.n	80044e2 <_strtol_l.constprop.0+0x56>
 80044ce:	2c30      	cmp	r4, #48	; 0x30
 80044d0:	d107      	bne.n	80044e2 <_strtol_l.constprop.0+0x56>
 80044d2:	782c      	ldrb	r4, [r5, #0]
 80044d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80044d8:	2c58      	cmp	r4, #88	; 0x58
 80044da:	d14d      	bne.n	8004578 <_strtol_l.constprop.0+0xec>
 80044dc:	786c      	ldrb	r4, [r5, #1]
 80044de:	2310      	movs	r3, #16
 80044e0:	3502      	adds	r5, #2
 80044e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80044e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80044ea:	f04f 0c00 	mov.w	ip, #0
 80044ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80044f2:	4666      	mov	r6, ip
 80044f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80044f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80044fc:	f1be 0f09 	cmp.w	lr, #9
 8004500:	d816      	bhi.n	8004530 <_strtol_l.constprop.0+0xa4>
 8004502:	4674      	mov	r4, lr
 8004504:	42a3      	cmp	r3, r4
 8004506:	dd24      	ble.n	8004552 <_strtol_l.constprop.0+0xc6>
 8004508:	f1bc 0f00 	cmp.w	ip, #0
 800450c:	db1e      	blt.n	800454c <_strtol_l.constprop.0+0xc0>
 800450e:	45b1      	cmp	r9, r6
 8004510:	d31c      	bcc.n	800454c <_strtol_l.constprop.0+0xc0>
 8004512:	d101      	bne.n	8004518 <_strtol_l.constprop.0+0x8c>
 8004514:	45a2      	cmp	sl, r4
 8004516:	db19      	blt.n	800454c <_strtol_l.constprop.0+0xc0>
 8004518:	fb06 4603 	mla	r6, r6, r3, r4
 800451c:	f04f 0c01 	mov.w	ip, #1
 8004520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004524:	e7e8      	b.n	80044f8 <_strtol_l.constprop.0+0x6c>
 8004526:	2c2b      	cmp	r4, #43	; 0x2b
 8004528:	bf04      	itt	eq
 800452a:	782c      	ldrbeq	r4, [r5, #0]
 800452c:	1cb5      	addeq	r5, r6, #2
 800452e:	e7ca      	b.n	80044c6 <_strtol_l.constprop.0+0x3a>
 8004530:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004534:	f1be 0f19 	cmp.w	lr, #25
 8004538:	d801      	bhi.n	800453e <_strtol_l.constprop.0+0xb2>
 800453a:	3c37      	subs	r4, #55	; 0x37
 800453c:	e7e2      	b.n	8004504 <_strtol_l.constprop.0+0x78>
 800453e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004542:	f1be 0f19 	cmp.w	lr, #25
 8004546:	d804      	bhi.n	8004552 <_strtol_l.constprop.0+0xc6>
 8004548:	3c57      	subs	r4, #87	; 0x57
 800454a:	e7db      	b.n	8004504 <_strtol_l.constprop.0+0x78>
 800454c:	f04f 3cff 	mov.w	ip, #4294967295
 8004550:	e7e6      	b.n	8004520 <_strtol_l.constprop.0+0x94>
 8004552:	f1bc 0f00 	cmp.w	ip, #0
 8004556:	da05      	bge.n	8004564 <_strtol_l.constprop.0+0xd8>
 8004558:	2322      	movs	r3, #34	; 0x22
 800455a:	6003      	str	r3, [r0, #0]
 800455c:	4646      	mov	r6, r8
 800455e:	b942      	cbnz	r2, 8004572 <_strtol_l.constprop.0+0xe6>
 8004560:	4630      	mov	r0, r6
 8004562:	e79e      	b.n	80044a2 <_strtol_l.constprop.0+0x16>
 8004564:	b107      	cbz	r7, 8004568 <_strtol_l.constprop.0+0xdc>
 8004566:	4276      	negs	r6, r6
 8004568:	2a00      	cmp	r2, #0
 800456a:	d0f9      	beq.n	8004560 <_strtol_l.constprop.0+0xd4>
 800456c:	f1bc 0f00 	cmp.w	ip, #0
 8004570:	d000      	beq.n	8004574 <_strtol_l.constprop.0+0xe8>
 8004572:	1e69      	subs	r1, r5, #1
 8004574:	6011      	str	r1, [r2, #0]
 8004576:	e7f3      	b.n	8004560 <_strtol_l.constprop.0+0xd4>
 8004578:	2430      	movs	r4, #48	; 0x30
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1b1      	bne.n	80044e2 <_strtol_l.constprop.0+0x56>
 800457e:	2308      	movs	r3, #8
 8004580:	e7af      	b.n	80044e2 <_strtol_l.constprop.0+0x56>
 8004582:	2c30      	cmp	r4, #48	; 0x30
 8004584:	d0a5      	beq.n	80044d2 <_strtol_l.constprop.0+0x46>
 8004586:	230a      	movs	r3, #10
 8004588:	e7ab      	b.n	80044e2 <_strtol_l.constprop.0+0x56>
 800458a:	bf00      	nop
 800458c:	0800541d 	.word	0x0800541d

08004590 <strtol>:
 8004590:	4613      	mov	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	4601      	mov	r1, r0
 8004596:	4802      	ldr	r0, [pc, #8]	; (80045a0 <strtol+0x10>)
 8004598:	6800      	ldr	r0, [r0, #0]
 800459a:	f7ff bf77 	b.w	800448c <_strtol_l.constprop.0>
 800459e:	bf00      	nop
 80045a0:	20000010 	.word	0x20000010

080045a4 <pow>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	ed2d 8b02 	vpush	{d8}
 80045aa:	eeb0 8a40 	vmov.f32	s16, s0
 80045ae:	eef0 8a60 	vmov.f32	s17, s1
 80045b2:	ec55 4b11 	vmov	r4, r5, d1
 80045b6:	f000 f867 	bl	8004688 <__ieee754_pow>
 80045ba:	4622      	mov	r2, r4
 80045bc:	462b      	mov	r3, r5
 80045be:	4620      	mov	r0, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	ec57 6b10 	vmov	r6, r7, d0
 80045c6:	f7fc fa7d 	bl	8000ac4 <__aeabi_dcmpun>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d13b      	bne.n	8004646 <pow+0xa2>
 80045ce:	ec51 0b18 	vmov	r0, r1, d8
 80045d2:	2200      	movs	r2, #0
 80045d4:	2300      	movs	r3, #0
 80045d6:	f7fc fa43 	bl	8000a60 <__aeabi_dcmpeq>
 80045da:	b1b8      	cbz	r0, 800460c <pow+0x68>
 80045dc:	2200      	movs	r2, #0
 80045de:	2300      	movs	r3, #0
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fc fa3c 	bl	8000a60 <__aeabi_dcmpeq>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d146      	bne.n	800467a <pow+0xd6>
 80045ec:	ec45 4b10 	vmov	d0, r4, r5
 80045f0:	f000 fe63 	bl	80052ba <finite>
 80045f4:	b338      	cbz	r0, 8004646 <pow+0xa2>
 80045f6:	2200      	movs	r2, #0
 80045f8:	2300      	movs	r3, #0
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fc fa39 	bl	8000a74 <__aeabi_dcmplt>
 8004602:	b300      	cbz	r0, 8004646 <pow+0xa2>
 8004604:	f7ff ff10 	bl	8004428 <__errno>
 8004608:	2322      	movs	r3, #34	; 0x22
 800460a:	e01b      	b.n	8004644 <pow+0xa0>
 800460c:	ec47 6b10 	vmov	d0, r6, r7
 8004610:	f000 fe53 	bl	80052ba <finite>
 8004614:	b9e0      	cbnz	r0, 8004650 <pow+0xac>
 8004616:	eeb0 0a48 	vmov.f32	s0, s16
 800461a:	eef0 0a68 	vmov.f32	s1, s17
 800461e:	f000 fe4c 	bl	80052ba <finite>
 8004622:	b1a8      	cbz	r0, 8004650 <pow+0xac>
 8004624:	ec45 4b10 	vmov	d0, r4, r5
 8004628:	f000 fe47 	bl	80052ba <finite>
 800462c:	b180      	cbz	r0, 8004650 <pow+0xac>
 800462e:	4632      	mov	r2, r6
 8004630:	463b      	mov	r3, r7
 8004632:	4630      	mov	r0, r6
 8004634:	4639      	mov	r1, r7
 8004636:	f7fc fa45 	bl	8000ac4 <__aeabi_dcmpun>
 800463a:	2800      	cmp	r0, #0
 800463c:	d0e2      	beq.n	8004604 <pow+0x60>
 800463e:	f7ff fef3 	bl	8004428 <__errno>
 8004642:	2321      	movs	r3, #33	; 0x21
 8004644:	6003      	str	r3, [r0, #0]
 8004646:	ecbd 8b02 	vpop	{d8}
 800464a:	ec47 6b10 	vmov	d0, r6, r7
 800464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004650:	2200      	movs	r2, #0
 8004652:	2300      	movs	r3, #0
 8004654:	4630      	mov	r0, r6
 8004656:	4639      	mov	r1, r7
 8004658:	f7fc fa02 	bl	8000a60 <__aeabi_dcmpeq>
 800465c:	2800      	cmp	r0, #0
 800465e:	d0f2      	beq.n	8004646 <pow+0xa2>
 8004660:	eeb0 0a48 	vmov.f32	s0, s16
 8004664:	eef0 0a68 	vmov.f32	s1, s17
 8004668:	f000 fe27 	bl	80052ba <finite>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0ea      	beq.n	8004646 <pow+0xa2>
 8004670:	ec45 4b10 	vmov	d0, r4, r5
 8004674:	f000 fe21 	bl	80052ba <finite>
 8004678:	e7c3      	b.n	8004602 <pow+0x5e>
 800467a:	4f01      	ldr	r7, [pc, #4]	; (8004680 <pow+0xdc>)
 800467c:	2600      	movs	r6, #0
 800467e:	e7e2      	b.n	8004646 <pow+0xa2>
 8004680:	3ff00000 	.word	0x3ff00000
 8004684:	00000000 	.word	0x00000000

08004688 <__ieee754_pow>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	ed2d 8b06 	vpush	{d8-d10}
 8004690:	b089      	sub	sp, #36	; 0x24
 8004692:	ed8d 1b00 	vstr	d1, [sp]
 8004696:	e9dd 2900 	ldrd	r2, r9, [sp]
 800469a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800469e:	ea58 0102 	orrs.w	r1, r8, r2
 80046a2:	ec57 6b10 	vmov	r6, r7, d0
 80046a6:	d115      	bne.n	80046d4 <__ieee754_pow+0x4c>
 80046a8:	19b3      	adds	r3, r6, r6
 80046aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80046ae:	4152      	adcs	r2, r2
 80046b0:	4299      	cmp	r1, r3
 80046b2:	4b89      	ldr	r3, [pc, #548]	; (80048d8 <__ieee754_pow+0x250>)
 80046b4:	4193      	sbcs	r3, r2
 80046b6:	f080 84d2 	bcs.w	800505e <__ieee754_pow+0x9d6>
 80046ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046be:	4630      	mov	r0, r6
 80046c0:	4639      	mov	r1, r7
 80046c2:	f7fb fdaf 	bl	8000224 <__adddf3>
 80046c6:	ec41 0b10 	vmov	d0, r0, r1
 80046ca:	b009      	add	sp, #36	; 0x24
 80046cc:	ecbd 8b06 	vpop	{d8-d10}
 80046d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d4:	4b81      	ldr	r3, [pc, #516]	; (80048dc <__ieee754_pow+0x254>)
 80046d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80046da:	429c      	cmp	r4, r3
 80046dc:	ee10 aa10 	vmov	sl, s0
 80046e0:	463d      	mov	r5, r7
 80046e2:	dc06      	bgt.n	80046f2 <__ieee754_pow+0x6a>
 80046e4:	d101      	bne.n	80046ea <__ieee754_pow+0x62>
 80046e6:	2e00      	cmp	r6, #0
 80046e8:	d1e7      	bne.n	80046ba <__ieee754_pow+0x32>
 80046ea:	4598      	cmp	r8, r3
 80046ec:	dc01      	bgt.n	80046f2 <__ieee754_pow+0x6a>
 80046ee:	d10f      	bne.n	8004710 <__ieee754_pow+0x88>
 80046f0:	b172      	cbz	r2, 8004710 <__ieee754_pow+0x88>
 80046f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80046f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80046fa:	ea55 050a 	orrs.w	r5, r5, sl
 80046fe:	d1dc      	bne.n	80046ba <__ieee754_pow+0x32>
 8004700:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004704:	18db      	adds	r3, r3, r3
 8004706:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800470a:	4152      	adcs	r2, r2
 800470c:	429d      	cmp	r5, r3
 800470e:	e7d0      	b.n	80046b2 <__ieee754_pow+0x2a>
 8004710:	2d00      	cmp	r5, #0
 8004712:	da3b      	bge.n	800478c <__ieee754_pow+0x104>
 8004714:	4b72      	ldr	r3, [pc, #456]	; (80048e0 <__ieee754_pow+0x258>)
 8004716:	4598      	cmp	r8, r3
 8004718:	dc51      	bgt.n	80047be <__ieee754_pow+0x136>
 800471a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800471e:	4598      	cmp	r8, r3
 8004720:	f340 84ac 	ble.w	800507c <__ieee754_pow+0x9f4>
 8004724:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004728:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800472c:	2b14      	cmp	r3, #20
 800472e:	dd0f      	ble.n	8004750 <__ieee754_pow+0xc8>
 8004730:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004734:	fa22 f103 	lsr.w	r1, r2, r3
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 849d 	bne.w	800507c <__ieee754_pow+0x9f4>
 8004742:	f001 0101 	and.w	r1, r1, #1
 8004746:	f1c1 0302 	rsb	r3, r1, #2
 800474a:	9304      	str	r3, [sp, #16]
 800474c:	b182      	cbz	r2, 8004770 <__ieee754_pow+0xe8>
 800474e:	e05f      	b.n	8004810 <__ieee754_pow+0x188>
 8004750:	2a00      	cmp	r2, #0
 8004752:	d15b      	bne.n	800480c <__ieee754_pow+0x184>
 8004754:	f1c3 0314 	rsb	r3, r3, #20
 8004758:	fa48 f103 	asr.w	r1, r8, r3
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	4543      	cmp	r3, r8
 8004762:	f040 8488 	bne.w	8005076 <__ieee754_pow+0x9ee>
 8004766:	f001 0101 	and.w	r1, r1, #1
 800476a:	f1c1 0302 	rsb	r3, r1, #2
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	4b5c      	ldr	r3, [pc, #368]	; (80048e4 <__ieee754_pow+0x25c>)
 8004772:	4598      	cmp	r8, r3
 8004774:	d132      	bne.n	80047dc <__ieee754_pow+0x154>
 8004776:	f1b9 0f00 	cmp.w	r9, #0
 800477a:	f280 8478 	bge.w	800506e <__ieee754_pow+0x9e6>
 800477e:	4959      	ldr	r1, [pc, #356]	; (80048e4 <__ieee754_pow+0x25c>)
 8004780:	4632      	mov	r2, r6
 8004782:	463b      	mov	r3, r7
 8004784:	2000      	movs	r0, #0
 8004786:	f7fc f82d 	bl	80007e4 <__aeabi_ddiv>
 800478a:	e79c      	b.n	80046c6 <__ieee754_pow+0x3e>
 800478c:	2300      	movs	r3, #0
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	2a00      	cmp	r2, #0
 8004792:	d13d      	bne.n	8004810 <__ieee754_pow+0x188>
 8004794:	4b51      	ldr	r3, [pc, #324]	; (80048dc <__ieee754_pow+0x254>)
 8004796:	4598      	cmp	r8, r3
 8004798:	d1ea      	bne.n	8004770 <__ieee754_pow+0xe8>
 800479a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800479e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80047a2:	ea53 030a 	orrs.w	r3, r3, sl
 80047a6:	f000 845a 	beq.w	800505e <__ieee754_pow+0x9d6>
 80047aa:	4b4f      	ldr	r3, [pc, #316]	; (80048e8 <__ieee754_pow+0x260>)
 80047ac:	429c      	cmp	r4, r3
 80047ae:	dd08      	ble.n	80047c2 <__ieee754_pow+0x13a>
 80047b0:	f1b9 0f00 	cmp.w	r9, #0
 80047b4:	f2c0 8457 	blt.w	8005066 <__ieee754_pow+0x9de>
 80047b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047bc:	e783      	b.n	80046c6 <__ieee754_pow+0x3e>
 80047be:	2302      	movs	r3, #2
 80047c0:	e7e5      	b.n	800478e <__ieee754_pow+0x106>
 80047c2:	f1b9 0f00 	cmp.w	r9, #0
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	f6bf af7a 	bge.w	80046c6 <__ieee754_pow+0x3e>
 80047d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80047d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80047da:	e774      	b.n	80046c6 <__ieee754_pow+0x3e>
 80047dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80047e0:	d106      	bne.n	80047f0 <__ieee754_pow+0x168>
 80047e2:	4632      	mov	r2, r6
 80047e4:	463b      	mov	r3, r7
 80047e6:	4630      	mov	r0, r6
 80047e8:	4639      	mov	r1, r7
 80047ea:	f7fb fed1 	bl	8000590 <__aeabi_dmul>
 80047ee:	e76a      	b.n	80046c6 <__ieee754_pow+0x3e>
 80047f0:	4b3e      	ldr	r3, [pc, #248]	; (80048ec <__ieee754_pow+0x264>)
 80047f2:	4599      	cmp	r9, r3
 80047f4:	d10c      	bne.n	8004810 <__ieee754_pow+0x188>
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	db0a      	blt.n	8004810 <__ieee754_pow+0x188>
 80047fa:	ec47 6b10 	vmov	d0, r6, r7
 80047fe:	b009      	add	sp, #36	; 0x24
 8004800:	ecbd 8b06 	vpop	{d8-d10}
 8004804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004808:	f000 bc6c 	b.w	80050e4 <__ieee754_sqrt>
 800480c:	2300      	movs	r3, #0
 800480e:	9304      	str	r3, [sp, #16]
 8004810:	ec47 6b10 	vmov	d0, r6, r7
 8004814:	f000 fd48 	bl	80052a8 <fabs>
 8004818:	ec51 0b10 	vmov	r0, r1, d0
 800481c:	f1ba 0f00 	cmp.w	sl, #0
 8004820:	d129      	bne.n	8004876 <__ieee754_pow+0x1ee>
 8004822:	b124      	cbz	r4, 800482e <__ieee754_pow+0x1a6>
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <__ieee754_pow+0x25c>)
 8004826:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800482a:	429a      	cmp	r2, r3
 800482c:	d123      	bne.n	8004876 <__ieee754_pow+0x1ee>
 800482e:	f1b9 0f00 	cmp.w	r9, #0
 8004832:	da05      	bge.n	8004840 <__ieee754_pow+0x1b8>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	2000      	movs	r0, #0
 800483a:	492a      	ldr	r1, [pc, #168]	; (80048e4 <__ieee754_pow+0x25c>)
 800483c:	f7fb ffd2 	bl	80007e4 <__aeabi_ddiv>
 8004840:	2d00      	cmp	r5, #0
 8004842:	f6bf af40 	bge.w	80046c6 <__ieee754_pow+0x3e>
 8004846:	9b04      	ldr	r3, [sp, #16]
 8004848:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800484c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004850:	4323      	orrs	r3, r4
 8004852:	d108      	bne.n	8004866 <__ieee754_pow+0x1de>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	f7fb fce0 	bl	8000220 <__aeabi_dsub>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	e78f      	b.n	8004786 <__ieee754_pow+0xfe>
 8004866:	9b04      	ldr	r3, [sp, #16]
 8004868:	2b01      	cmp	r3, #1
 800486a:	f47f af2c 	bne.w	80046c6 <__ieee754_pow+0x3e>
 800486e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004872:	4619      	mov	r1, r3
 8004874:	e727      	b.n	80046c6 <__ieee754_pow+0x3e>
 8004876:	0feb      	lsrs	r3, r5, #31
 8004878:	3b01      	subs	r3, #1
 800487a:	9306      	str	r3, [sp, #24]
 800487c:	9a06      	ldr	r2, [sp, #24]
 800487e:	9b04      	ldr	r3, [sp, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	d102      	bne.n	800488a <__ieee754_pow+0x202>
 8004884:	4632      	mov	r2, r6
 8004886:	463b      	mov	r3, r7
 8004888:	e7e6      	b.n	8004858 <__ieee754_pow+0x1d0>
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <__ieee754_pow+0x268>)
 800488c:	4598      	cmp	r8, r3
 800488e:	f340 80fb 	ble.w	8004a88 <__ieee754_pow+0x400>
 8004892:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004896:	4598      	cmp	r8, r3
 8004898:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <__ieee754_pow+0x260>)
 800489a:	dd0c      	ble.n	80048b6 <__ieee754_pow+0x22e>
 800489c:	429c      	cmp	r4, r3
 800489e:	dc0f      	bgt.n	80048c0 <__ieee754_pow+0x238>
 80048a0:	f1b9 0f00 	cmp.w	r9, #0
 80048a4:	da0f      	bge.n	80048c6 <__ieee754_pow+0x23e>
 80048a6:	2000      	movs	r0, #0
 80048a8:	b009      	add	sp, #36	; 0x24
 80048aa:	ecbd 8b06 	vpop	{d8-d10}
 80048ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b2:	f000 bcf0 	b.w	8005296 <__math_oflow>
 80048b6:	429c      	cmp	r4, r3
 80048b8:	dbf2      	blt.n	80048a0 <__ieee754_pow+0x218>
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <__ieee754_pow+0x25c>)
 80048bc:	429c      	cmp	r4, r3
 80048be:	dd19      	ble.n	80048f4 <__ieee754_pow+0x26c>
 80048c0:	f1b9 0f00 	cmp.w	r9, #0
 80048c4:	dcef      	bgt.n	80048a6 <__ieee754_pow+0x21e>
 80048c6:	2000      	movs	r0, #0
 80048c8:	b009      	add	sp, #36	; 0x24
 80048ca:	ecbd 8b06 	vpop	{d8-d10}
 80048ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d2:	f000 bcd7 	b.w	8005284 <__math_uflow>
 80048d6:	bf00      	nop
 80048d8:	fff00000 	.word	0xfff00000
 80048dc:	7ff00000 	.word	0x7ff00000
 80048e0:	433fffff 	.word	0x433fffff
 80048e4:	3ff00000 	.word	0x3ff00000
 80048e8:	3fefffff 	.word	0x3fefffff
 80048ec:	3fe00000 	.word	0x3fe00000
 80048f0:	41e00000 	.word	0x41e00000
 80048f4:	4b60      	ldr	r3, [pc, #384]	; (8004a78 <__ieee754_pow+0x3f0>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	f7fb fc92 	bl	8000220 <__aeabi_dsub>
 80048fc:	a354      	add	r3, pc, #336	; (adr r3, 8004a50 <__ieee754_pow+0x3c8>)
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	4604      	mov	r4, r0
 8004904:	460d      	mov	r5, r1
 8004906:	f7fb fe43 	bl	8000590 <__aeabi_dmul>
 800490a:	a353      	add	r3, pc, #332	; (adr r3, 8004a58 <__ieee754_pow+0x3d0>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	4606      	mov	r6, r0
 8004912:	460f      	mov	r7, r1
 8004914:	4620      	mov	r0, r4
 8004916:	4629      	mov	r1, r5
 8004918:	f7fb fe3a 	bl	8000590 <__aeabi_dmul>
 800491c:	4b57      	ldr	r3, [pc, #348]	; (8004a7c <__ieee754_pow+0x3f4>)
 800491e:	4682      	mov	sl, r0
 8004920:	468b      	mov	fp, r1
 8004922:	2200      	movs	r2, #0
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fe32 	bl	8000590 <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	a14b      	add	r1, pc, #300	; (adr r1, 8004a60 <__ieee754_pow+0x3d8>)
 8004932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004936:	f7fb fc73 	bl	8000220 <__aeabi_dsub>
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f7fb fe27 	bl	8000590 <__aeabi_dmul>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	2000      	movs	r0, #0
 8004948:	494d      	ldr	r1, [pc, #308]	; (8004a80 <__ieee754_pow+0x3f8>)
 800494a:	f7fb fc69 	bl	8000220 <__aeabi_dsub>
 800494e:	4622      	mov	r2, r4
 8004950:	4680      	mov	r8, r0
 8004952:	4689      	mov	r9, r1
 8004954:	462b      	mov	r3, r5
 8004956:	4620      	mov	r0, r4
 8004958:	4629      	mov	r1, r5
 800495a:	f7fb fe19 	bl	8000590 <__aeabi_dmul>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4640      	mov	r0, r8
 8004964:	4649      	mov	r1, r9
 8004966:	f7fb fe13 	bl	8000590 <__aeabi_dmul>
 800496a:	a33f      	add	r3, pc, #252	; (adr r3, 8004a68 <__ieee754_pow+0x3e0>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f7fb fe0e 	bl	8000590 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4650      	mov	r0, sl
 800497a:	4659      	mov	r1, fp
 800497c:	f7fb fc50 	bl	8000220 <__aeabi_dsub>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4680      	mov	r8, r0
 8004986:	4689      	mov	r9, r1
 8004988:	4630      	mov	r0, r6
 800498a:	4639      	mov	r1, r7
 800498c:	f7fb fc4a 	bl	8000224 <__adddf3>
 8004990:	2000      	movs	r0, #0
 8004992:	4632      	mov	r2, r6
 8004994:	463b      	mov	r3, r7
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
 800499a:	f7fb fc41 	bl	8000220 <__aeabi_dsub>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4640      	mov	r0, r8
 80049a4:	4649      	mov	r1, r9
 80049a6:	f7fb fc3b 	bl	8000220 <__aeabi_dsub>
 80049aa:	9b04      	ldr	r3, [sp, #16]
 80049ac:	9a06      	ldr	r2, [sp, #24]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	4682      	mov	sl, r0
 80049b4:	468b      	mov	fp, r1
 80049b6:	f040 81e7 	bne.w	8004d88 <__ieee754_pow+0x700>
 80049ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004a70 <__ieee754_pow+0x3e8>
 80049be:	eeb0 8a47 	vmov.f32	s16, s14
 80049c2:	eef0 8a67 	vmov.f32	s17, s15
 80049c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80049ca:	2600      	movs	r6, #0
 80049cc:	4632      	mov	r2, r6
 80049ce:	463b      	mov	r3, r7
 80049d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049d4:	f7fb fc24 	bl	8000220 <__aeabi_dsub>
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	f7fb fdd8 	bl	8000590 <__aeabi_dmul>
 80049e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049e4:	4680      	mov	r8, r0
 80049e6:	4689      	mov	r9, r1
 80049e8:	4650      	mov	r0, sl
 80049ea:	4659      	mov	r1, fp
 80049ec:	f7fb fdd0 	bl	8000590 <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4640      	mov	r0, r8
 80049f6:	4649      	mov	r1, r9
 80049f8:	f7fb fc14 	bl	8000224 <__adddf3>
 80049fc:	4632      	mov	r2, r6
 80049fe:	463b      	mov	r3, r7
 8004a00:	4680      	mov	r8, r0
 8004a02:	4689      	mov	r9, r1
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fdc2 	bl	8000590 <__aeabi_dmul>
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4604      	mov	r4, r0
 8004a10:	460d      	mov	r5, r1
 8004a12:	4602      	mov	r2, r0
 8004a14:	4649      	mov	r1, r9
 8004a16:	4640      	mov	r0, r8
 8004a18:	f7fb fc04 	bl	8000224 <__adddf3>
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <__ieee754_pow+0x3fc>)
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	ec45 4b19 	vmov	d9, r4, r5
 8004a24:	4606      	mov	r6, r0
 8004a26:	460f      	mov	r7, r1
 8004a28:	468b      	mov	fp, r1
 8004a2a:	f340 82f1 	ble.w	8005010 <__ieee754_pow+0x988>
 8004a2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004a32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004a36:	4303      	orrs	r3, r0
 8004a38:	f000 81e4 	beq.w	8004e04 <__ieee754_pow+0x77c>
 8004a3c:	ec51 0b18 	vmov	r0, r1, d8
 8004a40:	2200      	movs	r2, #0
 8004a42:	2300      	movs	r3, #0
 8004a44:	f7fc f816 	bl	8000a74 <__aeabi_dcmplt>
 8004a48:	3800      	subs	r0, #0
 8004a4a:	bf18      	it	ne
 8004a4c:	2001      	movne	r0, #1
 8004a4e:	e72b      	b.n	80048a8 <__ieee754_pow+0x220>
 8004a50:	60000000 	.word	0x60000000
 8004a54:	3ff71547 	.word	0x3ff71547
 8004a58:	f85ddf44 	.word	0xf85ddf44
 8004a5c:	3e54ae0b 	.word	0x3e54ae0b
 8004a60:	55555555 	.word	0x55555555
 8004a64:	3fd55555 	.word	0x3fd55555
 8004a68:	652b82fe 	.word	0x652b82fe
 8004a6c:	3ff71547 	.word	0x3ff71547
 8004a70:	00000000 	.word	0x00000000
 8004a74:	bff00000 	.word	0xbff00000
 8004a78:	3ff00000 	.word	0x3ff00000
 8004a7c:	3fd00000 	.word	0x3fd00000
 8004a80:	3fe00000 	.word	0x3fe00000
 8004a84:	408fffff 	.word	0x408fffff
 8004a88:	4bd5      	ldr	r3, [pc, #852]	; (8004de0 <__ieee754_pow+0x758>)
 8004a8a:	402b      	ands	r3, r5
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	b92b      	cbnz	r3, 8004a9c <__ieee754_pow+0x414>
 8004a90:	4bd4      	ldr	r3, [pc, #848]	; (8004de4 <__ieee754_pow+0x75c>)
 8004a92:	f7fb fd7d 	bl	8000590 <__aeabi_dmul>
 8004a96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	1523      	asrs	r3, r4, #20
 8004a9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004aa2:	4413      	add	r3, r2
 8004aa4:	9305      	str	r3, [sp, #20]
 8004aa6:	4bd0      	ldr	r3, [pc, #832]	; (8004de8 <__ieee754_pow+0x760>)
 8004aa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004aac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004ab6:	dd08      	ble.n	8004aca <__ieee754_pow+0x442>
 8004ab8:	4bcc      	ldr	r3, [pc, #816]	; (8004dec <__ieee754_pow+0x764>)
 8004aba:	429c      	cmp	r4, r3
 8004abc:	f340 8162 	ble.w	8004d84 <__ieee754_pow+0x6fc>
 8004ac0:	9b05      	ldr	r3, [sp, #20]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	9305      	str	r3, [sp, #20]
 8004ac6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004aca:	2400      	movs	r4, #0
 8004acc:	00e3      	lsls	r3, r4, #3
 8004ace:	9307      	str	r3, [sp, #28]
 8004ad0:	4bc7      	ldr	r3, [pc, #796]	; (8004df0 <__ieee754_pow+0x768>)
 8004ad2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ad6:	ed93 7b00 	vldr	d7, [r3]
 8004ada:	4629      	mov	r1, r5
 8004adc:	ec53 2b17 	vmov	r2, r3, d7
 8004ae0:	eeb0 9a47 	vmov.f32	s18, s14
 8004ae4:	eef0 9a67 	vmov.f32	s19, s15
 8004ae8:	4682      	mov	sl, r0
 8004aea:	f7fb fb99 	bl	8000220 <__aeabi_dsub>
 8004aee:	4652      	mov	r2, sl
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	462b      	mov	r3, r5
 8004af6:	ec51 0b19 	vmov	r0, r1, d9
 8004afa:	f7fb fb93 	bl	8000224 <__adddf3>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	2000      	movs	r0, #0
 8004b04:	49bb      	ldr	r1, [pc, #748]	; (8004df4 <__ieee754_pow+0x76c>)
 8004b06:	f7fb fe6d 	bl	80007e4 <__aeabi_ddiv>
 8004b0a:	ec41 0b1a 	vmov	d10, r0, r1
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4630      	mov	r0, r6
 8004b14:	4639      	mov	r1, r7
 8004b16:	f7fb fd3b 	bl	8000590 <__aeabi_dmul>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b26:	46ab      	mov	fp, r5
 8004b28:	106d      	asrs	r5, r5, #1
 8004b2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004b2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004b32:	ec41 0b18 	vmov	d8, r0, r1
 8004b36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	4649      	mov	r1, r9
 8004b40:	4614      	mov	r4, r2
 8004b42:	461d      	mov	r5, r3
 8004b44:	f7fb fd24 	bl	8000590 <__aeabi_dmul>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	4639      	mov	r1, r7
 8004b50:	f7fb fb66 	bl	8000220 <__aeabi_dsub>
 8004b54:	ec53 2b19 	vmov	r2, r3, d9
 8004b58:	4606      	mov	r6, r0
 8004b5a:	460f      	mov	r7, r1
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb fb5e 	bl	8000220 <__aeabi_dsub>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4650      	mov	r0, sl
 8004b6a:	4659      	mov	r1, fp
 8004b6c:	f7fb fb58 	bl	8000220 <__aeabi_dsub>
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	f7fb fd0c 	bl	8000590 <__aeabi_dmul>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	4639      	mov	r1, r7
 8004b80:	f7fb fb4e 	bl	8000220 <__aeabi_dsub>
 8004b84:	ec53 2b1a 	vmov	r2, r3, d10
 8004b88:	f7fb fd02 	bl	8000590 <__aeabi_dmul>
 8004b8c:	ec53 2b18 	vmov	r2, r3, d8
 8004b90:	ec41 0b19 	vmov	d9, r0, r1
 8004b94:	ec51 0b18 	vmov	r0, r1, d8
 8004b98:	f7fb fcfa 	bl	8000590 <__aeabi_dmul>
 8004b9c:	a37c      	add	r3, pc, #496	; (adr r3, 8004d90 <__ieee754_pow+0x708>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460d      	mov	r5, r1
 8004ba6:	f7fb fcf3 	bl	8000590 <__aeabi_dmul>
 8004baa:	a37b      	add	r3, pc, #492	; (adr r3, 8004d98 <__ieee754_pow+0x710>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fb38 	bl	8000224 <__adddf3>
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	f7fb fcea 	bl	8000590 <__aeabi_dmul>
 8004bbc:	a378      	add	r3, pc, #480	; (adr r3, 8004da0 <__ieee754_pow+0x718>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb fb2f 	bl	8000224 <__adddf3>
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	462b      	mov	r3, r5
 8004bca:	f7fb fce1 	bl	8000590 <__aeabi_dmul>
 8004bce:	a376      	add	r3, pc, #472	; (adr r3, 8004da8 <__ieee754_pow+0x720>)
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f7fb fb26 	bl	8000224 <__adddf3>
 8004bd8:	4622      	mov	r2, r4
 8004bda:	462b      	mov	r3, r5
 8004bdc:	f7fb fcd8 	bl	8000590 <__aeabi_dmul>
 8004be0:	a373      	add	r3, pc, #460	; (adr r3, 8004db0 <__ieee754_pow+0x728>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fb1d 	bl	8000224 <__adddf3>
 8004bea:	4622      	mov	r2, r4
 8004bec:	462b      	mov	r3, r5
 8004bee:	f7fb fccf 	bl	8000590 <__aeabi_dmul>
 8004bf2:	a371      	add	r3, pc, #452	; (adr r3, 8004db8 <__ieee754_pow+0x730>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fb14 	bl	8000224 <__adddf3>
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4606      	mov	r6, r0
 8004c00:	460f      	mov	r7, r1
 8004c02:	462b      	mov	r3, r5
 8004c04:	4620      	mov	r0, r4
 8004c06:	4629      	mov	r1, r5
 8004c08:	f7fb fcc2 	bl	8000590 <__aeabi_dmul>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4630      	mov	r0, r6
 8004c12:	4639      	mov	r1, r7
 8004c14:	f7fb fcbc 	bl	8000590 <__aeabi_dmul>
 8004c18:	4642      	mov	r2, r8
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	464b      	mov	r3, r9
 8004c20:	ec51 0b18 	vmov	r0, r1, d8
 8004c24:	f7fb fafe 	bl	8000224 <__adddf3>
 8004c28:	ec53 2b19 	vmov	r2, r3, d9
 8004c2c:	f7fb fcb0 	bl	8000590 <__aeabi_dmul>
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	f7fb faf6 	bl	8000224 <__adddf3>
 8004c38:	4642      	mov	r2, r8
 8004c3a:	4682      	mov	sl, r0
 8004c3c:	468b      	mov	fp, r1
 8004c3e:	464b      	mov	r3, r9
 8004c40:	4640      	mov	r0, r8
 8004c42:	4649      	mov	r1, r9
 8004c44:	f7fb fca4 	bl	8000590 <__aeabi_dmul>
 8004c48:	4b6b      	ldr	r3, [pc, #428]	; (8004df8 <__ieee754_pow+0x770>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	460f      	mov	r7, r1
 8004c50:	f7fb fae8 	bl	8000224 <__adddf3>
 8004c54:	4652      	mov	r2, sl
 8004c56:	465b      	mov	r3, fp
 8004c58:	f7fb fae4 	bl	8000224 <__adddf3>
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	460d      	mov	r5, r1
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4640      	mov	r0, r8
 8004c68:	4649      	mov	r1, r9
 8004c6a:	f7fb fc91 	bl	8000590 <__aeabi_dmul>
 8004c6e:	4b62      	ldr	r3, [pc, #392]	; (8004df8 <__ieee754_pow+0x770>)
 8004c70:	4680      	mov	r8, r0
 8004c72:	4689      	mov	r9, r1
 8004c74:	2200      	movs	r2, #0
 8004c76:	4620      	mov	r0, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	f7fb fad1 	bl	8000220 <__aeabi_dsub>
 8004c7e:	4632      	mov	r2, r6
 8004c80:	463b      	mov	r3, r7
 8004c82:	f7fb facd 	bl	8000220 <__aeabi_dsub>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	f7fb fac7 	bl	8000220 <__aeabi_dsub>
 8004c92:	ec53 2b18 	vmov	r2, r3, d8
 8004c96:	f7fb fc7b 	bl	8000590 <__aeabi_dmul>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	460f      	mov	r7, r1
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	ec51 0b19 	vmov	r0, r1, d9
 8004ca6:	f7fb fc73 	bl	8000590 <__aeabi_dmul>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4630      	mov	r0, r6
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	f7fb fab7 	bl	8000224 <__adddf3>
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	460f      	mov	r7, r1
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	f7fb faaf 	bl	8000224 <__adddf3>
 8004cc6:	a33e      	add	r3, pc, #248	; (adr r3, 8004dc0 <__ieee754_pow+0x738>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	f7fb fc5d 	bl	8000590 <__aeabi_dmul>
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	ec41 0b18 	vmov	d8, r0, r1
 8004cdc:	464b      	mov	r3, r9
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fa9d 	bl	8000220 <__aeabi_dsub>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4630      	mov	r0, r6
 8004cec:	4639      	mov	r1, r7
 8004cee:	f7fb fa97 	bl	8000220 <__aeabi_dsub>
 8004cf2:	a335      	add	r3, pc, #212	; (adr r3, 8004dc8 <__ieee754_pow+0x740>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fc4a 	bl	8000590 <__aeabi_dmul>
 8004cfc:	a334      	add	r3, pc, #208	; (adr r3, 8004dd0 <__ieee754_pow+0x748>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	4606      	mov	r6, r0
 8004d04:	460f      	mov	r7, r1
 8004d06:	4620      	mov	r0, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	f7fb fc41 	bl	8000590 <__aeabi_dmul>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb fa85 	bl	8000224 <__adddf3>
 8004d1a:	9a07      	ldr	r2, [sp, #28]
 8004d1c:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <__ieee754_pow+0x774>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fa7e 	bl	8000224 <__adddf3>
 8004d28:	4682      	mov	sl, r0
 8004d2a:	9805      	ldr	r0, [sp, #20]
 8004d2c:	468b      	mov	fp, r1
 8004d2e:	f7fb fbc5 	bl	80004bc <__aeabi_i2d>
 8004d32:	9a07      	ldr	r2, [sp, #28]
 8004d34:	4b32      	ldr	r3, [pc, #200]	; (8004e00 <__ieee754_pow+0x778>)
 8004d36:	4413      	add	r3, r2
 8004d38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	460f      	mov	r7, r1
 8004d40:	4652      	mov	r2, sl
 8004d42:	465b      	mov	r3, fp
 8004d44:	ec51 0b18 	vmov	r0, r1, d8
 8004d48:	f7fb fa6c 	bl	8000224 <__adddf3>
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	f7fb fa68 	bl	8000224 <__adddf3>
 8004d54:	4632      	mov	r2, r6
 8004d56:	463b      	mov	r3, r7
 8004d58:	f7fb fa64 	bl	8000224 <__adddf3>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	4632      	mov	r2, r6
 8004d60:	463b      	mov	r3, r7
 8004d62:	4604      	mov	r4, r0
 8004d64:	460d      	mov	r5, r1
 8004d66:	f7fb fa5b 	bl	8000220 <__aeabi_dsub>
 8004d6a:	4642      	mov	r2, r8
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	f7fb fa57 	bl	8000220 <__aeabi_dsub>
 8004d72:	ec53 2b18 	vmov	r2, r3, d8
 8004d76:	f7fb fa53 	bl	8000220 <__aeabi_dsub>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4650      	mov	r0, sl
 8004d80:	4659      	mov	r1, fp
 8004d82:	e610      	b.n	80049a6 <__ieee754_pow+0x31e>
 8004d84:	2401      	movs	r4, #1
 8004d86:	e6a1      	b.n	8004acc <__ieee754_pow+0x444>
 8004d88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004dd8 <__ieee754_pow+0x750>
 8004d8c:	e617      	b.n	80049be <__ieee754_pow+0x336>
 8004d8e:	bf00      	nop
 8004d90:	4a454eef 	.word	0x4a454eef
 8004d94:	3fca7e28 	.word	0x3fca7e28
 8004d98:	93c9db65 	.word	0x93c9db65
 8004d9c:	3fcd864a 	.word	0x3fcd864a
 8004da0:	a91d4101 	.word	0xa91d4101
 8004da4:	3fd17460 	.word	0x3fd17460
 8004da8:	518f264d 	.word	0x518f264d
 8004dac:	3fd55555 	.word	0x3fd55555
 8004db0:	db6fabff 	.word	0xdb6fabff
 8004db4:	3fdb6db6 	.word	0x3fdb6db6
 8004db8:	33333303 	.word	0x33333303
 8004dbc:	3fe33333 	.word	0x3fe33333
 8004dc0:	e0000000 	.word	0xe0000000
 8004dc4:	3feec709 	.word	0x3feec709
 8004dc8:	dc3a03fd 	.word	0xdc3a03fd
 8004dcc:	3feec709 	.word	0x3feec709
 8004dd0:	145b01f5 	.word	0x145b01f5
 8004dd4:	be3e2fe0 	.word	0xbe3e2fe0
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	3ff00000 	.word	0x3ff00000
 8004de0:	7ff00000 	.word	0x7ff00000
 8004de4:	43400000 	.word	0x43400000
 8004de8:	0003988e 	.word	0x0003988e
 8004dec:	000bb679 	.word	0x000bb679
 8004df0:	08005520 	.word	0x08005520
 8004df4:	3ff00000 	.word	0x3ff00000
 8004df8:	40080000 	.word	0x40080000
 8004dfc:	08005540 	.word	0x08005540
 8004e00:	08005530 	.word	0x08005530
 8004e04:	a3b5      	add	r3, pc, #724	; (adr r3, 80050dc <__ieee754_pow+0xa54>)
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	f7fb fa09 	bl	8000224 <__adddf3>
 8004e12:	4622      	mov	r2, r4
 8004e14:	ec41 0b1a 	vmov	d10, r0, r1
 8004e18:	462b      	mov	r3, r5
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	f7fb f9ff 	bl	8000220 <__aeabi_dsub>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	ec51 0b1a 	vmov	r0, r1, d10
 8004e2a:	f7fb fe41 	bl	8000ab0 <__aeabi_dcmpgt>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	f47f ae04 	bne.w	8004a3c <__ieee754_pow+0x3b4>
 8004e34:	4aa4      	ldr	r2, [pc, #656]	; (80050c8 <__ieee754_pow+0xa40>)
 8004e36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	f340 8108 	ble.w	8005050 <__ieee754_pow+0x9c8>
 8004e40:	151b      	asrs	r3, r3, #20
 8004e42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004e46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004e4a:	fa4a f303 	asr.w	r3, sl, r3
 8004e4e:	445b      	add	r3, fp
 8004e50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004e54:	4e9d      	ldr	r6, [pc, #628]	; (80050cc <__ieee754_pow+0xa44>)
 8004e56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004e5a:	4116      	asrs	r6, r2
 8004e5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004e60:	2000      	movs	r0, #0
 8004e62:	ea23 0106 	bic.w	r1, r3, r6
 8004e66:	f1c2 0214 	rsb	r2, r2, #20
 8004e6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004e6e:	fa4a fa02 	asr.w	sl, sl, r2
 8004e72:	f1bb 0f00 	cmp.w	fp, #0
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	bfb8      	it	lt
 8004e80:	f1ca 0a00 	rsblt	sl, sl, #0
 8004e84:	f7fb f9cc 	bl	8000220 <__aeabi_dsub>
 8004e88:	ec41 0b19 	vmov	d9, r0, r1
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	ec51 0b19 	vmov	r0, r1, d9
 8004e94:	f7fb f9c6 	bl	8000224 <__adddf3>
 8004e98:	a37b      	add	r3, pc, #492	; (adr r3, 8005088 <__ieee754_pow+0xa00>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	f7fb fb74 	bl	8000590 <__aeabi_dmul>
 8004ea8:	ec53 2b19 	vmov	r2, r3, d9
 8004eac:	4606      	mov	r6, r0
 8004eae:	460f      	mov	r7, r1
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f7fb f9b4 	bl	8000220 <__aeabi_dsub>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	f7fb f9ae 	bl	8000220 <__aeabi_dsub>
 8004ec4:	a372      	add	r3, pc, #456	; (adr r3, 8005090 <__ieee754_pow+0xa08>)
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f7fb fb61 	bl	8000590 <__aeabi_dmul>
 8004ece:	a372      	add	r3, pc, #456	; (adr r3, 8005098 <__ieee754_pow+0xa10>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	4620      	mov	r0, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7fb fb58 	bl	8000590 <__aeabi_dmul>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	f7fb f99c 	bl	8000224 <__adddf3>
 8004eec:	4604      	mov	r4, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	f7fb f994 	bl	8000224 <__adddf3>
 8004efc:	4632      	mov	r2, r6
 8004efe:	463b      	mov	r3, r7
 8004f00:	4680      	mov	r8, r0
 8004f02:	4689      	mov	r9, r1
 8004f04:	f7fb f98c 	bl	8000220 <__aeabi_dsub>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb f986 	bl	8000220 <__aeabi_dsub>
 8004f14:	4642      	mov	r2, r8
 8004f16:	4606      	mov	r6, r0
 8004f18:	460f      	mov	r7, r1
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	4640      	mov	r0, r8
 8004f1e:	4649      	mov	r1, r9
 8004f20:	f7fb fb36 	bl	8000590 <__aeabi_dmul>
 8004f24:	a35e      	add	r3, pc, #376	; (adr r3, 80050a0 <__ieee754_pow+0xa18>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	460d      	mov	r5, r1
 8004f2e:	f7fb fb2f 	bl	8000590 <__aeabi_dmul>
 8004f32:	a35d      	add	r3, pc, #372	; (adr r3, 80050a8 <__ieee754_pow+0xa20>)
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f7fb f972 	bl	8000220 <__aeabi_dsub>
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	462b      	mov	r3, r5
 8004f40:	f7fb fb26 	bl	8000590 <__aeabi_dmul>
 8004f44:	a35a      	add	r3, pc, #360	; (adr r3, 80050b0 <__ieee754_pow+0xa28>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f7fb f96b 	bl	8000224 <__adddf3>
 8004f4e:	4622      	mov	r2, r4
 8004f50:	462b      	mov	r3, r5
 8004f52:	f7fb fb1d 	bl	8000590 <__aeabi_dmul>
 8004f56:	a358      	add	r3, pc, #352	; (adr r3, 80050b8 <__ieee754_pow+0xa30>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb f960 	bl	8000220 <__aeabi_dsub>
 8004f60:	4622      	mov	r2, r4
 8004f62:	462b      	mov	r3, r5
 8004f64:	f7fb fb14 	bl	8000590 <__aeabi_dmul>
 8004f68:	a355      	add	r3, pc, #340	; (adr r3, 80050c0 <__ieee754_pow+0xa38>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb f959 	bl	8000224 <__adddf3>
 8004f72:	4622      	mov	r2, r4
 8004f74:	462b      	mov	r3, r5
 8004f76:	f7fb fb0b 	bl	8000590 <__aeabi_dmul>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f7fb f94d 	bl	8000220 <__aeabi_dsub>
 8004f86:	4604      	mov	r4, r0
 8004f88:	460d      	mov	r5, r1
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4640      	mov	r0, r8
 8004f90:	4649      	mov	r1, r9
 8004f92:	f7fb fafd 	bl	8000590 <__aeabi_dmul>
 8004f96:	2200      	movs	r2, #0
 8004f98:	ec41 0b19 	vmov	d9, r0, r1
 8004f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb f93c 	bl	8000220 <__aeabi_dsub>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	ec51 0b19 	vmov	r0, r1, d9
 8004fb0:	f7fb fc18 	bl	80007e4 <__aeabi_ddiv>
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	460d      	mov	r5, r1
 8004fba:	463b      	mov	r3, r7
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	f7fb fae6 	bl	8000590 <__aeabi_dmul>
 8004fc4:	4632      	mov	r2, r6
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	f7fb f92c 	bl	8000224 <__adddf3>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f7fb f924 	bl	8000220 <__aeabi_dsub>
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	f7fb f920 	bl	8000220 <__aeabi_dsub>
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	493a      	ldr	r1, [pc, #232]	; (80050d0 <__ieee754_pow+0xa48>)
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7fb f91a 	bl	8000220 <__aeabi_dsub>
 8004fec:	ec41 0b10 	vmov	d0, r0, r1
 8004ff0:	ee10 3a90 	vmov	r3, s1
 8004ff4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffc:	da2b      	bge.n	8005056 <__ieee754_pow+0x9ce>
 8004ffe:	4650      	mov	r0, sl
 8005000:	f000 f966 	bl	80052d0 <scalbn>
 8005004:	ec51 0b10 	vmov	r0, r1, d0
 8005008:	ec53 2b18 	vmov	r2, r3, d8
 800500c:	f7ff bbed 	b.w	80047ea <__ieee754_pow+0x162>
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <__ieee754_pow+0xa4c>)
 8005012:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005016:	429e      	cmp	r6, r3
 8005018:	f77f af0c 	ble.w	8004e34 <__ieee754_pow+0x7ac>
 800501c:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <__ieee754_pow+0xa50>)
 800501e:	440b      	add	r3, r1
 8005020:	4303      	orrs	r3, r0
 8005022:	d009      	beq.n	8005038 <__ieee754_pow+0x9b0>
 8005024:	ec51 0b18 	vmov	r0, r1, d8
 8005028:	2200      	movs	r2, #0
 800502a:	2300      	movs	r3, #0
 800502c:	f7fb fd22 	bl	8000a74 <__aeabi_dcmplt>
 8005030:	3800      	subs	r0, #0
 8005032:	bf18      	it	ne
 8005034:	2001      	movne	r0, #1
 8005036:	e447      	b.n	80048c8 <__ieee754_pow+0x240>
 8005038:	4622      	mov	r2, r4
 800503a:	462b      	mov	r3, r5
 800503c:	f7fb f8f0 	bl	8000220 <__aeabi_dsub>
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	f7fb fd2a 	bl	8000a9c <__aeabi_dcmpge>
 8005048:	2800      	cmp	r0, #0
 800504a:	f43f aef3 	beq.w	8004e34 <__ieee754_pow+0x7ac>
 800504e:	e7e9      	b.n	8005024 <__ieee754_pow+0x99c>
 8005050:	f04f 0a00 	mov.w	sl, #0
 8005054:	e71a      	b.n	8004e8c <__ieee754_pow+0x804>
 8005056:	ec51 0b10 	vmov	r0, r1, d0
 800505a:	4619      	mov	r1, r3
 800505c:	e7d4      	b.n	8005008 <__ieee754_pow+0x980>
 800505e:	491c      	ldr	r1, [pc, #112]	; (80050d0 <__ieee754_pow+0xa48>)
 8005060:	2000      	movs	r0, #0
 8005062:	f7ff bb30 	b.w	80046c6 <__ieee754_pow+0x3e>
 8005066:	2000      	movs	r0, #0
 8005068:	2100      	movs	r1, #0
 800506a:	f7ff bb2c 	b.w	80046c6 <__ieee754_pow+0x3e>
 800506e:	4630      	mov	r0, r6
 8005070:	4639      	mov	r1, r7
 8005072:	f7ff bb28 	b.w	80046c6 <__ieee754_pow+0x3e>
 8005076:	9204      	str	r2, [sp, #16]
 8005078:	f7ff bb7a 	b.w	8004770 <__ieee754_pow+0xe8>
 800507c:	2300      	movs	r3, #0
 800507e:	f7ff bb64 	b.w	800474a <__ieee754_pow+0xc2>
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	00000000 	.word	0x00000000
 800508c:	3fe62e43 	.word	0x3fe62e43
 8005090:	fefa39ef 	.word	0xfefa39ef
 8005094:	3fe62e42 	.word	0x3fe62e42
 8005098:	0ca86c39 	.word	0x0ca86c39
 800509c:	be205c61 	.word	0xbe205c61
 80050a0:	72bea4d0 	.word	0x72bea4d0
 80050a4:	3e663769 	.word	0x3e663769
 80050a8:	c5d26bf1 	.word	0xc5d26bf1
 80050ac:	3ebbbd41 	.word	0x3ebbbd41
 80050b0:	af25de2c 	.word	0xaf25de2c
 80050b4:	3f11566a 	.word	0x3f11566a
 80050b8:	16bebd93 	.word	0x16bebd93
 80050bc:	3f66c16c 	.word	0x3f66c16c
 80050c0:	5555553e 	.word	0x5555553e
 80050c4:	3fc55555 	.word	0x3fc55555
 80050c8:	3fe00000 	.word	0x3fe00000
 80050cc:	000fffff 	.word	0x000fffff
 80050d0:	3ff00000 	.word	0x3ff00000
 80050d4:	4090cbff 	.word	0x4090cbff
 80050d8:	3f6f3400 	.word	0x3f6f3400
 80050dc:	652b82fe 	.word	0x652b82fe
 80050e0:	3c971547 	.word	0x3c971547

080050e4 <__ieee754_sqrt>:
 80050e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e8:	ec55 4b10 	vmov	r4, r5, d0
 80050ec:	4e55      	ldr	r6, [pc, #340]	; (8005244 <__ieee754_sqrt+0x160>)
 80050ee:	43ae      	bics	r6, r5
 80050f0:	ee10 0a10 	vmov	r0, s0
 80050f4:	ee10 3a10 	vmov	r3, s0
 80050f8:	462a      	mov	r2, r5
 80050fa:	4629      	mov	r1, r5
 80050fc:	d110      	bne.n	8005120 <__ieee754_sqrt+0x3c>
 80050fe:	ee10 2a10 	vmov	r2, s0
 8005102:	462b      	mov	r3, r5
 8005104:	f7fb fa44 	bl	8000590 <__aeabi_dmul>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb f888 	bl	8000224 <__adddf3>
 8005114:	4604      	mov	r4, r0
 8005116:	460d      	mov	r5, r1
 8005118:	ec45 4b10 	vmov	d0, r4, r5
 800511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005120:	2d00      	cmp	r5, #0
 8005122:	dc10      	bgt.n	8005146 <__ieee754_sqrt+0x62>
 8005124:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005128:	4330      	orrs	r0, r6
 800512a:	d0f5      	beq.n	8005118 <__ieee754_sqrt+0x34>
 800512c:	b15d      	cbz	r5, 8005146 <__ieee754_sqrt+0x62>
 800512e:	ee10 2a10 	vmov	r2, s0
 8005132:	462b      	mov	r3, r5
 8005134:	ee10 0a10 	vmov	r0, s0
 8005138:	f7fb f872 	bl	8000220 <__aeabi_dsub>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	f7fb fb50 	bl	80007e4 <__aeabi_ddiv>
 8005144:	e7e6      	b.n	8005114 <__ieee754_sqrt+0x30>
 8005146:	1512      	asrs	r2, r2, #20
 8005148:	d074      	beq.n	8005234 <__ieee754_sqrt+0x150>
 800514a:	07d4      	lsls	r4, r2, #31
 800514c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005150:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005158:	bf5e      	ittt	pl
 800515a:	0fda      	lsrpl	r2, r3, #31
 800515c:	005b      	lslpl	r3, r3, #1
 800515e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005162:	2400      	movs	r4, #0
 8005164:	0fda      	lsrs	r2, r3, #31
 8005166:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800516a:	107f      	asrs	r7, r7, #1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	2516      	movs	r5, #22
 8005170:	4620      	mov	r0, r4
 8005172:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005176:	1886      	adds	r6, r0, r2
 8005178:	428e      	cmp	r6, r1
 800517a:	bfde      	ittt	le
 800517c:	1b89      	suble	r1, r1, r6
 800517e:	18b0      	addle	r0, r6, r2
 8005180:	18a4      	addle	r4, r4, r2
 8005182:	0049      	lsls	r1, r1, #1
 8005184:	3d01      	subs	r5, #1
 8005186:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800518a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800518e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005192:	d1f0      	bne.n	8005176 <__ieee754_sqrt+0x92>
 8005194:	462a      	mov	r2, r5
 8005196:	f04f 0e20 	mov.w	lr, #32
 800519a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800519e:	4281      	cmp	r1, r0
 80051a0:	eb06 0c05 	add.w	ip, r6, r5
 80051a4:	dc02      	bgt.n	80051ac <__ieee754_sqrt+0xc8>
 80051a6:	d113      	bne.n	80051d0 <__ieee754_sqrt+0xec>
 80051a8:	459c      	cmp	ip, r3
 80051aa:	d811      	bhi.n	80051d0 <__ieee754_sqrt+0xec>
 80051ac:	f1bc 0f00 	cmp.w	ip, #0
 80051b0:	eb0c 0506 	add.w	r5, ip, r6
 80051b4:	da43      	bge.n	800523e <__ieee754_sqrt+0x15a>
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	db41      	blt.n	800523e <__ieee754_sqrt+0x15a>
 80051ba:	f100 0801 	add.w	r8, r0, #1
 80051be:	1a09      	subs	r1, r1, r0
 80051c0:	459c      	cmp	ip, r3
 80051c2:	bf88      	it	hi
 80051c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80051c8:	eba3 030c 	sub.w	r3, r3, ip
 80051cc:	4432      	add	r2, r6
 80051ce:	4640      	mov	r0, r8
 80051d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80051d4:	f1be 0e01 	subs.w	lr, lr, #1
 80051d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80051dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80051e4:	d1db      	bne.n	800519e <__ieee754_sqrt+0xba>
 80051e6:	430b      	orrs	r3, r1
 80051e8:	d006      	beq.n	80051f8 <__ieee754_sqrt+0x114>
 80051ea:	1c50      	adds	r0, r2, #1
 80051ec:	bf13      	iteet	ne
 80051ee:	3201      	addne	r2, #1
 80051f0:	3401      	addeq	r4, #1
 80051f2:	4672      	moveq	r2, lr
 80051f4:	f022 0201 	bicne.w	r2, r2, #1
 80051f8:	1063      	asrs	r3, r4, #1
 80051fa:	0852      	lsrs	r2, r2, #1
 80051fc:	07e1      	lsls	r1, r4, #31
 80051fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005202:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005206:	bf48      	it	mi
 8005208:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800520c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005210:	4614      	mov	r4, r2
 8005212:	e781      	b.n	8005118 <__ieee754_sqrt+0x34>
 8005214:	0ad9      	lsrs	r1, r3, #11
 8005216:	3815      	subs	r0, #21
 8005218:	055b      	lsls	r3, r3, #21
 800521a:	2900      	cmp	r1, #0
 800521c:	d0fa      	beq.n	8005214 <__ieee754_sqrt+0x130>
 800521e:	02cd      	lsls	r5, r1, #11
 8005220:	d50a      	bpl.n	8005238 <__ieee754_sqrt+0x154>
 8005222:	f1c2 0420 	rsb	r4, r2, #32
 8005226:	fa23 f404 	lsr.w	r4, r3, r4
 800522a:	1e55      	subs	r5, r2, #1
 800522c:	4093      	lsls	r3, r2
 800522e:	4321      	orrs	r1, r4
 8005230:	1b42      	subs	r2, r0, r5
 8005232:	e78a      	b.n	800514a <__ieee754_sqrt+0x66>
 8005234:	4610      	mov	r0, r2
 8005236:	e7f0      	b.n	800521a <__ieee754_sqrt+0x136>
 8005238:	0049      	lsls	r1, r1, #1
 800523a:	3201      	adds	r2, #1
 800523c:	e7ef      	b.n	800521e <__ieee754_sqrt+0x13a>
 800523e:	4680      	mov	r8, r0
 8005240:	e7bd      	b.n	80051be <__ieee754_sqrt+0xda>
 8005242:	bf00      	nop
 8005244:	7ff00000 	.word	0x7ff00000

08005248 <with_errno>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4604      	mov	r4, r0
 800524c:	460d      	mov	r5, r1
 800524e:	4616      	mov	r6, r2
 8005250:	f7ff f8ea 	bl	8004428 <__errno>
 8005254:	4629      	mov	r1, r5
 8005256:	6006      	str	r6, [r0, #0]
 8005258:	4620      	mov	r0, r4
 800525a:	bd70      	pop	{r4, r5, r6, pc}

0800525c <xflow>:
 800525c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800525e:	4614      	mov	r4, r2
 8005260:	461d      	mov	r5, r3
 8005262:	b108      	cbz	r0, 8005268 <xflow+0xc>
 8005264:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005268:	e9cd 2300 	strd	r2, r3, [sp]
 800526c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005270:	4620      	mov	r0, r4
 8005272:	4629      	mov	r1, r5
 8005274:	f7fb f98c 	bl	8000590 <__aeabi_dmul>
 8005278:	2222      	movs	r2, #34	; 0x22
 800527a:	b003      	add	sp, #12
 800527c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005280:	f7ff bfe2 	b.w	8005248 <with_errno>

08005284 <__math_uflow>:
 8005284:	b508      	push	{r3, lr}
 8005286:	2200      	movs	r2, #0
 8005288:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800528c:	f7ff ffe6 	bl	800525c <xflow>
 8005290:	ec41 0b10 	vmov	d0, r0, r1
 8005294:	bd08      	pop	{r3, pc}

08005296 <__math_oflow>:
 8005296:	b508      	push	{r3, lr}
 8005298:	2200      	movs	r2, #0
 800529a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800529e:	f7ff ffdd 	bl	800525c <xflow>
 80052a2:	ec41 0b10 	vmov	d0, r0, r1
 80052a6:	bd08      	pop	{r3, pc}

080052a8 <fabs>:
 80052a8:	ec51 0b10 	vmov	r0, r1, d0
 80052ac:	ee10 2a10 	vmov	r2, s0
 80052b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052b4:	ec43 2b10 	vmov	d0, r2, r3
 80052b8:	4770      	bx	lr

080052ba <finite>:
 80052ba:	b082      	sub	sp, #8
 80052bc:	ed8d 0b00 	vstr	d0, [sp]
 80052c0:	9801      	ldr	r0, [sp, #4]
 80052c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80052c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80052ca:	0fc0      	lsrs	r0, r0, #31
 80052cc:	b002      	add	sp, #8
 80052ce:	4770      	bx	lr

080052d0 <scalbn>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	ec55 4b10 	vmov	r4, r5, d0
 80052d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80052da:	4606      	mov	r6, r0
 80052dc:	462b      	mov	r3, r5
 80052de:	b99a      	cbnz	r2, 8005308 <scalbn+0x38>
 80052e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052e4:	4323      	orrs	r3, r4
 80052e6:	d036      	beq.n	8005356 <scalbn+0x86>
 80052e8:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <scalbn+0x100>)
 80052ea:	4629      	mov	r1, r5
 80052ec:	ee10 0a10 	vmov	r0, s0
 80052f0:	2200      	movs	r2, #0
 80052f2:	f7fb f94d 	bl	8000590 <__aeabi_dmul>
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <scalbn+0x104>)
 80052f8:	429e      	cmp	r6, r3
 80052fa:	4604      	mov	r4, r0
 80052fc:	460d      	mov	r5, r1
 80052fe:	da10      	bge.n	8005322 <scalbn+0x52>
 8005300:	a32b      	add	r3, pc, #172	; (adr r3, 80053b0 <scalbn+0xe0>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	e03a      	b.n	800537e <scalbn+0xae>
 8005308:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800530c:	428a      	cmp	r2, r1
 800530e:	d10c      	bne.n	800532a <scalbn+0x5a>
 8005310:	ee10 2a10 	vmov	r2, s0
 8005314:	4620      	mov	r0, r4
 8005316:	4629      	mov	r1, r5
 8005318:	f7fa ff84 	bl	8000224 <__adddf3>
 800531c:	4604      	mov	r4, r0
 800531e:	460d      	mov	r5, r1
 8005320:	e019      	b.n	8005356 <scalbn+0x86>
 8005322:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005326:	460b      	mov	r3, r1
 8005328:	3a36      	subs	r2, #54	; 0x36
 800532a:	4432      	add	r2, r6
 800532c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005330:	428a      	cmp	r2, r1
 8005332:	dd08      	ble.n	8005346 <scalbn+0x76>
 8005334:	2d00      	cmp	r5, #0
 8005336:	a120      	add	r1, pc, #128	; (adr r1, 80053b8 <scalbn+0xe8>)
 8005338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533c:	da1c      	bge.n	8005378 <scalbn+0xa8>
 800533e:	a120      	add	r1, pc, #128	; (adr r1, 80053c0 <scalbn+0xf0>)
 8005340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005344:	e018      	b.n	8005378 <scalbn+0xa8>
 8005346:	2a00      	cmp	r2, #0
 8005348:	dd08      	ble.n	800535c <scalbn+0x8c>
 800534a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800534e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005352:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005356:	ec45 4b10 	vmov	d0, r4, r5
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005360:	da19      	bge.n	8005396 <scalbn+0xc6>
 8005362:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005366:	429e      	cmp	r6, r3
 8005368:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800536c:	dd0a      	ble.n	8005384 <scalbn+0xb4>
 800536e:	a112      	add	r1, pc, #72	; (adr r1, 80053b8 <scalbn+0xe8>)
 8005370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e2      	bne.n	800533e <scalbn+0x6e>
 8005378:	a30f      	add	r3, pc, #60	; (adr r3, 80053b8 <scalbn+0xe8>)
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f7fb f907 	bl	8000590 <__aeabi_dmul>
 8005382:	e7cb      	b.n	800531c <scalbn+0x4c>
 8005384:	a10a      	add	r1, pc, #40	; (adr r1, 80053b0 <scalbn+0xe0>)
 8005386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0b8      	beq.n	8005300 <scalbn+0x30>
 800538e:	a10e      	add	r1, pc, #56	; (adr r1, 80053c8 <scalbn+0xf8>)
 8005390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005394:	e7b4      	b.n	8005300 <scalbn+0x30>
 8005396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800539a:	3236      	adds	r2, #54	; 0x36
 800539c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80053a4:	4620      	mov	r0, r4
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <scalbn+0x108>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	e7e8      	b.n	800537e <scalbn+0xae>
 80053ac:	f3af 8000 	nop.w
 80053b0:	c2f8f359 	.word	0xc2f8f359
 80053b4:	01a56e1f 	.word	0x01a56e1f
 80053b8:	8800759c 	.word	0x8800759c
 80053bc:	7e37e43c 	.word	0x7e37e43c
 80053c0:	8800759c 	.word	0x8800759c
 80053c4:	fe37e43c 	.word	0xfe37e43c
 80053c8:	c2f8f359 	.word	0xc2f8f359
 80053cc:	81a56e1f 	.word	0x81a56e1f
 80053d0:	43500000 	.word	0x43500000
 80053d4:	ffff3cb0 	.word	0xffff3cb0
 80053d8:	3c900000 	.word	0x3c900000

080053dc <_init>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr

080053e8 <_fini>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr
