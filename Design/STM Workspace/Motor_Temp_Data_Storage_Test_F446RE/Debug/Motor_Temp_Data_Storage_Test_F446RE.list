
Motor_Temp_Data_Storage_Test_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  0800c5d0  0800c5d0  0001c5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfa4  0800cfa4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfa4  0800cfa4  0001cfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfac  0800cfac  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfac  0800cfac  0001cfac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfb0  0800cfb0  0001cfb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cfb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002470  200001f8  0800d1ac  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002668  0800d1ac  00022668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012042  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf7  00000000  00000000  0003226a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00035f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249bb  00000000  00000000  00036f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166f3  00000000  00000000  0005b8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d34c2  00000000  00000000  00071fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145480  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c18  00000000  00000000  001454d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c5b4 	.word	0x0800c5b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800c5b4 	.word	0x0800c5b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 8001044:	2200      	movs	r2, #0
 8001046:	2120      	movs	r1, #32
 8001048:	4834      	ldr	r0, [pc, #208]	; (800111c <Max6675_Read_Temp+0xe4>)
 800104a:	f001 fd4d 	bl	8002ae8 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 800104e:	2332      	movs	r3, #50	; 0x32
 8001050:	2201      	movs	r2, #1
 8001052:	4933      	ldr	r1, [pc, #204]	; (8001120 <Max6675_Read_Temp+0xe8>)
 8001054:	4833      	ldr	r0, [pc, #204]	; (8001124 <Max6675_Read_Temp+0xec>)
 8001056:	f002 fca4 	bl	80039a2 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 800105a:	2201      	movs	r2, #1
 800105c:	2120      	movs	r1, #32
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <Max6675_Read_Temp+0xe4>)
 8001060:	f001 fd42 	bl	8002ae8 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <Max6675_Read_Temp+0xe8>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <Max6675_Read_Temp+0xf0>)
 8001070:	701a      	strb	r2, [r3, #0]
Error=0;
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <Max6675_Read_Temp+0xf4>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <Max6675_Read_Temp+0xf0>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d02b      	beq.n	80010d8 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <Max6675_Read_Temp+0xf0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d120      	bne.n	80010ca <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001088:	4829      	ldr	r0, [pc, #164]	; (8001130 <Max6675_Read_Temp+0xf8>)
 800108a:	f003 f8bd 	bl	8004208 <HAL_TIM_Base_Start>
		while(timer_val<1)
 800108e:	e011      	b.n	80010b4 <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <Max6675_Read_Temp+0xf0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d103      	bne.n	80010a0 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <Max6675_Read_Temp+0xf4>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
				break;
 800109e:	e00d      	b.n	80010bc <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <Max6675_Read_Temp+0xf8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <Max6675_Read_Temp+0xfc>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0b5b      	lsrs	r3, r3, #13
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <Max6675_Read_Temp+0x100>)
 80010b2:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <Max6675_Read_Temp+0x100>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0e9      	beq.n	8001090 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <Max6675_Read_Temp+0x100>)
 80010be:	2200      	movs	r2, #0
 80010c0:	801a      	strh	r2, [r3, #0]
		Error=2;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <Max6675_Read_Temp+0xf4>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e006      	b.n	80010d8 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <Max6675_Read_Temp+0xf0>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d102      	bne.n	80010d8 <Max6675_Read_Temp+0xa0>
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <Max6675_Read_Temp+0xf4>)
 80010d4:	2203      	movs	r2, #3
 80010d6:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <Max6675_Read_Temp+0xe8>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <Max6675_Read_Temp+0xe8>)
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	4313      	orrs	r3, r2
 80010e6:	10db      	asrs	r3, r3, #3
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f0:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 80010f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80010fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001100:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8001104:	20fa      	movs	r0, #250	; 0xfa
 8001106:	f001 fa25 	bl	8002554 <HAL_Delay>
return Temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	ee07 3a90 	vmov	s15, r3
}
 8001110:	eeb0 0a67 	vmov.f32	s0, s15
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020800 	.word	0x40020800
 8001120:	20000214 	.word	0x20000214
 8001124:	2000021c 	.word	0x2000021c
 8001128:	20000216 	.word	0x20000216
 800112c:	20000217 	.word	0x20000217
 8001130:	200002cc 	.word	0x200002cc
 8001134:	d1b71759 	.word	0xd1b71759
 8001138:	20000318 	.word	0x20000318

0800113c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2110      	movs	r1, #16
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <SELECT+0x18>)
 8001146:	f001 fccf 	bl	8002ae8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f001 fa02 	bl	8002554 <HAL_Delay>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020800 	.word	0x40020800

08001158 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <DESELECT+0x18>)
 8001162:	f001 fcc1 	bl	8002ae8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f001 f9f4 	bl	8002554 <HAL_Delay>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40020800 	.word	0x40020800

08001174 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800117e:	bf00      	nop
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <SPI_TxByte+0x30>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b02      	cmp	r3, #2
 800118c:	d1f8      	bne.n	8001180 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800118e:	1df9      	adds	r1, r7, #7
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	2201      	movs	r2, #1
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <SPI_TxByte+0x30>)
 8001196:	f002 fac8 	bl	800372a <HAL_SPI_Transmit>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000021c 	.word	0x2000021c

080011a8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011b4:	bf00      	nop
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <SPI_TxBuffer+0x30>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d1f8      	bne.n	80011b6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80011c4:	887a      	ldrh	r2, [r7, #2]
 80011c6:	2364      	movs	r3, #100	; 0x64
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <SPI_TxBuffer+0x30>)
 80011cc:	f002 faad 	bl	800372a <HAL_SPI_Transmit>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000021c 	.word	0x2000021c

080011dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80011e2:	23ff      	movs	r3, #255	; 0xff
 80011e4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011e6:	bf00      	nop
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <SPI_RxByte+0x34>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d1f8      	bne.n	80011e8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80011f6:	1dba      	adds	r2, r7, #6
 80011f8:	1df9      	adds	r1, r7, #7
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <SPI_RxByte+0x34>)
 8001202:	f002 fcdf 	bl	8003bc4 <HAL_SPI_TransmitReceive>

	return data;
 8001206:	79bb      	ldrb	r3, [r7, #6]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000021c 	.word	0x2000021c

08001214 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800121c:	f7ff ffde 	bl	80011dc <SPI_RxByte>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	701a      	strb	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <SD_ReadyWait+0x30>)
 8001238:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800123c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800123e:	f7ff ffcd 	bl	80011dc <SPI_RxByte>
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2bff      	cmp	r3, #255	; 0xff
 800124a:	d004      	beq.n	8001256 <SD_ReadyWait+0x26>
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SD_ReadyWait+0x30>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f3      	bne.n	800123e <SD_ReadyWait+0xe>

	return res;
 8001256:	79fb      	ldrb	r3, [r7, #7]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20002410 	.word	0x20002410

08001264 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800126a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800126e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001270:	f7ff ff72 	bl	8001158 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	e005      	b.n	8001286 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800127a:	20ff      	movs	r0, #255	; 0xff
 800127c:	f7ff ff7a 	bl	8001174 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3301      	adds	r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b09      	cmp	r3, #9
 800128a:	ddf6      	ble.n	800127a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800128c:	f7ff ff56 	bl	800113c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80012a4:	2395      	movs	r3, #149	; 0x95
 80012a6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80012a8:	463b      	mov	r3, r7
 80012aa:	2106      	movs	r1, #6
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff7b 	bl	80011a8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80012b2:	e002      	b.n	80012ba <SD_PowerOn+0x56>
	{
		cnt--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80012ba:	f7ff ff8f 	bl	80011dc <SPI_RxByte>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d002      	beq.n	80012ca <SD_PowerOn+0x66>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f4      	bne.n	80012b4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80012ca:	f7ff ff45 	bl	8001158 <DESELECT>
	SPI_TxByte(0XFF);
 80012ce:	20ff      	movs	r0, #255	; 0xff
 80012d0:	f7ff ff50 	bl	8001174 <SPI_TxByte>

	PowerFlag = 1;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <SD_PowerOn+0x80>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000219 	.word	0x20000219

080012e8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <SD_PowerOff+0x14>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000219 	.word	0x20000219

08001300 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <SD_CheckPower+0x14>)
 8001306:	781b      	ldrb	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000219 	.word	0x20000219

08001318 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <SD_RxDataBlock+0x5c>)
 8001324:	22c8      	movs	r2, #200	; 0xc8
 8001326:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001328:	f7ff ff58 	bl	80011dc <SPI_RxByte>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2bff      	cmp	r3, #255	; 0xff
 8001334:	d104      	bne.n	8001340 <SD_RxDataBlock+0x28>
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <SD_RxDataBlock+0x5c>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f3      	bne.n	8001328 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2bfe      	cmp	r3, #254	; 0xfe
 8001344:	d001      	beq.n	800134a <SD_RxDataBlock+0x32>
 8001346:	2300      	movs	r3, #0
 8001348:	e00f      	b.n	800136a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5f 	bl	8001214 <SPI_RxBytePtr>
	} while(len--);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	603a      	str	r2, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f4      	bne.n	800134a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001360:	f7ff ff3c 	bl	80011dc <SPI_RxByte>
	SPI_RxByte();
 8001364:	f7ff ff3a 	bl	80011dc <SPI_RxByte>

	return TRUE;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000240e 	.word	0x2000240e

08001378 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001388:	f7ff ff52 	bl	8001230 <SD_ReadyWait>
 800138c:	4603      	mov	r3, r0
 800138e:	2bff      	cmp	r3, #255	; 0xff
 8001390:	d001      	beq.n	8001396 <SD_TxDataBlock+0x1e>
 8001392:	2300      	movs	r3, #0
 8001394:	e02f      	b.n	80013f6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff feeb 	bl	8001174 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	2bfd      	cmp	r3, #253	; 0xfd
 80013a2:	d020      	beq.n	80013e6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80013a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fefd 	bl	80011a8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80013ae:	f7ff ff15 	bl	80011dc <SPI_RxByte>
		SPI_RxByte();
 80013b2:	f7ff ff13 	bl	80011dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80013b6:	e00b      	b.n	80013d0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80013b8:	f7ff ff10 	bl	80011dc <SPI_RxByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d006      	beq.n	80013d8 <SD_TxDataBlock+0x60>
			i++;
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	2b40      	cmp	r3, #64	; 0x40
 80013d4:	d9f0      	bls.n	80013b8 <SD_TxDataBlock+0x40>
 80013d6:	e000      	b.n	80013da <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80013d8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80013da:	bf00      	nop
 80013dc:	f7ff fefe 	bl	80011dc <SPI_RxByte>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0fa      	beq.n	80013dc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d101      	bne.n	80013f4 <SD_TxDataBlock+0x7c>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	6039      	str	r1, [r7, #0]
 8001408:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800140a:	f7ff ff11 	bl	8001230 <SD_ReadyWait>
 800140e:	4603      	mov	r3, r0
 8001410:	2bff      	cmp	r3, #255	; 0xff
 8001412:	d001      	beq.n	8001418 <SD_SendCmd+0x1a>
 8001414:	23ff      	movs	r3, #255	; 0xff
 8001416:	e042      	b.n	800149e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff feaa 	bl	8001174 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	0e1b      	lsrs	r3, r3, #24
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fea4 	bl	8001174 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe9e 	bl	8001174 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe98 	bl	8001174 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe93 	bl	8001174 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b40      	cmp	r3, #64	; 0x40
 8001452:	d102      	bne.n	800145a <SD_SendCmd+0x5c>
 8001454:	2395      	movs	r3, #149	; 0x95
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e007      	b.n	800146a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b48      	cmp	r3, #72	; 0x48
 800145e:	d102      	bne.n	8001466 <SD_SendCmd+0x68>
 8001460:	2387      	movs	r3, #135	; 0x87
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e001      	b.n	800146a <SD_SendCmd+0x6c>
	else crc = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fe81 	bl	8001174 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b4c      	cmp	r3, #76	; 0x4c
 8001476:	d101      	bne.n	800147c <SD_SendCmd+0x7e>
 8001478:	f7ff feb0 	bl	80011dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800147c:	230a      	movs	r3, #10
 800147e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001480:	f7ff feac 	bl	80011dc <SPI_RxByte>
 8001484:	4603      	mov	r3, r0
 8001486:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001488:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800148c:	2b00      	cmp	r3, #0
 800148e:	da05      	bge.n	800149c <SD_SendCmd+0x9e>
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	3b01      	subs	r3, #1
 8001494:	73bb      	strb	r3, [r7, #14]
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f1      	bne.n	8001480 <SD_SendCmd+0x82>

	return res;
 800149c:	7b7b      	ldrb	r3, [r7, #13]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SD_disk_initialize+0x14>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0d6      	b.n	800166a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80014bc:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <SD_disk_initialize+0x1cc>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <SD_disk_initialize+0x2a>
 80014ca:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <SD_disk_initialize+0x1cc>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	e0cb      	b.n	800166a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80014d2:	f7ff fec7 	bl	8001264 <SD_PowerOn>

	/* slave select */
	SELECT();
 80014d6:	f7ff fe31 	bl	800113c <SELECT>

	/* check disk type */
	type = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80014de:	2100      	movs	r1, #0
 80014e0:	2040      	movs	r0, #64	; 0x40
 80014e2:	f7ff ff8c 	bl	80013fe <SD_SendCmd>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	f040 80a6 	bne.w	800163a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80014ee:	4b62      	ldr	r3, [pc, #392]	; (8001678 <SD_disk_initialize+0x1d0>)
 80014f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80014f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80014fa:	2048      	movs	r0, #72	; 0x48
 80014fc:	f7ff ff7f 	bl	80013fe <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d158      	bne.n	80015b8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e00c      	b.n	8001526 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800150c:	7bfc      	ldrb	r4, [r7, #15]
 800150e:	f7ff fe65 	bl	80011dc <SPI_RxByte>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	f104 0310 	add.w	r3, r4, #16
 800151a:	443b      	add	r3, r7
 800151c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d9ef      	bls.n	800150c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800152c:	7abb      	ldrb	r3, [r7, #10]
 800152e:	2b01      	cmp	r3, #1
 8001530:	f040 8083 	bne.w	800163a <SD_disk_initialize+0x192>
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	2baa      	cmp	r3, #170	; 0xaa
 8001538:	d17f      	bne.n	800163a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800153a:	2100      	movs	r1, #0
 800153c:	2077      	movs	r0, #119	; 0x77
 800153e:	f7ff ff5e 	bl	80013fe <SD_SendCmd>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	d807      	bhi.n	8001558 <SD_disk_initialize+0xb0>
 8001548:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800154c:	2069      	movs	r0, #105	; 0x69
 800154e:	f7ff ff56 	bl	80013fe <SD_SendCmd>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <SD_disk_initialize+0x1d0>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1eb      	bne.n	800153a <SD_disk_initialize+0x92>
 8001562:	e000      	b.n	8001566 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001564:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001566:	4b44      	ldr	r3, [pc, #272]	; (8001678 <SD_disk_initialize+0x1d0>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d064      	beq.n	800163a <SD_disk_initialize+0x192>
 8001570:	2100      	movs	r1, #0
 8001572:	207a      	movs	r0, #122	; 0x7a
 8001574:	f7ff ff43 	bl	80013fe <SD_SendCmd>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d15d      	bne.n	800163a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e00c      	b.n	800159e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001584:	7bfc      	ldrb	r4, [r7, #15]
 8001586:	f7ff fe29 	bl	80011dc <SPI_RxByte>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	f104 0310 	add.w	r3, r4, #16
 8001592:	443b      	add	r3, r7
 8001594:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	3301      	adds	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d9ef      	bls.n	8001584 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80015a4:	7a3b      	ldrb	r3, [r7, #8]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SD_disk_initialize+0x10a>
 80015ae:	230c      	movs	r3, #12
 80015b0:	e000      	b.n	80015b4 <SD_disk_initialize+0x10c>
 80015b2:	2304      	movs	r3, #4
 80015b4:	73bb      	strb	r3, [r7, #14]
 80015b6:	e040      	b.n	800163a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80015b8:	2100      	movs	r1, #0
 80015ba:	2077      	movs	r0, #119	; 0x77
 80015bc:	f7ff ff1f 	bl	80013fe <SD_SendCmd>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d808      	bhi.n	80015d8 <SD_disk_initialize+0x130>
 80015c6:	2100      	movs	r1, #0
 80015c8:	2069      	movs	r0, #105	; 0x69
 80015ca:	f7ff ff18 	bl	80013fe <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d801      	bhi.n	80015d8 <SD_disk_initialize+0x130>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e000      	b.n	80015da <SD_disk_initialize+0x132>
 80015d8:	2301      	movs	r3, #1
 80015da:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d10e      	bne.n	8001600 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80015e2:	2100      	movs	r1, #0
 80015e4:	2077      	movs	r0, #119	; 0x77
 80015e6:	f7ff ff0a 	bl	80013fe <SD_SendCmd>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d80e      	bhi.n	800160e <SD_disk_initialize+0x166>
 80015f0:	2100      	movs	r1, #0
 80015f2:	2069      	movs	r0, #105	; 0x69
 80015f4:	f7ff ff03 	bl	80013fe <SD_SendCmd>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <SD_disk_initialize+0x166>
 80015fe:	e00d      	b.n	800161c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001600:	2100      	movs	r1, #0
 8001602:	2041      	movs	r0, #65	; 0x41
 8001604:	f7ff fefb 	bl	80013fe <SD_SendCmd>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <SD_disk_initialize+0x1d0>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e1      	bne.n	80015dc <SD_disk_initialize+0x134>
 8001618:	e000      	b.n	800161c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800161a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <SD_disk_initialize+0x1d0>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <SD_disk_initialize+0x18e>
 8001626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162a:	2050      	movs	r0, #80	; 0x50
 800162c:	f7ff fee7 	bl	80013fe <SD_SendCmd>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_initialize+0x192>
 8001636:	2300      	movs	r3, #0
 8001638:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <SD_disk_initialize+0x1d4>)
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001640:	f7ff fd8a 	bl	8001158 <DESELECT>
	SPI_RxByte();
 8001644:	f7ff fdca 	bl	80011dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <SD_disk_initialize+0x1cc>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <SD_disk_initialize+0x1cc>)
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e001      	b.n	8001664 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001660:	f7ff fe42 	bl	80012e8 <SD_PowerOff>
	}

	return Stat;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <SD_disk_initialize+0x1cc>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	2000240e 	.word	0x2000240e
 800167c:	20000218 	.word	0x20000218

08001680 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SD_disk_status+0x14>
 8001690:	2301      	movs	r3, #1
 8001692:	e002      	b.n	800169a <SD_disk_status+0x1a>
	return Stat;
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SD_disk_status+0x28>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000

080016ac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <SD_disk_read+0x1c>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <SD_disk_read+0x20>
 80016c8:	2304      	movs	r3, #4
 80016ca:	e051      	b.n	8001770 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <SD_disk_read+0xcc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SD_disk_read+0x32>
 80016da:	2303      	movs	r3, #3
 80016dc:	e048      	b.n	8001770 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <SD_disk_read+0xd0>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <SD_disk_read+0x44>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	025b      	lsls	r3, r3, #9
 80016ee:	607b      	str	r3, [r7, #4]

	SELECT();
 80016f0:	f7ff fd24 	bl	800113c <SELECT>

	if (count == 1)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d111      	bne.n	800171e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	2051      	movs	r0, #81	; 0x51
 80016fe:	f7ff fe7e 	bl	80013fe <SD_SendCmd>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d129      	bne.n	800175c <SD_disk_read+0xb0>
 8001708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f7ff fe03 	bl	8001318 <SD_RxDataBlock>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d021      	beq.n	800175c <SD_disk_read+0xb0>
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	e01e      	b.n	800175c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	2052      	movs	r0, #82	; 0x52
 8001722:	f7ff fe6c 	bl	80013fe <SD_SendCmd>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d117      	bne.n	800175c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f7ff fdf1 	bl	8001318 <SD_RxDataBlock>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00a      	beq.n	8001752 <SD_disk_read+0xa6>
				buff += 512;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001742:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3b01      	subs	r3, #1
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ed      	bne.n	800172c <SD_disk_read+0x80>
 8001750:	e000      	b.n	8001754 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001752:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001754:	2100      	movs	r1, #0
 8001756:	204c      	movs	r0, #76	; 0x4c
 8001758:	f7ff fe51 	bl	80013fe <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800175c:	f7ff fcfc 	bl	8001158 <DESELECT>
	SPI_RxByte();
 8001760:	f7ff fd3c 	bl	80011dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf14      	ite	ne
 800176a:	2301      	movne	r3, #1
 800176c:	2300      	moveq	r3, #0
 800176e:	b2db      	uxtb	r3, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000218 	.word	0x20000218

08001780 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <SD_disk_write+0x1c>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <SD_disk_write+0x20>
 800179c:	2304      	movs	r3, #4
 800179e:	e06b      	b.n	8001878 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017a0:	4b37      	ldr	r3, [pc, #220]	; (8001880 <SD_disk_write+0x100>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SD_disk_write+0x32>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e062      	b.n	8001878 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <SD_disk_write+0x100>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SD_disk_write+0x44>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e059      	b.n	8001878 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <SD_disk_write+0x104>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <SD_disk_write+0x56>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	607b      	str	r3, [r7, #4]

	SELECT();
 80017d6:	f7ff fcb1 	bl	800113c <SELECT>

	if (count == 1)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d110      	bne.n	8001802 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	2058      	movs	r0, #88	; 0x58
 80017e4:	f7ff fe0b 	bl	80013fe <SD_SendCmd>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d13a      	bne.n	8001864 <SD_disk_write+0xe4>
 80017ee:	21fe      	movs	r1, #254	; 0xfe
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f7ff fdc1 	bl	8001378 <SD_TxDataBlock>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d033      	beq.n	8001864 <SD_disk_write+0xe4>
			count = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	e030      	b.n	8001864 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <SD_disk_write+0x104>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800180e:	2100      	movs	r1, #0
 8001810:	2077      	movs	r0, #119	; 0x77
 8001812:	f7ff fdf4 	bl	80013fe <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	2057      	movs	r0, #87	; 0x57
 800181a:	f7ff fdf0 	bl	80013fe <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	2059      	movs	r0, #89	; 0x59
 8001822:	f7ff fdec 	bl	80013fe <SD_SendCmd>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11b      	bne.n	8001864 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800182c:	21fc      	movs	r1, #252	; 0xfc
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f7ff fda2 	bl	8001378 <SD_TxDataBlock>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00a      	beq.n	8001850 <SD_disk_write+0xd0>
				buff += 512;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001840:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ee      	bne.n	800182c <SD_disk_write+0xac>
 800184e:	e000      	b.n	8001852 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001850:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001852:	21fd      	movs	r1, #253	; 0xfd
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fd8f 	bl	8001378 <SD_TxDataBlock>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <SD_disk_write+0xe4>
			{
				count = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001864:	f7ff fc78 	bl	8001158 <DESELECT>
	SPI_RxByte();
 8001868:	f7ff fcb8 	bl	80011dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	20000218 	.word	0x20000218

08001888 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b08b      	sub	sp, #44	; 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	603a      	str	r2, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	460b      	mov	r3, r1
 8001896:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SD_disk_ioctl+0x1e>
 80018a2:	2304      	movs	r3, #4
 80018a4:	e115      	b.n	8001ad2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d124      	bne.n	80018fc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d012      	beq.n	80018e0 <SD_disk_ioctl+0x58>
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	dc1a      	bgt.n	80018f4 <SD_disk_ioctl+0x6c>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <SD_disk_ioctl+0x40>
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d006      	beq.n	80018d4 <SD_disk_ioctl+0x4c>
 80018c6:	e015      	b.n	80018f4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80018c8:	f7ff fd0e 	bl	80012e8 <SD_PowerOff>
			res = RES_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018d2:	e0fc      	b.n	8001ace <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80018d4:	f7ff fcc6 	bl	8001264 <SD_PowerOn>
			res = RES_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018de:	e0f6      	b.n	8001ace <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	1c5c      	adds	r4, r3, #1
 80018e4:	f7ff fd0c 	bl	8001300 <SD_CheckPower>
 80018e8:	4603      	mov	r3, r0
 80018ea:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018f2:	e0ec      	b.n	8001ace <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80018f4:	2304      	movs	r3, #4
 80018f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018fa:	e0e8      	b.n	8001ace <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018fc:	4b77      	ldr	r3, [pc, #476]	; (8001adc <SD_disk_ioctl+0x254>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SD_disk_ioctl+0x86>
 800190a:	2303      	movs	r3, #3
 800190c:	e0e1      	b.n	8001ad2 <SD_disk_ioctl+0x24a>

		SELECT();
 800190e:	f7ff fc15 	bl	800113c <SELECT>

		switch (ctrl)
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	2b0d      	cmp	r3, #13
 8001916:	f200 80cb 	bhi.w	8001ab0 <SD_disk_ioctl+0x228>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <SD_disk_ioctl+0x98>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001a1b 	.word	0x08001a1b
 8001924:	08001959 	.word	0x08001959
 8001928:	08001a0b 	.word	0x08001a0b
 800192c:	08001ab1 	.word	0x08001ab1
 8001930:	08001ab1 	.word	0x08001ab1
 8001934:	08001ab1 	.word	0x08001ab1
 8001938:	08001ab1 	.word	0x08001ab1
 800193c:	08001ab1 	.word	0x08001ab1
 8001940:	08001ab1 	.word	0x08001ab1
 8001944:	08001ab1 	.word	0x08001ab1
 8001948:	08001ab1 	.word	0x08001ab1
 800194c:	08001a2d 	.word	0x08001a2d
 8001950:	08001a51 	.word	0x08001a51
 8001954:	08001a75 	.word	0x08001a75
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001958:	2100      	movs	r1, #0
 800195a:	2049      	movs	r0, #73	; 0x49
 800195c:	f7ff fd4f 	bl	80013fe <SD_SendCmd>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 80a8 	bne.w	8001ab8 <SD_disk_ioctl+0x230>
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2110      	movs	r1, #16
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fcd2 	bl	8001318 <SD_RxDataBlock>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 809e 	beq.w	8001ab8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800197c:	7b3b      	ldrb	r3, [r7, #12]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10e      	bne.n	80019a4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001986:	7d7b      	ldrb	r3, [r7, #21]
 8001988:	b29a      	uxth	r2, r3
 800198a:	7d3b      	ldrb	r3, [r7, #20]
 800198c:	b29b      	uxth	r3, r3
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	4413      	add	r3, r2
 8001994:	b29b      	uxth	r3, r3
 8001996:	3301      	adds	r3, #1
 8001998:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800199a:	8bfb      	ldrh	r3, [r7, #30]
 800199c:	029a      	lsls	r2, r3, #10
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e02e      	b.n	8001a02 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80019a4:	7c7b      	ldrb	r3, [r7, #17]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	7dbb      	ldrb	r3, [r7, #22]
 80019ae:	09db      	lsrs	r3, r3, #7
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	7d7b      	ldrb	r3, [r7, #21]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f003 0306 	and.w	r3, r3, #6
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	3302      	adds	r3, #2
 80019c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80019cc:	7d3b      	ldrb	r3, [r7, #20]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	7cfb      	ldrb	r3, [r7, #19]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b29a      	uxth	r2, r3
 80019e0:	7cbb      	ldrb	r3, [r7, #18]
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80019f4:	8bfa      	ldrh	r2, [r7, #30]
 80019f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019fa:	3b09      	subs	r3, #9
 80019fc:	409a      	lsls	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001a08:	e056      	b.n	8001ab8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a10:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a18:	e055      	b.n	8001ac6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001a1a:	f7ff fc09 	bl	8001230 <SD_ReadyWait>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d14b      	bne.n	8001abc <SD_disk_ioctl+0x234>
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a2a:	e047      	b.n	8001abc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2049      	movs	r0, #73	; 0x49
 8001a30:	f7ff fce5 	bl	80013fe <SD_SendCmd>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d142      	bne.n	8001ac0 <SD_disk_ioctl+0x238>
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	6a38      	ldr	r0, [r7, #32]
 8001a3e:	f7ff fc6b 	bl	8001318 <SD_RxDataBlock>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03b      	beq.n	8001ac0 <SD_disk_ioctl+0x238>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a4e:	e037      	b.n	8001ac0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a50:	2100      	movs	r1, #0
 8001a52:	204a      	movs	r0, #74	; 0x4a
 8001a54:	f7ff fcd3 	bl	80013fe <SD_SendCmd>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d132      	bne.n	8001ac4 <SD_disk_ioctl+0x23c>
 8001a5e:	2110      	movs	r1, #16
 8001a60:	6a38      	ldr	r0, [r7, #32]
 8001a62:	f7ff fc59 	bl	8001318 <SD_RxDataBlock>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d02b      	beq.n	8001ac4 <SD_disk_ioctl+0x23c>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a72:	e027      	b.n	8001ac4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001a74:	2100      	movs	r1, #0
 8001a76:	207a      	movs	r0, #122	; 0x7a
 8001a78:	f7ff fcc1 	bl	80013fe <SD_SendCmd>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a88:	e00b      	b.n	8001aa2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001a8a:	6a3c      	ldr	r4, [r7, #32]
 8001a8c:	1c63      	adds	r3, r4, #1
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	f7ff fba4 	bl	80011dc <SPI_RxByte>
 8001a94:	4603      	mov	r3, r0
 8001a96:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001a98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d9ef      	bls.n	8001a8a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ab6:	e006      	b.n	8001ac6 <SD_disk_ioctl+0x23e>
			break;
 8001ab8:	bf00      	nop
 8001aba:	e004      	b.n	8001ac6 <SD_disk_ioctl+0x23e>
			break;
 8001abc:	bf00      	nop
 8001abe:	e002      	b.n	8001ac6 <SD_disk_ioctl+0x23e>
			break;
 8001ac0:	bf00      	nop
 8001ac2:	e000      	b.n	8001ac6 <SD_disk_ioctl+0x23e>
			break;
 8001ac4:	bf00      	nop
		}

		DESELECT();
 8001ac6:	f7ff fb47 	bl	8001158 <DESELECT>
		SPI_RxByte();
 8001aca:	f7ff fb87 	bl	80011dc <SPI_RxByte>
	}

	return res;
 8001ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	372c      	adds	r7, #44	; 0x2c
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd90      	pop	{r4, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ae8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001aec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001af8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001afc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001b00:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001b08:	e000      	b.n	8001b0c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001b0a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001b0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f9      	beq.n	8001b0a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001b16:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	int i=0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001b3a:	e002      	b.n	8001b42 <bufsize+0x14>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f6      	bne.n	8001b3c <bufsize+0xe>
	return i;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b60:	f000 fc86 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b64:	f000 f896 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b68:	f000 f9c6 	bl	8001ef8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b6c:	f000 f904 	bl	8001d78 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001b70:	f002 fe30 	bl	80047d4 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001b74:	f000 f936 	bl	8001de4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b78:	f000 f96c 	bl	8001e54 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (500);
 8001b7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b80:	f000 fce8 	bl	8002554 <HAL_Delay>

    fresult = f_mount(&fs, "/", 1);
 8001b84:	2201      	movs	r2, #1
 8001b86:	4936      	ldr	r1, [pc, #216]	; (8001c60 <main+0x104>)
 8001b88:	4836      	ldr	r0, [pc, #216]	; (8001c64 <main+0x108>)
 8001b8a:	f005 f86d 	bl	8006c68 <f_mount>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <main+0x10c>)
 8001b94:	701a      	strb	r2, [r3, #0]
    	if (fresult != FR_OK) printf ("ERROR!!! in mounting SD CARD...\n\n");
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <main+0x10c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <main+0x4a>
 8001b9e:	4833      	ldr	r0, [pc, #204]	; (8001c6c <main+0x110>)
 8001ba0:	f006 ff10 	bl	80089c4 <puts>
 8001ba4:	e002      	b.n	8001bac <main+0x50>
    	else printf("SD CARD mounted successfully...\n\n");
 8001ba6:	4832      	ldr	r0, [pc, #200]	; (8001c70 <main+0x114>)
 8001ba8:	f006 ff0c 	bl	80089c4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temperature=Max6675_Read_Temp();
 8001bac:	f7ff fa44 	bl	8001038 <Max6675_Read_Temp>
 8001bb0:	eef0 7a40 	vmov.f32	s15, s0
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <main+0x118>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]

	  fresult = f_mount(&fs, "/", 1);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4928      	ldr	r1, [pc, #160]	; (8001c60 <main+0x104>)
 8001bbe:	4829      	ldr	r0, [pc, #164]	; (8001c64 <main+0x108>)
 8001bc0:	f005 f852 	bl	8006c68 <f_mount>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <main+0x10c>)
 8001bca:	701a      	strb	r2, [r3, #0]
	      	if (fresult != FR_OK) printf ("ERROR!!! in mounting SD CARD...\n\n");
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <main+0x10c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <main+0x80>
 8001bd4:	4825      	ldr	r0, [pc, #148]	; (8001c6c <main+0x110>)
 8001bd6:	f006 fef5 	bl	80089c4 <puts>
 8001bda:	e002      	b.n	8001be2 <main+0x86>
	      	else printf("SD CARD mounted successfully...\n\n");
 8001bdc:	4824      	ldr	r0, [pc, #144]	; (8001c70 <main+0x114>)
 8001bde:	f006 fef1 	bl	80089c4 <puts>

	  /* Create file with read write access and open it */
	      	  	fresult = f_open(&fil, "Motor_Temp_Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001be2:	220a      	movs	r2, #10
 8001be4:	4924      	ldr	r1, [pc, #144]	; (8001c78 <main+0x11c>)
 8001be6:	4825      	ldr	r0, [pc, #148]	; (8001c7c <main+0x120>)
 8001be8:	f005 f884 	bl	8006cf4 <f_open>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <main+0x10c>)
 8001bf2:	701a      	strb	r2, [r3, #0]

	      	  	/* Writing text */
	      	  	sprintf(buffer, "%f\n",temperature);
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <main+0x118>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcc5 	bl	8000588 <__aeabi_f2d>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	491f      	ldr	r1, [pc, #124]	; (8001c80 <main+0x124>)
 8001c04:	481f      	ldr	r0, [pc, #124]	; (8001c84 <main+0x128>)
 8001c06:	f006 feeb 	bl	80089e0 <siprintf>

	      	  	f_lseek(&fil, writepos);
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <main+0x12c>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481a      	ldr	r0, [pc, #104]	; (8001c7c <main+0x120>)
 8001c12:	f005 fc77 	bl	8007504 <f_lseek>
	      	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001c16:	481b      	ldr	r0, [pc, #108]	; (8001c84 <main+0x128>)
 8001c18:	f7ff ff89 	bl	8001b2e <bufsize>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <main+0x130>)
 8001c22:	4918      	ldr	r1, [pc, #96]	; (8001c84 <main+0x128>)
 8001c24:	4815      	ldr	r0, [pc, #84]	; (8001c7c <main+0x120>)
 8001c26:	f005 fa31 	bl	800708c <f_write>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <main+0x10c>)
 8001c30:	701a      	strb	r2, [r3, #0]
	      	  	writepos+=sizeof(buffer);
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <main+0x12c>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	3380      	adds	r3, #128	; 0x80
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <main+0x12c>)
 8001c3c:	801a      	strh	r2, [r3, #0]

	      	  	printf ("File2.txt created and data is written\n");
 8001c3e:	4814      	ldr	r0, [pc, #80]	; (8001c90 <main+0x134>)
 8001c40:	f006 fec0 	bl	80089c4 <puts>

	      	  	/* Close file */
	      	  	f_close(&fil);
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <main+0x120>)
 8001c46:	f005 fc33 	bl	80074b0 <f_close>
	      	  fresult = f_mount(&fs, "/", 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4904      	ldr	r1, [pc, #16]	; (8001c60 <main+0x104>)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <main+0x108>)
 8001c50:	f005 f80a 	bl	8006c68 <f_mount>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <main+0x10c>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	  temperature=Max6675_Read_Temp();
 8001c5c:	e7a6      	b.n	8001bac <main+0x50>
 8001c5e:	bf00      	nop
 8001c60:	0800c5d0 	.word	0x0800c5d0
 8001c64:	2000031c 	.word	0x2000031c
 8001c68:	20002384 	.word	0x20002384
 8001c6c:	0800c5d4 	.word	0x0800c5d4
 8001c70:	0800c5f8 	.word	0x0800c5f8
 8001c74:	20000314 	.word	0x20000314
 8001c78:	0800c61c 	.word	0x0800c61c
 8001c7c:	20001354 	.word	0x20001354
 8001c80:	0800c630 	.word	0x0800c630
 8001c84:	2000238c 	.word	0x2000238c
 8001c88:	2000031a 	.word	0x2000031a
 8001c8c:	20002388 	.word	0x20002388
 8001c90:	0800c634 	.word	0x0800c634

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	; 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	2234      	movs	r2, #52	; 0x34
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f005 ff9e 	bl	8007be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <SystemClock_Config+0xdc>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <SystemClock_Config+0xdc>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <SystemClock_Config+0xdc>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <SystemClock_Config+0xe0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <SystemClock_Config+0xe0>)
 8001cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <SystemClock_Config+0xe0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001d04:	230f      	movs	r3, #15
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001d08:	23d8      	movs	r3, #216	; 0xd8
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 f9dd 	bl	80030dc <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d28:	f000 f960 	bl	8001fec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d2c:	f000 fef6 	bl	8002b1c <HAL_PWREx_EnableOverDrive>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d36:	f000 f959 	bl	8001fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001d46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	2105      	movs	r1, #5
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 ff2f 	bl	8002bbc <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d64:	f000 f942 	bl	8001fec <Error_Handler>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3750      	adds	r7, #80	; 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <MX_SPI1_Init+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dac:	2208      	movs	r2, #8
 8001dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dca:	f001 fc25 	bl	8003618 <HAL_SPI_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dd4:	f000 f90a 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000021c 	.word	0x2000021c
 8001de0:	40013000 	.word	0x40013000

08001de4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <MX_SPI2_Init+0x6c>)
 8001dec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e32:	220a      	movs	r2, #10
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001e38:	f001 fbee 	bl	8003618 <HAL_SPI_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001e42:	f000 f8d3 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000274 	.word	0x20000274
 8001e50:	40003800 	.word	0x40003800

08001e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001e72:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <MX_TIM1_Init+0xa0>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001e78:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ea0:	4813      	ldr	r0, [pc, #76]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001ea2:	f002 f961 	bl	8004168 <HAL_TIM_Base_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001eac:	f000 f89e 	bl	8001fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001ebe:	f002 fa0b 	bl	80042d8 <HAL_TIM_ConfigClockSource>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ec8:	f000 f890 	bl	8001fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_TIM1_Init+0x9c>)
 8001eda:	f002 fbff 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ee4:	f000 f882 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200002cc 	.word	0x200002cc
 8001ef4:	40010000 	.word	0x40010000

08001ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_GPIO_Init+0xb4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|MT_CS_Pin, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2130      	movs	r1, #48	; 0x30
 8001f82:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <MX_GPIO_Init+0xb8>)
 8001f84:	f000 fdb0 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin MT_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|MT_CS_Pin;
 8001f88:	2330      	movs	r3, #48	; 0x30
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_GPIO_Init+0xb8>)
 8001fa0:	f000 fc0e 	bl	80027c0 <HAL_GPIO_Init>

}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020800 	.word	0x40020800

08001fb4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e009      	b.n	8001fda <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fd86 	bl	8001ae0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dbf1      	blt.n	8001fc6 <_write+0x12>
	}
	return len;
 8001fe2:	687b      	ldr	r3, [r7, #4]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff0:	b672      	cpsid	i
}
 8001ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <Error_Handler+0x8>
	...

08001ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_MspInit+0x58>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_MspInit+0x58>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_MspInit+0x58>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_MspInit+0x58>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <HAL_MspInit+0x58>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_MspInit+0x58>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2005      	movs	r0, #5
 800203c:	f000 fb89 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002040:	2005      	movs	r0, #5
 8002042:	f000 fba2 	bl	800278a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a41      	ldr	r2, [pc, #260]	; (8002178 <HAL_SPI_MspInit+0x124>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12c      	bne.n	80020d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_SPI_MspInit+0x128>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a3f      	ldr	r2, [pc, #252]	; (800217c <HAL_SPI_MspInit+0x128>)
 8002080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_SPI_MspInit+0x128>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_SPI_MspInit+0x128>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a38      	ldr	r2, [pc, #224]	; (800217c <HAL_SPI_MspInit+0x128>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_SPI_MspInit+0x128>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	23e0      	movs	r3, #224	; 0xe0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020be:	2305      	movs	r3, #5
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	482d      	ldr	r0, [pc, #180]	; (8002180 <HAL_SPI_MspInit+0x12c>)
 80020ca:	f000 fb79 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020ce:	e04f      	b.n	8002170 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_SPI_MspInit+0x130>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d14a      	bne.n	8002170 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_SPI_MspInit+0x128>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a26      	ldr	r2, [pc, #152]	; (800217c <HAL_SPI_MspInit+0x128>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_SPI_MspInit+0x128>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_SPI_MspInit+0x128>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_SPI_MspInit+0x128>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_SPI_MspInit+0x128>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_SPI_MspInit+0x128>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <HAL_SPI_MspInit+0x128>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_SPI_MspInit+0x128>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800212e:	2304      	movs	r3, #4
 8002130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800213e:	2305      	movs	r3, #5
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <HAL_SPI_MspInit+0x134>)
 800214a:	f000 fb39 	bl	80027c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002160:	2305      	movs	r3, #5
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	4808      	ldr	r0, [pc, #32]	; (800218c <HAL_SPI_MspInit+0x138>)
 800216c:	f000 fb28 	bl	80027c0 <HAL_GPIO_Init>
}
 8002170:	bf00      	nop
 8002172:	3730      	adds	r7, #48	; 0x30
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40013000 	.word	0x40013000
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000
 8002184:	40003800 	.word	0x40003800
 8002188:	40020800 	.word	0x40020800
 800218c:	40020400 	.word	0x40020400

08002190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_TIM_Base_MspInit+0x3c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_TIM_Base_MspInit+0x40>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_TIM_Base_MspInit+0x40>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_TIM_Base_MspInit+0x40>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40023800 	.word	0x40023800

080021d4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <SDTimer_Handler+0x40>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <SDTimer_Handler+0x1c>
    Timer1--;
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <SDTimer_Handler+0x40>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <SDTimer_Handler+0x40>)
 80021ee:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <SDTimer_Handler+0x44>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <SDTimer_Handler+0x34>
    Timer2--;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <SDTimer_Handler+0x44>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SDTimer_Handler+0x44>)
 8002206:	801a      	strh	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000240e 	.word	0x2000240e
 8002218:	20002410 	.word	0x20002410

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <SysTick_Handler+0x30>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3301      	adds	r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <SysTick_Handler+0x30>)
 8002274:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <SysTick_Handler+0x30>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b09      	cmp	r3, #9
 800227e:	d904      	bls.n	800228a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SysTick_Handler+0x30>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002286:	f7ff ffa5 	bl	80021d4 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228a:	f000 f943 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000240c 	.word	0x2000240c

08002298 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
	return 1;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_kill>:

int _kill(int pid, int sig)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022c0:	f005 fc66 	bl	8007b90 <__errno>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2216      	movs	r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
	return -1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_exit>:

void _exit (int status)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022de:	f04f 31ff 	mov.w	r1, #4294967295
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffe7 	bl	80022b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022e8:	e7fe      	b.n	80022e8 <_exit+0x12>

080022ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e00a      	b.n	8002312 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022fc:	f3af 8000 	nop.w
 8002300:	4601      	mov	r1, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	60ba      	str	r2, [r7, #8]
 8002308:	b2ca      	uxtb	r2, r1
 800230a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	dbf0      	blt.n	80022fc <_read+0x12>
	}

return len;
 800231a:	687b      	ldr	r3, [r7, #4]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234c:	605a      	str	r2, [r3, #4]
	return 0;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_isatty>:

int _isatty(int file)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	return 1;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
	return 0;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f005 fbe8 	bl	8007b90 <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20020000 	.word	0x20020000
 80023ec:	00000400 	.word	0x00000400
 80023f0:	20002414 	.word	0x20002414
 80023f4:	20002668 	.word	0x20002668

080023f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002422:	490e      	ldr	r1, [pc, #56]	; (800245c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002438:	4c0b      	ldr	r4, [pc, #44]	; (8002468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002446:	f7ff ffd7 	bl	80023f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f005 fba7 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7ff fb85 	bl	8001b5c <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002460:	0800cfb4 	.word	0x0800cfb4
  ldr r2, =_sbss
 8002464:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002468:	20002668 	.word	0x20002668

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f94f 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	200f      	movs	r0, #15
 80024a0:	f000 f808 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fda8 	bl	8001ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x54>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_InitTick+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f967 	bl	80027a6 <HAL_SYSTICK_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00e      	b.n	8002500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d80a      	bhi.n	80024fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f000 f92f 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_InitTick+0x5c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000004 	.word	0x20000004
 800250c:	2000000c 	.word	0x2000000c
 8002510:	20000008 	.word	0x20000008

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2000000c 	.word	0x2000000c
 8002538:	20002418 	.word	0x20002418

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20002418 	.word	0x20002418

08002554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff ffee 	bl	800253c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d005      	beq.n	800257a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_Delay+0x44>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257a:	bf00      	nop
 800257c:	f7ff ffde 	bl	800253c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f7      	bhi.n	800257c <HAL_Delay+0x28>
  {
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000000c 	.word	0x2000000c

0800259c <__NVIC_SetPriorityGrouping>:
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff29 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff3e 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff8e 	bl	8002690 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5d 	bl	800263c <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff31 	bl	8002600 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa2 	bl	80026f8 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e165      	b.n	8002aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 8154 	bne.w	8002aa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280e:	2b02      	cmp	r3, #2
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d017      	beq.n	80028b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d123      	bne.n	8002904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80ae 	beq.w	8002aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_GPIO_Init+0x300>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a5c      	ldr	r2, [pc, #368]	; (8002ac0 <HAL_GPIO_Init+0x300>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <HAL_GPIO_Init+0x300>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002962:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4f      	ldr	r2, [pc, #316]	; (8002ac8 <HAL_GPIO_Init+0x308>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_Init+0x21a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <HAL_GPIO_Init+0x30c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x216>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4d      	ldr	r2, [pc, #308]	; (8002ad0 <HAL_GPIO_Init+0x310>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x212>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4c      	ldr	r2, [pc, #304]	; (8002ad4 <HAL_GPIO_Init+0x314>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x20e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4b      	ldr	r2, [pc, #300]	; (8002ad8 <HAL_GPIO_Init+0x318>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x20a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4a      	ldr	r2, [pc, #296]	; (8002adc <HAL_GPIO_Init+0x31c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x206>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a49      	ldr	r2, [pc, #292]	; (8002ae0 <HAL_GPIO_Init+0x320>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x202>
 80029be:	2306      	movs	r3, #6
 80029c0:	e00c      	b.n	80029dc <HAL_GPIO_Init+0x21c>
 80029c2:	2307      	movs	r3, #7
 80029c4:	e00a      	b.n	80029dc <HAL_GPIO_Init+0x21c>
 80029c6:	2305      	movs	r3, #5
 80029c8:	e008      	b.n	80029dc <HAL_GPIO_Init+0x21c>
 80029ca:	2304      	movs	r3, #4
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x21c>
 80029ce:	2303      	movs	r3, #3
 80029d0:	e004      	b.n	80029dc <HAL_GPIO_Init+0x21c>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_Init+0x21c>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x21c>
 80029da:	2300      	movs	r3, #0
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f002 0203 	and.w	r2, r2, #3
 80029e2:	0092      	lsls	r2, r2, #2
 80029e4:	4093      	lsls	r3, r2
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ec:	4935      	ldr	r1, [pc, #212]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029fa:	4b3a      	ldr	r3, [pc, #232]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1e:	4a31      	ldr	r2, [pc, #196]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a24:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a48:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4e:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9c:	4a11      	ldr	r2, [pc, #68]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	f67f ae96 	bls.w	80027dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40021400 	.word	0x40021400
 8002ae0:	40021800 	.word	0x40021800
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b04:	e003      	b.n	8002b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	041a      	lsls	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b48:	f7ff fcf8 	bl	800253c <HAL_GetTick>
 8002b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b4e:	e009      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b50:	f7ff fcf4 	bl	800253c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b5e:	d901      	bls.n	8002b64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e01f      	b.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d1ee      	bne.n	8002b50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b78:	f7ff fce0 	bl	800253c <HAL_GetTick>
 8002b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b7e:	e009      	b.n	8002b94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b80:	f7ff fcdc 	bl	800253c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b8e:	d901      	bls.n	8002b94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e007      	b.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	420e0040 	.word	0x420e0040
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	420e0044 	.word	0x420e0044

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0cc      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d90c      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d044      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e067      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7ff fc46 	bl	800253c <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7ff fc42 	bl	800253c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20c      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fba6 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	0800c6a4 	.word	0x0800c6a4
 8002d80:	20000004 	.word	0x20000004
 8002d84:	20000008 	.word	0x20000008

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b0a6      	sub	sp, #152	; 0x98
 8002d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dae:	4bc8      	ldr	r3, [pc, #800]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	f200 817e 	bhi.w	80030b8 <HAL_RCC_GetSysClockFreq+0x330>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002df9 	.word	0x08002df9
 8002dc8:	080030b9 	.word	0x080030b9
 8002dcc:	080030b9 	.word	0x080030b9
 8002dd0:	080030b9 	.word	0x080030b9
 8002dd4:	08002e01 	.word	0x08002e01
 8002dd8:	080030b9 	.word	0x080030b9
 8002ddc:	080030b9 	.word	0x080030b9
 8002de0:	080030b9 	.word	0x080030b9
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	080030b9 	.word	0x080030b9
 8002dec:	080030b9 	.word	0x080030b9
 8002df0:	080030b9 	.word	0x080030b9
 8002df4:	08002f73 	.word	0x08002f73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4bb6      	ldr	r3, [pc, #728]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002dfe:	e15f      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e00:	4bb5      	ldr	r3, [pc, #724]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e06:	e15b      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e08:	4bb1      	ldr	r3, [pc, #708]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e14:	4bae      	ldr	r3, [pc, #696]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d031      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e20:	4bab      	ldr	r3, [pc, #684]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	2200      	movs	r2, #0
 8002e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	663b      	str	r3, [r7, #96]	; 0x60
 8002e34:	2300      	movs	r3, #0
 8002e36:	667b      	str	r3, [r7, #100]	; 0x64
 8002e38:	4ba7      	ldr	r3, [pc, #668]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e3a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e3e:	462a      	mov	r2, r5
 8002e40:	fb03 f202 	mul.w	r2, r3, r2
 8002e44:	2300      	movs	r3, #0
 8002e46:	4621      	mov	r1, r4
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4aa2      	ldr	r2, [pc, #648]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e50:	4621      	mov	r1, r4
 8002e52:	fba1 1202 	umull	r1, r2, r1, r2
 8002e56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e58:	460a      	mov	r2, r1
 8002e5a:	67ba      	str	r2, [r7, #120]	; 0x78
 8002e5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e5e:	4413      	add	r3, r2
 8002e60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e66:	2200      	movs	r2, #0
 8002e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e70:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002e74:	f7fd ff28 	bl	8000cc8 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e82:	e064      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e84:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
 8002e8e:	657a      	str	r2, [r7, #84]	; 0x54
 8002e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e98:	2300      	movs	r3, #0
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	0159      	lsls	r1, r3, #5
 8002eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb2:	0150      	lsls	r0, r2, #5
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4621      	mov	r1, r4
 8002eba:	1a51      	subs	r1, r2, r1
 8002ebc:	6139      	str	r1, [r7, #16]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed2:	4659      	mov	r1, fp
 8002ed4:	018b      	lsls	r3, r1, #6
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002edc:	4651      	mov	r1, sl
 8002ede:	018a      	lsls	r2, r1, #6
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee6:	4659      	mov	r1, fp
 8002ee8:	eb63 0901 	sbc.w	r9, r3, r1
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f00:	4690      	mov	r8, r2
 8002f02:	4699      	mov	r9, r3
 8002f04:	4623      	mov	r3, r4
 8002f06:	eb18 0303 	adds.w	r3, r8, r3
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	eb49 0303 	adc.w	r3, r9, r3
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f20:	4629      	mov	r1, r5
 8002f22:	028b      	lsls	r3, r1, #10
 8002f24:	4621      	mov	r1, r4
 8002f26:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	028a      	lsls	r2, r1, #10
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f36:	2200      	movs	r2, #0
 8002f38:	643b      	str	r3, [r7, #64]	; 0x40
 8002f3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002f3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f40:	f7fd fec2 	bl	8000cc8 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f4e:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0c1b      	lsrs	r3, r3, #16
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002f60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002f70:	e0a6      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f72:	4b57      	ldr	r3, [pc, #348]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7e:	4b54      	ldr	r3, [pc, #336]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02a      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8a:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	2200      	movs	r2, #0
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fa0:	fb03 f201 	mul.w	r2, r3, r1
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	4a4a      	ldr	r2, [pc, #296]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fae:	fba0 1202 	umull	r1, r2, r0, r2
 8002fb2:	677a      	str	r2, [r7, #116]	; 0x74
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	673a      	str	r2, [r7, #112]	; 0x70
 8002fb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fba:	4413      	add	r3, r2
 8002fbc:	677b      	str	r3, [r7, #116]	; 0x74
 8002fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc6:	637a      	str	r2, [r7, #52]	; 0x34
 8002fc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fcc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002fd0:	f7fd fe7a 	bl	8000cc8 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fde:	e05b      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	0159      	lsls	r1, r3, #5
 800300a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300e:	0150      	lsls	r0, r2, #5
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4641      	mov	r1, r8
 8003016:	ebb2 0a01 	subs.w	sl, r2, r1
 800301a:	4649      	mov	r1, r9
 800301c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800302c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003034:	ebb2 040a 	subs.w	r4, r2, sl
 8003038:	eb63 050b 	sbc.w	r5, r3, fp
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	00eb      	lsls	r3, r5, #3
 8003046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	4614      	mov	r4, r2
 800304e:	461d      	mov	r5, r3
 8003050:	4643      	mov	r3, r8
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	464b      	mov	r3, r9
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003080:	2200      	movs	r2, #0
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	61fa      	str	r2, [r7, #28]
 8003086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308a:	f7fd fe1d 	bl	8000cc8 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4613      	mov	r3, r2
 8003094:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0f1b      	lsrs	r3, r3, #28
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80030a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80030b6:	e003      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80030ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80030be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3798      	adds	r7, #152	; 0x98
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	017d7840 	.word	0x017d7840

080030dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e28d      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8083 	beq.w	8003202 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030fc:	4b94      	ldr	r3, [pc, #592]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d019      	beq.n	800313c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003108:	4b91      	ldr	r3, [pc, #580]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003110:	2b08      	cmp	r3, #8
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003114:	4b8e      	ldr	r3, [pc, #568]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d00c      	beq.n	800313c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d112      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4b84      	ldr	r3, [pc, #528]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05b      	beq.n	8003200 <HAL_RCC_OscConfig+0x124>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d157      	bne.n	8003200 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e25a      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x90>
 800315e:	4b7c      	ldr	r3, [pc, #496]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7b      	ldr	r2, [pc, #492]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0xb4>
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a75      	ldr	r2, [pc, #468]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a72      	ldr	r2, [pc, #456]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6b      	ldr	r2, [pc, #428]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7ff f9c4 	bl	800253c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7ff f9c0 	bl	800253c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e21f      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b61      	ldr	r3, [pc, #388]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xdc>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7ff f9b0 	bl	800253c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e0:	f7ff f9ac 	bl	800253c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e20b      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x104>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06f      	beq.n	80032ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800320e:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d017      	beq.n	800324a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d105      	bne.n	8003232 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d11c      	bne.n	8003278 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x186>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1d3      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4937      	ldr	r1, [pc, #220]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	e03a      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_OscConfig+0x278>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7ff f959 	bl	800253c <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328e:	f7ff f955 	bl	800253c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e1b4      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4925      	ldr	r1, [pc, #148]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x278>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7ff f938 	bl	800253c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d0:	f7ff f934 	bl	800253c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e193      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d036      	beq.n	8003368 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_RCC_OscConfig+0x27c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7ff f918 	bl	800253c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003310:	f7ff f914 	bl	800253c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e173      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x234>
 800332e:	e01b      	b.n	8003368 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x27c>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7ff f901 	bl	800253c <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	e00e      	b.n	800335c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333e:	f7ff f8fd 	bl	800253c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d907      	bls.n	800335c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e15c      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
 8003350:	40023800 	.word	0x40023800
 8003354:	42470000 	.word	0x42470000
 8003358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b8a      	ldr	r3, [pc, #552]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ea      	bne.n	800333e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8097 	beq.w	80034a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b83      	ldr	r3, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b7c      	ldr	r3, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b79      	ldr	r3, [pc, #484]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7ff f8bd 	bl	800253c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7ff f8b9 	bl	800253c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e118      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x31e>
 80033ec:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	e01c      	b.n	8003434 <HAL_RCC_OscConfig+0x358>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x340>
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a60      	ldr	r2, [pc, #384]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a5d      	ldr	r2, [pc, #372]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6713      	str	r3, [r2, #112]	; 0x70
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0x358>
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a56      	ldr	r2, [pc, #344]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7ff f87e 	bl	800253c <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7ff f87a 	bl	800253c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0d7      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345a:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ee      	beq.n	8003444 <HAL_RCC_OscConfig+0x368>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7ff f868 	bl	800253c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7ff f864 	bl	800253c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0c1      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003486:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1ee      	bne.n	8003470 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003498:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80ad 	beq.w	8003608 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d060      	beq.n	800357c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d145      	bne.n	800354e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7ff f838 	bl	800253c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7ff f834 	bl	800253c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e093      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	491b      	ldr	r1, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7ff f809 	bl	800253c <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352e:	f7ff f805 	bl	800253c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e064      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x452>
 800354c:	e05c      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fff2 	bl	800253c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe ffee 	bl	800253c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e04d      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x480>
 800357a:	e045      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e040      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
 8003588:	40023800 	.word	0x40023800
 800358c:	40007000 	.word	0x40007000
 8003590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <HAL_RCC_OscConfig+0x538>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d030      	beq.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d129      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d122      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d119      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d10f      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e07b      	b.n	8003722 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363a:	d009      	beq.n	8003650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
 8003642:	e005      	b.n	8003650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe fcf2 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	ea42 0103 	orr.w	r1, r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0104 	and.w	r1, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f003 0210 	and.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b088      	sub	sp, #32
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_SPI_Transmit+0x22>
 8003748:	2302      	movs	r3, #2
 800374a:	e126      	b.n	800399a <HAL_SPI_Transmit+0x270>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003754:	f7fe fef2 	bl	800253c <HAL_GetTick>
 8003758:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d002      	beq.n	8003770 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800376a:	2302      	movs	r3, #2
 800376c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800376e:	e10b      	b.n	8003988 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_Transmit+0x52>
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003780:	e102      	b.n	8003988 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2203      	movs	r2, #3
 8003786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	d10f      	bne.n	80037ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d007      	beq.n	8003808 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003810:	d14b      	bne.n	80038aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_SPI_Transmit+0xf6>
 800381a:	8afb      	ldrh	r3, [r7, #22]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d13e      	bne.n	800389e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	881a      	ldrh	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	1c9a      	adds	r2, r3, #2
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003844:	e02b      	b.n	800389e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d112      	bne.n	800387a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	86da      	strh	r2, [r3, #54]	; 0x36
 8003878:	e011      	b.n	800389e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800387a:	f7fe fe5f 	bl	800253c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d803      	bhi.n	8003892 <HAL_SPI_Transmit+0x168>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d102      	bne.n	8003898 <HAL_SPI_Transmit+0x16e>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800389c:	e074      	b.n	8003988 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ce      	bne.n	8003846 <HAL_SPI_Transmit+0x11c>
 80038a8:	e04c      	b.n	8003944 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_SPI_Transmit+0x18e>
 80038b2:	8afb      	ldrh	r3, [r7, #22]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d140      	bne.n	800393a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038de:	e02c      	b.n	800393a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d113      	bne.n	8003916 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	86da      	strh	r2, [r3, #54]	; 0x36
 8003914:	e011      	b.n	800393a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003916:	f7fe fe11 	bl	800253c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d803      	bhi.n	800392e <HAL_SPI_Transmit+0x204>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d102      	bne.n	8003934 <HAL_SPI_Transmit+0x20a>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003938:	e026      	b.n	8003988 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1cd      	bne.n	80038e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fbcb 	bl	80040e4 <SPI_EndRxTxTransaction>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e000      	b.n	8003988 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003998:	7ffb      	ldrb	r3, [r7, #31]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af02      	add	r7, sp, #8
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039be:	d112      	bne.n	80039e6 <HAL_SPI_Receive+0x44>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10e      	bne.n	80039e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2204      	movs	r2, #4
 80039cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f8f1 	bl	8003bc4 <HAL_SPI_TransmitReceive>
 80039e2:	4603      	mov	r3, r0
 80039e4:	e0ea      	b.n	8003bbc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_SPI_Receive+0x52>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0e3      	b.n	8003bbc <HAL_SPI_Receive+0x21a>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039fc:	f7fe fd9e 	bl	800253c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a12:	e0ca      	b.n	8003baa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_Receive+0x7e>
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a24:	e0c1      	b.n	8003baa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a6c:	d10f      	bne.n	8003a8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d007      	beq.n	8003aac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d162      	bne.n	8003b7a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ab4:	e02e      	b.n	8003b14 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d115      	bne.n	8003af0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f103 020c 	add.w	r2, r3, #12
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aee:	e011      	b.n	8003b14 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003af0:	f7fe fd24 	bl	800253c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d803      	bhi.n	8003b08 <HAL_SPI_Receive+0x166>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d102      	bne.n	8003b0e <HAL_SPI_Receive+0x16c>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b12:	e04a      	b.n	8003baa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cb      	bne.n	8003ab6 <HAL_SPI_Receive+0x114>
 8003b1e:	e031      	b.n	8003b84 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d113      	bne.n	8003b56 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	b292      	uxth	r2, r2
 8003b3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	1c9a      	adds	r2, r3, #2
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b54:	e011      	b.n	8003b7a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b56:	f7fe fcf1 	bl	800253c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d803      	bhi.n	8003b6e <HAL_SPI_Receive+0x1cc>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d102      	bne.n	8003b74 <HAL_SPI_Receive+0x1d2>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b78:	e017      	b.n	8003baa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1cd      	bne.n	8003b20 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fa45 	bl	8004018 <SPI_EndRxTransaction>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
 8003ba6:	e000      	b.n	8003baa <HAL_SPI_Receive+0x208>
  }

error :
 8003ba8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	; 0x30
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_SPI_TransmitReceive+0x26>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e18a      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x33c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bf2:	f7fe fca3 	bl	800253c <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d00f      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x70>
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d107      	bne.n	8003c2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <HAL_SPI_TransmitReceive+0x68>
 8003c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d003      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c32:	e15b      	b.n	8003eec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x82>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x82>
 8003c40:	887b      	ldrh	r3, [r7, #2]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c4c:	e14e      	b.n	8003eec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d003      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	887a      	ldrh	r2, [r7, #2]
 8003c72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	887a      	ldrh	r2, [r7, #2]
 8003c8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d007      	beq.n	8003cb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbe:	d178      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x10a>
 8003cc8:	8b7b      	ldrh	r3, [r7, #26]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d166      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	881a      	ldrh	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf2:	e053      	b.n	8003d9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d11b      	bne.n	8003d3a <HAL_SPI_TransmitReceive+0x176>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d016      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x176>
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d113      	bne.n	8003d3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	1c9a      	adds	r2, r3, #2
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d119      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x1b8>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d014      	beq.n	8003d7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d7c:	f7fe fbde 	bl	800253c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d807      	bhi.n	8003d9c <HAL_SPI_TransmitReceive+0x1d8>
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d003      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d9a:	e0a7      	b.n	8003eec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1a6      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x130>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1a1      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x130>
 8003db0:	e07c      	b.n	8003eac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x1fc>
 8003dba:	8b7b      	ldrh	r3, [r7, #26]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d16b      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de6:	e057      	b.n	8003e98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d11c      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x26c>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d017      	beq.n	8003e30 <HAL_SPI_TransmitReceive+0x26c>
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d114      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	7812      	ldrb	r2, [r2, #0]
 8003e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d119      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x2ae>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d014      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e72:	f7fe fb63 	bl	800253c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d803      	bhi.n	8003e8a <HAL_SPI_TransmitReceive+0x2c6>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d102      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x2cc>
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e96:	e029      	b.n	8003eec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1a2      	bne.n	8003de8 <HAL_SPI_TransmitReceive+0x224>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d19d      	bne.n	8003de8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f917 	bl	80040e4 <SPI_EndRxTxTransaction>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ec8:	e010      	b.n	8003eec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	e000      	b.n	8003eec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003eea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003efc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3730      	adds	r7, #48	; 0x30
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f18:	f7fe fb10 	bl	800253c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f28:	f7fe fb08 	bl	800253c <HAL_GetTick>
 8003f2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	015b      	lsls	r3, r3, #5
 8003f34:	0d1b      	lsrs	r3, r3, #20
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f3e:	e054      	b.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d050      	beq.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f48:	f7fe faf8 	bl	800253c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d902      	bls.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d13d      	bne.n	8003fda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d111      	bne.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f80:	d004      	beq.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d107      	bne.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	d10f      	bne.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e017      	b.n	800400a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	429a      	cmp	r2, r3
 8004006:	d19b      	bne.n	8003f40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000004 	.word	0x20000004

08004018 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402c:	d111      	bne.n	8004052 <SPI_EndRxTransaction+0x3a>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004036:	d004      	beq.n	8004042 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004040:	d107      	bne.n	8004052 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800405a:	d12a      	bne.n	80040b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	d012      	beq.n	800408c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2200      	movs	r2, #0
 800406e:	2180      	movs	r1, #128	; 0x80
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ff49 	bl	8003f08 <SPI_WaitFlagStateUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d02d      	beq.n	80040d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e026      	b.n	80040da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2200      	movs	r2, #0
 8004094:	2101      	movs	r1, #1
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff ff36 	bl	8003f08 <SPI_WaitFlagStateUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01a      	beq.n	80040d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f043 0220 	orr.w	r2, r3, #32
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e013      	b.n	80040da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2101      	movs	r1, #1
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff ff23 	bl	8003f08 <SPI_WaitFlagStateUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e000      	b.n	80040da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <SPI_EndRxTxTransaction+0x7c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <SPI_EndRxTxTransaction+0x80>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0d5b      	lsrs	r3, r3, #21
 80040fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410e:	d112      	bne.n	8004136 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fef4 	bl	8003f08 <SPI_WaitFlagStateUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e00f      	b.n	8004156 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3b01      	subs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d0f2      	beq.n	8004136 <SPI_EndRxTxTransaction+0x52>
 8004150:	e000      	b.n	8004154 <SPI_EndRxTxTransaction+0x70>
        break;
 8004152:	bf00      	nop
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000004 	.word	0x20000004
 8004164:	165e9f81 	.word	0x165e9f81

08004168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e041      	b.n	80041fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fffe 	bl	8002190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f000 f95e 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d001      	beq.n	8004220 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e046      	b.n	80042ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a23      	ldr	r2, [pc, #140]	; (80042bc <HAL_TIM_Base_Start+0xb4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_TIM_Base_Start+0x70>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d01d      	beq.n	8004278 <HAL_TIM_Base_Start+0x70>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_TIM_Base_Start+0xb8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_TIM_Base_Start+0x70>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_TIM_Base_Start+0xbc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_TIM_Base_Start+0x70>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_TIM_Base_Start+0xc0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_TIM_Base_Start+0x70>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_TIM_Base_Start+0xc4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_TIM_Base_Start+0x70>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_TIM_Base_Start+0xc8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIM_Base_Start+0x70>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_TIM_Base_Start+0xcc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b06      	cmp	r3, #6
 8004288:	d010      	beq.n	80042ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	e007      	b.n	80042ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800
 80042c8:	40000c00 	.word	0x40000c00
 80042cc:	40010400 	.word	0x40010400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40001800 	.word	0x40001800

080042d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_TIM_ConfigClockSource+0x1c>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0b4      	b.n	800445e <HAL_TIM_ConfigClockSource+0x186>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800431a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d03e      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0xd4>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	f200 8087 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	f000 8086 	beq.w	800444a <HAL_TIM_ConfigClockSource+0x172>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d87f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b70      	cmp	r3, #112	; 0x70
 8004346:	d01a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xa6>
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d87b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b60      	cmp	r3, #96	; 0x60
 800434e:	d050      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d877      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d03c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004358:	2b50      	cmp	r3, #80	; 0x50
 800435a:	d873      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d058      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x13a>
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d86f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b30      	cmp	r3, #48	; 0x30
 8004366:	d064      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d86b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d060      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d867      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	2b10      	cmp	r3, #16
 800437a:	d05a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15a>
 800437c:	e062      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f000 f985 	bl	800469c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
      break;
 80043aa:	e04f      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f000 f96e 	bl	800469c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
      break;
 80043d0:	e03c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 f8e2 	bl	80045a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2150      	movs	r1, #80	; 0x50
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f93b 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e02c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 f901 	bl	8004606 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2160      	movs	r1, #96	; 0x60
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f92b 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8004410:	e01c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	461a      	mov	r2, r3
 8004420:	f000 f8c2 	bl	80045a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f91b 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8004430:	e00c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 f912 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8004442:	e003      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a40      	ldr	r2, [pc, #256]	; (800457c <TIM_Base_SetConfig+0x114>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d00f      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3d      	ldr	r2, [pc, #244]	; (8004580 <TIM_Base_SetConfig+0x118>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00b      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <TIM_Base_SetConfig+0x120>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3a      	ldr	r2, [pc, #232]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <TIM_Base_SetConfig+0x114>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d027      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <TIM_Base_SetConfig+0x118>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d023      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <TIM_Base_SetConfig+0x120>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a29      	ldr	r2, [pc, #164]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d017      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a28      	ldr	r2, [pc, #160]	; (8004590 <TIM_Base_SetConfig+0x128>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a27      	ldr	r2, [pc, #156]	; (8004594 <TIM_Base_SetConfig+0x12c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <TIM_Base_SetConfig+0x130>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a25      	ldr	r2, [pc, #148]	; (800459c <TIM_Base_SetConfig+0x134>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a24      	ldr	r2, [pc, #144]	; (80045a0 <TIM_Base_SetConfig+0x138>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <TIM_Base_SetConfig+0x13c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <TIM_Base_SetConfig+0x114>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0xf8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0c      	ldr	r2, [pc, #48]	; (800458c <TIM_Base_SetConfig+0x124>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	615a      	str	r2, [r3, #20]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40010400 	.word	0x40010400
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800
 800459c:	40001800 	.word	0x40001800
 80045a0:	40001c00 	.word	0x40001c00
 80045a4:	40002000 	.word	0x40002000

080045a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 030a 	bic.w	r3, r3, #10
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	031b      	lsls	r3, r3, #12
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	f043 0307 	orr.w	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	021a      	lsls	r2, r3, #8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	431a      	orrs	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	609a      	str	r2, [r3, #8]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e05a      	b.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d01d      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10c      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40010400 	.word	0x40010400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40001800 	.word	0x40001800

080047d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80047d8:	4904      	ldr	r1, [pc, #16]	; (80047ec <MX_FATFS_Init+0x18>)
 80047da:	4805      	ldr	r0, [pc, #20]	; (80047f0 <MX_FATFS_Init+0x1c>)
 80047dc:	f003 f902 	bl	80079e4 <FATFS_LinkDriver>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <MX_FATFS_Init+0x20>)
 80047e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80047e8:	bf00      	nop
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20002420 	.word	0x20002420
 80047f0:	20000010 	.word	0x20000010
 80047f4:	2000241c 	.word	0x2000241c

080047f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80047fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fc fe47 	bl	80014a8 <SD_disk_initialize>
 800481a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fc ff25 	bl	8001680 <SD_disk_status>
 8004836:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8004850:	7bf8      	ldrb	r0, [r7, #15]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	f7fc ff28 	bl	80016ac <SD_disk_read>
 800485c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4603      	mov	r3, r0
 8004874:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8004876:	7bf8      	ldrb	r0, [r7, #15]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	f7fc ff7f 	bl	8001780 <SD_disk_write>
 8004882:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	603a      	str	r2, [r7, #0]
 8004896:	71fb      	strb	r3, [r7, #7]
 8004898:	460b      	mov	r3, r1
 800489a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 800489c:	79b9      	ldrb	r1, [r7, #6]
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fc fff0 	bl	8001888 <SD_disk_ioctl>
 80048a8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <disk_status+0x30>)
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	79fa      	ldrb	r2, [r7, #7]
 80048cc:	4905      	ldr	r1, [pc, #20]	; (80048e4 <disk_status+0x30>)
 80048ce:	440a      	add	r2, r1
 80048d0:	7a12      	ldrb	r2, [r2, #8]
 80048d2:	4610      	mov	r0, r2
 80048d4:	4798      	blx	r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	2000264c 	.word	0x2000264c

080048e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <disk_initialize+0x48>)
 80048fa:	5cd3      	ldrb	r3, [r2, r3]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d111      	bne.n	8004924 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <disk_initialize+0x48>)
 8004904:	2101      	movs	r1, #1
 8004906:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <disk_initialize+0x48>)
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	79fa      	ldrb	r2, [r7, #7]
 8004916:	4906      	ldr	r1, [pc, #24]	; (8004930 <disk_initialize+0x48>)
 8004918:	440a      	add	r2, r1
 800491a:	7a12      	ldrb	r2, [r2, #8]
 800491c:	4610      	mov	r0, r2
 800491e:	4798      	blx	r3
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004924:	7bfb      	ldrb	r3, [r7, #15]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	2000264c 	.word	0x2000264c

08004934 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <disk_read+0x3c>)
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	689c      	ldr	r4, [r3, #8]
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	4a07      	ldr	r2, [pc, #28]	; (8004970 <disk_read+0x3c>)
 8004954:	4413      	add	r3, r2
 8004956:	7a18      	ldrb	r0, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	47a0      	blx	r4
 8004960:	4603      	mov	r3, r0
 8004962:	75fb      	strb	r3, [r7, #23]
  return res;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
}
 8004966:	4618      	mov	r0, r3
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd90      	pop	{r4, r7, pc}
 800496e:	bf00      	nop
 8004970:	2000264c 	.word	0x2000264c

08004974 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <disk_write+0x3c>)
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68dc      	ldr	r4, [r3, #12]
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	4a07      	ldr	r2, [pc, #28]	; (80049b0 <disk_write+0x3c>)
 8004994:	4413      	add	r3, r2
 8004996:	7a18      	ldrb	r0, [r3, #8]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	47a0      	blx	r4
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	bf00      	nop
 80049b0:	2000264c 	.word	0x2000264c

080049b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	603a      	str	r2, [r7, #0]
 80049be:	71fb      	strb	r3, [r7, #7]
 80049c0:	460b      	mov	r3, r1
 80049c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <disk_ioctl+0x38>)
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	79fa      	ldrb	r2, [r7, #7]
 80049d2:	4906      	ldr	r1, [pc, #24]	; (80049ec <disk_ioctl+0x38>)
 80049d4:	440a      	add	r2, r1
 80049d6:	7a10      	ldrb	r0, [r2, #8]
 80049d8:	79b9      	ldrb	r1, [r7, #6]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4798      	blx	r3
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]
  return res;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	2000264c 	.word	0x2000264c

080049f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3301      	adds	r3, #1
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004a00:	89fb      	ldrh	r3, [r7, #14]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	b21a      	sxth	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b21b      	sxth	r3, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004a12:	89fb      	ldrh	r3, [r7, #14]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3303      	adds	r3, #3
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	3202      	adds	r2, #2
 8004a38:	7812      	ldrb	r2, [r2, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	3201      	adds	r2, #1
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	7812      	ldrb	r2, [r2, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
	return rv;
 8004a58:	68fb      	ldr	r3, [r7, #12]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	887a      	ldrh	r2, [r7, #2]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	0a1b      	lsrs	r3, r3, #8
 8004ada:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00d      	beq.n	8004b2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	1c53      	adds	r3, r2, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	6179      	str	r1, [r7, #20]
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	607b      	str	r3, [r7, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f1      	bne.n	8004b0e <mem_cpy+0x1a>
	}
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b36:	b480      	push	{r7}
 8004b38:	b087      	sub	sp, #28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	617a      	str	r2, [r7, #20]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f3      	bne.n	8004b46 <mem_set+0x10>
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	61fa      	str	r2, [r7, #28]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	61ba      	str	r2, [r7, #24]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	1acb      	subs	r3, r1, r3
 8004b98:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <mem_cmp+0x40>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0eb      	beq.n	8004b84 <mem_cmp+0x18>

	return r;
 8004bac:	697b      	ldr	r3, [r7, #20]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3724      	adds	r7, #36	; 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004bc4:	e002      	b.n	8004bcc <chk_chr+0x12>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <chk_chr+0x26>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d1f2      	bne.n	8004bc6 <chk_chr+0xc>
	return *str;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	781b      	ldrb	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e029      	b.n	8004c58 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <chk_lock+0xb4>)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	4413      	add	r3, r2
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01d      	beq.n	8004c4e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c12:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <chk_lock+0xb4>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	4413      	add	r3, r2
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d116      	bne.n	8004c52 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <chk_lock+0xb4>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d10c      	bne.n	8004c52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c38:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <chk_lock+0xb4>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	4413      	add	r3, r2
 8004c40:	3308      	adds	r3, #8
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d102      	bne.n	8004c52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c4c:	e007      	b.n	8004c5e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d9d2      	bls.n	8004c04 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d109      	bne.n	8004c78 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <chk_lock+0x80>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d101      	bne.n	8004c74 <chk_lock+0x84>
 8004c70:	2300      	movs	r3, #0
 8004c72:	e010      	b.n	8004c96 <chk_lock+0xa6>
 8004c74:	2312      	movs	r3, #18
 8004c76:	e00e      	b.n	8004c96 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d108      	bne.n	8004c90 <chk_lock+0xa0>
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <chk_lock+0xb4>)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	4413      	add	r3, r2
 8004c86:	330c      	adds	r3, #12
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8e:	d101      	bne.n	8004c94 <chk_lock+0xa4>
 8004c90:	2310      	movs	r3, #16
 8004c92:	e000      	b.n	8004c96 <chk_lock+0xa6>
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	2000242c 	.word	0x2000242c

08004ca8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	e002      	b.n	8004cba <enq_lock+0x12>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d806      	bhi.n	8004cce <enq_lock+0x26>
 8004cc0:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <enq_lock+0x40>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	4413      	add	r3, r2
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f2      	bne.n	8004cb4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	bf14      	ite	ne
 8004cd4:	2301      	movne	r3, #1
 8004cd6:	2300      	moveq	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2000242c 	.word	0x2000242c

08004cec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e01f      	b.n	8004d3c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004cfc:	4a41      	ldr	r2, [pc, #260]	; (8004e04 <inc_lock+0x118>)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	4413      	add	r3, r2
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d113      	bne.n	8004d36 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004d0e:	4a3d      	ldr	r2, [pc, #244]	; (8004e04 <inc_lock+0x118>)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	4413      	add	r3, r2
 8004d16:	3304      	adds	r3, #4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d109      	bne.n	8004d36 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004d22:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <inc_lock+0x118>)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	4413      	add	r3, r2
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d006      	beq.n	8004d44 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d9dc      	bls.n	8004cfc <inc_lock+0x10>
 8004d42:	e000      	b.n	8004d46 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004d44:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d132      	bne.n	8004db2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e002      	b.n	8004d58 <inc_lock+0x6c>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d806      	bhi.n	8004d6c <inc_lock+0x80>
 8004d5e:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <inc_lock+0x118>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	4413      	add	r3, r2
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f2      	bne.n	8004d52 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d101      	bne.n	8004d76 <inc_lock+0x8a>
 8004d72:	2300      	movs	r3, #0
 8004d74:	e040      	b.n	8004df8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4922      	ldr	r1, [pc, #136]	; (8004e04 <inc_lock+0x118>)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	440b      	add	r3, r1
 8004d82:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	491e      	ldr	r1, [pc, #120]	; (8004e04 <inc_lock+0x118>)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	440b      	add	r3, r1
 8004d90:	3304      	adds	r3, #4
 8004d92:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	491a      	ldr	r1, [pc, #104]	; (8004e04 <inc_lock+0x118>)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	440b      	add	r3, r1
 8004da0:	3308      	adds	r3, #8
 8004da2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <inc_lock+0x118>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	330c      	adds	r3, #12
 8004dae:	2200      	movs	r2, #0
 8004db0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <inc_lock+0xe0>
 8004db8:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <inc_lock+0x118>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	4413      	add	r3, r2
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <inc_lock+0xe0>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e015      	b.n	8004df8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d108      	bne.n	8004de4 <inc_lock+0xf8>
 8004dd2:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <inc_lock+0x118>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	4413      	add	r3, r2
 8004dda:	330c      	adds	r3, #12
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	3301      	adds	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	e001      	b.n	8004de8 <inc_lock+0xfc>
 8004de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de8:	4906      	ldr	r1, [pc, #24]	; (8004e04 <inc_lock+0x118>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	440b      	add	r3, r1
 8004df0:	330c      	adds	r3, #12
 8004df2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	2000242c 	.word	0x2000242c

08004e08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d825      	bhi.n	8004e68 <dec_lock+0x60>
		n = Files[i].ctr;
 8004e1c:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <dec_lock+0x74>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	4413      	add	r3, r2
 8004e24:	330c      	adds	r3, #12
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004e2a:	89fb      	ldrh	r3, [r7, #14]
 8004e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e30:	d101      	bne.n	8004e36 <dec_lock+0x2e>
 8004e32:	2300      	movs	r3, #0
 8004e34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004e36:	89fb      	ldrh	r3, [r7, #14]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <dec_lock+0x3a>
 8004e3c:	89fb      	ldrh	r3, [r7, #14]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e42:	4a0e      	ldr	r2, [pc, #56]	; (8004e7c <dec_lock+0x74>)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	4413      	add	r3, r2
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	89fa      	ldrh	r2, [r7, #14]
 8004e4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <dec_lock+0x5a>
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <dec_lock+0x74>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	737b      	strb	r3, [r7, #13]
 8004e66:	e001      	b.n	8004e6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e68:	2302      	movs	r3, #2
 8004e6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	2000242c 	.word	0x2000242c

08004e80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e010      	b.n	8004eb0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e8e:	4a0d      	ldr	r2, [pc, #52]	; (8004ec4 <clear_lock+0x44>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	4413      	add	r3, r2
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d105      	bne.n	8004eaa <clear_lock+0x2a>
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <clear_lock+0x44>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	4413      	add	r3, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d9eb      	bls.n	8004e8e <clear_lock+0xe>
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	2000242c 	.word	0x2000242c

08004ec8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d034      	beq.n	8004f46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7858      	ldrb	r0, [r3, #1]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004eec:	2301      	movs	r3, #1
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	f7ff fd40 	bl	8004974 <disk_write>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	e022      	b.n	8004f46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	1ad2      	subs	r2, r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d217      	bcs.n	8004f46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	789b      	ldrb	r3, [r3, #2]
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e010      	b.n	8004f40 <sync_window+0x78>
					wsect += fs->fsize;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	7858      	ldrb	r0, [r3, #1]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f32:	2301      	movs	r3, #1
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	f7ff fd1d 	bl	8004974 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d8eb      	bhi.n	8004f1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d01b      	beq.n	8004fa0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ffad 	bl	8004ec8 <sync_window>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7858      	ldrb	r0, [r3, #1]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f82:	2301      	movs	r3, #1
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	f7ff fcd5 	bl	8004934 <disk_read>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff87 	bl	8004ec8 <sync_window>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d159      	bne.n	8005078 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d149      	bne.n	8005060 <sync_fs+0xb4>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	791b      	ldrb	r3, [r3, #4]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d145      	bne.n	8005060 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	899b      	ldrh	r3, [r3, #12]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f7ff fda8 	bl	8004b36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3338      	adds	r3, #56	; 0x38
 8004fea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fd37 	bl	8004a66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3338      	adds	r3, #56	; 0x38
 8004ffc:	4921      	ldr	r1, [pc, #132]	; (8005084 <sync_fs+0xd8>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fd4c 	bl	8004a9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3338      	adds	r3, #56	; 0x38
 8005008:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800500c:	491e      	ldr	r1, [pc, #120]	; (8005088 <sync_fs+0xdc>)
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fd44 	bl	8004a9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3338      	adds	r3, #56	; 0x38
 8005018:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f7ff fd3a 	bl	8004a9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3338      	adds	r3, #56	; 0x38
 800502c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f7ff fd30 	bl	8004a9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7858      	ldrb	r0, [r3, #1]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005054:	2301      	movs	r3, #1
 8005056:	f7ff fc8d 	bl	8004974 <disk_write>
			fs->fsi_flag = 0;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2200      	movs	r2, #0
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fca3 	bl	80049b4 <disk_ioctl>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <sync_fs+0xcc>
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	41615252 	.word	0x41615252
 8005088:	61417272 	.word	0x61417272

0800508c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	3b02      	subs	r3, #2
 800509a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	3b02      	subs	r3, #2
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d301      	bcc.n	80050ac <clust2sect+0x20>
 80050a8:	2300      	movs	r3, #0
 80050aa:	e008      	b.n	80050be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	895b      	ldrh	r3, [r3, #10]
 80050b0:	461a      	mov	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	fb03 f202 	mul.w	r2, r3, r2
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	4413      	add	r3, r2
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b086      	sub	sp, #24
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d904      	bls.n	80050ea <get_fat+0x20>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80050ea:	2301      	movs	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e0bb      	b.n	8005268 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	f000 8083 	beq.w	8005206 <get_fat+0x13c>
 8005100:	2b03      	cmp	r3, #3
 8005102:	f300 80a7 	bgt.w	8005254 <get_fat+0x18a>
 8005106:	2b01      	cmp	r3, #1
 8005108:	d002      	beq.n	8005110 <get_fat+0x46>
 800510a:	2b02      	cmp	r3, #2
 800510c:	d056      	beq.n	80051bc <get_fat+0xf2>
 800510e:	e0a1      	b.n	8005254 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	899b      	ldrh	r3, [r3, #12]
 8005126:	4619      	mov	r1, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	fbb3 f3f1 	udiv	r3, r3, r1
 800512e:	4413      	add	r3, r2
 8005130:	4619      	mov	r1, r3
 8005132:	6938      	ldr	r0, [r7, #16]
 8005134:	f7ff ff0c 	bl	8004f50 <move_window>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 808d 	bne.w	800525a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	60fa      	str	r2, [r7, #12]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	8992      	ldrh	r2, [r2, #12]
 800514a:	fbb3 f1f2 	udiv	r1, r3, r2
 800514e:	fb01 f202 	mul.w	r2, r1, r2
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800515c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	899b      	ldrh	r3, [r3, #12]
 8005166:	4619      	mov	r1, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	fbb3 f3f1 	udiv	r3, r3, r1
 800516e:	4413      	add	r3, r2
 8005170:	4619      	mov	r1, r3
 8005172:	6938      	ldr	r0, [r7, #16]
 8005174:	f7ff feec 	bl	8004f50 <move_window>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d16f      	bne.n	800525e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	899b      	ldrh	r3, [r3, #12]
 8005182:	461a      	mov	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	fbb3 f1f2 	udiv	r1, r3, r2
 800518a:	fb01 f202 	mul.w	r2, r1, r2
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	461a      	mov	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <get_fat+0xe8>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	e002      	b.n	80051b8 <get_fat+0xee>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b8:	617b      	str	r3, [r7, #20]
			break;
 80051ba:	e055      	b.n	8005268 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	899b      	ldrh	r3, [r3, #12]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4619      	mov	r1, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80051d0:	4413      	add	r3, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	6938      	ldr	r0, [r7, #16]
 80051d6:	f7ff febb 	bl	8004f50 <move_window>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d140      	bne.n	8005262 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	8992      	ldrh	r2, [r2, #12]
 80051ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80051f2:	fb00 f202 	mul.w	r2, r0, r2
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	440b      	add	r3, r1
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fbf8 	bl	80049f0 <ld_word>
 8005200:	4603      	mov	r3, r0
 8005202:	617b      	str	r3, [r7, #20]
			break;
 8005204:	e030      	b.n	8005268 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	899b      	ldrh	r3, [r3, #12]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	b29b      	uxth	r3, r3
 8005212:	4619      	mov	r1, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	fbb3 f3f1 	udiv	r3, r3, r1
 800521a:	4413      	add	r3, r2
 800521c:	4619      	mov	r1, r3
 800521e:	6938      	ldr	r0, [r7, #16]
 8005220:	f7ff fe96 	bl	8004f50 <move_window>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11d      	bne.n	8005266 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	8992      	ldrh	r2, [r2, #12]
 8005238:	fbb3 f0f2 	udiv	r0, r3, r2
 800523c:	fb00 f202 	mul.w	r2, r0, r2
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	440b      	add	r3, r1
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fbeb 	bl	8004a20 <ld_dword>
 800524a:	4603      	mov	r3, r0
 800524c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005250:	617b      	str	r3, [r7, #20]
			break;
 8005252:	e009      	b.n	8005268 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e006      	b.n	8005268 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800525a:	bf00      	nop
 800525c:	e004      	b.n	8005268 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800525e:	bf00      	nop
 8005260:	e002      	b.n	8005268 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005266:	bf00      	nop
		}
	}

	return val;
 8005268:	697b      	ldr	r3, [r7, #20]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005272:	b590      	push	{r4, r7, lr}
 8005274:	b089      	sub	sp, #36	; 0x24
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800527e:	2302      	movs	r3, #2
 8005280:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b01      	cmp	r3, #1
 8005286:	f240 8102 	bls.w	800548e <put_fat+0x21c>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	f080 80fc 	bcs.w	800548e <put_fat+0x21c>
		switch (fs->fs_type) {
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b03      	cmp	r3, #3
 800529c:	f000 80b6 	beq.w	800540c <put_fat+0x19a>
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	f300 80fd 	bgt.w	80054a0 <put_fat+0x22e>
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d003      	beq.n	80052b2 <put_fat+0x40>
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	f000 8083 	beq.w	80053b6 <put_fat+0x144>
 80052b0:	e0f6      	b.n	80054a0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4413      	add	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	899b      	ldrh	r3, [r3, #12]
 80052c8:	4619      	mov	r1, r3
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80052d0:	4413      	add	r3, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fe3b 	bl	8004f50 <move_window>
 80052da:	4603      	mov	r3, r0
 80052dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 80d6 	bne.w	8005492 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	61ba      	str	r2, [r7, #24]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	8992      	ldrh	r2, [r2, #12]
 80052f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80052fa:	fb00 f202 	mul.w	r2, r0, r2
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	440b      	add	r3, r1
 8005302:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <put_fat+0xb8>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b25b      	sxtb	r3, r3
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	b25a      	sxtb	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	b25b      	sxtb	r3, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	b25b      	sxtb	r3, r3
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e001      	b.n	800532e <put_fat+0xbc>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	899b      	ldrh	r3, [r3, #12]
 8005340:	4619      	mov	r1, r3
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	fbb3 f3f1 	udiv	r3, r3, r1
 8005348:	4413      	add	r3, r2
 800534a:	4619      	mov	r1, r3
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff fdff 	bl	8004f50 <move_window>
 8005352:	4603      	mov	r3, r0
 8005354:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f040 809c 	bne.w	8005496 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	899b      	ldrh	r3, [r3, #12]
 8005368:	461a      	mov	r2, r3
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005370:	fb00 f202 	mul.w	r2, r0, r2
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	440b      	add	r3, r1
 8005378:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <put_fat+0x11a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e00e      	b.n	80053aa <put_fat+0x138>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b25b      	sxtb	r3, r3
 8005392:	f023 030f 	bic.w	r3, r3, #15
 8005396:	b25a      	sxtb	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	b25b      	sxtb	r3, r3
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	b25b      	sxtb	r3, r3
 80053a4:	4313      	orrs	r3, r2
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	70da      	strb	r2, [r3, #3]
			break;
 80053b4:	e074      	b.n	80054a0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	899b      	ldrh	r3, [r3, #12]
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	4619      	mov	r1, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80053ca:	4413      	add	r3, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fdbe 	bl	8004f50 <move_window>
 80053d4:	4603      	mov	r3, r0
 80053d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053d8:	7ffb      	ldrb	r3, [r7, #31]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d15d      	bne.n	800549a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	8992      	ldrh	r2, [r2, #12]
 80053ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80053f0:	fb00 f202 	mul.w	r2, r0, r2
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	440b      	add	r3, r1
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	b292      	uxth	r2, r2
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fb31 	bl	8004a66 <st_word>
			fs->wflag = 1;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	70da      	strb	r2, [r3, #3]
			break;
 800540a:	e049      	b.n	80054a0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	899b      	ldrh	r3, [r3, #12]
 8005414:	089b      	lsrs	r3, r3, #2
 8005416:	b29b      	uxth	r3, r3
 8005418:	4619      	mov	r1, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005420:	4413      	add	r3, r2
 8005422:	4619      	mov	r1, r3
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7ff fd93 	bl	8004f50 <move_window>
 800542a:	4603      	mov	r3, r0
 800542c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800542e:	7ffb      	ldrb	r3, [r7, #31]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d134      	bne.n	800549e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	8992      	ldrh	r2, [r2, #12]
 8005448:	fbb3 f0f2 	udiv	r0, r3, r2
 800544c:	fb00 f202 	mul.w	r2, r0, r2
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	440b      	add	r3, r1
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fae3 	bl	8004a20 <ld_dword>
 800545a:	4603      	mov	r3, r0
 800545c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005460:	4323      	orrs	r3, r4
 8005462:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	8992      	ldrh	r2, [r2, #12]
 8005472:	fbb3 f0f2 	udiv	r0, r3, r2
 8005476:	fb00 f202 	mul.w	r2, r0, r2
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	440b      	add	r3, r1
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fb0b 	bl	8004a9c <st_dword>
			fs->wflag = 1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	70da      	strb	r2, [r3, #3]
			break;
 800548c:	e008      	b.n	80054a0 <put_fat+0x22e>
		}
	}
 800548e:	bf00      	nop
 8005490:	e006      	b.n	80054a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005492:	bf00      	nop
 8005494:	e004      	b.n	80054a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800549e:	bf00      	nop
	return res;
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3724      	adds	r7, #36	; 0x24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}

080054aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d904      	bls.n	80054d0 <remove_chain+0x26>
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d301      	bcc.n	80054d4 <remove_chain+0x2a>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e04b      	b.n	800556c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80054da:	f04f 32ff 	mov.w	r2, #4294967295
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	69b8      	ldr	r0, [r7, #24]
 80054e2:	f7ff fec6 	bl	8005272 <put_fat>
 80054e6:	4603      	mov	r3, r0
 80054e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80054ea:	7ffb      	ldrb	r3, [r7, #31]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <remove_chain+0x4a>
 80054f0:	7ffb      	ldrb	r3, [r7, #31]
 80054f2:	e03b      	b.n	800556c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff fde7 	bl	80050ca <get_fat>
 80054fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d031      	beq.n	8005568 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <remove_chain+0x64>
 800550a:	2302      	movs	r3, #2
 800550c:	e02e      	b.n	800556c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d101      	bne.n	800551a <remove_chain+0x70>
 8005516:	2301      	movs	r3, #1
 8005518:	e028      	b.n	800556c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800551a:	2200      	movs	r2, #0
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	69b8      	ldr	r0, [r7, #24]
 8005520:	f7ff fea7 	bl	8005272 <put_fat>
 8005524:	4603      	mov	r3, r0
 8005526:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005528:	7ffb      	ldrb	r3, [r7, #31]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <remove_chain+0x88>
 800552e:	7ffb      	ldrb	r3, [r7, #31]
 8005530:	e01c      	b.n	800556c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	3b02      	subs	r3, #2
 800553c:	429a      	cmp	r2, r3
 800553e:	d20b      	bcs.n	8005558 <remove_chain+0xae>
			fs->free_clst++;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	791b      	ldrb	r3, [r3, #4]
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	b2da      	uxtb	r2, r3
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d3c6      	bcc.n	80054f4 <remove_chain+0x4a>
 8005566:	e000      	b.n	800556a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005568:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3720      	adds	r7, #32
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10d      	bne.n	80055a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <create_chain+0x2c>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	429a      	cmp	r2, r3
 800559e:	d31b      	bcc.n	80055d8 <create_chain+0x64>
 80055a0:	2301      	movs	r3, #1
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	e018      	b.n	80055d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff fd8e 	bl	80050ca <get_fat>
 80055ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d801      	bhi.n	80055ba <create_chain+0x46>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e070      	b.n	800569c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d101      	bne.n	80055c6 <create_chain+0x52>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	e06a      	b.n	800569c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d201      	bcs.n	80055d4 <create_chain+0x60>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	e063      	b.n	800569c <create_chain+0x128>
		scl = clst;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d307      	bcc.n	80055fc <create_chain+0x88>
				ncl = 2;
 80055ec:	2302      	movs	r3, #2
 80055ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d901      	bls.n	80055fc <create_chain+0x88>
 80055f8:	2300      	movs	r3, #0
 80055fa:	e04f      	b.n	800569c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80055fc:	69f9      	ldr	r1, [r7, #28]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fd63 	bl	80050ca <get_fat>
 8005604:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00e      	beq.n	800562a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d003      	beq.n	800561a <create_chain+0xa6>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d101      	bne.n	800561e <create_chain+0xaa>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e03e      	b.n	800569c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	429a      	cmp	r2, r3
 8005624:	d1da      	bne.n	80055dc <create_chain+0x68>
 8005626:	2300      	movs	r3, #0
 8005628:	e038      	b.n	800569c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800562a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800562c:	f04f 32ff 	mov.w	r2, #4294967295
 8005630:	69f9      	ldr	r1, [r7, #28]
 8005632:	6938      	ldr	r0, [r7, #16]
 8005634:	f7ff fe1d 	bl	8005272 <put_fat>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <create_chain+0xe2>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d006      	beq.n	8005656 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6938      	ldr	r0, [r7, #16]
 800564e:	f7ff fe10 	bl	8005272 <put_fat>
 8005652:	4603      	mov	r3, r0
 8005654:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d116      	bne.n	800568a <create_chain+0x116>
		fs->last_clst = ncl;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	3b02      	subs	r3, #2
 800566c:	429a      	cmp	r2, r3
 800566e:	d804      	bhi.n	800567a <create_chain+0x106>
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	1e5a      	subs	r2, r3, #1
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	791b      	ldrb	r3, [r3, #4]
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	b2da      	uxtb	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	711a      	strb	r2, [r3, #4]
 8005688:	e007      	b.n	800569a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d102      	bne.n	8005696 <create_chain+0x122>
 8005690:	f04f 33ff 	mov.w	r3, #4294967295
 8005694:	e000      	b.n	8005698 <create_chain+0x124>
 8005696:	2301      	movs	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800569a:	69fb      	ldr	r3, [r7, #28]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	3304      	adds	r3, #4
 80056ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	899b      	ldrh	r3, [r3, #12]
 80056c0:	461a      	mov	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	8952      	ldrh	r2, [r2, #10]
 80056cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	613a      	str	r2, [r7, #16]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <clmt_clust+0x42>
 80056e2:	2300      	movs	r3, #0
 80056e4:	e010      	b.n	8005708 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d307      	bcc.n	80056fe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3304      	adds	r3, #4
 80056fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056fc:	e7e9      	b.n	80056d2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80056fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
}
 8005708:	4618      	mov	r0, r3
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572a:	d204      	bcs.n	8005736 <dir_sdi+0x22>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005736:	2302      	movs	r3, #2
 8005738:	e071      	b.n	800581e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <dir_sdi+0x46>
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d902      	bls.n	800575a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	8912      	ldrh	r2, [r2, #8]
 8005768:	4293      	cmp	r3, r2
 800576a:	d301      	bcc.n	8005770 <dir_sdi+0x5c>
 800576c:	2302      	movs	r3, #2
 800576e:	e056      	b.n	800581e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	61da      	str	r2, [r3, #28]
 8005778:	e02d      	b.n	80057d6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	895b      	ldrh	r3, [r3, #10]
 800577e:	461a      	mov	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	899b      	ldrh	r3, [r3, #12]
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800578a:	e019      	b.n	80057c0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6979      	ldr	r1, [r7, #20]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fc9a 	bl	80050ca <get_fat>
 8005796:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d101      	bne.n	80057a4 <dir_sdi+0x90>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e03c      	b.n	800581e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d904      	bls.n	80057b4 <dir_sdi+0xa0>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d301      	bcc.n	80057b8 <dir_sdi+0xa4>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e032      	b.n	800581e <dir_sdi+0x10a>
			ofs -= csz;
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d2e1      	bcs.n	800578c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	6938      	ldr	r0, [r7, #16]
 80057cc:	f7ff fc5e 	bl	800508c <clust2sect>
 80057d0:	4602      	mov	r2, r0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <dir_sdi+0xd4>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e01a      	b.n	800581e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	899b      	ldrh	r3, [r3, #12]
 80057f0:	4619      	mov	r1, r3
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	899b      	ldrh	r3, [r3, #12]
 8005808:	461a      	mov	r2, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005810:	fb00 f202 	mul.w	r2, r0, r2
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	18ca      	adds	r2, r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	3320      	adds	r3, #32
 800583c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <dir_next+0x28>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800584c:	d301      	bcc.n	8005852 <dir_next+0x2c>
 800584e:	2304      	movs	r3, #4
 8005850:	e0bb      	b.n	80059ca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	899b      	ldrh	r3, [r3, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	fbb3 f1f2 	udiv	r1, r3, r2
 800585e:	fb01 f202 	mul.w	r2, r1, r2
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 809d 	bne.w	80059a4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	8912      	ldrh	r2, [r2, #8]
 8005884:	4293      	cmp	r3, r2
 8005886:	f0c0 808d 	bcc.w	80059a4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	61da      	str	r2, [r3, #28]
 8005890:	2304      	movs	r3, #4
 8005892:	e09a      	b.n	80059ca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	899b      	ldrh	r3, [r3, #12]
 8005898:	461a      	mov	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	8952      	ldrh	r2, [r2, #10]
 80058a4:	3a01      	subs	r2, #1
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d17b      	bne.n	80059a4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f7ff fc08 	bl	80050ca <get_fat>
 80058ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d801      	bhi.n	80058c6 <dir_next+0xa0>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e081      	b.n	80059ca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d101      	bne.n	80058d2 <dir_next+0xac>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e07b      	b.n	80059ca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d359      	bcc.n	8005990 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	61da      	str	r2, [r3, #28]
 80058e8:	2304      	movs	r3, #4
 80058ea:	e06e      	b.n	80059ca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f7ff fe3d 	bl	8005574 <create_chain>
 80058fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <dir_next+0xe0>
 8005902:	2307      	movs	r3, #7
 8005904:	e061      	b.n	80059ca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <dir_next+0xea>
 800590c:	2302      	movs	r3, #2
 800590e:	e05c      	b.n	80059ca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d101      	bne.n	800591c <dir_next+0xf6>
 8005918:	2301      	movs	r3, #1
 800591a:	e056      	b.n	80059ca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fad3 	bl	8004ec8 <sync_window>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <dir_next+0x106>
 8005928:	2301      	movs	r3, #1
 800592a:	e04e      	b.n	80059ca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	899b      	ldrh	r3, [r3, #12]
 8005936:	461a      	mov	r2, r3
 8005938:	2100      	movs	r1, #0
 800593a:	f7ff f8fc 	bl	8004b36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800593e:	2300      	movs	r3, #0
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff fba1 	bl	800508c <clust2sect>
 800594a:	4602      	mov	r2, r0
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	635a      	str	r2, [r3, #52]	; 0x34
 8005950:	e012      	b.n	8005978 <dir_next+0x152>
						fs->wflag = 1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fab5 	bl	8004ec8 <sync_window>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <dir_next+0x142>
 8005964:	2301      	movs	r3, #1
 8005966:	e030      	b.n	80059ca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	3301      	adds	r3, #1
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	635a      	str	r2, [r3, #52]	; 0x34
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	895b      	ldrh	r3, [r3, #10]
 800597c:	461a      	mov	r2, r3
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4293      	cmp	r3, r2
 8005982:	d3e6      	bcc.n	8005952 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005996:	6979      	ldr	r1, [r7, #20]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff fb77 	bl	800508c <clust2sect>
 800599e:	4602      	mov	r2, r0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	899b      	ldrh	r3, [r3, #12]
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80059bc:	fb00 f202 	mul.w	r2, r0, r2
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	18ca      	adds	r2, r1, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80059e2:	2100      	movs	r1, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff fe95 	bl	8005714 <dir_sdi>
 80059ea:	4603      	mov	r3, r0
 80059ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d12b      	bne.n	8005a4c <dir_alloc+0x7a>
		n = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4619      	mov	r1, r3
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff faa6 	bl	8004f50 <move_window>
 8005a04:	4603      	mov	r3, r0
 8005a06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11d      	bne.n	8005a4a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2be5      	cmp	r3, #229	; 0xe5
 8005a16:	d004      	beq.n	8005a22 <dir_alloc+0x50>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d107      	bne.n	8005a32 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3301      	adds	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d102      	bne.n	8005a36 <dir_alloc+0x64>
 8005a30:	e00c      	b.n	8005a4c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005a36:	2101      	movs	r1, #1
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fef4 	bl	8005826 <dir_next>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0d7      	beq.n	80059f8 <dir_alloc+0x26>
 8005a48:	e000      	b.n	8005a4c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005a4a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d101      	bne.n	8005a56 <dir_alloc+0x84>
 8005a52:	2307      	movs	r3, #7
 8005a54:	75fb      	strb	r3, [r7, #23]
	return res;
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	331a      	adds	r3, #26
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe ffbe 	bl	80049f0 <ld_word>
 8005a74:	4603      	mov	r3, r0
 8005a76:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d109      	bne.n	8005a94 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe ffb3 	bl	80049f0 <ld_word>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005a94:	68fb      	ldr	r3, [r7, #12]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	331a      	adds	r3, #26
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	b292      	uxth	r2, r2
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe ffd6 	bl	8004a66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d109      	bne.n	8005ad6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f103 0214 	add.w	r2, r3, #20
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	f7fe ffc8 	bl	8004a66 <st_word>
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	331a      	adds	r3, #26
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe ff7e 	bl	80049f0 <ld_word>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <cmp_lfn+0x1e>
 8005afa:	2300      	movs	r3, #0
 8005afc:	e059      	b.n	8005bb2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b06:	1e5a      	subs	r2, r3, #1
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b14:	2301      	movs	r3, #1
 8005b16:	81fb      	strh	r3, [r7, #14]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	e033      	b.n	8005b86 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005b1e:	4a27      	ldr	r2, [pc, #156]	; (8005bbc <cmp_lfn+0xdc>)
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe ff5f 	bl	80049f0 <ld_word>
 8005b32:	4603      	mov	r3, r0
 8005b34:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005b36:	89fb      	ldrh	r3, [r7, #14]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01a      	beq.n	8005b72 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2bfe      	cmp	r3, #254	; 0xfe
 8005b40:	d812      	bhi.n	8005b68 <cmp_lfn+0x88>
 8005b42:	89bb      	ldrh	r3, [r7, #12]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 ff99 	bl	8007a7c <ff_wtoupper>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	461c      	mov	r4, r3
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	617a      	str	r2, [r7, #20]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 ff8d 	bl	8007a7c <ff_wtoupper>
 8005b62:	4603      	mov	r3, r0
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d001      	beq.n	8005b6c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e022      	b.n	8005bb2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005b6c:	89bb      	ldrh	r3, [r7, #12]
 8005b6e:	81fb      	strh	r3, [r7, #14]
 8005b70:	e006      	b.n	8005b80 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005b72:	89bb      	ldrh	r3, [r7, #12]
 8005b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d001      	beq.n	8005b80 <cmp_lfn+0xa0>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e018      	b.n	8005bb2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	3301      	adds	r3, #1
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	d9c8      	bls.n	8005b1e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <cmp_lfn+0xd0>
 8005b98:	89fb      	ldrh	r3, [r7, #14]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <cmp_lfn+0xd0>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <cmp_lfn+0xd0>
 8005bac:	2300      	movs	r3, #0
 8005bae:	e000      	b.n	8005bb2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005bb0:	2301      	movs	r3, #1
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd90      	pop	{r4, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	0800c734 	.word	0x0800c734

08005bc0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	461a      	mov	r2, r3
 8005bce:	460b      	mov	r3, r1
 8005bd0:	71fb      	strb	r3, [r7, #7]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	330d      	adds	r3, #13
 8005bda:	79ba      	ldrb	r2, [r7, #6]
 8005bdc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	330b      	adds	r3, #11
 8005be2:	220f      	movs	r2, #15
 8005be4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	330c      	adds	r3, #12
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	331a      	adds	r3, #26
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe ff36 	bl	8004a66 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	1e5a      	subs	r2, r3, #1
 8005bfe:	4613      	mov	r3, r2
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	82fb      	strh	r3, [r7, #22]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c12:	8afb      	ldrh	r3, [r7, #22]
 8005c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <put_lfn+0x6c>
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	61fa      	str	r2, [r7, #28]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005c2c:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <put_lfn+0xcc>)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	4413      	add	r3, r2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	8afa      	ldrh	r2, [r7, #22]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe ff11 	bl	8004a66 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005c44:	8afb      	ldrh	r3, [r7, #22]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d102      	bne.n	8005c50 <put_lfn+0x90>
 8005c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c4e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b0c      	cmp	r3, #12
 8005c5a:	d9da      	bls.n	8005c12 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005c5c:	8afb      	ldrh	r3, [r7, #22]
 8005c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d006      	beq.n	8005c74 <put_lfn+0xb4>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d103      	bne.n	8005c7c <put_lfn+0xbc>
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	79fa      	ldrb	r2, [r7, #7]
 8005c80:	701a      	strb	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	0800c734 	.word	0x0800c734

08005c90 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08c      	sub	sp, #48	; 0x30
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005c9e:	220b      	movs	r2, #11
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7fe ff26 	bl	8004af4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b05      	cmp	r3, #5
 8005cac:	d92b      	bls.n	8005d06 <gen_numname+0x76>
		sr = seq;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005cb2:	e022      	b.n	8005cfa <gen_numname+0x6a>
			wc = *lfn++;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	1c9a      	adds	r2, r3, #2
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc2:	e017      	b.n	8005cf4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	005a      	lsls	r2, r3, #1
 8005cc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <gen_numname+0x5e>
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005ce8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005cec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	d9e4      	bls.n	8005cc4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d8      	bne.n	8005cb4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005d06:	2307      	movs	r3, #7
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	3330      	adds	r3, #48	; 0x30
 8005d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d1e:	2b39      	cmp	r3, #57	; 0x39
 8005d20:	d904      	bls.n	8005d2c <gen_numname+0x9c>
 8005d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d26:	3307      	adds	r3, #7
 8005d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d32:	3330      	adds	r3, #48	; 0x30
 8005d34:	443b      	add	r3, r7
 8005d36:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005d3a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1df      	bne.n	8005d0a <gen_numname+0x7a>
	ns[i] = '~';
 8005d4a:	f107 0214 	add.w	r2, r7, #20
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	4413      	add	r3, r2
 8005d52:	227e      	movs	r2, #126	; 0x7e
 8005d54:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005d56:	2300      	movs	r3, #0
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5a:	e002      	b.n	8005d62 <gen_numname+0xd2>
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	3301      	adds	r3, #1
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
 8005d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d205      	bcs.n	8005d76 <gen_numname+0xe6>
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	4413      	add	r3, r2
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d1f2      	bne.n	8005d5c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	2b07      	cmp	r3, #7
 8005d7a:	d807      	bhi.n	8005d8c <gen_numname+0xfc>
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d82:	3330      	adds	r3, #48	; 0x30
 8005d84:	443b      	add	r3, r7
 8005d86:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005d8a:	e000      	b.n	8005d8e <gen_numname+0xfe>
 8005d8c:	2120      	movs	r1, #32
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	627a      	str	r2, [r7, #36]	; 0x24
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	460a      	mov	r2, r1
 8005d9a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	2b07      	cmp	r3, #7
 8005da0:	d9e9      	bls.n	8005d76 <gen_numname+0xe6>
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	3730      	adds	r7, #48	; 0x30
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005db8:	230b      	movs	r3, #11
 8005dba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	0852      	lsrs	r2, r2, #1
 8005dc2:	01db      	lsls	r3, r3, #7
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	6079      	str	r1, [r7, #4]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1ed      	bne.n	8005dbc <sum_sfn+0x10>
	return sum;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fc88 	bl	8005714 <dir_sdi>
 8005e04:	4603      	mov	r3, r0
 8005e06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <dir_find+0x24>
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	e0a9      	b.n	8005f66 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e12:	23ff      	movs	r3, #255	; 0xff
 8005e14:	753b      	strb	r3, [r7, #20]
 8005e16:	7d3b      	ldrb	r3, [r7, #20]
 8005e18:	757b      	strb	r3, [r7, #21]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6938      	ldr	r0, [r7, #16]
 8005e2a:	f7ff f891 	bl	8004f50 <move_window>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8090 	bne.w	8005f5a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e42:	7dbb      	ldrb	r3, [r7, #22]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <dir_find+0x60>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	75fb      	strb	r3, [r7, #23]
 8005e4c:	e08a      	b.n	8005f64 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	330b      	adds	r3, #11
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7bfa      	ldrb	r2, [r7, #15]
 8005e60:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005e62:	7dbb      	ldrb	r3, [r7, #22]
 8005e64:	2be5      	cmp	r3, #229	; 0xe5
 8005e66:	d007      	beq.n	8005e78 <dir_find+0x8a>
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <dir_find+0x98>
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	d006      	beq.n	8005e86 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e78:	23ff      	movs	r3, #255	; 0xff
 8005e7a:	757b      	strb	r3, [r7, #21]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
 8005e84:	e05e      	b.n	8005f44 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b0f      	cmp	r3, #15
 8005e8a:	d136      	bne.n	8005efa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d154      	bne.n	8005f44 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005e9a:	7dbb      	ldrb	r3, [r7, #22]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00d      	beq.n	8005ec0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	7b5b      	ldrb	r3, [r3, #13]
 8005eaa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005eac:	7dbb      	ldrb	r3, [r7, #22]
 8005eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb2:	75bb      	strb	r3, [r7, #22]
 8005eb4:	7dbb      	ldrb	r3, [r7, #22]
 8005eb6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ec0:	7dba      	ldrb	r2, [r7, #22]
 8005ec2:	7d7b      	ldrb	r3, [r7, #21]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d115      	bne.n	8005ef4 <dir_find+0x106>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	330d      	adds	r3, #13
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	7d3a      	ldrb	r2, [r7, #20]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d10e      	bne.n	8005ef4 <dir_find+0x106>
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f7ff fdfd 	bl	8005ae0 <cmp_lfn>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <dir_find+0x106>
 8005eec:	7d7b      	ldrb	r3, [r7, #21]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e000      	b.n	8005ef6 <dir_find+0x108>
 8005ef4:	23ff      	movs	r3, #255	; 0xff
 8005ef6:	757b      	strb	r3, [r7, #21]
 8005ef8:	e024      	b.n	8005f44 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005efa:	7d7b      	ldrb	r3, [r7, #21]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <dir_find+0x126>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ff51 	bl	8005dac <sum_sfn>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	7d3b      	ldrb	r3, [r7, #20]
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d024      	beq.n	8005f5e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <dir_find+0x14a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a18      	ldr	r0, [r3, #32]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3324      	adds	r3, #36	; 0x24
 8005f2a:	220b      	movs	r2, #11
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f7fe fe1d 	bl	8004b6c <mem_cmp>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d014      	beq.n	8005f62 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f38:	23ff      	movs	r3, #255	; 0xff
 8005f3a:	757b      	strb	r3, [r7, #21]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005f44:	2100      	movs	r1, #0
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fc6d 	bl	8005826 <dir_next>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f43f af65 	beq.w	8005e22 <dir_find+0x34>
 8005f58:	e004      	b.n	8005f64 <dir_find+0x176>
		if (res != FR_OK) break;
 8005f5a:	bf00      	nop
 8005f5c:	e002      	b.n	8005f64 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005f5e:	bf00      	nop
 8005f60:	e000      	b.n	8005f64 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005f62:	bf00      	nop

	return res;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08c      	sub	sp, #48	; 0x30
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <dir_register+0x20>
 8005f8c:	2306      	movs	r3, #6
 8005f8e:	e0e0      	b.n	8006152 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005f90:	2300      	movs	r3, #0
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	e002      	b.n	8005f9c <dir_register+0x2c>
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	3301      	adds	r3, #1
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f4      	bne.n	8005f96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005fb2:	f107 030c 	add.w	r3, r7, #12
 8005fb6:	220c      	movs	r2, #12
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe fd9b 	bl	8004af4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d032      	beq.n	800602e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2240      	movs	r2, #64	; 0x40
 8005fcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd4:	e016      	b.n	8006004 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	f107 010c 	add.w	r1, r7, #12
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	f7ff fe53 	bl	8005c90 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff feff 	bl	8005dee <dir_find>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	3301      	adds	r3, #1
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2b63      	cmp	r3, #99	; 0x63
 8006008:	d9e5      	bls.n	8005fd6 <dir_register+0x66>
 800600a:	e000      	b.n	800600e <dir_register+0x9e>
			if (res != FR_OK) break;
 800600c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b64      	cmp	r3, #100	; 0x64
 8006012:	d101      	bne.n	8006018 <dir_register+0xa8>
 8006014:	2307      	movs	r3, #7
 8006016:	e09c      	b.n	8006152 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800601c:	2b04      	cmp	r3, #4
 800601e:	d002      	beq.n	8006026 <dir_register+0xb6>
 8006020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006024:	e095      	b.n	8006152 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006026:	7dfa      	ldrb	r2, [r7, #23]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <dir_register+0xd8>
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	330c      	adds	r3, #12
 800603c:	4a47      	ldr	r2, [pc, #284]	; (800615c <dir_register+0x1ec>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	089b      	lsrs	r3, r3, #2
 8006044:	3301      	adds	r3, #1
 8006046:	e000      	b.n	800604a <dir_register+0xda>
 8006048:	2301      	movs	r3, #1
 800604a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800604c:	6a39      	ldr	r1, [r7, #32]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fcbf 	bl	80059d2 <dir_alloc>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800605a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800605e:	2b00      	cmp	r3, #0
 8006060:	d148      	bne.n	80060f4 <dir_register+0x184>
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	3b01      	subs	r3, #1
 8006066:	623b      	str	r3, [r7, #32]
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d042      	beq.n	80060f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	015b      	lsls	r3, r3, #5
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff fb4a 	bl	8005714 <dir_sdi>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800608a:	2b00      	cmp	r3, #0
 800608c:	d132      	bne.n	80060f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3324      	adds	r3, #36	; 0x24
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fe8a 	bl	8005dac <sum_sfn>
 8006098:	4603      	mov	r3, r0
 800609a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	4619      	mov	r1, r3
 80060a2:	69f8      	ldr	r0, [r7, #28]
 80060a4:	f7fe ff54 	bl	8004f50 <move_window>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80060ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d11d      	bne.n	80060f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	6918      	ldr	r0, [r3, #16]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a19      	ldr	r1, [r3, #32]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	7efb      	ldrb	r3, [r7, #27]
 80060c4:	f7ff fd7c 	bl	8005bc0 <put_lfn>
				fs->wflag = 1;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	2201      	movs	r2, #1
 80060cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80060ce:	2100      	movs	r1, #0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff fba8 	bl	8005826 <dir_next>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80060dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d107      	bne.n	80060f4 <dir_register+0x184>
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1d5      	bne.n	800609c <dir_register+0x12c>
 80060f0:	e000      	b.n	80060f4 <dir_register+0x184>
				if (res != FR_OK) break;
 80060f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80060f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d128      	bne.n	800614e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	4619      	mov	r1, r3
 8006102:	69f8      	ldr	r0, [r7, #28]
 8006104:	f7fe ff24 	bl	8004f50 <move_window>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800610e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006112:	2b00      	cmp	r3, #0
 8006114:	d11b      	bne.n	800614e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	2220      	movs	r2, #32
 800611c:	2100      	movs	r1, #0
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe fd09 	bl	8004b36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a18      	ldr	r0, [r3, #32]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3324      	adds	r3, #36	; 0x24
 800612c:	220b      	movs	r2, #11
 800612e:	4619      	mov	r1, r3
 8006130:	f7fe fce0 	bl	8004af4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	330c      	adds	r3, #12
 8006140:	f002 0218 	and.w	r2, r2, #24
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2201      	movs	r2, #1
 800614c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800614e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006152:	4618      	mov	r0, r3
 8006154:	3730      	adds	r7, #48	; 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	4ec4ec4f 	.word	0x4ec4ec4f

08006160 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	61ba      	str	r2, [r7, #24]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4413      	add	r3, r2
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800618e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006190:	2b1f      	cmp	r3, #31
 8006192:	d940      	bls.n	8006216 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006196:	2b2f      	cmp	r3, #47	; 0x2f
 8006198:	d006      	beq.n	80061a8 <create_name+0x48>
 800619a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800619c:	2b5c      	cmp	r3, #92	; 0x5c
 800619e:	d110      	bne.n	80061c2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80061a0:	e002      	b.n	80061a8 <create_name+0x48>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	3301      	adds	r3, #1
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4413      	add	r3, r2
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b2f      	cmp	r3, #47	; 0x2f
 80061b2:	d0f6      	beq.n	80061a2 <create_name+0x42>
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b5c      	cmp	r3, #92	; 0x5c
 80061be:	d0f0      	beq.n	80061a2 <create_name+0x42>
			break;
 80061c0:	e02a      	b.n	8006218 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2bfe      	cmp	r3, #254	; 0xfe
 80061c6:	d901      	bls.n	80061cc <create_name+0x6c>
 80061c8:	2306      	movs	r3, #6
 80061ca:	e17d      	b.n	80064c8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80061cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80061d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d4:	2101      	movs	r1, #1
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fc14 	bl	8007a04 <ff_convert>
 80061dc:	4603      	mov	r3, r0
 80061de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <create_name+0x8a>
 80061e6:	2306      	movs	r3, #6
 80061e8:	e16e      	b.n	80064c8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80061ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ec:	2b7f      	cmp	r3, #127	; 0x7f
 80061ee:	d809      	bhi.n	8006204 <create_name+0xa4>
 80061f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061f2:	4619      	mov	r1, r3
 80061f4:	488d      	ldr	r0, [pc, #564]	; (800642c <create_name+0x2cc>)
 80061f6:	f7fe fce0 	bl	8004bba <chk_chr>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <create_name+0xa4>
 8006200:	2306      	movs	r3, #6
 8006202:	e161      	b.n	80064c8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	617a      	str	r2, [r7, #20]
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006212:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006214:	e7b4      	b.n	8006180 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006216:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	441a      	add	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006224:	2b1f      	cmp	r3, #31
 8006226:	d801      	bhi.n	800622c <create_name+0xcc>
 8006228:	2304      	movs	r3, #4
 800622a:	e000      	b.n	800622e <create_name+0xce>
 800622c:	2300      	movs	r3, #0
 800622e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006232:	e011      	b.n	8006258 <create_name+0xf8>
		w = lfn[di - 1];
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800623a:	3b01      	subs	r3, #1
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006248:	2b20      	cmp	r3, #32
 800624a:	d002      	beq.n	8006252 <create_name+0xf2>
 800624c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800624e:	2b2e      	cmp	r3, #46	; 0x2e
 8006250:	d106      	bne.n	8006260 <create_name+0x100>
		di--;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	3b01      	subs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ea      	bne.n	8006234 <create_name+0xd4>
 800625e:	e000      	b.n	8006262 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006260:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	2200      	movs	r2, #0
 800626c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <create_name+0x118>
 8006274:	2306      	movs	r3, #6
 8006276:	e127      	b.n	80064c8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	220b      	movs	r2, #11
 800627e:	2120      	movs	r1, #32
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fc58 	bl	8004b36 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e002      	b.n	8006292 <create_name+0x132>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	3301      	adds	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	2b20      	cmp	r3, #32
 800629e:	d0f5      	beq.n	800628c <create_name+0x12c>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	2b2e      	cmp	r3, #46	; 0x2e
 80062ac:	d0ee      	beq.n	800628c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <create_name+0x168>
 80062b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062b8:	f043 0303 	orr.w	r3, r3, #3
 80062bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80062c0:	e002      	b.n	80062c8 <create_name+0x168>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <create_name+0x182>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80062d4:	3b01      	subs	r3, #1
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	2b2e      	cmp	r3, #46	; 0x2e
 80062e0:	d1ef      	bne.n	80062c2 <create_name+0x162>

	i = b = 0; ni = 8;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062e8:	2300      	movs	r3, #0
 80062ea:	623b      	str	r3, [r7, #32]
 80062ec:	2308      	movs	r3, #8
 80062ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	61ba      	str	r2, [r7, #24]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8090 	beq.w	8006428 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800630a:	2b20      	cmp	r3, #32
 800630c:	d006      	beq.n	800631c <create_name+0x1bc>
 800630e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006310:	2b2e      	cmp	r3, #46	; 0x2e
 8006312:	d10a      	bne.n	800632a <create_name+0x1ca>
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	429a      	cmp	r2, r3
 800631a:	d006      	beq.n	800632a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800631c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006320:	f043 0303 	orr.w	r3, r3, #3
 8006324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006328:	e07d      	b.n	8006426 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	429a      	cmp	r2, r3
 8006330:	d203      	bcs.n	800633a <create_name+0x1da>
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	429a      	cmp	r2, r3
 8006338:	d123      	bne.n	8006382 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b0b      	cmp	r3, #11
 800633e:	d106      	bne.n	800634e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006344:	f043 0303 	orr.w	r3, r3, #3
 8006348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800634c:	e075      	b.n	800643a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d005      	beq.n	8006362 <create_name+0x202>
 8006356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800635a:	f043 0303 	orr.w	r3, r3, #3
 800635e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d866      	bhi.n	8006438 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	2308      	movs	r3, #8
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	230b      	movs	r3, #11
 8006374:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006376:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006380:	e051      	b.n	8006426 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006384:	2b7f      	cmp	r3, #127	; 0x7f
 8006386:	d914      	bls.n	80063b2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800638a:	2100      	movs	r1, #0
 800638c:	4618      	mov	r0, r3
 800638e:	f001 fb39 	bl	8007a04 <ff_convert>
 8006392:	4603      	mov	r3, r0
 8006394:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <create_name+0x246>
 800639c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800639e:	3b80      	subs	r3, #128	; 0x80
 80063a0:	4a23      	ldr	r2, [pc, #140]	; (8006430 <create_name+0x2d0>)
 80063a2:	5cd3      	ldrb	r3, [r2, r3]
 80063a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80063a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063aa:	f043 0302 	orr.w	r3, r3, #2
 80063ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80063b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <create_name+0x268>
 80063b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ba:	4619      	mov	r1, r3
 80063bc:	481d      	ldr	r0, [pc, #116]	; (8006434 <create_name+0x2d4>)
 80063be:	f7fe fbfc 	bl	8004bba <chk_chr>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80063c8:	235f      	movs	r3, #95	; 0x5f
 80063ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063d0:	f043 0303 	orr.w	r3, r3, #3
 80063d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063d8:	e01b      	b.n	8006412 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80063da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d909      	bls.n	80063f4 <create_name+0x294>
 80063e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063e2:	2b5a      	cmp	r3, #90	; 0x5a
 80063e4:	d806      	bhi.n	80063f4 <create_name+0x294>
					b |= 2;
 80063e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063ea:	f043 0302 	orr.w	r3, r3, #2
 80063ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063f2:	e00e      	b.n	8006412 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80063f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063f6:	2b60      	cmp	r3, #96	; 0x60
 80063f8:	d90b      	bls.n	8006412 <create_name+0x2b2>
 80063fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063fc:	2b7a      	cmp	r3, #122	; 0x7a
 80063fe:	d808      	bhi.n	8006412 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006404:	f043 0301 	orr.w	r3, r3, #1
 8006408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800640c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800640e:	3b20      	subs	r3, #32
 8006410:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	623a      	str	r2, [r7, #32]
 8006418:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800641a:	b2d1      	uxtb	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	4413      	add	r3, r2
 8006420:	460a      	mov	r2, r1
 8006422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006426:	e763      	b.n	80062f0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006428:	bf00      	nop
 800642a:	e006      	b.n	800643a <create_name+0x2da>
 800642c:	0800c65c 	.word	0x0800c65c
 8006430:	0800c6b4 	.word	0x0800c6b4
 8006434:	0800c668 	.word	0x0800c668
			if (si > di) break;			/* No extension */
 8006438:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006440:	2be5      	cmp	r3, #229	; 0xe5
 8006442:	d103      	bne.n	800644c <create_name+0x2ec>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2205      	movs	r2, #5
 8006448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b08      	cmp	r3, #8
 8006450:	d104      	bne.n	800645c <create_name+0x2fc>
 8006452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800645c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b0c      	cmp	r3, #12
 8006466:	d005      	beq.n	8006474 <create_name+0x314>
 8006468:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	2b03      	cmp	r3, #3
 8006472:	d105      	bne.n	8006480 <create_name+0x320>
 8006474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006478:	f043 0302 	orr.w	r3, r3, #2
 800647c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d117      	bne.n	80064bc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800648c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <create_name+0x344>
 8006498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800649c:	f043 0310 	orr.w	r3, r3, #16
 80064a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80064a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d105      	bne.n	80064bc <create_name+0x35c>
 80064b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064b4:	f043 0308 	orr.w	r3, r3, #8
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80064c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80064c6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	; 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064e4:	e002      	b.n	80064ec <follow_path+0x1c>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b2f      	cmp	r3, #47	; 0x2f
 80064f2:	d0f8      	beq.n	80064e6 <follow_path+0x16>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b5c      	cmp	r3, #92	; 0x5c
 80064fa:	d0f4      	beq.n	80064e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2200      	movs	r2, #0
 8006500:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b1f      	cmp	r3, #31
 8006508:	d80a      	bhi.n	8006520 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006512:	2100      	movs	r1, #0
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff f8fd 	bl	8005714 <dir_sdi>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]
 800651e:	e048      	b.n	80065b2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006520:	463b      	mov	r3, r7
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fe1b 	bl	8006160 <create_name>
 800652a:	4603      	mov	r3, r0
 800652c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d139      	bne.n	80065a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fc5a 	bl	8005dee <dir_find>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006544:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b04      	cmp	r3, #4
 8006550:	d12c      	bne.n	80065ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d127      	bne.n	80065ac <follow_path+0xdc>
 800655c:	2305      	movs	r3, #5
 800655e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006560:	e024      	b.n	80065ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d121      	bne.n	80065b0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	799b      	ldrb	r3, [r3, #6]
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006578:	2305      	movs	r3, #5
 800657a:	75fb      	strb	r3, [r7, #23]
 800657c:	e019      	b.n	80065b2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	8992      	ldrh	r2, [r2, #12]
 800658c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006590:	fb00 f202 	mul.w	r2, r0, r2
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	440b      	add	r3, r1
 8006598:	4619      	mov	r1, r3
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fa60 	bl	8005a60 <ld_clust>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065a6:	e7bb      	b.n	8006520 <follow_path+0x50>
			if (res != FR_OK) break;
 80065a8:	bf00      	nop
 80065aa:	e002      	b.n	80065b2 <follow_path+0xe2>
				break;
 80065ac:	bf00      	nop
 80065ae:	e000      	b.n	80065b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065b0:	bf00      	nop
			}
		}
	}

	return res;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d031      	beq.n	8006636 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e002      	b.n	80065e0 <get_ldnumber+0x24>
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	3301      	adds	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b1f      	cmp	r3, #31
 80065e6:	d903      	bls.n	80065f0 <get_ldnumber+0x34>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b3a      	cmp	r3, #58	; 0x3a
 80065ee:	d1f4      	bne.n	80065da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b3a      	cmp	r3, #58	; 0x3a
 80065f6:	d11c      	bne.n	8006632 <get_ldnumber+0x76>
			tp = *path;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	60fa      	str	r2, [r7, #12]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	3b30      	subs	r3, #48	; 0x30
 8006608:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b09      	cmp	r3, #9
 800660e:	d80e      	bhi.n	800662e <get_ldnumber+0x72>
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	429a      	cmp	r2, r3
 8006616:	d10a      	bne.n	800662e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d107      	bne.n	800662e <get_ldnumber+0x72>
					vol = (int)i;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	3301      	adds	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	e002      	b.n	8006638 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006636:	693b      	ldr	r3, [r7, #16]
}
 8006638:	4618      	mov	r0, r3
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	70da      	strb	r2, [r3, #3]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f04f 32ff 	mov.w	r2, #4294967295
 800665a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fe fc76 	bl	8004f50 <move_window>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <check_fs+0x2a>
 800666a:	2304      	movs	r3, #4
 800666c:	e038      	b.n	80066e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3338      	adds	r3, #56	; 0x38
 8006672:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe f9ba 	bl	80049f0 <ld_word>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <check_fs+0x48>
 8006688:	2303      	movs	r3, #3
 800668a:	e029      	b.n	80066e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006692:	2be9      	cmp	r3, #233	; 0xe9
 8006694:	d009      	beq.n	80066aa <check_fs+0x66>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800669c:	2beb      	cmp	r3, #235	; 0xeb
 800669e:	d11e      	bne.n	80066de <check_fs+0x9a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066a6:	2b90      	cmp	r3, #144	; 0x90
 80066a8:	d119      	bne.n	80066de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3338      	adds	r3, #56	; 0x38
 80066ae:	3336      	adds	r3, #54	; 0x36
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe f9b5 	bl	8004a20 <ld_dword>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066bc:	4a0a      	ldr	r2, [pc, #40]	; (80066e8 <check_fs+0xa4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <check_fs+0x82>
 80066c2:	2300      	movs	r3, #0
 80066c4:	e00c      	b.n	80066e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3338      	adds	r3, #56	; 0x38
 80066ca:	3352      	adds	r3, #82	; 0x52
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe f9a7 	bl	8004a20 <ld_dword>
 80066d2:	4603      	mov	r3, r0
 80066d4:	4a05      	ldr	r2, [pc, #20]	; (80066ec <check_fs+0xa8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d101      	bne.n	80066de <check_fs+0x9a>
 80066da:	2300      	movs	r3, #0
 80066dc:	e000      	b.n	80066e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066de:	2302      	movs	r3, #2
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	00544146 	.word	0x00544146
 80066ec:	33544146 	.word	0x33544146

080066f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b096      	sub	sp, #88	; 0x58
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff ff59 	bl	80065bc <get_ldnumber>
 800670a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800670c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670e:	2b00      	cmp	r3, #0
 8006710:	da01      	bge.n	8006716 <find_volume+0x26>
 8006712:	230b      	movs	r3, #11
 8006714:	e265      	b.n	8006be2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006716:	4a9f      	ldr	r2, [pc, #636]	; (8006994 <find_volume+0x2a4>)
 8006718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <find_volume+0x3a>
 8006726:	230c      	movs	r3, #12
 8006728:	e25b      	b.n	8006be2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800672e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01a      	beq.n	8006776 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe f8b5 	bl	80048b4 <disk_status>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10c      	bne.n	8006776 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d007      	beq.n	8006772 <find_volume+0x82>
 8006762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800676e:	230a      	movs	r3, #10
 8006770:	e237      	b.n	8006be2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006772:	2300      	movs	r3, #0
 8006774:	e235      	b.n	8006be2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	2200      	movs	r2, #0
 800677a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe f8ad 	bl	80048e8 <disk_initialize>
 800678e:	4603      	mov	r3, r0
 8006790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80067a0:	2303      	movs	r3, #3
 80067a2:	e21e      	b.n	8006be2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <find_volume+0xca>
 80067aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80067b6:	230a      	movs	r3, #10
 80067b8:	e213      	b.n	8006be2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	7858      	ldrb	r0, [r3, #1]
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	330c      	adds	r3, #12
 80067c2:	461a      	mov	r2, r3
 80067c4:	2102      	movs	r1, #2
 80067c6:	f7fe f8f5 	bl	80049b4 <disk_ioctl>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <find_volume+0xe4>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e206      	b.n	8006be2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	899b      	ldrh	r3, [r3, #12]
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067dc:	d80d      	bhi.n	80067fa <find_volume+0x10a>
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	899b      	ldrh	r3, [r3, #12]
 80067e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e6:	d308      	bcc.n	80067fa <find_volume+0x10a>
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	899b      	ldrh	r3, [r3, #12]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	899b      	ldrh	r3, [r3, #12]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <find_volume+0x10e>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e1f1      	b.n	8006be2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006804:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006806:	f7ff ff1d 	bl	8006644 <check_fs>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006814:	2b02      	cmp	r3, #2
 8006816:	d149      	bne.n	80068ac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006818:	2300      	movs	r3, #0
 800681a:	643b      	str	r3, [r7, #64]	; 0x40
 800681c:	e01e      	b.n	800685c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800682c:	4413      	add	r3, r2
 800682e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	3304      	adds	r3, #4
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d006      	beq.n	8006848 <find_volume+0x158>
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	3308      	adds	r3, #8
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe f8ee 	bl	8004a20 <ld_dword>
 8006844:	4602      	mov	r2, r0
 8006846:	e000      	b.n	800684a <find_volume+0x15a>
 8006848:	2200      	movs	r2, #0
 800684a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	3358      	adds	r3, #88	; 0x58
 8006850:	443b      	add	r3, r7
 8006852:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006858:	3301      	adds	r3, #1
 800685a:	643b      	str	r3, [r7, #64]	; 0x40
 800685c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800685e:	2b03      	cmp	r3, #3
 8006860:	d9dd      	bls.n	800681e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006862:	2300      	movs	r3, #0
 8006864:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <find_volume+0x182>
 800686c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686e:	3b01      	subs	r3, #1
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	3358      	adds	r3, #88	; 0x58
 8006878:	443b      	add	r3, r7
 800687a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800687e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <find_volume+0x1a2>
 8006886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800688a:	f7ff fedb 	bl	8006644 <check_fs>
 800688e:	4603      	mov	r3, r0
 8006890:	e000      	b.n	8006894 <find_volume+0x1a4>
 8006892:	2303      	movs	r3, #3
 8006894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800689c:	2b01      	cmp	r3, #1
 800689e:	d905      	bls.n	80068ac <find_volume+0x1bc>
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	3301      	adds	r3, #1
 80068a4:	643b      	str	r3, [r7, #64]	; 0x40
 80068a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d9e2      	bls.n	8006872 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d101      	bne.n	80068b8 <find_volume+0x1c8>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e194      	b.n	8006be2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d901      	bls.n	80068c4 <find_volume+0x1d4>
 80068c0:	230d      	movs	r3, #13
 80068c2:	e18e      	b.n	8006be2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	3338      	adds	r3, #56	; 0x38
 80068c8:	330b      	adds	r3, #11
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe f890 	bl	80049f0 <ld_word>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	899b      	ldrh	r3, [r3, #12]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <find_volume+0x1f0>
 80068dc:	230d      	movs	r3, #13
 80068de:	e180      	b.n	8006be2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	3338      	adds	r3, #56	; 0x38
 80068e4:	3316      	adds	r3, #22
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe f882 	bl	80049f0 <ld_word>
 80068ec:	4603      	mov	r3, r0
 80068ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80068f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <find_volume+0x214>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	3338      	adds	r3, #56	; 0x38
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe f88f 	bl	8004a20 <ld_dword>
 8006902:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006908:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	789b      	ldrb	r3, [r3, #2]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d005      	beq.n	8006928 <find_volume+0x238>
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	789b      	ldrb	r3, [r3, #2]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d001      	beq.n	8006928 <find_volume+0x238>
 8006924:	230d      	movs	r3, #13
 8006926:	e15c      	b.n	8006be2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	789b      	ldrb	r3, [r3, #2]
 800692c:	461a      	mov	r2, r3
 800692e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800693c:	b29a      	uxth	r2, r3
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	895b      	ldrh	r3, [r3, #10]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <find_volume+0x26c>
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	895b      	ldrh	r3, [r3, #10]
 800694e:	461a      	mov	r2, r3
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	895b      	ldrh	r3, [r3, #10]
 8006954:	3b01      	subs	r3, #1
 8006956:	4013      	ands	r3, r2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <find_volume+0x270>
 800695c:	230d      	movs	r3, #13
 800695e:	e140      	b.n	8006be2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	3338      	adds	r3, #56	; 0x38
 8006964:	3311      	adds	r3, #17
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe f842 	bl	80049f0 <ld_word>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	891b      	ldrh	r3, [r3, #8]
 8006978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800697a:	8992      	ldrh	r2, [r2, #12]
 800697c:	0952      	lsrs	r2, r2, #5
 800697e:	b292      	uxth	r2, r2
 8006980:	fbb3 f1f2 	udiv	r1, r3, r2
 8006984:	fb01 f202 	mul.w	r2, r1, r2
 8006988:	1a9b      	subs	r3, r3, r2
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <find_volume+0x2a8>
 8006990:	230d      	movs	r3, #13
 8006992:	e126      	b.n	8006be2 <find_volume+0x4f2>
 8006994:	20002424 	.word	0x20002424

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	3338      	adds	r3, #56	; 0x38
 800699c:	3313      	adds	r3, #19
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe f826 	bl	80049f0 <ld_word>
 80069a4:	4603      	mov	r3, r0
 80069a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <find_volume+0x2cc>
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	3338      	adds	r3, #56	; 0x38
 80069b2:	3320      	adds	r3, #32
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe f833 	bl	8004a20 <ld_dword>
 80069ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	3338      	adds	r3, #56	; 0x38
 80069c0:	330e      	adds	r3, #14
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe f814 	bl	80049f0 <ld_word>
 80069c8:	4603      	mov	r3, r0
 80069ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <find_volume+0x2e6>
 80069d2:	230d      	movs	r3, #13
 80069d4:	e105      	b.n	8006be2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069da:	4413      	add	r3, r2
 80069dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069de:	8911      	ldrh	r1, [r2, #8]
 80069e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e2:	8992      	ldrh	r2, [r2, #12]
 80069e4:	0952      	lsrs	r2, r2, #5
 80069e6:	b292      	uxth	r2, r2
 80069e8:	fbb1 f2f2 	udiv	r2, r1, r2
 80069ec:	b292      	uxth	r2, r2
 80069ee:	4413      	add	r3, r2
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80069f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d201      	bcs.n	80069fe <find_volume+0x30e>
 80069fa:	230d      	movs	r3, #13
 80069fc:	e0f1      	b.n	8006be2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80069fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a06:	8952      	ldrh	r2, [r2, #10]
 8006a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <find_volume+0x328>
 8006a14:	230d      	movs	r3, #13
 8006a16:	e0e4      	b.n	8006be2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d802      	bhi.n	8006a2e <find_volume+0x33e>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d802      	bhi.n	8006a3e <find_volume+0x34e>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a50:	441a      	add	r2, r3
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006a56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	441a      	add	r2, r3
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d11e      	bne.n	8006aa6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	3338      	adds	r3, #56	; 0x38
 8006a6c:	332a      	adds	r3, #42	; 0x2a
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fd ffbe 	bl	80049f0 <ld_word>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <find_volume+0x38e>
 8006a7a:	230d      	movs	r3, #13
 8006a7c:	e0b1      	b.n	8006be2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	891b      	ldrh	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <find_volume+0x39a>
 8006a86:	230d      	movs	r3, #13
 8006a88:	e0ab      	b.n	8006be2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	3338      	adds	r3, #56	; 0x38
 8006a8e:	332c      	adds	r3, #44	; 0x2c
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd ffc5 	bl	8004a20 <ld_dword>
 8006a96:	4602      	mov	r2, r0
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa4:	e01f      	b.n	8006ae6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	891b      	ldrh	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <find_volume+0x3c2>
 8006aae:	230d      	movs	r3, #13
 8006ab0:	e097      	b.n	8006be2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab8:	441a      	add	r2, r3
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006abe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d103      	bne.n	8006ace <find_volume+0x3de>
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	e00a      	b.n	8006ae4 <find_volume+0x3f4>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	69da      	ldr	r2, [r3, #28]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	085a      	lsrs	r2, r3, #1
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	6a1a      	ldr	r2, [r3, #32]
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	899b      	ldrh	r3, [r3, #12]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af2:	440b      	add	r3, r1
 8006af4:	3b01      	subs	r3, #1
 8006af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006af8:	8989      	ldrh	r1, [r1, #12]
 8006afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d201      	bcs.n	8006b06 <find_volume+0x416>
 8006b02:	230d      	movs	r3, #13
 8006b04:	e06d      	b.n	8006be2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	619a      	str	r2, [r3, #24]
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d149      	bne.n	8006bb8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	3338      	adds	r3, #56	; 0x38
 8006b28:	3330      	adds	r3, #48	; 0x30
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fd ff60 	bl	80049f0 <ld_word>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d140      	bne.n	8006bb8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b3e:	f7fe fa07 	bl	8004f50 <move_window>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d137      	bne.n	8006bb8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	3338      	adds	r3, #56	; 0x38
 8006b52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fd ff4a 	bl	80049f0 <ld_word>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d127      	bne.n	8006bb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	3338      	adds	r3, #56	; 0x38
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fd ff57 	bl	8004a20 <ld_dword>
 8006b72:	4603      	mov	r3, r0
 8006b74:	4a1d      	ldr	r2, [pc, #116]	; (8006bec <find_volume+0x4fc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d11e      	bne.n	8006bb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	3338      	adds	r3, #56	; 0x38
 8006b7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fd ff4c 	bl	8004a20 <ld_dword>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4a19      	ldr	r2, [pc, #100]	; (8006bf0 <find_volume+0x500>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d113      	bne.n	8006bb8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	3338      	adds	r3, #56	; 0x38
 8006b94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fd ff41 	bl	8004a20 <ld_dword>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	3338      	adds	r3, #56	; 0x38
 8006ba8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fd ff37 	bl	8004a20 <ld_dword>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006bbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <find_volume+0x504>)
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <find_volume+0x504>)
 8006bca:	801a      	strh	r2, [r3, #0]
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <find_volume+0x504>)
 8006bce:	881a      	ldrh	r2, [r3, #0]
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <find_volume+0x508>)
 8006bd8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006bda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bdc:	f7fe f950 	bl	8004e80 <clear_lock>
#endif
	return FR_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3758      	adds	r7, #88	; 0x58
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	41615252 	.word	0x41615252
 8006bf0:	61417272 	.word	0x61417272
 8006bf4:	20002428 	.word	0x20002428
 8006bf8:	2000244c 	.word	0x2000244c

08006bfc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c06:	2309      	movs	r3, #9
 8006c08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01c      	beq.n	8006c4a <validate+0x4e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d018      	beq.n	8006c4a <validate+0x4e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d013      	beq.n	8006c4a <validate+0x4e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	889a      	ldrh	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	88db      	ldrh	r3, [r3, #6]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d10c      	bne.n	8006c4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd fe3c 	bl	80048b4 <disk_status>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <validate+0x4e>
			res = FR_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <validate+0x5a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	e000      	b.n	8006c58 <validate+0x5c>
 8006c56:	2300      	movs	r3, #0
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	6013      	str	r3, [r2, #0]
	return res;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c7a:	f107 0310 	add.w	r3, r7, #16
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fc9c 	bl	80065bc <get_ldnumber>
 8006c84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da01      	bge.n	8006c90 <f_mount+0x28>
 8006c8c:	230b      	movs	r3, #11
 8006c8e:	e02b      	b.n	8006ce8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <f_mount+0x88>)
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ca0:	69b8      	ldr	r0, [r7, #24]
 8006ca2:	f7fe f8ed 	bl	8004e80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	490d      	ldr	r1, [pc, #52]	; (8006cf0 <f_mount+0x88>)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <f_mount+0x66>
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d001      	beq.n	8006cd2 <f_mount+0x6a>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e00a      	b.n	8006ce8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006cd2:	f107 010c 	add.w	r1, r7, #12
 8006cd6:	f107 0308 	add.w	r3, r7, #8
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fd07 	bl	80066f0 <find_volume>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20002424 	.word	0x20002424

08006cf4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b09a      	sub	sp, #104	; 0x68
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <f_open+0x18>
 8006d08:	2309      	movs	r3, #9
 8006d0a:	e1bb      	b.n	8007084 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d14:	79fa      	ldrb	r2, [r7, #7]
 8006d16:	f107 0114 	add.w	r1, r7, #20
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fce6 	bl	80066f0 <find_volume>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f040 819f 	bne.w	8007072 <f_open+0x37e>
		dj.obj.fs = fs;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	f107 0318 	add.w	r3, r7, #24
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fbc5 	bl	80064d0 <follow_path>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d11a      	bne.n	8006d8a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da03      	bge.n	8006d66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d5e:	2306      	movs	r3, #6
 8006d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006d64:	e011      	b.n	8006d8a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bf14      	ite	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	2300      	moveq	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	f107 0318 	add.w	r3, r7, #24
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd ff36 	bl	8004bf0 <chk_lock>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	f003 031c 	and.w	r3, r3, #28
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d07f      	beq.n	8006e94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006d94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d017      	beq.n	8006dcc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d10e      	bne.n	8006dc2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006da4:	f7fd ff80 	bl	8004ca8 <enq_lock>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d006      	beq.n	8006dbc <f_open+0xc8>
 8006dae:	f107 0318 	add.w	r3, r7, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff f8dc 	bl	8005f70 <dir_register>
 8006db8:	4603      	mov	r3, r0
 8006dba:	e000      	b.n	8006dbe <f_open+0xca>
 8006dbc:	2312      	movs	r3, #18
 8006dbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	f043 0308 	orr.w	r3, r3, #8
 8006dc8:	71fb      	strb	r3, [r7, #7]
 8006dca:	e010      	b.n	8006dee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006dcc:	7fbb      	ldrb	r3, [r7, #30]
 8006dce:	f003 0311 	and.w	r3, r3, #17
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <f_open+0xea>
					res = FR_DENIED;
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ddc:	e007      	b.n	8006dee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <f_open+0xfa>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d168      	bne.n	8006ec8 <f_open+0x1d4>
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d063      	beq.n	8006ec8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006e00:	f7fd fcfa 	bl	80047f8 <get_fattime>
 8006e04:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	330e      	adds	r3, #14
 8006e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fd fe45 	bl	8004a9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	3316      	adds	r3, #22
 8006e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fe3f 	bl	8004a9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	330b      	adds	r3, #11
 8006e22:	2220      	movs	r2, #32
 8006e24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fe17 	bl	8005a60 <ld_clust>
 8006e32:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fe2f 	bl	8005a9e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	331c      	adds	r3, #28
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fd fe28 	bl	8004a9c <st_dword>
					fs->wflag = 1;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d037      	beq.n	8006ec8 <f_open+0x1d4>
						dw = fs->winsect;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006e5e:	f107 0318 	add.w	r3, r7, #24
 8006e62:	2200      	movs	r2, #0
 8006e64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fb1f 	bl	80054aa <remove_chain>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d126      	bne.n	8006ec8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe f866 	bl	8004f50 <move_window>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e8e:	3a01      	subs	r2, #1
 8006e90:	615a      	str	r2, [r3, #20]
 8006e92:	e019      	b.n	8006ec8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d115      	bne.n	8006ec8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e9c:	7fbb      	ldrb	r3, [r7, #30]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <f_open+0x1ba>
					res = FR_NO_FILE;
 8006ea6:	2304      	movs	r3, #4
 8006ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006eac:	e00c      	b.n	8006ec8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <f_open+0x1d4>
 8006eb8:	7fbb      	ldrb	r3, [r7, #30]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <f_open+0x1d4>
						res = FR_DENIED;
 8006ec2:	2307      	movs	r3, #7
 8006ec4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d128      	bne.n	8006f22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	f107 0318 	add.w	r3, r7, #24
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fd feef 	bl	8004cec <inc_lock>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <f_open+0x22e>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f040 80a3 	bne.w	8007072 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fd94 	bl	8005a60 <ld_clust>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	331c      	adds	r3, #28
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fd fd6c 	bl	8004a20 <ld_dword>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	88da      	ldrh	r2, [r3, #6]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	79fa      	ldrb	r2, [r7, #7]
 8006f66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3330      	adds	r3, #48	; 0x30
 8006f7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fd fdd6 	bl	8004b36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d06e      	beq.n	8007072 <f_open+0x37e>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d06a      	beq.n	8007072 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	895b      	ldrh	r3, [r3, #10]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	899b      	ldrh	r3, [r3, #12]
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fc0:	e016      	b.n	8006ff0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe f87f 	bl	80050ca <get_fat>
 8006fcc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d802      	bhi.n	8006fda <f_open+0x2e6>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d102      	bne.n	8006fe8 <f_open+0x2f4>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <f_open+0x30c>
 8006ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d8e0      	bhi.n	8006fc2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007004:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800700a:	2b00      	cmp	r3, #0
 800700c:	d131      	bne.n	8007072 <f_open+0x37e>
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	899b      	ldrh	r3, [r3, #12]
 8007012:	461a      	mov	r2, r3
 8007014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007016:	fbb3 f1f2 	udiv	r1, r3, r2
 800701a:	fb01 f202 	mul.w	r2, r1, r2
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d026      	beq.n	8007072 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe f82f 	bl	800508c <clust2sect>
 800702e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <f_open+0x34a>
						res = FR_INT_ERR;
 8007036:	2302      	movs	r3, #2
 8007038:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800703c:	e019      	b.n	8007072 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	899b      	ldrh	r3, [r3, #12]
 8007042:	461a      	mov	r2, r3
 8007044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007046:	fbb3 f2f2 	udiv	r2, r3, r2
 800704a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	7858      	ldrb	r0, [r3, #1]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1a      	ldr	r2, [r3, #32]
 8007060:	2301      	movs	r3, #1
 8007062:	f7fd fc67 	bl	8004934 <disk_read>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <f_open+0x37e>
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007072:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <f_open+0x38c>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007080:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007084:	4618      	mov	r0, r3
 8007086:	3768      	adds	r7, #104	; 0x68
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	; 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f107 0210 	add.w	r2, r7, #16
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fda5 	bl	8006bfc <validate>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d107      	bne.n	80070d0 <f_write+0x44>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	7d5b      	ldrb	r3, [r3, #21]
 80070c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80070c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <f_write+0x4a>
 80070d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070d4:	e16a      	b.n	80073ac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	7d1b      	ldrb	r3, [r3, #20]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <f_write+0x5a>
 80070e2:	2307      	movs	r3, #7
 80070e4:	e162      	b.n	80073ac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	f080 814c 	bcs.w	8007390 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	43db      	mvns	r3, r3
 80070fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007100:	e146      	b.n	8007390 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	8992      	ldrh	r2, [r2, #12]
 800710a:	fbb3 f1f2 	udiv	r1, r3, r2
 800710e:	fb01 f202 	mul.w	r2, r1, r2
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	f040 80f1 	bne.w	80072fc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	8992      	ldrh	r2, [r2, #12]
 8007122:	fbb3 f3f2 	udiv	r3, r3, r2
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	8952      	ldrh	r2, [r2, #10]
 800712a:	3a01      	subs	r2, #1
 800712c:	4013      	ands	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d143      	bne.n	80071be <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10c      	bne.n	8007158 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d11a      	bne.n	8007180 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2100      	movs	r1, #0
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fa10 	bl	8005574 <create_chain>
 8007154:	62b8      	str	r0, [r7, #40]	; 0x28
 8007156:	e013      	b.n	8007180 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d007      	beq.n	8007170 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	4619      	mov	r1, r3
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7fe fa9c 	bl	80056a4 <clmt_clust>
 800716c:	62b8      	str	r0, [r7, #40]	; 0x28
 800716e:	e007      	b.n	8007180 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f7fe f9fb 	bl	8005574 <create_chain>
 800717e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8109 	beq.w	800739a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2b01      	cmp	r3, #1
 800718c:	d104      	bne.n	8007198 <f_write+0x10c>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2202      	movs	r2, #2
 8007192:	755a      	strb	r2, [r3, #21]
 8007194:	2302      	movs	r3, #2
 8007196:	e109      	b.n	80073ac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d104      	bne.n	80071aa <f_write+0x11e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	755a      	strb	r2, [r3, #21]
 80071a6:	2301      	movs	r3, #1
 80071a8:	e100      	b.n	80073ac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <f_write+0x132>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	7d1b      	ldrb	r3, [r3, #20]
 80071c2:	b25b      	sxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da18      	bge.n	80071fa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	7858      	ldrb	r0, [r3, #1]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1a      	ldr	r2, [r3, #32]
 80071d6:	2301      	movs	r3, #1
 80071d8:	f7fd fbcc 	bl	8004974 <disk_write>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <f_write+0x160>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	755a      	strb	r2, [r3, #21]
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0df      	b.n	80073ac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	7d1b      	ldrb	r3, [r3, #20]
 80071f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7fd ff42 	bl	800508c <clust2sect>
 8007208:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <f_write+0x18e>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2202      	movs	r2, #2
 8007214:	755a      	strb	r2, [r3, #21]
 8007216:	2302      	movs	r3, #2
 8007218:	e0c8      	b.n	80073ac <f_write+0x320>
			sect += csect;
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	4413      	add	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	899b      	ldrh	r3, [r3, #12]
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	fbb3 f3f2 	udiv	r3, r3, r2
 800722e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d043      	beq.n	80072be <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	4413      	add	r3, r2
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	8952      	ldrh	r2, [r2, #10]
 8007240:	4293      	cmp	r3, r2
 8007242:	d905      	bls.n	8007250 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	895b      	ldrh	r3, [r3, #10]
 8007248:	461a      	mov	r2, r3
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	7858      	ldrb	r0, [r3, #1]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	69f9      	ldr	r1, [r7, #28]
 800725a:	f7fd fb8b 	bl	8004974 <disk_write>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <f_write+0x1e2>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	755a      	strb	r2, [r3, #21]
 800726a:	2301      	movs	r3, #1
 800726c:	e09e      	b.n	80073ac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	6a3a      	ldr	r2, [r7, #32]
 8007278:	429a      	cmp	r2, r3
 800727a:	d918      	bls.n	80072ae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1a      	ldr	r2, [r3, #32]
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	8992      	ldrh	r2, [r2, #12]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	18d1      	adds	r1, r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	899b      	ldrh	r3, [r3, #12]
 800729a:	461a      	mov	r2, r3
 800729c:	f7fd fc2a 	bl	8004af4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	7d1b      	ldrb	r3, [r3, #20]
 80072a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	899b      	ldrh	r3, [r3, #12]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80072bc:	e04b      	b.n	8007356 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d016      	beq.n	80072f6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d210      	bcs.n	80072f6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	7858      	ldrb	r0, [r3, #1]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072de:	2301      	movs	r3, #1
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	f7fd fb27 	bl	8004934 <disk_read>
 80072e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	755a      	strb	r2, [r3, #21]
 80072f2:	2301      	movs	r3, #1
 80072f4:	e05a      	b.n	80073ac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	899b      	ldrh	r3, [r3, #12]
 8007300:	4618      	mov	r0, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	8992      	ldrh	r2, [r2, #12]
 800730a:	fbb3 f1f2 	udiv	r1, r3, r2
 800730e:	fb01 f202 	mul.w	r2, r1, r2
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	1ac3      	subs	r3, r0, r3
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d901      	bls.n	8007324 <f_write+0x298>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	8992      	ldrh	r2, [r2, #12]
 8007332:	fbb3 f0f2 	udiv	r0, r3, r2
 8007336:	fb00 f202 	mul.w	r2, r0, r2
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	440b      	add	r3, r1
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	69f9      	ldr	r1, [r7, #28]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fd fbd6 	bl	8004af4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	7d1b      	ldrb	r3, [r3, #20]
 800734c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007350:	b2da      	uxtb	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	4413      	add	r3, r2
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	619a      	str	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	429a      	cmp	r2, r3
 8007374:	bf38      	it	cc
 8007376:	461a      	movcc	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	60da      	str	r2, [r3, #12]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	441a      	add	r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f aeb5 	bne.w	8007102 <f_write+0x76>
 8007398:	e000      	b.n	800739c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800739a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7d1b      	ldrb	r3, [r3, #20]
 80073a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3730      	adds	r7, #48	; 0x30
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f107 0208 	add.w	r2, r7, #8
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff fc19 	bl	8006bfc <validate>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d168      	bne.n	80074a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	7d1b      	ldrb	r3, [r3, #20]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d062      	beq.n	80074a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	7d1b      	ldrb	r3, [r3, #20]
 80073e4:	b25b      	sxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da15      	bge.n	8007416 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	7858      	ldrb	r0, [r3, #1]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1a      	ldr	r2, [r3, #32]
 80073f8:	2301      	movs	r3, #1
 80073fa:	f7fd fabb 	bl	8004974 <disk_write>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <f_sync+0x54>
 8007404:	2301      	movs	r3, #1
 8007406:	e04f      	b.n	80074a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	7d1b      	ldrb	r3, [r3, #20]
 800740c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007410:	b2da      	uxtb	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007416:	f7fd f9ef 	bl	80047f8 <get_fattime>
 800741a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fd fd93 	bl	8004f50 <move_window>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d138      	bne.n	80074a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	330b      	adds	r3, #11
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	330b      	adds	r3, #11
 8007444:	f042 0220 	orr.w	r2, r2, #32
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	461a      	mov	r2, r3
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	f7fe fb21 	bl	8005a9e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f103 021c 	add.w	r2, r3, #28
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fd fb17 	bl	8004a9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3316      	adds	r3, #22
 8007472:	6939      	ldr	r1, [r7, #16]
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd fb11 	bl	8004a9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3312      	adds	r3, #18
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd faf0 	bl	8004a66 <st_word>
					fs->wflag = 1;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2201      	movs	r2, #1
 800748a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4618      	mov	r0, r3
 8007490:	f7fd fd8c 	bl	8004fac <sync_fs>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7d1b      	ldrb	r3, [r3, #20]
 800749c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff ff7b 	bl	80073b4 <f_sync>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d118      	bne.n	80074fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f107 0208 	add.w	r2, r7, #8
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fb93 	bl	8006bfc <validate>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fd fc8f 	bl	8004e08 <dec_lock>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b090      	sub	sp, #64	; 0x40
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f107 0208 	add.w	r2, r7, #8
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fb70 	bl	8006bfc <validate>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007522:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <f_lseek+0x2e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7d5b      	ldrb	r3, [r3, #21]
 800752e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <f_lseek+0x3c>
 800753a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800753e:	e201      	b.n	8007944 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80d9 	beq.w	80076fc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d15a      	bne.n	8007608 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	627a      	str	r2, [r7, #36]	; 0x24
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	2302      	movs	r3, #2
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	2b00      	cmp	r3, #0
 8007570:	d03a      	beq.n	80075e8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	2300      	movs	r3, #0
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	3302      	adds	r3, #2
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	3301      	adds	r3, #1
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd fd9b 	bl	80050ca <get_fat>
 8007594:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	2b01      	cmp	r3, #1
 800759a:	d804      	bhi.n	80075a6 <f_lseek+0xa2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	755a      	strb	r2, [r3, #21]
 80075a2:	2302      	movs	r3, #2
 80075a4:	e1ce      	b.n	8007944 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d104      	bne.n	80075b8 <f_lseek+0xb4>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	755a      	strb	r2, [r3, #21]
 80075b4:	2301      	movs	r3, #1
 80075b6:	e1c5      	b.n	8007944 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075be:	429a      	cmp	r2, r3
 80075c0:	d0de      	beq.n	8007580 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80075c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d809      	bhi.n	80075de <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	1d1a      	adds	r2, r3, #4
 80075ce:	627a      	str	r2, [r7, #36]	; 0x24
 80075d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	1d1a      	adds	r2, r3, #4
 80075d8:	627a      	str	r2, [r7, #36]	; 0x24
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3c4      	bcc.n	8007572 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80075f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d803      	bhi.n	8007600 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e19f      	b.n	8007940 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007600:	2311      	movs	r3, #17
 8007602:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007606:	e19b      	b.n	8007940 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d902      	bls.n	8007618 <f_lseek+0x114>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 818d 	beq.w	8007940 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	3b01      	subs	r3, #1
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7fe f839 	bl	80056a4 <clmt_clust>
 8007632:	4602      	mov	r2, r0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7fd fd23 	bl	800508c <clust2sect>
 8007646:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <f_lseek+0x154>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	755a      	strb	r2, [r3, #21]
 8007654:	2302      	movs	r3, #2
 8007656:	e175      	b.n	8007944 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	3b01      	subs	r3, #1
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	8992      	ldrh	r2, [r2, #12]
 8007660:	fbb3 f3f2 	udiv	r3, r3, r2
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	8952      	ldrh	r2, [r2, #10]
 8007668:	3a01      	subs	r2, #1
 800766a:	4013      	ands	r3, r2
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	4413      	add	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	8992      	ldrh	r2, [r2, #12]
 800767a:	fbb3 f1f2 	udiv	r1, r3, r2
 800767e:	fb01 f202 	mul.w	r2, r1, r2
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 815b 	beq.w	8007940 <f_lseek+0x43c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	429a      	cmp	r2, r3
 8007692:	f000 8155 	beq.w	8007940 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7d1b      	ldrb	r3, [r3, #20]
 800769a:	b25b      	sxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	da18      	bge.n	80076d2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	7858      	ldrb	r0, [r3, #1]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1a      	ldr	r2, [r3, #32]
 80076ae:	2301      	movs	r3, #1
 80076b0:	f7fd f960 	bl	8004974 <disk_write>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <f_lseek+0x1c0>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	755a      	strb	r2, [r3, #21]
 80076c0:	2301      	movs	r3, #1
 80076c2:	e13f      	b.n	8007944 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7d1b      	ldrb	r3, [r3, #20]
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	7858      	ldrb	r0, [r3, #1]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076dc:	2301      	movs	r3, #1
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	f7fd f928 	bl	8004934 <disk_read>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <f_lseek+0x1f0>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	755a      	strb	r2, [r3, #21]
 80076f0:	2301      	movs	r3, #1
 80076f2:	e127      	b.n	8007944 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	621a      	str	r2, [r3, #32]
 80076fa:	e121      	b.n	8007940 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d908      	bls.n	8007718 <f_lseek+0x214>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7d1b      	ldrb	r3, [r3, #20]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007726:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80b5 	beq.w	800789a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	895b      	ldrh	r3, [r3, #10]
 8007734:	461a      	mov	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	899b      	ldrh	r3, [r3, #12]
 800773a:	fb02 f303 	mul.w	r3, r2, r3
 800773e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d01b      	beq.n	800777e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	1e5a      	subs	r2, r3, #1
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	1e59      	subs	r1, r3, #1
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800775a:	429a      	cmp	r2, r3
 800775c:	d30f      	bcc.n	800777e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	1e5a      	subs	r2, r3, #1
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	425b      	negs	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	63bb      	str	r3, [r7, #56]	; 0x38
 800777c:	e022      	b.n	80077c4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	2b00      	cmp	r3, #0
 8007788:	d119      	bne.n	80077be <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f7fd fef0 	bl	8005574 <create_chain>
 8007794:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007798:	2b01      	cmp	r3, #1
 800779a:	d104      	bne.n	80077a6 <f_lseek+0x2a2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	755a      	strb	r2, [r3, #21]
 80077a2:	2302      	movs	r3, #2
 80077a4:	e0ce      	b.n	8007944 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d104      	bne.n	80077b8 <f_lseek+0x2b4>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	755a      	strb	r2, [r3, #21]
 80077b4:	2301      	movs	r3, #1
 80077b6:	e0c5      	b.n	8007944 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077bc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077c2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d067      	beq.n	800789a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80077ca:	e03a      	b.n	8007842 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7d1b      	ldrb	r3, [r3, #20]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fd febf 	bl	8005574 <create_chain>
 80077f6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d108      	bne.n	8007810 <f_lseek+0x30c>
							ofs = 0; break;
 80077fe:	2300      	movs	r3, #0
 8007800:	603b      	str	r3, [r7, #0]
 8007802:	e022      	b.n	800784a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007808:	4618      	mov	r0, r3
 800780a:	f7fd fc5e 	bl	80050ca <get_fat>
 800780e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d104      	bne.n	8007822 <f_lseek+0x31e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	755a      	strb	r2, [r3, #21]
 800781e:	2301      	movs	r3, #1
 8007820:	e090      	b.n	8007944 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	2b01      	cmp	r3, #1
 8007826:	d904      	bls.n	8007832 <f_lseek+0x32e>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800782e:	429a      	cmp	r2, r3
 8007830:	d304      	bcc.n	800783c <f_lseek+0x338>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	755a      	strb	r2, [r3, #21]
 8007838:	2302      	movs	r3, #2
 800783a:	e083      	b.n	8007944 <f_lseek+0x440>
					fp->clust = clst;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007840:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	429a      	cmp	r2, r3
 8007848:	d8c0      	bhi.n	80077cc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	441a      	add	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	899b      	ldrh	r3, [r3, #12]
 800785a:	461a      	mov	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007862:	fb01 f202 	mul.w	r2, r1, r2
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d016      	beq.n	800789a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007870:	4618      	mov	r0, r3
 8007872:	f7fd fc0b 	bl	800508c <clust2sect>
 8007876:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <f_lseek+0x384>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	755a      	strb	r2, [r3, #21]
 8007884:	2302      	movs	r3, #2
 8007886:	e05d      	b.n	8007944 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	899b      	ldrh	r3, [r3, #12]
 800788c:	461a      	mov	r2, r3
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	fbb3 f3f2 	udiv	r3, r3, r2
 8007894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007896:	4413      	add	r3, r2
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d90a      	bls.n	80078bc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7d1b      	ldrb	r3, [r3, #20]
 80078b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	8992      	ldrh	r2, [r2, #12]
 80078c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80078c8:	fb01 f202 	mul.w	r2, r1, r2
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d036      	beq.n	8007940 <f_lseek+0x43c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d8:	429a      	cmp	r2, r3
 80078da:	d031      	beq.n	8007940 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7d1b      	ldrb	r3, [r3, #20]
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da18      	bge.n	8007918 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	7858      	ldrb	r0, [r3, #1]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1a      	ldr	r2, [r3, #32]
 80078f4:	2301      	movs	r3, #1
 80078f6:	f7fd f83d 	bl	8004974 <disk_write>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <f_lseek+0x406>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	755a      	strb	r2, [r3, #21]
 8007906:	2301      	movs	r3, #1
 8007908:	e01c      	b.n	8007944 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007912:	b2da      	uxtb	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	7858      	ldrb	r0, [r3, #1]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007922:	2301      	movs	r3, #1
 8007924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007926:	f7fd f805 	bl	8004934 <disk_read>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <f_lseek+0x436>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	755a      	strb	r2, [r3, #21]
 8007936:	2301      	movs	r3, #1
 8007938:	e004      	b.n	8007944 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800793e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007944:	4618      	mov	r0, r3
 8007946:	3740      	adds	r7, #64	; 0x40
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007962:	4b1f      	ldr	r3, [pc, #124]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 8007964:	7a5b      	ldrb	r3, [r3, #9]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d131      	bne.n	80079d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800796c:	4b1c      	ldr	r3, [pc, #112]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 800796e:	7a5b      	ldrb	r3, [r3, #9]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	4b1a      	ldr	r3, [pc, #104]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 8007976:	2100      	movs	r1, #0
 8007978:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800797a:	4b19      	ldr	r3, [pc, #100]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 800797c:	7a5b      	ldrb	r3, [r3, #9]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 800798c:	7a5b      	ldrb	r3, [r3, #9]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 8007994:	4413      	add	r3, r2
 8007996:	79fa      	ldrb	r2, [r7, #7]
 8007998:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 800799c:	7a5b      	ldrb	r3, [r3, #9]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	b2d1      	uxtb	r1, r2
 80079a4:	4a0e      	ldr	r2, [pc, #56]	; (80079e0 <FATFS_LinkDriverEx+0x94>)
 80079a6:	7251      	strb	r1, [r2, #9]
 80079a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079aa:	7dbb      	ldrb	r3, [r7, #22]
 80079ac:	3330      	adds	r3, #48	; 0x30
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	3301      	adds	r3, #1
 80079b8:	223a      	movs	r2, #58	; 0x3a
 80079ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	3302      	adds	r3, #2
 80079c0:	222f      	movs	r2, #47	; 0x2f
 80079c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3303      	adds	r3, #3
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	2000264c 	.word	0x2000264c

080079e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079ee:	2200      	movs	r2, #0
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ffaa 	bl	800794c <FATFS_LinkDriverEx>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007a10:	88fb      	ldrh	r3, [r7, #6]
 8007a12:	2b7f      	cmp	r3, #127	; 0x7f
 8007a14:	d802      	bhi.n	8007a1c <ff_convert+0x18>
		c = chr;
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	81fb      	strh	r3, [r7, #14]
 8007a1a:	e025      	b.n	8007a68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	2bff      	cmp	r3, #255	; 0xff
 8007a26:	d805      	bhi.n	8007a34 <ff_convert+0x30>
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	3b80      	subs	r3, #128	; 0x80
 8007a2c:	4a12      	ldr	r2, [pc, #72]	; (8007a78 <ff_convert+0x74>)
 8007a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a32:	e000      	b.n	8007a36 <ff_convert+0x32>
 8007a34:	2300      	movs	r3, #0
 8007a36:	81fb      	strh	r3, [r7, #14]
 8007a38:	e016      	b.n	8007a68 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	81fb      	strh	r3, [r7, #14]
 8007a3e:	e009      	b.n	8007a54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007a40:	89fb      	ldrh	r3, [r7, #14]
 8007a42:	4a0d      	ldr	r2, [pc, #52]	; (8007a78 <ff_convert+0x74>)
 8007a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d006      	beq.n	8007a5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007a4e:	89fb      	ldrh	r3, [r7, #14]
 8007a50:	3301      	adds	r3, #1
 8007a52:	81fb      	strh	r3, [r7, #14]
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	2b7f      	cmp	r3, #127	; 0x7f
 8007a58:	d9f2      	bls.n	8007a40 <ff_convert+0x3c>
 8007a5a:	e000      	b.n	8007a5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007a5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007a5e:	89fb      	ldrh	r3, [r7, #14]
 8007a60:	3380      	adds	r3, #128	; 0x80
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007a68:	89fb      	ldrh	r3, [r7, #14]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	0800c744 	.word	0x0800c744

08007a7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8c:	d201      	bcs.n	8007a92 <ff_wtoupper+0x16>
 8007a8e:	4b3e      	ldr	r3, [pc, #248]	; (8007b88 <ff_wtoupper+0x10c>)
 8007a90:	e000      	b.n	8007a94 <ff_wtoupper+0x18>
 8007a92:	4b3e      	ldr	r3, [pc, #248]	; (8007b8c <ff_wtoupper+0x110>)
 8007a94:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	1c9a      	adds	r2, r3, #2
 8007a9a:	617a      	str	r2, [r7, #20]
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007aa0:	8a7b      	ldrh	r3, [r7, #18]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d068      	beq.n	8007b78 <ff_wtoupper+0xfc>
 8007aa6:	88fa      	ldrh	r2, [r7, #6]
 8007aa8:	8a7b      	ldrh	r3, [r7, #18]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d364      	bcc.n	8007b78 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	1c9a      	adds	r2, r3, #2
 8007ab2:	617a      	str	r2, [r7, #20]
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	823b      	strh	r3, [r7, #16]
 8007ab8:	8a3b      	ldrh	r3, [r7, #16]
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	81fb      	strh	r3, [r7, #14]
 8007abe:	8a3b      	ldrh	r3, [r7, #16]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	8a79      	ldrh	r1, [r7, #18]
 8007ac8:	8a3b      	ldrh	r3, [r7, #16]
 8007aca:	440b      	add	r3, r1
 8007acc:	429a      	cmp	r2, r3
 8007ace:	da49      	bge.n	8007b64 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d84f      	bhi.n	8007b76 <ff_wtoupper+0xfa>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <ff_wtoupper+0x60>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b13 	.word	0x08007b13
 8007ae4:	08007b29 	.word	0x08007b29
 8007ae8:	08007b31 	.word	0x08007b31
 8007aec:	08007b39 	.word	0x08007b39
 8007af0:	08007b41 	.word	0x08007b41
 8007af4:	08007b49 	.word	0x08007b49
 8007af8:	08007b51 	.word	0x08007b51
 8007afc:	08007b59 	.word	0x08007b59
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007b00:	88fa      	ldrh	r2, [r7, #6]
 8007b02:	8a7b      	ldrh	r3, [r7, #18]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	80fb      	strh	r3, [r7, #6]
 8007b10:	e027      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007b12:	88fa      	ldrh	r2, [r7, #6]
 8007b14:	8a7b      	ldrh	r3, [r7, #18]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	88fa      	ldrh	r2, [r7, #6]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	80fb      	strh	r3, [r7, #6]
 8007b26:	e01c      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	3b10      	subs	r3, #16
 8007b2c:	80fb      	strh	r3, [r7, #6]
 8007b2e:	e018      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	3b20      	subs	r3, #32
 8007b34:	80fb      	strh	r3, [r7, #6]
 8007b36:	e014      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	3b30      	subs	r3, #48	; 0x30
 8007b3c:	80fb      	strh	r3, [r7, #6]
 8007b3e:	e010      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	3b1a      	subs	r3, #26
 8007b44:	80fb      	strh	r3, [r7, #6]
 8007b46:	e00c      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	80fb      	strh	r3, [r7, #6]
 8007b4e:	e008      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	3b50      	subs	r3, #80	; 0x50
 8007b54:	80fb      	strh	r3, [r7, #6]
 8007b56:	e004      	b.n	8007b62 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007b5e:	80fb      	strh	r3, [r7, #6]
 8007b60:	bf00      	nop
			}
			break;
 8007b62:	e008      	b.n	8007b76 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d195      	bne.n	8007a96 <ff_wtoupper+0x1a>
 8007b6a:	8a3b      	ldrh	r3, [r7, #16]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4413      	add	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007b74:	e78f      	b.n	8007a96 <ff_wtoupper+0x1a>
			break;
 8007b76:	bf00      	nop
	}

	return chr;
 8007b78:	88fb      	ldrh	r3, [r7, #6]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	0800c844 	.word	0x0800c844
 8007b8c:	0800ca38 	.word	0x0800ca38

08007b90 <__errno>:
 8007b90:	4b01      	ldr	r3, [pc, #4]	; (8007b98 <__errno+0x8>)
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20000024 	.word	0x20000024

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4d0d      	ldr	r5, [pc, #52]	; (8007bd4 <__libc_init_array+0x38>)
 8007ba0:	4c0d      	ldr	r4, [pc, #52]	; (8007bd8 <__libc_init_array+0x3c>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	4d0b      	ldr	r5, [pc, #44]	; (8007bdc <__libc_init_array+0x40>)
 8007bae:	4c0c      	ldr	r4, [pc, #48]	; (8007be0 <__libc_init_array+0x44>)
 8007bb0:	f004 fd00 	bl	800c5b4 <_init>
 8007bb4:	1b64      	subs	r4, r4, r5
 8007bb6:	10a4      	asrs	r4, r4, #2
 8007bb8:	2600      	movs	r6, #0
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	0800cfac 	.word	0x0800cfac
 8007bd8:	0800cfac 	.word	0x0800cfac
 8007bdc:	0800cfac 	.word	0x0800cfac
 8007be0:	0800cfb0 	.word	0x0800cfb0

08007be4 <memset>:
 8007be4:	4402      	add	r2, r0
 8007be6:	4603      	mov	r3, r0
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d100      	bne.n	8007bee <memset+0xa>
 8007bec:	4770      	bx	lr
 8007bee:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf2:	e7f9      	b.n	8007be8 <memset+0x4>

08007bf4 <__cvt>:
 8007bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	ec55 4b10 	vmov	r4, r5, d0
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	460e      	mov	r6, r1
 8007c00:	4619      	mov	r1, r3
 8007c02:	462b      	mov	r3, r5
 8007c04:	bfbb      	ittet	lt
 8007c06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c0a:	461d      	movlt	r5, r3
 8007c0c:	2300      	movge	r3, #0
 8007c0e:	232d      	movlt	r3, #45	; 0x2d
 8007c10:	700b      	strb	r3, [r1, #0]
 8007c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c18:	4691      	mov	r9, r2
 8007c1a:	f023 0820 	bic.w	r8, r3, #32
 8007c1e:	bfbc      	itt	lt
 8007c20:	4622      	movlt	r2, r4
 8007c22:	4614      	movlt	r4, r2
 8007c24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c28:	d005      	beq.n	8007c36 <__cvt+0x42>
 8007c2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c2e:	d100      	bne.n	8007c32 <__cvt+0x3e>
 8007c30:	3601      	adds	r6, #1
 8007c32:	2102      	movs	r1, #2
 8007c34:	e000      	b.n	8007c38 <__cvt+0x44>
 8007c36:	2103      	movs	r1, #3
 8007c38:	ab03      	add	r3, sp, #12
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	ab02      	add	r3, sp, #8
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	ec45 4b10 	vmov	d0, r4, r5
 8007c44:	4653      	mov	r3, sl
 8007c46:	4632      	mov	r2, r6
 8007c48:	f001 fee2 	bl	8009a10 <_dtoa_r>
 8007c4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c50:	4607      	mov	r7, r0
 8007c52:	d102      	bne.n	8007c5a <__cvt+0x66>
 8007c54:	f019 0f01 	tst.w	r9, #1
 8007c58:	d022      	beq.n	8007ca0 <__cvt+0xac>
 8007c5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c5e:	eb07 0906 	add.w	r9, r7, r6
 8007c62:	d110      	bne.n	8007c86 <__cvt+0x92>
 8007c64:	783b      	ldrb	r3, [r7, #0]
 8007c66:	2b30      	cmp	r3, #48	; 0x30
 8007c68:	d10a      	bne.n	8007c80 <__cvt+0x8c>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7f8 ff49 	bl	8000b08 <__aeabi_dcmpeq>
 8007c76:	b918      	cbnz	r0, 8007c80 <__cvt+0x8c>
 8007c78:	f1c6 0601 	rsb	r6, r6, #1
 8007c7c:	f8ca 6000 	str.w	r6, [sl]
 8007c80:	f8da 3000 	ldr.w	r3, [sl]
 8007c84:	4499      	add	r9, r3
 8007c86:	2200      	movs	r2, #0
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7f8 ff3b 	bl	8000b08 <__aeabi_dcmpeq>
 8007c92:	b108      	cbz	r0, 8007c98 <__cvt+0xa4>
 8007c94:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c98:	2230      	movs	r2, #48	; 0x30
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	454b      	cmp	r3, r9
 8007c9e:	d307      	bcc.n	8007cb0 <__cvt+0xbc>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ca4:	1bdb      	subs	r3, r3, r7
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	b004      	add	sp, #16
 8007cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb0:	1c59      	adds	r1, r3, #1
 8007cb2:	9103      	str	r1, [sp, #12]
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	e7f0      	b.n	8007c9a <__cvt+0xa6>

08007cb8 <__exponent>:
 8007cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	bfb8      	it	lt
 8007cc0:	4249      	neglt	r1, r1
 8007cc2:	f803 2b02 	strb.w	r2, [r3], #2
 8007cc6:	bfb4      	ite	lt
 8007cc8:	222d      	movlt	r2, #45	; 0x2d
 8007cca:	222b      	movge	r2, #43	; 0x2b
 8007ccc:	2909      	cmp	r1, #9
 8007cce:	7042      	strb	r2, [r0, #1]
 8007cd0:	dd2a      	ble.n	8007d28 <__exponent+0x70>
 8007cd2:	f10d 0407 	add.w	r4, sp, #7
 8007cd6:	46a4      	mov	ip, r4
 8007cd8:	270a      	movs	r7, #10
 8007cda:	46a6      	mov	lr, r4
 8007cdc:	460a      	mov	r2, r1
 8007cde:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ce2:	fb07 1516 	mls	r5, r7, r6, r1
 8007ce6:	3530      	adds	r5, #48	; 0x30
 8007ce8:	2a63      	cmp	r2, #99	; 0x63
 8007cea:	f104 34ff 	add.w	r4, r4, #4294967295
 8007cee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	dcf1      	bgt.n	8007cda <__exponent+0x22>
 8007cf6:	3130      	adds	r1, #48	; 0x30
 8007cf8:	f1ae 0502 	sub.w	r5, lr, #2
 8007cfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d00:	1c44      	adds	r4, r0, #1
 8007d02:	4629      	mov	r1, r5
 8007d04:	4561      	cmp	r1, ip
 8007d06:	d30a      	bcc.n	8007d1e <__exponent+0x66>
 8007d08:	f10d 0209 	add.w	r2, sp, #9
 8007d0c:	eba2 020e 	sub.w	r2, r2, lr
 8007d10:	4565      	cmp	r5, ip
 8007d12:	bf88      	it	hi
 8007d14:	2200      	movhi	r2, #0
 8007d16:	4413      	add	r3, r2
 8007d18:	1a18      	subs	r0, r3, r0
 8007d1a:	b003      	add	sp, #12
 8007d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d26:	e7ed      	b.n	8007d04 <__exponent+0x4c>
 8007d28:	2330      	movs	r3, #48	; 0x30
 8007d2a:	3130      	adds	r1, #48	; 0x30
 8007d2c:	7083      	strb	r3, [r0, #2]
 8007d2e:	70c1      	strb	r1, [r0, #3]
 8007d30:	1d03      	adds	r3, r0, #4
 8007d32:	e7f1      	b.n	8007d18 <__exponent+0x60>

08007d34 <_printf_float>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	ed2d 8b02 	vpush	{d8}
 8007d3c:	b08d      	sub	sp, #52	; 0x34
 8007d3e:	460c      	mov	r4, r1
 8007d40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d44:	4616      	mov	r6, r2
 8007d46:	461f      	mov	r7, r3
 8007d48:	4605      	mov	r5, r0
 8007d4a:	f003 f975 	bl	800b038 <_localeconv_r>
 8007d4e:	f8d0 a000 	ldr.w	sl, [r0]
 8007d52:	4650      	mov	r0, sl
 8007d54:	f7f8 fa5c 	bl	8000210 <strlen>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	9305      	str	r3, [sp, #20]
 8007d60:	f8d8 3000 	ldr.w	r3, [r8]
 8007d64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d68:	3307      	adds	r3, #7
 8007d6a:	f023 0307 	bic.w	r3, r3, #7
 8007d6e:	f103 0208 	add.w	r2, r3, #8
 8007d72:	f8c8 2000 	str.w	r2, [r8]
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d8c:	ee08 0a10 	vmov	s16, r0
 8007d90:	4b9f      	ldr	r3, [pc, #636]	; (8008010 <_printf_float+0x2dc>)
 8007d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d96:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9a:	f7f8 fee7 	bl	8000b6c <__aeabi_dcmpun>
 8007d9e:	bb88      	cbnz	r0, 8007e04 <_printf_float+0xd0>
 8007da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da4:	4b9a      	ldr	r3, [pc, #616]	; (8008010 <_printf_float+0x2dc>)
 8007da6:	f04f 32ff 	mov.w	r2, #4294967295
 8007daa:	f7f8 fec1 	bl	8000b30 <__aeabi_dcmple>
 8007dae:	bb48      	cbnz	r0, 8007e04 <_printf_float+0xd0>
 8007db0:	2200      	movs	r2, #0
 8007db2:	2300      	movs	r3, #0
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 feb0 	bl	8000b1c <__aeabi_dcmplt>
 8007dbc:	b110      	cbz	r0, 8007dc4 <_printf_float+0x90>
 8007dbe:	232d      	movs	r3, #45	; 0x2d
 8007dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc4:	4b93      	ldr	r3, [pc, #588]	; (8008014 <_printf_float+0x2e0>)
 8007dc6:	4894      	ldr	r0, [pc, #592]	; (8008018 <_printf_float+0x2e4>)
 8007dc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dcc:	bf94      	ite	ls
 8007dce:	4698      	movls	r8, r3
 8007dd0:	4680      	movhi	r8, r0
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	9b05      	ldr	r3, [sp, #20]
 8007dd8:	f023 0204 	bic.w	r2, r3, #4
 8007ddc:	6022      	str	r2, [r4, #0]
 8007dde:	f04f 0900 	mov.w	r9, #0
 8007de2:	9700      	str	r7, [sp, #0]
 8007de4:	4633      	mov	r3, r6
 8007de6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007de8:	4621      	mov	r1, r4
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 f9d8 	bl	80081a0 <_printf_common>
 8007df0:	3001      	adds	r0, #1
 8007df2:	f040 8090 	bne.w	8007f16 <_printf_float+0x1e2>
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	b00d      	add	sp, #52	; 0x34
 8007dfc:	ecbd 8b02 	vpop	{d8}
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	4642      	mov	r2, r8
 8007e06:	464b      	mov	r3, r9
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	f7f8 feae 	bl	8000b6c <__aeabi_dcmpun>
 8007e10:	b140      	cbz	r0, 8007e24 <_printf_float+0xf0>
 8007e12:	464b      	mov	r3, r9
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfbc      	itt	lt
 8007e18:	232d      	movlt	r3, #45	; 0x2d
 8007e1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e1e:	487f      	ldr	r0, [pc, #508]	; (800801c <_printf_float+0x2e8>)
 8007e20:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <_printf_float+0x2ec>)
 8007e22:	e7d1      	b.n	8007dc8 <_printf_float+0x94>
 8007e24:	6863      	ldr	r3, [r4, #4]
 8007e26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e2a:	9206      	str	r2, [sp, #24]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	d13f      	bne.n	8007eb0 <_printf_float+0x17c>
 8007e30:	2306      	movs	r3, #6
 8007e32:	6063      	str	r3, [r4, #4]
 8007e34:	9b05      	ldr	r3, [sp, #20]
 8007e36:	6861      	ldr	r1, [r4, #4]
 8007e38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9303      	str	r3, [sp, #12]
 8007e40:	ab0a      	add	r3, sp, #40	; 0x28
 8007e42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e46:	ab09      	add	r3, sp, #36	; 0x24
 8007e48:	ec49 8b10 	vmov	d0, r8, r9
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff fecd 	bl	8007bf4 <__cvt>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e5e:	2b47      	cmp	r3, #71	; 0x47
 8007e60:	4680      	mov	r8, r0
 8007e62:	d108      	bne.n	8007e76 <_printf_float+0x142>
 8007e64:	1cc8      	adds	r0, r1, #3
 8007e66:	db02      	blt.n	8007e6e <_printf_float+0x13a>
 8007e68:	6863      	ldr	r3, [r4, #4]
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	dd41      	ble.n	8007ef2 <_printf_float+0x1be>
 8007e6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e72:	fa5f fb8b 	uxtb.w	fp, fp
 8007e76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e7a:	d820      	bhi.n	8007ebe <_printf_float+0x18a>
 8007e7c:	3901      	subs	r1, #1
 8007e7e:	465a      	mov	r2, fp
 8007e80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e84:	9109      	str	r1, [sp, #36]	; 0x24
 8007e86:	f7ff ff17 	bl	8007cb8 <__exponent>
 8007e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e8c:	1813      	adds	r3, r2, r0
 8007e8e:	2a01      	cmp	r2, #1
 8007e90:	4681      	mov	r9, r0
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	dc02      	bgt.n	8007e9c <_printf_float+0x168>
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	07d2      	lsls	r2, r2, #31
 8007e9a:	d501      	bpl.n	8007ea0 <_printf_float+0x16c>
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d09c      	beq.n	8007de2 <_printf_float+0xae>
 8007ea8:	232d      	movs	r3, #45	; 0x2d
 8007eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eae:	e798      	b.n	8007de2 <_printf_float+0xae>
 8007eb0:	9a06      	ldr	r2, [sp, #24]
 8007eb2:	2a47      	cmp	r2, #71	; 0x47
 8007eb4:	d1be      	bne.n	8007e34 <_printf_float+0x100>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1bc      	bne.n	8007e34 <_printf_float+0x100>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7b9      	b.n	8007e32 <_printf_float+0xfe>
 8007ebe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ec2:	d118      	bne.n	8007ef6 <_printf_float+0x1c2>
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	6863      	ldr	r3, [r4, #4]
 8007ec8:	dd0b      	ble.n	8007ee2 <_printf_float+0x1ae>
 8007eca:	6121      	str	r1, [r4, #16]
 8007ecc:	b913      	cbnz	r3, 8007ed4 <_printf_float+0x1a0>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	07d0      	lsls	r0, r2, #31
 8007ed2:	d502      	bpl.n	8007eda <_printf_float+0x1a6>
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	440b      	add	r3, r1
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	65a1      	str	r1, [r4, #88]	; 0x58
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	e7de      	b.n	8007ea0 <_printf_float+0x16c>
 8007ee2:	b913      	cbnz	r3, 8007eea <_printf_float+0x1b6>
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	07d2      	lsls	r2, r2, #31
 8007ee8:	d501      	bpl.n	8007eee <_printf_float+0x1ba>
 8007eea:	3302      	adds	r3, #2
 8007eec:	e7f4      	b.n	8007ed8 <_printf_float+0x1a4>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7f2      	b.n	8007ed8 <_printf_float+0x1a4>
 8007ef2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	db05      	blt.n	8007f08 <_printf_float+0x1d4>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	6121      	str	r1, [r4, #16]
 8007f00:	07d8      	lsls	r0, r3, #31
 8007f02:	d5ea      	bpl.n	8007eda <_printf_float+0x1a6>
 8007f04:	1c4b      	adds	r3, r1, #1
 8007f06:	e7e7      	b.n	8007ed8 <_printf_float+0x1a4>
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	bfd4      	ite	le
 8007f0c:	f1c1 0202 	rsble	r2, r1, #2
 8007f10:	2201      	movgt	r2, #1
 8007f12:	4413      	add	r3, r2
 8007f14:	e7e0      	b.n	8007ed8 <_printf_float+0x1a4>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	055a      	lsls	r2, r3, #21
 8007f1a:	d407      	bmi.n	8007f2c <_printf_float+0x1f8>
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	4642      	mov	r2, r8
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	d12c      	bne.n	8007f84 <_printf_float+0x250>
 8007f2a:	e764      	b.n	8007df6 <_printf_float+0xc2>
 8007f2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f30:	f240 80e0 	bls.w	80080f4 <_printf_float+0x3c0>
 8007f34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f7f8 fde4 	bl	8000b08 <__aeabi_dcmpeq>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d034      	beq.n	8007fae <_printf_float+0x27a>
 8007f44:	4a37      	ldr	r2, [pc, #220]	; (8008024 <_printf_float+0x2f0>)
 8007f46:	2301      	movs	r3, #1
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f af51 	beq.w	8007df6 <_printf_float+0xc2>
 8007f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	db02      	blt.n	8007f62 <_printf_float+0x22e>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	07d8      	lsls	r0, r3, #31
 8007f60:	d510      	bpl.n	8007f84 <_printf_float+0x250>
 8007f62:	ee18 3a10 	vmov	r3, s16
 8007f66:	4652      	mov	r2, sl
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af41 	beq.w	8007df6 <_printf_float+0xc2>
 8007f74:	f04f 0800 	mov.w	r8, #0
 8007f78:	f104 091a 	add.w	r9, r4, #26
 8007f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	4543      	cmp	r3, r8
 8007f82:	dc09      	bgt.n	8007f98 <_printf_float+0x264>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	079b      	lsls	r3, r3, #30
 8007f88:	f100 8105 	bmi.w	8008196 <_printf_float+0x462>
 8007f8c:	68e0      	ldr	r0, [r4, #12]
 8007f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f90:	4298      	cmp	r0, r3
 8007f92:	bfb8      	it	lt
 8007f94:	4618      	movlt	r0, r3
 8007f96:	e730      	b.n	8007dfa <_printf_float+0xc6>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	464a      	mov	r2, r9
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af27 	beq.w	8007df6 <_printf_float+0xc2>
 8007fa8:	f108 0801 	add.w	r8, r8, #1
 8007fac:	e7e6      	b.n	8007f7c <_printf_float+0x248>
 8007fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dc39      	bgt.n	8008028 <_printf_float+0x2f4>
 8007fb4:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <_printf_float+0x2f0>)
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af19 	beq.w	8007df6 <_printf_float+0xc2>
 8007fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d102      	bne.n	8007fd2 <_printf_float+0x29e>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	07d9      	lsls	r1, r3, #31
 8007fd0:	d5d8      	bpl.n	8007f84 <_printf_float+0x250>
 8007fd2:	ee18 3a10 	vmov	r3, s16
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af09 	beq.w	8007df6 <_printf_float+0xc2>
 8007fe4:	f04f 0900 	mov.w	r9, #0
 8007fe8:	f104 0a1a 	add.w	sl, r4, #26
 8007fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fee:	425b      	negs	r3, r3
 8007ff0:	454b      	cmp	r3, r9
 8007ff2:	dc01      	bgt.n	8007ff8 <_printf_float+0x2c4>
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff6:	e792      	b.n	8007f1e <_printf_float+0x1ea>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f aef7 	beq.w	8007df6 <_printf_float+0xc2>
 8008008:	f109 0901 	add.w	r9, r9, #1
 800800c:	e7ee      	b.n	8007fec <_printf_float+0x2b8>
 800800e:	bf00      	nop
 8008010:	7fefffff 	.word	0x7fefffff
 8008014:	0800caf8 	.word	0x0800caf8
 8008018:	0800cafc 	.word	0x0800cafc
 800801c:	0800cb04 	.word	0x0800cb04
 8008020:	0800cb00 	.word	0x0800cb00
 8008024:	0800cb08 	.word	0x0800cb08
 8008028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800802a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800802c:	429a      	cmp	r2, r3
 800802e:	bfa8      	it	ge
 8008030:	461a      	movge	r2, r3
 8008032:	2a00      	cmp	r2, #0
 8008034:	4691      	mov	r9, r2
 8008036:	dc37      	bgt.n	80080a8 <_printf_float+0x374>
 8008038:	f04f 0b00 	mov.w	fp, #0
 800803c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008040:	f104 021a 	add.w	r2, r4, #26
 8008044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008046:	9305      	str	r3, [sp, #20]
 8008048:	eba3 0309 	sub.w	r3, r3, r9
 800804c:	455b      	cmp	r3, fp
 800804e:	dc33      	bgt.n	80080b8 <_printf_float+0x384>
 8008050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008054:	429a      	cmp	r2, r3
 8008056:	db3b      	blt.n	80080d0 <_printf_float+0x39c>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	07da      	lsls	r2, r3, #31
 800805c:	d438      	bmi.n	80080d0 <_printf_float+0x39c>
 800805e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008060:	9a05      	ldr	r2, [sp, #20]
 8008062:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008064:	1a9a      	subs	r2, r3, r2
 8008066:	eba3 0901 	sub.w	r9, r3, r1
 800806a:	4591      	cmp	r9, r2
 800806c:	bfa8      	it	ge
 800806e:	4691      	movge	r9, r2
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	dc35      	bgt.n	80080e2 <_printf_float+0x3ae>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800807e:	f104 0a1a 	add.w	sl, r4, #26
 8008082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	eba3 0309 	sub.w	r3, r3, r9
 800808c:	4543      	cmp	r3, r8
 800808e:	f77f af79 	ble.w	8007f84 <_printf_float+0x250>
 8008092:	2301      	movs	r3, #1
 8008094:	4652      	mov	r2, sl
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f aeaa 	beq.w	8007df6 <_printf_float+0xc2>
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	e7ec      	b.n	8008082 <_printf_float+0x34e>
 80080a8:	4613      	mov	r3, r2
 80080aa:	4631      	mov	r1, r6
 80080ac:	4642      	mov	r2, r8
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	d1c0      	bne.n	8008038 <_printf_float+0x304>
 80080b6:	e69e      	b.n	8007df6 <_printf_float+0xc2>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4631      	mov	r1, r6
 80080bc:	4628      	mov	r0, r5
 80080be:	9205      	str	r2, [sp, #20]
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f ae97 	beq.w	8007df6 <_printf_float+0xc2>
 80080c8:	9a05      	ldr	r2, [sp, #20]
 80080ca:	f10b 0b01 	add.w	fp, fp, #1
 80080ce:	e7b9      	b.n	8008044 <_printf_float+0x310>
 80080d0:	ee18 3a10 	vmov	r3, s16
 80080d4:	4652      	mov	r2, sl
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	d1be      	bne.n	800805e <_printf_float+0x32a>
 80080e0:	e689      	b.n	8007df6 <_printf_float+0xc2>
 80080e2:	9a05      	ldr	r2, [sp, #20]
 80080e4:	464b      	mov	r3, r9
 80080e6:	4442      	add	r2, r8
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	d1c1      	bne.n	8008076 <_printf_float+0x342>
 80080f2:	e680      	b.n	8007df6 <_printf_float+0xc2>
 80080f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f6:	2a01      	cmp	r2, #1
 80080f8:	dc01      	bgt.n	80080fe <_printf_float+0x3ca>
 80080fa:	07db      	lsls	r3, r3, #31
 80080fc:	d538      	bpl.n	8008170 <_printf_float+0x43c>
 80080fe:	2301      	movs	r3, #1
 8008100:	4642      	mov	r2, r8
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	f43f ae74 	beq.w	8007df6 <_printf_float+0xc2>
 800810e:	ee18 3a10 	vmov	r3, s16
 8008112:	4652      	mov	r2, sl
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f ae6b 	beq.w	8007df6 <_printf_float+0xc2>
 8008120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008124:	2200      	movs	r2, #0
 8008126:	2300      	movs	r3, #0
 8008128:	f7f8 fcee 	bl	8000b08 <__aeabi_dcmpeq>
 800812c:	b9d8      	cbnz	r0, 8008166 <_printf_float+0x432>
 800812e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008130:	f108 0201 	add.w	r2, r8, #1
 8008134:	3b01      	subs	r3, #1
 8008136:	4631      	mov	r1, r6
 8008138:	4628      	mov	r0, r5
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	d10e      	bne.n	800815e <_printf_float+0x42a>
 8008140:	e659      	b.n	8007df6 <_printf_float+0xc2>
 8008142:	2301      	movs	r3, #1
 8008144:	4652      	mov	r2, sl
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae52 	beq.w	8007df6 <_printf_float+0xc2>
 8008152:	f108 0801 	add.w	r8, r8, #1
 8008156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008158:	3b01      	subs	r3, #1
 800815a:	4543      	cmp	r3, r8
 800815c:	dcf1      	bgt.n	8008142 <_printf_float+0x40e>
 800815e:	464b      	mov	r3, r9
 8008160:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008164:	e6dc      	b.n	8007f20 <_printf_float+0x1ec>
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	f104 0a1a 	add.w	sl, r4, #26
 800816e:	e7f2      	b.n	8008156 <_printf_float+0x422>
 8008170:	2301      	movs	r3, #1
 8008172:	4642      	mov	r2, r8
 8008174:	e7df      	b.n	8008136 <_printf_float+0x402>
 8008176:	2301      	movs	r3, #1
 8008178:	464a      	mov	r2, r9
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f ae38 	beq.w	8007df6 <_printf_float+0xc2>
 8008186:	f108 0801 	add.w	r8, r8, #1
 800818a:	68e3      	ldr	r3, [r4, #12]
 800818c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800818e:	1a5b      	subs	r3, r3, r1
 8008190:	4543      	cmp	r3, r8
 8008192:	dcf0      	bgt.n	8008176 <_printf_float+0x442>
 8008194:	e6fa      	b.n	8007f8c <_printf_float+0x258>
 8008196:	f04f 0800 	mov.w	r8, #0
 800819a:	f104 0919 	add.w	r9, r4, #25
 800819e:	e7f4      	b.n	800818a <_printf_float+0x456>

080081a0 <_printf_common>:
 80081a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a4:	4616      	mov	r6, r2
 80081a6:	4699      	mov	r9, r3
 80081a8:	688a      	ldr	r2, [r1, #8]
 80081aa:	690b      	ldr	r3, [r1, #16]
 80081ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	bfb8      	it	lt
 80081b4:	4613      	movlt	r3, r2
 80081b6:	6033      	str	r3, [r6, #0]
 80081b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081bc:	4607      	mov	r7, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	b10a      	cbz	r2, 80081c6 <_printf_common+0x26>
 80081c2:	3301      	adds	r3, #1
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	0699      	lsls	r1, r3, #26
 80081ca:	bf42      	ittt	mi
 80081cc:	6833      	ldrmi	r3, [r6, #0]
 80081ce:	3302      	addmi	r3, #2
 80081d0:	6033      	strmi	r3, [r6, #0]
 80081d2:	6825      	ldr	r5, [r4, #0]
 80081d4:	f015 0506 	ands.w	r5, r5, #6
 80081d8:	d106      	bne.n	80081e8 <_printf_common+0x48>
 80081da:	f104 0a19 	add.w	sl, r4, #25
 80081de:	68e3      	ldr	r3, [r4, #12]
 80081e0:	6832      	ldr	r2, [r6, #0]
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	42ab      	cmp	r3, r5
 80081e6:	dc26      	bgt.n	8008236 <_printf_common+0x96>
 80081e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081ec:	1e13      	subs	r3, r2, #0
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	bf18      	it	ne
 80081f2:	2301      	movne	r3, #1
 80081f4:	0692      	lsls	r2, r2, #26
 80081f6:	d42b      	bmi.n	8008250 <_printf_common+0xb0>
 80081f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081fc:	4649      	mov	r1, r9
 80081fe:	4638      	mov	r0, r7
 8008200:	47c0      	blx	r8
 8008202:	3001      	adds	r0, #1
 8008204:	d01e      	beq.n	8008244 <_printf_common+0xa4>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	68e5      	ldr	r5, [r4, #12]
 800820a:	6832      	ldr	r2, [r6, #0]
 800820c:	f003 0306 	and.w	r3, r3, #6
 8008210:	2b04      	cmp	r3, #4
 8008212:	bf08      	it	eq
 8008214:	1aad      	subeq	r5, r5, r2
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	6922      	ldr	r2, [r4, #16]
 800821a:	bf0c      	ite	eq
 800821c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008220:	2500      	movne	r5, #0
 8008222:	4293      	cmp	r3, r2
 8008224:	bfc4      	itt	gt
 8008226:	1a9b      	subgt	r3, r3, r2
 8008228:	18ed      	addgt	r5, r5, r3
 800822a:	2600      	movs	r6, #0
 800822c:	341a      	adds	r4, #26
 800822e:	42b5      	cmp	r5, r6
 8008230:	d11a      	bne.n	8008268 <_printf_common+0xc8>
 8008232:	2000      	movs	r0, #0
 8008234:	e008      	b.n	8008248 <_printf_common+0xa8>
 8008236:	2301      	movs	r3, #1
 8008238:	4652      	mov	r2, sl
 800823a:	4649      	mov	r1, r9
 800823c:	4638      	mov	r0, r7
 800823e:	47c0      	blx	r8
 8008240:	3001      	adds	r0, #1
 8008242:	d103      	bne.n	800824c <_printf_common+0xac>
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824c:	3501      	adds	r5, #1
 800824e:	e7c6      	b.n	80081de <_printf_common+0x3e>
 8008250:	18e1      	adds	r1, r4, r3
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	2030      	movs	r0, #48	; 0x30
 8008256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800825a:	4422      	add	r2, r4
 800825c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008264:	3302      	adds	r3, #2
 8008266:	e7c7      	b.n	80081f8 <_printf_common+0x58>
 8008268:	2301      	movs	r3, #1
 800826a:	4622      	mov	r2, r4
 800826c:	4649      	mov	r1, r9
 800826e:	4638      	mov	r0, r7
 8008270:	47c0      	blx	r8
 8008272:	3001      	adds	r0, #1
 8008274:	d0e6      	beq.n	8008244 <_printf_common+0xa4>
 8008276:	3601      	adds	r6, #1
 8008278:	e7d9      	b.n	800822e <_printf_common+0x8e>
	...

0800827c <_printf_i>:
 800827c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008280:	7e0f      	ldrb	r7, [r1, #24]
 8008282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008284:	2f78      	cmp	r7, #120	; 0x78
 8008286:	4691      	mov	r9, r2
 8008288:	4680      	mov	r8, r0
 800828a:	460c      	mov	r4, r1
 800828c:	469a      	mov	sl, r3
 800828e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008292:	d807      	bhi.n	80082a4 <_printf_i+0x28>
 8008294:	2f62      	cmp	r7, #98	; 0x62
 8008296:	d80a      	bhi.n	80082ae <_printf_i+0x32>
 8008298:	2f00      	cmp	r7, #0
 800829a:	f000 80d8 	beq.w	800844e <_printf_i+0x1d2>
 800829e:	2f58      	cmp	r7, #88	; 0x58
 80082a0:	f000 80a3 	beq.w	80083ea <_printf_i+0x16e>
 80082a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082ac:	e03a      	b.n	8008324 <_printf_i+0xa8>
 80082ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082b2:	2b15      	cmp	r3, #21
 80082b4:	d8f6      	bhi.n	80082a4 <_printf_i+0x28>
 80082b6:	a101      	add	r1, pc, #4	; (adr r1, 80082bc <_printf_i+0x40>)
 80082b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082bc:	08008315 	.word	0x08008315
 80082c0:	08008329 	.word	0x08008329
 80082c4:	080082a5 	.word	0x080082a5
 80082c8:	080082a5 	.word	0x080082a5
 80082cc:	080082a5 	.word	0x080082a5
 80082d0:	080082a5 	.word	0x080082a5
 80082d4:	08008329 	.word	0x08008329
 80082d8:	080082a5 	.word	0x080082a5
 80082dc:	080082a5 	.word	0x080082a5
 80082e0:	080082a5 	.word	0x080082a5
 80082e4:	080082a5 	.word	0x080082a5
 80082e8:	08008435 	.word	0x08008435
 80082ec:	08008359 	.word	0x08008359
 80082f0:	08008417 	.word	0x08008417
 80082f4:	080082a5 	.word	0x080082a5
 80082f8:	080082a5 	.word	0x080082a5
 80082fc:	08008457 	.word	0x08008457
 8008300:	080082a5 	.word	0x080082a5
 8008304:	08008359 	.word	0x08008359
 8008308:	080082a5 	.word	0x080082a5
 800830c:	080082a5 	.word	0x080082a5
 8008310:	0800841f 	.word	0x0800841f
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	1d1a      	adds	r2, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	602a      	str	r2, [r5, #0]
 800831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008324:	2301      	movs	r3, #1
 8008326:	e0a3      	b.n	8008470 <_printf_i+0x1f4>
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	6829      	ldr	r1, [r5, #0]
 800832c:	0606      	lsls	r6, r0, #24
 800832e:	f101 0304 	add.w	r3, r1, #4
 8008332:	d50a      	bpl.n	800834a <_printf_i+0xce>
 8008334:	680e      	ldr	r6, [r1, #0]
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	2e00      	cmp	r6, #0
 800833a:	da03      	bge.n	8008344 <_printf_i+0xc8>
 800833c:	232d      	movs	r3, #45	; 0x2d
 800833e:	4276      	negs	r6, r6
 8008340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008344:	485e      	ldr	r0, [pc, #376]	; (80084c0 <_printf_i+0x244>)
 8008346:	230a      	movs	r3, #10
 8008348:	e019      	b.n	800837e <_printf_i+0x102>
 800834a:	680e      	ldr	r6, [r1, #0]
 800834c:	602b      	str	r3, [r5, #0]
 800834e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008352:	bf18      	it	ne
 8008354:	b236      	sxthne	r6, r6
 8008356:	e7ef      	b.n	8008338 <_printf_i+0xbc>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	1d19      	adds	r1, r3, #4
 800835e:	6029      	str	r1, [r5, #0]
 8008360:	0601      	lsls	r1, r0, #24
 8008362:	d501      	bpl.n	8008368 <_printf_i+0xec>
 8008364:	681e      	ldr	r6, [r3, #0]
 8008366:	e002      	b.n	800836e <_printf_i+0xf2>
 8008368:	0646      	lsls	r6, r0, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0xe8>
 800836c:	881e      	ldrh	r6, [r3, #0]
 800836e:	4854      	ldr	r0, [pc, #336]	; (80084c0 <_printf_i+0x244>)
 8008370:	2f6f      	cmp	r7, #111	; 0x6f
 8008372:	bf0c      	ite	eq
 8008374:	2308      	moveq	r3, #8
 8008376:	230a      	movne	r3, #10
 8008378:	2100      	movs	r1, #0
 800837a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800837e:	6865      	ldr	r5, [r4, #4]
 8008380:	60a5      	str	r5, [r4, #8]
 8008382:	2d00      	cmp	r5, #0
 8008384:	bfa2      	ittt	ge
 8008386:	6821      	ldrge	r1, [r4, #0]
 8008388:	f021 0104 	bicge.w	r1, r1, #4
 800838c:	6021      	strge	r1, [r4, #0]
 800838e:	b90e      	cbnz	r6, 8008394 <_printf_i+0x118>
 8008390:	2d00      	cmp	r5, #0
 8008392:	d04d      	beq.n	8008430 <_printf_i+0x1b4>
 8008394:	4615      	mov	r5, r2
 8008396:	fbb6 f1f3 	udiv	r1, r6, r3
 800839a:	fb03 6711 	mls	r7, r3, r1, r6
 800839e:	5dc7      	ldrb	r7, [r0, r7]
 80083a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083a4:	4637      	mov	r7, r6
 80083a6:	42bb      	cmp	r3, r7
 80083a8:	460e      	mov	r6, r1
 80083aa:	d9f4      	bls.n	8008396 <_printf_i+0x11a>
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d10b      	bne.n	80083c8 <_printf_i+0x14c>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	07de      	lsls	r6, r3, #31
 80083b4:	d508      	bpl.n	80083c8 <_printf_i+0x14c>
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	6861      	ldr	r1, [r4, #4]
 80083ba:	4299      	cmp	r1, r3
 80083bc:	bfde      	ittt	le
 80083be:	2330      	movle	r3, #48	; 0x30
 80083c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083c8:	1b52      	subs	r2, r2, r5
 80083ca:	6122      	str	r2, [r4, #16]
 80083cc:	f8cd a000 	str.w	sl, [sp]
 80083d0:	464b      	mov	r3, r9
 80083d2:	aa03      	add	r2, sp, #12
 80083d4:	4621      	mov	r1, r4
 80083d6:	4640      	mov	r0, r8
 80083d8:	f7ff fee2 	bl	80081a0 <_printf_common>
 80083dc:	3001      	adds	r0, #1
 80083de:	d14c      	bne.n	800847a <_printf_i+0x1fe>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	b004      	add	sp, #16
 80083e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ea:	4835      	ldr	r0, [pc, #212]	; (80084c0 <_printf_i+0x244>)
 80083ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083f0:	6829      	ldr	r1, [r5, #0]
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80083f8:	6029      	str	r1, [r5, #0]
 80083fa:	061d      	lsls	r5, r3, #24
 80083fc:	d514      	bpl.n	8008428 <_printf_i+0x1ac>
 80083fe:	07df      	lsls	r7, r3, #31
 8008400:	bf44      	itt	mi
 8008402:	f043 0320 	orrmi.w	r3, r3, #32
 8008406:	6023      	strmi	r3, [r4, #0]
 8008408:	b91e      	cbnz	r6, 8008412 <_printf_i+0x196>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f023 0320 	bic.w	r3, r3, #32
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	2310      	movs	r3, #16
 8008414:	e7b0      	b.n	8008378 <_printf_i+0xfc>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	f043 0320 	orr.w	r3, r3, #32
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	2378      	movs	r3, #120	; 0x78
 8008420:	4828      	ldr	r0, [pc, #160]	; (80084c4 <_printf_i+0x248>)
 8008422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008426:	e7e3      	b.n	80083f0 <_printf_i+0x174>
 8008428:	0659      	lsls	r1, r3, #25
 800842a:	bf48      	it	mi
 800842c:	b2b6      	uxthmi	r6, r6
 800842e:	e7e6      	b.n	80083fe <_printf_i+0x182>
 8008430:	4615      	mov	r5, r2
 8008432:	e7bb      	b.n	80083ac <_printf_i+0x130>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	6826      	ldr	r6, [r4, #0]
 8008438:	6961      	ldr	r1, [r4, #20]
 800843a:	1d18      	adds	r0, r3, #4
 800843c:	6028      	str	r0, [r5, #0]
 800843e:	0635      	lsls	r5, r6, #24
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	d501      	bpl.n	8008448 <_printf_i+0x1cc>
 8008444:	6019      	str	r1, [r3, #0]
 8008446:	e002      	b.n	800844e <_printf_i+0x1d2>
 8008448:	0670      	lsls	r0, r6, #25
 800844a:	d5fb      	bpl.n	8008444 <_printf_i+0x1c8>
 800844c:	8019      	strh	r1, [r3, #0]
 800844e:	2300      	movs	r3, #0
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	4615      	mov	r5, r2
 8008454:	e7ba      	b.n	80083cc <_printf_i+0x150>
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	1d1a      	adds	r2, r3, #4
 800845a:	602a      	str	r2, [r5, #0]
 800845c:	681d      	ldr	r5, [r3, #0]
 800845e:	6862      	ldr	r2, [r4, #4]
 8008460:	2100      	movs	r1, #0
 8008462:	4628      	mov	r0, r5
 8008464:	f7f7 fedc 	bl	8000220 <memchr>
 8008468:	b108      	cbz	r0, 800846e <_printf_i+0x1f2>
 800846a:	1b40      	subs	r0, r0, r5
 800846c:	6060      	str	r0, [r4, #4]
 800846e:	6863      	ldr	r3, [r4, #4]
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	2300      	movs	r3, #0
 8008474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008478:	e7a8      	b.n	80083cc <_printf_i+0x150>
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	462a      	mov	r2, r5
 800847e:	4649      	mov	r1, r9
 8008480:	4640      	mov	r0, r8
 8008482:	47d0      	blx	sl
 8008484:	3001      	adds	r0, #1
 8008486:	d0ab      	beq.n	80083e0 <_printf_i+0x164>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	079b      	lsls	r3, r3, #30
 800848c:	d413      	bmi.n	80084b6 <_printf_i+0x23a>
 800848e:	68e0      	ldr	r0, [r4, #12]
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	4298      	cmp	r0, r3
 8008494:	bfb8      	it	lt
 8008496:	4618      	movlt	r0, r3
 8008498:	e7a4      	b.n	80083e4 <_printf_i+0x168>
 800849a:	2301      	movs	r3, #1
 800849c:	4632      	mov	r2, r6
 800849e:	4649      	mov	r1, r9
 80084a0:	4640      	mov	r0, r8
 80084a2:	47d0      	blx	sl
 80084a4:	3001      	adds	r0, #1
 80084a6:	d09b      	beq.n	80083e0 <_printf_i+0x164>
 80084a8:	3501      	adds	r5, #1
 80084aa:	68e3      	ldr	r3, [r4, #12]
 80084ac:	9903      	ldr	r1, [sp, #12]
 80084ae:	1a5b      	subs	r3, r3, r1
 80084b0:	42ab      	cmp	r3, r5
 80084b2:	dcf2      	bgt.n	800849a <_printf_i+0x21e>
 80084b4:	e7eb      	b.n	800848e <_printf_i+0x212>
 80084b6:	2500      	movs	r5, #0
 80084b8:	f104 0619 	add.w	r6, r4, #25
 80084bc:	e7f5      	b.n	80084aa <_printf_i+0x22e>
 80084be:	bf00      	nop
 80084c0:	0800cb0a 	.word	0x0800cb0a
 80084c4:	0800cb1b 	.word	0x0800cb1b

080084c8 <_scanf_float>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	b087      	sub	sp, #28
 80084ce:	4617      	mov	r7, r2
 80084d0:	9303      	str	r3, [sp, #12]
 80084d2:	688b      	ldr	r3, [r1, #8]
 80084d4:	1e5a      	subs	r2, r3, #1
 80084d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084da:	bf83      	ittte	hi
 80084dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084e0:	195b      	addhi	r3, r3, r5
 80084e2:	9302      	strhi	r3, [sp, #8]
 80084e4:	2300      	movls	r3, #0
 80084e6:	bf86      	itte	hi
 80084e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084ec:	608b      	strhi	r3, [r1, #8]
 80084ee:	9302      	strls	r3, [sp, #8]
 80084f0:	680b      	ldr	r3, [r1, #0]
 80084f2:	468b      	mov	fp, r1
 80084f4:	2500      	movs	r5, #0
 80084f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80084fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008502:	4680      	mov	r8, r0
 8008504:	460c      	mov	r4, r1
 8008506:	465e      	mov	r6, fp
 8008508:	46aa      	mov	sl, r5
 800850a:	46a9      	mov	r9, r5
 800850c:	9501      	str	r5, [sp, #4]
 800850e:	68a2      	ldr	r2, [r4, #8]
 8008510:	b152      	cbz	r2, 8008528 <_scanf_float+0x60>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b4e      	cmp	r3, #78	; 0x4e
 8008518:	d864      	bhi.n	80085e4 <_scanf_float+0x11c>
 800851a:	2b40      	cmp	r3, #64	; 0x40
 800851c:	d83c      	bhi.n	8008598 <_scanf_float+0xd0>
 800851e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008522:	b2c8      	uxtb	r0, r1
 8008524:	280e      	cmp	r0, #14
 8008526:	d93a      	bls.n	800859e <_scanf_float+0xd6>
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	d003      	beq.n	8008536 <_scanf_float+0x6e>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800853a:	f1ba 0f01 	cmp.w	sl, #1
 800853e:	f200 8113 	bhi.w	8008768 <_scanf_float+0x2a0>
 8008542:	455e      	cmp	r6, fp
 8008544:	f200 8105 	bhi.w	8008752 <_scanf_float+0x28a>
 8008548:	2501      	movs	r5, #1
 800854a:	4628      	mov	r0, r5
 800854c:	b007      	add	sp, #28
 800854e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008552:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008556:	2a0d      	cmp	r2, #13
 8008558:	d8e6      	bhi.n	8008528 <_scanf_float+0x60>
 800855a:	a101      	add	r1, pc, #4	; (adr r1, 8008560 <_scanf_float+0x98>)
 800855c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008560:	0800869f 	.word	0x0800869f
 8008564:	08008529 	.word	0x08008529
 8008568:	08008529 	.word	0x08008529
 800856c:	08008529 	.word	0x08008529
 8008570:	080086ff 	.word	0x080086ff
 8008574:	080086d7 	.word	0x080086d7
 8008578:	08008529 	.word	0x08008529
 800857c:	08008529 	.word	0x08008529
 8008580:	080086ad 	.word	0x080086ad
 8008584:	08008529 	.word	0x08008529
 8008588:	08008529 	.word	0x08008529
 800858c:	08008529 	.word	0x08008529
 8008590:	08008529 	.word	0x08008529
 8008594:	08008665 	.word	0x08008665
 8008598:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800859c:	e7db      	b.n	8008556 <_scanf_float+0x8e>
 800859e:	290e      	cmp	r1, #14
 80085a0:	d8c2      	bhi.n	8008528 <_scanf_float+0x60>
 80085a2:	a001      	add	r0, pc, #4	; (adr r0, 80085a8 <_scanf_float+0xe0>)
 80085a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085a8:	08008657 	.word	0x08008657
 80085ac:	08008529 	.word	0x08008529
 80085b0:	08008657 	.word	0x08008657
 80085b4:	080086eb 	.word	0x080086eb
 80085b8:	08008529 	.word	0x08008529
 80085bc:	08008605 	.word	0x08008605
 80085c0:	08008641 	.word	0x08008641
 80085c4:	08008641 	.word	0x08008641
 80085c8:	08008641 	.word	0x08008641
 80085cc:	08008641 	.word	0x08008641
 80085d0:	08008641 	.word	0x08008641
 80085d4:	08008641 	.word	0x08008641
 80085d8:	08008641 	.word	0x08008641
 80085dc:	08008641 	.word	0x08008641
 80085e0:	08008641 	.word	0x08008641
 80085e4:	2b6e      	cmp	r3, #110	; 0x6e
 80085e6:	d809      	bhi.n	80085fc <_scanf_float+0x134>
 80085e8:	2b60      	cmp	r3, #96	; 0x60
 80085ea:	d8b2      	bhi.n	8008552 <_scanf_float+0x8a>
 80085ec:	2b54      	cmp	r3, #84	; 0x54
 80085ee:	d077      	beq.n	80086e0 <_scanf_float+0x218>
 80085f0:	2b59      	cmp	r3, #89	; 0x59
 80085f2:	d199      	bne.n	8008528 <_scanf_float+0x60>
 80085f4:	2d07      	cmp	r5, #7
 80085f6:	d197      	bne.n	8008528 <_scanf_float+0x60>
 80085f8:	2508      	movs	r5, #8
 80085fa:	e029      	b.n	8008650 <_scanf_float+0x188>
 80085fc:	2b74      	cmp	r3, #116	; 0x74
 80085fe:	d06f      	beq.n	80086e0 <_scanf_float+0x218>
 8008600:	2b79      	cmp	r3, #121	; 0x79
 8008602:	e7f6      	b.n	80085f2 <_scanf_float+0x12a>
 8008604:	6821      	ldr	r1, [r4, #0]
 8008606:	05c8      	lsls	r0, r1, #23
 8008608:	d51a      	bpl.n	8008640 <_scanf_float+0x178>
 800860a:	9b02      	ldr	r3, [sp, #8]
 800860c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008610:	6021      	str	r1, [r4, #0]
 8008612:	f109 0901 	add.w	r9, r9, #1
 8008616:	b11b      	cbz	r3, 8008620 <_scanf_float+0x158>
 8008618:	3b01      	subs	r3, #1
 800861a:	3201      	adds	r2, #1
 800861c:	9302      	str	r3, [sp, #8]
 800861e:	60a2      	str	r2, [r4, #8]
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	3b01      	subs	r3, #1
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	3301      	adds	r3, #1
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3b01      	subs	r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	607b      	str	r3, [r7, #4]
 8008634:	f340 8084 	ble.w	8008740 <_scanf_float+0x278>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	3301      	adds	r3, #1
 800863c:	603b      	str	r3, [r7, #0]
 800863e:	e766      	b.n	800850e <_scanf_float+0x46>
 8008640:	eb1a 0f05 	cmn.w	sl, r5
 8008644:	f47f af70 	bne.w	8008528 <_scanf_float+0x60>
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	f806 3b01 	strb.w	r3, [r6], #1
 8008654:	e7e4      	b.n	8008620 <_scanf_float+0x158>
 8008656:	6822      	ldr	r2, [r4, #0]
 8008658:	0610      	lsls	r0, r2, #24
 800865a:	f57f af65 	bpl.w	8008528 <_scanf_float+0x60>
 800865e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008662:	e7f4      	b.n	800864e <_scanf_float+0x186>
 8008664:	f1ba 0f00 	cmp.w	sl, #0
 8008668:	d10e      	bne.n	8008688 <_scanf_float+0x1c0>
 800866a:	f1b9 0f00 	cmp.w	r9, #0
 800866e:	d10e      	bne.n	800868e <_scanf_float+0x1c6>
 8008670:	6822      	ldr	r2, [r4, #0]
 8008672:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008676:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800867a:	d108      	bne.n	800868e <_scanf_float+0x1c6>
 800867c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008680:	6022      	str	r2, [r4, #0]
 8008682:	f04f 0a01 	mov.w	sl, #1
 8008686:	e7e3      	b.n	8008650 <_scanf_float+0x188>
 8008688:	f1ba 0f02 	cmp.w	sl, #2
 800868c:	d055      	beq.n	800873a <_scanf_float+0x272>
 800868e:	2d01      	cmp	r5, #1
 8008690:	d002      	beq.n	8008698 <_scanf_float+0x1d0>
 8008692:	2d04      	cmp	r5, #4
 8008694:	f47f af48 	bne.w	8008528 <_scanf_float+0x60>
 8008698:	3501      	adds	r5, #1
 800869a:	b2ed      	uxtb	r5, r5
 800869c:	e7d8      	b.n	8008650 <_scanf_float+0x188>
 800869e:	f1ba 0f01 	cmp.w	sl, #1
 80086a2:	f47f af41 	bne.w	8008528 <_scanf_float+0x60>
 80086a6:	f04f 0a02 	mov.w	sl, #2
 80086aa:	e7d1      	b.n	8008650 <_scanf_float+0x188>
 80086ac:	b97d      	cbnz	r5, 80086ce <_scanf_float+0x206>
 80086ae:	f1b9 0f00 	cmp.w	r9, #0
 80086b2:	f47f af3c 	bne.w	800852e <_scanf_float+0x66>
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086c0:	f47f af39 	bne.w	8008536 <_scanf_float+0x6e>
 80086c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086c8:	6022      	str	r2, [r4, #0]
 80086ca:	2501      	movs	r5, #1
 80086cc:	e7c0      	b.n	8008650 <_scanf_float+0x188>
 80086ce:	2d03      	cmp	r5, #3
 80086d0:	d0e2      	beq.n	8008698 <_scanf_float+0x1d0>
 80086d2:	2d05      	cmp	r5, #5
 80086d4:	e7de      	b.n	8008694 <_scanf_float+0x1cc>
 80086d6:	2d02      	cmp	r5, #2
 80086d8:	f47f af26 	bne.w	8008528 <_scanf_float+0x60>
 80086dc:	2503      	movs	r5, #3
 80086de:	e7b7      	b.n	8008650 <_scanf_float+0x188>
 80086e0:	2d06      	cmp	r5, #6
 80086e2:	f47f af21 	bne.w	8008528 <_scanf_float+0x60>
 80086e6:	2507      	movs	r5, #7
 80086e8:	e7b2      	b.n	8008650 <_scanf_float+0x188>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	0591      	lsls	r1, r2, #22
 80086ee:	f57f af1b 	bpl.w	8008528 <_scanf_float+0x60>
 80086f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086f6:	6022      	str	r2, [r4, #0]
 80086f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80086fc:	e7a8      	b.n	8008650 <_scanf_float+0x188>
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008704:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008708:	d006      	beq.n	8008718 <_scanf_float+0x250>
 800870a:	0550      	lsls	r0, r2, #21
 800870c:	f57f af0c 	bpl.w	8008528 <_scanf_float+0x60>
 8008710:	f1b9 0f00 	cmp.w	r9, #0
 8008714:	f43f af0f 	beq.w	8008536 <_scanf_float+0x6e>
 8008718:	0591      	lsls	r1, r2, #22
 800871a:	bf58      	it	pl
 800871c:	9901      	ldrpl	r1, [sp, #4]
 800871e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008722:	bf58      	it	pl
 8008724:	eba9 0101 	subpl.w	r1, r9, r1
 8008728:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800872c:	bf58      	it	pl
 800872e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008732:	6022      	str	r2, [r4, #0]
 8008734:	f04f 0900 	mov.w	r9, #0
 8008738:	e78a      	b.n	8008650 <_scanf_float+0x188>
 800873a:	f04f 0a03 	mov.w	sl, #3
 800873e:	e787      	b.n	8008650 <_scanf_float+0x188>
 8008740:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008744:	4639      	mov	r1, r7
 8008746:	4640      	mov	r0, r8
 8008748:	4798      	blx	r3
 800874a:	2800      	cmp	r0, #0
 800874c:	f43f aedf 	beq.w	800850e <_scanf_float+0x46>
 8008750:	e6ea      	b.n	8008528 <_scanf_float+0x60>
 8008752:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800875a:	463a      	mov	r2, r7
 800875c:	4640      	mov	r0, r8
 800875e:	4798      	blx	r3
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	3b01      	subs	r3, #1
 8008764:	6123      	str	r3, [r4, #16]
 8008766:	e6ec      	b.n	8008542 <_scanf_float+0x7a>
 8008768:	1e6b      	subs	r3, r5, #1
 800876a:	2b06      	cmp	r3, #6
 800876c:	d825      	bhi.n	80087ba <_scanf_float+0x2f2>
 800876e:	2d02      	cmp	r5, #2
 8008770:	d836      	bhi.n	80087e0 <_scanf_float+0x318>
 8008772:	455e      	cmp	r6, fp
 8008774:	f67f aee8 	bls.w	8008548 <_scanf_float+0x80>
 8008778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800877c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008780:	463a      	mov	r2, r7
 8008782:	4640      	mov	r0, r8
 8008784:	4798      	blx	r3
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	3b01      	subs	r3, #1
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	e7f1      	b.n	8008772 <_scanf_float+0x2aa>
 800878e:	9802      	ldr	r0, [sp, #8]
 8008790:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008794:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008798:	9002      	str	r0, [sp, #8]
 800879a:	463a      	mov	r2, r7
 800879c:	4640      	mov	r0, r8
 800879e:	4798      	blx	r3
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087aa:	fa5f fa8a 	uxtb.w	sl, sl
 80087ae:	f1ba 0f02 	cmp.w	sl, #2
 80087b2:	d1ec      	bne.n	800878e <_scanf_float+0x2c6>
 80087b4:	3d03      	subs	r5, #3
 80087b6:	b2ed      	uxtb	r5, r5
 80087b8:	1b76      	subs	r6, r6, r5
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	05da      	lsls	r2, r3, #23
 80087be:	d52f      	bpl.n	8008820 <_scanf_float+0x358>
 80087c0:	055b      	lsls	r3, r3, #21
 80087c2:	d510      	bpl.n	80087e6 <_scanf_float+0x31e>
 80087c4:	455e      	cmp	r6, fp
 80087c6:	f67f aebf 	bls.w	8008548 <_scanf_float+0x80>
 80087ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087d2:	463a      	mov	r2, r7
 80087d4:	4640      	mov	r0, r8
 80087d6:	4798      	blx	r3
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	3b01      	subs	r3, #1
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	e7f1      	b.n	80087c4 <_scanf_float+0x2fc>
 80087e0:	46aa      	mov	sl, r5
 80087e2:	9602      	str	r6, [sp, #8]
 80087e4:	e7df      	b.n	80087a6 <_scanf_float+0x2de>
 80087e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	2965      	cmp	r1, #101	; 0x65
 80087ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80087f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80087f6:	6123      	str	r3, [r4, #16]
 80087f8:	d00c      	beq.n	8008814 <_scanf_float+0x34c>
 80087fa:	2945      	cmp	r1, #69	; 0x45
 80087fc:	d00a      	beq.n	8008814 <_scanf_float+0x34c>
 80087fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008802:	463a      	mov	r2, r7
 8008804:	4640      	mov	r0, r8
 8008806:	4798      	blx	r3
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800880e:	3b01      	subs	r3, #1
 8008810:	1eb5      	subs	r5, r6, #2
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008818:	463a      	mov	r2, r7
 800881a:	4640      	mov	r0, r8
 800881c:	4798      	blx	r3
 800881e:	462e      	mov	r6, r5
 8008820:	6825      	ldr	r5, [r4, #0]
 8008822:	f015 0510 	ands.w	r5, r5, #16
 8008826:	d159      	bne.n	80088dc <_scanf_float+0x414>
 8008828:	7035      	strb	r5, [r6, #0]
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008834:	d11b      	bne.n	800886e <_scanf_float+0x3a6>
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	454b      	cmp	r3, r9
 800883a:	eba3 0209 	sub.w	r2, r3, r9
 800883e:	d123      	bne.n	8008888 <_scanf_float+0x3c0>
 8008840:	2200      	movs	r2, #0
 8008842:	4659      	mov	r1, fp
 8008844:	4640      	mov	r0, r8
 8008846:	f000 ff0d 	bl	8009664 <_strtod_r>
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	f012 0f02 	tst.w	r2, #2
 8008852:	ec57 6b10 	vmov	r6, r7, d0
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	d021      	beq.n	800889e <_scanf_float+0x3d6>
 800885a:	9903      	ldr	r1, [sp, #12]
 800885c:	1d1a      	adds	r2, r3, #4
 800885e:	600a      	str	r2, [r1, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	e9c3 6700 	strd	r6, r7, [r3]
 8008866:	68e3      	ldr	r3, [r4, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	60e3      	str	r3, [r4, #12]
 800886c:	e66d      	b.n	800854a <_scanf_float+0x82>
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0e5      	beq.n	8008840 <_scanf_float+0x378>
 8008874:	9905      	ldr	r1, [sp, #20]
 8008876:	230a      	movs	r3, #10
 8008878:	462a      	mov	r2, r5
 800887a:	3101      	adds	r1, #1
 800887c:	4640      	mov	r0, r8
 800887e:	f000 ff79 	bl	8009774 <_strtol_r>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	9e05      	ldr	r6, [sp, #20]
 8008886:	1ac2      	subs	r2, r0, r3
 8008888:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800888c:	429e      	cmp	r6, r3
 800888e:	bf28      	it	cs
 8008890:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008894:	4912      	ldr	r1, [pc, #72]	; (80088e0 <_scanf_float+0x418>)
 8008896:	4630      	mov	r0, r6
 8008898:	f000 f8a2 	bl	80089e0 <siprintf>
 800889c:	e7d0      	b.n	8008840 <_scanf_float+0x378>
 800889e:	9903      	ldr	r1, [sp, #12]
 80088a0:	f012 0f04 	tst.w	r2, #4
 80088a4:	f103 0204 	add.w	r2, r3, #4
 80088a8:	600a      	str	r2, [r1, #0]
 80088aa:	d1d9      	bne.n	8008860 <_scanf_float+0x398>
 80088ac:	f8d3 8000 	ldr.w	r8, [r3]
 80088b0:	ee10 2a10 	vmov	r2, s0
 80088b4:	ee10 0a10 	vmov	r0, s0
 80088b8:	463b      	mov	r3, r7
 80088ba:	4639      	mov	r1, r7
 80088bc:	f7f8 f956 	bl	8000b6c <__aeabi_dcmpun>
 80088c0:	b128      	cbz	r0, 80088ce <_scanf_float+0x406>
 80088c2:	4808      	ldr	r0, [pc, #32]	; (80088e4 <_scanf_float+0x41c>)
 80088c4:	f000 f886 	bl	80089d4 <nanf>
 80088c8:	ed88 0a00 	vstr	s0, [r8]
 80088cc:	e7cb      	b.n	8008866 <_scanf_float+0x39e>
 80088ce:	4630      	mov	r0, r6
 80088d0:	4639      	mov	r1, r7
 80088d2:	f7f8 f9a9 	bl	8000c28 <__aeabi_d2f>
 80088d6:	f8c8 0000 	str.w	r0, [r8]
 80088da:	e7c4      	b.n	8008866 <_scanf_float+0x39e>
 80088dc:	2500      	movs	r5, #0
 80088de:	e634      	b.n	800854a <_scanf_float+0x82>
 80088e0:	0800cb2c 	.word	0x0800cb2c
 80088e4:	0800cfa0 	.word	0x0800cfa0

080088e8 <_puts_r>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	460e      	mov	r6, r1
 80088ec:	4605      	mov	r5, r0
 80088ee:	b118      	cbz	r0, 80088f8 <_puts_r+0x10>
 80088f0:	6983      	ldr	r3, [r0, #24]
 80088f2:	b90b      	cbnz	r3, 80088f8 <_puts_r+0x10>
 80088f4:	f001 ff94 	bl	800a820 <__sinit>
 80088f8:	69ab      	ldr	r3, [r5, #24]
 80088fa:	68ac      	ldr	r4, [r5, #8]
 80088fc:	b913      	cbnz	r3, 8008904 <_puts_r+0x1c>
 80088fe:	4628      	mov	r0, r5
 8008900:	f001 ff8e 	bl	800a820 <__sinit>
 8008904:	4b2c      	ldr	r3, [pc, #176]	; (80089b8 <_puts_r+0xd0>)
 8008906:	429c      	cmp	r4, r3
 8008908:	d120      	bne.n	800894c <_puts_r+0x64>
 800890a:	686c      	ldr	r4, [r5, #4]
 800890c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d405      	bmi.n	800891e <_puts_r+0x36>
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	0598      	lsls	r0, r3, #22
 8008916:	d402      	bmi.n	800891e <_puts_r+0x36>
 8008918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891a:	f002 fb92 	bl	800b042 <__retarget_lock_acquire_recursive>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	0719      	lsls	r1, r3, #28
 8008922:	d51d      	bpl.n	8008960 <_puts_r+0x78>
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	b1db      	cbz	r3, 8008960 <_puts_r+0x78>
 8008928:	3e01      	subs	r6, #1
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008930:	3b01      	subs	r3, #1
 8008932:	60a3      	str	r3, [r4, #8]
 8008934:	bb39      	cbnz	r1, 8008986 <_puts_r+0x9e>
 8008936:	2b00      	cmp	r3, #0
 8008938:	da38      	bge.n	80089ac <_puts_r+0xc4>
 800893a:	4622      	mov	r2, r4
 800893c:	210a      	movs	r1, #10
 800893e:	4628      	mov	r0, r5
 8008940:	f000 ff1a 	bl	8009778 <__swbuf_r>
 8008944:	3001      	adds	r0, #1
 8008946:	d011      	beq.n	800896c <_puts_r+0x84>
 8008948:	250a      	movs	r5, #10
 800894a:	e011      	b.n	8008970 <_puts_r+0x88>
 800894c:	4b1b      	ldr	r3, [pc, #108]	; (80089bc <_puts_r+0xd4>)
 800894e:	429c      	cmp	r4, r3
 8008950:	d101      	bne.n	8008956 <_puts_r+0x6e>
 8008952:	68ac      	ldr	r4, [r5, #8]
 8008954:	e7da      	b.n	800890c <_puts_r+0x24>
 8008956:	4b1a      	ldr	r3, [pc, #104]	; (80089c0 <_puts_r+0xd8>)
 8008958:	429c      	cmp	r4, r3
 800895a:	bf08      	it	eq
 800895c:	68ec      	ldreq	r4, [r5, #12]
 800895e:	e7d5      	b.n	800890c <_puts_r+0x24>
 8008960:	4621      	mov	r1, r4
 8008962:	4628      	mov	r0, r5
 8008964:	f000 ff5a 	bl	800981c <__swsetup_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	d0dd      	beq.n	8008928 <_puts_r+0x40>
 800896c:	f04f 35ff 	mov.w	r5, #4294967295
 8008970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008972:	07da      	lsls	r2, r3, #31
 8008974:	d405      	bmi.n	8008982 <_puts_r+0x9a>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	059b      	lsls	r3, r3, #22
 800897a:	d402      	bmi.n	8008982 <_puts_r+0x9a>
 800897c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800897e:	f002 fb61 	bl	800b044 <__retarget_lock_release_recursive>
 8008982:	4628      	mov	r0, r5
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	2b00      	cmp	r3, #0
 8008988:	da04      	bge.n	8008994 <_puts_r+0xac>
 800898a:	69a2      	ldr	r2, [r4, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	dc06      	bgt.n	800899e <_puts_r+0xb6>
 8008990:	290a      	cmp	r1, #10
 8008992:	d004      	beq.n	800899e <_puts_r+0xb6>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	6022      	str	r2, [r4, #0]
 800899a:	7019      	strb	r1, [r3, #0]
 800899c:	e7c5      	b.n	800892a <_puts_r+0x42>
 800899e:	4622      	mov	r2, r4
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 fee9 	bl	8009778 <__swbuf_r>
 80089a6:	3001      	adds	r0, #1
 80089a8:	d1bf      	bne.n	800892a <_puts_r+0x42>
 80089aa:	e7df      	b.n	800896c <_puts_r+0x84>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	250a      	movs	r5, #10
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	6022      	str	r2, [r4, #0]
 80089b4:	701d      	strb	r5, [r3, #0]
 80089b6:	e7db      	b.n	8008970 <_puts_r+0x88>
 80089b8:	0800cd3c 	.word	0x0800cd3c
 80089bc:	0800cd5c 	.word	0x0800cd5c
 80089c0:	0800cd1c 	.word	0x0800cd1c

080089c4 <puts>:
 80089c4:	4b02      	ldr	r3, [pc, #8]	; (80089d0 <puts+0xc>)
 80089c6:	4601      	mov	r1, r0
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	f7ff bf8d 	b.w	80088e8 <_puts_r>
 80089ce:	bf00      	nop
 80089d0:	20000024 	.word	0x20000024

080089d4 <nanf>:
 80089d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089dc <nanf+0x8>
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	7fc00000 	.word	0x7fc00000

080089e0 <siprintf>:
 80089e0:	b40e      	push	{r1, r2, r3}
 80089e2:	b500      	push	{lr}
 80089e4:	b09c      	sub	sp, #112	; 0x70
 80089e6:	ab1d      	add	r3, sp, #116	; 0x74
 80089e8:	9002      	str	r0, [sp, #8]
 80089ea:	9006      	str	r0, [sp, #24]
 80089ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089f0:	4809      	ldr	r0, [pc, #36]	; (8008a18 <siprintf+0x38>)
 80089f2:	9107      	str	r1, [sp, #28]
 80089f4:	9104      	str	r1, [sp, #16]
 80089f6:	4909      	ldr	r1, [pc, #36]	; (8008a1c <siprintf+0x3c>)
 80089f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fc:	9105      	str	r1, [sp, #20]
 80089fe:	6800      	ldr	r0, [r0, #0]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	a902      	add	r1, sp, #8
 8008a04:	f003 f9c0 	bl	800bd88 <_svfiprintf_r>
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	b01c      	add	sp, #112	; 0x70
 8008a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a14:	b003      	add	sp, #12
 8008a16:	4770      	bx	lr
 8008a18:	20000024 	.word	0x20000024
 8008a1c:	ffff0208 	.word	0xffff0208

08008a20 <sulp>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4604      	mov	r4, r0
 8008a24:	460d      	mov	r5, r1
 8008a26:	ec45 4b10 	vmov	d0, r4, r5
 8008a2a:	4616      	mov	r6, r2
 8008a2c:	f002 ff0a 	bl	800b844 <__ulp>
 8008a30:	ec51 0b10 	vmov	r0, r1, d0
 8008a34:	b17e      	cbz	r6, 8008a56 <sulp+0x36>
 8008a36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	dd09      	ble.n	8008a56 <sulp+0x36>
 8008a42:	051b      	lsls	r3, r3, #20
 8008a44:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a48:	2400      	movs	r4, #0
 8008a4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a4e:	4622      	mov	r2, r4
 8008a50:	462b      	mov	r3, r5
 8008a52:	f7f7 fdf1 	bl	8000638 <__aeabi_dmul>
 8008a56:	bd70      	pop	{r4, r5, r6, pc}

08008a58 <_strtod_l>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	ed2d 8b02 	vpush	{d8}
 8008a60:	b09d      	sub	sp, #116	; 0x74
 8008a62:	461f      	mov	r7, r3
 8008a64:	2300      	movs	r3, #0
 8008a66:	9318      	str	r3, [sp, #96]	; 0x60
 8008a68:	4ba2      	ldr	r3, [pc, #648]	; (8008cf4 <_strtod_l+0x29c>)
 8008a6a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	9305      	str	r3, [sp, #20]
 8008a70:	4604      	mov	r4, r0
 8008a72:	4618      	mov	r0, r3
 8008a74:	4688      	mov	r8, r1
 8008a76:	f7f7 fbcb 	bl	8000210 <strlen>
 8008a7a:	f04f 0a00 	mov.w	sl, #0
 8008a7e:	4605      	mov	r5, r0
 8008a80:	f04f 0b00 	mov.w	fp, #0
 8008a84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a8e:	d04e      	beq.n	8008b2e <_strtod_l+0xd6>
 8008a90:	d83b      	bhi.n	8008b0a <_strtod_l+0xb2>
 8008a92:	2a0d      	cmp	r2, #13
 8008a94:	d834      	bhi.n	8008b00 <_strtod_l+0xa8>
 8008a96:	2a08      	cmp	r2, #8
 8008a98:	d834      	bhi.n	8008b04 <_strtod_l+0xac>
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	d03e      	beq.n	8008b1c <_strtod_l+0xc4>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008aa4:	7833      	ldrb	r3, [r6, #0]
 8008aa6:	2b30      	cmp	r3, #48	; 0x30
 8008aa8:	f040 80b0 	bne.w	8008c0c <_strtod_l+0x1b4>
 8008aac:	7873      	ldrb	r3, [r6, #1]
 8008aae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ab2:	2b58      	cmp	r3, #88	; 0x58
 8008ab4:	d168      	bne.n	8008b88 <_strtod_l+0x130>
 8008ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	ab18      	add	r3, sp, #96	; 0x60
 8008abc:	9702      	str	r7, [sp, #8]
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	4a8d      	ldr	r2, [pc, #564]	; (8008cf8 <_strtod_l+0x2a0>)
 8008ac2:	ab19      	add	r3, sp, #100	; 0x64
 8008ac4:	a917      	add	r1, sp, #92	; 0x5c
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f001 ffae 	bl	800aa28 <__gethex>
 8008acc:	f010 0707 	ands.w	r7, r0, #7
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	d005      	beq.n	8008ae0 <_strtod_l+0x88>
 8008ad4:	2f06      	cmp	r7, #6
 8008ad6:	d12c      	bne.n	8008b32 <_strtod_l+0xda>
 8008ad8:	3601      	adds	r6, #1
 8008ada:	2300      	movs	r3, #0
 8008adc:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ade:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f040 8590 	bne.w	8009608 <_strtod_l+0xbb0>
 8008ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aea:	b1eb      	cbz	r3, 8008b28 <_strtod_l+0xd0>
 8008aec:	4652      	mov	r2, sl
 8008aee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008af2:	ec43 2b10 	vmov	d0, r2, r3
 8008af6:	b01d      	add	sp, #116	; 0x74
 8008af8:	ecbd 8b02 	vpop	{d8}
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	2a20      	cmp	r2, #32
 8008b02:	d1cc      	bne.n	8008a9e <_strtod_l+0x46>
 8008b04:	3301      	adds	r3, #1
 8008b06:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b08:	e7be      	b.n	8008a88 <_strtod_l+0x30>
 8008b0a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b0c:	d1c7      	bne.n	8008a9e <_strtod_l+0x46>
 8008b0e:	2201      	movs	r2, #1
 8008b10:	920a      	str	r2, [sp, #40]	; 0x28
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1c2      	bne.n	8008aa2 <_strtod_l+0x4a>
 8008b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f040 856e 	bne.w	8009604 <_strtod_l+0xbac>
 8008b28:	4652      	mov	r2, sl
 8008b2a:	465b      	mov	r3, fp
 8008b2c:	e7e1      	b.n	8008af2 <_strtod_l+0x9a>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	e7ee      	b.n	8008b10 <_strtod_l+0xb8>
 8008b32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b34:	b13a      	cbz	r2, 8008b46 <_strtod_l+0xee>
 8008b36:	2135      	movs	r1, #53	; 0x35
 8008b38:	a81a      	add	r0, sp, #104	; 0x68
 8008b3a:	f002 ff8e 	bl	800ba5a <__copybits>
 8008b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b40:	4620      	mov	r0, r4
 8008b42:	f002 fb4d 	bl	800b1e0 <_Bfree>
 8008b46:	3f01      	subs	r7, #1
 8008b48:	2f04      	cmp	r7, #4
 8008b4a:	d806      	bhi.n	8008b5a <_strtod_l+0x102>
 8008b4c:	e8df f007 	tbb	[pc, r7]
 8008b50:	1714030a 	.word	0x1714030a
 8008b54:	0a          	.byte	0x0a
 8008b55:	00          	.byte	0x00
 8008b56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008b5a:	0728      	lsls	r0, r5, #28
 8008b5c:	d5c0      	bpl.n	8008ae0 <_strtod_l+0x88>
 8008b5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b62:	e7bd      	b.n	8008ae0 <_strtod_l+0x88>
 8008b64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008b68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b76:	e7f0      	b.n	8008b5a <_strtod_l+0x102>
 8008b78:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008cfc <_strtod_l+0x2a4>
 8008b7c:	e7ed      	b.n	8008b5a <_strtod_l+0x102>
 8008b7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b82:	f04f 3aff 	mov.w	sl, #4294967295
 8008b86:	e7e8      	b.n	8008b5a <_strtod_l+0x102>
 8008b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b30      	cmp	r3, #48	; 0x30
 8008b92:	d0f9      	beq.n	8008b88 <_strtod_l+0x130>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0a3      	beq.n	8008ae0 <_strtod_l+0x88>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f04f 0900 	mov.w	r9, #0
 8008b9e:	9304      	str	r3, [sp, #16]
 8008ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ba2:	9308      	str	r3, [sp, #32]
 8008ba4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ba8:	464f      	mov	r7, r9
 8008baa:	220a      	movs	r2, #10
 8008bac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008bae:	7806      	ldrb	r6, [r0, #0]
 8008bb0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008bb4:	b2d9      	uxtb	r1, r3
 8008bb6:	2909      	cmp	r1, #9
 8008bb8:	d92a      	bls.n	8008c10 <_strtod_l+0x1b8>
 8008bba:	9905      	ldr	r1, [sp, #20]
 8008bbc:	462a      	mov	r2, r5
 8008bbe:	f003 fa3e 	bl	800c03e <strncmp>
 8008bc2:	b398      	cbz	r0, 8008c2c <_strtod_l+0x1d4>
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	463d      	mov	r5, r7
 8008bca:	9005      	str	r0, [sp, #20]
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2a65      	cmp	r2, #101	; 0x65
 8008bd0:	d001      	beq.n	8008bd6 <_strtod_l+0x17e>
 8008bd2:	2a45      	cmp	r2, #69	; 0x45
 8008bd4:	d118      	bne.n	8008c08 <_strtod_l+0x1b0>
 8008bd6:	b91d      	cbnz	r5, 8008be0 <_strtod_l+0x188>
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	4302      	orrs	r2, r0
 8008bdc:	d09e      	beq.n	8008b1c <_strtod_l+0xc4>
 8008bde:	2500      	movs	r5, #0
 8008be0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008be4:	f108 0201 	add.w	r2, r8, #1
 8008be8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bea:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008bee:	2a2b      	cmp	r2, #43	; 0x2b
 8008bf0:	d075      	beq.n	8008cde <_strtod_l+0x286>
 8008bf2:	2a2d      	cmp	r2, #45	; 0x2d
 8008bf4:	d07b      	beq.n	8008cee <_strtod_l+0x296>
 8008bf6:	f04f 0c00 	mov.w	ip, #0
 8008bfa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008bfe:	2909      	cmp	r1, #9
 8008c00:	f240 8082 	bls.w	8008d08 <_strtod_l+0x2b0>
 8008c04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c08:	2600      	movs	r6, #0
 8008c0a:	e09d      	b.n	8008d48 <_strtod_l+0x2f0>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e7c4      	b.n	8008b9a <_strtod_l+0x142>
 8008c10:	2f08      	cmp	r7, #8
 8008c12:	bfd8      	it	le
 8008c14:	9907      	ldrle	r1, [sp, #28]
 8008c16:	f100 0001 	add.w	r0, r0, #1
 8008c1a:	bfda      	itte	le
 8008c1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c20:	9307      	strle	r3, [sp, #28]
 8008c22:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c26:	3701      	adds	r7, #1
 8008c28:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c2a:	e7bf      	b.n	8008bac <_strtod_l+0x154>
 8008c2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c2e:	195a      	adds	r2, r3, r5
 8008c30:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c32:	5d5a      	ldrb	r2, [r3, r5]
 8008c34:	2f00      	cmp	r7, #0
 8008c36:	d037      	beq.n	8008ca8 <_strtod_l+0x250>
 8008c38:	9005      	str	r0, [sp, #20]
 8008c3a:	463d      	mov	r5, r7
 8008c3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c40:	2b09      	cmp	r3, #9
 8008c42:	d912      	bls.n	8008c6a <_strtod_l+0x212>
 8008c44:	2301      	movs	r3, #1
 8008c46:	e7c2      	b.n	8008bce <_strtod_l+0x176>
 8008c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c4e:	785a      	ldrb	r2, [r3, #1]
 8008c50:	3001      	adds	r0, #1
 8008c52:	2a30      	cmp	r2, #48	; 0x30
 8008c54:	d0f8      	beq.n	8008c48 <_strtod_l+0x1f0>
 8008c56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	f200 84d9 	bhi.w	8009612 <_strtod_l+0xbba>
 8008c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c62:	9005      	str	r0, [sp, #20]
 8008c64:	2000      	movs	r0, #0
 8008c66:	9308      	str	r3, [sp, #32]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	3a30      	subs	r2, #48	; 0x30
 8008c6c:	f100 0301 	add.w	r3, r0, #1
 8008c70:	d014      	beq.n	8008c9c <_strtod_l+0x244>
 8008c72:	9905      	ldr	r1, [sp, #20]
 8008c74:	4419      	add	r1, r3
 8008c76:	9105      	str	r1, [sp, #20]
 8008c78:	462b      	mov	r3, r5
 8008c7a:	eb00 0e05 	add.w	lr, r0, r5
 8008c7e:	210a      	movs	r1, #10
 8008c80:	4573      	cmp	r3, lr
 8008c82:	d113      	bne.n	8008cac <_strtod_l+0x254>
 8008c84:	182b      	adds	r3, r5, r0
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	f105 0501 	add.w	r5, r5, #1
 8008c8c:	4405      	add	r5, r0
 8008c8e:	dc1c      	bgt.n	8008cca <_strtod_l+0x272>
 8008c90:	9907      	ldr	r1, [sp, #28]
 8008c92:	230a      	movs	r3, #10
 8008c94:	fb03 2301 	mla	r3, r3, r1, r2
 8008c98:	9307      	str	r3, [sp, #28]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c9e:	1c51      	adds	r1, r2, #1
 8008ca0:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ca2:	7852      	ldrb	r2, [r2, #1]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	e7c9      	b.n	8008c3c <_strtod_l+0x1e4>
 8008ca8:	4638      	mov	r0, r7
 8008caa:	e7d2      	b.n	8008c52 <_strtod_l+0x1fa>
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	dc04      	bgt.n	8008cba <_strtod_l+0x262>
 8008cb0:	9e07      	ldr	r6, [sp, #28]
 8008cb2:	434e      	muls	r6, r1
 8008cb4:	9607      	str	r6, [sp, #28]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	e7e2      	b.n	8008c80 <_strtod_l+0x228>
 8008cba:	f103 0c01 	add.w	ip, r3, #1
 8008cbe:	f1bc 0f10 	cmp.w	ip, #16
 8008cc2:	bfd8      	it	le
 8008cc4:	fb01 f909 	mulle.w	r9, r1, r9
 8008cc8:	e7f5      	b.n	8008cb6 <_strtod_l+0x25e>
 8008cca:	2d10      	cmp	r5, #16
 8008ccc:	bfdc      	itt	le
 8008cce:	230a      	movle	r3, #10
 8008cd0:	fb03 2909 	mlale	r9, r3, r9, r2
 8008cd4:	e7e1      	b.n	8008c9a <_strtod_l+0x242>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9305      	str	r3, [sp, #20]
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e77c      	b.n	8008bd8 <_strtod_l+0x180>
 8008cde:	f04f 0c00 	mov.w	ip, #0
 8008ce2:	f108 0202 	add.w	r2, r8, #2
 8008ce6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ce8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008cec:	e785      	b.n	8008bfa <_strtod_l+0x1a2>
 8008cee:	f04f 0c01 	mov.w	ip, #1
 8008cf2:	e7f6      	b.n	8008ce2 <_strtod_l+0x28a>
 8008cf4:	0800cde4 	.word	0x0800cde4
 8008cf8:	0800cb34 	.word	0x0800cb34
 8008cfc:	7ff00000 	.word	0x7ff00000
 8008d00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d02:	1c51      	adds	r1, r2, #1
 8008d04:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d06:	7852      	ldrb	r2, [r2, #1]
 8008d08:	2a30      	cmp	r2, #48	; 0x30
 8008d0a:	d0f9      	beq.n	8008d00 <_strtod_l+0x2a8>
 8008d0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d10:	2908      	cmp	r1, #8
 8008d12:	f63f af79 	bhi.w	8008c08 <_strtod_l+0x1b0>
 8008d16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d1c:	9206      	str	r2, [sp, #24]
 8008d1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d20:	1c51      	adds	r1, r2, #1
 8008d22:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d24:	7852      	ldrb	r2, [r2, #1]
 8008d26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d2a:	2e09      	cmp	r6, #9
 8008d2c:	d937      	bls.n	8008d9e <_strtod_l+0x346>
 8008d2e:	9e06      	ldr	r6, [sp, #24]
 8008d30:	1b89      	subs	r1, r1, r6
 8008d32:	2908      	cmp	r1, #8
 8008d34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d38:	dc02      	bgt.n	8008d40 <_strtod_l+0x2e8>
 8008d3a:	4576      	cmp	r6, lr
 8008d3c:	bfa8      	it	ge
 8008d3e:	4676      	movge	r6, lr
 8008d40:	f1bc 0f00 	cmp.w	ip, #0
 8008d44:	d000      	beq.n	8008d48 <_strtod_l+0x2f0>
 8008d46:	4276      	negs	r6, r6
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	d14d      	bne.n	8008de8 <_strtod_l+0x390>
 8008d4c:	9904      	ldr	r1, [sp, #16]
 8008d4e:	4301      	orrs	r1, r0
 8008d50:	f47f aec6 	bne.w	8008ae0 <_strtod_l+0x88>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f47f aee1 	bne.w	8008b1c <_strtod_l+0xc4>
 8008d5a:	2a69      	cmp	r2, #105	; 0x69
 8008d5c:	d027      	beq.n	8008dae <_strtod_l+0x356>
 8008d5e:	dc24      	bgt.n	8008daa <_strtod_l+0x352>
 8008d60:	2a49      	cmp	r2, #73	; 0x49
 8008d62:	d024      	beq.n	8008dae <_strtod_l+0x356>
 8008d64:	2a4e      	cmp	r2, #78	; 0x4e
 8008d66:	f47f aed9 	bne.w	8008b1c <_strtod_l+0xc4>
 8008d6a:	499f      	ldr	r1, [pc, #636]	; (8008fe8 <_strtod_l+0x590>)
 8008d6c:	a817      	add	r0, sp, #92	; 0x5c
 8008d6e:	f002 f8b3 	bl	800aed8 <__match>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	f43f aed2 	beq.w	8008b1c <_strtod_l+0xc4>
 8008d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b28      	cmp	r3, #40	; 0x28
 8008d7e:	d12d      	bne.n	8008ddc <_strtod_l+0x384>
 8008d80:	499a      	ldr	r1, [pc, #616]	; (8008fec <_strtod_l+0x594>)
 8008d82:	aa1a      	add	r2, sp, #104	; 0x68
 8008d84:	a817      	add	r0, sp, #92	; 0x5c
 8008d86:	f002 f8bb 	bl	800af00 <__hexnan>
 8008d8a:	2805      	cmp	r0, #5
 8008d8c:	d126      	bne.n	8008ddc <_strtod_l+0x384>
 8008d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d9c:	e6a0      	b.n	8008ae0 <_strtod_l+0x88>
 8008d9e:	210a      	movs	r1, #10
 8008da0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008da4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008da8:	e7b9      	b.n	8008d1e <_strtod_l+0x2c6>
 8008daa:	2a6e      	cmp	r2, #110	; 0x6e
 8008dac:	e7db      	b.n	8008d66 <_strtod_l+0x30e>
 8008dae:	4990      	ldr	r1, [pc, #576]	; (8008ff0 <_strtod_l+0x598>)
 8008db0:	a817      	add	r0, sp, #92	; 0x5c
 8008db2:	f002 f891 	bl	800aed8 <__match>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f43f aeb0 	beq.w	8008b1c <_strtod_l+0xc4>
 8008dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dbe:	498d      	ldr	r1, [pc, #564]	; (8008ff4 <_strtod_l+0x59c>)
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	a817      	add	r0, sp, #92	; 0x5c
 8008dc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008dc6:	f002 f887 	bl	800aed8 <__match>
 8008dca:	b910      	cbnz	r0, 8008dd2 <_strtod_l+0x37a>
 8008dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dce:	3301      	adds	r3, #1
 8008dd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008dd2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009004 <_strtod_l+0x5ac>
 8008dd6:	f04f 0a00 	mov.w	sl, #0
 8008dda:	e681      	b.n	8008ae0 <_strtod_l+0x88>
 8008ddc:	4886      	ldr	r0, [pc, #536]	; (8008ff8 <_strtod_l+0x5a0>)
 8008dde:	f003 f8d3 	bl	800bf88 <nan>
 8008de2:	ec5b ab10 	vmov	sl, fp, d0
 8008de6:	e67b      	b.n	8008ae0 <_strtod_l+0x88>
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	9807      	ldr	r0, [sp, #28]
 8008dec:	1af3      	subs	r3, r6, r3
 8008dee:	2f00      	cmp	r7, #0
 8008df0:	bf08      	it	eq
 8008df2:	462f      	moveq	r7, r5
 8008df4:	2d10      	cmp	r5, #16
 8008df6:	9306      	str	r3, [sp, #24]
 8008df8:	46a8      	mov	r8, r5
 8008dfa:	bfa8      	it	ge
 8008dfc:	f04f 0810 	movge.w	r8, #16
 8008e00:	f7f7 fba0 	bl	8000544 <__aeabi_ui2d>
 8008e04:	2d09      	cmp	r5, #9
 8008e06:	4682      	mov	sl, r0
 8008e08:	468b      	mov	fp, r1
 8008e0a:	dd13      	ble.n	8008e34 <_strtod_l+0x3dc>
 8008e0c:	4b7b      	ldr	r3, [pc, #492]	; (8008ffc <_strtod_l+0x5a4>)
 8008e0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e16:	f7f7 fc0f 	bl	8000638 <__aeabi_dmul>
 8008e1a:	4682      	mov	sl, r0
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	468b      	mov	fp, r1
 8008e20:	f7f7 fb90 	bl	8000544 <__aeabi_ui2d>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4650      	mov	r0, sl
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	f7f7 fa4e 	bl	80002cc <__adddf3>
 8008e30:	4682      	mov	sl, r0
 8008e32:	468b      	mov	fp, r1
 8008e34:	2d0f      	cmp	r5, #15
 8008e36:	dc38      	bgt.n	8008eaa <_strtod_l+0x452>
 8008e38:	9b06      	ldr	r3, [sp, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f43f ae50 	beq.w	8008ae0 <_strtod_l+0x88>
 8008e40:	dd24      	ble.n	8008e8c <_strtod_l+0x434>
 8008e42:	2b16      	cmp	r3, #22
 8008e44:	dc0b      	bgt.n	8008e5e <_strtod_l+0x406>
 8008e46:	496d      	ldr	r1, [pc, #436]	; (8008ffc <_strtod_l+0x5a4>)
 8008e48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e50:	4652      	mov	r2, sl
 8008e52:	465b      	mov	r3, fp
 8008e54:	f7f7 fbf0 	bl	8000638 <__aeabi_dmul>
 8008e58:	4682      	mov	sl, r0
 8008e5a:	468b      	mov	fp, r1
 8008e5c:	e640      	b.n	8008ae0 <_strtod_l+0x88>
 8008e5e:	9a06      	ldr	r2, [sp, #24]
 8008e60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e64:	4293      	cmp	r3, r2
 8008e66:	db20      	blt.n	8008eaa <_strtod_l+0x452>
 8008e68:	4c64      	ldr	r4, [pc, #400]	; (8008ffc <_strtod_l+0x5a4>)
 8008e6a:	f1c5 050f 	rsb	r5, r5, #15
 8008e6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e72:	4652      	mov	r2, sl
 8008e74:	465b      	mov	r3, fp
 8008e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e7a:	f7f7 fbdd 	bl	8000638 <__aeabi_dmul>
 8008e7e:	9b06      	ldr	r3, [sp, #24]
 8008e80:	1b5d      	subs	r5, r3, r5
 8008e82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e8a:	e7e3      	b.n	8008e54 <_strtod_l+0x3fc>
 8008e8c:	9b06      	ldr	r3, [sp, #24]
 8008e8e:	3316      	adds	r3, #22
 8008e90:	db0b      	blt.n	8008eaa <_strtod_l+0x452>
 8008e92:	9b05      	ldr	r3, [sp, #20]
 8008e94:	1b9e      	subs	r6, r3, r6
 8008e96:	4b59      	ldr	r3, [pc, #356]	; (8008ffc <_strtod_l+0x5a4>)
 8008e98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ea0:	4650      	mov	r0, sl
 8008ea2:	4659      	mov	r1, fp
 8008ea4:	f7f7 fcf2 	bl	800088c <__aeabi_ddiv>
 8008ea8:	e7d6      	b.n	8008e58 <_strtod_l+0x400>
 8008eaa:	9b06      	ldr	r3, [sp, #24]
 8008eac:	eba5 0808 	sub.w	r8, r5, r8
 8008eb0:	4498      	add	r8, r3
 8008eb2:	f1b8 0f00 	cmp.w	r8, #0
 8008eb6:	dd74      	ble.n	8008fa2 <_strtod_l+0x54a>
 8008eb8:	f018 030f 	ands.w	r3, r8, #15
 8008ebc:	d00a      	beq.n	8008ed4 <_strtod_l+0x47c>
 8008ebe:	494f      	ldr	r1, [pc, #316]	; (8008ffc <_strtod_l+0x5a4>)
 8008ec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	465b      	mov	r3, fp
 8008ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ecc:	f7f7 fbb4 	bl	8000638 <__aeabi_dmul>
 8008ed0:	4682      	mov	sl, r0
 8008ed2:	468b      	mov	fp, r1
 8008ed4:	f038 080f 	bics.w	r8, r8, #15
 8008ed8:	d04f      	beq.n	8008f7a <_strtod_l+0x522>
 8008eda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008ede:	dd22      	ble.n	8008f26 <_strtod_l+0x4ce>
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	462e      	mov	r6, r5
 8008ee4:	9507      	str	r5, [sp, #28]
 8008ee6:	9505      	str	r5, [sp, #20]
 8008ee8:	2322      	movs	r3, #34	; 0x22
 8008eea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009004 <_strtod_l+0x5ac>
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	f04f 0a00 	mov.w	sl, #0
 8008ef4:	9b07      	ldr	r3, [sp, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f43f adf2 	beq.w	8008ae0 <_strtod_l+0x88>
 8008efc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008efe:	4620      	mov	r0, r4
 8008f00:	f002 f96e 	bl	800b1e0 <_Bfree>
 8008f04:	9905      	ldr	r1, [sp, #20]
 8008f06:	4620      	mov	r0, r4
 8008f08:	f002 f96a 	bl	800b1e0 <_Bfree>
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f002 f966 	bl	800b1e0 <_Bfree>
 8008f14:	9907      	ldr	r1, [sp, #28]
 8008f16:	4620      	mov	r0, r4
 8008f18:	f002 f962 	bl	800b1e0 <_Bfree>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f002 f95e 	bl	800b1e0 <_Bfree>
 8008f24:	e5dc      	b.n	8008ae0 <_strtod_l+0x88>
 8008f26:	4b36      	ldr	r3, [pc, #216]	; (8009000 <_strtod_l+0x5a8>)
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f30:	4650      	mov	r0, sl
 8008f32:	4659      	mov	r1, fp
 8008f34:	4699      	mov	r9, r3
 8008f36:	f1b8 0f01 	cmp.w	r8, #1
 8008f3a:	dc21      	bgt.n	8008f80 <_strtod_l+0x528>
 8008f3c:	b10b      	cbz	r3, 8008f42 <_strtod_l+0x4ea>
 8008f3e:	4682      	mov	sl, r0
 8008f40:	468b      	mov	fp, r1
 8008f42:	4b2f      	ldr	r3, [pc, #188]	; (8009000 <_strtod_l+0x5a8>)
 8008f44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	465b      	mov	r3, fp
 8008f50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f54:	f7f7 fb70 	bl	8000638 <__aeabi_dmul>
 8008f58:	4b2a      	ldr	r3, [pc, #168]	; (8009004 <_strtod_l+0x5ac>)
 8008f5a:	460a      	mov	r2, r1
 8008f5c:	400b      	ands	r3, r1
 8008f5e:	492a      	ldr	r1, [pc, #168]	; (8009008 <_strtod_l+0x5b0>)
 8008f60:	428b      	cmp	r3, r1
 8008f62:	4682      	mov	sl, r0
 8008f64:	d8bc      	bhi.n	8008ee0 <_strtod_l+0x488>
 8008f66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f6a:	428b      	cmp	r3, r1
 8008f6c:	bf86      	itte	hi
 8008f6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800900c <_strtod_l+0x5b4>
 8008f72:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9304      	str	r3, [sp, #16]
 8008f7e:	e084      	b.n	800908a <_strtod_l+0x632>
 8008f80:	f018 0f01 	tst.w	r8, #1
 8008f84:	d005      	beq.n	8008f92 <_strtod_l+0x53a>
 8008f86:	9b04      	ldr	r3, [sp, #16]
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f7f7 fb54 	bl	8000638 <__aeabi_dmul>
 8008f90:	2301      	movs	r3, #1
 8008f92:	9a04      	ldr	r2, [sp, #16]
 8008f94:	3208      	adds	r2, #8
 8008f96:	f109 0901 	add.w	r9, r9, #1
 8008f9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f9e:	9204      	str	r2, [sp, #16]
 8008fa0:	e7c9      	b.n	8008f36 <_strtod_l+0x4de>
 8008fa2:	d0ea      	beq.n	8008f7a <_strtod_l+0x522>
 8008fa4:	f1c8 0800 	rsb	r8, r8, #0
 8008fa8:	f018 020f 	ands.w	r2, r8, #15
 8008fac:	d00a      	beq.n	8008fc4 <_strtod_l+0x56c>
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <_strtod_l+0x5a4>)
 8008fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	4659      	mov	r1, fp
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f7f7 fc66 	bl	800088c <__aeabi_ddiv>
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008fc8:	d0d7      	beq.n	8008f7a <_strtod_l+0x522>
 8008fca:	f1b8 0f1f 	cmp.w	r8, #31
 8008fce:	dd1f      	ble.n	8009010 <_strtod_l+0x5b8>
 8008fd0:	2500      	movs	r5, #0
 8008fd2:	462e      	mov	r6, r5
 8008fd4:	9507      	str	r5, [sp, #28]
 8008fd6:	9505      	str	r5, [sp, #20]
 8008fd8:	2322      	movs	r3, #34	; 0x22
 8008fda:	f04f 0a00 	mov.w	sl, #0
 8008fde:	f04f 0b00 	mov.w	fp, #0
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	e786      	b.n	8008ef4 <_strtod_l+0x49c>
 8008fe6:	bf00      	nop
 8008fe8:	0800cb05 	.word	0x0800cb05
 8008fec:	0800cb48 	.word	0x0800cb48
 8008ff0:	0800cafd 	.word	0x0800cafd
 8008ff4:	0800cc8c 	.word	0x0800cc8c
 8008ff8:	0800cfa0 	.word	0x0800cfa0
 8008ffc:	0800ce80 	.word	0x0800ce80
 8009000:	0800ce58 	.word	0x0800ce58
 8009004:	7ff00000 	.word	0x7ff00000
 8009008:	7ca00000 	.word	0x7ca00000
 800900c:	7fefffff 	.word	0x7fefffff
 8009010:	f018 0310 	ands.w	r3, r8, #16
 8009014:	bf18      	it	ne
 8009016:	236a      	movne	r3, #106	; 0x6a
 8009018:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80093c8 <_strtod_l+0x970>
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	4650      	mov	r0, sl
 8009020:	4659      	mov	r1, fp
 8009022:	2300      	movs	r3, #0
 8009024:	f018 0f01 	tst.w	r8, #1
 8009028:	d004      	beq.n	8009034 <_strtod_l+0x5dc>
 800902a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800902e:	f7f7 fb03 	bl	8000638 <__aeabi_dmul>
 8009032:	2301      	movs	r3, #1
 8009034:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009038:	f109 0908 	add.w	r9, r9, #8
 800903c:	d1f2      	bne.n	8009024 <_strtod_l+0x5cc>
 800903e:	b10b      	cbz	r3, 8009044 <_strtod_l+0x5ec>
 8009040:	4682      	mov	sl, r0
 8009042:	468b      	mov	fp, r1
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	b1c3      	cbz	r3, 800907a <_strtod_l+0x622>
 8009048:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800904c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009050:	2b00      	cmp	r3, #0
 8009052:	4659      	mov	r1, fp
 8009054:	dd11      	ble.n	800907a <_strtod_l+0x622>
 8009056:	2b1f      	cmp	r3, #31
 8009058:	f340 8124 	ble.w	80092a4 <_strtod_l+0x84c>
 800905c:	2b34      	cmp	r3, #52	; 0x34
 800905e:	bfde      	ittt	le
 8009060:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009064:	f04f 33ff 	movle.w	r3, #4294967295
 8009068:	fa03 f202 	lslle.w	r2, r3, r2
 800906c:	f04f 0a00 	mov.w	sl, #0
 8009070:	bfcc      	ite	gt
 8009072:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009076:	ea02 0b01 	andle.w	fp, r2, r1
 800907a:	2200      	movs	r2, #0
 800907c:	2300      	movs	r3, #0
 800907e:	4650      	mov	r0, sl
 8009080:	4659      	mov	r1, fp
 8009082:	f7f7 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 8009086:	2800      	cmp	r0, #0
 8009088:	d1a2      	bne.n	8008fd0 <_strtod_l+0x578>
 800908a:	9b07      	ldr	r3, [sp, #28]
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	9908      	ldr	r1, [sp, #32]
 8009090:	462b      	mov	r3, r5
 8009092:	463a      	mov	r2, r7
 8009094:	4620      	mov	r0, r4
 8009096:	f002 f90b 	bl	800b2b0 <__s2b>
 800909a:	9007      	str	r0, [sp, #28]
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f af1f 	beq.w	8008ee0 <_strtod_l+0x488>
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	1b9e      	subs	r6, r3, r6
 80090a6:	9b06      	ldr	r3, [sp, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfb4      	ite	lt
 80090ac:	4633      	movlt	r3, r6
 80090ae:	2300      	movge	r3, #0
 80090b0:	930c      	str	r3, [sp, #48]	; 0x30
 80090b2:	9b06      	ldr	r3, [sp, #24]
 80090b4:	2500      	movs	r5, #0
 80090b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090ba:	9312      	str	r3, [sp, #72]	; 0x48
 80090bc:	462e      	mov	r6, r5
 80090be:	9b07      	ldr	r3, [sp, #28]
 80090c0:	4620      	mov	r0, r4
 80090c2:	6859      	ldr	r1, [r3, #4]
 80090c4:	f002 f84c 	bl	800b160 <_Balloc>
 80090c8:	9005      	str	r0, [sp, #20]
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f43f af0c 	beq.w	8008ee8 <_strtod_l+0x490>
 80090d0:	9b07      	ldr	r3, [sp, #28]
 80090d2:	691a      	ldr	r2, [r3, #16]
 80090d4:	3202      	adds	r2, #2
 80090d6:	f103 010c 	add.w	r1, r3, #12
 80090da:	0092      	lsls	r2, r2, #2
 80090dc:	300c      	adds	r0, #12
 80090de:	f002 f831 	bl	800b144 <memcpy>
 80090e2:	ec4b ab10 	vmov	d0, sl, fp
 80090e6:	aa1a      	add	r2, sp, #104	; 0x68
 80090e8:	a919      	add	r1, sp, #100	; 0x64
 80090ea:	4620      	mov	r0, r4
 80090ec:	f002 fc26 	bl	800b93c <__d2b>
 80090f0:	ec4b ab18 	vmov	d8, sl, fp
 80090f4:	9018      	str	r0, [sp, #96]	; 0x60
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f43f aef6 	beq.w	8008ee8 <_strtod_l+0x490>
 80090fc:	2101      	movs	r1, #1
 80090fe:	4620      	mov	r0, r4
 8009100:	f002 f970 	bl	800b3e4 <__i2b>
 8009104:	4606      	mov	r6, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f aeee 	beq.w	8008ee8 <_strtod_l+0x490>
 800910c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800910e:	9904      	ldr	r1, [sp, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	bfab      	itete	ge
 8009114:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009116:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009118:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800911a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800911e:	bfac      	ite	ge
 8009120:	eb03 0902 	addge.w	r9, r3, r2
 8009124:	1ad7      	sublt	r7, r2, r3
 8009126:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009128:	eba3 0801 	sub.w	r8, r3, r1
 800912c:	4490      	add	r8, r2
 800912e:	4ba1      	ldr	r3, [pc, #644]	; (80093b4 <_strtod_l+0x95c>)
 8009130:	f108 38ff 	add.w	r8, r8, #4294967295
 8009134:	4598      	cmp	r8, r3
 8009136:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800913a:	f280 80c7 	bge.w	80092cc <_strtod_l+0x874>
 800913e:	eba3 0308 	sub.w	r3, r3, r8
 8009142:	2b1f      	cmp	r3, #31
 8009144:	eba2 0203 	sub.w	r2, r2, r3
 8009148:	f04f 0101 	mov.w	r1, #1
 800914c:	f300 80b1 	bgt.w	80092b2 <_strtod_l+0x85a>
 8009150:	fa01 f303 	lsl.w	r3, r1, r3
 8009154:	930d      	str	r3, [sp, #52]	; 0x34
 8009156:	2300      	movs	r3, #0
 8009158:	9308      	str	r3, [sp, #32]
 800915a:	eb09 0802 	add.w	r8, r9, r2
 800915e:	9b04      	ldr	r3, [sp, #16]
 8009160:	45c1      	cmp	r9, r8
 8009162:	4417      	add	r7, r2
 8009164:	441f      	add	r7, r3
 8009166:	464b      	mov	r3, r9
 8009168:	bfa8      	it	ge
 800916a:	4643      	movge	r3, r8
 800916c:	42bb      	cmp	r3, r7
 800916e:	bfa8      	it	ge
 8009170:	463b      	movge	r3, r7
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfc2      	ittt	gt
 8009176:	eba8 0803 	subgt.w	r8, r8, r3
 800917a:	1aff      	subgt	r7, r7, r3
 800917c:	eba9 0903 	subgt.w	r9, r9, r3
 8009180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009182:	2b00      	cmp	r3, #0
 8009184:	dd17      	ble.n	80091b6 <_strtod_l+0x75e>
 8009186:	4631      	mov	r1, r6
 8009188:	461a      	mov	r2, r3
 800918a:	4620      	mov	r0, r4
 800918c:	f002 f9ea 	bl	800b564 <__pow5mult>
 8009190:	4606      	mov	r6, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	f43f aea8 	beq.w	8008ee8 <_strtod_l+0x490>
 8009198:	4601      	mov	r1, r0
 800919a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800919c:	4620      	mov	r0, r4
 800919e:	f002 f937 	bl	800b410 <__multiply>
 80091a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80091a4:	2800      	cmp	r0, #0
 80091a6:	f43f ae9f 	beq.w	8008ee8 <_strtod_l+0x490>
 80091aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091ac:	4620      	mov	r0, r4
 80091ae:	f002 f817 	bl	800b1e0 <_Bfree>
 80091b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b4:	9318      	str	r3, [sp, #96]	; 0x60
 80091b6:	f1b8 0f00 	cmp.w	r8, #0
 80091ba:	f300 808c 	bgt.w	80092d6 <_strtod_l+0x87e>
 80091be:	9b06      	ldr	r3, [sp, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dd08      	ble.n	80091d6 <_strtod_l+0x77e>
 80091c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091c6:	9905      	ldr	r1, [sp, #20]
 80091c8:	4620      	mov	r0, r4
 80091ca:	f002 f9cb 	bl	800b564 <__pow5mult>
 80091ce:	9005      	str	r0, [sp, #20]
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f43f ae89 	beq.w	8008ee8 <_strtod_l+0x490>
 80091d6:	2f00      	cmp	r7, #0
 80091d8:	dd08      	ble.n	80091ec <_strtod_l+0x794>
 80091da:	9905      	ldr	r1, [sp, #20]
 80091dc:	463a      	mov	r2, r7
 80091de:	4620      	mov	r0, r4
 80091e0:	f002 fa1a 	bl	800b618 <__lshift>
 80091e4:	9005      	str	r0, [sp, #20]
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f ae7e 	beq.w	8008ee8 <_strtod_l+0x490>
 80091ec:	f1b9 0f00 	cmp.w	r9, #0
 80091f0:	dd08      	ble.n	8009204 <_strtod_l+0x7ac>
 80091f2:	4631      	mov	r1, r6
 80091f4:	464a      	mov	r2, r9
 80091f6:	4620      	mov	r0, r4
 80091f8:	f002 fa0e 	bl	800b618 <__lshift>
 80091fc:	4606      	mov	r6, r0
 80091fe:	2800      	cmp	r0, #0
 8009200:	f43f ae72 	beq.w	8008ee8 <_strtod_l+0x490>
 8009204:	9a05      	ldr	r2, [sp, #20]
 8009206:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009208:	4620      	mov	r0, r4
 800920a:	f002 fa91 	bl	800b730 <__mdiff>
 800920e:	4605      	mov	r5, r0
 8009210:	2800      	cmp	r0, #0
 8009212:	f43f ae69 	beq.w	8008ee8 <_strtod_l+0x490>
 8009216:	68c3      	ldr	r3, [r0, #12]
 8009218:	930b      	str	r3, [sp, #44]	; 0x2c
 800921a:	2300      	movs	r3, #0
 800921c:	60c3      	str	r3, [r0, #12]
 800921e:	4631      	mov	r1, r6
 8009220:	f002 fa6a 	bl	800b6f8 <__mcmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	da60      	bge.n	80092ea <_strtod_l+0x892>
 8009228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800922a:	ea53 030a 	orrs.w	r3, r3, sl
 800922e:	f040 8082 	bne.w	8009336 <_strtod_l+0x8de>
 8009232:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009236:	2b00      	cmp	r3, #0
 8009238:	d17d      	bne.n	8009336 <_strtod_l+0x8de>
 800923a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800923e:	0d1b      	lsrs	r3, r3, #20
 8009240:	051b      	lsls	r3, r3, #20
 8009242:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009246:	d976      	bls.n	8009336 <_strtod_l+0x8de>
 8009248:	696b      	ldr	r3, [r5, #20]
 800924a:	b913      	cbnz	r3, 8009252 <_strtod_l+0x7fa>
 800924c:	692b      	ldr	r3, [r5, #16]
 800924e:	2b01      	cmp	r3, #1
 8009250:	dd71      	ble.n	8009336 <_strtod_l+0x8de>
 8009252:	4629      	mov	r1, r5
 8009254:	2201      	movs	r2, #1
 8009256:	4620      	mov	r0, r4
 8009258:	f002 f9de 	bl	800b618 <__lshift>
 800925c:	4631      	mov	r1, r6
 800925e:	4605      	mov	r5, r0
 8009260:	f002 fa4a 	bl	800b6f8 <__mcmp>
 8009264:	2800      	cmp	r0, #0
 8009266:	dd66      	ble.n	8009336 <_strtod_l+0x8de>
 8009268:	9904      	ldr	r1, [sp, #16]
 800926a:	4a53      	ldr	r2, [pc, #332]	; (80093b8 <_strtod_l+0x960>)
 800926c:	465b      	mov	r3, fp
 800926e:	2900      	cmp	r1, #0
 8009270:	f000 8081 	beq.w	8009376 <_strtod_l+0x91e>
 8009274:	ea02 010b 	and.w	r1, r2, fp
 8009278:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800927c:	dc7b      	bgt.n	8009376 <_strtod_l+0x91e>
 800927e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009282:	f77f aea9 	ble.w	8008fd8 <_strtod_l+0x580>
 8009286:	4b4d      	ldr	r3, [pc, #308]	; (80093bc <_strtod_l+0x964>)
 8009288:	4650      	mov	r0, sl
 800928a:	4659      	mov	r1, fp
 800928c:	2200      	movs	r2, #0
 800928e:	f7f7 f9d3 	bl	8000638 <__aeabi_dmul>
 8009292:	460b      	mov	r3, r1
 8009294:	4303      	orrs	r3, r0
 8009296:	bf08      	it	eq
 8009298:	2322      	moveq	r3, #34	; 0x22
 800929a:	4682      	mov	sl, r0
 800929c:	468b      	mov	fp, r1
 800929e:	bf08      	it	eq
 80092a0:	6023      	streq	r3, [r4, #0]
 80092a2:	e62b      	b.n	8008efc <_strtod_l+0x4a4>
 80092a4:	f04f 32ff 	mov.w	r2, #4294967295
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	ea03 0a0a 	and.w	sl, r3, sl
 80092b0:	e6e3      	b.n	800907a <_strtod_l+0x622>
 80092b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80092b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80092ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80092be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80092c2:	fa01 f308 	lsl.w	r3, r1, r8
 80092c6:	9308      	str	r3, [sp, #32]
 80092c8:	910d      	str	r1, [sp, #52]	; 0x34
 80092ca:	e746      	b.n	800915a <_strtod_l+0x702>
 80092cc:	2300      	movs	r3, #0
 80092ce:	9308      	str	r3, [sp, #32]
 80092d0:	2301      	movs	r3, #1
 80092d2:	930d      	str	r3, [sp, #52]	; 0x34
 80092d4:	e741      	b.n	800915a <_strtod_l+0x702>
 80092d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092d8:	4642      	mov	r2, r8
 80092da:	4620      	mov	r0, r4
 80092dc:	f002 f99c 	bl	800b618 <__lshift>
 80092e0:	9018      	str	r0, [sp, #96]	; 0x60
 80092e2:	2800      	cmp	r0, #0
 80092e4:	f47f af6b 	bne.w	80091be <_strtod_l+0x766>
 80092e8:	e5fe      	b.n	8008ee8 <_strtod_l+0x490>
 80092ea:	465f      	mov	r7, fp
 80092ec:	d16e      	bne.n	80093cc <_strtod_l+0x974>
 80092ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092f4:	b342      	cbz	r2, 8009348 <_strtod_l+0x8f0>
 80092f6:	4a32      	ldr	r2, [pc, #200]	; (80093c0 <_strtod_l+0x968>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d128      	bne.n	800934e <_strtod_l+0x8f6>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	4651      	mov	r1, sl
 8009300:	b1eb      	cbz	r3, 800933e <_strtod_l+0x8e6>
 8009302:	4b2d      	ldr	r3, [pc, #180]	; (80093b8 <_strtod_l+0x960>)
 8009304:	403b      	ands	r3, r7
 8009306:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800930a:	f04f 32ff 	mov.w	r2, #4294967295
 800930e:	d819      	bhi.n	8009344 <_strtod_l+0x8ec>
 8009310:	0d1b      	lsrs	r3, r3, #20
 8009312:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009316:	fa02 f303 	lsl.w	r3, r2, r3
 800931a:	4299      	cmp	r1, r3
 800931c:	d117      	bne.n	800934e <_strtod_l+0x8f6>
 800931e:	4b29      	ldr	r3, [pc, #164]	; (80093c4 <_strtod_l+0x96c>)
 8009320:	429f      	cmp	r7, r3
 8009322:	d102      	bne.n	800932a <_strtod_l+0x8d2>
 8009324:	3101      	adds	r1, #1
 8009326:	f43f addf 	beq.w	8008ee8 <_strtod_l+0x490>
 800932a:	4b23      	ldr	r3, [pc, #140]	; (80093b8 <_strtod_l+0x960>)
 800932c:	403b      	ands	r3, r7
 800932e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009332:	f04f 0a00 	mov.w	sl, #0
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1a4      	bne.n	8009286 <_strtod_l+0x82e>
 800933c:	e5de      	b.n	8008efc <_strtod_l+0x4a4>
 800933e:	f04f 33ff 	mov.w	r3, #4294967295
 8009342:	e7ea      	b.n	800931a <_strtod_l+0x8c2>
 8009344:	4613      	mov	r3, r2
 8009346:	e7e8      	b.n	800931a <_strtod_l+0x8c2>
 8009348:	ea53 030a 	orrs.w	r3, r3, sl
 800934c:	d08c      	beq.n	8009268 <_strtod_l+0x810>
 800934e:	9b08      	ldr	r3, [sp, #32]
 8009350:	b1db      	cbz	r3, 800938a <_strtod_l+0x932>
 8009352:	423b      	tst	r3, r7
 8009354:	d0ef      	beq.n	8009336 <_strtod_l+0x8de>
 8009356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009358:	9a04      	ldr	r2, [sp, #16]
 800935a:	4650      	mov	r0, sl
 800935c:	4659      	mov	r1, fp
 800935e:	b1c3      	cbz	r3, 8009392 <_strtod_l+0x93a>
 8009360:	f7ff fb5e 	bl	8008a20 <sulp>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	ec51 0b18 	vmov	r0, r1, d8
 800936c:	f7f6 ffae 	bl	80002cc <__adddf3>
 8009370:	4682      	mov	sl, r0
 8009372:	468b      	mov	fp, r1
 8009374:	e7df      	b.n	8009336 <_strtod_l+0x8de>
 8009376:	4013      	ands	r3, r2
 8009378:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800937c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009380:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009384:	f04f 3aff 	mov.w	sl, #4294967295
 8009388:	e7d5      	b.n	8009336 <_strtod_l+0x8de>
 800938a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800938c:	ea13 0f0a 	tst.w	r3, sl
 8009390:	e7e0      	b.n	8009354 <_strtod_l+0x8fc>
 8009392:	f7ff fb45 	bl	8008a20 <sulp>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	ec51 0b18 	vmov	r0, r1, d8
 800939e:	f7f6 ff93 	bl	80002c8 <__aeabi_dsub>
 80093a2:	2200      	movs	r2, #0
 80093a4:	2300      	movs	r3, #0
 80093a6:	4682      	mov	sl, r0
 80093a8:	468b      	mov	fp, r1
 80093aa:	f7f7 fbad 	bl	8000b08 <__aeabi_dcmpeq>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d0c1      	beq.n	8009336 <_strtod_l+0x8de>
 80093b2:	e611      	b.n	8008fd8 <_strtod_l+0x580>
 80093b4:	fffffc02 	.word	0xfffffc02
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	39500000 	.word	0x39500000
 80093c0:	000fffff 	.word	0x000fffff
 80093c4:	7fefffff 	.word	0x7fefffff
 80093c8:	0800cb60 	.word	0x0800cb60
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	f002 fb10 	bl	800b9f4 <__ratio>
 80093d4:	ec59 8b10 	vmov	r8, r9, d0
 80093d8:	ee10 0a10 	vmov	r0, s0
 80093dc:	2200      	movs	r2, #0
 80093de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f7 fba4 	bl	8000b30 <__aeabi_dcmple>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d07a      	beq.n	80094e2 <_strtod_l+0xa8a>
 80093ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d04a      	beq.n	8009488 <_strtod_l+0xa30>
 80093f2:	4b95      	ldr	r3, [pc, #596]	; (8009648 <_strtod_l+0xbf0>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009648 <_strtod_l+0xbf0>
 80093fe:	f04f 0800 	mov.w	r8, #0
 8009402:	4b92      	ldr	r3, [pc, #584]	; (800964c <_strtod_l+0xbf4>)
 8009404:	403b      	ands	r3, r7
 8009406:	930d      	str	r3, [sp, #52]	; 0x34
 8009408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800940a:	4b91      	ldr	r3, [pc, #580]	; (8009650 <_strtod_l+0xbf8>)
 800940c:	429a      	cmp	r2, r3
 800940e:	f040 80b0 	bne.w	8009572 <_strtod_l+0xb1a>
 8009412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009416:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800941a:	ec4b ab10 	vmov	d0, sl, fp
 800941e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009422:	f002 fa0f 	bl	800b844 <__ulp>
 8009426:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800942a:	ec53 2b10 	vmov	r2, r3, d0
 800942e:	f7f7 f903 	bl	8000638 <__aeabi_dmul>
 8009432:	4652      	mov	r2, sl
 8009434:	465b      	mov	r3, fp
 8009436:	f7f6 ff49 	bl	80002cc <__adddf3>
 800943a:	460b      	mov	r3, r1
 800943c:	4983      	ldr	r1, [pc, #524]	; (800964c <_strtod_l+0xbf4>)
 800943e:	4a85      	ldr	r2, [pc, #532]	; (8009654 <_strtod_l+0xbfc>)
 8009440:	4019      	ands	r1, r3
 8009442:	4291      	cmp	r1, r2
 8009444:	4682      	mov	sl, r0
 8009446:	d960      	bls.n	800950a <_strtod_l+0xab2>
 8009448:	ee18 3a90 	vmov	r3, s17
 800944c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009450:	4293      	cmp	r3, r2
 8009452:	d104      	bne.n	800945e <_strtod_l+0xa06>
 8009454:	ee18 3a10 	vmov	r3, s16
 8009458:	3301      	adds	r3, #1
 800945a:	f43f ad45 	beq.w	8008ee8 <_strtod_l+0x490>
 800945e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009660 <_strtod_l+0xc08>
 8009462:	f04f 3aff 	mov.w	sl, #4294967295
 8009466:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009468:	4620      	mov	r0, r4
 800946a:	f001 feb9 	bl	800b1e0 <_Bfree>
 800946e:	9905      	ldr	r1, [sp, #20]
 8009470:	4620      	mov	r0, r4
 8009472:	f001 feb5 	bl	800b1e0 <_Bfree>
 8009476:	4631      	mov	r1, r6
 8009478:	4620      	mov	r0, r4
 800947a:	f001 feb1 	bl	800b1e0 <_Bfree>
 800947e:	4629      	mov	r1, r5
 8009480:	4620      	mov	r0, r4
 8009482:	f001 fead 	bl	800b1e0 <_Bfree>
 8009486:	e61a      	b.n	80090be <_strtod_l+0x666>
 8009488:	f1ba 0f00 	cmp.w	sl, #0
 800948c:	d11b      	bne.n	80094c6 <_strtod_l+0xa6e>
 800948e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009492:	b9f3      	cbnz	r3, 80094d2 <_strtod_l+0xa7a>
 8009494:	4b6c      	ldr	r3, [pc, #432]	; (8009648 <_strtod_l+0xbf0>)
 8009496:	2200      	movs	r2, #0
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f7 fb3e 	bl	8000b1c <__aeabi_dcmplt>
 80094a0:	b9d0      	cbnz	r0, 80094d8 <_strtod_l+0xa80>
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	4b6c      	ldr	r3, [pc, #432]	; (8009658 <_strtod_l+0xc00>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	f7f7 f8c5 	bl	8000638 <__aeabi_dmul>
 80094ae:	4680      	mov	r8, r0
 80094b0:	4689      	mov	r9, r1
 80094b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80094ba:	9315      	str	r3, [sp, #84]	; 0x54
 80094bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094c4:	e79d      	b.n	8009402 <_strtod_l+0x9aa>
 80094c6:	f1ba 0f01 	cmp.w	sl, #1
 80094ca:	d102      	bne.n	80094d2 <_strtod_l+0xa7a>
 80094cc:	2f00      	cmp	r7, #0
 80094ce:	f43f ad83 	beq.w	8008fd8 <_strtod_l+0x580>
 80094d2:	4b62      	ldr	r3, [pc, #392]	; (800965c <_strtod_l+0xc04>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	e78e      	b.n	80093f6 <_strtod_l+0x99e>
 80094d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009658 <_strtod_l+0xc00>
 80094dc:	f04f 0800 	mov.w	r8, #0
 80094e0:	e7e7      	b.n	80094b2 <_strtod_l+0xa5a>
 80094e2:	4b5d      	ldr	r3, [pc, #372]	; (8009658 <_strtod_l+0xc00>)
 80094e4:	4640      	mov	r0, r8
 80094e6:	4649      	mov	r1, r9
 80094e8:	2200      	movs	r2, #0
 80094ea:	f7f7 f8a5 	bl	8000638 <__aeabi_dmul>
 80094ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094f0:	4680      	mov	r8, r0
 80094f2:	4689      	mov	r9, r1
 80094f4:	b933      	cbnz	r3, 8009504 <_strtod_l+0xaac>
 80094f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094fa:	900e      	str	r0, [sp, #56]	; 0x38
 80094fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80094fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009502:	e7dd      	b.n	80094c0 <_strtod_l+0xa68>
 8009504:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009508:	e7f9      	b.n	80094fe <_strtod_l+0xaa6>
 800950a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800950e:	9b04      	ldr	r3, [sp, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1a8      	bne.n	8009466 <_strtod_l+0xa0e>
 8009514:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800951a:	0d1b      	lsrs	r3, r3, #20
 800951c:	051b      	lsls	r3, r3, #20
 800951e:	429a      	cmp	r2, r3
 8009520:	d1a1      	bne.n	8009466 <_strtod_l+0xa0e>
 8009522:	4640      	mov	r0, r8
 8009524:	4649      	mov	r1, r9
 8009526:	f7f7 fbe7 	bl	8000cf8 <__aeabi_d2lz>
 800952a:	f7f7 f857 	bl	80005dc <__aeabi_l2d>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f7f6 fec7 	bl	80002c8 <__aeabi_dsub>
 800953a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800953c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009540:	ea43 030a 	orr.w	r3, r3, sl
 8009544:	4313      	orrs	r3, r2
 8009546:	4680      	mov	r8, r0
 8009548:	4689      	mov	r9, r1
 800954a:	d055      	beq.n	80095f8 <_strtod_l+0xba0>
 800954c:	a336      	add	r3, pc, #216	; (adr r3, 8009628 <_strtod_l+0xbd0>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	f7f7 fae3 	bl	8000b1c <__aeabi_dcmplt>
 8009556:	2800      	cmp	r0, #0
 8009558:	f47f acd0 	bne.w	8008efc <_strtod_l+0x4a4>
 800955c:	a334      	add	r3, pc, #208	; (adr r3, 8009630 <_strtod_l+0xbd8>)
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	f7f7 faf7 	bl	8000b58 <__aeabi_dcmpgt>
 800956a:	2800      	cmp	r0, #0
 800956c:	f43f af7b 	beq.w	8009466 <_strtod_l+0xa0e>
 8009570:	e4c4      	b.n	8008efc <_strtod_l+0x4a4>
 8009572:	9b04      	ldr	r3, [sp, #16]
 8009574:	b333      	cbz	r3, 80095c4 <_strtod_l+0xb6c>
 8009576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009578:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800957c:	d822      	bhi.n	80095c4 <_strtod_l+0xb6c>
 800957e:	a32e      	add	r3, pc, #184	; (adr r3, 8009638 <_strtod_l+0xbe0>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	4640      	mov	r0, r8
 8009586:	4649      	mov	r1, r9
 8009588:	f7f7 fad2 	bl	8000b30 <__aeabi_dcmple>
 800958c:	b1a0      	cbz	r0, 80095b8 <_strtod_l+0xb60>
 800958e:	4649      	mov	r1, r9
 8009590:	4640      	mov	r0, r8
 8009592:	f7f7 fb29 	bl	8000be8 <__aeabi_d2uiz>
 8009596:	2801      	cmp	r0, #1
 8009598:	bf38      	it	cc
 800959a:	2001      	movcc	r0, #1
 800959c:	f7f6 ffd2 	bl	8000544 <__aeabi_ui2d>
 80095a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a2:	4680      	mov	r8, r0
 80095a4:	4689      	mov	r9, r1
 80095a6:	bb23      	cbnz	r3, 80095f2 <_strtod_l+0xb9a>
 80095a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095ac:	9010      	str	r0, [sp, #64]	; 0x40
 80095ae:	9311      	str	r3, [sp, #68]	; 0x44
 80095b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095c0:	1a9b      	subs	r3, r3, r2
 80095c2:	9309      	str	r3, [sp, #36]	; 0x24
 80095c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095c8:	eeb0 0a48 	vmov.f32	s0, s16
 80095cc:	eef0 0a68 	vmov.f32	s1, s17
 80095d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095d4:	f002 f936 	bl	800b844 <__ulp>
 80095d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095dc:	ec53 2b10 	vmov	r2, r3, d0
 80095e0:	f7f7 f82a 	bl	8000638 <__aeabi_dmul>
 80095e4:	ec53 2b18 	vmov	r2, r3, d8
 80095e8:	f7f6 fe70 	bl	80002cc <__adddf3>
 80095ec:	4682      	mov	sl, r0
 80095ee:	468b      	mov	fp, r1
 80095f0:	e78d      	b.n	800950e <_strtod_l+0xab6>
 80095f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80095f6:	e7db      	b.n	80095b0 <_strtod_l+0xb58>
 80095f8:	a311      	add	r3, pc, #68	; (adr r3, 8009640 <_strtod_l+0xbe8>)
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f7f7 fa8d 	bl	8000b1c <__aeabi_dcmplt>
 8009602:	e7b2      	b.n	800956a <_strtod_l+0xb12>
 8009604:	2300      	movs	r3, #0
 8009606:	930a      	str	r3, [sp, #40]	; 0x28
 8009608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800960a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	f7ff ba6b 	b.w	8008ae8 <_strtod_l+0x90>
 8009612:	2a65      	cmp	r2, #101	; 0x65
 8009614:	f43f ab5f 	beq.w	8008cd6 <_strtod_l+0x27e>
 8009618:	2a45      	cmp	r2, #69	; 0x45
 800961a:	f43f ab5c 	beq.w	8008cd6 <_strtod_l+0x27e>
 800961e:	2301      	movs	r3, #1
 8009620:	f7ff bb94 	b.w	8008d4c <_strtod_l+0x2f4>
 8009624:	f3af 8000 	nop.w
 8009628:	94a03595 	.word	0x94a03595
 800962c:	3fdfffff 	.word	0x3fdfffff
 8009630:	35afe535 	.word	0x35afe535
 8009634:	3fe00000 	.word	0x3fe00000
 8009638:	ffc00000 	.word	0xffc00000
 800963c:	41dfffff 	.word	0x41dfffff
 8009640:	94a03595 	.word	0x94a03595
 8009644:	3fcfffff 	.word	0x3fcfffff
 8009648:	3ff00000 	.word	0x3ff00000
 800964c:	7ff00000 	.word	0x7ff00000
 8009650:	7fe00000 	.word	0x7fe00000
 8009654:	7c9fffff 	.word	0x7c9fffff
 8009658:	3fe00000 	.word	0x3fe00000
 800965c:	bff00000 	.word	0xbff00000
 8009660:	7fefffff 	.word	0x7fefffff

08009664 <_strtod_r>:
 8009664:	4b01      	ldr	r3, [pc, #4]	; (800966c <_strtod_r+0x8>)
 8009666:	f7ff b9f7 	b.w	8008a58 <_strtod_l>
 800966a:	bf00      	nop
 800966c:	2000008c 	.word	0x2000008c

08009670 <_strtol_l.constprop.0>:
 8009670:	2b01      	cmp	r3, #1
 8009672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009676:	d001      	beq.n	800967c <_strtol_l.constprop.0+0xc>
 8009678:	2b24      	cmp	r3, #36	; 0x24
 800967a:	d906      	bls.n	800968a <_strtol_l.constprop.0+0x1a>
 800967c:	f7fe fa88 	bl	8007b90 <__errno>
 8009680:	2316      	movs	r3, #22
 8009682:	6003      	str	r3, [r0, #0]
 8009684:	2000      	movs	r0, #0
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009770 <_strtol_l.constprop.0+0x100>
 800968e:	460d      	mov	r5, r1
 8009690:	462e      	mov	r6, r5
 8009692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009696:	f814 700c 	ldrb.w	r7, [r4, ip]
 800969a:	f017 0708 	ands.w	r7, r7, #8
 800969e:	d1f7      	bne.n	8009690 <_strtol_l.constprop.0+0x20>
 80096a0:	2c2d      	cmp	r4, #45	; 0x2d
 80096a2:	d132      	bne.n	800970a <_strtol_l.constprop.0+0x9a>
 80096a4:	782c      	ldrb	r4, [r5, #0]
 80096a6:	2701      	movs	r7, #1
 80096a8:	1cb5      	adds	r5, r6, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d05b      	beq.n	8009766 <_strtol_l.constprop.0+0xf6>
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d109      	bne.n	80096c6 <_strtol_l.constprop.0+0x56>
 80096b2:	2c30      	cmp	r4, #48	; 0x30
 80096b4:	d107      	bne.n	80096c6 <_strtol_l.constprop.0+0x56>
 80096b6:	782c      	ldrb	r4, [r5, #0]
 80096b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096bc:	2c58      	cmp	r4, #88	; 0x58
 80096be:	d14d      	bne.n	800975c <_strtol_l.constprop.0+0xec>
 80096c0:	786c      	ldrb	r4, [r5, #1]
 80096c2:	2310      	movs	r3, #16
 80096c4:	3502      	adds	r5, #2
 80096c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80096ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80096ce:	f04f 0c00 	mov.w	ip, #0
 80096d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80096d6:	4666      	mov	r6, ip
 80096d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80096dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80096e0:	f1be 0f09 	cmp.w	lr, #9
 80096e4:	d816      	bhi.n	8009714 <_strtol_l.constprop.0+0xa4>
 80096e6:	4674      	mov	r4, lr
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	dd24      	ble.n	8009736 <_strtol_l.constprop.0+0xc6>
 80096ec:	f1bc 0f00 	cmp.w	ip, #0
 80096f0:	db1e      	blt.n	8009730 <_strtol_l.constprop.0+0xc0>
 80096f2:	45b1      	cmp	r9, r6
 80096f4:	d31c      	bcc.n	8009730 <_strtol_l.constprop.0+0xc0>
 80096f6:	d101      	bne.n	80096fc <_strtol_l.constprop.0+0x8c>
 80096f8:	45a2      	cmp	sl, r4
 80096fa:	db19      	blt.n	8009730 <_strtol_l.constprop.0+0xc0>
 80096fc:	fb06 4603 	mla	r6, r6, r3, r4
 8009700:	f04f 0c01 	mov.w	ip, #1
 8009704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009708:	e7e8      	b.n	80096dc <_strtol_l.constprop.0+0x6c>
 800970a:	2c2b      	cmp	r4, #43	; 0x2b
 800970c:	bf04      	itt	eq
 800970e:	782c      	ldrbeq	r4, [r5, #0]
 8009710:	1cb5      	addeq	r5, r6, #2
 8009712:	e7ca      	b.n	80096aa <_strtol_l.constprop.0+0x3a>
 8009714:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009718:	f1be 0f19 	cmp.w	lr, #25
 800971c:	d801      	bhi.n	8009722 <_strtol_l.constprop.0+0xb2>
 800971e:	3c37      	subs	r4, #55	; 0x37
 8009720:	e7e2      	b.n	80096e8 <_strtol_l.constprop.0+0x78>
 8009722:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009726:	f1be 0f19 	cmp.w	lr, #25
 800972a:	d804      	bhi.n	8009736 <_strtol_l.constprop.0+0xc6>
 800972c:	3c57      	subs	r4, #87	; 0x57
 800972e:	e7db      	b.n	80096e8 <_strtol_l.constprop.0+0x78>
 8009730:	f04f 3cff 	mov.w	ip, #4294967295
 8009734:	e7e6      	b.n	8009704 <_strtol_l.constprop.0+0x94>
 8009736:	f1bc 0f00 	cmp.w	ip, #0
 800973a:	da05      	bge.n	8009748 <_strtol_l.constprop.0+0xd8>
 800973c:	2322      	movs	r3, #34	; 0x22
 800973e:	6003      	str	r3, [r0, #0]
 8009740:	4646      	mov	r6, r8
 8009742:	b942      	cbnz	r2, 8009756 <_strtol_l.constprop.0+0xe6>
 8009744:	4630      	mov	r0, r6
 8009746:	e79e      	b.n	8009686 <_strtol_l.constprop.0+0x16>
 8009748:	b107      	cbz	r7, 800974c <_strtol_l.constprop.0+0xdc>
 800974a:	4276      	negs	r6, r6
 800974c:	2a00      	cmp	r2, #0
 800974e:	d0f9      	beq.n	8009744 <_strtol_l.constprop.0+0xd4>
 8009750:	f1bc 0f00 	cmp.w	ip, #0
 8009754:	d000      	beq.n	8009758 <_strtol_l.constprop.0+0xe8>
 8009756:	1e69      	subs	r1, r5, #1
 8009758:	6011      	str	r1, [r2, #0]
 800975a:	e7f3      	b.n	8009744 <_strtol_l.constprop.0+0xd4>
 800975c:	2430      	movs	r4, #48	; 0x30
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1b1      	bne.n	80096c6 <_strtol_l.constprop.0+0x56>
 8009762:	2308      	movs	r3, #8
 8009764:	e7af      	b.n	80096c6 <_strtol_l.constprop.0+0x56>
 8009766:	2c30      	cmp	r4, #48	; 0x30
 8009768:	d0a5      	beq.n	80096b6 <_strtol_l.constprop.0+0x46>
 800976a:	230a      	movs	r3, #10
 800976c:	e7ab      	b.n	80096c6 <_strtol_l.constprop.0+0x56>
 800976e:	bf00      	nop
 8009770:	0800cb89 	.word	0x0800cb89

08009774 <_strtol_r>:
 8009774:	f7ff bf7c 	b.w	8009670 <_strtol_l.constprop.0>

08009778 <__swbuf_r>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	460e      	mov	r6, r1
 800977c:	4614      	mov	r4, r2
 800977e:	4605      	mov	r5, r0
 8009780:	b118      	cbz	r0, 800978a <__swbuf_r+0x12>
 8009782:	6983      	ldr	r3, [r0, #24]
 8009784:	b90b      	cbnz	r3, 800978a <__swbuf_r+0x12>
 8009786:	f001 f84b 	bl	800a820 <__sinit>
 800978a:	4b21      	ldr	r3, [pc, #132]	; (8009810 <__swbuf_r+0x98>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d12b      	bne.n	80097e8 <__swbuf_r+0x70>
 8009790:	686c      	ldr	r4, [r5, #4]
 8009792:	69a3      	ldr	r3, [r4, #24]
 8009794:	60a3      	str	r3, [r4, #8]
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	071a      	lsls	r2, r3, #28
 800979a:	d52f      	bpl.n	80097fc <__swbuf_r+0x84>
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	b36b      	cbz	r3, 80097fc <__swbuf_r+0x84>
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	6820      	ldr	r0, [r4, #0]
 80097a4:	1ac0      	subs	r0, r0, r3
 80097a6:	6963      	ldr	r3, [r4, #20]
 80097a8:	b2f6      	uxtb	r6, r6
 80097aa:	4283      	cmp	r3, r0
 80097ac:	4637      	mov	r7, r6
 80097ae:	dc04      	bgt.n	80097ba <__swbuf_r+0x42>
 80097b0:	4621      	mov	r1, r4
 80097b2:	4628      	mov	r0, r5
 80097b4:	f000 ffa0 	bl	800a6f8 <_fflush_r>
 80097b8:	bb30      	cbnz	r0, 8009808 <__swbuf_r+0x90>
 80097ba:	68a3      	ldr	r3, [r4, #8]
 80097bc:	3b01      	subs	r3, #1
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	6022      	str	r2, [r4, #0]
 80097c6:	701e      	strb	r6, [r3, #0]
 80097c8:	6963      	ldr	r3, [r4, #20]
 80097ca:	3001      	adds	r0, #1
 80097cc:	4283      	cmp	r3, r0
 80097ce:	d004      	beq.n	80097da <__swbuf_r+0x62>
 80097d0:	89a3      	ldrh	r3, [r4, #12]
 80097d2:	07db      	lsls	r3, r3, #31
 80097d4:	d506      	bpl.n	80097e4 <__swbuf_r+0x6c>
 80097d6:	2e0a      	cmp	r6, #10
 80097d8:	d104      	bne.n	80097e4 <__swbuf_r+0x6c>
 80097da:	4621      	mov	r1, r4
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 ff8b 	bl	800a6f8 <_fflush_r>
 80097e2:	b988      	cbnz	r0, 8009808 <__swbuf_r+0x90>
 80097e4:	4638      	mov	r0, r7
 80097e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097e8:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <__swbuf_r+0x9c>)
 80097ea:	429c      	cmp	r4, r3
 80097ec:	d101      	bne.n	80097f2 <__swbuf_r+0x7a>
 80097ee:	68ac      	ldr	r4, [r5, #8]
 80097f0:	e7cf      	b.n	8009792 <__swbuf_r+0x1a>
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <__swbuf_r+0xa0>)
 80097f4:	429c      	cmp	r4, r3
 80097f6:	bf08      	it	eq
 80097f8:	68ec      	ldreq	r4, [r5, #12]
 80097fa:	e7ca      	b.n	8009792 <__swbuf_r+0x1a>
 80097fc:	4621      	mov	r1, r4
 80097fe:	4628      	mov	r0, r5
 8009800:	f000 f80c 	bl	800981c <__swsetup_r>
 8009804:	2800      	cmp	r0, #0
 8009806:	d0cb      	beq.n	80097a0 <__swbuf_r+0x28>
 8009808:	f04f 37ff 	mov.w	r7, #4294967295
 800980c:	e7ea      	b.n	80097e4 <__swbuf_r+0x6c>
 800980e:	bf00      	nop
 8009810:	0800cd3c 	.word	0x0800cd3c
 8009814:	0800cd5c 	.word	0x0800cd5c
 8009818:	0800cd1c 	.word	0x0800cd1c

0800981c <__swsetup_r>:
 800981c:	4b32      	ldr	r3, [pc, #200]	; (80098e8 <__swsetup_r+0xcc>)
 800981e:	b570      	push	{r4, r5, r6, lr}
 8009820:	681d      	ldr	r5, [r3, #0]
 8009822:	4606      	mov	r6, r0
 8009824:	460c      	mov	r4, r1
 8009826:	b125      	cbz	r5, 8009832 <__swsetup_r+0x16>
 8009828:	69ab      	ldr	r3, [r5, #24]
 800982a:	b913      	cbnz	r3, 8009832 <__swsetup_r+0x16>
 800982c:	4628      	mov	r0, r5
 800982e:	f000 fff7 	bl	800a820 <__sinit>
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <__swsetup_r+0xd0>)
 8009834:	429c      	cmp	r4, r3
 8009836:	d10f      	bne.n	8009858 <__swsetup_r+0x3c>
 8009838:	686c      	ldr	r4, [r5, #4]
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009840:	0719      	lsls	r1, r3, #28
 8009842:	d42c      	bmi.n	800989e <__swsetup_r+0x82>
 8009844:	06dd      	lsls	r5, r3, #27
 8009846:	d411      	bmi.n	800986c <__swsetup_r+0x50>
 8009848:	2309      	movs	r3, #9
 800984a:	6033      	str	r3, [r6, #0]
 800984c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	f04f 30ff 	mov.w	r0, #4294967295
 8009856:	e03e      	b.n	80098d6 <__swsetup_r+0xba>
 8009858:	4b25      	ldr	r3, [pc, #148]	; (80098f0 <__swsetup_r+0xd4>)
 800985a:	429c      	cmp	r4, r3
 800985c:	d101      	bne.n	8009862 <__swsetup_r+0x46>
 800985e:	68ac      	ldr	r4, [r5, #8]
 8009860:	e7eb      	b.n	800983a <__swsetup_r+0x1e>
 8009862:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <__swsetup_r+0xd8>)
 8009864:	429c      	cmp	r4, r3
 8009866:	bf08      	it	eq
 8009868:	68ec      	ldreq	r4, [r5, #12]
 800986a:	e7e6      	b.n	800983a <__swsetup_r+0x1e>
 800986c:	0758      	lsls	r0, r3, #29
 800986e:	d512      	bpl.n	8009896 <__swsetup_r+0x7a>
 8009870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009872:	b141      	cbz	r1, 8009886 <__swsetup_r+0x6a>
 8009874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009878:	4299      	cmp	r1, r3
 800987a:	d002      	beq.n	8009882 <__swsetup_r+0x66>
 800987c:	4630      	mov	r0, r6
 800987e:	f002 f947 	bl	800bb10 <_free_r>
 8009882:	2300      	movs	r3, #0
 8009884:	6363      	str	r3, [r4, #52]	; 0x34
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	2300      	movs	r3, #0
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0308 	orr.w	r3, r3, #8
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	b94b      	cbnz	r3, 80098b6 <__swsetup_r+0x9a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ac:	d003      	beq.n	80098b6 <__swsetup_r+0x9a>
 80098ae:	4621      	mov	r1, r4
 80098b0:	4630      	mov	r0, r6
 80098b2:	f001 fbed 	bl	800b090 <__smakebuf_r>
 80098b6:	89a0      	ldrh	r0, [r4, #12]
 80098b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098bc:	f010 0301 	ands.w	r3, r0, #1
 80098c0:	d00a      	beq.n	80098d8 <__swsetup_r+0xbc>
 80098c2:	2300      	movs	r3, #0
 80098c4:	60a3      	str	r3, [r4, #8]
 80098c6:	6963      	ldr	r3, [r4, #20]
 80098c8:	425b      	negs	r3, r3
 80098ca:	61a3      	str	r3, [r4, #24]
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	b943      	cbnz	r3, 80098e2 <__swsetup_r+0xc6>
 80098d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098d4:	d1ba      	bne.n	800984c <__swsetup_r+0x30>
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	0781      	lsls	r1, r0, #30
 80098da:	bf58      	it	pl
 80098dc:	6963      	ldrpl	r3, [r4, #20]
 80098de:	60a3      	str	r3, [r4, #8]
 80098e0:	e7f4      	b.n	80098cc <__swsetup_r+0xb0>
 80098e2:	2000      	movs	r0, #0
 80098e4:	e7f7      	b.n	80098d6 <__swsetup_r+0xba>
 80098e6:	bf00      	nop
 80098e8:	20000024 	.word	0x20000024
 80098ec:	0800cd3c 	.word	0x0800cd3c
 80098f0:	0800cd5c 	.word	0x0800cd5c
 80098f4:	0800cd1c 	.word	0x0800cd1c

080098f8 <quorem>:
 80098f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	6903      	ldr	r3, [r0, #16]
 80098fe:	690c      	ldr	r4, [r1, #16]
 8009900:	42a3      	cmp	r3, r4
 8009902:	4607      	mov	r7, r0
 8009904:	f2c0 8081 	blt.w	8009a0a <quorem+0x112>
 8009908:	3c01      	subs	r4, #1
 800990a:	f101 0814 	add.w	r8, r1, #20
 800990e:	f100 0514 	add.w	r5, r0, #20
 8009912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800991c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009920:	3301      	adds	r3, #1
 8009922:	429a      	cmp	r2, r3
 8009924:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009928:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800992c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009930:	d331      	bcc.n	8009996 <quorem+0x9e>
 8009932:	f04f 0e00 	mov.w	lr, #0
 8009936:	4640      	mov	r0, r8
 8009938:	46ac      	mov	ip, r5
 800993a:	46f2      	mov	sl, lr
 800993c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009940:	b293      	uxth	r3, r2
 8009942:	fb06 e303 	mla	r3, r6, r3, lr
 8009946:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800994a:	b29b      	uxth	r3, r3
 800994c:	ebaa 0303 	sub.w	r3, sl, r3
 8009950:	f8dc a000 	ldr.w	sl, [ip]
 8009954:	0c12      	lsrs	r2, r2, #16
 8009956:	fa13 f38a 	uxtah	r3, r3, sl
 800995a:	fb06 e202 	mla	r2, r6, r2, lr
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009966:	b292      	uxth	r2, r2
 8009968:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800996c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009970:	f8bd 3000 	ldrh.w	r3, [sp]
 8009974:	4581      	cmp	r9, r0
 8009976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800997a:	f84c 3b04 	str.w	r3, [ip], #4
 800997e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009982:	d2db      	bcs.n	800993c <quorem+0x44>
 8009984:	f855 300b 	ldr.w	r3, [r5, fp]
 8009988:	b92b      	cbnz	r3, 8009996 <quorem+0x9e>
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	3b04      	subs	r3, #4
 800998e:	429d      	cmp	r5, r3
 8009990:	461a      	mov	r2, r3
 8009992:	d32e      	bcc.n	80099f2 <quorem+0xfa>
 8009994:	613c      	str	r4, [r7, #16]
 8009996:	4638      	mov	r0, r7
 8009998:	f001 feae 	bl	800b6f8 <__mcmp>
 800999c:	2800      	cmp	r0, #0
 800999e:	db24      	blt.n	80099ea <quorem+0xf2>
 80099a0:	3601      	adds	r6, #1
 80099a2:	4628      	mov	r0, r5
 80099a4:	f04f 0c00 	mov.w	ip, #0
 80099a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80099ac:	f8d0 e000 	ldr.w	lr, [r0]
 80099b0:	b293      	uxth	r3, r2
 80099b2:	ebac 0303 	sub.w	r3, ip, r3
 80099b6:	0c12      	lsrs	r2, r2, #16
 80099b8:	fa13 f38e 	uxtah	r3, r3, lr
 80099bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ca:	45c1      	cmp	r9, r8
 80099cc:	f840 3b04 	str.w	r3, [r0], #4
 80099d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099d4:	d2e8      	bcs.n	80099a8 <quorem+0xb0>
 80099d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099de:	b922      	cbnz	r2, 80099ea <quorem+0xf2>
 80099e0:	3b04      	subs	r3, #4
 80099e2:	429d      	cmp	r5, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	d30a      	bcc.n	80099fe <quorem+0x106>
 80099e8:	613c      	str	r4, [r7, #16]
 80099ea:	4630      	mov	r0, r6
 80099ec:	b003      	add	sp, #12
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f2:	6812      	ldr	r2, [r2, #0]
 80099f4:	3b04      	subs	r3, #4
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	d1cc      	bne.n	8009994 <quorem+0x9c>
 80099fa:	3c01      	subs	r4, #1
 80099fc:	e7c7      	b.n	800998e <quorem+0x96>
 80099fe:	6812      	ldr	r2, [r2, #0]
 8009a00:	3b04      	subs	r3, #4
 8009a02:	2a00      	cmp	r2, #0
 8009a04:	d1f0      	bne.n	80099e8 <quorem+0xf0>
 8009a06:	3c01      	subs	r4, #1
 8009a08:	e7eb      	b.n	80099e2 <quorem+0xea>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e7ee      	b.n	80099ec <quorem+0xf4>
	...

08009a10 <_dtoa_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	ed2d 8b04 	vpush	{d8-d9}
 8009a18:	ec57 6b10 	vmov	r6, r7, d0
 8009a1c:	b093      	sub	sp, #76	; 0x4c
 8009a1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a24:	9106      	str	r1, [sp, #24]
 8009a26:	ee10 aa10 	vmov	sl, s0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a30:	46bb      	mov	fp, r7
 8009a32:	b975      	cbnz	r5, 8009a52 <_dtoa_r+0x42>
 8009a34:	2010      	movs	r0, #16
 8009a36:	f001 fb6b 	bl	800b110 <malloc>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a3e:	b920      	cbnz	r0, 8009a4a <_dtoa_r+0x3a>
 8009a40:	4ba7      	ldr	r3, [pc, #668]	; (8009ce0 <_dtoa_r+0x2d0>)
 8009a42:	21ea      	movs	r1, #234	; 0xea
 8009a44:	48a7      	ldr	r0, [pc, #668]	; (8009ce4 <_dtoa_r+0x2d4>)
 8009a46:	f002 fb2d 	bl	800c0a4 <__assert_func>
 8009a4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a4e:	6005      	str	r5, [r0, #0]
 8009a50:	60c5      	str	r5, [r0, #12]
 8009a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a54:	6819      	ldr	r1, [r3, #0]
 8009a56:	b151      	cbz	r1, 8009a6e <_dtoa_r+0x5e>
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	604a      	str	r2, [r1, #4]
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	4093      	lsls	r3, r2
 8009a60:	608b      	str	r3, [r1, #8]
 8009a62:	4620      	mov	r0, r4
 8009a64:	f001 fbbc 	bl	800b1e0 <_Bfree>
 8009a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	1e3b      	subs	r3, r7, #0
 8009a70:	bfaa      	itet	ge
 8009a72:	2300      	movge	r3, #0
 8009a74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a78:	f8c8 3000 	strge.w	r3, [r8]
 8009a7c:	4b9a      	ldr	r3, [pc, #616]	; (8009ce8 <_dtoa_r+0x2d8>)
 8009a7e:	bfbc      	itt	lt
 8009a80:	2201      	movlt	r2, #1
 8009a82:	f8c8 2000 	strlt.w	r2, [r8]
 8009a86:	ea33 030b 	bics.w	r3, r3, fp
 8009a8a:	d11b      	bne.n	8009ac4 <_dtoa_r+0xb4>
 8009a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a98:	4333      	orrs	r3, r6
 8009a9a:	f000 8592 	beq.w	800a5c2 <_dtoa_r+0xbb2>
 8009a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa0:	b963      	cbnz	r3, 8009abc <_dtoa_r+0xac>
 8009aa2:	4b92      	ldr	r3, [pc, #584]	; (8009cec <_dtoa_r+0x2dc>)
 8009aa4:	e022      	b.n	8009aec <_dtoa_r+0xdc>
 8009aa6:	4b92      	ldr	r3, [pc, #584]	; (8009cf0 <_dtoa_r+0x2e0>)
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	9801      	ldr	r0, [sp, #4]
 8009ab2:	b013      	add	sp, #76	; 0x4c
 8009ab4:	ecbd 8b04 	vpop	{d8-d9}
 8009ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abc:	4b8b      	ldr	r3, [pc, #556]	; (8009cec <_dtoa_r+0x2dc>)
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	3303      	adds	r3, #3
 8009ac2:	e7f3      	b.n	8009aac <_dtoa_r+0x9c>
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	4650      	mov	r0, sl
 8009aca:	4659      	mov	r1, fp
 8009acc:	f7f7 f81c 	bl	8000b08 <__aeabi_dcmpeq>
 8009ad0:	ec4b ab19 	vmov	d9, sl, fp
 8009ad4:	4680      	mov	r8, r0
 8009ad6:	b158      	cbz	r0, 8009af0 <_dtoa_r+0xe0>
 8009ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ada:	2301      	movs	r3, #1
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 856b 	beq.w	800a5bc <_dtoa_r+0xbac>
 8009ae6:	4883      	ldr	r0, [pc, #524]	; (8009cf4 <_dtoa_r+0x2e4>)
 8009ae8:	6018      	str	r0, [r3, #0]
 8009aea:	1e43      	subs	r3, r0, #1
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	e7df      	b.n	8009ab0 <_dtoa_r+0xa0>
 8009af0:	ec4b ab10 	vmov	d0, sl, fp
 8009af4:	aa10      	add	r2, sp, #64	; 0x40
 8009af6:	a911      	add	r1, sp, #68	; 0x44
 8009af8:	4620      	mov	r0, r4
 8009afa:	f001 ff1f 	bl	800b93c <__d2b>
 8009afe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b02:	ee08 0a10 	vmov	s16, r0
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	f000 8084 	beq.w	8009c14 <_dtoa_r+0x204>
 8009b0c:	ee19 3a90 	vmov	r3, s19
 8009b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b18:	4656      	mov	r6, sl
 8009b1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b26:	4b74      	ldr	r3, [pc, #464]	; (8009cf8 <_dtoa_r+0x2e8>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fbcb 	bl	80002c8 <__aeabi_dsub>
 8009b32:	a365      	add	r3, pc, #404	; (adr r3, 8009cc8 <_dtoa_r+0x2b8>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fd7e 	bl	8000638 <__aeabi_dmul>
 8009b3c:	a364      	add	r3, pc, #400	; (adr r3, 8009cd0 <_dtoa_r+0x2c0>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fbc3 	bl	80002cc <__adddf3>
 8009b46:	4606      	mov	r6, r0
 8009b48:	4628      	mov	r0, r5
 8009b4a:	460f      	mov	r7, r1
 8009b4c:	f7f6 fd0a 	bl	8000564 <__aeabi_i2d>
 8009b50:	a361      	add	r3, pc, #388	; (adr r3, 8009cd8 <_dtoa_r+0x2c8>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fd6f 	bl	8000638 <__aeabi_dmul>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	f7f6 fbb3 	bl	80002cc <__adddf3>
 8009b66:	4606      	mov	r6, r0
 8009b68:	460f      	mov	r7, r1
 8009b6a:	f7f7 f815 	bl	8000b98 <__aeabi_d2iz>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	9000      	str	r0, [sp, #0]
 8009b72:	2300      	movs	r3, #0
 8009b74:	4630      	mov	r0, r6
 8009b76:	4639      	mov	r1, r7
 8009b78:	f7f6 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 8009b7c:	b150      	cbz	r0, 8009b94 <_dtoa_r+0x184>
 8009b7e:	9800      	ldr	r0, [sp, #0]
 8009b80:	f7f6 fcf0 	bl	8000564 <__aeabi_i2d>
 8009b84:	4632      	mov	r2, r6
 8009b86:	463b      	mov	r3, r7
 8009b88:	f7f6 ffbe 	bl	8000b08 <__aeabi_dcmpeq>
 8009b8c:	b910      	cbnz	r0, 8009b94 <_dtoa_r+0x184>
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	9b00      	ldr	r3, [sp, #0]
 8009b96:	2b16      	cmp	r3, #22
 8009b98:	d85a      	bhi.n	8009c50 <_dtoa_r+0x240>
 8009b9a:	9a00      	ldr	r2, [sp, #0]
 8009b9c:	4b57      	ldr	r3, [pc, #348]	; (8009cfc <_dtoa_r+0x2ec>)
 8009b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	ec51 0b19 	vmov	r0, r1, d9
 8009baa:	f7f6 ffb7 	bl	8000b1c <__aeabi_dcmplt>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d050      	beq.n	8009c54 <_dtoa_r+0x244>
 8009bb2:	9b00      	ldr	r3, [sp, #0]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bbe:	1b5d      	subs	r5, r3, r5
 8009bc0:	1e6b      	subs	r3, r5, #1
 8009bc2:	9305      	str	r3, [sp, #20]
 8009bc4:	bf45      	ittet	mi
 8009bc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009bca:	9304      	strmi	r3, [sp, #16]
 8009bcc:	2300      	movpl	r3, #0
 8009bce:	2300      	movmi	r3, #0
 8009bd0:	bf4c      	ite	mi
 8009bd2:	9305      	strmi	r3, [sp, #20]
 8009bd4:	9304      	strpl	r3, [sp, #16]
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	db3d      	blt.n	8009c58 <_dtoa_r+0x248>
 8009bdc:	9b05      	ldr	r3, [sp, #20]
 8009bde:	9a00      	ldr	r2, [sp, #0]
 8009be0:	920a      	str	r2, [sp, #40]	; 0x28
 8009be2:	4413      	add	r3, r2
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	2300      	movs	r3, #0
 8009be8:	9307      	str	r3, [sp, #28]
 8009bea:	9b06      	ldr	r3, [sp, #24]
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	f200 8089 	bhi.w	8009d04 <_dtoa_r+0x2f4>
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	bfc4      	itt	gt
 8009bf6:	3b04      	subgt	r3, #4
 8009bf8:	9306      	strgt	r3, [sp, #24]
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	f1a3 0302 	sub.w	r3, r3, #2
 8009c00:	bfcc      	ite	gt
 8009c02:	2500      	movgt	r5, #0
 8009c04:	2501      	movle	r5, #1
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	f200 8087 	bhi.w	8009d1a <_dtoa_r+0x30a>
 8009c0c:	e8df f003 	tbb	[pc, r3]
 8009c10:	59383a2d 	.word	0x59383a2d
 8009c14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c18:	441d      	add	r5, r3
 8009c1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	bfc1      	itttt	gt
 8009c22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c32:	bfda      	itte	le
 8009c34:	f1c3 0320 	rsble	r3, r3, #32
 8009c38:	fa06 f003 	lslle.w	r0, r6, r3
 8009c3c:	4318      	orrgt	r0, r3
 8009c3e:	f7f6 fc81 	bl	8000544 <__aeabi_ui2d>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4606      	mov	r6, r0
 8009c46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c4a:	3d01      	subs	r5, #1
 8009c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c4e:	e76a      	b.n	8009b26 <_dtoa_r+0x116>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e7b2      	b.n	8009bba <_dtoa_r+0x1aa>
 8009c54:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c56:	e7b1      	b.n	8009bbc <_dtoa_r+0x1ac>
 8009c58:	9b04      	ldr	r3, [sp, #16]
 8009c5a:	9a00      	ldr	r2, [sp, #0]
 8009c5c:	1a9b      	subs	r3, r3, r2
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	4253      	negs	r3, r2
 8009c62:	9307      	str	r3, [sp, #28]
 8009c64:	2300      	movs	r3, #0
 8009c66:	930a      	str	r3, [sp, #40]	; 0x28
 8009c68:	e7bf      	b.n	8009bea <_dtoa_r+0x1da>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9308      	str	r3, [sp, #32]
 8009c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dc55      	bgt.n	8009d20 <_dtoa_r+0x310>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c7e:	e00c      	b.n	8009c9a <_dtoa_r+0x28a>
 8009c80:	2301      	movs	r3, #1
 8009c82:	e7f3      	b.n	8009c6c <_dtoa_r+0x25c>
 8009c84:	2300      	movs	r3, #0
 8009c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c88:	9308      	str	r3, [sp, #32]
 8009c8a:	9b00      	ldr	r3, [sp, #0]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	3301      	adds	r3, #1
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	9303      	str	r3, [sp, #12]
 8009c96:	bfb8      	it	lt
 8009c98:	2301      	movlt	r3, #1
 8009c9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	6042      	str	r2, [r0, #4]
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	f102 0614 	add.w	r6, r2, #20
 8009ca6:	429e      	cmp	r6, r3
 8009ca8:	6841      	ldr	r1, [r0, #4]
 8009caa:	d93d      	bls.n	8009d28 <_dtoa_r+0x318>
 8009cac:	4620      	mov	r0, r4
 8009cae:	f001 fa57 	bl	800b160 <_Balloc>
 8009cb2:	9001      	str	r0, [sp, #4]
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d13b      	bne.n	8009d30 <_dtoa_r+0x320>
 8009cb8:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <_dtoa_r+0x2f0>)
 8009cba:	4602      	mov	r2, r0
 8009cbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cc0:	e6c0      	b.n	8009a44 <_dtoa_r+0x34>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e7df      	b.n	8009c86 <_dtoa_r+0x276>
 8009cc6:	bf00      	nop
 8009cc8:	636f4361 	.word	0x636f4361
 8009ccc:	3fd287a7 	.word	0x3fd287a7
 8009cd0:	8b60c8b3 	.word	0x8b60c8b3
 8009cd4:	3fc68a28 	.word	0x3fc68a28
 8009cd8:	509f79fb 	.word	0x509f79fb
 8009cdc:	3fd34413 	.word	0x3fd34413
 8009ce0:	0800cc96 	.word	0x0800cc96
 8009ce4:	0800ccad 	.word	0x0800ccad
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	0800cc92 	.word	0x0800cc92
 8009cf0:	0800cc89 	.word	0x0800cc89
 8009cf4:	0800cb09 	.word	0x0800cb09
 8009cf8:	3ff80000 	.word	0x3ff80000
 8009cfc:	0800ce80 	.word	0x0800ce80
 8009d00:	0800cd08 	.word	0x0800cd08
 8009d04:	2501      	movs	r5, #1
 8009d06:	2300      	movs	r3, #0
 8009d08:	9306      	str	r3, [sp, #24]
 8009d0a:	9508      	str	r5, [sp, #32]
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d14:	2200      	movs	r2, #0
 8009d16:	2312      	movs	r3, #18
 8009d18:	e7b0      	b.n	8009c7c <_dtoa_r+0x26c>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	9308      	str	r3, [sp, #32]
 8009d1e:	e7f5      	b.n	8009d0c <_dtoa_r+0x2fc>
 8009d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d26:	e7b8      	b.n	8009c9a <_dtoa_r+0x28a>
 8009d28:	3101      	adds	r1, #1
 8009d2a:	6041      	str	r1, [r0, #4]
 8009d2c:	0052      	lsls	r2, r2, #1
 8009d2e:	e7b8      	b.n	8009ca2 <_dtoa_r+0x292>
 8009d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d32:	9a01      	ldr	r2, [sp, #4]
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	2b0e      	cmp	r3, #14
 8009d3a:	f200 809d 	bhi.w	8009e78 <_dtoa_r+0x468>
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	f000 809a 	beq.w	8009e78 <_dtoa_r+0x468>
 8009d44:	9b00      	ldr	r3, [sp, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	dd32      	ble.n	8009db0 <_dtoa_r+0x3a0>
 8009d4a:	4ab7      	ldr	r2, [pc, #732]	; (800a028 <_dtoa_r+0x618>)
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	05d8      	lsls	r0, r3, #23
 8009d5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d60:	d516      	bpl.n	8009d90 <_dtoa_r+0x380>
 8009d62:	4bb2      	ldr	r3, [pc, #712]	; (800a02c <_dtoa_r+0x61c>)
 8009d64:	ec51 0b19 	vmov	r0, r1, d9
 8009d68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d6c:	f7f6 fd8e 	bl	800088c <__aeabi_ddiv>
 8009d70:	f007 070f 	and.w	r7, r7, #15
 8009d74:	4682      	mov	sl, r0
 8009d76:	468b      	mov	fp, r1
 8009d78:	2503      	movs	r5, #3
 8009d7a:	4eac      	ldr	r6, [pc, #688]	; (800a02c <_dtoa_r+0x61c>)
 8009d7c:	b957      	cbnz	r7, 8009d94 <_dtoa_r+0x384>
 8009d7e:	4642      	mov	r2, r8
 8009d80:	464b      	mov	r3, r9
 8009d82:	4650      	mov	r0, sl
 8009d84:	4659      	mov	r1, fp
 8009d86:	f7f6 fd81 	bl	800088c <__aeabi_ddiv>
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	468b      	mov	fp, r1
 8009d8e:	e028      	b.n	8009de2 <_dtoa_r+0x3d2>
 8009d90:	2502      	movs	r5, #2
 8009d92:	e7f2      	b.n	8009d7a <_dtoa_r+0x36a>
 8009d94:	07f9      	lsls	r1, r7, #31
 8009d96:	d508      	bpl.n	8009daa <_dtoa_r+0x39a>
 8009d98:	4640      	mov	r0, r8
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009da0:	f7f6 fc4a 	bl	8000638 <__aeabi_dmul>
 8009da4:	3501      	adds	r5, #1
 8009da6:	4680      	mov	r8, r0
 8009da8:	4689      	mov	r9, r1
 8009daa:	107f      	asrs	r7, r7, #1
 8009dac:	3608      	adds	r6, #8
 8009dae:	e7e5      	b.n	8009d7c <_dtoa_r+0x36c>
 8009db0:	f000 809b 	beq.w	8009eea <_dtoa_r+0x4da>
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	4f9d      	ldr	r7, [pc, #628]	; (800a02c <_dtoa_r+0x61c>)
 8009db8:	425e      	negs	r6, r3
 8009dba:	4b9b      	ldr	r3, [pc, #620]	; (800a028 <_dtoa_r+0x618>)
 8009dbc:	f006 020f 	and.w	r2, r6, #15
 8009dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	ec51 0b19 	vmov	r0, r1, d9
 8009dcc:	f7f6 fc34 	bl	8000638 <__aeabi_dmul>
 8009dd0:	1136      	asrs	r6, r6, #4
 8009dd2:	4682      	mov	sl, r0
 8009dd4:	468b      	mov	fp, r1
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	2502      	movs	r5, #2
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	d17a      	bne.n	8009ed4 <_dtoa_r+0x4c4>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1d3      	bne.n	8009d8a <_dtoa_r+0x37a>
 8009de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8082 	beq.w	8009eee <_dtoa_r+0x4de>
 8009dea:	4b91      	ldr	r3, [pc, #580]	; (800a030 <_dtoa_r+0x620>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	4650      	mov	r0, sl
 8009df0:	4659      	mov	r1, fp
 8009df2:	f7f6 fe93 	bl	8000b1c <__aeabi_dcmplt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d079      	beq.n	8009eee <_dtoa_r+0x4de>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d076      	beq.n	8009eee <_dtoa_r+0x4de>
 8009e00:	9b02      	ldr	r3, [sp, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dd36      	ble.n	8009e74 <_dtoa_r+0x464>
 8009e06:	9b00      	ldr	r3, [sp, #0]
 8009e08:	4650      	mov	r0, sl
 8009e0a:	4659      	mov	r1, fp
 8009e0c:	1e5f      	subs	r7, r3, #1
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4b88      	ldr	r3, [pc, #544]	; (800a034 <_dtoa_r+0x624>)
 8009e12:	f7f6 fc11 	bl	8000638 <__aeabi_dmul>
 8009e16:	9e02      	ldr	r6, [sp, #8]
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	3501      	adds	r5, #1
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f7f6 fba0 	bl	8000564 <__aeabi_i2d>
 8009e24:	4652      	mov	r2, sl
 8009e26:	465b      	mov	r3, fp
 8009e28:	f7f6 fc06 	bl	8000638 <__aeabi_dmul>
 8009e2c:	4b82      	ldr	r3, [pc, #520]	; (800a038 <_dtoa_r+0x628>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f7f6 fa4c 	bl	80002cc <__adddf3>
 8009e34:	46d0      	mov	r8, sl
 8009e36:	46d9      	mov	r9, fp
 8009e38:	4682      	mov	sl, r0
 8009e3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e3e:	2e00      	cmp	r6, #0
 8009e40:	d158      	bne.n	8009ef4 <_dtoa_r+0x4e4>
 8009e42:	4b7e      	ldr	r3, [pc, #504]	; (800a03c <_dtoa_r+0x62c>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7f6 fa3d 	bl	80002c8 <__aeabi_dsub>
 8009e4e:	4652      	mov	r2, sl
 8009e50:	465b      	mov	r3, fp
 8009e52:	4680      	mov	r8, r0
 8009e54:	4689      	mov	r9, r1
 8009e56:	f7f6 fe7f 	bl	8000b58 <__aeabi_dcmpgt>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f040 8295 	bne.w	800a38a <_dtoa_r+0x97a>
 8009e60:	4652      	mov	r2, sl
 8009e62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 fe57 	bl	8000b1c <__aeabi_dcmplt>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f040 8289 	bne.w	800a386 <_dtoa_r+0x976>
 8009e74:	ec5b ab19 	vmov	sl, fp, d9
 8009e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f2c0 8148 	blt.w	800a110 <_dtoa_r+0x700>
 8009e80:	9a00      	ldr	r2, [sp, #0]
 8009e82:	2a0e      	cmp	r2, #14
 8009e84:	f300 8144 	bgt.w	800a110 <_dtoa_r+0x700>
 8009e88:	4b67      	ldr	r3, [pc, #412]	; (800a028 <_dtoa_r+0x618>)
 8009e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f280 80d5 	bge.w	800a044 <_dtoa_r+0x634>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f300 80d1 	bgt.w	800a044 <_dtoa_r+0x634>
 8009ea2:	f040 826f 	bne.w	800a384 <_dtoa_r+0x974>
 8009ea6:	4b65      	ldr	r3, [pc, #404]	; (800a03c <_dtoa_r+0x62c>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 fbc3 	bl	8000638 <__aeabi_dmul>
 8009eb2:	4652      	mov	r2, sl
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	f7f6 fe45 	bl	8000b44 <__aeabi_dcmpge>
 8009eba:	9e03      	ldr	r6, [sp, #12]
 8009ebc:	4637      	mov	r7, r6
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 8245 	bne.w	800a34e <_dtoa_r+0x93e>
 8009ec4:	9d01      	ldr	r5, [sp, #4]
 8009ec6:	2331      	movs	r3, #49	; 0x31
 8009ec8:	f805 3b01 	strb.w	r3, [r5], #1
 8009ecc:	9b00      	ldr	r3, [sp, #0]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	e240      	b.n	800a356 <_dtoa_r+0x946>
 8009ed4:	07f2      	lsls	r2, r6, #31
 8009ed6:	d505      	bpl.n	8009ee4 <_dtoa_r+0x4d4>
 8009ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009edc:	f7f6 fbac 	bl	8000638 <__aeabi_dmul>
 8009ee0:	3501      	adds	r5, #1
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	1076      	asrs	r6, r6, #1
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	e777      	b.n	8009dda <_dtoa_r+0x3ca>
 8009eea:	2502      	movs	r5, #2
 8009eec:	e779      	b.n	8009de2 <_dtoa_r+0x3d2>
 8009eee:	9f00      	ldr	r7, [sp, #0]
 8009ef0:	9e03      	ldr	r6, [sp, #12]
 8009ef2:	e794      	b.n	8009e1e <_dtoa_r+0x40e>
 8009ef4:	9901      	ldr	r1, [sp, #4]
 8009ef6:	4b4c      	ldr	r3, [pc, #304]	; (800a028 <_dtoa_r+0x618>)
 8009ef8:	4431      	add	r1, r6
 8009efa:	910d      	str	r1, [sp, #52]	; 0x34
 8009efc:	9908      	ldr	r1, [sp, #32]
 8009efe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f06:	2900      	cmp	r1, #0
 8009f08:	d043      	beq.n	8009f92 <_dtoa_r+0x582>
 8009f0a:	494d      	ldr	r1, [pc, #308]	; (800a040 <_dtoa_r+0x630>)
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	f7f6 fcbd 	bl	800088c <__aeabi_ddiv>
 8009f12:	4652      	mov	r2, sl
 8009f14:	465b      	mov	r3, fp
 8009f16:	f7f6 f9d7 	bl	80002c8 <__aeabi_dsub>
 8009f1a:	9d01      	ldr	r5, [sp, #4]
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	468b      	mov	fp, r1
 8009f20:	4649      	mov	r1, r9
 8009f22:	4640      	mov	r0, r8
 8009f24:	f7f6 fe38 	bl	8000b98 <__aeabi_d2iz>
 8009f28:	4606      	mov	r6, r0
 8009f2a:	f7f6 fb1b 	bl	8000564 <__aeabi_i2d>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	4640      	mov	r0, r8
 8009f34:	4649      	mov	r1, r9
 8009f36:	f7f6 f9c7 	bl	80002c8 <__aeabi_dsub>
 8009f3a:	3630      	adds	r6, #48	; 0x30
 8009f3c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f40:	4652      	mov	r2, sl
 8009f42:	465b      	mov	r3, fp
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	f7f6 fde8 	bl	8000b1c <__aeabi_dcmplt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d163      	bne.n	800a018 <_dtoa_r+0x608>
 8009f50:	4642      	mov	r2, r8
 8009f52:	464b      	mov	r3, r9
 8009f54:	4936      	ldr	r1, [pc, #216]	; (800a030 <_dtoa_r+0x620>)
 8009f56:	2000      	movs	r0, #0
 8009f58:	f7f6 f9b6 	bl	80002c8 <__aeabi_dsub>
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	465b      	mov	r3, fp
 8009f60:	f7f6 fddc 	bl	8000b1c <__aeabi_dcmplt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f040 80b5 	bne.w	800a0d4 <_dtoa_r+0x6c4>
 8009f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6c:	429d      	cmp	r5, r3
 8009f6e:	d081      	beq.n	8009e74 <_dtoa_r+0x464>
 8009f70:	4b30      	ldr	r3, [pc, #192]	; (800a034 <_dtoa_r+0x624>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	4650      	mov	r0, sl
 8009f76:	4659      	mov	r1, fp
 8009f78:	f7f6 fb5e 	bl	8000638 <__aeabi_dmul>
 8009f7c:	4b2d      	ldr	r3, [pc, #180]	; (800a034 <_dtoa_r+0x624>)
 8009f7e:	4682      	mov	sl, r0
 8009f80:	468b      	mov	fp, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	2200      	movs	r2, #0
 8009f88:	f7f6 fb56 	bl	8000638 <__aeabi_dmul>
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	4689      	mov	r9, r1
 8009f90:	e7c6      	b.n	8009f20 <_dtoa_r+0x510>
 8009f92:	4650      	mov	r0, sl
 8009f94:	4659      	mov	r1, fp
 8009f96:	f7f6 fb4f 	bl	8000638 <__aeabi_dmul>
 8009f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f9c:	9d01      	ldr	r5, [sp, #4]
 8009f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fa0:	4682      	mov	sl, r0
 8009fa2:	468b      	mov	fp, r1
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	f7f6 fdf6 	bl	8000b98 <__aeabi_d2iz>
 8009fac:	4606      	mov	r6, r0
 8009fae:	f7f6 fad9 	bl	8000564 <__aeabi_i2d>
 8009fb2:	3630      	adds	r6, #48	; 0x30
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4640      	mov	r0, r8
 8009fba:	4649      	mov	r1, r9
 8009fbc:	f7f6 f984 	bl	80002c8 <__aeabi_dsub>
 8009fc0:	f805 6b01 	strb.w	r6, [r5], #1
 8009fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc6:	429d      	cmp	r5, r3
 8009fc8:	4680      	mov	r8, r0
 8009fca:	4689      	mov	r9, r1
 8009fcc:	f04f 0200 	mov.w	r2, #0
 8009fd0:	d124      	bne.n	800a01c <_dtoa_r+0x60c>
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	; (800a040 <_dtoa_r+0x630>)
 8009fd4:	4650      	mov	r0, sl
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	f7f6 f978 	bl	80002cc <__adddf3>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 fdb8 	bl	8000b58 <__aeabi_dcmpgt>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d173      	bne.n	800a0d4 <_dtoa_r+0x6c4>
 8009fec:	4652      	mov	r2, sl
 8009fee:	465b      	mov	r3, fp
 8009ff0:	4913      	ldr	r1, [pc, #76]	; (800a040 <_dtoa_r+0x630>)
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	f7f6 f968 	bl	80002c8 <__aeabi_dsub>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4649      	mov	r1, r9
 800a000:	f7f6 fd8c 	bl	8000b1c <__aeabi_dcmplt>
 800a004:	2800      	cmp	r0, #0
 800a006:	f43f af35 	beq.w	8009e74 <_dtoa_r+0x464>
 800a00a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a00c:	1e6b      	subs	r3, r5, #1
 800a00e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a010:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a014:	2b30      	cmp	r3, #48	; 0x30
 800a016:	d0f8      	beq.n	800a00a <_dtoa_r+0x5fa>
 800a018:	9700      	str	r7, [sp, #0]
 800a01a:	e049      	b.n	800a0b0 <_dtoa_r+0x6a0>
 800a01c:	4b05      	ldr	r3, [pc, #20]	; (800a034 <_dtoa_r+0x624>)
 800a01e:	f7f6 fb0b 	bl	8000638 <__aeabi_dmul>
 800a022:	4680      	mov	r8, r0
 800a024:	4689      	mov	r9, r1
 800a026:	e7bd      	b.n	8009fa4 <_dtoa_r+0x594>
 800a028:	0800ce80 	.word	0x0800ce80
 800a02c:	0800ce58 	.word	0x0800ce58
 800a030:	3ff00000 	.word	0x3ff00000
 800a034:	40240000 	.word	0x40240000
 800a038:	401c0000 	.word	0x401c0000
 800a03c:	40140000 	.word	0x40140000
 800a040:	3fe00000 	.word	0x3fe00000
 800a044:	9d01      	ldr	r5, [sp, #4]
 800a046:	4656      	mov	r6, sl
 800a048:	465f      	mov	r7, fp
 800a04a:	4642      	mov	r2, r8
 800a04c:	464b      	mov	r3, r9
 800a04e:	4630      	mov	r0, r6
 800a050:	4639      	mov	r1, r7
 800a052:	f7f6 fc1b 	bl	800088c <__aeabi_ddiv>
 800a056:	f7f6 fd9f 	bl	8000b98 <__aeabi_d2iz>
 800a05a:	4682      	mov	sl, r0
 800a05c:	f7f6 fa82 	bl	8000564 <__aeabi_i2d>
 800a060:	4642      	mov	r2, r8
 800a062:	464b      	mov	r3, r9
 800a064:	f7f6 fae8 	bl	8000638 <__aeabi_dmul>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4630      	mov	r0, r6
 800a06e:	4639      	mov	r1, r7
 800a070:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a074:	f7f6 f928 	bl	80002c8 <__aeabi_dsub>
 800a078:	f805 6b01 	strb.w	r6, [r5], #1
 800a07c:	9e01      	ldr	r6, [sp, #4]
 800a07e:	9f03      	ldr	r7, [sp, #12]
 800a080:	1bae      	subs	r6, r5, r6
 800a082:	42b7      	cmp	r7, r6
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	d135      	bne.n	800a0f6 <_dtoa_r+0x6e6>
 800a08a:	f7f6 f91f 	bl	80002cc <__adddf3>
 800a08e:	4642      	mov	r2, r8
 800a090:	464b      	mov	r3, r9
 800a092:	4606      	mov	r6, r0
 800a094:	460f      	mov	r7, r1
 800a096:	f7f6 fd5f 	bl	8000b58 <__aeabi_dcmpgt>
 800a09a:	b9d0      	cbnz	r0, 800a0d2 <_dtoa_r+0x6c2>
 800a09c:	4642      	mov	r2, r8
 800a09e:	464b      	mov	r3, r9
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 fd30 	bl	8000b08 <__aeabi_dcmpeq>
 800a0a8:	b110      	cbz	r0, 800a0b0 <_dtoa_r+0x6a0>
 800a0aa:	f01a 0f01 	tst.w	sl, #1
 800a0ae:	d110      	bne.n	800a0d2 <_dtoa_r+0x6c2>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	ee18 1a10 	vmov	r1, s16
 800a0b6:	f001 f893 	bl	800b1e0 <_Bfree>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9800      	ldr	r0, [sp, #0]
 800a0be:	702b      	strb	r3, [r5, #0]
 800a0c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	6018      	str	r0, [r3, #0]
 800a0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f43f acf1 	beq.w	8009ab0 <_dtoa_r+0xa0>
 800a0ce:	601d      	str	r5, [r3, #0]
 800a0d0:	e4ee      	b.n	8009ab0 <_dtoa_r+0xa0>
 800a0d2:	9f00      	ldr	r7, [sp, #0]
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	461d      	mov	r5, r3
 800a0d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0dc:	2a39      	cmp	r2, #57	; 0x39
 800a0de:	d106      	bne.n	800a0ee <_dtoa_r+0x6de>
 800a0e0:	9a01      	ldr	r2, [sp, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d1f7      	bne.n	800a0d6 <_dtoa_r+0x6c6>
 800a0e6:	9901      	ldr	r1, [sp, #4]
 800a0e8:	2230      	movs	r2, #48	; 0x30
 800a0ea:	3701      	adds	r7, #1
 800a0ec:	700a      	strb	r2, [r1, #0]
 800a0ee:	781a      	ldrb	r2, [r3, #0]
 800a0f0:	3201      	adds	r2, #1
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	e790      	b.n	800a018 <_dtoa_r+0x608>
 800a0f6:	4ba6      	ldr	r3, [pc, #664]	; (800a390 <_dtoa_r+0x980>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f7f6 fa9d 	bl	8000638 <__aeabi_dmul>
 800a0fe:	2200      	movs	r2, #0
 800a100:	2300      	movs	r3, #0
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	f7f6 fcff 	bl	8000b08 <__aeabi_dcmpeq>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d09d      	beq.n	800a04a <_dtoa_r+0x63a>
 800a10e:	e7cf      	b.n	800a0b0 <_dtoa_r+0x6a0>
 800a110:	9a08      	ldr	r2, [sp, #32]
 800a112:	2a00      	cmp	r2, #0
 800a114:	f000 80d7 	beq.w	800a2c6 <_dtoa_r+0x8b6>
 800a118:	9a06      	ldr	r2, [sp, #24]
 800a11a:	2a01      	cmp	r2, #1
 800a11c:	f300 80ba 	bgt.w	800a294 <_dtoa_r+0x884>
 800a120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a122:	2a00      	cmp	r2, #0
 800a124:	f000 80b2 	beq.w	800a28c <_dtoa_r+0x87c>
 800a128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a12c:	9e07      	ldr	r6, [sp, #28]
 800a12e:	9d04      	ldr	r5, [sp, #16]
 800a130:	9a04      	ldr	r2, [sp, #16]
 800a132:	441a      	add	r2, r3
 800a134:	9204      	str	r2, [sp, #16]
 800a136:	9a05      	ldr	r2, [sp, #20]
 800a138:	2101      	movs	r1, #1
 800a13a:	441a      	add	r2, r3
 800a13c:	4620      	mov	r0, r4
 800a13e:	9205      	str	r2, [sp, #20]
 800a140:	f001 f950 	bl	800b3e4 <__i2b>
 800a144:	4607      	mov	r7, r0
 800a146:	2d00      	cmp	r5, #0
 800a148:	dd0c      	ble.n	800a164 <_dtoa_r+0x754>
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd09      	ble.n	800a164 <_dtoa_r+0x754>
 800a150:	42ab      	cmp	r3, r5
 800a152:	9a04      	ldr	r2, [sp, #16]
 800a154:	bfa8      	it	ge
 800a156:	462b      	movge	r3, r5
 800a158:	1ad2      	subs	r2, r2, r3
 800a15a:	9204      	str	r2, [sp, #16]
 800a15c:	9a05      	ldr	r2, [sp, #20]
 800a15e:	1aed      	subs	r5, r5, r3
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	9b07      	ldr	r3, [sp, #28]
 800a166:	b31b      	cbz	r3, 800a1b0 <_dtoa_r+0x7a0>
 800a168:	9b08      	ldr	r3, [sp, #32]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 80af 	beq.w	800a2ce <_dtoa_r+0x8be>
 800a170:	2e00      	cmp	r6, #0
 800a172:	dd13      	ble.n	800a19c <_dtoa_r+0x78c>
 800a174:	4639      	mov	r1, r7
 800a176:	4632      	mov	r2, r6
 800a178:	4620      	mov	r0, r4
 800a17a:	f001 f9f3 	bl	800b564 <__pow5mult>
 800a17e:	ee18 2a10 	vmov	r2, s16
 800a182:	4601      	mov	r1, r0
 800a184:	4607      	mov	r7, r0
 800a186:	4620      	mov	r0, r4
 800a188:	f001 f942 	bl	800b410 <__multiply>
 800a18c:	ee18 1a10 	vmov	r1, s16
 800a190:	4680      	mov	r8, r0
 800a192:	4620      	mov	r0, r4
 800a194:	f001 f824 	bl	800b1e0 <_Bfree>
 800a198:	ee08 8a10 	vmov	s16, r8
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	1b9a      	subs	r2, r3, r6
 800a1a0:	d006      	beq.n	800a1b0 <_dtoa_r+0x7a0>
 800a1a2:	ee18 1a10 	vmov	r1, s16
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f001 f9dc 	bl	800b564 <__pow5mult>
 800a1ac:	ee08 0a10 	vmov	s16, r0
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f001 f916 	bl	800b3e4 <__i2b>
 800a1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	4606      	mov	r6, r0
 800a1be:	f340 8088 	ble.w	800a2d2 <_dtoa_r+0x8c2>
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	4601      	mov	r1, r0
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f001 f9cc 	bl	800b564 <__pow5mult>
 800a1cc:	9b06      	ldr	r3, [sp, #24]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	f340 8081 	ble.w	800a2d8 <_dtoa_r+0x8c8>
 800a1d6:	f04f 0800 	mov.w	r8, #0
 800a1da:	6933      	ldr	r3, [r6, #16]
 800a1dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1e0:	6918      	ldr	r0, [r3, #16]
 800a1e2:	f001 f8af 	bl	800b344 <__hi0bits>
 800a1e6:	f1c0 0020 	rsb	r0, r0, #32
 800a1ea:	9b05      	ldr	r3, [sp, #20]
 800a1ec:	4418      	add	r0, r3
 800a1ee:	f010 001f 	ands.w	r0, r0, #31
 800a1f2:	f000 8092 	beq.w	800a31a <_dtoa_r+0x90a>
 800a1f6:	f1c0 0320 	rsb	r3, r0, #32
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	f340 808a 	ble.w	800a314 <_dtoa_r+0x904>
 800a200:	f1c0 001c 	rsb	r0, r0, #28
 800a204:	9b04      	ldr	r3, [sp, #16]
 800a206:	4403      	add	r3, r0
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	9b05      	ldr	r3, [sp, #20]
 800a20c:	4403      	add	r3, r0
 800a20e:	4405      	add	r5, r0
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	9b04      	ldr	r3, [sp, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	dd07      	ble.n	800a228 <_dtoa_r+0x818>
 800a218:	ee18 1a10 	vmov	r1, s16
 800a21c:	461a      	mov	r2, r3
 800a21e:	4620      	mov	r0, r4
 800a220:	f001 f9fa 	bl	800b618 <__lshift>
 800a224:	ee08 0a10 	vmov	s16, r0
 800a228:	9b05      	ldr	r3, [sp, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	dd05      	ble.n	800a23a <_dtoa_r+0x82a>
 800a22e:	4631      	mov	r1, r6
 800a230:	461a      	mov	r2, r3
 800a232:	4620      	mov	r0, r4
 800a234:	f001 f9f0 	bl	800b618 <__lshift>
 800a238:	4606      	mov	r6, r0
 800a23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d06e      	beq.n	800a31e <_dtoa_r+0x90e>
 800a240:	ee18 0a10 	vmov	r0, s16
 800a244:	4631      	mov	r1, r6
 800a246:	f001 fa57 	bl	800b6f8 <__mcmp>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	da67      	bge.n	800a31e <_dtoa_r+0x90e>
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	3b01      	subs	r3, #1
 800a252:	ee18 1a10 	vmov	r1, s16
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	220a      	movs	r2, #10
 800a25a:	2300      	movs	r3, #0
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 ffe1 	bl	800b224 <__multadd>
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	ee08 0a10 	vmov	s16, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 81b1 	beq.w	800a5d0 <_dtoa_r+0xbc0>
 800a26e:	2300      	movs	r3, #0
 800a270:	4639      	mov	r1, r7
 800a272:	220a      	movs	r2, #10
 800a274:	4620      	mov	r0, r4
 800a276:	f000 ffd5 	bl	800b224 <__multadd>
 800a27a:	9b02      	ldr	r3, [sp, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	4607      	mov	r7, r0
 800a280:	f300 808e 	bgt.w	800a3a0 <_dtoa_r+0x990>
 800a284:	9b06      	ldr	r3, [sp, #24]
 800a286:	2b02      	cmp	r3, #2
 800a288:	dc51      	bgt.n	800a32e <_dtoa_r+0x91e>
 800a28a:	e089      	b.n	800a3a0 <_dtoa_r+0x990>
 800a28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a28e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a292:	e74b      	b.n	800a12c <_dtoa_r+0x71c>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	1e5e      	subs	r6, r3, #1
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	42b3      	cmp	r3, r6
 800a29c:	bfbf      	itttt	lt
 800a29e:	9b07      	ldrlt	r3, [sp, #28]
 800a2a0:	9607      	strlt	r6, [sp, #28]
 800a2a2:	1af2      	sublt	r2, r6, r3
 800a2a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2a6:	bfb6      	itet	lt
 800a2a8:	189b      	addlt	r3, r3, r2
 800a2aa:	1b9e      	subge	r6, r3, r6
 800a2ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	bfb8      	it	lt
 800a2b2:	2600      	movlt	r6, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	bfb7      	itett	lt
 800a2b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a2bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2c0:	1a9d      	sublt	r5, r3, r2
 800a2c2:	2300      	movlt	r3, #0
 800a2c4:	e734      	b.n	800a130 <_dtoa_r+0x720>
 800a2c6:	9e07      	ldr	r6, [sp, #28]
 800a2c8:	9d04      	ldr	r5, [sp, #16]
 800a2ca:	9f08      	ldr	r7, [sp, #32]
 800a2cc:	e73b      	b.n	800a146 <_dtoa_r+0x736>
 800a2ce:	9a07      	ldr	r2, [sp, #28]
 800a2d0:	e767      	b.n	800a1a2 <_dtoa_r+0x792>
 800a2d2:	9b06      	ldr	r3, [sp, #24]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	dc18      	bgt.n	800a30a <_dtoa_r+0x8fa>
 800a2d8:	f1ba 0f00 	cmp.w	sl, #0
 800a2dc:	d115      	bne.n	800a30a <_dtoa_r+0x8fa>
 800a2de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2e2:	b993      	cbnz	r3, 800a30a <_dtoa_r+0x8fa>
 800a2e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2e8:	0d1b      	lsrs	r3, r3, #20
 800a2ea:	051b      	lsls	r3, r3, #20
 800a2ec:	b183      	cbz	r3, 800a310 <_dtoa_r+0x900>
 800a2ee:	9b04      	ldr	r3, [sp, #16]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	9b05      	ldr	r3, [sp, #20]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	f04f 0801 	mov.w	r8, #1
 800a2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a300:	2b00      	cmp	r3, #0
 800a302:	f47f af6a 	bne.w	800a1da <_dtoa_r+0x7ca>
 800a306:	2001      	movs	r0, #1
 800a308:	e76f      	b.n	800a1ea <_dtoa_r+0x7da>
 800a30a:	f04f 0800 	mov.w	r8, #0
 800a30e:	e7f6      	b.n	800a2fe <_dtoa_r+0x8ee>
 800a310:	4698      	mov	r8, r3
 800a312:	e7f4      	b.n	800a2fe <_dtoa_r+0x8ee>
 800a314:	f43f af7d 	beq.w	800a212 <_dtoa_r+0x802>
 800a318:	4618      	mov	r0, r3
 800a31a:	301c      	adds	r0, #28
 800a31c:	e772      	b.n	800a204 <_dtoa_r+0x7f4>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	dc37      	bgt.n	800a394 <_dtoa_r+0x984>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	2b02      	cmp	r3, #2
 800a328:	dd34      	ble.n	800a394 <_dtoa_r+0x984>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	9302      	str	r3, [sp, #8]
 800a32e:	9b02      	ldr	r3, [sp, #8]
 800a330:	b96b      	cbnz	r3, 800a34e <_dtoa_r+0x93e>
 800a332:	4631      	mov	r1, r6
 800a334:	2205      	movs	r2, #5
 800a336:	4620      	mov	r0, r4
 800a338:	f000 ff74 	bl	800b224 <__multadd>
 800a33c:	4601      	mov	r1, r0
 800a33e:	4606      	mov	r6, r0
 800a340:	ee18 0a10 	vmov	r0, s16
 800a344:	f001 f9d8 	bl	800b6f8 <__mcmp>
 800a348:	2800      	cmp	r0, #0
 800a34a:	f73f adbb 	bgt.w	8009ec4 <_dtoa_r+0x4b4>
 800a34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a350:	9d01      	ldr	r5, [sp, #4]
 800a352:	43db      	mvns	r3, r3
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	f04f 0800 	mov.w	r8, #0
 800a35a:	4631      	mov	r1, r6
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 ff3f 	bl	800b1e0 <_Bfree>
 800a362:	2f00      	cmp	r7, #0
 800a364:	f43f aea4 	beq.w	800a0b0 <_dtoa_r+0x6a0>
 800a368:	f1b8 0f00 	cmp.w	r8, #0
 800a36c:	d005      	beq.n	800a37a <_dtoa_r+0x96a>
 800a36e:	45b8      	cmp	r8, r7
 800a370:	d003      	beq.n	800a37a <_dtoa_r+0x96a>
 800a372:	4641      	mov	r1, r8
 800a374:	4620      	mov	r0, r4
 800a376:	f000 ff33 	bl	800b1e0 <_Bfree>
 800a37a:	4639      	mov	r1, r7
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 ff2f 	bl	800b1e0 <_Bfree>
 800a382:	e695      	b.n	800a0b0 <_dtoa_r+0x6a0>
 800a384:	2600      	movs	r6, #0
 800a386:	4637      	mov	r7, r6
 800a388:	e7e1      	b.n	800a34e <_dtoa_r+0x93e>
 800a38a:	9700      	str	r7, [sp, #0]
 800a38c:	4637      	mov	r7, r6
 800a38e:	e599      	b.n	8009ec4 <_dtoa_r+0x4b4>
 800a390:	40240000 	.word	0x40240000
 800a394:	9b08      	ldr	r3, [sp, #32]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80ca 	beq.w	800a530 <_dtoa_r+0xb20>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	9302      	str	r3, [sp, #8]
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	dd05      	ble.n	800a3b0 <_dtoa_r+0x9a0>
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f001 f935 	bl	800b618 <__lshift>
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	f1b8 0f00 	cmp.w	r8, #0
 800a3b4:	d05b      	beq.n	800a46e <_dtoa_r+0xa5e>
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fed1 	bl	800b160 <_Balloc>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b928      	cbnz	r0, 800a3ce <_dtoa_r+0x9be>
 800a3c2:	4b87      	ldr	r3, [pc, #540]	; (800a5e0 <_dtoa_r+0xbd0>)
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3ca:	f7ff bb3b 	b.w	8009a44 <_dtoa_r+0x34>
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	3202      	adds	r2, #2
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	f107 010c 	add.w	r1, r7, #12
 800a3d8:	300c      	adds	r0, #12
 800a3da:	f000 feb3 	bl	800b144 <memcpy>
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f001 f918 	bl	800b618 <__lshift>
 800a3e8:	9b01      	ldr	r3, [sp, #4]
 800a3ea:	f103 0901 	add.w	r9, r3, #1
 800a3ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	9305      	str	r3, [sp, #20]
 800a3f6:	f00a 0301 	and.w	r3, sl, #1
 800a3fa:	46b8      	mov	r8, r7
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	4607      	mov	r7, r0
 800a400:	4631      	mov	r1, r6
 800a402:	ee18 0a10 	vmov	r0, s16
 800a406:	f7ff fa77 	bl	80098f8 <quorem>
 800a40a:	4641      	mov	r1, r8
 800a40c:	9002      	str	r0, [sp, #8]
 800a40e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a412:	ee18 0a10 	vmov	r0, s16
 800a416:	f001 f96f 	bl	800b6f8 <__mcmp>
 800a41a:	463a      	mov	r2, r7
 800a41c:	9003      	str	r0, [sp, #12]
 800a41e:	4631      	mov	r1, r6
 800a420:	4620      	mov	r0, r4
 800a422:	f001 f985 	bl	800b730 <__mdiff>
 800a426:	68c2      	ldr	r2, [r0, #12]
 800a428:	f109 3bff 	add.w	fp, r9, #4294967295
 800a42c:	4605      	mov	r5, r0
 800a42e:	bb02      	cbnz	r2, 800a472 <_dtoa_r+0xa62>
 800a430:	4601      	mov	r1, r0
 800a432:	ee18 0a10 	vmov	r0, s16
 800a436:	f001 f95f 	bl	800b6f8 <__mcmp>
 800a43a:	4602      	mov	r2, r0
 800a43c:	4629      	mov	r1, r5
 800a43e:	4620      	mov	r0, r4
 800a440:	9207      	str	r2, [sp, #28]
 800a442:	f000 fecd 	bl	800b1e0 <_Bfree>
 800a446:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a44a:	ea43 0102 	orr.w	r1, r3, r2
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	430b      	orrs	r3, r1
 800a452:	464d      	mov	r5, r9
 800a454:	d10f      	bne.n	800a476 <_dtoa_r+0xa66>
 800a456:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a45a:	d02a      	beq.n	800a4b2 <_dtoa_r+0xaa2>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dd02      	ble.n	800a468 <_dtoa_r+0xa58>
 800a462:	9b02      	ldr	r3, [sp, #8]
 800a464:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a468:	f88b a000 	strb.w	sl, [fp]
 800a46c:	e775      	b.n	800a35a <_dtoa_r+0x94a>
 800a46e:	4638      	mov	r0, r7
 800a470:	e7ba      	b.n	800a3e8 <_dtoa_r+0x9d8>
 800a472:	2201      	movs	r2, #1
 800a474:	e7e2      	b.n	800a43c <_dtoa_r+0xa2c>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	db04      	blt.n	800a486 <_dtoa_r+0xa76>
 800a47c:	9906      	ldr	r1, [sp, #24]
 800a47e:	430b      	orrs	r3, r1
 800a480:	9904      	ldr	r1, [sp, #16]
 800a482:	430b      	orrs	r3, r1
 800a484:	d122      	bne.n	800a4cc <_dtoa_r+0xabc>
 800a486:	2a00      	cmp	r2, #0
 800a488:	ddee      	ble.n	800a468 <_dtoa_r+0xa58>
 800a48a:	ee18 1a10 	vmov	r1, s16
 800a48e:	2201      	movs	r2, #1
 800a490:	4620      	mov	r0, r4
 800a492:	f001 f8c1 	bl	800b618 <__lshift>
 800a496:	4631      	mov	r1, r6
 800a498:	ee08 0a10 	vmov	s16, r0
 800a49c:	f001 f92c 	bl	800b6f8 <__mcmp>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	dc03      	bgt.n	800a4ac <_dtoa_r+0xa9c>
 800a4a4:	d1e0      	bne.n	800a468 <_dtoa_r+0xa58>
 800a4a6:	f01a 0f01 	tst.w	sl, #1
 800a4aa:	d0dd      	beq.n	800a468 <_dtoa_r+0xa58>
 800a4ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4b0:	d1d7      	bne.n	800a462 <_dtoa_r+0xa52>
 800a4b2:	2339      	movs	r3, #57	; 0x39
 800a4b4:	f88b 3000 	strb.w	r3, [fp]
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	461d      	mov	r5, r3
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4c2:	2a39      	cmp	r2, #57	; 0x39
 800a4c4:	d071      	beq.n	800a5aa <_dtoa_r+0xb9a>
 800a4c6:	3201      	adds	r2, #1
 800a4c8:	701a      	strb	r2, [r3, #0]
 800a4ca:	e746      	b.n	800a35a <_dtoa_r+0x94a>
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	dd07      	ble.n	800a4e0 <_dtoa_r+0xad0>
 800a4d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4d4:	d0ed      	beq.n	800a4b2 <_dtoa_r+0xaa2>
 800a4d6:	f10a 0301 	add.w	r3, sl, #1
 800a4da:	f88b 3000 	strb.w	r3, [fp]
 800a4de:	e73c      	b.n	800a35a <_dtoa_r+0x94a>
 800a4e0:	9b05      	ldr	r3, [sp, #20]
 800a4e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4e6:	4599      	cmp	r9, r3
 800a4e8:	d047      	beq.n	800a57a <_dtoa_r+0xb6a>
 800a4ea:	ee18 1a10 	vmov	r1, s16
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 fe96 	bl	800b224 <__multadd>
 800a4f8:	45b8      	cmp	r8, r7
 800a4fa:	ee08 0a10 	vmov	s16, r0
 800a4fe:	f04f 0300 	mov.w	r3, #0
 800a502:	f04f 020a 	mov.w	r2, #10
 800a506:	4641      	mov	r1, r8
 800a508:	4620      	mov	r0, r4
 800a50a:	d106      	bne.n	800a51a <_dtoa_r+0xb0a>
 800a50c:	f000 fe8a 	bl	800b224 <__multadd>
 800a510:	4680      	mov	r8, r0
 800a512:	4607      	mov	r7, r0
 800a514:	f109 0901 	add.w	r9, r9, #1
 800a518:	e772      	b.n	800a400 <_dtoa_r+0x9f0>
 800a51a:	f000 fe83 	bl	800b224 <__multadd>
 800a51e:	4639      	mov	r1, r7
 800a520:	4680      	mov	r8, r0
 800a522:	2300      	movs	r3, #0
 800a524:	220a      	movs	r2, #10
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fe7c 	bl	800b224 <__multadd>
 800a52c:	4607      	mov	r7, r0
 800a52e:	e7f1      	b.n	800a514 <_dtoa_r+0xb04>
 800a530:	9b03      	ldr	r3, [sp, #12]
 800a532:	9302      	str	r3, [sp, #8]
 800a534:	9d01      	ldr	r5, [sp, #4]
 800a536:	ee18 0a10 	vmov	r0, s16
 800a53a:	4631      	mov	r1, r6
 800a53c:	f7ff f9dc 	bl	80098f8 <quorem>
 800a540:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a544:	9b01      	ldr	r3, [sp, #4]
 800a546:	f805 ab01 	strb.w	sl, [r5], #1
 800a54a:	1aea      	subs	r2, r5, r3
 800a54c:	9b02      	ldr	r3, [sp, #8]
 800a54e:	4293      	cmp	r3, r2
 800a550:	dd09      	ble.n	800a566 <_dtoa_r+0xb56>
 800a552:	ee18 1a10 	vmov	r1, s16
 800a556:	2300      	movs	r3, #0
 800a558:	220a      	movs	r2, #10
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 fe62 	bl	800b224 <__multadd>
 800a560:	ee08 0a10 	vmov	s16, r0
 800a564:	e7e7      	b.n	800a536 <_dtoa_r+0xb26>
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfc8      	it	gt
 800a56c:	461d      	movgt	r5, r3
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	bfd8      	it	le
 800a572:	2501      	movle	r5, #1
 800a574:	441d      	add	r5, r3
 800a576:	f04f 0800 	mov.w	r8, #0
 800a57a:	ee18 1a10 	vmov	r1, s16
 800a57e:	2201      	movs	r2, #1
 800a580:	4620      	mov	r0, r4
 800a582:	f001 f849 	bl	800b618 <__lshift>
 800a586:	4631      	mov	r1, r6
 800a588:	ee08 0a10 	vmov	s16, r0
 800a58c:	f001 f8b4 	bl	800b6f8 <__mcmp>
 800a590:	2800      	cmp	r0, #0
 800a592:	dc91      	bgt.n	800a4b8 <_dtoa_r+0xaa8>
 800a594:	d102      	bne.n	800a59c <_dtoa_r+0xb8c>
 800a596:	f01a 0f01 	tst.w	sl, #1
 800a59a:	d18d      	bne.n	800a4b8 <_dtoa_r+0xaa8>
 800a59c:	462b      	mov	r3, r5
 800a59e:	461d      	mov	r5, r3
 800a5a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5a4:	2a30      	cmp	r2, #48	; 0x30
 800a5a6:	d0fa      	beq.n	800a59e <_dtoa_r+0xb8e>
 800a5a8:	e6d7      	b.n	800a35a <_dtoa_r+0x94a>
 800a5aa:	9a01      	ldr	r2, [sp, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d184      	bne.n	800a4ba <_dtoa_r+0xaaa>
 800a5b0:	9b00      	ldr	r3, [sp, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	2331      	movs	r3, #49	; 0x31
 800a5b8:	7013      	strb	r3, [r2, #0]
 800a5ba:	e6ce      	b.n	800a35a <_dtoa_r+0x94a>
 800a5bc:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <_dtoa_r+0xbd4>)
 800a5be:	f7ff ba95 	b.w	8009aec <_dtoa_r+0xdc>
 800a5c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f47f aa6e 	bne.w	8009aa6 <_dtoa_r+0x96>
 800a5ca:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <_dtoa_r+0xbd8>)
 800a5cc:	f7ff ba8e 	b.w	8009aec <_dtoa_r+0xdc>
 800a5d0:	9b02      	ldr	r3, [sp, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dcae      	bgt.n	800a534 <_dtoa_r+0xb24>
 800a5d6:	9b06      	ldr	r3, [sp, #24]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	f73f aea8 	bgt.w	800a32e <_dtoa_r+0x91e>
 800a5de:	e7a9      	b.n	800a534 <_dtoa_r+0xb24>
 800a5e0:	0800cd08 	.word	0x0800cd08
 800a5e4:	0800cb08 	.word	0x0800cb08
 800a5e8:	0800cc89 	.word	0x0800cc89

0800a5ec <__sflush_r>:
 800a5ec:	898a      	ldrh	r2, [r1, #12]
 800a5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	0710      	lsls	r0, r2, #28
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	d458      	bmi.n	800a6ac <__sflush_r+0xc0>
 800a5fa:	684b      	ldr	r3, [r1, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	dc05      	bgt.n	800a60c <__sflush_r+0x20>
 800a600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a602:	2b00      	cmp	r3, #0
 800a604:	dc02      	bgt.n	800a60c <__sflush_r+0x20>
 800a606:	2000      	movs	r0, #0
 800a608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a60e:	2e00      	cmp	r6, #0
 800a610:	d0f9      	beq.n	800a606 <__sflush_r+0x1a>
 800a612:	2300      	movs	r3, #0
 800a614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a618:	682f      	ldr	r7, [r5, #0]
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	d032      	beq.n	800a684 <__sflush_r+0x98>
 800a61e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	075a      	lsls	r2, r3, #29
 800a624:	d505      	bpl.n	800a632 <__sflush_r+0x46>
 800a626:	6863      	ldr	r3, [r4, #4]
 800a628:	1ac0      	subs	r0, r0, r3
 800a62a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a62c:	b10b      	cbz	r3, 800a632 <__sflush_r+0x46>
 800a62e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a630:	1ac0      	subs	r0, r0, r3
 800a632:	2300      	movs	r3, #0
 800a634:	4602      	mov	r2, r0
 800a636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a638:	6a21      	ldr	r1, [r4, #32]
 800a63a:	4628      	mov	r0, r5
 800a63c:	47b0      	blx	r6
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	d106      	bne.n	800a652 <__sflush_r+0x66>
 800a644:	6829      	ldr	r1, [r5, #0]
 800a646:	291d      	cmp	r1, #29
 800a648:	d82c      	bhi.n	800a6a4 <__sflush_r+0xb8>
 800a64a:	4a2a      	ldr	r2, [pc, #168]	; (800a6f4 <__sflush_r+0x108>)
 800a64c:	40ca      	lsrs	r2, r1
 800a64e:	07d6      	lsls	r6, r2, #31
 800a650:	d528      	bpl.n	800a6a4 <__sflush_r+0xb8>
 800a652:	2200      	movs	r2, #0
 800a654:	6062      	str	r2, [r4, #4]
 800a656:	04d9      	lsls	r1, r3, #19
 800a658:	6922      	ldr	r2, [r4, #16]
 800a65a:	6022      	str	r2, [r4, #0]
 800a65c:	d504      	bpl.n	800a668 <__sflush_r+0x7c>
 800a65e:	1c42      	adds	r2, r0, #1
 800a660:	d101      	bne.n	800a666 <__sflush_r+0x7a>
 800a662:	682b      	ldr	r3, [r5, #0]
 800a664:	b903      	cbnz	r3, 800a668 <__sflush_r+0x7c>
 800a666:	6560      	str	r0, [r4, #84]	; 0x54
 800a668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a66a:	602f      	str	r7, [r5, #0]
 800a66c:	2900      	cmp	r1, #0
 800a66e:	d0ca      	beq.n	800a606 <__sflush_r+0x1a>
 800a670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a674:	4299      	cmp	r1, r3
 800a676:	d002      	beq.n	800a67e <__sflush_r+0x92>
 800a678:	4628      	mov	r0, r5
 800a67a:	f001 fa49 	bl	800bb10 <_free_r>
 800a67e:	2000      	movs	r0, #0
 800a680:	6360      	str	r0, [r4, #52]	; 0x34
 800a682:	e7c1      	b.n	800a608 <__sflush_r+0x1c>
 800a684:	6a21      	ldr	r1, [r4, #32]
 800a686:	2301      	movs	r3, #1
 800a688:	4628      	mov	r0, r5
 800a68a:	47b0      	blx	r6
 800a68c:	1c41      	adds	r1, r0, #1
 800a68e:	d1c7      	bne.n	800a620 <__sflush_r+0x34>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0c4      	beq.n	800a620 <__sflush_r+0x34>
 800a696:	2b1d      	cmp	r3, #29
 800a698:	d001      	beq.n	800a69e <__sflush_r+0xb2>
 800a69a:	2b16      	cmp	r3, #22
 800a69c:	d101      	bne.n	800a6a2 <__sflush_r+0xb6>
 800a69e:	602f      	str	r7, [r5, #0]
 800a6a0:	e7b1      	b.n	800a606 <__sflush_r+0x1a>
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	e7ad      	b.n	800a608 <__sflush_r+0x1c>
 800a6ac:	690f      	ldr	r7, [r1, #16]
 800a6ae:	2f00      	cmp	r7, #0
 800a6b0:	d0a9      	beq.n	800a606 <__sflush_r+0x1a>
 800a6b2:	0793      	lsls	r3, r2, #30
 800a6b4:	680e      	ldr	r6, [r1, #0]
 800a6b6:	bf08      	it	eq
 800a6b8:	694b      	ldreq	r3, [r1, #20]
 800a6ba:	600f      	str	r7, [r1, #0]
 800a6bc:	bf18      	it	ne
 800a6be:	2300      	movne	r3, #0
 800a6c0:	eba6 0807 	sub.w	r8, r6, r7
 800a6c4:	608b      	str	r3, [r1, #8]
 800a6c6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ca:	dd9c      	ble.n	800a606 <__sflush_r+0x1a>
 800a6cc:	6a21      	ldr	r1, [r4, #32]
 800a6ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6d0:	4643      	mov	r3, r8
 800a6d2:	463a      	mov	r2, r7
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	47b0      	blx	r6
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	dc06      	bgt.n	800a6ea <__sflush_r+0xfe>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e8:	e78e      	b.n	800a608 <__sflush_r+0x1c>
 800a6ea:	4407      	add	r7, r0
 800a6ec:	eba8 0800 	sub.w	r8, r8, r0
 800a6f0:	e7e9      	b.n	800a6c6 <__sflush_r+0xda>
 800a6f2:	bf00      	nop
 800a6f4:	20400001 	.word	0x20400001

0800a6f8 <_fflush_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	690b      	ldr	r3, [r1, #16]
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	460c      	mov	r4, r1
 800a700:	b913      	cbnz	r3, 800a708 <_fflush_r+0x10>
 800a702:	2500      	movs	r5, #0
 800a704:	4628      	mov	r0, r5
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	b118      	cbz	r0, 800a712 <_fflush_r+0x1a>
 800a70a:	6983      	ldr	r3, [r0, #24]
 800a70c:	b90b      	cbnz	r3, 800a712 <_fflush_r+0x1a>
 800a70e:	f000 f887 	bl	800a820 <__sinit>
 800a712:	4b14      	ldr	r3, [pc, #80]	; (800a764 <_fflush_r+0x6c>)
 800a714:	429c      	cmp	r4, r3
 800a716:	d11b      	bne.n	800a750 <_fflush_r+0x58>
 800a718:	686c      	ldr	r4, [r5, #4]
 800a71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0ef      	beq.n	800a702 <_fflush_r+0xa>
 800a722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a724:	07d0      	lsls	r0, r2, #31
 800a726:	d404      	bmi.n	800a732 <_fflush_r+0x3a>
 800a728:	0599      	lsls	r1, r3, #22
 800a72a:	d402      	bmi.n	800a732 <_fflush_r+0x3a>
 800a72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a72e:	f000 fc88 	bl	800b042 <__retarget_lock_acquire_recursive>
 800a732:	4628      	mov	r0, r5
 800a734:	4621      	mov	r1, r4
 800a736:	f7ff ff59 	bl	800a5ec <__sflush_r>
 800a73a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a73c:	07da      	lsls	r2, r3, #31
 800a73e:	4605      	mov	r5, r0
 800a740:	d4e0      	bmi.n	800a704 <_fflush_r+0xc>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	059b      	lsls	r3, r3, #22
 800a746:	d4dd      	bmi.n	800a704 <_fflush_r+0xc>
 800a748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a74a:	f000 fc7b 	bl	800b044 <__retarget_lock_release_recursive>
 800a74e:	e7d9      	b.n	800a704 <_fflush_r+0xc>
 800a750:	4b05      	ldr	r3, [pc, #20]	; (800a768 <_fflush_r+0x70>)
 800a752:	429c      	cmp	r4, r3
 800a754:	d101      	bne.n	800a75a <_fflush_r+0x62>
 800a756:	68ac      	ldr	r4, [r5, #8]
 800a758:	e7df      	b.n	800a71a <_fflush_r+0x22>
 800a75a:	4b04      	ldr	r3, [pc, #16]	; (800a76c <_fflush_r+0x74>)
 800a75c:	429c      	cmp	r4, r3
 800a75e:	bf08      	it	eq
 800a760:	68ec      	ldreq	r4, [r5, #12]
 800a762:	e7da      	b.n	800a71a <_fflush_r+0x22>
 800a764:	0800cd3c 	.word	0x0800cd3c
 800a768:	0800cd5c 	.word	0x0800cd5c
 800a76c:	0800cd1c 	.word	0x0800cd1c

0800a770 <std>:
 800a770:	2300      	movs	r3, #0
 800a772:	b510      	push	{r4, lr}
 800a774:	4604      	mov	r4, r0
 800a776:	e9c0 3300 	strd	r3, r3, [r0]
 800a77a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a77e:	6083      	str	r3, [r0, #8]
 800a780:	8181      	strh	r1, [r0, #12]
 800a782:	6643      	str	r3, [r0, #100]	; 0x64
 800a784:	81c2      	strh	r2, [r0, #14]
 800a786:	6183      	str	r3, [r0, #24]
 800a788:	4619      	mov	r1, r3
 800a78a:	2208      	movs	r2, #8
 800a78c:	305c      	adds	r0, #92	; 0x5c
 800a78e:	f7fd fa29 	bl	8007be4 <memset>
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <std+0x38>)
 800a794:	6263      	str	r3, [r4, #36]	; 0x24
 800a796:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <std+0x3c>)
 800a798:	62a3      	str	r3, [r4, #40]	; 0x28
 800a79a:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <std+0x40>)
 800a79c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a79e:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <std+0x44>)
 800a7a0:	6224      	str	r4, [r4, #32]
 800a7a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a7a4:	bd10      	pop	{r4, pc}
 800a7a6:	bf00      	nop
 800a7a8:	0800bfb9 	.word	0x0800bfb9
 800a7ac:	0800bfdb 	.word	0x0800bfdb
 800a7b0:	0800c013 	.word	0x0800c013
 800a7b4:	0800c037 	.word	0x0800c037

0800a7b8 <_cleanup_r>:
 800a7b8:	4901      	ldr	r1, [pc, #4]	; (800a7c0 <_cleanup_r+0x8>)
 800a7ba:	f000 b8af 	b.w	800a91c <_fwalk_reent>
 800a7be:	bf00      	nop
 800a7c0:	0800a6f9 	.word	0x0800a6f9

0800a7c4 <__sfmoreglue>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	2268      	movs	r2, #104	; 0x68
 800a7c8:	1e4d      	subs	r5, r1, #1
 800a7ca:	4355      	muls	r5, r2
 800a7cc:	460e      	mov	r6, r1
 800a7ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7d2:	f001 fa09 	bl	800bbe8 <_malloc_r>
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	b140      	cbz	r0, 800a7ec <__sfmoreglue+0x28>
 800a7da:	2100      	movs	r1, #0
 800a7dc:	e9c0 1600 	strd	r1, r6, [r0]
 800a7e0:	300c      	adds	r0, #12
 800a7e2:	60a0      	str	r0, [r4, #8]
 800a7e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7e8:	f7fd f9fc 	bl	8007be4 <memset>
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__sfp_lock_acquire>:
 800a7f0:	4801      	ldr	r0, [pc, #4]	; (800a7f8 <__sfp_lock_acquire+0x8>)
 800a7f2:	f000 bc26 	b.w	800b042 <__retarget_lock_acquire_recursive>
 800a7f6:	bf00      	nop
 800a7f8:	20002659 	.word	0x20002659

0800a7fc <__sfp_lock_release>:
 800a7fc:	4801      	ldr	r0, [pc, #4]	; (800a804 <__sfp_lock_release+0x8>)
 800a7fe:	f000 bc21 	b.w	800b044 <__retarget_lock_release_recursive>
 800a802:	bf00      	nop
 800a804:	20002659 	.word	0x20002659

0800a808 <__sinit_lock_acquire>:
 800a808:	4801      	ldr	r0, [pc, #4]	; (800a810 <__sinit_lock_acquire+0x8>)
 800a80a:	f000 bc1a 	b.w	800b042 <__retarget_lock_acquire_recursive>
 800a80e:	bf00      	nop
 800a810:	2000265a 	.word	0x2000265a

0800a814 <__sinit_lock_release>:
 800a814:	4801      	ldr	r0, [pc, #4]	; (800a81c <__sinit_lock_release+0x8>)
 800a816:	f000 bc15 	b.w	800b044 <__retarget_lock_release_recursive>
 800a81a:	bf00      	nop
 800a81c:	2000265a 	.word	0x2000265a

0800a820 <__sinit>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4604      	mov	r4, r0
 800a824:	f7ff fff0 	bl	800a808 <__sinit_lock_acquire>
 800a828:	69a3      	ldr	r3, [r4, #24]
 800a82a:	b11b      	cbz	r3, 800a834 <__sinit+0x14>
 800a82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a830:	f7ff bff0 	b.w	800a814 <__sinit_lock_release>
 800a834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a838:	6523      	str	r3, [r4, #80]	; 0x50
 800a83a:	4b13      	ldr	r3, [pc, #76]	; (800a888 <__sinit+0x68>)
 800a83c:	4a13      	ldr	r2, [pc, #76]	; (800a88c <__sinit+0x6c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	62a2      	str	r2, [r4, #40]	; 0x28
 800a842:	42a3      	cmp	r3, r4
 800a844:	bf04      	itt	eq
 800a846:	2301      	moveq	r3, #1
 800a848:	61a3      	streq	r3, [r4, #24]
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 f820 	bl	800a890 <__sfp>
 800a850:	6060      	str	r0, [r4, #4]
 800a852:	4620      	mov	r0, r4
 800a854:	f000 f81c 	bl	800a890 <__sfp>
 800a858:	60a0      	str	r0, [r4, #8]
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 f818 	bl	800a890 <__sfp>
 800a860:	2200      	movs	r2, #0
 800a862:	60e0      	str	r0, [r4, #12]
 800a864:	2104      	movs	r1, #4
 800a866:	6860      	ldr	r0, [r4, #4]
 800a868:	f7ff ff82 	bl	800a770 <std>
 800a86c:	68a0      	ldr	r0, [r4, #8]
 800a86e:	2201      	movs	r2, #1
 800a870:	2109      	movs	r1, #9
 800a872:	f7ff ff7d 	bl	800a770 <std>
 800a876:	68e0      	ldr	r0, [r4, #12]
 800a878:	2202      	movs	r2, #2
 800a87a:	2112      	movs	r1, #18
 800a87c:	f7ff ff78 	bl	800a770 <std>
 800a880:	2301      	movs	r3, #1
 800a882:	61a3      	str	r3, [r4, #24]
 800a884:	e7d2      	b.n	800a82c <__sinit+0xc>
 800a886:	bf00      	nop
 800a888:	0800caf4 	.word	0x0800caf4
 800a88c:	0800a7b9 	.word	0x0800a7b9

0800a890 <__sfp>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	4607      	mov	r7, r0
 800a894:	f7ff ffac 	bl	800a7f0 <__sfp_lock_acquire>
 800a898:	4b1e      	ldr	r3, [pc, #120]	; (800a914 <__sfp+0x84>)
 800a89a:	681e      	ldr	r6, [r3, #0]
 800a89c:	69b3      	ldr	r3, [r6, #24]
 800a89e:	b913      	cbnz	r3, 800a8a6 <__sfp+0x16>
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7ff ffbd 	bl	800a820 <__sinit>
 800a8a6:	3648      	adds	r6, #72	; 0x48
 800a8a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	d503      	bpl.n	800a8b8 <__sfp+0x28>
 800a8b0:	6833      	ldr	r3, [r6, #0]
 800a8b2:	b30b      	cbz	r3, 800a8f8 <__sfp+0x68>
 800a8b4:	6836      	ldr	r6, [r6, #0]
 800a8b6:	e7f7      	b.n	800a8a8 <__sfp+0x18>
 800a8b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8bc:	b9d5      	cbnz	r5, 800a8f4 <__sfp+0x64>
 800a8be:	4b16      	ldr	r3, [pc, #88]	; (800a918 <__sfp+0x88>)
 800a8c0:	60e3      	str	r3, [r4, #12]
 800a8c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8c6:	6665      	str	r5, [r4, #100]	; 0x64
 800a8c8:	f000 fbba 	bl	800b040 <__retarget_lock_init_recursive>
 800a8cc:	f7ff ff96 	bl	800a7fc <__sfp_lock_release>
 800a8d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8d8:	6025      	str	r5, [r4, #0]
 800a8da:	61a5      	str	r5, [r4, #24]
 800a8dc:	2208      	movs	r2, #8
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8e4:	f7fd f97e 	bl	8007be4 <memset>
 800a8e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f4:	3468      	adds	r4, #104	; 0x68
 800a8f6:	e7d9      	b.n	800a8ac <__sfp+0x1c>
 800a8f8:	2104      	movs	r1, #4
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f7ff ff62 	bl	800a7c4 <__sfmoreglue>
 800a900:	4604      	mov	r4, r0
 800a902:	6030      	str	r0, [r6, #0]
 800a904:	2800      	cmp	r0, #0
 800a906:	d1d5      	bne.n	800a8b4 <__sfp+0x24>
 800a908:	f7ff ff78 	bl	800a7fc <__sfp_lock_release>
 800a90c:	230c      	movs	r3, #12
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	e7ee      	b.n	800a8f0 <__sfp+0x60>
 800a912:	bf00      	nop
 800a914:	0800caf4 	.word	0x0800caf4
 800a918:	ffff0001 	.word	0xffff0001

0800a91c <_fwalk_reent>:
 800a91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a920:	4606      	mov	r6, r0
 800a922:	4688      	mov	r8, r1
 800a924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a928:	2700      	movs	r7, #0
 800a92a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a92e:	f1b9 0901 	subs.w	r9, r9, #1
 800a932:	d505      	bpl.n	800a940 <_fwalk_reent+0x24>
 800a934:	6824      	ldr	r4, [r4, #0]
 800a936:	2c00      	cmp	r4, #0
 800a938:	d1f7      	bne.n	800a92a <_fwalk_reent+0xe>
 800a93a:	4638      	mov	r0, r7
 800a93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a940:	89ab      	ldrh	r3, [r5, #12]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d907      	bls.n	800a956 <_fwalk_reent+0x3a>
 800a946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a94a:	3301      	adds	r3, #1
 800a94c:	d003      	beq.n	800a956 <_fwalk_reent+0x3a>
 800a94e:	4629      	mov	r1, r5
 800a950:	4630      	mov	r0, r6
 800a952:	47c0      	blx	r8
 800a954:	4307      	orrs	r7, r0
 800a956:	3568      	adds	r5, #104	; 0x68
 800a958:	e7e9      	b.n	800a92e <_fwalk_reent+0x12>

0800a95a <rshift>:
 800a95a:	6903      	ldr	r3, [r0, #16]
 800a95c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a964:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a968:	f100 0414 	add.w	r4, r0, #20
 800a96c:	dd45      	ble.n	800a9fa <rshift+0xa0>
 800a96e:	f011 011f 	ands.w	r1, r1, #31
 800a972:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a976:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a97a:	d10c      	bne.n	800a996 <rshift+0x3c>
 800a97c:	f100 0710 	add.w	r7, r0, #16
 800a980:	4629      	mov	r1, r5
 800a982:	42b1      	cmp	r1, r6
 800a984:	d334      	bcc.n	800a9f0 <rshift+0x96>
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	1eea      	subs	r2, r5, #3
 800a98c:	4296      	cmp	r6, r2
 800a98e:	bf38      	it	cc
 800a990:	2300      	movcc	r3, #0
 800a992:	4423      	add	r3, r4
 800a994:	e015      	b.n	800a9c2 <rshift+0x68>
 800a996:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a99a:	f1c1 0820 	rsb	r8, r1, #32
 800a99e:	40cf      	lsrs	r7, r1
 800a9a0:	f105 0e04 	add.w	lr, r5, #4
 800a9a4:	46a1      	mov	r9, r4
 800a9a6:	4576      	cmp	r6, lr
 800a9a8:	46f4      	mov	ip, lr
 800a9aa:	d815      	bhi.n	800a9d8 <rshift+0x7e>
 800a9ac:	1a9a      	subs	r2, r3, r2
 800a9ae:	0092      	lsls	r2, r2, #2
 800a9b0:	3a04      	subs	r2, #4
 800a9b2:	3501      	adds	r5, #1
 800a9b4:	42ae      	cmp	r6, r5
 800a9b6:	bf38      	it	cc
 800a9b8:	2200      	movcc	r2, #0
 800a9ba:	18a3      	adds	r3, r4, r2
 800a9bc:	50a7      	str	r7, [r4, r2]
 800a9be:	b107      	cbz	r7, 800a9c2 <rshift+0x68>
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	1b1a      	subs	r2, r3, r4
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9ca:	bf08      	it	eq
 800a9cc:	2300      	moveq	r3, #0
 800a9ce:	6102      	str	r2, [r0, #16]
 800a9d0:	bf08      	it	eq
 800a9d2:	6143      	streq	r3, [r0, #20]
 800a9d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9d8:	f8dc c000 	ldr.w	ip, [ip]
 800a9dc:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9e0:	ea4c 0707 	orr.w	r7, ip, r7
 800a9e4:	f849 7b04 	str.w	r7, [r9], #4
 800a9e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9ec:	40cf      	lsrs	r7, r1
 800a9ee:	e7da      	b.n	800a9a6 <rshift+0x4c>
 800a9f0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9f4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9f8:	e7c3      	b.n	800a982 <rshift+0x28>
 800a9fa:	4623      	mov	r3, r4
 800a9fc:	e7e1      	b.n	800a9c2 <rshift+0x68>

0800a9fe <__hexdig_fun>:
 800a9fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa02:	2b09      	cmp	r3, #9
 800aa04:	d802      	bhi.n	800aa0c <__hexdig_fun+0xe>
 800aa06:	3820      	subs	r0, #32
 800aa08:	b2c0      	uxtb	r0, r0
 800aa0a:	4770      	bx	lr
 800aa0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa10:	2b05      	cmp	r3, #5
 800aa12:	d801      	bhi.n	800aa18 <__hexdig_fun+0x1a>
 800aa14:	3847      	subs	r0, #71	; 0x47
 800aa16:	e7f7      	b.n	800aa08 <__hexdig_fun+0xa>
 800aa18:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa1c:	2b05      	cmp	r3, #5
 800aa1e:	d801      	bhi.n	800aa24 <__hexdig_fun+0x26>
 800aa20:	3827      	subs	r0, #39	; 0x27
 800aa22:	e7f1      	b.n	800aa08 <__hexdig_fun+0xa>
 800aa24:	2000      	movs	r0, #0
 800aa26:	4770      	bx	lr

0800aa28 <__gethex>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	ed2d 8b02 	vpush	{d8}
 800aa30:	b089      	sub	sp, #36	; 0x24
 800aa32:	ee08 0a10 	vmov	s16, r0
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	4bb4      	ldr	r3, [pc, #720]	; (800ad0c <__gethex+0x2e4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	468b      	mov	fp, r1
 800aa42:	4690      	mov	r8, r2
 800aa44:	f7f5 fbe4 	bl	8000210 <strlen>
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	f8db 2000 	ldr.w	r2, [fp]
 800aa4e:	4403      	add	r3, r0
 800aa50:	4682      	mov	sl, r0
 800aa52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aa56:	9305      	str	r3, [sp, #20]
 800aa58:	1c93      	adds	r3, r2, #2
 800aa5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa62:	32fe      	adds	r2, #254	; 0xfe
 800aa64:	18d1      	adds	r1, r2, r3
 800aa66:	461f      	mov	r7, r3
 800aa68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa6c:	9100      	str	r1, [sp, #0]
 800aa6e:	2830      	cmp	r0, #48	; 0x30
 800aa70:	d0f8      	beq.n	800aa64 <__gethex+0x3c>
 800aa72:	f7ff ffc4 	bl	800a9fe <__hexdig_fun>
 800aa76:	4604      	mov	r4, r0
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d13a      	bne.n	800aaf2 <__gethex+0xca>
 800aa7c:	9901      	ldr	r1, [sp, #4]
 800aa7e:	4652      	mov	r2, sl
 800aa80:	4638      	mov	r0, r7
 800aa82:	f001 fadc 	bl	800c03e <strncmp>
 800aa86:	4605      	mov	r5, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d168      	bne.n	800ab5e <__gethex+0x136>
 800aa8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aa90:	eb07 060a 	add.w	r6, r7, sl
 800aa94:	f7ff ffb3 	bl	800a9fe <__hexdig_fun>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d062      	beq.n	800ab62 <__gethex+0x13a>
 800aa9c:	4633      	mov	r3, r6
 800aa9e:	7818      	ldrb	r0, [r3, #0]
 800aaa0:	2830      	cmp	r0, #48	; 0x30
 800aaa2:	461f      	mov	r7, r3
 800aaa4:	f103 0301 	add.w	r3, r3, #1
 800aaa8:	d0f9      	beq.n	800aa9e <__gethex+0x76>
 800aaaa:	f7ff ffa8 	bl	800a9fe <__hexdig_fun>
 800aaae:	2301      	movs	r3, #1
 800aab0:	fab0 f480 	clz	r4, r0
 800aab4:	0964      	lsrs	r4, r4, #5
 800aab6:	4635      	mov	r5, r6
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	463a      	mov	r2, r7
 800aabc:	4616      	mov	r6, r2
 800aabe:	3201      	adds	r2, #1
 800aac0:	7830      	ldrb	r0, [r6, #0]
 800aac2:	f7ff ff9c 	bl	800a9fe <__hexdig_fun>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d1f8      	bne.n	800aabc <__gethex+0x94>
 800aaca:	9901      	ldr	r1, [sp, #4]
 800aacc:	4652      	mov	r2, sl
 800aace:	4630      	mov	r0, r6
 800aad0:	f001 fab5 	bl	800c03e <strncmp>
 800aad4:	b980      	cbnz	r0, 800aaf8 <__gethex+0xd0>
 800aad6:	b94d      	cbnz	r5, 800aaec <__gethex+0xc4>
 800aad8:	eb06 050a 	add.w	r5, r6, sl
 800aadc:	462a      	mov	r2, r5
 800aade:	4616      	mov	r6, r2
 800aae0:	3201      	adds	r2, #1
 800aae2:	7830      	ldrb	r0, [r6, #0]
 800aae4:	f7ff ff8b 	bl	800a9fe <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d1f8      	bne.n	800aade <__gethex+0xb6>
 800aaec:	1bad      	subs	r5, r5, r6
 800aaee:	00ad      	lsls	r5, r5, #2
 800aaf0:	e004      	b.n	800aafc <__gethex+0xd4>
 800aaf2:	2400      	movs	r4, #0
 800aaf4:	4625      	mov	r5, r4
 800aaf6:	e7e0      	b.n	800aaba <__gethex+0x92>
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	d1f7      	bne.n	800aaec <__gethex+0xc4>
 800aafc:	7833      	ldrb	r3, [r6, #0]
 800aafe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab02:	2b50      	cmp	r3, #80	; 0x50
 800ab04:	d13b      	bne.n	800ab7e <__gethex+0x156>
 800ab06:	7873      	ldrb	r3, [r6, #1]
 800ab08:	2b2b      	cmp	r3, #43	; 0x2b
 800ab0a:	d02c      	beq.n	800ab66 <__gethex+0x13e>
 800ab0c:	2b2d      	cmp	r3, #45	; 0x2d
 800ab0e:	d02e      	beq.n	800ab6e <__gethex+0x146>
 800ab10:	1c71      	adds	r1, r6, #1
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	7808      	ldrb	r0, [r1, #0]
 800ab18:	f7ff ff71 	bl	800a9fe <__hexdig_fun>
 800ab1c:	1e43      	subs	r3, r0, #1
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b18      	cmp	r3, #24
 800ab22:	d82c      	bhi.n	800ab7e <__gethex+0x156>
 800ab24:	f1a0 0210 	sub.w	r2, r0, #16
 800ab28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab2c:	f7ff ff67 	bl	800a9fe <__hexdig_fun>
 800ab30:	1e43      	subs	r3, r0, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b18      	cmp	r3, #24
 800ab36:	d91d      	bls.n	800ab74 <__gethex+0x14c>
 800ab38:	f1b9 0f00 	cmp.w	r9, #0
 800ab3c:	d000      	beq.n	800ab40 <__gethex+0x118>
 800ab3e:	4252      	negs	r2, r2
 800ab40:	4415      	add	r5, r2
 800ab42:	f8cb 1000 	str.w	r1, [fp]
 800ab46:	b1e4      	cbz	r4, 800ab82 <__gethex+0x15a>
 800ab48:	9b00      	ldr	r3, [sp, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bf14      	ite	ne
 800ab4e:	2700      	movne	r7, #0
 800ab50:	2706      	moveq	r7, #6
 800ab52:	4638      	mov	r0, r7
 800ab54:	b009      	add	sp, #36	; 0x24
 800ab56:	ecbd 8b02 	vpop	{d8}
 800ab5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5e:	463e      	mov	r6, r7
 800ab60:	4625      	mov	r5, r4
 800ab62:	2401      	movs	r4, #1
 800ab64:	e7ca      	b.n	800aafc <__gethex+0xd4>
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	1cb1      	adds	r1, r6, #2
 800ab6c:	e7d3      	b.n	800ab16 <__gethex+0xee>
 800ab6e:	f04f 0901 	mov.w	r9, #1
 800ab72:	e7fa      	b.n	800ab6a <__gethex+0x142>
 800ab74:	230a      	movs	r3, #10
 800ab76:	fb03 0202 	mla	r2, r3, r2, r0
 800ab7a:	3a10      	subs	r2, #16
 800ab7c:	e7d4      	b.n	800ab28 <__gethex+0x100>
 800ab7e:	4631      	mov	r1, r6
 800ab80:	e7df      	b.n	800ab42 <__gethex+0x11a>
 800ab82:	1bf3      	subs	r3, r6, r7
 800ab84:	3b01      	subs	r3, #1
 800ab86:	4621      	mov	r1, r4
 800ab88:	2b07      	cmp	r3, #7
 800ab8a:	dc0b      	bgt.n	800aba4 <__gethex+0x17c>
 800ab8c:	ee18 0a10 	vmov	r0, s16
 800ab90:	f000 fae6 	bl	800b160 <_Balloc>
 800ab94:	4604      	mov	r4, r0
 800ab96:	b940      	cbnz	r0, 800abaa <__gethex+0x182>
 800ab98:	4b5d      	ldr	r3, [pc, #372]	; (800ad10 <__gethex+0x2e8>)
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	21de      	movs	r1, #222	; 0xde
 800ab9e:	485d      	ldr	r0, [pc, #372]	; (800ad14 <__gethex+0x2ec>)
 800aba0:	f001 fa80 	bl	800c0a4 <__assert_func>
 800aba4:	3101      	adds	r1, #1
 800aba6:	105b      	asrs	r3, r3, #1
 800aba8:	e7ee      	b.n	800ab88 <__gethex+0x160>
 800abaa:	f100 0914 	add.w	r9, r0, #20
 800abae:	f04f 0b00 	mov.w	fp, #0
 800abb2:	f1ca 0301 	rsb	r3, sl, #1
 800abb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800abba:	f8cd b000 	str.w	fp, [sp]
 800abbe:	9306      	str	r3, [sp, #24]
 800abc0:	42b7      	cmp	r7, r6
 800abc2:	d340      	bcc.n	800ac46 <__gethex+0x21e>
 800abc4:	9802      	ldr	r0, [sp, #8]
 800abc6:	9b00      	ldr	r3, [sp, #0]
 800abc8:	f840 3b04 	str.w	r3, [r0], #4
 800abcc:	eba0 0009 	sub.w	r0, r0, r9
 800abd0:	1080      	asrs	r0, r0, #2
 800abd2:	0146      	lsls	r6, r0, #5
 800abd4:	6120      	str	r0, [r4, #16]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fbb4 	bl	800b344 <__hi0bits>
 800abdc:	1a30      	subs	r0, r6, r0
 800abde:	f8d8 6000 	ldr.w	r6, [r8]
 800abe2:	42b0      	cmp	r0, r6
 800abe4:	dd63      	ble.n	800acae <__gethex+0x286>
 800abe6:	1b87      	subs	r7, r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	4620      	mov	r0, r4
 800abec:	f000 ff58 	bl	800baa0 <__any_on>
 800abf0:	4682      	mov	sl, r0
 800abf2:	b1a8      	cbz	r0, 800ac20 <__gethex+0x1f8>
 800abf4:	1e7b      	subs	r3, r7, #1
 800abf6:	1159      	asrs	r1, r3, #5
 800abf8:	f003 021f 	and.w	r2, r3, #31
 800abfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ac00:	f04f 0a01 	mov.w	sl, #1
 800ac04:	fa0a f202 	lsl.w	r2, sl, r2
 800ac08:	420a      	tst	r2, r1
 800ac0a:	d009      	beq.n	800ac20 <__gethex+0x1f8>
 800ac0c:	4553      	cmp	r3, sl
 800ac0e:	dd05      	ble.n	800ac1c <__gethex+0x1f4>
 800ac10:	1eb9      	subs	r1, r7, #2
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 ff44 	bl	800baa0 <__any_on>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d145      	bne.n	800aca8 <__gethex+0x280>
 800ac1c:	f04f 0a02 	mov.w	sl, #2
 800ac20:	4639      	mov	r1, r7
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7ff fe99 	bl	800a95a <rshift>
 800ac28:	443d      	add	r5, r7
 800ac2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac2e:	42ab      	cmp	r3, r5
 800ac30:	da4c      	bge.n	800accc <__gethex+0x2a4>
 800ac32:	ee18 0a10 	vmov	r0, s16
 800ac36:	4621      	mov	r1, r4
 800ac38:	f000 fad2 	bl	800b1e0 <_Bfree>
 800ac3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac3e:	2300      	movs	r3, #0
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	27a3      	movs	r7, #163	; 0xa3
 800ac44:	e785      	b.n	800ab52 <__gethex+0x12a>
 800ac46:	1e73      	subs	r3, r6, #1
 800ac48:	9a05      	ldr	r2, [sp, #20]
 800ac4a:	9303      	str	r3, [sp, #12]
 800ac4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d019      	beq.n	800ac88 <__gethex+0x260>
 800ac54:	f1bb 0f20 	cmp.w	fp, #32
 800ac58:	d107      	bne.n	800ac6a <__gethex+0x242>
 800ac5a:	9b02      	ldr	r3, [sp, #8]
 800ac5c:	9a00      	ldr	r2, [sp, #0]
 800ac5e:	f843 2b04 	str.w	r2, [r3], #4
 800ac62:	9302      	str	r3, [sp, #8]
 800ac64:	2300      	movs	r3, #0
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	469b      	mov	fp, r3
 800ac6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ac6e:	f7ff fec6 	bl	800a9fe <__hexdig_fun>
 800ac72:	9b00      	ldr	r3, [sp, #0]
 800ac74:	f000 000f 	and.w	r0, r0, #15
 800ac78:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac7c:	4303      	orrs	r3, r0
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	f10b 0b04 	add.w	fp, fp, #4
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	e00d      	b.n	800aca4 <__gethex+0x27c>
 800ac88:	9b03      	ldr	r3, [sp, #12]
 800ac8a:	9a06      	ldr	r2, [sp, #24]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	42bb      	cmp	r3, r7
 800ac90:	d3e0      	bcc.n	800ac54 <__gethex+0x22c>
 800ac92:	4618      	mov	r0, r3
 800ac94:	9901      	ldr	r1, [sp, #4]
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	4652      	mov	r2, sl
 800ac9a:	f001 f9d0 	bl	800c03e <strncmp>
 800ac9e:	9b07      	ldr	r3, [sp, #28]
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d1d7      	bne.n	800ac54 <__gethex+0x22c>
 800aca4:	461e      	mov	r6, r3
 800aca6:	e78b      	b.n	800abc0 <__gethex+0x198>
 800aca8:	f04f 0a03 	mov.w	sl, #3
 800acac:	e7b8      	b.n	800ac20 <__gethex+0x1f8>
 800acae:	da0a      	bge.n	800acc6 <__gethex+0x29e>
 800acb0:	1a37      	subs	r7, r6, r0
 800acb2:	4621      	mov	r1, r4
 800acb4:	ee18 0a10 	vmov	r0, s16
 800acb8:	463a      	mov	r2, r7
 800acba:	f000 fcad 	bl	800b618 <__lshift>
 800acbe:	1bed      	subs	r5, r5, r7
 800acc0:	4604      	mov	r4, r0
 800acc2:	f100 0914 	add.w	r9, r0, #20
 800acc6:	f04f 0a00 	mov.w	sl, #0
 800acca:	e7ae      	b.n	800ac2a <__gethex+0x202>
 800accc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800acd0:	42a8      	cmp	r0, r5
 800acd2:	dd72      	ble.n	800adba <__gethex+0x392>
 800acd4:	1b45      	subs	r5, r0, r5
 800acd6:	42ae      	cmp	r6, r5
 800acd8:	dc36      	bgt.n	800ad48 <__gethex+0x320>
 800acda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d02a      	beq.n	800ad38 <__gethex+0x310>
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d02c      	beq.n	800ad40 <__gethex+0x318>
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d11c      	bne.n	800ad24 <__gethex+0x2fc>
 800acea:	42ae      	cmp	r6, r5
 800acec:	d11a      	bne.n	800ad24 <__gethex+0x2fc>
 800acee:	2e01      	cmp	r6, #1
 800acf0:	d112      	bne.n	800ad18 <__gethex+0x2f0>
 800acf2:	9a04      	ldr	r2, [sp, #16]
 800acf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	2301      	movs	r3, #1
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	f8c9 3000 	str.w	r3, [r9]
 800ad02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad04:	2762      	movs	r7, #98	; 0x62
 800ad06:	601c      	str	r4, [r3, #0]
 800ad08:	e723      	b.n	800ab52 <__gethex+0x12a>
 800ad0a:	bf00      	nop
 800ad0c:	0800cde4 	.word	0x0800cde4
 800ad10:	0800cd08 	.word	0x0800cd08
 800ad14:	0800cd7c 	.word	0x0800cd7c
 800ad18:	1e71      	subs	r1, r6, #1
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fec0 	bl	800baa0 <__any_on>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d1e6      	bne.n	800acf2 <__gethex+0x2ca>
 800ad24:	ee18 0a10 	vmov	r0, s16
 800ad28:	4621      	mov	r1, r4
 800ad2a:	f000 fa59 	bl	800b1e0 <_Bfree>
 800ad2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad30:	2300      	movs	r3, #0
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	2750      	movs	r7, #80	; 0x50
 800ad36:	e70c      	b.n	800ab52 <__gethex+0x12a>
 800ad38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1f2      	bne.n	800ad24 <__gethex+0x2fc>
 800ad3e:	e7d8      	b.n	800acf2 <__gethex+0x2ca>
 800ad40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1d5      	bne.n	800acf2 <__gethex+0x2ca>
 800ad46:	e7ed      	b.n	800ad24 <__gethex+0x2fc>
 800ad48:	1e6f      	subs	r7, r5, #1
 800ad4a:	f1ba 0f00 	cmp.w	sl, #0
 800ad4e:	d131      	bne.n	800adb4 <__gethex+0x38c>
 800ad50:	b127      	cbz	r7, 800ad5c <__gethex+0x334>
 800ad52:	4639      	mov	r1, r7
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 fea3 	bl	800baa0 <__any_on>
 800ad5a:	4682      	mov	sl, r0
 800ad5c:	117b      	asrs	r3, r7, #5
 800ad5e:	2101      	movs	r1, #1
 800ad60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ad64:	f007 071f 	and.w	r7, r7, #31
 800ad68:	fa01 f707 	lsl.w	r7, r1, r7
 800ad6c:	421f      	tst	r7, r3
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4620      	mov	r0, r4
 800ad72:	bf18      	it	ne
 800ad74:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad78:	1b76      	subs	r6, r6, r5
 800ad7a:	f7ff fdee 	bl	800a95a <rshift>
 800ad7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad82:	2702      	movs	r7, #2
 800ad84:	f1ba 0f00 	cmp.w	sl, #0
 800ad88:	d048      	beq.n	800ae1c <__gethex+0x3f4>
 800ad8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d015      	beq.n	800adbe <__gethex+0x396>
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d017      	beq.n	800adc6 <__gethex+0x39e>
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d109      	bne.n	800adae <__gethex+0x386>
 800ad9a:	f01a 0f02 	tst.w	sl, #2
 800ad9e:	d006      	beq.n	800adae <__gethex+0x386>
 800ada0:	f8d9 0000 	ldr.w	r0, [r9]
 800ada4:	ea4a 0a00 	orr.w	sl, sl, r0
 800ada8:	f01a 0f01 	tst.w	sl, #1
 800adac:	d10e      	bne.n	800adcc <__gethex+0x3a4>
 800adae:	f047 0710 	orr.w	r7, r7, #16
 800adb2:	e033      	b.n	800ae1c <__gethex+0x3f4>
 800adb4:	f04f 0a01 	mov.w	sl, #1
 800adb8:	e7d0      	b.n	800ad5c <__gethex+0x334>
 800adba:	2701      	movs	r7, #1
 800adbc:	e7e2      	b.n	800ad84 <__gethex+0x35c>
 800adbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc0:	f1c3 0301 	rsb	r3, r3, #1
 800adc4:	9315      	str	r3, [sp, #84]	; 0x54
 800adc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d0f0      	beq.n	800adae <__gethex+0x386>
 800adcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800add0:	f104 0314 	add.w	r3, r4, #20
 800add4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800add8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800addc:	f04f 0c00 	mov.w	ip, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adea:	d01c      	beq.n	800ae26 <__gethex+0x3fe>
 800adec:	3201      	adds	r2, #1
 800adee:	6002      	str	r2, [r0, #0]
 800adf0:	2f02      	cmp	r7, #2
 800adf2:	f104 0314 	add.w	r3, r4, #20
 800adf6:	d13f      	bne.n	800ae78 <__gethex+0x450>
 800adf8:	f8d8 2000 	ldr.w	r2, [r8]
 800adfc:	3a01      	subs	r2, #1
 800adfe:	42b2      	cmp	r2, r6
 800ae00:	d10a      	bne.n	800ae18 <__gethex+0x3f0>
 800ae02:	1171      	asrs	r1, r6, #5
 800ae04:	2201      	movs	r2, #1
 800ae06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae0a:	f006 061f 	and.w	r6, r6, #31
 800ae0e:	fa02 f606 	lsl.w	r6, r2, r6
 800ae12:	421e      	tst	r6, r3
 800ae14:	bf18      	it	ne
 800ae16:	4617      	movne	r7, r2
 800ae18:	f047 0720 	orr.w	r7, r7, #32
 800ae1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae1e:	601c      	str	r4, [r3, #0]
 800ae20:	9b04      	ldr	r3, [sp, #16]
 800ae22:	601d      	str	r5, [r3, #0]
 800ae24:	e695      	b.n	800ab52 <__gethex+0x12a>
 800ae26:	4299      	cmp	r1, r3
 800ae28:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae2c:	d8d8      	bhi.n	800ade0 <__gethex+0x3b8>
 800ae2e:	68a3      	ldr	r3, [r4, #8]
 800ae30:	459b      	cmp	fp, r3
 800ae32:	db19      	blt.n	800ae68 <__gethex+0x440>
 800ae34:	6861      	ldr	r1, [r4, #4]
 800ae36:	ee18 0a10 	vmov	r0, s16
 800ae3a:	3101      	adds	r1, #1
 800ae3c:	f000 f990 	bl	800b160 <_Balloc>
 800ae40:	4681      	mov	r9, r0
 800ae42:	b918      	cbnz	r0, 800ae4c <__gethex+0x424>
 800ae44:	4b1a      	ldr	r3, [pc, #104]	; (800aeb0 <__gethex+0x488>)
 800ae46:	4602      	mov	r2, r0
 800ae48:	2184      	movs	r1, #132	; 0x84
 800ae4a:	e6a8      	b.n	800ab9e <__gethex+0x176>
 800ae4c:	6922      	ldr	r2, [r4, #16]
 800ae4e:	3202      	adds	r2, #2
 800ae50:	f104 010c 	add.w	r1, r4, #12
 800ae54:	0092      	lsls	r2, r2, #2
 800ae56:	300c      	adds	r0, #12
 800ae58:	f000 f974 	bl	800b144 <memcpy>
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	ee18 0a10 	vmov	r0, s16
 800ae62:	f000 f9bd 	bl	800b1e0 <_Bfree>
 800ae66:	464c      	mov	r4, r9
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae70:	6122      	str	r2, [r4, #16]
 800ae72:	2201      	movs	r2, #1
 800ae74:	615a      	str	r2, [r3, #20]
 800ae76:	e7bb      	b.n	800adf0 <__gethex+0x3c8>
 800ae78:	6922      	ldr	r2, [r4, #16]
 800ae7a:	455a      	cmp	r2, fp
 800ae7c:	dd0b      	ble.n	800ae96 <__gethex+0x46e>
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7ff fd6a 	bl	800a95a <rshift>
 800ae86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae8a:	3501      	adds	r5, #1
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	f6ff aed0 	blt.w	800ac32 <__gethex+0x20a>
 800ae92:	2701      	movs	r7, #1
 800ae94:	e7c0      	b.n	800ae18 <__gethex+0x3f0>
 800ae96:	f016 061f 	ands.w	r6, r6, #31
 800ae9a:	d0fa      	beq.n	800ae92 <__gethex+0x46a>
 800ae9c:	4453      	add	r3, sl
 800ae9e:	f1c6 0620 	rsb	r6, r6, #32
 800aea2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aea6:	f000 fa4d 	bl	800b344 <__hi0bits>
 800aeaa:	42b0      	cmp	r0, r6
 800aeac:	dbe7      	blt.n	800ae7e <__gethex+0x456>
 800aeae:	e7f0      	b.n	800ae92 <__gethex+0x46a>
 800aeb0:	0800cd08 	.word	0x0800cd08

0800aeb4 <L_shift>:
 800aeb4:	f1c2 0208 	rsb	r2, r2, #8
 800aeb8:	0092      	lsls	r2, r2, #2
 800aeba:	b570      	push	{r4, r5, r6, lr}
 800aebc:	f1c2 0620 	rsb	r6, r2, #32
 800aec0:	6843      	ldr	r3, [r0, #4]
 800aec2:	6804      	ldr	r4, [r0, #0]
 800aec4:	fa03 f506 	lsl.w	r5, r3, r6
 800aec8:	432c      	orrs	r4, r5
 800aeca:	40d3      	lsrs	r3, r2
 800aecc:	6004      	str	r4, [r0, #0]
 800aece:	f840 3f04 	str.w	r3, [r0, #4]!
 800aed2:	4288      	cmp	r0, r1
 800aed4:	d3f4      	bcc.n	800aec0 <L_shift+0xc>
 800aed6:	bd70      	pop	{r4, r5, r6, pc}

0800aed8 <__match>:
 800aed8:	b530      	push	{r4, r5, lr}
 800aeda:	6803      	ldr	r3, [r0, #0]
 800aedc:	3301      	adds	r3, #1
 800aede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aee2:	b914      	cbnz	r4, 800aeea <__match+0x12>
 800aee4:	6003      	str	r3, [r0, #0]
 800aee6:	2001      	movs	r0, #1
 800aee8:	bd30      	pop	{r4, r5, pc}
 800aeea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aef2:	2d19      	cmp	r5, #25
 800aef4:	bf98      	it	ls
 800aef6:	3220      	addls	r2, #32
 800aef8:	42a2      	cmp	r2, r4
 800aefa:	d0f0      	beq.n	800aede <__match+0x6>
 800aefc:	2000      	movs	r0, #0
 800aefe:	e7f3      	b.n	800aee8 <__match+0x10>

0800af00 <__hexnan>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	680b      	ldr	r3, [r1, #0]
 800af06:	115e      	asrs	r6, r3, #5
 800af08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af0c:	f013 031f 	ands.w	r3, r3, #31
 800af10:	b087      	sub	sp, #28
 800af12:	bf18      	it	ne
 800af14:	3604      	addne	r6, #4
 800af16:	2500      	movs	r5, #0
 800af18:	1f37      	subs	r7, r6, #4
 800af1a:	4690      	mov	r8, r2
 800af1c:	6802      	ldr	r2, [r0, #0]
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	4682      	mov	sl, r0
 800af22:	f846 5c04 	str.w	r5, [r6, #-4]
 800af26:	46b9      	mov	r9, r7
 800af28:	463c      	mov	r4, r7
 800af2a:	9502      	str	r5, [sp, #8]
 800af2c:	46ab      	mov	fp, r5
 800af2e:	7851      	ldrb	r1, [r2, #1]
 800af30:	1c53      	adds	r3, r2, #1
 800af32:	9303      	str	r3, [sp, #12]
 800af34:	b341      	cbz	r1, 800af88 <__hexnan+0x88>
 800af36:	4608      	mov	r0, r1
 800af38:	9205      	str	r2, [sp, #20]
 800af3a:	9104      	str	r1, [sp, #16]
 800af3c:	f7ff fd5f 	bl	800a9fe <__hexdig_fun>
 800af40:	2800      	cmp	r0, #0
 800af42:	d14f      	bne.n	800afe4 <__hexnan+0xe4>
 800af44:	9904      	ldr	r1, [sp, #16]
 800af46:	9a05      	ldr	r2, [sp, #20]
 800af48:	2920      	cmp	r1, #32
 800af4a:	d818      	bhi.n	800af7e <__hexnan+0x7e>
 800af4c:	9b02      	ldr	r3, [sp, #8]
 800af4e:	459b      	cmp	fp, r3
 800af50:	dd13      	ble.n	800af7a <__hexnan+0x7a>
 800af52:	454c      	cmp	r4, r9
 800af54:	d206      	bcs.n	800af64 <__hexnan+0x64>
 800af56:	2d07      	cmp	r5, #7
 800af58:	dc04      	bgt.n	800af64 <__hexnan+0x64>
 800af5a:	462a      	mov	r2, r5
 800af5c:	4649      	mov	r1, r9
 800af5e:	4620      	mov	r0, r4
 800af60:	f7ff ffa8 	bl	800aeb4 <L_shift>
 800af64:	4544      	cmp	r4, r8
 800af66:	d950      	bls.n	800b00a <__hexnan+0x10a>
 800af68:	2300      	movs	r3, #0
 800af6a:	f1a4 0904 	sub.w	r9, r4, #4
 800af6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af72:	f8cd b008 	str.w	fp, [sp, #8]
 800af76:	464c      	mov	r4, r9
 800af78:	461d      	mov	r5, r3
 800af7a:	9a03      	ldr	r2, [sp, #12]
 800af7c:	e7d7      	b.n	800af2e <__hexnan+0x2e>
 800af7e:	2929      	cmp	r1, #41	; 0x29
 800af80:	d156      	bne.n	800b030 <__hexnan+0x130>
 800af82:	3202      	adds	r2, #2
 800af84:	f8ca 2000 	str.w	r2, [sl]
 800af88:	f1bb 0f00 	cmp.w	fp, #0
 800af8c:	d050      	beq.n	800b030 <__hexnan+0x130>
 800af8e:	454c      	cmp	r4, r9
 800af90:	d206      	bcs.n	800afa0 <__hexnan+0xa0>
 800af92:	2d07      	cmp	r5, #7
 800af94:	dc04      	bgt.n	800afa0 <__hexnan+0xa0>
 800af96:	462a      	mov	r2, r5
 800af98:	4649      	mov	r1, r9
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff ff8a 	bl	800aeb4 <L_shift>
 800afa0:	4544      	cmp	r4, r8
 800afa2:	d934      	bls.n	800b00e <__hexnan+0x10e>
 800afa4:	f1a8 0204 	sub.w	r2, r8, #4
 800afa8:	4623      	mov	r3, r4
 800afaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800afae:	f842 1f04 	str.w	r1, [r2, #4]!
 800afb2:	429f      	cmp	r7, r3
 800afb4:	d2f9      	bcs.n	800afaa <__hexnan+0xaa>
 800afb6:	1b3b      	subs	r3, r7, r4
 800afb8:	f023 0303 	bic.w	r3, r3, #3
 800afbc:	3304      	adds	r3, #4
 800afbe:	3401      	adds	r4, #1
 800afc0:	3e03      	subs	r6, #3
 800afc2:	42b4      	cmp	r4, r6
 800afc4:	bf88      	it	hi
 800afc6:	2304      	movhi	r3, #4
 800afc8:	4443      	add	r3, r8
 800afca:	2200      	movs	r2, #0
 800afcc:	f843 2b04 	str.w	r2, [r3], #4
 800afd0:	429f      	cmp	r7, r3
 800afd2:	d2fb      	bcs.n	800afcc <__hexnan+0xcc>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	b91b      	cbnz	r3, 800afe0 <__hexnan+0xe0>
 800afd8:	4547      	cmp	r7, r8
 800afda:	d127      	bne.n	800b02c <__hexnan+0x12c>
 800afdc:	2301      	movs	r3, #1
 800afde:	603b      	str	r3, [r7, #0]
 800afe0:	2005      	movs	r0, #5
 800afe2:	e026      	b.n	800b032 <__hexnan+0x132>
 800afe4:	3501      	adds	r5, #1
 800afe6:	2d08      	cmp	r5, #8
 800afe8:	f10b 0b01 	add.w	fp, fp, #1
 800afec:	dd06      	ble.n	800affc <__hexnan+0xfc>
 800afee:	4544      	cmp	r4, r8
 800aff0:	d9c3      	bls.n	800af7a <__hexnan+0x7a>
 800aff2:	2300      	movs	r3, #0
 800aff4:	f844 3c04 	str.w	r3, [r4, #-4]
 800aff8:	2501      	movs	r5, #1
 800affa:	3c04      	subs	r4, #4
 800affc:	6822      	ldr	r2, [r4, #0]
 800affe:	f000 000f 	and.w	r0, r0, #15
 800b002:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b006:	6022      	str	r2, [r4, #0]
 800b008:	e7b7      	b.n	800af7a <__hexnan+0x7a>
 800b00a:	2508      	movs	r5, #8
 800b00c:	e7b5      	b.n	800af7a <__hexnan+0x7a>
 800b00e:	9b01      	ldr	r3, [sp, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0df      	beq.n	800afd4 <__hexnan+0xd4>
 800b014:	f04f 32ff 	mov.w	r2, #4294967295
 800b018:	f1c3 0320 	rsb	r3, r3, #32
 800b01c:	fa22 f303 	lsr.w	r3, r2, r3
 800b020:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b024:	401a      	ands	r2, r3
 800b026:	f846 2c04 	str.w	r2, [r6, #-4]
 800b02a:	e7d3      	b.n	800afd4 <__hexnan+0xd4>
 800b02c:	3f04      	subs	r7, #4
 800b02e:	e7d1      	b.n	800afd4 <__hexnan+0xd4>
 800b030:	2004      	movs	r0, #4
 800b032:	b007      	add	sp, #28
 800b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b038 <_localeconv_r>:
 800b038:	4800      	ldr	r0, [pc, #0]	; (800b03c <_localeconv_r+0x4>)
 800b03a:	4770      	bx	lr
 800b03c:	2000017c 	.word	0x2000017c

0800b040 <__retarget_lock_init_recursive>:
 800b040:	4770      	bx	lr

0800b042 <__retarget_lock_acquire_recursive>:
 800b042:	4770      	bx	lr

0800b044 <__retarget_lock_release_recursive>:
 800b044:	4770      	bx	lr

0800b046 <__swhatbuf_r>:
 800b046:	b570      	push	{r4, r5, r6, lr}
 800b048:	460e      	mov	r6, r1
 800b04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04e:	2900      	cmp	r1, #0
 800b050:	b096      	sub	sp, #88	; 0x58
 800b052:	4614      	mov	r4, r2
 800b054:	461d      	mov	r5, r3
 800b056:	da08      	bge.n	800b06a <__swhatbuf_r+0x24>
 800b058:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	602a      	str	r2, [r5, #0]
 800b060:	061a      	lsls	r2, r3, #24
 800b062:	d410      	bmi.n	800b086 <__swhatbuf_r+0x40>
 800b064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b068:	e00e      	b.n	800b088 <__swhatbuf_r+0x42>
 800b06a:	466a      	mov	r2, sp
 800b06c:	f001 f85a 	bl	800c124 <_fstat_r>
 800b070:	2800      	cmp	r0, #0
 800b072:	dbf1      	blt.n	800b058 <__swhatbuf_r+0x12>
 800b074:	9a01      	ldr	r2, [sp, #4]
 800b076:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b07a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b07e:	425a      	negs	r2, r3
 800b080:	415a      	adcs	r2, r3
 800b082:	602a      	str	r2, [r5, #0]
 800b084:	e7ee      	b.n	800b064 <__swhatbuf_r+0x1e>
 800b086:	2340      	movs	r3, #64	; 0x40
 800b088:	2000      	movs	r0, #0
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	b016      	add	sp, #88	; 0x58
 800b08e:	bd70      	pop	{r4, r5, r6, pc}

0800b090 <__smakebuf_r>:
 800b090:	898b      	ldrh	r3, [r1, #12]
 800b092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b094:	079d      	lsls	r5, r3, #30
 800b096:	4606      	mov	r6, r0
 800b098:	460c      	mov	r4, r1
 800b09a:	d507      	bpl.n	800b0ac <__smakebuf_r+0x1c>
 800b09c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	6163      	str	r3, [r4, #20]
 800b0a8:	b002      	add	sp, #8
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	ab01      	add	r3, sp, #4
 800b0ae:	466a      	mov	r2, sp
 800b0b0:	f7ff ffc9 	bl	800b046 <__swhatbuf_r>
 800b0b4:	9900      	ldr	r1, [sp, #0]
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f000 fd95 	bl	800bbe8 <_malloc_r>
 800b0be:	b948      	cbnz	r0, 800b0d4 <__smakebuf_r+0x44>
 800b0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c4:	059a      	lsls	r2, r3, #22
 800b0c6:	d4ef      	bmi.n	800b0a8 <__smakebuf_r+0x18>
 800b0c8:	f023 0303 	bic.w	r3, r3, #3
 800b0cc:	f043 0302 	orr.w	r3, r3, #2
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	e7e3      	b.n	800b09c <__smakebuf_r+0xc>
 800b0d4:	4b0d      	ldr	r3, [pc, #52]	; (800b10c <__smakebuf_r+0x7c>)
 800b0d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	6020      	str	r0, [r4, #0]
 800b0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	9b00      	ldr	r3, [sp, #0]
 800b0e4:	6163      	str	r3, [r4, #20]
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	6120      	str	r0, [r4, #16]
 800b0ea:	b15b      	cbz	r3, 800b104 <__smakebuf_r+0x74>
 800b0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f001 f829 	bl	800c148 <_isatty_r>
 800b0f6:	b128      	cbz	r0, 800b104 <__smakebuf_r+0x74>
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	f023 0303 	bic.w	r3, r3, #3
 800b0fe:	f043 0301 	orr.w	r3, r3, #1
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	89a0      	ldrh	r0, [r4, #12]
 800b106:	4305      	orrs	r5, r0
 800b108:	81a5      	strh	r5, [r4, #12]
 800b10a:	e7cd      	b.n	800b0a8 <__smakebuf_r+0x18>
 800b10c:	0800a7b9 	.word	0x0800a7b9

0800b110 <malloc>:
 800b110:	4b02      	ldr	r3, [pc, #8]	; (800b11c <malloc+0xc>)
 800b112:	4601      	mov	r1, r0
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f000 bd67 	b.w	800bbe8 <_malloc_r>
 800b11a:	bf00      	nop
 800b11c:	20000024 	.word	0x20000024

0800b120 <__ascii_mbtowc>:
 800b120:	b082      	sub	sp, #8
 800b122:	b901      	cbnz	r1, 800b126 <__ascii_mbtowc+0x6>
 800b124:	a901      	add	r1, sp, #4
 800b126:	b142      	cbz	r2, 800b13a <__ascii_mbtowc+0x1a>
 800b128:	b14b      	cbz	r3, 800b13e <__ascii_mbtowc+0x1e>
 800b12a:	7813      	ldrb	r3, [r2, #0]
 800b12c:	600b      	str	r3, [r1, #0]
 800b12e:	7812      	ldrb	r2, [r2, #0]
 800b130:	1e10      	subs	r0, r2, #0
 800b132:	bf18      	it	ne
 800b134:	2001      	movne	r0, #1
 800b136:	b002      	add	sp, #8
 800b138:	4770      	bx	lr
 800b13a:	4610      	mov	r0, r2
 800b13c:	e7fb      	b.n	800b136 <__ascii_mbtowc+0x16>
 800b13e:	f06f 0001 	mvn.w	r0, #1
 800b142:	e7f8      	b.n	800b136 <__ascii_mbtowc+0x16>

0800b144 <memcpy>:
 800b144:	440a      	add	r2, r1
 800b146:	4291      	cmp	r1, r2
 800b148:	f100 33ff 	add.w	r3, r0, #4294967295
 800b14c:	d100      	bne.n	800b150 <memcpy+0xc>
 800b14e:	4770      	bx	lr
 800b150:	b510      	push	{r4, lr}
 800b152:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b15a:	4291      	cmp	r1, r2
 800b15c:	d1f9      	bne.n	800b152 <memcpy+0xe>
 800b15e:	bd10      	pop	{r4, pc}

0800b160 <_Balloc>:
 800b160:	b570      	push	{r4, r5, r6, lr}
 800b162:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
 800b168:	b976      	cbnz	r6, 800b188 <_Balloc+0x28>
 800b16a:	2010      	movs	r0, #16
 800b16c:	f7ff ffd0 	bl	800b110 <malloc>
 800b170:	4602      	mov	r2, r0
 800b172:	6260      	str	r0, [r4, #36]	; 0x24
 800b174:	b920      	cbnz	r0, 800b180 <_Balloc+0x20>
 800b176:	4b18      	ldr	r3, [pc, #96]	; (800b1d8 <_Balloc+0x78>)
 800b178:	4818      	ldr	r0, [pc, #96]	; (800b1dc <_Balloc+0x7c>)
 800b17a:	2166      	movs	r1, #102	; 0x66
 800b17c:	f000 ff92 	bl	800c0a4 <__assert_func>
 800b180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b184:	6006      	str	r6, [r0, #0]
 800b186:	60c6      	str	r6, [r0, #12]
 800b188:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b18a:	68f3      	ldr	r3, [r6, #12]
 800b18c:	b183      	cbz	r3, 800b1b0 <_Balloc+0x50>
 800b18e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b196:	b9b8      	cbnz	r0, 800b1c8 <_Balloc+0x68>
 800b198:	2101      	movs	r1, #1
 800b19a:	fa01 f605 	lsl.w	r6, r1, r5
 800b19e:	1d72      	adds	r2, r6, #5
 800b1a0:	0092      	lsls	r2, r2, #2
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 fc9d 	bl	800bae2 <_calloc_r>
 800b1a8:	b160      	cbz	r0, 800b1c4 <_Balloc+0x64>
 800b1aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ae:	e00e      	b.n	800b1ce <_Balloc+0x6e>
 800b1b0:	2221      	movs	r2, #33	; 0x21
 800b1b2:	2104      	movs	r1, #4
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fc94 	bl	800bae2 <_calloc_r>
 800b1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1bc:	60f0      	str	r0, [r6, #12]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e4      	bne.n	800b18e <_Balloc+0x2e>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	6802      	ldr	r2, [r0, #0]
 800b1ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1d4:	e7f7      	b.n	800b1c6 <_Balloc+0x66>
 800b1d6:	bf00      	nop
 800b1d8:	0800cc96 	.word	0x0800cc96
 800b1dc:	0800cdf8 	.word	0x0800cdf8

0800b1e0 <_Bfree>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	b976      	cbnz	r6, 800b208 <_Bfree+0x28>
 800b1ea:	2010      	movs	r0, #16
 800b1ec:	f7ff ff90 	bl	800b110 <malloc>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	6268      	str	r0, [r5, #36]	; 0x24
 800b1f4:	b920      	cbnz	r0, 800b200 <_Bfree+0x20>
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <_Bfree+0x3c>)
 800b1f8:	4809      	ldr	r0, [pc, #36]	; (800b220 <_Bfree+0x40>)
 800b1fa:	218a      	movs	r1, #138	; 0x8a
 800b1fc:	f000 ff52 	bl	800c0a4 <__assert_func>
 800b200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b204:	6006      	str	r6, [r0, #0]
 800b206:	60c6      	str	r6, [r0, #12]
 800b208:	b13c      	cbz	r4, 800b21a <_Bfree+0x3a>
 800b20a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b20c:	6862      	ldr	r2, [r4, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b214:	6021      	str	r1, [r4, #0]
 800b216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	0800cc96 	.word	0x0800cc96
 800b220:	0800cdf8 	.word	0x0800cdf8

0800b224 <__multadd>:
 800b224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b228:	690d      	ldr	r5, [r1, #16]
 800b22a:	4607      	mov	r7, r0
 800b22c:	460c      	mov	r4, r1
 800b22e:	461e      	mov	r6, r3
 800b230:	f101 0c14 	add.w	ip, r1, #20
 800b234:	2000      	movs	r0, #0
 800b236:	f8dc 3000 	ldr.w	r3, [ip]
 800b23a:	b299      	uxth	r1, r3
 800b23c:	fb02 6101 	mla	r1, r2, r1, r6
 800b240:	0c1e      	lsrs	r6, r3, #16
 800b242:	0c0b      	lsrs	r3, r1, #16
 800b244:	fb02 3306 	mla	r3, r2, r6, r3
 800b248:	b289      	uxth	r1, r1
 800b24a:	3001      	adds	r0, #1
 800b24c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b250:	4285      	cmp	r5, r0
 800b252:	f84c 1b04 	str.w	r1, [ip], #4
 800b256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b25a:	dcec      	bgt.n	800b236 <__multadd+0x12>
 800b25c:	b30e      	cbz	r6, 800b2a2 <__multadd+0x7e>
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	42ab      	cmp	r3, r5
 800b262:	dc19      	bgt.n	800b298 <__multadd+0x74>
 800b264:	6861      	ldr	r1, [r4, #4]
 800b266:	4638      	mov	r0, r7
 800b268:	3101      	adds	r1, #1
 800b26a:	f7ff ff79 	bl	800b160 <_Balloc>
 800b26e:	4680      	mov	r8, r0
 800b270:	b928      	cbnz	r0, 800b27e <__multadd+0x5a>
 800b272:	4602      	mov	r2, r0
 800b274:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <__multadd+0x84>)
 800b276:	480d      	ldr	r0, [pc, #52]	; (800b2ac <__multadd+0x88>)
 800b278:	21b5      	movs	r1, #181	; 0xb5
 800b27a:	f000 ff13 	bl	800c0a4 <__assert_func>
 800b27e:	6922      	ldr	r2, [r4, #16]
 800b280:	3202      	adds	r2, #2
 800b282:	f104 010c 	add.w	r1, r4, #12
 800b286:	0092      	lsls	r2, r2, #2
 800b288:	300c      	adds	r0, #12
 800b28a:	f7ff ff5b 	bl	800b144 <memcpy>
 800b28e:	4621      	mov	r1, r4
 800b290:	4638      	mov	r0, r7
 800b292:	f7ff ffa5 	bl	800b1e0 <_Bfree>
 800b296:	4644      	mov	r4, r8
 800b298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b29c:	3501      	adds	r5, #1
 800b29e:	615e      	str	r6, [r3, #20]
 800b2a0:	6125      	str	r5, [r4, #16]
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a8:	0800cd08 	.word	0x0800cd08
 800b2ac:	0800cdf8 	.word	0x0800cdf8

0800b2b0 <__s2b>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	4615      	mov	r5, r2
 800b2b8:	461f      	mov	r7, r3
 800b2ba:	2209      	movs	r2, #9
 800b2bc:	3308      	adds	r3, #8
 800b2be:	4606      	mov	r6, r0
 800b2c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	db09      	blt.n	800b2e0 <__s2b+0x30>
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f7ff ff47 	bl	800b160 <_Balloc>
 800b2d2:	b940      	cbnz	r0, 800b2e6 <__s2b+0x36>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	4b19      	ldr	r3, [pc, #100]	; (800b33c <__s2b+0x8c>)
 800b2d8:	4819      	ldr	r0, [pc, #100]	; (800b340 <__s2b+0x90>)
 800b2da:	21ce      	movs	r1, #206	; 0xce
 800b2dc:	f000 fee2 	bl	800c0a4 <__assert_func>
 800b2e0:	0052      	lsls	r2, r2, #1
 800b2e2:	3101      	adds	r1, #1
 800b2e4:	e7f0      	b.n	800b2c8 <__s2b+0x18>
 800b2e6:	9b08      	ldr	r3, [sp, #32]
 800b2e8:	6143      	str	r3, [r0, #20]
 800b2ea:	2d09      	cmp	r5, #9
 800b2ec:	f04f 0301 	mov.w	r3, #1
 800b2f0:	6103      	str	r3, [r0, #16]
 800b2f2:	dd16      	ble.n	800b322 <__s2b+0x72>
 800b2f4:	f104 0909 	add.w	r9, r4, #9
 800b2f8:	46c8      	mov	r8, r9
 800b2fa:	442c      	add	r4, r5
 800b2fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b300:	4601      	mov	r1, r0
 800b302:	3b30      	subs	r3, #48	; 0x30
 800b304:	220a      	movs	r2, #10
 800b306:	4630      	mov	r0, r6
 800b308:	f7ff ff8c 	bl	800b224 <__multadd>
 800b30c:	45a0      	cmp	r8, r4
 800b30e:	d1f5      	bne.n	800b2fc <__s2b+0x4c>
 800b310:	f1a5 0408 	sub.w	r4, r5, #8
 800b314:	444c      	add	r4, r9
 800b316:	1b2d      	subs	r5, r5, r4
 800b318:	1963      	adds	r3, r4, r5
 800b31a:	42bb      	cmp	r3, r7
 800b31c:	db04      	blt.n	800b328 <__s2b+0x78>
 800b31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b322:	340a      	adds	r4, #10
 800b324:	2509      	movs	r5, #9
 800b326:	e7f6      	b.n	800b316 <__s2b+0x66>
 800b328:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b32c:	4601      	mov	r1, r0
 800b32e:	3b30      	subs	r3, #48	; 0x30
 800b330:	220a      	movs	r2, #10
 800b332:	4630      	mov	r0, r6
 800b334:	f7ff ff76 	bl	800b224 <__multadd>
 800b338:	e7ee      	b.n	800b318 <__s2b+0x68>
 800b33a:	bf00      	nop
 800b33c:	0800cd08 	.word	0x0800cd08
 800b340:	0800cdf8 	.word	0x0800cdf8

0800b344 <__hi0bits>:
 800b344:	0c03      	lsrs	r3, r0, #16
 800b346:	041b      	lsls	r3, r3, #16
 800b348:	b9d3      	cbnz	r3, 800b380 <__hi0bits+0x3c>
 800b34a:	0400      	lsls	r0, r0, #16
 800b34c:	2310      	movs	r3, #16
 800b34e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b352:	bf04      	itt	eq
 800b354:	0200      	lsleq	r0, r0, #8
 800b356:	3308      	addeq	r3, #8
 800b358:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b35c:	bf04      	itt	eq
 800b35e:	0100      	lsleq	r0, r0, #4
 800b360:	3304      	addeq	r3, #4
 800b362:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b366:	bf04      	itt	eq
 800b368:	0080      	lsleq	r0, r0, #2
 800b36a:	3302      	addeq	r3, #2
 800b36c:	2800      	cmp	r0, #0
 800b36e:	db05      	blt.n	800b37c <__hi0bits+0x38>
 800b370:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b374:	f103 0301 	add.w	r3, r3, #1
 800b378:	bf08      	it	eq
 800b37a:	2320      	moveq	r3, #32
 800b37c:	4618      	mov	r0, r3
 800b37e:	4770      	bx	lr
 800b380:	2300      	movs	r3, #0
 800b382:	e7e4      	b.n	800b34e <__hi0bits+0xa>

0800b384 <__lo0bits>:
 800b384:	6803      	ldr	r3, [r0, #0]
 800b386:	f013 0207 	ands.w	r2, r3, #7
 800b38a:	4601      	mov	r1, r0
 800b38c:	d00b      	beq.n	800b3a6 <__lo0bits+0x22>
 800b38e:	07da      	lsls	r2, r3, #31
 800b390:	d423      	bmi.n	800b3da <__lo0bits+0x56>
 800b392:	0798      	lsls	r0, r3, #30
 800b394:	bf49      	itett	mi
 800b396:	085b      	lsrmi	r3, r3, #1
 800b398:	089b      	lsrpl	r3, r3, #2
 800b39a:	2001      	movmi	r0, #1
 800b39c:	600b      	strmi	r3, [r1, #0]
 800b39e:	bf5c      	itt	pl
 800b3a0:	600b      	strpl	r3, [r1, #0]
 800b3a2:	2002      	movpl	r0, #2
 800b3a4:	4770      	bx	lr
 800b3a6:	b298      	uxth	r0, r3
 800b3a8:	b9a8      	cbnz	r0, 800b3d6 <__lo0bits+0x52>
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	2010      	movs	r0, #16
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	b90a      	cbnz	r2, 800b3b6 <__lo0bits+0x32>
 800b3b2:	3008      	adds	r0, #8
 800b3b4:	0a1b      	lsrs	r3, r3, #8
 800b3b6:	071a      	lsls	r2, r3, #28
 800b3b8:	bf04      	itt	eq
 800b3ba:	091b      	lsreq	r3, r3, #4
 800b3bc:	3004      	addeq	r0, #4
 800b3be:	079a      	lsls	r2, r3, #30
 800b3c0:	bf04      	itt	eq
 800b3c2:	089b      	lsreq	r3, r3, #2
 800b3c4:	3002      	addeq	r0, #2
 800b3c6:	07da      	lsls	r2, r3, #31
 800b3c8:	d403      	bmi.n	800b3d2 <__lo0bits+0x4e>
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	f100 0001 	add.w	r0, r0, #1
 800b3d0:	d005      	beq.n	800b3de <__lo0bits+0x5a>
 800b3d2:	600b      	str	r3, [r1, #0]
 800b3d4:	4770      	bx	lr
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	e7e9      	b.n	800b3ae <__lo0bits+0x2a>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	4770      	bx	lr
 800b3de:	2020      	movs	r0, #32
 800b3e0:	4770      	bx	lr
	...

0800b3e4 <__i2b>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	f7ff feb9 	bl	800b160 <_Balloc>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	b928      	cbnz	r0, 800b3fe <__i2b+0x1a>
 800b3f2:	4b05      	ldr	r3, [pc, #20]	; (800b408 <__i2b+0x24>)
 800b3f4:	4805      	ldr	r0, [pc, #20]	; (800b40c <__i2b+0x28>)
 800b3f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3fa:	f000 fe53 	bl	800c0a4 <__assert_func>
 800b3fe:	2301      	movs	r3, #1
 800b400:	6144      	str	r4, [r0, #20]
 800b402:	6103      	str	r3, [r0, #16]
 800b404:	bd10      	pop	{r4, pc}
 800b406:	bf00      	nop
 800b408:	0800cd08 	.word	0x0800cd08
 800b40c:	0800cdf8 	.word	0x0800cdf8

0800b410 <__multiply>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	4691      	mov	r9, r2
 800b416:	690a      	ldr	r2, [r1, #16]
 800b418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	bfb8      	it	lt
 800b420:	460b      	movlt	r3, r1
 800b422:	460c      	mov	r4, r1
 800b424:	bfbc      	itt	lt
 800b426:	464c      	movlt	r4, r9
 800b428:	4699      	movlt	r9, r3
 800b42a:	6927      	ldr	r7, [r4, #16]
 800b42c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b430:	68a3      	ldr	r3, [r4, #8]
 800b432:	6861      	ldr	r1, [r4, #4]
 800b434:	eb07 060a 	add.w	r6, r7, sl
 800b438:	42b3      	cmp	r3, r6
 800b43a:	b085      	sub	sp, #20
 800b43c:	bfb8      	it	lt
 800b43e:	3101      	addlt	r1, #1
 800b440:	f7ff fe8e 	bl	800b160 <_Balloc>
 800b444:	b930      	cbnz	r0, 800b454 <__multiply+0x44>
 800b446:	4602      	mov	r2, r0
 800b448:	4b44      	ldr	r3, [pc, #272]	; (800b55c <__multiply+0x14c>)
 800b44a:	4845      	ldr	r0, [pc, #276]	; (800b560 <__multiply+0x150>)
 800b44c:	f240 115d 	movw	r1, #349	; 0x15d
 800b450:	f000 fe28 	bl	800c0a4 <__assert_func>
 800b454:	f100 0514 	add.w	r5, r0, #20
 800b458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b45c:	462b      	mov	r3, r5
 800b45e:	2200      	movs	r2, #0
 800b460:	4543      	cmp	r3, r8
 800b462:	d321      	bcc.n	800b4a8 <__multiply+0x98>
 800b464:	f104 0314 	add.w	r3, r4, #20
 800b468:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b46c:	f109 0314 	add.w	r3, r9, #20
 800b470:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b474:	9202      	str	r2, [sp, #8]
 800b476:	1b3a      	subs	r2, r7, r4
 800b478:	3a15      	subs	r2, #21
 800b47a:	f022 0203 	bic.w	r2, r2, #3
 800b47e:	3204      	adds	r2, #4
 800b480:	f104 0115 	add.w	r1, r4, #21
 800b484:	428f      	cmp	r7, r1
 800b486:	bf38      	it	cc
 800b488:	2204      	movcc	r2, #4
 800b48a:	9201      	str	r2, [sp, #4]
 800b48c:	9a02      	ldr	r2, [sp, #8]
 800b48e:	9303      	str	r3, [sp, #12]
 800b490:	429a      	cmp	r2, r3
 800b492:	d80c      	bhi.n	800b4ae <__multiply+0x9e>
 800b494:	2e00      	cmp	r6, #0
 800b496:	dd03      	ble.n	800b4a0 <__multiply+0x90>
 800b498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d05a      	beq.n	800b556 <__multiply+0x146>
 800b4a0:	6106      	str	r6, [r0, #16]
 800b4a2:	b005      	add	sp, #20
 800b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a8:	f843 2b04 	str.w	r2, [r3], #4
 800b4ac:	e7d8      	b.n	800b460 <__multiply+0x50>
 800b4ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4b2:	f1ba 0f00 	cmp.w	sl, #0
 800b4b6:	d024      	beq.n	800b502 <__multiply+0xf2>
 800b4b8:	f104 0e14 	add.w	lr, r4, #20
 800b4bc:	46a9      	mov	r9, r5
 800b4be:	f04f 0c00 	mov.w	ip, #0
 800b4c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4c6:	f8d9 1000 	ldr.w	r1, [r9]
 800b4ca:	fa1f fb82 	uxth.w	fp, r2
 800b4ce:	b289      	uxth	r1, r1
 800b4d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b4dc:	4461      	add	r1, ip
 800b4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4ea:	b289      	uxth	r1, r1
 800b4ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4f0:	4577      	cmp	r7, lr
 800b4f2:	f849 1b04 	str.w	r1, [r9], #4
 800b4f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4fa:	d8e2      	bhi.n	800b4c2 <__multiply+0xb2>
 800b4fc:	9a01      	ldr	r2, [sp, #4]
 800b4fe:	f845 c002 	str.w	ip, [r5, r2]
 800b502:	9a03      	ldr	r2, [sp, #12]
 800b504:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b508:	3304      	adds	r3, #4
 800b50a:	f1b9 0f00 	cmp.w	r9, #0
 800b50e:	d020      	beq.n	800b552 <__multiply+0x142>
 800b510:	6829      	ldr	r1, [r5, #0]
 800b512:	f104 0c14 	add.w	ip, r4, #20
 800b516:	46ae      	mov	lr, r5
 800b518:	f04f 0a00 	mov.w	sl, #0
 800b51c:	f8bc b000 	ldrh.w	fp, [ip]
 800b520:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b524:	fb09 220b 	mla	r2, r9, fp, r2
 800b528:	4492      	add	sl, r2
 800b52a:	b289      	uxth	r1, r1
 800b52c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b530:	f84e 1b04 	str.w	r1, [lr], #4
 800b534:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b538:	f8be 1000 	ldrh.w	r1, [lr]
 800b53c:	0c12      	lsrs	r2, r2, #16
 800b53e:	fb09 1102 	mla	r1, r9, r2, r1
 800b542:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b546:	4567      	cmp	r7, ip
 800b548:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b54c:	d8e6      	bhi.n	800b51c <__multiply+0x10c>
 800b54e:	9a01      	ldr	r2, [sp, #4]
 800b550:	50a9      	str	r1, [r5, r2]
 800b552:	3504      	adds	r5, #4
 800b554:	e79a      	b.n	800b48c <__multiply+0x7c>
 800b556:	3e01      	subs	r6, #1
 800b558:	e79c      	b.n	800b494 <__multiply+0x84>
 800b55a:	bf00      	nop
 800b55c:	0800cd08 	.word	0x0800cd08
 800b560:	0800cdf8 	.word	0x0800cdf8

0800b564 <__pow5mult>:
 800b564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b568:	4615      	mov	r5, r2
 800b56a:	f012 0203 	ands.w	r2, r2, #3
 800b56e:	4606      	mov	r6, r0
 800b570:	460f      	mov	r7, r1
 800b572:	d007      	beq.n	800b584 <__pow5mult+0x20>
 800b574:	4c25      	ldr	r4, [pc, #148]	; (800b60c <__pow5mult+0xa8>)
 800b576:	3a01      	subs	r2, #1
 800b578:	2300      	movs	r3, #0
 800b57a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b57e:	f7ff fe51 	bl	800b224 <__multadd>
 800b582:	4607      	mov	r7, r0
 800b584:	10ad      	asrs	r5, r5, #2
 800b586:	d03d      	beq.n	800b604 <__pow5mult+0xa0>
 800b588:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b58a:	b97c      	cbnz	r4, 800b5ac <__pow5mult+0x48>
 800b58c:	2010      	movs	r0, #16
 800b58e:	f7ff fdbf 	bl	800b110 <malloc>
 800b592:	4602      	mov	r2, r0
 800b594:	6270      	str	r0, [r6, #36]	; 0x24
 800b596:	b928      	cbnz	r0, 800b5a4 <__pow5mult+0x40>
 800b598:	4b1d      	ldr	r3, [pc, #116]	; (800b610 <__pow5mult+0xac>)
 800b59a:	481e      	ldr	r0, [pc, #120]	; (800b614 <__pow5mult+0xb0>)
 800b59c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5a0:	f000 fd80 	bl	800c0a4 <__assert_func>
 800b5a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5a8:	6004      	str	r4, [r0, #0]
 800b5aa:	60c4      	str	r4, [r0, #12]
 800b5ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5b4:	b94c      	cbnz	r4, 800b5ca <__pow5mult+0x66>
 800b5b6:	f240 2171 	movw	r1, #625	; 0x271
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7ff ff12 	bl	800b3e4 <__i2b>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	6003      	str	r3, [r0, #0]
 800b5ca:	f04f 0900 	mov.w	r9, #0
 800b5ce:	07eb      	lsls	r3, r5, #31
 800b5d0:	d50a      	bpl.n	800b5e8 <__pow5mult+0x84>
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f7ff ff1a 	bl	800b410 <__multiply>
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4680      	mov	r8, r0
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7ff fdfd 	bl	800b1e0 <_Bfree>
 800b5e6:	4647      	mov	r7, r8
 800b5e8:	106d      	asrs	r5, r5, #1
 800b5ea:	d00b      	beq.n	800b604 <__pow5mult+0xa0>
 800b5ec:	6820      	ldr	r0, [r4, #0]
 800b5ee:	b938      	cbnz	r0, 800b600 <__pow5mult+0x9c>
 800b5f0:	4622      	mov	r2, r4
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7ff ff0b 	bl	800b410 <__multiply>
 800b5fa:	6020      	str	r0, [r4, #0]
 800b5fc:	f8c0 9000 	str.w	r9, [r0]
 800b600:	4604      	mov	r4, r0
 800b602:	e7e4      	b.n	800b5ce <__pow5mult+0x6a>
 800b604:	4638      	mov	r0, r7
 800b606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60a:	bf00      	nop
 800b60c:	0800cf48 	.word	0x0800cf48
 800b610:	0800cc96 	.word	0x0800cc96
 800b614:	0800cdf8 	.word	0x0800cdf8

0800b618 <__lshift>:
 800b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	460c      	mov	r4, r1
 800b61e:	6849      	ldr	r1, [r1, #4]
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	4607      	mov	r7, r0
 800b62a:	4691      	mov	r9, r2
 800b62c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b630:	f108 0601 	add.w	r6, r8, #1
 800b634:	42b3      	cmp	r3, r6
 800b636:	db0b      	blt.n	800b650 <__lshift+0x38>
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff fd91 	bl	800b160 <_Balloc>
 800b63e:	4605      	mov	r5, r0
 800b640:	b948      	cbnz	r0, 800b656 <__lshift+0x3e>
 800b642:	4602      	mov	r2, r0
 800b644:	4b2a      	ldr	r3, [pc, #168]	; (800b6f0 <__lshift+0xd8>)
 800b646:	482b      	ldr	r0, [pc, #172]	; (800b6f4 <__lshift+0xdc>)
 800b648:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b64c:	f000 fd2a 	bl	800c0a4 <__assert_func>
 800b650:	3101      	adds	r1, #1
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	e7ee      	b.n	800b634 <__lshift+0x1c>
 800b656:	2300      	movs	r3, #0
 800b658:	f100 0114 	add.w	r1, r0, #20
 800b65c:	f100 0210 	add.w	r2, r0, #16
 800b660:	4618      	mov	r0, r3
 800b662:	4553      	cmp	r3, sl
 800b664:	db37      	blt.n	800b6d6 <__lshift+0xbe>
 800b666:	6920      	ldr	r0, [r4, #16]
 800b668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b66c:	f104 0314 	add.w	r3, r4, #20
 800b670:	f019 091f 	ands.w	r9, r9, #31
 800b674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b67c:	d02f      	beq.n	800b6de <__lshift+0xc6>
 800b67e:	f1c9 0e20 	rsb	lr, r9, #32
 800b682:	468a      	mov	sl, r1
 800b684:	f04f 0c00 	mov.w	ip, #0
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	fa02 f209 	lsl.w	r2, r2, r9
 800b68e:	ea42 020c 	orr.w	r2, r2, ip
 800b692:	f84a 2b04 	str.w	r2, [sl], #4
 800b696:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69a:	4298      	cmp	r0, r3
 800b69c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6a0:	d8f2      	bhi.n	800b688 <__lshift+0x70>
 800b6a2:	1b03      	subs	r3, r0, r4
 800b6a4:	3b15      	subs	r3, #21
 800b6a6:	f023 0303 	bic.w	r3, r3, #3
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	f104 0215 	add.w	r2, r4, #21
 800b6b0:	4290      	cmp	r0, r2
 800b6b2:	bf38      	it	cc
 800b6b4:	2304      	movcc	r3, #4
 800b6b6:	f841 c003 	str.w	ip, [r1, r3]
 800b6ba:	f1bc 0f00 	cmp.w	ip, #0
 800b6be:	d001      	beq.n	800b6c4 <__lshift+0xac>
 800b6c0:	f108 0602 	add.w	r6, r8, #2
 800b6c4:	3e01      	subs	r6, #1
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	612e      	str	r6, [r5, #16]
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	f7ff fd88 	bl	800b1e0 <_Bfree>
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6da:	3301      	adds	r3, #1
 800b6dc:	e7c1      	b.n	800b662 <__lshift+0x4a>
 800b6de:	3904      	subs	r1, #4
 800b6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6e8:	4298      	cmp	r0, r3
 800b6ea:	d8f9      	bhi.n	800b6e0 <__lshift+0xc8>
 800b6ec:	e7ea      	b.n	800b6c4 <__lshift+0xac>
 800b6ee:	bf00      	nop
 800b6f0:	0800cd08 	.word	0x0800cd08
 800b6f4:	0800cdf8 	.word	0x0800cdf8

0800b6f8 <__mcmp>:
 800b6f8:	b530      	push	{r4, r5, lr}
 800b6fa:	6902      	ldr	r2, [r0, #16]
 800b6fc:	690c      	ldr	r4, [r1, #16]
 800b6fe:	1b12      	subs	r2, r2, r4
 800b700:	d10e      	bne.n	800b720 <__mcmp+0x28>
 800b702:	f100 0314 	add.w	r3, r0, #20
 800b706:	3114      	adds	r1, #20
 800b708:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b70c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b710:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b714:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b718:	42a5      	cmp	r5, r4
 800b71a:	d003      	beq.n	800b724 <__mcmp+0x2c>
 800b71c:	d305      	bcc.n	800b72a <__mcmp+0x32>
 800b71e:	2201      	movs	r2, #1
 800b720:	4610      	mov	r0, r2
 800b722:	bd30      	pop	{r4, r5, pc}
 800b724:	4283      	cmp	r3, r0
 800b726:	d3f3      	bcc.n	800b710 <__mcmp+0x18>
 800b728:	e7fa      	b.n	800b720 <__mcmp+0x28>
 800b72a:	f04f 32ff 	mov.w	r2, #4294967295
 800b72e:	e7f7      	b.n	800b720 <__mcmp+0x28>

0800b730 <__mdiff>:
 800b730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	460c      	mov	r4, r1
 800b736:	4606      	mov	r6, r0
 800b738:	4611      	mov	r1, r2
 800b73a:	4620      	mov	r0, r4
 800b73c:	4690      	mov	r8, r2
 800b73e:	f7ff ffdb 	bl	800b6f8 <__mcmp>
 800b742:	1e05      	subs	r5, r0, #0
 800b744:	d110      	bne.n	800b768 <__mdiff+0x38>
 800b746:	4629      	mov	r1, r5
 800b748:	4630      	mov	r0, r6
 800b74a:	f7ff fd09 	bl	800b160 <_Balloc>
 800b74e:	b930      	cbnz	r0, 800b75e <__mdiff+0x2e>
 800b750:	4b3a      	ldr	r3, [pc, #232]	; (800b83c <__mdiff+0x10c>)
 800b752:	4602      	mov	r2, r0
 800b754:	f240 2132 	movw	r1, #562	; 0x232
 800b758:	4839      	ldr	r0, [pc, #228]	; (800b840 <__mdiff+0x110>)
 800b75a:	f000 fca3 	bl	800c0a4 <__assert_func>
 800b75e:	2301      	movs	r3, #1
 800b760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b768:	bfa4      	itt	ge
 800b76a:	4643      	movge	r3, r8
 800b76c:	46a0      	movge	r8, r4
 800b76e:	4630      	mov	r0, r6
 800b770:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b774:	bfa6      	itte	ge
 800b776:	461c      	movge	r4, r3
 800b778:	2500      	movge	r5, #0
 800b77a:	2501      	movlt	r5, #1
 800b77c:	f7ff fcf0 	bl	800b160 <_Balloc>
 800b780:	b920      	cbnz	r0, 800b78c <__mdiff+0x5c>
 800b782:	4b2e      	ldr	r3, [pc, #184]	; (800b83c <__mdiff+0x10c>)
 800b784:	4602      	mov	r2, r0
 800b786:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b78a:	e7e5      	b.n	800b758 <__mdiff+0x28>
 800b78c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b790:	6926      	ldr	r6, [r4, #16]
 800b792:	60c5      	str	r5, [r0, #12]
 800b794:	f104 0914 	add.w	r9, r4, #20
 800b798:	f108 0514 	add.w	r5, r8, #20
 800b79c:	f100 0e14 	add.w	lr, r0, #20
 800b7a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7a8:	f108 0210 	add.w	r2, r8, #16
 800b7ac:	46f2      	mov	sl, lr
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7b8:	fa1f f883 	uxth.w	r8, r3
 800b7bc:	fa11 f18b 	uxtah	r1, r1, fp
 800b7c0:	0c1b      	lsrs	r3, r3, #16
 800b7c2:	eba1 0808 	sub.w	r8, r1, r8
 800b7c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7ce:	fa1f f888 	uxth.w	r8, r8
 800b7d2:	1419      	asrs	r1, r3, #16
 800b7d4:	454e      	cmp	r6, r9
 800b7d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7da:	f84a 3b04 	str.w	r3, [sl], #4
 800b7de:	d8e7      	bhi.n	800b7b0 <__mdiff+0x80>
 800b7e0:	1b33      	subs	r3, r6, r4
 800b7e2:	3b15      	subs	r3, #21
 800b7e4:	f023 0303 	bic.w	r3, r3, #3
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	3415      	adds	r4, #21
 800b7ec:	42a6      	cmp	r6, r4
 800b7ee:	bf38      	it	cc
 800b7f0:	2304      	movcc	r3, #4
 800b7f2:	441d      	add	r5, r3
 800b7f4:	4473      	add	r3, lr
 800b7f6:	469e      	mov	lr, r3
 800b7f8:	462e      	mov	r6, r5
 800b7fa:	4566      	cmp	r6, ip
 800b7fc:	d30e      	bcc.n	800b81c <__mdiff+0xec>
 800b7fe:	f10c 0203 	add.w	r2, ip, #3
 800b802:	1b52      	subs	r2, r2, r5
 800b804:	f022 0203 	bic.w	r2, r2, #3
 800b808:	3d03      	subs	r5, #3
 800b80a:	45ac      	cmp	ip, r5
 800b80c:	bf38      	it	cc
 800b80e:	2200      	movcc	r2, #0
 800b810:	441a      	add	r2, r3
 800b812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b816:	b17b      	cbz	r3, 800b838 <__mdiff+0x108>
 800b818:	6107      	str	r7, [r0, #16]
 800b81a:	e7a3      	b.n	800b764 <__mdiff+0x34>
 800b81c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b820:	fa11 f288 	uxtah	r2, r1, r8
 800b824:	1414      	asrs	r4, r2, #16
 800b826:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b82a:	b292      	uxth	r2, r2
 800b82c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b830:	f84e 2b04 	str.w	r2, [lr], #4
 800b834:	1421      	asrs	r1, r4, #16
 800b836:	e7e0      	b.n	800b7fa <__mdiff+0xca>
 800b838:	3f01      	subs	r7, #1
 800b83a:	e7ea      	b.n	800b812 <__mdiff+0xe2>
 800b83c:	0800cd08 	.word	0x0800cd08
 800b840:	0800cdf8 	.word	0x0800cdf8

0800b844 <__ulp>:
 800b844:	b082      	sub	sp, #8
 800b846:	ed8d 0b00 	vstr	d0, [sp]
 800b84a:	9b01      	ldr	r3, [sp, #4]
 800b84c:	4912      	ldr	r1, [pc, #72]	; (800b898 <__ulp+0x54>)
 800b84e:	4019      	ands	r1, r3
 800b850:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b854:	2900      	cmp	r1, #0
 800b856:	dd05      	ble.n	800b864 <__ulp+0x20>
 800b858:	2200      	movs	r2, #0
 800b85a:	460b      	mov	r3, r1
 800b85c:	ec43 2b10 	vmov	d0, r2, r3
 800b860:	b002      	add	sp, #8
 800b862:	4770      	bx	lr
 800b864:	4249      	negs	r1, r1
 800b866:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b86a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b86e:	f04f 0200 	mov.w	r2, #0
 800b872:	f04f 0300 	mov.w	r3, #0
 800b876:	da04      	bge.n	800b882 <__ulp+0x3e>
 800b878:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b87c:	fa41 f300 	asr.w	r3, r1, r0
 800b880:	e7ec      	b.n	800b85c <__ulp+0x18>
 800b882:	f1a0 0114 	sub.w	r1, r0, #20
 800b886:	291e      	cmp	r1, #30
 800b888:	bfda      	itte	le
 800b88a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b88e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b892:	2101      	movgt	r1, #1
 800b894:	460a      	mov	r2, r1
 800b896:	e7e1      	b.n	800b85c <__ulp+0x18>
 800b898:	7ff00000 	.word	0x7ff00000

0800b89c <__b2d>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	6905      	ldr	r5, [r0, #16]
 800b8a0:	f100 0714 	add.w	r7, r0, #20
 800b8a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b8a8:	1f2e      	subs	r6, r5, #4
 800b8aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7ff fd48 	bl	800b344 <__hi0bits>
 800b8b4:	f1c0 0320 	rsb	r3, r0, #32
 800b8b8:	280a      	cmp	r0, #10
 800b8ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b938 <__b2d+0x9c>
 800b8be:	600b      	str	r3, [r1, #0]
 800b8c0:	dc14      	bgt.n	800b8ec <__b2d+0x50>
 800b8c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b8c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b8ca:	42b7      	cmp	r7, r6
 800b8cc:	ea41 030c 	orr.w	r3, r1, ip
 800b8d0:	bf34      	ite	cc
 800b8d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8d6:	2100      	movcs	r1, #0
 800b8d8:	3015      	adds	r0, #21
 800b8da:	fa04 f000 	lsl.w	r0, r4, r0
 800b8de:	fa21 f10e 	lsr.w	r1, r1, lr
 800b8e2:	ea40 0201 	orr.w	r2, r0, r1
 800b8e6:	ec43 2b10 	vmov	d0, r2, r3
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ec:	42b7      	cmp	r7, r6
 800b8ee:	bf3a      	itte	cc
 800b8f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b8f8:	2100      	movcs	r1, #0
 800b8fa:	380b      	subs	r0, #11
 800b8fc:	d017      	beq.n	800b92e <__b2d+0x92>
 800b8fe:	f1c0 0c20 	rsb	ip, r0, #32
 800b902:	fa04 f500 	lsl.w	r5, r4, r0
 800b906:	42be      	cmp	r6, r7
 800b908:	fa21 f40c 	lsr.w	r4, r1, ip
 800b90c:	ea45 0504 	orr.w	r5, r5, r4
 800b910:	bf8c      	ite	hi
 800b912:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b916:	2400      	movls	r4, #0
 800b918:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b91c:	fa01 f000 	lsl.w	r0, r1, r0
 800b920:	fa24 f40c 	lsr.w	r4, r4, ip
 800b924:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b928:	ea40 0204 	orr.w	r2, r0, r4
 800b92c:	e7db      	b.n	800b8e6 <__b2d+0x4a>
 800b92e:	ea44 030c 	orr.w	r3, r4, ip
 800b932:	460a      	mov	r2, r1
 800b934:	e7d7      	b.n	800b8e6 <__b2d+0x4a>
 800b936:	bf00      	nop
 800b938:	3ff00000 	.word	0x3ff00000

0800b93c <__d2b>:
 800b93c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b940:	4689      	mov	r9, r1
 800b942:	2101      	movs	r1, #1
 800b944:	ec57 6b10 	vmov	r6, r7, d0
 800b948:	4690      	mov	r8, r2
 800b94a:	f7ff fc09 	bl	800b160 <_Balloc>
 800b94e:	4604      	mov	r4, r0
 800b950:	b930      	cbnz	r0, 800b960 <__d2b+0x24>
 800b952:	4602      	mov	r2, r0
 800b954:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <__d2b+0xb0>)
 800b956:	4826      	ldr	r0, [pc, #152]	; (800b9f0 <__d2b+0xb4>)
 800b958:	f240 310a 	movw	r1, #778	; 0x30a
 800b95c:	f000 fba2 	bl	800c0a4 <__assert_func>
 800b960:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b964:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b968:	bb35      	cbnz	r5, 800b9b8 <__d2b+0x7c>
 800b96a:	2e00      	cmp	r6, #0
 800b96c:	9301      	str	r3, [sp, #4]
 800b96e:	d028      	beq.n	800b9c2 <__d2b+0x86>
 800b970:	4668      	mov	r0, sp
 800b972:	9600      	str	r6, [sp, #0]
 800b974:	f7ff fd06 	bl	800b384 <__lo0bits>
 800b978:	9900      	ldr	r1, [sp, #0]
 800b97a:	b300      	cbz	r0, 800b9be <__d2b+0x82>
 800b97c:	9a01      	ldr	r2, [sp, #4]
 800b97e:	f1c0 0320 	rsb	r3, r0, #32
 800b982:	fa02 f303 	lsl.w	r3, r2, r3
 800b986:	430b      	orrs	r3, r1
 800b988:	40c2      	lsrs	r2, r0
 800b98a:	6163      	str	r3, [r4, #20]
 800b98c:	9201      	str	r2, [sp, #4]
 800b98e:	9b01      	ldr	r3, [sp, #4]
 800b990:	61a3      	str	r3, [r4, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	bf14      	ite	ne
 800b996:	2202      	movne	r2, #2
 800b998:	2201      	moveq	r2, #1
 800b99a:	6122      	str	r2, [r4, #16]
 800b99c:	b1d5      	cbz	r5, 800b9d4 <__d2b+0x98>
 800b99e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9a2:	4405      	add	r5, r0
 800b9a4:	f8c9 5000 	str.w	r5, [r9]
 800b9a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9ac:	f8c8 0000 	str.w	r0, [r8]
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	b003      	add	sp, #12
 800b9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9bc:	e7d5      	b.n	800b96a <__d2b+0x2e>
 800b9be:	6161      	str	r1, [r4, #20]
 800b9c0:	e7e5      	b.n	800b98e <__d2b+0x52>
 800b9c2:	a801      	add	r0, sp, #4
 800b9c4:	f7ff fcde 	bl	800b384 <__lo0bits>
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	6163      	str	r3, [r4, #20]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	6122      	str	r2, [r4, #16]
 800b9d0:	3020      	adds	r0, #32
 800b9d2:	e7e3      	b.n	800b99c <__d2b+0x60>
 800b9d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9dc:	f8c9 0000 	str.w	r0, [r9]
 800b9e0:	6918      	ldr	r0, [r3, #16]
 800b9e2:	f7ff fcaf 	bl	800b344 <__hi0bits>
 800b9e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9ea:	e7df      	b.n	800b9ac <__d2b+0x70>
 800b9ec:	0800cd08 	.word	0x0800cd08
 800b9f0:	0800cdf8 	.word	0x0800cdf8

0800b9f4 <__ratio>:
 800b9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	4688      	mov	r8, r1
 800b9fa:	4669      	mov	r1, sp
 800b9fc:	4681      	mov	r9, r0
 800b9fe:	f7ff ff4d 	bl	800b89c <__b2d>
 800ba02:	a901      	add	r1, sp, #4
 800ba04:	4640      	mov	r0, r8
 800ba06:	ec55 4b10 	vmov	r4, r5, d0
 800ba0a:	f7ff ff47 	bl	800b89c <__b2d>
 800ba0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba16:	eba3 0c02 	sub.w	ip, r3, r2
 800ba1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba1e:	1a9b      	subs	r3, r3, r2
 800ba20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba24:	ec51 0b10 	vmov	r0, r1, d0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bfd6      	itet	le
 800ba2c:	460a      	movle	r2, r1
 800ba2e:	462a      	movgt	r2, r5
 800ba30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba34:	468b      	mov	fp, r1
 800ba36:	462f      	mov	r7, r5
 800ba38:	bfd4      	ite	le
 800ba3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba42:	4620      	mov	r0, r4
 800ba44:	ee10 2a10 	vmov	r2, s0
 800ba48:	465b      	mov	r3, fp
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	f7f4 ff1e 	bl	800088c <__aeabi_ddiv>
 800ba50:	ec41 0b10 	vmov	d0, r0, r1
 800ba54:	b003      	add	sp, #12
 800ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba5a <__copybits>:
 800ba5a:	3901      	subs	r1, #1
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	1149      	asrs	r1, r1, #5
 800ba60:	6914      	ldr	r4, [r2, #16]
 800ba62:	3101      	adds	r1, #1
 800ba64:	f102 0314 	add.w	r3, r2, #20
 800ba68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba70:	1f05      	subs	r5, r0, #4
 800ba72:	42a3      	cmp	r3, r4
 800ba74:	d30c      	bcc.n	800ba90 <__copybits+0x36>
 800ba76:	1aa3      	subs	r3, r4, r2
 800ba78:	3b11      	subs	r3, #17
 800ba7a:	f023 0303 	bic.w	r3, r3, #3
 800ba7e:	3211      	adds	r2, #17
 800ba80:	42a2      	cmp	r2, r4
 800ba82:	bf88      	it	hi
 800ba84:	2300      	movhi	r3, #0
 800ba86:	4418      	add	r0, r3
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4288      	cmp	r0, r1
 800ba8c:	d305      	bcc.n	800ba9a <__copybits+0x40>
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba94:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba98:	e7eb      	b.n	800ba72 <__copybits+0x18>
 800ba9a:	f840 3b04 	str.w	r3, [r0], #4
 800ba9e:	e7f4      	b.n	800ba8a <__copybits+0x30>

0800baa0 <__any_on>:
 800baa0:	f100 0214 	add.w	r2, r0, #20
 800baa4:	6900      	ldr	r0, [r0, #16]
 800baa6:	114b      	asrs	r3, r1, #5
 800baa8:	4298      	cmp	r0, r3
 800baaa:	b510      	push	{r4, lr}
 800baac:	db11      	blt.n	800bad2 <__any_on+0x32>
 800baae:	dd0a      	ble.n	800bac6 <__any_on+0x26>
 800bab0:	f011 011f 	ands.w	r1, r1, #31
 800bab4:	d007      	beq.n	800bac6 <__any_on+0x26>
 800bab6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800baba:	fa24 f001 	lsr.w	r0, r4, r1
 800babe:	fa00 f101 	lsl.w	r1, r0, r1
 800bac2:	428c      	cmp	r4, r1
 800bac4:	d10b      	bne.n	800bade <__any_on+0x3e>
 800bac6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baca:	4293      	cmp	r3, r2
 800bacc:	d803      	bhi.n	800bad6 <__any_on+0x36>
 800bace:	2000      	movs	r0, #0
 800bad0:	bd10      	pop	{r4, pc}
 800bad2:	4603      	mov	r3, r0
 800bad4:	e7f7      	b.n	800bac6 <__any_on+0x26>
 800bad6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bada:	2900      	cmp	r1, #0
 800badc:	d0f5      	beq.n	800baca <__any_on+0x2a>
 800bade:	2001      	movs	r0, #1
 800bae0:	e7f6      	b.n	800bad0 <__any_on+0x30>

0800bae2 <_calloc_r>:
 800bae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bae4:	fba1 2402 	umull	r2, r4, r1, r2
 800bae8:	b94c      	cbnz	r4, 800bafe <_calloc_r+0x1c>
 800baea:	4611      	mov	r1, r2
 800baec:	9201      	str	r2, [sp, #4]
 800baee:	f000 f87b 	bl	800bbe8 <_malloc_r>
 800baf2:	9a01      	ldr	r2, [sp, #4]
 800baf4:	4605      	mov	r5, r0
 800baf6:	b930      	cbnz	r0, 800bb06 <_calloc_r+0x24>
 800baf8:	4628      	mov	r0, r5
 800bafa:	b003      	add	sp, #12
 800bafc:	bd30      	pop	{r4, r5, pc}
 800bafe:	220c      	movs	r2, #12
 800bb00:	6002      	str	r2, [r0, #0]
 800bb02:	2500      	movs	r5, #0
 800bb04:	e7f8      	b.n	800baf8 <_calloc_r+0x16>
 800bb06:	4621      	mov	r1, r4
 800bb08:	f7fc f86c 	bl	8007be4 <memset>
 800bb0c:	e7f4      	b.n	800baf8 <_calloc_r+0x16>
	...

0800bb10 <_free_r>:
 800bb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb12:	2900      	cmp	r1, #0
 800bb14:	d044      	beq.n	800bba0 <_free_r+0x90>
 800bb16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb1a:	9001      	str	r0, [sp, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb22:	bfb8      	it	lt
 800bb24:	18e4      	addlt	r4, r4, r3
 800bb26:	f000 fb4b 	bl	800c1c0 <__malloc_lock>
 800bb2a:	4a1e      	ldr	r2, [pc, #120]	; (800bba4 <_free_r+0x94>)
 800bb2c:	9801      	ldr	r0, [sp, #4]
 800bb2e:	6813      	ldr	r3, [r2, #0]
 800bb30:	b933      	cbnz	r3, 800bb40 <_free_r+0x30>
 800bb32:	6063      	str	r3, [r4, #4]
 800bb34:	6014      	str	r4, [r2, #0]
 800bb36:	b003      	add	sp, #12
 800bb38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb3c:	f000 bb46 	b.w	800c1cc <__malloc_unlock>
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	d908      	bls.n	800bb56 <_free_r+0x46>
 800bb44:	6825      	ldr	r5, [r4, #0]
 800bb46:	1961      	adds	r1, r4, r5
 800bb48:	428b      	cmp	r3, r1
 800bb4a:	bf01      	itttt	eq
 800bb4c:	6819      	ldreq	r1, [r3, #0]
 800bb4e:	685b      	ldreq	r3, [r3, #4]
 800bb50:	1949      	addeq	r1, r1, r5
 800bb52:	6021      	streq	r1, [r4, #0]
 800bb54:	e7ed      	b.n	800bb32 <_free_r+0x22>
 800bb56:	461a      	mov	r2, r3
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	b10b      	cbz	r3, 800bb60 <_free_r+0x50>
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d9fa      	bls.n	800bb56 <_free_r+0x46>
 800bb60:	6811      	ldr	r1, [r2, #0]
 800bb62:	1855      	adds	r5, r2, r1
 800bb64:	42a5      	cmp	r5, r4
 800bb66:	d10b      	bne.n	800bb80 <_free_r+0x70>
 800bb68:	6824      	ldr	r4, [r4, #0]
 800bb6a:	4421      	add	r1, r4
 800bb6c:	1854      	adds	r4, r2, r1
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	6011      	str	r1, [r2, #0]
 800bb72:	d1e0      	bne.n	800bb36 <_free_r+0x26>
 800bb74:	681c      	ldr	r4, [r3, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	6053      	str	r3, [r2, #4]
 800bb7a:	4421      	add	r1, r4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	e7da      	b.n	800bb36 <_free_r+0x26>
 800bb80:	d902      	bls.n	800bb88 <_free_r+0x78>
 800bb82:	230c      	movs	r3, #12
 800bb84:	6003      	str	r3, [r0, #0]
 800bb86:	e7d6      	b.n	800bb36 <_free_r+0x26>
 800bb88:	6825      	ldr	r5, [r4, #0]
 800bb8a:	1961      	adds	r1, r4, r5
 800bb8c:	428b      	cmp	r3, r1
 800bb8e:	bf04      	itt	eq
 800bb90:	6819      	ldreq	r1, [r3, #0]
 800bb92:	685b      	ldreq	r3, [r3, #4]
 800bb94:	6063      	str	r3, [r4, #4]
 800bb96:	bf04      	itt	eq
 800bb98:	1949      	addeq	r1, r1, r5
 800bb9a:	6021      	streq	r1, [r4, #0]
 800bb9c:	6054      	str	r4, [r2, #4]
 800bb9e:	e7ca      	b.n	800bb36 <_free_r+0x26>
 800bba0:	b003      	add	sp, #12
 800bba2:	bd30      	pop	{r4, r5, pc}
 800bba4:	2000265c 	.word	0x2000265c

0800bba8 <sbrk_aligned>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	4e0e      	ldr	r6, [pc, #56]	; (800bbe4 <sbrk_aligned+0x3c>)
 800bbac:	460c      	mov	r4, r1
 800bbae:	6831      	ldr	r1, [r6, #0]
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	b911      	cbnz	r1, 800bbba <sbrk_aligned+0x12>
 800bbb4:	f000 f9f0 	bl	800bf98 <_sbrk_r>
 800bbb8:	6030      	str	r0, [r6, #0]
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f000 f9eb 	bl	800bf98 <_sbrk_r>
 800bbc2:	1c43      	adds	r3, r0, #1
 800bbc4:	d00a      	beq.n	800bbdc <sbrk_aligned+0x34>
 800bbc6:	1cc4      	adds	r4, r0, #3
 800bbc8:	f024 0403 	bic.w	r4, r4, #3
 800bbcc:	42a0      	cmp	r0, r4
 800bbce:	d007      	beq.n	800bbe0 <sbrk_aligned+0x38>
 800bbd0:	1a21      	subs	r1, r4, r0
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f000 f9e0 	bl	800bf98 <_sbrk_r>
 800bbd8:	3001      	adds	r0, #1
 800bbda:	d101      	bne.n	800bbe0 <sbrk_aligned+0x38>
 800bbdc:	f04f 34ff 	mov.w	r4, #4294967295
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}
 800bbe4:	20002660 	.word	0x20002660

0800bbe8 <_malloc_r>:
 800bbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbec:	1ccd      	adds	r5, r1, #3
 800bbee:	f025 0503 	bic.w	r5, r5, #3
 800bbf2:	3508      	adds	r5, #8
 800bbf4:	2d0c      	cmp	r5, #12
 800bbf6:	bf38      	it	cc
 800bbf8:	250c      	movcc	r5, #12
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	4607      	mov	r7, r0
 800bbfe:	db01      	blt.n	800bc04 <_malloc_r+0x1c>
 800bc00:	42a9      	cmp	r1, r5
 800bc02:	d905      	bls.n	800bc10 <_malloc_r+0x28>
 800bc04:	230c      	movs	r3, #12
 800bc06:	603b      	str	r3, [r7, #0]
 800bc08:	2600      	movs	r6, #0
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc10:	4e2e      	ldr	r6, [pc, #184]	; (800bccc <_malloc_r+0xe4>)
 800bc12:	f000 fad5 	bl	800c1c0 <__malloc_lock>
 800bc16:	6833      	ldr	r3, [r6, #0]
 800bc18:	461c      	mov	r4, r3
 800bc1a:	bb34      	cbnz	r4, 800bc6a <_malloc_r+0x82>
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f7ff ffc2 	bl	800bba8 <sbrk_aligned>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	4604      	mov	r4, r0
 800bc28:	d14d      	bne.n	800bcc6 <_malloc_r+0xde>
 800bc2a:	6834      	ldr	r4, [r6, #0]
 800bc2c:	4626      	mov	r6, r4
 800bc2e:	2e00      	cmp	r6, #0
 800bc30:	d140      	bne.n	800bcb4 <_malloc_r+0xcc>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	4631      	mov	r1, r6
 800bc36:	4638      	mov	r0, r7
 800bc38:	eb04 0803 	add.w	r8, r4, r3
 800bc3c:	f000 f9ac 	bl	800bf98 <_sbrk_r>
 800bc40:	4580      	cmp	r8, r0
 800bc42:	d13a      	bne.n	800bcba <_malloc_r+0xd2>
 800bc44:	6821      	ldr	r1, [r4, #0]
 800bc46:	3503      	adds	r5, #3
 800bc48:	1a6d      	subs	r5, r5, r1
 800bc4a:	f025 0503 	bic.w	r5, r5, #3
 800bc4e:	3508      	adds	r5, #8
 800bc50:	2d0c      	cmp	r5, #12
 800bc52:	bf38      	it	cc
 800bc54:	250c      	movcc	r5, #12
 800bc56:	4629      	mov	r1, r5
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ffa5 	bl	800bba8 <sbrk_aligned>
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d02b      	beq.n	800bcba <_malloc_r+0xd2>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	442b      	add	r3, r5
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	e00e      	b.n	800bc88 <_malloc_r+0xa0>
 800bc6a:	6822      	ldr	r2, [r4, #0]
 800bc6c:	1b52      	subs	r2, r2, r5
 800bc6e:	d41e      	bmi.n	800bcae <_malloc_r+0xc6>
 800bc70:	2a0b      	cmp	r2, #11
 800bc72:	d916      	bls.n	800bca2 <_malloc_r+0xba>
 800bc74:	1961      	adds	r1, r4, r5
 800bc76:	42a3      	cmp	r3, r4
 800bc78:	6025      	str	r5, [r4, #0]
 800bc7a:	bf18      	it	ne
 800bc7c:	6059      	strne	r1, [r3, #4]
 800bc7e:	6863      	ldr	r3, [r4, #4]
 800bc80:	bf08      	it	eq
 800bc82:	6031      	streq	r1, [r6, #0]
 800bc84:	5162      	str	r2, [r4, r5]
 800bc86:	604b      	str	r3, [r1, #4]
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f104 060b 	add.w	r6, r4, #11
 800bc8e:	f000 fa9d 	bl	800c1cc <__malloc_unlock>
 800bc92:	f026 0607 	bic.w	r6, r6, #7
 800bc96:	1d23      	adds	r3, r4, #4
 800bc98:	1af2      	subs	r2, r6, r3
 800bc9a:	d0b6      	beq.n	800bc0a <_malloc_r+0x22>
 800bc9c:	1b9b      	subs	r3, r3, r6
 800bc9e:	50a3      	str	r3, [r4, r2]
 800bca0:	e7b3      	b.n	800bc0a <_malloc_r+0x22>
 800bca2:	6862      	ldr	r2, [r4, #4]
 800bca4:	42a3      	cmp	r3, r4
 800bca6:	bf0c      	ite	eq
 800bca8:	6032      	streq	r2, [r6, #0]
 800bcaa:	605a      	strne	r2, [r3, #4]
 800bcac:	e7ec      	b.n	800bc88 <_malloc_r+0xa0>
 800bcae:	4623      	mov	r3, r4
 800bcb0:	6864      	ldr	r4, [r4, #4]
 800bcb2:	e7b2      	b.n	800bc1a <_malloc_r+0x32>
 800bcb4:	4634      	mov	r4, r6
 800bcb6:	6876      	ldr	r6, [r6, #4]
 800bcb8:	e7b9      	b.n	800bc2e <_malloc_r+0x46>
 800bcba:	230c      	movs	r3, #12
 800bcbc:	603b      	str	r3, [r7, #0]
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	f000 fa84 	bl	800c1cc <__malloc_unlock>
 800bcc4:	e7a1      	b.n	800bc0a <_malloc_r+0x22>
 800bcc6:	6025      	str	r5, [r4, #0]
 800bcc8:	e7de      	b.n	800bc88 <_malloc_r+0xa0>
 800bcca:	bf00      	nop
 800bccc:	2000265c 	.word	0x2000265c

0800bcd0 <__ssputs_r>:
 800bcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd4:	688e      	ldr	r6, [r1, #8]
 800bcd6:	429e      	cmp	r6, r3
 800bcd8:	4682      	mov	sl, r0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	4690      	mov	r8, r2
 800bcde:	461f      	mov	r7, r3
 800bce0:	d838      	bhi.n	800bd54 <__ssputs_r+0x84>
 800bce2:	898a      	ldrh	r2, [r1, #12]
 800bce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bce8:	d032      	beq.n	800bd50 <__ssputs_r+0x80>
 800bcea:	6825      	ldr	r5, [r4, #0]
 800bcec:	6909      	ldr	r1, [r1, #16]
 800bcee:	eba5 0901 	sub.w	r9, r5, r1
 800bcf2:	6965      	ldr	r5, [r4, #20]
 800bcf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	444b      	add	r3, r9
 800bd00:	106d      	asrs	r5, r5, #1
 800bd02:	429d      	cmp	r5, r3
 800bd04:	bf38      	it	cc
 800bd06:	461d      	movcc	r5, r3
 800bd08:	0553      	lsls	r3, r2, #21
 800bd0a:	d531      	bpl.n	800bd70 <__ssputs_r+0xa0>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	f7ff ff6b 	bl	800bbe8 <_malloc_r>
 800bd12:	4606      	mov	r6, r0
 800bd14:	b950      	cbnz	r0, 800bd2c <__ssputs_r+0x5c>
 800bd16:	230c      	movs	r3, #12
 800bd18:	f8ca 3000 	str.w	r3, [sl]
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd22:	81a3      	strh	r3, [r4, #12]
 800bd24:	f04f 30ff 	mov.w	r0, #4294967295
 800bd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2c:	6921      	ldr	r1, [r4, #16]
 800bd2e:	464a      	mov	r2, r9
 800bd30:	f7ff fa08 	bl	800b144 <memcpy>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	6126      	str	r6, [r4, #16]
 800bd42:	6165      	str	r5, [r4, #20]
 800bd44:	444e      	add	r6, r9
 800bd46:	eba5 0509 	sub.w	r5, r5, r9
 800bd4a:	6026      	str	r6, [r4, #0]
 800bd4c:	60a5      	str	r5, [r4, #8]
 800bd4e:	463e      	mov	r6, r7
 800bd50:	42be      	cmp	r6, r7
 800bd52:	d900      	bls.n	800bd56 <__ssputs_r+0x86>
 800bd54:	463e      	mov	r6, r7
 800bd56:	6820      	ldr	r0, [r4, #0]
 800bd58:	4632      	mov	r2, r6
 800bd5a:	4641      	mov	r1, r8
 800bd5c:	f000 fa16 	bl	800c18c <memmove>
 800bd60:	68a3      	ldr	r3, [r4, #8]
 800bd62:	1b9b      	subs	r3, r3, r6
 800bd64:	60a3      	str	r3, [r4, #8]
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	4433      	add	r3, r6
 800bd6a:	6023      	str	r3, [r4, #0]
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e7db      	b.n	800bd28 <__ssputs_r+0x58>
 800bd70:	462a      	mov	r2, r5
 800bd72:	f000 fa31 	bl	800c1d8 <_realloc_r>
 800bd76:	4606      	mov	r6, r0
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d1e1      	bne.n	800bd40 <__ssputs_r+0x70>
 800bd7c:	6921      	ldr	r1, [r4, #16]
 800bd7e:	4650      	mov	r0, sl
 800bd80:	f7ff fec6 	bl	800bb10 <_free_r>
 800bd84:	e7c7      	b.n	800bd16 <__ssputs_r+0x46>
	...

0800bd88 <_svfiprintf_r>:
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	4698      	mov	r8, r3
 800bd8e:	898b      	ldrh	r3, [r1, #12]
 800bd90:	061b      	lsls	r3, r3, #24
 800bd92:	b09d      	sub	sp, #116	; 0x74
 800bd94:	4607      	mov	r7, r0
 800bd96:	460d      	mov	r5, r1
 800bd98:	4614      	mov	r4, r2
 800bd9a:	d50e      	bpl.n	800bdba <_svfiprintf_r+0x32>
 800bd9c:	690b      	ldr	r3, [r1, #16]
 800bd9e:	b963      	cbnz	r3, 800bdba <_svfiprintf_r+0x32>
 800bda0:	2140      	movs	r1, #64	; 0x40
 800bda2:	f7ff ff21 	bl	800bbe8 <_malloc_r>
 800bda6:	6028      	str	r0, [r5, #0]
 800bda8:	6128      	str	r0, [r5, #16]
 800bdaa:	b920      	cbnz	r0, 800bdb6 <_svfiprintf_r+0x2e>
 800bdac:	230c      	movs	r3, #12
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb4:	e0d1      	b.n	800bf5a <_svfiprintf_r+0x1d2>
 800bdb6:	2340      	movs	r3, #64	; 0x40
 800bdb8:	616b      	str	r3, [r5, #20]
 800bdba:	2300      	movs	r3, #0
 800bdbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdbe:	2320      	movs	r3, #32
 800bdc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdc8:	2330      	movs	r3, #48	; 0x30
 800bdca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf74 <_svfiprintf_r+0x1ec>
 800bdce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdd2:	f04f 0901 	mov.w	r9, #1
 800bdd6:	4623      	mov	r3, r4
 800bdd8:	469a      	mov	sl, r3
 800bdda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdde:	b10a      	cbz	r2, 800bde4 <_svfiprintf_r+0x5c>
 800bde0:	2a25      	cmp	r2, #37	; 0x25
 800bde2:	d1f9      	bne.n	800bdd8 <_svfiprintf_r+0x50>
 800bde4:	ebba 0b04 	subs.w	fp, sl, r4
 800bde8:	d00b      	beq.n	800be02 <_svfiprintf_r+0x7a>
 800bdea:	465b      	mov	r3, fp
 800bdec:	4622      	mov	r2, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f7ff ff6d 	bl	800bcd0 <__ssputs_r>
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	f000 80aa 	beq.w	800bf50 <_svfiprintf_r+0x1c8>
 800bdfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdfe:	445a      	add	r2, fp
 800be00:	9209      	str	r2, [sp, #36]	; 0x24
 800be02:	f89a 3000 	ldrb.w	r3, [sl]
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 80a2 	beq.w	800bf50 <_svfiprintf_r+0x1c8>
 800be0c:	2300      	movs	r3, #0
 800be0e:	f04f 32ff 	mov.w	r2, #4294967295
 800be12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be16:	f10a 0a01 	add.w	sl, sl, #1
 800be1a:	9304      	str	r3, [sp, #16]
 800be1c:	9307      	str	r3, [sp, #28]
 800be1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be22:	931a      	str	r3, [sp, #104]	; 0x68
 800be24:	4654      	mov	r4, sl
 800be26:	2205      	movs	r2, #5
 800be28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2c:	4851      	ldr	r0, [pc, #324]	; (800bf74 <_svfiprintf_r+0x1ec>)
 800be2e:	f7f4 f9f7 	bl	8000220 <memchr>
 800be32:	9a04      	ldr	r2, [sp, #16]
 800be34:	b9d8      	cbnz	r0, 800be6e <_svfiprintf_r+0xe6>
 800be36:	06d0      	lsls	r0, r2, #27
 800be38:	bf44      	itt	mi
 800be3a:	2320      	movmi	r3, #32
 800be3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be40:	0711      	lsls	r1, r2, #28
 800be42:	bf44      	itt	mi
 800be44:	232b      	movmi	r3, #43	; 0x2b
 800be46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be4a:	f89a 3000 	ldrb.w	r3, [sl]
 800be4e:	2b2a      	cmp	r3, #42	; 0x2a
 800be50:	d015      	beq.n	800be7e <_svfiprintf_r+0xf6>
 800be52:	9a07      	ldr	r2, [sp, #28]
 800be54:	4654      	mov	r4, sl
 800be56:	2000      	movs	r0, #0
 800be58:	f04f 0c0a 	mov.w	ip, #10
 800be5c:	4621      	mov	r1, r4
 800be5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be62:	3b30      	subs	r3, #48	; 0x30
 800be64:	2b09      	cmp	r3, #9
 800be66:	d94e      	bls.n	800bf06 <_svfiprintf_r+0x17e>
 800be68:	b1b0      	cbz	r0, 800be98 <_svfiprintf_r+0x110>
 800be6a:	9207      	str	r2, [sp, #28]
 800be6c:	e014      	b.n	800be98 <_svfiprintf_r+0x110>
 800be6e:	eba0 0308 	sub.w	r3, r0, r8
 800be72:	fa09 f303 	lsl.w	r3, r9, r3
 800be76:	4313      	orrs	r3, r2
 800be78:	9304      	str	r3, [sp, #16]
 800be7a:	46a2      	mov	sl, r4
 800be7c:	e7d2      	b.n	800be24 <_svfiprintf_r+0x9c>
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	1d19      	adds	r1, r3, #4
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	9103      	str	r1, [sp, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	bfbb      	ittet	lt
 800be8a:	425b      	neglt	r3, r3
 800be8c:	f042 0202 	orrlt.w	r2, r2, #2
 800be90:	9307      	strge	r3, [sp, #28]
 800be92:	9307      	strlt	r3, [sp, #28]
 800be94:	bfb8      	it	lt
 800be96:	9204      	strlt	r2, [sp, #16]
 800be98:	7823      	ldrb	r3, [r4, #0]
 800be9a:	2b2e      	cmp	r3, #46	; 0x2e
 800be9c:	d10c      	bne.n	800beb8 <_svfiprintf_r+0x130>
 800be9e:	7863      	ldrb	r3, [r4, #1]
 800bea0:	2b2a      	cmp	r3, #42	; 0x2a
 800bea2:	d135      	bne.n	800bf10 <_svfiprintf_r+0x188>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	1d1a      	adds	r2, r3, #4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	9203      	str	r2, [sp, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	bfb8      	it	lt
 800beb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800beb4:	3402      	adds	r4, #2
 800beb6:	9305      	str	r3, [sp, #20]
 800beb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf84 <_svfiprintf_r+0x1fc>
 800bebc:	7821      	ldrb	r1, [r4, #0]
 800bebe:	2203      	movs	r2, #3
 800bec0:	4650      	mov	r0, sl
 800bec2:	f7f4 f9ad 	bl	8000220 <memchr>
 800bec6:	b140      	cbz	r0, 800beda <_svfiprintf_r+0x152>
 800bec8:	2340      	movs	r3, #64	; 0x40
 800beca:	eba0 000a 	sub.w	r0, r0, sl
 800bece:	fa03 f000 	lsl.w	r0, r3, r0
 800bed2:	9b04      	ldr	r3, [sp, #16]
 800bed4:	4303      	orrs	r3, r0
 800bed6:	3401      	adds	r4, #1
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bede:	4826      	ldr	r0, [pc, #152]	; (800bf78 <_svfiprintf_r+0x1f0>)
 800bee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bee4:	2206      	movs	r2, #6
 800bee6:	f7f4 f99b 	bl	8000220 <memchr>
 800beea:	2800      	cmp	r0, #0
 800beec:	d038      	beq.n	800bf60 <_svfiprintf_r+0x1d8>
 800beee:	4b23      	ldr	r3, [pc, #140]	; (800bf7c <_svfiprintf_r+0x1f4>)
 800bef0:	bb1b      	cbnz	r3, 800bf3a <_svfiprintf_r+0x1b2>
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	3307      	adds	r3, #7
 800bef6:	f023 0307 	bic.w	r3, r3, #7
 800befa:	3308      	adds	r3, #8
 800befc:	9303      	str	r3, [sp, #12]
 800befe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf00:	4433      	add	r3, r6
 800bf02:	9309      	str	r3, [sp, #36]	; 0x24
 800bf04:	e767      	b.n	800bdd6 <_svfiprintf_r+0x4e>
 800bf06:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	e7a5      	b.n	800be5c <_svfiprintf_r+0xd4>
 800bf10:	2300      	movs	r3, #0
 800bf12:	3401      	adds	r4, #1
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	4619      	mov	r1, r3
 800bf18:	f04f 0c0a 	mov.w	ip, #10
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf22:	3a30      	subs	r2, #48	; 0x30
 800bf24:	2a09      	cmp	r2, #9
 800bf26:	d903      	bls.n	800bf30 <_svfiprintf_r+0x1a8>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d0c5      	beq.n	800beb8 <_svfiprintf_r+0x130>
 800bf2c:	9105      	str	r1, [sp, #20]
 800bf2e:	e7c3      	b.n	800beb8 <_svfiprintf_r+0x130>
 800bf30:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf34:	4604      	mov	r4, r0
 800bf36:	2301      	movs	r3, #1
 800bf38:	e7f0      	b.n	800bf1c <_svfiprintf_r+0x194>
 800bf3a:	ab03      	add	r3, sp, #12
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	462a      	mov	r2, r5
 800bf40:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <_svfiprintf_r+0x1f8>)
 800bf42:	a904      	add	r1, sp, #16
 800bf44:	4638      	mov	r0, r7
 800bf46:	f7fb fef5 	bl	8007d34 <_printf_float>
 800bf4a:	1c42      	adds	r2, r0, #1
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	d1d6      	bne.n	800befe <_svfiprintf_r+0x176>
 800bf50:	89ab      	ldrh	r3, [r5, #12]
 800bf52:	065b      	lsls	r3, r3, #25
 800bf54:	f53f af2c 	bmi.w	800bdb0 <_svfiprintf_r+0x28>
 800bf58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf5a:	b01d      	add	sp, #116	; 0x74
 800bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf60:	ab03      	add	r3, sp, #12
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	462a      	mov	r2, r5
 800bf66:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <_svfiprintf_r+0x1f8>)
 800bf68:	a904      	add	r1, sp, #16
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	f7fc f986 	bl	800827c <_printf_i>
 800bf70:	e7eb      	b.n	800bf4a <_svfiprintf_r+0x1c2>
 800bf72:	bf00      	nop
 800bf74:	0800cf54 	.word	0x0800cf54
 800bf78:	0800cf5e 	.word	0x0800cf5e
 800bf7c:	08007d35 	.word	0x08007d35
 800bf80:	0800bcd1 	.word	0x0800bcd1
 800bf84:	0800cf5a 	.word	0x0800cf5a

0800bf88 <nan>:
 800bf88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf90 <nan+0x8>
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	00000000 	.word	0x00000000
 800bf94:	7ff80000 	.word	0x7ff80000

0800bf98 <_sbrk_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d06      	ldr	r5, [pc, #24]	; (800bfb4 <_sbrk_r+0x1c>)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7f6 f9f2 	bl	800238c <_sbrk>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_sbrk_r+0x1a>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_sbrk_r+0x1a>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	20002664 	.word	0x20002664

0800bfb8 <__sread>:
 800bfb8:	b510      	push	{r4, lr}
 800bfba:	460c      	mov	r4, r1
 800bfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc0:	f000 fa92 	bl	800c4e8 <_read_r>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	bfab      	itete	ge
 800bfc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfca:	89a3      	ldrhlt	r3, [r4, #12]
 800bfcc:	181b      	addge	r3, r3, r0
 800bfce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfd2:	bfac      	ite	ge
 800bfd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfd6:	81a3      	strhlt	r3, [r4, #12]
 800bfd8:	bd10      	pop	{r4, pc}

0800bfda <__swrite>:
 800bfda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfde:	461f      	mov	r7, r3
 800bfe0:	898b      	ldrh	r3, [r1, #12]
 800bfe2:	05db      	lsls	r3, r3, #23
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	4616      	mov	r6, r2
 800bfea:	d505      	bpl.n	800bff8 <__swrite+0x1e>
 800bfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff0:	2302      	movs	r3, #2
 800bff2:	2200      	movs	r2, #0
 800bff4:	f000 f8b8 	bl	800c168 <_lseek_r>
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	4632      	mov	r2, r6
 800c006:	463b      	mov	r3, r7
 800c008:	4628      	mov	r0, r5
 800c00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c00e:	f000 b837 	b.w	800c080 <_write_r>

0800c012 <__sseek>:
 800c012:	b510      	push	{r4, lr}
 800c014:	460c      	mov	r4, r1
 800c016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01a:	f000 f8a5 	bl	800c168 <_lseek_r>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	bf15      	itete	ne
 800c024:	6560      	strne	r0, [r4, #84]	; 0x54
 800c026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c02a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c02e:	81a3      	strheq	r3, [r4, #12]
 800c030:	bf18      	it	ne
 800c032:	81a3      	strhne	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__sclose>:
 800c036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c03a:	f000 b851 	b.w	800c0e0 <_close_r>

0800c03e <strncmp>:
 800c03e:	b510      	push	{r4, lr}
 800c040:	b17a      	cbz	r2, 800c062 <strncmp+0x24>
 800c042:	4603      	mov	r3, r0
 800c044:	3901      	subs	r1, #1
 800c046:	1884      	adds	r4, r0, r2
 800c048:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c04c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c050:	4290      	cmp	r0, r2
 800c052:	d101      	bne.n	800c058 <strncmp+0x1a>
 800c054:	42a3      	cmp	r3, r4
 800c056:	d101      	bne.n	800c05c <strncmp+0x1e>
 800c058:	1a80      	subs	r0, r0, r2
 800c05a:	bd10      	pop	{r4, pc}
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d1f3      	bne.n	800c048 <strncmp+0xa>
 800c060:	e7fa      	b.n	800c058 <strncmp+0x1a>
 800c062:	4610      	mov	r0, r2
 800c064:	e7f9      	b.n	800c05a <strncmp+0x1c>

0800c066 <__ascii_wctomb>:
 800c066:	b149      	cbz	r1, 800c07c <__ascii_wctomb+0x16>
 800c068:	2aff      	cmp	r2, #255	; 0xff
 800c06a:	bf85      	ittet	hi
 800c06c:	238a      	movhi	r3, #138	; 0x8a
 800c06e:	6003      	strhi	r3, [r0, #0]
 800c070:	700a      	strbls	r2, [r1, #0]
 800c072:	f04f 30ff 	movhi.w	r0, #4294967295
 800c076:	bf98      	it	ls
 800c078:	2001      	movls	r0, #1
 800c07a:	4770      	bx	lr
 800c07c:	4608      	mov	r0, r1
 800c07e:	4770      	bx	lr

0800c080 <_write_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d07      	ldr	r5, [pc, #28]	; (800c0a0 <_write_r+0x20>)
 800c084:	4604      	mov	r4, r0
 800c086:	4608      	mov	r0, r1
 800c088:	4611      	mov	r1, r2
 800c08a:	2200      	movs	r2, #0
 800c08c:	602a      	str	r2, [r5, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	f7f5 ff90 	bl	8001fb4 <_write>
 800c094:	1c43      	adds	r3, r0, #1
 800c096:	d102      	bne.n	800c09e <_write_r+0x1e>
 800c098:	682b      	ldr	r3, [r5, #0]
 800c09a:	b103      	cbz	r3, 800c09e <_write_r+0x1e>
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	bd38      	pop	{r3, r4, r5, pc}
 800c0a0:	20002664 	.word	0x20002664

0800c0a4 <__assert_func>:
 800c0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0a6:	4614      	mov	r4, r2
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <__assert_func+0x2c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	68d8      	ldr	r0, [r3, #12]
 800c0b2:	b14c      	cbz	r4, 800c0c8 <__assert_func+0x24>
 800c0b4:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <__assert_func+0x30>)
 800c0b6:	9100      	str	r1, [sp, #0]
 800c0b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0bc:	4906      	ldr	r1, [pc, #24]	; (800c0d8 <__assert_func+0x34>)
 800c0be:	462b      	mov	r3, r5
 800c0c0:	f000 f81e 	bl	800c100 <fiprintf>
 800c0c4:	f000 fa22 	bl	800c50c <abort>
 800c0c8:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <__assert_func+0x38>)
 800c0ca:	461c      	mov	r4, r3
 800c0cc:	e7f3      	b.n	800c0b6 <__assert_func+0x12>
 800c0ce:	bf00      	nop
 800c0d0:	20000024 	.word	0x20000024
 800c0d4:	0800cf65 	.word	0x0800cf65
 800c0d8:	0800cf72 	.word	0x0800cf72
 800c0dc:	0800cfa0 	.word	0x0800cfa0

0800c0e0 <_close_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d06      	ldr	r5, [pc, #24]	; (800c0fc <_close_r+0x1c>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	602b      	str	r3, [r5, #0]
 800c0ec:	f7f6 f91a 	bl	8002324 <_close>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d102      	bne.n	800c0fa <_close_r+0x1a>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	b103      	cbz	r3, 800c0fa <_close_r+0x1a>
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	20002664 	.word	0x20002664

0800c100 <fiprintf>:
 800c100:	b40e      	push	{r1, r2, r3}
 800c102:	b503      	push	{r0, r1, lr}
 800c104:	4601      	mov	r1, r0
 800c106:	ab03      	add	r3, sp, #12
 800c108:	4805      	ldr	r0, [pc, #20]	; (800c120 <fiprintf+0x20>)
 800c10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10e:	6800      	ldr	r0, [r0, #0]
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	f000 f8b9 	bl	800c288 <_vfiprintf_r>
 800c116:	b002      	add	sp, #8
 800c118:	f85d eb04 	ldr.w	lr, [sp], #4
 800c11c:	b003      	add	sp, #12
 800c11e:	4770      	bx	lr
 800c120:	20000024 	.word	0x20000024

0800c124 <_fstat_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d07      	ldr	r5, [pc, #28]	; (800c144 <_fstat_r+0x20>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	4611      	mov	r1, r2
 800c130:	602b      	str	r3, [r5, #0]
 800c132:	f7f6 f903 	bl	800233c <_fstat>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d102      	bne.n	800c140 <_fstat_r+0x1c>
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	b103      	cbz	r3, 800c140 <_fstat_r+0x1c>
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	bd38      	pop	{r3, r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	20002664 	.word	0x20002664

0800c148 <_isatty_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4d06      	ldr	r5, [pc, #24]	; (800c164 <_isatty_r+0x1c>)
 800c14c:	2300      	movs	r3, #0
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	602b      	str	r3, [r5, #0]
 800c154:	f7f6 f902 	bl	800235c <_isatty>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_isatty_r+0x1a>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_isatty_r+0x1a>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	20002664 	.word	0x20002664

0800c168 <_lseek_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	; (800c188 <_lseek_r+0x20>)
 800c16c:	4604      	mov	r4, r0
 800c16e:	4608      	mov	r0, r1
 800c170:	4611      	mov	r1, r2
 800c172:	2200      	movs	r2, #0
 800c174:	602a      	str	r2, [r5, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	f7f6 f8fb 	bl	8002372 <_lseek>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_lseek_r+0x1e>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_lseek_r+0x1e>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	20002664 	.word	0x20002664

0800c18c <memmove>:
 800c18c:	4288      	cmp	r0, r1
 800c18e:	b510      	push	{r4, lr}
 800c190:	eb01 0402 	add.w	r4, r1, r2
 800c194:	d902      	bls.n	800c19c <memmove+0x10>
 800c196:	4284      	cmp	r4, r0
 800c198:	4623      	mov	r3, r4
 800c19a:	d807      	bhi.n	800c1ac <memmove+0x20>
 800c19c:	1e43      	subs	r3, r0, #1
 800c19e:	42a1      	cmp	r1, r4
 800c1a0:	d008      	beq.n	800c1b4 <memmove+0x28>
 800c1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1aa:	e7f8      	b.n	800c19e <memmove+0x12>
 800c1ac:	4402      	add	r2, r0
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	428a      	cmp	r2, r1
 800c1b2:	d100      	bne.n	800c1b6 <memmove+0x2a>
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1be:	e7f7      	b.n	800c1b0 <memmove+0x24>

0800c1c0 <__malloc_lock>:
 800c1c0:	4801      	ldr	r0, [pc, #4]	; (800c1c8 <__malloc_lock+0x8>)
 800c1c2:	f7fe bf3e 	b.w	800b042 <__retarget_lock_acquire_recursive>
 800c1c6:	bf00      	nop
 800c1c8:	20002658 	.word	0x20002658

0800c1cc <__malloc_unlock>:
 800c1cc:	4801      	ldr	r0, [pc, #4]	; (800c1d4 <__malloc_unlock+0x8>)
 800c1ce:	f7fe bf39 	b.w	800b044 <__retarget_lock_release_recursive>
 800c1d2:	bf00      	nop
 800c1d4:	20002658 	.word	0x20002658

0800c1d8 <_realloc_r>:
 800c1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1dc:	4680      	mov	r8, r0
 800c1de:	4614      	mov	r4, r2
 800c1e0:	460e      	mov	r6, r1
 800c1e2:	b921      	cbnz	r1, 800c1ee <_realloc_r+0x16>
 800c1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	f7ff bcfd 	b.w	800bbe8 <_malloc_r>
 800c1ee:	b92a      	cbnz	r2, 800c1fc <_realloc_r+0x24>
 800c1f0:	f7ff fc8e 	bl	800bb10 <_free_r>
 800c1f4:	4625      	mov	r5, r4
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fc:	f000 f98d 	bl	800c51a <_malloc_usable_size_r>
 800c200:	4284      	cmp	r4, r0
 800c202:	4607      	mov	r7, r0
 800c204:	d802      	bhi.n	800c20c <_realloc_r+0x34>
 800c206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c20a:	d812      	bhi.n	800c232 <_realloc_r+0x5a>
 800c20c:	4621      	mov	r1, r4
 800c20e:	4640      	mov	r0, r8
 800c210:	f7ff fcea 	bl	800bbe8 <_malloc_r>
 800c214:	4605      	mov	r5, r0
 800c216:	2800      	cmp	r0, #0
 800c218:	d0ed      	beq.n	800c1f6 <_realloc_r+0x1e>
 800c21a:	42bc      	cmp	r4, r7
 800c21c:	4622      	mov	r2, r4
 800c21e:	4631      	mov	r1, r6
 800c220:	bf28      	it	cs
 800c222:	463a      	movcs	r2, r7
 800c224:	f7fe ff8e 	bl	800b144 <memcpy>
 800c228:	4631      	mov	r1, r6
 800c22a:	4640      	mov	r0, r8
 800c22c:	f7ff fc70 	bl	800bb10 <_free_r>
 800c230:	e7e1      	b.n	800c1f6 <_realloc_r+0x1e>
 800c232:	4635      	mov	r5, r6
 800c234:	e7df      	b.n	800c1f6 <_realloc_r+0x1e>

0800c236 <__sfputc_r>:
 800c236:	6893      	ldr	r3, [r2, #8]
 800c238:	3b01      	subs	r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	b410      	push	{r4}
 800c23e:	6093      	str	r3, [r2, #8]
 800c240:	da08      	bge.n	800c254 <__sfputc_r+0x1e>
 800c242:	6994      	ldr	r4, [r2, #24]
 800c244:	42a3      	cmp	r3, r4
 800c246:	db01      	blt.n	800c24c <__sfputc_r+0x16>
 800c248:	290a      	cmp	r1, #10
 800c24a:	d103      	bne.n	800c254 <__sfputc_r+0x1e>
 800c24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c250:	f7fd ba92 	b.w	8009778 <__swbuf_r>
 800c254:	6813      	ldr	r3, [r2, #0]
 800c256:	1c58      	adds	r0, r3, #1
 800c258:	6010      	str	r0, [r2, #0]
 800c25a:	7019      	strb	r1, [r3, #0]
 800c25c:	4608      	mov	r0, r1
 800c25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <__sfputs_r>:
 800c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c266:	4606      	mov	r6, r0
 800c268:	460f      	mov	r7, r1
 800c26a:	4614      	mov	r4, r2
 800c26c:	18d5      	adds	r5, r2, r3
 800c26e:	42ac      	cmp	r4, r5
 800c270:	d101      	bne.n	800c276 <__sfputs_r+0x12>
 800c272:	2000      	movs	r0, #0
 800c274:	e007      	b.n	800c286 <__sfputs_r+0x22>
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	463a      	mov	r2, r7
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff ffda 	bl	800c236 <__sfputc_r>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	d1f3      	bne.n	800c26e <__sfputs_r+0xa>
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c288 <_vfiprintf_r>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	460d      	mov	r5, r1
 800c28e:	b09d      	sub	sp, #116	; 0x74
 800c290:	4614      	mov	r4, r2
 800c292:	4698      	mov	r8, r3
 800c294:	4606      	mov	r6, r0
 800c296:	b118      	cbz	r0, 800c2a0 <_vfiprintf_r+0x18>
 800c298:	6983      	ldr	r3, [r0, #24]
 800c29a:	b90b      	cbnz	r3, 800c2a0 <_vfiprintf_r+0x18>
 800c29c:	f7fe fac0 	bl	800a820 <__sinit>
 800c2a0:	4b89      	ldr	r3, [pc, #548]	; (800c4c8 <_vfiprintf_r+0x240>)
 800c2a2:	429d      	cmp	r5, r3
 800c2a4:	d11b      	bne.n	800c2de <_vfiprintf_r+0x56>
 800c2a6:	6875      	ldr	r5, [r6, #4]
 800c2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2aa:	07d9      	lsls	r1, r3, #31
 800c2ac:	d405      	bmi.n	800c2ba <_vfiprintf_r+0x32>
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	059a      	lsls	r2, r3, #22
 800c2b2:	d402      	bmi.n	800c2ba <_vfiprintf_r+0x32>
 800c2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2b6:	f7fe fec4 	bl	800b042 <__retarget_lock_acquire_recursive>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	071b      	lsls	r3, r3, #28
 800c2be:	d501      	bpl.n	800c2c4 <_vfiprintf_r+0x3c>
 800c2c0:	692b      	ldr	r3, [r5, #16]
 800c2c2:	b9eb      	cbnz	r3, 800c300 <_vfiprintf_r+0x78>
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7fd faa8 	bl	800981c <__swsetup_r>
 800c2cc:	b1c0      	cbz	r0, 800c300 <_vfiprintf_r+0x78>
 800c2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d0:	07dc      	lsls	r4, r3, #31
 800c2d2:	d50e      	bpl.n	800c2f2 <_vfiprintf_r+0x6a>
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	b01d      	add	sp, #116	; 0x74
 800c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2de:	4b7b      	ldr	r3, [pc, #492]	; (800c4cc <_vfiprintf_r+0x244>)
 800c2e0:	429d      	cmp	r5, r3
 800c2e2:	d101      	bne.n	800c2e8 <_vfiprintf_r+0x60>
 800c2e4:	68b5      	ldr	r5, [r6, #8]
 800c2e6:	e7df      	b.n	800c2a8 <_vfiprintf_r+0x20>
 800c2e8:	4b79      	ldr	r3, [pc, #484]	; (800c4d0 <_vfiprintf_r+0x248>)
 800c2ea:	429d      	cmp	r5, r3
 800c2ec:	bf08      	it	eq
 800c2ee:	68f5      	ldreq	r5, [r6, #12]
 800c2f0:	e7da      	b.n	800c2a8 <_vfiprintf_r+0x20>
 800c2f2:	89ab      	ldrh	r3, [r5, #12]
 800c2f4:	0598      	lsls	r0, r3, #22
 800c2f6:	d4ed      	bmi.n	800c2d4 <_vfiprintf_r+0x4c>
 800c2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2fa:	f7fe fea3 	bl	800b044 <__retarget_lock_release_recursive>
 800c2fe:	e7e9      	b.n	800c2d4 <_vfiprintf_r+0x4c>
 800c300:	2300      	movs	r3, #0
 800c302:	9309      	str	r3, [sp, #36]	; 0x24
 800c304:	2320      	movs	r3, #32
 800c306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c30e:	2330      	movs	r3, #48	; 0x30
 800c310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4d4 <_vfiprintf_r+0x24c>
 800c314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c318:	f04f 0901 	mov.w	r9, #1
 800c31c:	4623      	mov	r3, r4
 800c31e:	469a      	mov	sl, r3
 800c320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c324:	b10a      	cbz	r2, 800c32a <_vfiprintf_r+0xa2>
 800c326:	2a25      	cmp	r2, #37	; 0x25
 800c328:	d1f9      	bne.n	800c31e <_vfiprintf_r+0x96>
 800c32a:	ebba 0b04 	subs.w	fp, sl, r4
 800c32e:	d00b      	beq.n	800c348 <_vfiprintf_r+0xc0>
 800c330:	465b      	mov	r3, fp
 800c332:	4622      	mov	r2, r4
 800c334:	4629      	mov	r1, r5
 800c336:	4630      	mov	r0, r6
 800c338:	f7ff ff94 	bl	800c264 <__sfputs_r>
 800c33c:	3001      	adds	r0, #1
 800c33e:	f000 80aa 	beq.w	800c496 <_vfiprintf_r+0x20e>
 800c342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c344:	445a      	add	r2, fp
 800c346:	9209      	str	r2, [sp, #36]	; 0x24
 800c348:	f89a 3000 	ldrb.w	r3, [sl]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 80a2 	beq.w	800c496 <_vfiprintf_r+0x20e>
 800c352:	2300      	movs	r3, #0
 800c354:	f04f 32ff 	mov.w	r2, #4294967295
 800c358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c35c:	f10a 0a01 	add.w	sl, sl, #1
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c368:	931a      	str	r3, [sp, #104]	; 0x68
 800c36a:	4654      	mov	r4, sl
 800c36c:	2205      	movs	r2, #5
 800c36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c372:	4858      	ldr	r0, [pc, #352]	; (800c4d4 <_vfiprintf_r+0x24c>)
 800c374:	f7f3 ff54 	bl	8000220 <memchr>
 800c378:	9a04      	ldr	r2, [sp, #16]
 800c37a:	b9d8      	cbnz	r0, 800c3b4 <_vfiprintf_r+0x12c>
 800c37c:	06d1      	lsls	r1, r2, #27
 800c37e:	bf44      	itt	mi
 800c380:	2320      	movmi	r3, #32
 800c382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c386:	0713      	lsls	r3, r2, #28
 800c388:	bf44      	itt	mi
 800c38a:	232b      	movmi	r3, #43	; 0x2b
 800c38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c390:	f89a 3000 	ldrb.w	r3, [sl]
 800c394:	2b2a      	cmp	r3, #42	; 0x2a
 800c396:	d015      	beq.n	800c3c4 <_vfiprintf_r+0x13c>
 800c398:	9a07      	ldr	r2, [sp, #28]
 800c39a:	4654      	mov	r4, sl
 800c39c:	2000      	movs	r0, #0
 800c39e:	f04f 0c0a 	mov.w	ip, #10
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3a8:	3b30      	subs	r3, #48	; 0x30
 800c3aa:	2b09      	cmp	r3, #9
 800c3ac:	d94e      	bls.n	800c44c <_vfiprintf_r+0x1c4>
 800c3ae:	b1b0      	cbz	r0, 800c3de <_vfiprintf_r+0x156>
 800c3b0:	9207      	str	r2, [sp, #28]
 800c3b2:	e014      	b.n	800c3de <_vfiprintf_r+0x156>
 800c3b4:	eba0 0308 	sub.w	r3, r0, r8
 800c3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	46a2      	mov	sl, r4
 800c3c2:	e7d2      	b.n	800c36a <_vfiprintf_r+0xe2>
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	1d19      	adds	r1, r3, #4
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	9103      	str	r1, [sp, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bfbb      	ittet	lt
 800c3d0:	425b      	neglt	r3, r3
 800c3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3d6:	9307      	strge	r3, [sp, #28]
 800c3d8:	9307      	strlt	r3, [sp, #28]
 800c3da:	bfb8      	it	lt
 800c3dc:	9204      	strlt	r2, [sp, #16]
 800c3de:	7823      	ldrb	r3, [r4, #0]
 800c3e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e2:	d10c      	bne.n	800c3fe <_vfiprintf_r+0x176>
 800c3e4:	7863      	ldrb	r3, [r4, #1]
 800c3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3e8:	d135      	bne.n	800c456 <_vfiprintf_r+0x1ce>
 800c3ea:	9b03      	ldr	r3, [sp, #12]
 800c3ec:	1d1a      	adds	r2, r3, #4
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	9203      	str	r2, [sp, #12]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bfb8      	it	lt
 800c3f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3fa:	3402      	adds	r4, #2
 800c3fc:	9305      	str	r3, [sp, #20]
 800c3fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4e4 <_vfiprintf_r+0x25c>
 800c402:	7821      	ldrb	r1, [r4, #0]
 800c404:	2203      	movs	r2, #3
 800c406:	4650      	mov	r0, sl
 800c408:	f7f3 ff0a 	bl	8000220 <memchr>
 800c40c:	b140      	cbz	r0, 800c420 <_vfiprintf_r+0x198>
 800c40e:	2340      	movs	r3, #64	; 0x40
 800c410:	eba0 000a 	sub.w	r0, r0, sl
 800c414:	fa03 f000 	lsl.w	r0, r3, r0
 800c418:	9b04      	ldr	r3, [sp, #16]
 800c41a:	4303      	orrs	r3, r0
 800c41c:	3401      	adds	r4, #1
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c424:	482c      	ldr	r0, [pc, #176]	; (800c4d8 <_vfiprintf_r+0x250>)
 800c426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c42a:	2206      	movs	r2, #6
 800c42c:	f7f3 fef8 	bl	8000220 <memchr>
 800c430:	2800      	cmp	r0, #0
 800c432:	d03f      	beq.n	800c4b4 <_vfiprintf_r+0x22c>
 800c434:	4b29      	ldr	r3, [pc, #164]	; (800c4dc <_vfiprintf_r+0x254>)
 800c436:	bb1b      	cbnz	r3, 800c480 <_vfiprintf_r+0x1f8>
 800c438:	9b03      	ldr	r3, [sp, #12]
 800c43a:	3307      	adds	r3, #7
 800c43c:	f023 0307 	bic.w	r3, r3, #7
 800c440:	3308      	adds	r3, #8
 800c442:	9303      	str	r3, [sp, #12]
 800c444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c446:	443b      	add	r3, r7
 800c448:	9309      	str	r3, [sp, #36]	; 0x24
 800c44a:	e767      	b.n	800c31c <_vfiprintf_r+0x94>
 800c44c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c450:	460c      	mov	r4, r1
 800c452:	2001      	movs	r0, #1
 800c454:	e7a5      	b.n	800c3a2 <_vfiprintf_r+0x11a>
 800c456:	2300      	movs	r3, #0
 800c458:	3401      	adds	r4, #1
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	4619      	mov	r1, r3
 800c45e:	f04f 0c0a 	mov.w	ip, #10
 800c462:	4620      	mov	r0, r4
 800c464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c468:	3a30      	subs	r2, #48	; 0x30
 800c46a:	2a09      	cmp	r2, #9
 800c46c:	d903      	bls.n	800c476 <_vfiprintf_r+0x1ee>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d0c5      	beq.n	800c3fe <_vfiprintf_r+0x176>
 800c472:	9105      	str	r1, [sp, #20]
 800c474:	e7c3      	b.n	800c3fe <_vfiprintf_r+0x176>
 800c476:	fb0c 2101 	mla	r1, ip, r1, r2
 800c47a:	4604      	mov	r4, r0
 800c47c:	2301      	movs	r3, #1
 800c47e:	e7f0      	b.n	800c462 <_vfiprintf_r+0x1da>
 800c480:	ab03      	add	r3, sp, #12
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	462a      	mov	r2, r5
 800c486:	4b16      	ldr	r3, [pc, #88]	; (800c4e0 <_vfiprintf_r+0x258>)
 800c488:	a904      	add	r1, sp, #16
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7fb fc52 	bl	8007d34 <_printf_float>
 800c490:	4607      	mov	r7, r0
 800c492:	1c78      	adds	r0, r7, #1
 800c494:	d1d6      	bne.n	800c444 <_vfiprintf_r+0x1bc>
 800c496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c498:	07d9      	lsls	r1, r3, #31
 800c49a:	d405      	bmi.n	800c4a8 <_vfiprintf_r+0x220>
 800c49c:	89ab      	ldrh	r3, [r5, #12]
 800c49e:	059a      	lsls	r2, r3, #22
 800c4a0:	d402      	bmi.n	800c4a8 <_vfiprintf_r+0x220>
 800c4a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4a4:	f7fe fdce 	bl	800b044 <__retarget_lock_release_recursive>
 800c4a8:	89ab      	ldrh	r3, [r5, #12]
 800c4aa:	065b      	lsls	r3, r3, #25
 800c4ac:	f53f af12 	bmi.w	800c2d4 <_vfiprintf_r+0x4c>
 800c4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4b2:	e711      	b.n	800c2d8 <_vfiprintf_r+0x50>
 800c4b4:	ab03      	add	r3, sp, #12
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	462a      	mov	r2, r5
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <_vfiprintf_r+0x258>)
 800c4bc:	a904      	add	r1, sp, #16
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7fb fedc 	bl	800827c <_printf_i>
 800c4c4:	e7e4      	b.n	800c490 <_vfiprintf_r+0x208>
 800c4c6:	bf00      	nop
 800c4c8:	0800cd3c 	.word	0x0800cd3c
 800c4cc:	0800cd5c 	.word	0x0800cd5c
 800c4d0:	0800cd1c 	.word	0x0800cd1c
 800c4d4:	0800cf54 	.word	0x0800cf54
 800c4d8:	0800cf5e 	.word	0x0800cf5e
 800c4dc:	08007d35 	.word	0x08007d35
 800c4e0:	0800c265 	.word	0x0800c265
 800c4e4:	0800cf5a 	.word	0x0800cf5a

0800c4e8 <_read_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	4d07      	ldr	r5, [pc, #28]	; (800c508 <_read_r+0x20>)
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	602a      	str	r2, [r5, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	f7f5 fef7 	bl	80022ea <_read>
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	d102      	bne.n	800c506 <_read_r+0x1e>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	b103      	cbz	r3, 800c506 <_read_r+0x1e>
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	bd38      	pop	{r3, r4, r5, pc}
 800c508:	20002664 	.word	0x20002664

0800c50c <abort>:
 800c50c:	b508      	push	{r3, lr}
 800c50e:	2006      	movs	r0, #6
 800c510:	f000 f834 	bl	800c57c <raise>
 800c514:	2001      	movs	r0, #1
 800c516:	f7f5 fede 	bl	80022d6 <_exit>

0800c51a <_malloc_usable_size_r>:
 800c51a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c51e:	1f18      	subs	r0, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	bfbc      	itt	lt
 800c524:	580b      	ldrlt	r3, [r1, r0]
 800c526:	18c0      	addlt	r0, r0, r3
 800c528:	4770      	bx	lr

0800c52a <_raise_r>:
 800c52a:	291f      	cmp	r1, #31
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4604      	mov	r4, r0
 800c530:	460d      	mov	r5, r1
 800c532:	d904      	bls.n	800c53e <_raise_r+0x14>
 800c534:	2316      	movs	r3, #22
 800c536:	6003      	str	r3, [r0, #0]
 800c538:	f04f 30ff 	mov.w	r0, #4294967295
 800c53c:	bd38      	pop	{r3, r4, r5, pc}
 800c53e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c540:	b112      	cbz	r2, 800c548 <_raise_r+0x1e>
 800c542:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c546:	b94b      	cbnz	r3, 800c55c <_raise_r+0x32>
 800c548:	4620      	mov	r0, r4
 800c54a:	f000 f831 	bl	800c5b0 <_getpid_r>
 800c54e:	462a      	mov	r2, r5
 800c550:	4601      	mov	r1, r0
 800c552:	4620      	mov	r0, r4
 800c554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c558:	f000 b818 	b.w	800c58c <_kill_r>
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d00a      	beq.n	800c576 <_raise_r+0x4c>
 800c560:	1c59      	adds	r1, r3, #1
 800c562:	d103      	bne.n	800c56c <_raise_r+0x42>
 800c564:	2316      	movs	r3, #22
 800c566:	6003      	str	r3, [r0, #0]
 800c568:	2001      	movs	r0, #1
 800c56a:	e7e7      	b.n	800c53c <_raise_r+0x12>
 800c56c:	2400      	movs	r4, #0
 800c56e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c572:	4628      	mov	r0, r5
 800c574:	4798      	blx	r3
 800c576:	2000      	movs	r0, #0
 800c578:	e7e0      	b.n	800c53c <_raise_r+0x12>
	...

0800c57c <raise>:
 800c57c:	4b02      	ldr	r3, [pc, #8]	; (800c588 <raise+0xc>)
 800c57e:	4601      	mov	r1, r0
 800c580:	6818      	ldr	r0, [r3, #0]
 800c582:	f7ff bfd2 	b.w	800c52a <_raise_r>
 800c586:	bf00      	nop
 800c588:	20000024 	.word	0x20000024

0800c58c <_kill_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d07      	ldr	r5, [pc, #28]	; (800c5ac <_kill_r+0x20>)
 800c590:	2300      	movs	r3, #0
 800c592:	4604      	mov	r4, r0
 800c594:	4608      	mov	r0, r1
 800c596:	4611      	mov	r1, r2
 800c598:	602b      	str	r3, [r5, #0]
 800c59a:	f7f5 fe8c 	bl	80022b6 <_kill>
 800c59e:	1c43      	adds	r3, r0, #1
 800c5a0:	d102      	bne.n	800c5a8 <_kill_r+0x1c>
 800c5a2:	682b      	ldr	r3, [r5, #0]
 800c5a4:	b103      	cbz	r3, 800c5a8 <_kill_r+0x1c>
 800c5a6:	6023      	str	r3, [r4, #0]
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20002664 	.word	0x20002664

0800c5b0 <_getpid_r>:
 800c5b0:	f7f5 be79 	b.w	80022a6 <_getpid>

0800c5b4 <_init>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	bf00      	nop
 800c5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ba:	bc08      	pop	{r3}
 800c5bc:	469e      	mov	lr, r3
 800c5be:	4770      	bx	lr

0800c5c0 <_fini>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr
