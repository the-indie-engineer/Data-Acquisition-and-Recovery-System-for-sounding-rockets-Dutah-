
USB CDC F44RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000781c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a4c  08007a4c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a54  08007a54  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08007a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  2000010c  08007b68  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d3c  08007b68  00021d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f152  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afd  00000000  00000000  0002f28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00031d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00032968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a8e  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001011f  00000000  00000000  00056e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a78  00000000  00000000  00066fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  00130a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080079c8 	.word	0x080079c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	080079c8 	.word	0x080079c8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char *msg = "\nHello Duta'h";
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <main+0x40>)
 8000520:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 f96b 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f81b 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f885 	bl	8000638 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800052e:	f006 fc8f 	bl	8006e50 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uresult = CDC_Transmit_FS(msg, strlen(msg));
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff fe66 	bl	8000204 <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29b      	uxth	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f006 fd44 	bl	8006fcc <CDC_Transmit_FS>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <main+0x44>)
 800054a:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 800054c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000550:	f000 f9c6 	bl	80008e0 <HAL_Delay>
	  uresult = CDC_Transmit_FS(msg, strlen(msg));
 8000554:	e7ed      	b.n	8000532 <main+0x1a>
 8000556:	bf00      	nop
 8000558:	080079e0 	.word	0x080079e0
 800055c:	20000128 	.word	0x20000128

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 fa22 	bl	80079b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xd4>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d4:	23a8      	movs	r3, #168	; 0xa8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fd59 	bl	80030a0 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f856 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fef6 	bl	8002408 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 f83f 	bl	80006a4 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_GPIO_Init+0x68>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <MX_GPIO_Init+0x68>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_GPIO_Init+0x68>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_GPIO_Init+0x68>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <MX_GPIO_Init+0x68>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_GPIO_Init+0x68>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_GPIO_Init+0x68>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <MX_GPIO_Init+0x68>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_GPIO_Init+0x68>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x8>
	...

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <HAL_MspInit+0x58>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <HAL_MspInit+0x58>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_MspInit+0x58>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x58>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_MspInit+0x58>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x58>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	2005      	movs	r0, #5
 80006f4:	f000 f9f3 	bl	8000ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f000 fa0c 	bl	8000b16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f8a2 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <OTG_FS_IRQHandler+0x10>)
 8000776:	f000 fcd4 	bl	8001122 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20001610 	.word	0x20001610

08000784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <SystemInit+0x20>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <SystemInit+0x20>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ae:	490e      	ldr	r1, [pc, #56]	; (80007e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007c4:	4c0b      	ldr	r4, [pc, #44]	; (80007f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007d2:	f7ff ffd7 	bl	8000784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f007 f8cb 	bl	8007970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007da:	f7ff fe9d 	bl	8000518 <main>
  bx  lr    
 80007de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80007ec:	08007a5c 	.word	0x08007a5c
  ldr r2, =_sbss
 80007f0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80007f4:	20001d3c 	.word	0x20001d3c

080007f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_Init+0x40>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <HAL_Init+0x40>)
 8000806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800080a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_Init+0x40>)
 8000812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x40>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x40>)
 800081e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f94f 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	200f      	movs	r0, #15
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff ff3e 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023c00 	.word	0x40023c00

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f967 	bl	8000b32 <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f92f 	bl	8000ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_IncTick+0x20>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x24>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_IncTick+0x24>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008
 80008c4:	2000012c 	.word	0x2000012c

080008c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_GetTick+0x14>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2000012c 	.word	0x2000012c

080008e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff ffee 	bl	80008c8 <HAL_GetTick>
 80008ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d005      	beq.n	8000906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_Delay+0x44>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000906:	bf00      	nop
 8000908:	f7ff ffde 	bl	80008c8 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f7      	bhi.n	8000908 <HAL_Delay+0x28>
  {
  }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	db0b      	blt.n	80009b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	f003 021f 	and.w	r2, r3, #31
 80009a4:	4907      	ldr	r1, [pc, #28]	; (80009c4 <__NVIC_EnableIRQ+0x38>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	095b      	lsrs	r3, r3, #5
 80009ac:	2001      	movs	r0, #1
 80009ae:	fa00 f202 	lsl.w	r2, r0, r2
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff8e 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff29 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff3e 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff8e 	bl	8000a1c <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5d 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff31 	bl	800098c <__NVIC_EnableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffa2 	bl	8000a84 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	e165      	b.n	8000e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b68:	2201      	movs	r2, #1
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f040 8154 	bne.w	8000e2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d005      	beq.n	8000b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d130      	bne.n	8000c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	f003 0201 	and.w	r2, r3, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d017      	beq.n	8000c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d123      	bne.n	8000c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	08da      	lsrs	r2, r3, #3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3208      	adds	r2, #8
 8000c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	69b9      	ldr	r1, [r7, #24]
 8000c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0203 	and.w	r2, r3, #3
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f000 80ae 	beq.w	8000e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b5d      	ldr	r3, [pc, #372]	; (8000e4c <HAL_GPIO_Init+0x300>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a5c      	ldr	r2, [pc, #368]	; (8000e4c <HAL_GPIO_Init+0x300>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b5a      	ldr	r3, [pc, #360]	; (8000e4c <HAL_GPIO_Init+0x300>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cee:	4a58      	ldr	r2, [pc, #352]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_GPIO_Init+0x308>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d025      	beq.n	8000d66 <HAL_GPIO_Init+0x21a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <HAL_GPIO_Init+0x30c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d01f      	beq.n	8000d62 <HAL_GPIO_Init+0x216>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <HAL_GPIO_Init+0x310>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <HAL_GPIO_Init+0x314>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4b      	ldr	r2, [pc, #300]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x20a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <HAL_GPIO_Init+0x31c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x206>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a49      	ldr	r2, [pc, #292]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x202>
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	e00c      	b.n	8000d68 <HAL_GPIO_Init+0x21c>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e00a      	b.n	8000d68 <HAL_GPIO_Init+0x21c>
 8000d52:	2305      	movs	r3, #5
 8000d54:	e008      	b.n	8000d68 <HAL_GPIO_Init+0x21c>
 8000d56:	2304      	movs	r3, #4
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x21c>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e004      	b.n	8000d68 <HAL_GPIO_Init+0x21c>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e002      	b.n	8000d68 <HAL_GPIO_Init+0x21c>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <HAL_GPIO_Init+0x21c>
 8000d66:	2300      	movs	r3, #0
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	f002 0203 	and.w	r2, r2, #3
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	4093      	lsls	r3, r2
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d78:	4935      	ldr	r1, [pc, #212]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d86:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000daa:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd4:	4a26      	ldr	r2, [pc, #152]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e28:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <HAL_GPIO_Init+0x324>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	f67f ae96 	bls.w	8000b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40021400 	.word	0x40021400
 8000e6c:	40021800 	.word	0x40021800
 8000e70:	40013c00 	.word	0x40013c00

08000e74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e76:	b08f      	sub	sp, #60	; 0x3c
 8000e78:	af0a      	add	r7, sp, #40	; 0x28
 8000e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e116      	b.n	80010b4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d106      	bne.n	8000ea6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f006 f9ed 	bl	8007280 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fc9e 	bl	8003806 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	687e      	ldr	r6, [r7, #4]
 8000ed2:	466d      	mov	r5, sp
 8000ed4:	f106 0410 	add.w	r4, r6, #16
 8000ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ee8:	1d33      	adds	r3, r6, #4
 8000eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f002 fb75 	bl	80035dc <USB_CoreInit>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2202      	movs	r2, #2
 8000efc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0d7      	b.n	80010b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fc8c 	bl	8003828 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e04a      	b.n	8000fac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4413      	add	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	333d      	adds	r3, #61	; 0x3d
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	333c      	adds	r3, #60	; 0x3c
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	b298      	uxth	r0, r3
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3344      	adds	r3, #68	; 0x44
 8000f52:	4602      	mov	r2, r0
 8000f54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	3340      	adds	r3, #64	; 0x40
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	3348      	adds	r3, #72	; 0x48
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	334c      	adds	r3, #76	; 0x4c
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3354      	adds	r3, #84	; 0x54
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3af      	bcc.n	8000f16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e044      	b.n	8001046 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3301      	adds	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3b5      	bcc.n	8000fbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687e      	ldr	r6, [r7, #4]
 8001058:	466d      	mov	r5, sp
 800105a:	f106 0410 	add.w	r4, r6, #16
 800105e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800106a:	e885 0003 	stmia.w	r5, {r0, r1}
 800106e:	1d33      	adds	r3, r6, #4
 8001070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f002 fc24 	bl	80038c0 <USB_DevInit>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2202      	movs	r2, #2
 8001082:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e014      	b.n	80010b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d102      	bne.n	80010a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f001 f98c 	bl	80023c0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fd66 	bl	8004b7e <USB_DevDisconnect>

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_PCD_Start+0x1c>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e020      	b.n	800111a <HAL_PCD_Start+0x5e>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d109      	bne.n	80010fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d005      	beq.n	80010fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fb6f 	bl	80037e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fd16 	bl	8004b3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001122:	b590      	push	{r4, r7, lr}
 8001124:	b08d      	sub	sp, #52	; 0x34
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fdd4 	bl	8004ce6 <USB_GetMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 84b7 	bne.w	8001ab4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fd38 	bl	8004bc0 <USB_ReadInterrupts>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 84ad 	beq.w	8001ab2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fd25 	bl	8004bc0 <USB_ReadInterrupts>
 8001176:	4603      	mov	r3, r0
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b02      	cmp	r3, #2
 800117e:	d107      	bne.n	8001190 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f002 0202 	and.w	r2, r2, #2
 800118e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fd13 	bl	8004bc0 <USB_ReadInterrupts>
 800119a:	4603      	mov	r3, r0
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	2b10      	cmp	r3, #16
 80011a2:	d161      	bne.n	8001268 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0210 	bic.w	r2, r2, #16
 80011b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	f003 020f 	and.w	r2, r3, #15
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	3304      	adds	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	0c5b      	lsrs	r3, r3, #17
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d124      	bne.n	800122a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d035      	beq.n	8001258 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	6a38      	ldr	r0, [r7, #32]
 8001200:	f003 fb4a 	bl	8004898 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001210:	441a      	add	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001222:	441a      	add	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	621a      	str	r2, [r3, #32]
 8001228:	e016      	b.n	8001258 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	0c5b      	lsrs	r3, r3, #17
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	2b06      	cmp	r3, #6
 8001234:	d110      	bne.n	8001258 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800123c:	2208      	movs	r2, #8
 800123e:	4619      	mov	r1, r3
 8001240:	6a38      	ldr	r0, [r7, #32]
 8001242:	f003 fb29 	bl	8004898 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	6a1a      	ldr	r2, [r3, #32]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001252:	441a      	add	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0210 	orr.w	r2, r2, #16
 8001266:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fca7 	bl	8004bc0 <USB_ReadInterrupts>
 8001272:	4603      	mov	r3, r0
 8001274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001278:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800127c:	f040 80a7 	bne.w	80013ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fcac 	bl	8004be6 <USB_ReadDevAllOutEpInterrupt>
 800128e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001290:	e099      	b.n	80013c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 808e 	beq.w	80013ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fcd0 	bl	8004c4e <USB_ReadDevOutEPInterrupt>
 80012ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00c      	beq.n	80012d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	015a      	lsls	r2, r3, #5
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	4413      	add	r3, r2
 80012c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c6:	461a      	mov	r2, r3
 80012c8:	2301      	movs	r3, #1
 80012ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fef0 	bl	80020b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00c      	beq.n	80012f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	015a      	lsls	r2, r3, #5
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	4413      	add	r3, r2
 80012e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ea:	461a      	mov	r2, r3
 80012ec:	2308      	movs	r3, #8
 80012ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 ffc6 	bl	8002284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	015a      	lsls	r2, r3, #5
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4413      	add	r3, r2
 800130a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130e:	461a      	mov	r2, r3
 8001310:	2310      	movs	r3, #16
 8001312:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d030      	beq.n	8001380 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	2b80      	cmp	r3, #128	; 0x80
 8001328:	d109      	bne.n	800133e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	3304      	adds	r3, #4
 8001352:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d108      	bne.n	800136e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2200      	movs	r2, #0
 8001360:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f006 f8a5 	bl	80074b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	015a      	lsls	r2, r3, #5
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	4413      	add	r3, r2
 8001376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800137a:	461a      	mov	r2, r3
 800137c:	2302      	movs	r3, #2
 800137e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001396:	461a      	mov	r2, r3
 8001398:	2320      	movs	r3, #32
 800139a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b2:	461a      	mov	r2, r3
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f47f af62 	bne.w	8001292 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fbf4 	bl	8004bc0 <USB_ReadInterrupts>
 80013d8:	4603      	mov	r3, r0
 80013da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013e2:	f040 80db 	bne.w	800159c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fc15 	bl	8004c1a <USB_ReadDevAllInEpInterrupt>
 80013f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013f6:	e0cd      	b.n	8001594 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80c2 	beq.w	8001588 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fc3b 	bl	8004c8a <USB_ReadDevInEPInterrupt>
 8001414:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d057      	beq.n	80014d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	2201      	movs	r2, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	69f9      	ldr	r1, [r7, #28]
 800143c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001440:	4013      	ands	r3, r2
 8001442:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001450:	461a      	mov	r2, r3
 8001452:	2301      	movs	r3, #1
 8001454:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d132      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	334c      	adds	r3, #76	; 0x4c
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4403      	add	r3, r0
 800147e:	3348      	adds	r3, #72	; 0x48
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4419      	add	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4403      	add	r3, r0
 8001492:	334c      	adds	r3, #76	; 0x4c
 8001494:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	2b00      	cmp	r3, #0
 800149a:	d113      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x3a2>
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3354      	adds	r3, #84	; 0x54
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d108      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014bc:	461a      	mov	r2, r3
 80014be:	2101      	movs	r1, #1
 80014c0:	f003 fc42 	bl	8004d48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f005 ff6f 	bl	80073ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	015a      	lsls	r2, r3, #5
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e6:	461a      	mov	r2, r3
 80014e8:	2308      	movs	r3, #8
 80014ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001502:	461a      	mov	r2, r3
 8001504:	2310      	movs	r3, #16
 8001506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151e:	461a      	mov	r2, r3
 8001520:	2340      	movs	r3, #64	; 0x40
 8001522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d023      	beq.n	8001576 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800152e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001530:	6a38      	ldr	r0, [r7, #32]
 8001532:	f002 fb23 	bl	8003b7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	3338      	adds	r3, #56	; 0x38
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	3304      	adds	r3, #4
 8001548:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2200      	movs	r2, #0
 8001556:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f005 ffbc 	bl	80074dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001570:	461a      	mov	r2, r3
 8001572:	2302      	movs	r3, #2
 8001574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 fd08 	bl	8001f98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	3301      	adds	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	2b00      	cmp	r3, #0
 8001598:	f47f af2e 	bne.w	80013f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fb0d 	bl	8004bc0 <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015b0:	d122      	bne.n	80015f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015d8:	2100      	movs	r1, #0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f006 f936 	bl	800784c <HAL_PCDEx_LPM_Callback>
 80015e0:	e002      	b.n	80015e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f005 ff5a 	bl	800749c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fadf 	bl	8004bc0 <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800160c:	d112      	bne.n	8001634 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f005 ff16 	bl	8007450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001632:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fac1 	bl	8004bc0 <USB_ReadInterrupts>
 800163e:	4603      	mov	r3, r0
 8001640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001648:	d121      	bne.n	800168e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001658:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	f003 020f 	and.w	r2, r3, #15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800167e:	2101      	movs	r1, #1
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f006 f8e3 	bl	800784c <HAL_PCDEx_LPM_Callback>
 8001686:	e002      	b.n	800168e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f005 fee1 	bl	8007450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fa94 	bl	8004bc0 <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a2:	f040 80b7 	bne.w	8001814 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2110      	movs	r1, #16
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fa5b 	bl	8003b7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	e046      	b.n	800175a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	015a      	lsls	r2, r3, #5
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d8:	461a      	mov	r2, r3
 80016da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f0:	0151      	lsls	r1, r2, #5
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	440a      	add	r2, r1
 80016f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170c:	461a      	mov	r2, r3
 800170e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001712:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001724:	0151      	lsls	r1, r2, #5
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	440a      	add	r2, r1
 800172a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800172e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001744:	0151      	lsls	r1, r2, #5
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	440a      	add	r2, r1
 800174a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800174e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001752:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	3301      	adds	r3, #1
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001760:	429a      	cmp	r2, r3
 8001762:	d3b3      	bcc.n	80016cc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001772:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001776:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	2b00      	cmp	r3, #0
 800177e:	d016      	beq.n	80017ae <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001790:	f043 030b 	orr.w	r3, r3, #11
 8001794:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a6:	f043 030b 	orr.w	r3, r3, #11
 80017aa:	6453      	str	r3, [r2, #68]	; 0x44
 80017ac:	e015      	b.n	80017da <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d4:	f043 030b 	orr.w	r3, r3, #11
 80017d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017fe:	461a      	mov	r2, r3
 8001800:	f003 faa2 	bl	8004d48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f9d1 	bl	8004bc0 <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001828:	d124      	bne.n	8001874 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fa67 	bl	8004d02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fa1c 	bl	8003c76 <USB_GetDevSpeed>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681c      	ldr	r4, [r3, #0]
 800184a:	f000 fec3 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 800184e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	4620      	mov	r0, r4
 800185a:	f001 ff21 	bl	80036a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f005 fdcd 	bl	80073fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001872:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f9a1 	bl	8004bc0 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b08      	cmp	r3, #8
 8001886:	d10a      	bne.n	800189e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f005 fdaa 	bl	80073e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f002 0208 	and.w	r2, r2, #8
 800189c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 f98c 	bl	8004bc0 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	2b80      	cmp	r3, #128	; 0x80
 80018b0:	d122      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
 80018c2:	e014      	b.n	80018ee <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fb27 	bl	8001f36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3e5      	bcc.n	80018c4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 f95f 	bl	8004bc0 <USB_ReadInterrupts>
 8001902:	4603      	mov	r3, r0
 8001904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190c:	d13b      	bne.n	8001986 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e02b      	b.n	800196c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4413      	add	r3, r2
 800191c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3340      	adds	r3, #64	; 0x40
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d115      	bne.n	8001966 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800193a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	da12      	bge.n	8001966 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333f      	adds	r3, #63	; 0x3f
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fae8 	bl	8001f36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	3301      	adds	r3, #1
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001972:	429a      	cmp	r2, r3
 8001974:	d3ce      	bcc.n	8001914 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 f918 	bl	8004bc0 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800199a:	d155      	bne.n	8001a48 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199c:	2301      	movs	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e045      	b.n	8001a2e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d12e      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da2b      	bge.n	8001a28 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d121      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a24:	6053      	str	r3, [r2, #4]
            break;
 8001a26:	e007      	b.n	8001a38 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3b4      	bcc.n	80019a2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 f8b7 	bl	8004bc0 <USB_ReadInterrupts>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5c:	d10a      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f005 fd4e 	bl	8007500 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 f8a1 	bl	8004bc0 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d115      	bne.n	8001ab4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f005 fd3e 	bl	800751c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	e000      	b.n	8001ab4 <HAL_PCD_IRQHandler+0x992>
      return;
 8001ab2:	bf00      	nop
    }
  }
}
 8001ab4:	3734      	adds	r7, #52	; 0x34
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}

08001aba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_PCD_SetAddress+0x1a>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e013      	b.n	8001afc <HAL_PCD_SetAddress+0x42>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 ffff 	bl	8004af0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	70fb      	strb	r3, [r7, #3]
 8001b16:	460b      	mov	r3, r1
 8001b18:	803b      	strh	r3, [r7, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	da0f      	bge.n	8001b4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	f003 020f 	and.w	r2, r3, #15
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	3338      	adds	r3, #56	; 0x38
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3304      	adds	r3, #4
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	705a      	strb	r2, [r3, #1]
 8001b48:	e00f      	b.n	8001b6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	f003 020f 	and.w	r2, r3, #15
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b76:	883a      	ldrh	r2, [r7, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	78ba      	ldrb	r2, [r7, #2]
 8001b80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	785b      	ldrb	r3, [r3, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b94:	78bb      	ldrb	r3, [r7, #2]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d102      	bne.n	8001ba0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_PCD_EP_Open+0xaa>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e00e      	b.n	8001bcc <HAL_PCD_EP_Open+0xc8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 f87f 	bl	8003cc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001bca:	7afb      	ldrb	r3, [r7, #11]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da0f      	bge.n	8001c08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 020f 	and.w	r2, r3, #15
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	3338      	adds	r3, #56	; 0x38
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	705a      	strb	r2, [r3, #1]
 8001c06:	e00f      	b.n	8001c28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_PCD_EP_Close+0x6e>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e00e      	b.n	8001c60 <HAL_PCD_EP_Close+0x8c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 f8bd 	bl	8003dd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	460b      	mov	r3, r1
 8001c76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6979      	ldr	r1, [r7, #20]
 8001cdc:	f002 fb9c 	bl	8004418 <USB_EP0StartXfer>
 8001ce0:	e008      	b.n	8001cf4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	6979      	ldr	r1, [r7, #20]
 8001cf0:	f002 f94a 	bl	8003f88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d20:	681b      	ldr	r3, [r3, #0]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	f003 020f 	and.w	r2, r3, #15
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	3338      	adds	r3, #56	; 0x38
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6979      	ldr	r1, [r7, #20]
 8001da0:	f002 fb3a 	bl	8004418 <USB_EP0StartXfer>
 8001da4:	e008      	b.n	8001db8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	6979      	ldr	r1, [r7, #20]
 8001db4:	f002 f8e8 	bl	8003f88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d901      	bls.n	8001de0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e050      	b.n	8001e82 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da0f      	bge.n	8001e08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	3338      	adds	r3, #56	; 0x38
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	705a      	strb	r2, [r3, #1]
 8001e06:	e00d      	b.n	8001e24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_PCD_EP_SetStall+0x82>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e01e      	b.n	8001e82 <HAL_PCD_EP_SetStall+0xc0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 fd78 	bl	8004948 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	b2d9      	uxtb	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e72:	461a      	mov	r2, r3
 8001e74:	f002 ff68 	bl	8004d48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d901      	bls.n	8001ea8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e042      	b.n	8001f2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da0f      	bge.n	8001ed0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 020f 	and.w	r2, r3, #15
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	3338      	adds	r3, #56	; 0x38
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
 8001ece:	e00f      	b.n	8001ef0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_PCD_EP_ClrStall+0x86>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e00e      	b.n	8001f2e <HAL_PCD_EP_ClrStall+0xa4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68f9      	ldr	r1, [r7, #12]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fd80 	bl	8004a24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da0c      	bge.n	8001f64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3338      	adds	r3, #56	; 0x38
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	e00c      	b.n	8001f7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fb9f 	bl	80046c8 <USB_EPStopXfer>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3338      	adds	r3, #56	; 0x38
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d901      	bls.n	8001fd0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e06c      	b.n	80020aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d902      	bls.n	8001fec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ff4:	e02b      	b.n	800204e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	d902      	bls.n	8002012 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3303      	adds	r3, #3
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800202a:	b2db      	uxtb	r3, r3
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	4603      	mov	r3, r0
 8002030:	6978      	ldr	r0, [r7, #20]
 8002032:	f002 fbf3 	bl	800481c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	441a      	add	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	441a      	add	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	b29b      	uxth	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	429a      	cmp	r2, r3
 8002062:	d809      	bhi.n	8002078 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800206c:	429a      	cmp	r2, r3
 800206e:	d203      	bcs.n	8002078 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1be      	bne.n	8001ff6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	429a      	cmp	r2, r3
 8002082:	d811      	bhi.n	80020a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	2201      	movs	r2, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	43db      	mvns	r3, r3
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020a4:	4013      	ands	r3, r2
 80020a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	333c      	adds	r3, #60	; 0x3c
 80020cc:	3304      	adds	r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d17b      	bne.n	80021e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	4a61      	ldr	r2, [pc, #388]	; (800227c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	f240 80b9 	bls.w	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80b3 	beq.w	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	461a      	mov	r2, r3
 8002118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211c:	6093      	str	r3, [r2, #8]
 800211e:	e0a7      	b.n	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002136:	461a      	mov	r2, r3
 8002138:	2320      	movs	r3, #32
 800213a:	6093      	str	r3, [r2, #8]
 800213c:	e098      	b.n	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 8093 	bne.w	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4a4b      	ldr	r2, [pc, #300]	; (800227c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d90f      	bls.n	8002172 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216e:	6093      	str	r3, [r2, #8]
 8002170:	e07e      	b.n	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	0159      	lsls	r1, r3, #5
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	440b      	add	r3, r1
 8002194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219e:	1ad2      	subs	r2, r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d114      	bne.n	80021d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021bc:	461a      	mov	r2, r3
 80021be:	2101      	movs	r1, #1
 80021c0:	f002 fdc2 	bl	8004d48 <USB_EP0_OutStart>
 80021c4:	e006      	b.n	80021d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	441a      	add	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f005 f8cc 	bl	8007378 <HAL_PCD_DataOutStageCallback>
 80021e0:	e046      	b.n	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d124      	bne.n	8002234 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002206:	6093      	str	r3, [r2, #8]
 8002208:	e032      	b.n	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	2320      	movs	r3, #32
 8002224:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f005 f8a3 	bl	8007378 <HAL_PCD_DataOutStageCallback>
 8002232:	e01d      	b.n	8002270 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <PCD_EP_OutXfrComplete_int+0x1b0>
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800225c:	461a      	mov	r2, r3
 800225e:	2100      	movs	r1, #0
 8002260:	f002 fd72 	bl	8004d48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f005 f884 	bl	8007378 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	4f54300a 	.word	0x4f54300a
 8002280:	4f54310a 	.word	0x4f54310a

08002284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	333c      	adds	r3, #60	; 0x3c
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a15      	ldr	r2, [pc, #84]	; (800230c <PCD_EP_OutSetupPacket_int+0x88>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d90e      	bls.n	80022d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f005 f83b 	bl	8007354 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <PCD_EP_OutSetupPacket_int+0x88>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d90c      	bls.n	8002300 <PCD_EP_OutSetupPacket_int+0x7c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d108      	bne.n	8002300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022f8:	461a      	mov	r2, r3
 80022fa:	2101      	movs	r1, #1
 80022fc:	f002 fd24 	bl	8004d48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	4f54300a 	.word	0x4f54300a

08002310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
 800231c:	4613      	mov	r3, r2
 800231e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800232e:	883b      	ldrh	r3, [r7, #0]
 8002330:	0419      	lsls	r1, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	430a      	orrs	r2, r1
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
 800233c:	e028      	b.n	8002390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e00d      	b.n	800236e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3340      	adds	r3, #64	; 0x40
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4413      	add	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3301      	adds	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	3b01      	subs	r3, #1
 8002374:	429a      	cmp	r2, r3
 8002376:	d3ec      	bcc.n	8002352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002378:	883b      	ldrh	r3, [r7, #0]
 800237a:	0418      	lsls	r0, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	3b01      	subs	r3, #1
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	4302      	orrs	r2, r0
 8002388:	3340      	adds	r3, #64	; 0x40
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	f043 0303 	orr.w	r3, r3, #3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0cc      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d90c      	bls.n	8002444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a58      	ldr	r2, [pc, #352]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800247e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d044      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e067      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4934      	ldr	r1, [pc, #208]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7fe f9e6 	bl	80008c8 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe f9e2 	bl	80008c8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e04f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d20c      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258e:	f000 fb57 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe f946 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08007a3c 	.word	0x08007a3c
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d010      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002624:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	496c      	ldr	r1, [pc, #432]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002642:	2301      	movs	r3, #1
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d010      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002652:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002658:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	4960      	ldr	r1, [pc, #384]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002670:	2301      	movs	r3, #1
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4955      	ldr	r1, [pc, #340]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269e:	d101      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80026a0:	2301      	movs	r3, #1
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80026ac:	2301      	movs	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d017      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026bc:	4b49      	ldr	r3, [pc, #292]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	4946      	ldr	r1, [pc, #280]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d101      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80026dc:	2301      	movs	r3, #1
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 808a 	beq.w	800280e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a38      	ldr	r2, [pc, #224]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a33      	ldr	r2, [pc, #204]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002722:	f7fe f8d1 	bl	80008c8 <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7fe f8cd 	bl	80008c8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e278      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800273c:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002750:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d02f      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	429a      	cmp	r2, r3
 8002764:	d028      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002766:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d114      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe f89b 	bl	80008c8 <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe f897 	bl	80008c8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e240      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ee      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027c4:	d114      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027da:	4902      	ldr	r1, [pc, #8]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
 80027e0:	e00c      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42470e40 	.word	0x42470e40
 80027f0:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a49      	ldr	r2, [pc, #292]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027fa:	6093      	str	r3, [r2, #8]
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	4944      	ldr	r1, [pc, #272]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800280a:	4313      	orrs	r3, r2
 800280c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002822:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002830:	4b3a      	ldr	r3, [pc, #232]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002852:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002858:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002860:	492e      	ldr	r1, [pc, #184]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d011      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002874:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	4926      	ldr	r1, [pc, #152]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002892:	d101      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002894:	2301      	movs	r3, #1
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	491a      	ldr	r1, [pc, #104]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d011      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	4911      	ldr	r1, [pc, #68]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e4:	d101      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80028e6:	2301      	movs	r3, #1
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d005      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f8:	f040 80ff 	bne.w	8002afa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002902:	f7fd ffe1 	bl	80008c8 <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800290a:	f7fd ffdd 	bl	80008c8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d907      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e188      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800291c:	40023800 	.word	0x40023800
 8002920:	424711e0 	.word	0x424711e0
 8002924:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002928:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ea      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002950:	2b00      	cmp	r3, #0
 8002952:	d028      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d124      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800295c:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800295e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	3301      	adds	r3, #1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800296e:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002974:	0e1b      	lsrs	r3, r3, #24
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	431a      	orrs	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	071b      	lsls	r3, r3, #28
 800299e:	4961      	ldr	r1, [pc, #388]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d035      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d0:	d130      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029e4:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	0f1b      	lsrs	r3, r3, #28
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	019b      	lsls	r3, r3, #6
 80029fc:	431a      	orrs	r2, r3
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	071b      	lsls	r3, r3, #28
 8002a14:	4943      	ldr	r1, [pc, #268]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a22:	f023 021f 	bic.w	r2, r3, #31
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	493d      	ldr	r1, [pc, #244]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d029      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a48:	d124      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	3301      	adds	r3, #1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a62:	0f1b      	lsrs	r3, r3, #28
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	019b      	lsls	r3, r3, #6
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	431a      	orrs	r2, r3
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	431a      	orrs	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	071b      	lsls	r3, r3, #28
 8002a8c:	4925      	ldr	r1, [pc, #148]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d016      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	071b      	lsls	r3, r3, #28
 8002ac6:	4917      	ldr	r1, [pc, #92]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fd fef8 	bl	80008c8 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002adc:	f7fd fef4 	bl	80008c8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e09f      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	f040 8095 	bne.w	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fd fede 	bl	80008c8 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b0e:	e00f      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b10:	f7fd feda 	bl	80008c8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d908      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e085      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	42470068 	.word	0x42470068
 8002b2c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b3c:	d0e8      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02b      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d127      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b66:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	431a      	orrs	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	4928      	ldr	r1, [pc, #160]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b9c:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	3b01      	subs	r3, #1
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	4922      	ldr	r1, [pc, #136]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01d      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bca:	d118      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	0e1b      	lsrs	r3, r3, #24
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	019b      	lsls	r3, r3, #6
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	4910      	ldr	r1, [pc, #64]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fd fe60 	bl	80008c8 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c0c:	f7fd fe5c 	bl	80008c8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e007      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2a:	d1ef      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3730      	adds	r7, #48	; 0x30
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470070 	.word	0x42470070

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b0ae      	sub	sp, #184	; 0xb8
 8002c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4bcb      	ldr	r3, [pc, #812]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	f200 8206 	bhi.w	8003080 <HAL_RCC_GetSysClockFreq+0x440>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08003081 	.word	0x08003081
 8002c84:	08003081 	.word	0x08003081
 8002c88:	08003081 	.word	0x08003081
 8002c8c:	08002cb9 	.word	0x08002cb9
 8002c90:	08003081 	.word	0x08003081
 8002c94:	08003081 	.word	0x08003081
 8002c98:	08003081 	.word	0x08003081
 8002c9c:	08002cc1 	.word	0x08002cc1
 8002ca0:	08003081 	.word	0x08003081
 8002ca4:	08003081 	.word	0x08003081
 8002ca8:	08003081 	.word	0x08003081
 8002cac:	08002eb1 	.word	0x08002eb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4bb9      	ldr	r3, [pc, #740]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cb6:	e1e7      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cb8:	4bb8      	ldr	r3, [pc, #736]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cbe:	e1e3      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4bb4      	ldr	r3, [pc, #720]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ccc:	4bb1      	ldr	r3, [pc, #708]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d071      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4bae      	ldr	r3, [pc, #696]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ce4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4621      	mov	r1, r4
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	6439      	str	r1, [r7, #64]	; 0x40
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	647b      	str	r3, [r7, #68]	; 0x44
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d30:	4649      	mov	r1, r9
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4641      	mov	r1, r8
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d44:	4649      	mov	r1, r9
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d58:	4649      	mov	r1, r9
 8002d5a:	00cb      	lsls	r3, r1, #3
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d62:	4641      	mov	r1, r8
 8002d64:	00ca      	lsls	r2, r1, #3
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
 8002d72:	462b      	mov	r3, r5
 8002d74:	460a      	mov	r2, r1
 8002d76:	eb42 0303 	adc.w	r3, r2, r3
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d88:	4629      	mov	r1, r5
 8002d8a:	024b      	lsls	r3, r1, #9
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d92:	4621      	mov	r1, r4
 8002d94:	024a      	lsls	r2, r1, #9
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002dac:	f7fd fa32 	bl	8000214 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dba:	e067      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dc8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dde:	4622      	mov	r2, r4
 8002de0:	462b      	mov	r3, r5
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	0159      	lsls	r1, r3, #5
 8002dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df0:	0150      	lsls	r0, r2, #5
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4621      	mov	r1, r4
 8002df8:	1a51      	subs	r1, r2, r1
 8002dfa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e10:	4649      	mov	r1, r9
 8002e12:	018b      	lsls	r3, r1, #6
 8002e14:	4641      	mov	r1, r8
 8002e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	018a      	lsls	r2, r1, #6
 8002e1e:	4641      	mov	r1, r8
 8002e20:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e24:	4649      	mov	r1, r9
 8002e26:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e3e:	4692      	mov	sl, r2
 8002e40:	469b      	mov	fp, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	eb1a 0303 	adds.w	r3, sl, r3
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e5e:	4629      	mov	r1, r5
 8002e60:	028b      	lsls	r3, r1, #10
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e68:	4621      	mov	r1, r4
 8002e6a:	028a      	lsls	r2, r1, #10
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e74:	2200      	movs	r2, #0
 8002e76:	673b      	str	r3, [r7, #112]	; 0x70
 8002e78:	677a      	str	r2, [r7, #116]	; 0x74
 8002e7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e7e:	f7fd f9c9 	bl	8000214 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4613      	mov	r3, r2
 8002e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	3301      	adds	r3, #1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eae:	e0eb      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b38      	ldr	r3, [pc, #224]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebc:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d06b      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eda:	663b      	str	r3, [r7, #96]	; 0x60
 8002edc:	2300      	movs	r3, #0
 8002ede:	667b      	str	r3, [r7, #100]	; 0x64
 8002ee0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	f04f 0000 	mov.w	r0, #0
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	0159      	lsls	r1, r3, #5
 8002ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef6:	0150      	lsls	r0, r2, #5
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4621      	mov	r1, r4
 8002efe:	1a51      	subs	r1, r2, r1
 8002f00:	61b9      	str	r1, [r7, #24]
 8002f02:	4629      	mov	r1, r5
 8002f04:	eb63 0301 	sbc.w	r3, r3, r1
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f16:	4659      	mov	r1, fp
 8002f18:	018b      	lsls	r3, r1, #6
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f20:	4651      	mov	r1, sl
 8002f22:	018a      	lsls	r2, r1, #6
 8002f24:	4651      	mov	r1, sl
 8002f26:	ebb2 0801 	subs.w	r8, r2, r1
 8002f2a:	4659      	mov	r1, fp
 8002f2c:	eb63 0901 	sbc.w	r9, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f44:	4690      	mov	r8, r2
 8002f46:	4699      	mov	r9, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	eb18 0303 	adds.w	r3, r8, r3
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb49 0303 	adc.w	r3, r9, r3
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f64:	4629      	mov	r1, r5
 8002f66:	024b      	lsls	r3, r1, #9
 8002f68:	4621      	mov	r1, r4
 8002f6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6e:	4621      	mov	r1, r4
 8002f70:	024a      	lsls	r2, r1, #9
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f84:	f7fd f946 	bl	8000214 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f92:	e065      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x420>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	4611      	mov	r1, r2
 8002fac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fba:	4642      	mov	r2, r8
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	f04f 0000 	mov.w	r0, #0
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	0159      	lsls	r1, r3, #5
 8002fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fcc:	0150      	lsls	r0, r2, #5
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	1a51      	subs	r1, r2, r1
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	4649      	mov	r1, r9
 8002fda:	eb63 0301 	sbc.w	r3, r3, r1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fec:	4659      	mov	r1, fp
 8002fee:	018b      	lsls	r3, r1, #6
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	018a      	lsls	r2, r1, #6
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	1a54      	subs	r4, r2, r1
 8002ffe:	4659      	mov	r1, fp
 8003000:	eb63 0501 	sbc.w	r5, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	00eb      	lsls	r3, r5, #3
 800300e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003012:	00e2      	lsls	r2, r4, #3
 8003014:	4614      	mov	r4, r2
 8003016:	461d      	mov	r5, r3
 8003018:	4643      	mov	r3, r8
 800301a:	18e3      	adds	r3, r4, r3
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	464b      	mov	r3, r9
 8003020:	eb45 0303 	adc.w	r3, r5, r3
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003048:	2200      	movs	r2, #0
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
 800304c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800304e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003052:	f7fd f8df 	bl	8000214 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4613      	mov	r3, r2
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_RCC_GetSysClockFreq+0x458>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0f1b      	lsrs	r3, r3, #28
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800306e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800307e:	e003      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800308c:	4618      	mov	r0, r3
 800308e:	37b8      	adds	r7, #184	; 0xb8
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400

080030a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e28d      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8083 	beq.w	80031c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030c0:	4b94      	ldr	r3, [pc, #592]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d019      	beq.n	8003100 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030cc:	4b91      	ldr	r3, [pc, #580]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030d8:	4b8e      	ldr	r3, [pc, #568]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e4:	d00c      	beq.n	8003100 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b8b      	ldr	r3, [pc, #556]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d112      	bne.n	8003118 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fe:	d10b      	bne.n	8003118 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	4b84      	ldr	r3, [pc, #528]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05b      	beq.n	80031c4 <HAL_RCC_OscConfig+0x124>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d157      	bne.n	80031c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e25a      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x90>
 8003122:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7b      	ldr	r2, [pc, #492]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xcc>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0xb4>
 800313a:	4b76      	ldr	r3, [pc, #472]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a75      	ldr	r2, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a72      	ldr	r2, [pc, #456]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xcc>
 8003154:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6b      	ldr	r2, [pc, #428]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fd fba8 	bl	80008c8 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317c:	f7fd fba4 	bl	80008c8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e21f      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b61      	ldr	r3, [pc, #388]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xdc>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fd fb94 	bl	80008c8 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fd fb90 	bl	80008c8 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e20b      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x104>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d06f      	beq.n	80032b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031d2:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d017      	beq.n	800320e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031de:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d105      	bne.n	80031f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ea:	4b4a      	ldr	r3, [pc, #296]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d11c      	bne.n	800323c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b44      	ldr	r3, [pc, #272]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCC_OscConfig+0x186>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e1d3      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4937      	ldr	r1, [pc, #220]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	e03a      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fd fb3d 	bl	80008c8 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003252:	f7fd fb39 	bl	80008c8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1b4      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4925      	ldr	r1, [pc, #148]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd fb1c 	bl	80008c8 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003294:	f7fd fb18 	bl	80008c8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e193      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d036      	beq.n	800332c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fd fafc 	bl	80008c8 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fd faf8 	bl	80008c8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e173      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_OscConfig+0x274>)
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x234>
 80032f2:	e01b      	b.n	800332c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fd fae5 	bl	80008c8 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e00e      	b.n	8003320 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003302:	f7fd fae1 	bl	80008c8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d907      	bls.n	8003320 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e15c      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b8a      	ldr	r3, [pc, #552]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8097 	beq.w	8003468 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b83      	ldr	r3, [pc, #524]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b7f      	ldr	r3, [pc, #508]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a7e      	ldr	r2, [pc, #504]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b7c      	ldr	r3, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b79      	ldr	r3, [pc, #484]	; (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCC_OscConfig+0x4b0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a75      	ldr	r2, [pc, #468]	; (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fd faa1 	bl	80008c8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fd fa9d 	bl	80008c8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e118      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b6c      	ldr	r3, [pc, #432]	; (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x31e>
 80033b0:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x340>
 80033c6:	4b61      	ldr	r3, [pc, #388]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a60      	ldr	r2, [pc, #384]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
 80033d2:	4b5e      	ldr	r3, [pc, #376]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a5d      	ldr	r2, [pc, #372]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033e0:	4b5a      	ldr	r3, [pc, #360]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a59      	ldr	r2, [pc, #356]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fd fa62 	bl	80008c8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fd fa5e 	bl	80008c8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0d7      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	4b4b      	ldr	r3, [pc, #300]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCC_OscConfig+0x368>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fd fa4c 	bl	80008c8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fd fa48 	bl	80008c8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0c1      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	4b40      	ldr	r3, [pc, #256]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ee      	bne.n	8003434 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	4a3a      	ldr	r2, [pc, #232]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80ad 	beq.w	80035cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	d060      	beq.n	8003540 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d145      	bne.n	8003512 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <HAL_RCC_OscConfig+0x4b4>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd fa1c 	bl	80008c8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd fa18 	bl	80008c8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e093      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	019b      	lsls	r3, r3, #6
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	491b      	ldr	r1, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x4b4>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fd f9ed 	bl	80008c8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fd f9e9 	bl	80008c8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e064      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x452>
 8003510:	e05c      	b.n	80035cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RCC_OscConfig+0x4b4>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd f9d6 	bl	80008c8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd f9d2 	bl	80008c8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e04d      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x480>
 800353e:	e045      	b.n	80035cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e040      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003558:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <HAL_RCC_OscConfig+0x538>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d030      	beq.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d129      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d122      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d119      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d10f      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035dc:	b084      	sub	sp, #16
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	f107 001c 	add.w	r0, r7, #28
 80035ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d122      	bne.n	800363a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800361c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f001 fbe8 	bl	8004e04 <USB_CoreReset>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e01a      	b.n	8003670 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f001 fbdc 	bl	8004e04 <USB_CoreReset>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	639a      	str	r2, [r3, #56]	; 0x38
 8003662:	e005      	b.n	8003670 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10b      	bne.n	800368e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f043 0206 	orr.w	r2, r3, #6
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800369a:	b004      	add	sp, #16
 800369c:	4770      	bx	lr
	...

080036a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d165      	bne.n	8003780 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4a41      	ldr	r2, [pc, #260]	; (80037bc <USB_SetTurnaroundTime+0x11c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d906      	bls.n	80036ca <USB_SetTurnaroundTime+0x2a>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4a40      	ldr	r2, [pc, #256]	; (80037c0 <USB_SetTurnaroundTime+0x120>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d202      	bcs.n	80036ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036c4:	230f      	movs	r3, #15
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e062      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <USB_SetTurnaroundTime+0x120>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d306      	bcc.n	80036e0 <USB_SetTurnaroundTime+0x40>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <USB_SetTurnaroundTime+0x124>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d202      	bcs.n	80036e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036da:	230e      	movs	r3, #14
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e057      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4a38      	ldr	r2, [pc, #224]	; (80037c4 <USB_SetTurnaroundTime+0x124>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d306      	bcc.n	80036f6 <USB_SetTurnaroundTime+0x56>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4a37      	ldr	r2, [pc, #220]	; (80037c8 <USB_SetTurnaroundTime+0x128>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d202      	bcs.n	80036f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036f0:	230d      	movs	r3, #13
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e04c      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4a33      	ldr	r2, [pc, #204]	; (80037c8 <USB_SetTurnaroundTime+0x128>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d306      	bcc.n	800370c <USB_SetTurnaroundTime+0x6c>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4a32      	ldr	r2, [pc, #200]	; (80037cc <USB_SetTurnaroundTime+0x12c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d802      	bhi.n	800370c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003706:	230c      	movs	r3, #12
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e041      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4a2f      	ldr	r2, [pc, #188]	; (80037cc <USB_SetTurnaroundTime+0x12c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d906      	bls.n	8003722 <USB_SetTurnaroundTime+0x82>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4a2e      	ldr	r2, [pc, #184]	; (80037d0 <USB_SetTurnaroundTime+0x130>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d802      	bhi.n	8003722 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800371c:	230b      	movs	r3, #11
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e036      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4a2a      	ldr	r2, [pc, #168]	; (80037d0 <USB_SetTurnaroundTime+0x130>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d906      	bls.n	8003738 <USB_SetTurnaroundTime+0x98>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <USB_SetTurnaroundTime+0x134>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d802      	bhi.n	8003738 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003732:	230a      	movs	r3, #10
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e02b      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <USB_SetTurnaroundTime+0x134>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d906      	bls.n	800374e <USB_SetTurnaroundTime+0xae>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <USB_SetTurnaroundTime+0x138>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d202      	bcs.n	800374e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003748:	2309      	movs	r3, #9
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e020      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <USB_SetTurnaroundTime+0x138>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d306      	bcc.n	8003764 <USB_SetTurnaroundTime+0xc4>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <USB_SetTurnaroundTime+0x13c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d802      	bhi.n	8003764 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800375e:	2308      	movs	r3, #8
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e015      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <USB_SetTurnaroundTime+0x13c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d906      	bls.n	800377a <USB_SetTurnaroundTime+0xda>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <USB_SetTurnaroundTime+0x140>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d202      	bcs.n	800377a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003774:	2307      	movs	r3, #7
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	e00a      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800377a:	2306      	movs	r3, #6
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e007      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003786:	2309      	movs	r3, #9
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e001      	b.n	8003790 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800378c:	2309      	movs	r3, #9
 800378e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	029b      	lsls	r3, r3, #10
 80037a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	00d8acbf 	.word	0x00d8acbf
 80037c0:	00e4e1c0 	.word	0x00e4e1c0
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	01067380 	.word	0x01067380
 80037cc:	011a499f 	.word	0x011a499f
 80037d0:	01312cff 	.word	0x01312cff
 80037d4:	014ca43f 	.word	0x014ca43f
 80037d8:	016e3600 	.word	0x016e3600
 80037dc:	01a6ab1f 	.word	0x01a6ab1f
 80037e0:	01e84800 	.word	0x01e84800

080037e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d115      	bne.n	8003876 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003856:	2001      	movs	r0, #1
 8003858:	f7fd f842 	bl	80008e0 <HAL_Delay>
      ms++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f001 fa3f 	bl	8004ce6 <USB_GetMode>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d01e      	beq.n	80038ac <USB_SetCurrentMode+0x84>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b31      	cmp	r3, #49	; 0x31
 8003872:	d9f0      	bls.n	8003856 <USB_SetCurrentMode+0x2e>
 8003874:	e01a      	b.n	80038ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d115      	bne.n	80038a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003888:	2001      	movs	r0, #1
 800388a:	f7fd f829 	bl	80008e0 <HAL_Delay>
      ms++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 fa26 	bl	8004ce6 <USB_GetMode>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <USB_SetCurrentMode+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b31      	cmp	r3, #49	; 0x31
 80038a4:	d9f0      	bls.n	8003888 <USB_SetCurrentMode+0x60>
 80038a6:	e001      	b.n	80038ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e005      	b.n	80038b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b32      	cmp	r3, #50	; 0x32
 80038b0:	d101      	bne.n	80038b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c0:	b084      	sub	sp, #16
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e009      	b.n	80038f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3340      	adds	r3, #64	; 0x40
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3301      	adds	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b0e      	cmp	r3, #14
 80038f8:	d9f2      	bls.n	80038e0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11c      	bne.n	800393a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e005      	b.n	8003946 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	4619      	mov	r1, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	461a      	mov	r2, r3
 8003962:	680b      	ldr	r3, [r1, #0]
 8003964:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10c      	bne.n	8003986 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003972:	2100      	movs	r1, #0
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f965 	bl	8003c44 <USB_SetDevSpeed>
 800397a:	e008      	b.n	800398e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800397c:	2101      	movs	r1, #1
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f960 	bl	8003c44 <USB_SetDevSpeed>
 8003984:	e003      	b.n	800398e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003986:	2103      	movs	r1, #3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f95b 	bl	8003c44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800398e:	2110      	movs	r1, #16
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8f3 	bl	8003b7c <USB_FlushTxFifo>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f91f 	bl	8003be4 <USB_FlushRxFifo>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b6:	461a      	mov	r2, r3
 80039b8:	2300      	movs	r3, #0
 80039ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e043      	b.n	8003a62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039f0:	d118      	bne.n	8003a24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a04:	461a      	mov	r2, r3
 8003a06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e013      	b.n	8003a36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e008      	b.n	8003a36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	461a      	mov	r2, r3
 8003a56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d3b7      	bcc.n	80039da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e043      	b.n	8003af8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a86:	d118      	bne.n	8003aba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e013      	b.n	8003acc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e008      	b.n	8003acc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	461a      	mov	r2, r3
 8003aec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003af0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d3b7      	bcc.n	8003a70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f043 0210 	orr.w	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <USB_DevInit+0x2b8>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f043 0208 	orr.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d107      	bne.n	8003b68 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b74:	b004      	add	sp, #16
 8003b76:	4770      	bx	lr
 8003b78:	803c3800 	.word	0x803c3800

08003b7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <USB_FlushTxFifo+0x64>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e01b      	b.n	8003bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	daf2      	bge.n	8003b8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	019b      	lsls	r3, r3, #6
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <USB_FlushTxFifo+0x64>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e006      	b.n	8003bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d0f0      	beq.n	8003bb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	00030d40 	.word	0x00030d40

08003be4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <USB_FlushRxFifo+0x5c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e018      	b.n	8003c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	daf2      	bge.n	8003bf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2210      	movs	r2, #16
 8003c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <USB_FlushRxFifo+0x5c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e006      	b.n	8003c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d0f0      	beq.n	8003c14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	00030d40 	.word	0x00030d40

08003c44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0306 	and.w	r3, r3, #6
 8003c8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
 8003c9a:	e00a      	b.n	8003cb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d002      	beq.n	8003ca8 <USB_GetDevSpeed+0x32>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d102      	bne.n	8003cae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	75fb      	strb	r3, [r7, #23]
 8003cac:	e001      	b.n	8003cb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cae:	230f      	movs	r3, #15
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d13a      	bne.n	8003d52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d155      	bne.n	8003dc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	791b      	ldrb	r3, [r3, #4]
 8003d2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	059b      	lsls	r3, r3, #22
 8003d36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e036      	b.n	8003dc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11a      	bne.n	8003dc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	791b      	ldrb	r3, [r3, #4]
 8003da4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003da6:	430b      	orrs	r3, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d161      	bne.n	8003eb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e02:	d11f      	bne.n	8003e44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e64:	4013      	ands	r3, r2
 8003e66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	0159      	lsls	r1, r3, #5
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <USB_DeactivateEndpoint+0x1b0>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
 8003eae:	e060      	b.n	8003f72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec6:	d11f      	bne.n	8003f08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ee6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	2101      	movs	r1, #1
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	43db      	mvns	r3, r3
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f28:	4013      	ands	r3, r2
 8003f2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	43db      	mvns	r3, r3
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	0159      	lsls	r1, r3, #5
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	440b      	add	r3, r1
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <USB_DeactivateEndpoint+0x1b4>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	ec337800 	.word	0xec337800
 8003f84:	eff37800 	.word	0xeff37800

08003f88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 815c 	bne.w	8004262 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d132      	bne.n	8004018 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	0151      	lsls	r1, r2, #5
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	440a      	add	r2, r1
 8003fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004010:	0cdb      	lsrs	r3, r3, #19
 8004012:	04db      	lsls	r3, r3, #19
 8004014:	6113      	str	r3, [r2, #16]
 8004016:	e074      	b.n	8004102 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004032:	0cdb      	lsrs	r3, r3, #19
 8004034:	04db      	lsls	r3, r3, #19
 8004036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800405a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	440b      	add	r3, r1
 8004074:	1e59      	subs	r1, r3, #1
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	fbb1 f3f3 	udiv	r3, r1, r3
 800407e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004080:	4b9d      	ldr	r3, [pc, #628]	; (80042f8 <USB_EPStartXfer+0x370>)
 8004082:	400b      	ands	r3, r1
 8004084:	69b9      	ldr	r1, [r7, #24]
 8004086:	0148      	lsls	r0, r1, #5
 8004088:	69f9      	ldr	r1, [r7, #28]
 800408a:	4401      	add	r1, r0
 800408c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040aa:	69b9      	ldr	r1, [r7, #24]
 80040ac:	0148      	lsls	r0, r1, #5
 80040ae:	69f9      	ldr	r1, [r7, #28]
 80040b0:	4401      	add	r1, r0
 80040b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040b6:	4313      	orrs	r3, r2
 80040b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	791b      	ldrb	r3, [r3, #4]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d11f      	bne.n	8004102 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004100:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d14b      	bne.n	80041a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	461a      	mov	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	791b      	ldrb	r3, [r3, #4]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d128      	bne.n	800417e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d110      	bne.n	800415e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	e00f      	b.n	800417e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004198:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e133      	b.n	8004408 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	791b      	ldrb	r3, [r3, #4]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d015      	beq.n	80041f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 811b 	beq.w	8004408 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	69f9      	ldr	r1, [r7, #28]
 80041ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ee:	4313      	orrs	r3, r2
 80041f0:	634b      	str	r3, [r1, #52]	; 0x34
 80041f2:	e109      	b.n	8004408 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d110      	bne.n	8004226 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e00f      	b.n	8004246 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6919      	ldr	r1, [r3, #16]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	b298      	uxth	r0, r3
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	4603      	mov	r3, r0
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fade 	bl	800481c <USB_WritePacket>
 8004260:	e0d2      	b.n	8004408 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	0151      	lsls	r1, r2, #5
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	440a      	add	r2, r1
 8004278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427c:	0cdb      	lsrs	r3, r3, #19
 800427e:	04db      	lsls	r3, r3, #19
 8004280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800429c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d126      	bne.n	80042fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c4:	69b9      	ldr	r1, [r7, #24]
 80042c6:	0148      	lsls	r0, r1, #5
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	4401      	add	r1, r0
 80042cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042d0:	4313      	orrs	r3, r2
 80042d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042f2:	6113      	str	r3, [r2, #16]
 80042f4:	e03a      	b.n	800436c <USB_EPStartXfer+0x3e4>
 80042f6:	bf00      	nop
 80042f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4413      	add	r3, r2
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	8afa      	ldrh	r2, [r7, #22]
 8004318:	fb03 f202 	mul.w	r2, r3, r2
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	8afb      	ldrh	r3, [r7, #22]
 8004330:	04d9      	lsls	r1, r3, #19
 8004332:	4b38      	ldr	r3, [pc, #224]	; (8004414 <USB_EPStartXfer+0x48c>)
 8004334:	400b      	ands	r3, r1
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	0148      	lsls	r0, r1, #5
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	4401      	add	r1, r0
 800433e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004342:	4313      	orrs	r3, r2
 8004344:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435c:	69b9      	ldr	r1, [r7, #24]
 800435e:	0148      	lsls	r0, r1, #5
 8004360:	69f9      	ldr	r1, [r7, #28]
 8004362:	4401      	add	r1, r0
 8004364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10d      	bne.n	800438e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	460a      	mov	r2, r1
 800438c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	791b      	ldrb	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d128      	bne.n	80043e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d110      	bne.n	80043c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	0151      	lsls	r1, r2, #5
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	440a      	add	r2, r1
 80043bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e00f      	b.n	80043e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	0151      	lsls	r1, r2, #5
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	440a      	add	r2, r1
 80043fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	1ff80000 	.word	0x1ff80000

08004418 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	2b01      	cmp	r3, #1
 8004436:	f040 80ce 	bne.w	80045d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d132      	bne.n	80044a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	440a      	add	r2, r1
 8004458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004460:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	440a      	add	r2, r1
 800447c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	440a      	add	r2, r1
 800449c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a0:	0cdb      	lsrs	r3, r3, #19
 80044a2:	04db      	lsls	r3, r3, #19
 80044a4:	6113      	str	r3, [r2, #16]
 80044a6:	e04e      	b.n	8004546 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c2:	0cdb      	lsrs	r3, r3, #19
 80044c4:	04db      	lsls	r3, r3, #19
 80044c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	699a      	ldr	r2, [r3, #24]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d903      	bls.n	8004500 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800451e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004536:	6939      	ldr	r1, [r7, #16]
 8004538:	0148      	lsls	r0, r1, #5
 800453a:	6979      	ldr	r1, [r7, #20]
 800453c:	4401      	add	r1, r0
 800453e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d11e      	bne.n	800458a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e097      	b.n	80046ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8083 	beq.w	80046ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d0:	4313      	orrs	r3, r2
 80045d2:	634b      	str	r3, [r1, #52]	; 0x34
 80045d4:	e071      	b.n	80046ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f0:	0cdb      	lsrs	r3, r3, #19
 80045f2:	04db      	lsls	r3, r3, #19
 80045f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004614:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004618:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	0148      	lsls	r0, r1, #5
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	4401      	add	r1, r0
 8004670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10d      	bne.n	800469a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6919      	ldr	r1, [r3, #16]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	460a      	mov	r2, r1
 8004698:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d14a      	bne.n	800477c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046fe:	f040 8086 	bne.w	800480e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	7812      	ldrb	r2, [r2, #0]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004724:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004748:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f242 7210 	movw	r2, #10000	; 0x2710
 8004756:	4293      	cmp	r3, r2
 8004758:	d902      	bls.n	8004760 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
          break;
 800475e:	e056      	b.n	800480e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004778:	d0e7      	beq.n	800474a <USB_EPStopXfer+0x82>
 800477a:	e048      	b.n	800480e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004794:	d13b      	bne.n	800480e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d902      	bls.n	80047f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
          break;
 80047f2:	e00c      	b.n	800480e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480c:	d0e7      	beq.n	80047de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800480e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004810:	4618      	mov	r0, r3
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4611      	mov	r1, r2
 8004828:	461a      	mov	r2, r3
 800482a:	460b      	mov	r3, r1
 800482c:	71fb      	strb	r3, [r7, #7]
 800482e:	4613      	mov	r3, r2
 8004830:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800483a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d123      	bne.n	800488a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004842:	88bb      	ldrh	r3, [r7, #4]
 8004844:	3303      	adds	r3, #3
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e018      	b.n	8004882 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	031a      	lsls	r2, r3, #12
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	461a      	mov	r2, r3
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3301      	adds	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3301      	adds	r3, #1
 800486e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	3301      	adds	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	3301      	adds	r3, #1
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	d3e2      	bcc.n	8004850 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3724      	adds	r7, #36	; 0x24
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004898:	b480      	push	{r7}
 800489a:	b08b      	sub	sp, #44	; 0x2c
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	e014      	b.n	80048ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	3301      	adds	r3, #1
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	3301      	adds	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	3301      	adds	r3, #1
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	3301      	adds	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	3301      	adds	r3, #1
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3e6      	bcc.n	80048c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048f6:	8bfb      	ldrh	r3, [r7, #30]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01e      	beq.n	800493a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004906:	461a      	mov	r2, r3
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
 800491c:	b2da      	uxtb	r2, r3
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	701a      	strb	r2, [r3, #0]
      i++;
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	3301      	adds	r3, #1
 8004926:	623b      	str	r3, [r7, #32]
      pDest++;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	3301      	adds	r3, #1
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800492e:	8bfb      	ldrh	r3, [r7, #30]
 8004930:	3b01      	subs	r3, #1
 8004932:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004934:	8bfb      	ldrh	r3, [r7, #30]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ea      	bne.n	8004910 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800493c:	4618      	mov	r0, r3
 800493e:	372c      	adds	r7, #44	; 0x2c
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d12c      	bne.n	80049be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	db12      	blt.n	800499c <USB_EPSetStall+0x54>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00f      	beq.n	800499c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004996:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800499a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e02b      	b.n	8004a16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	db12      	blt.n	80049f6 <USB_EPSetStall+0xae>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00f      	beq.n	80049f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d128      	bne.n	8004a92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	791b      	ldrb	r3, [r3, #4]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d003      	beq.n	8004a70 <USB_EPClearStall+0x4c>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d138      	bne.n	8004ae2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e027      	b.n	8004ae2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ab0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	791b      	ldrb	r3, [r3, #4]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d003      	beq.n	8004ac2 <USB_EPClearStall+0x9e>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	791b      	ldrb	r3, [r3, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d10f      	bne.n	8004ae2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b6a:	f023 0302 	bic.w	r3, r3, #2
 8004b6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	b29b      	uxth	r3, r3
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	01db      	lsls	r3, r3, #7
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d20:	f023 0307 	bic.w	r3, r3, #7
 8004d24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	460b      	mov	r3, r1
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	333c      	adds	r3, #60	; 0x3c
 8004d5e:	3304      	adds	r3, #4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <USB_EP0_OutStart+0xb8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d90a      	bls.n	8004d82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7c:	d101      	bne.n	8004d82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e037      	b.n	8004df2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db0:	f043 0318 	orr.w	r3, r3, #24
 8004db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004dc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004dca:	7afb      	ldrb	r3, [r7, #11]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10f      	bne.n	8004df0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004dee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	4f54300a 	.word	0x4f54300a

08004e04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <USB_CoreReset+0x64>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e01b      	b.n	8004e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	daf2      	bge.n	8004e10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f043 0201 	orr.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <USB_CoreReset+0x64>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d0f0      	beq.n	8004e3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	00030d40 	.word	0x00030d40

08004e6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e7c:	f002 fd34 	bl	80078e8 <USBD_static_malloc>
 8004e80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	32b0      	adds	r2, #176	; 0xb0
 8004e92:	2100      	movs	r1, #0
 8004e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0d4      	b.n	8005046 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f002 fd88 	bl	80079b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	32b0      	adds	r2, #176	; 0xb0
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32b0      	adds	r2, #176	; 0xb0
 8004ec2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7c1b      	ldrb	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d138      	bne.n	8004f46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ed4:	4b5e      	ldr	r3, [pc, #376]	; (8005050 <USBD_CDC_Init+0x1e4>)
 8004ed6:	7819      	ldrb	r1, [r3, #0]
 8004ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004edc:	2202      	movs	r2, #2
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f002 fb91 	bl	8007606 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ee4:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <USBD_CDC_Init+0x1e4>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3324      	adds	r3, #36	; 0x24
 8004efa:	2201      	movs	r2, #1
 8004efc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004efe:	4b55      	ldr	r3, [pc, #340]	; (8005054 <USBD_CDC_Init+0x1e8>)
 8004f00:	7819      	ldrb	r1, [r3, #0]
 8004f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f06:	2202      	movs	r2, #2
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f002 fb7c 	bl	8007606 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f0e:	4b51      	ldr	r3, [pc, #324]	; (8005054 <USBD_CDC_Init+0x1e8>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	f003 020f 	and.w	r2, r3, #15
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f26:	2201      	movs	r2, #1
 8004f28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f2a:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <USBD_CDC_Init+0x1ec>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f003 020f 	and.w	r2, r3, #15
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	3326      	adds	r3, #38	; 0x26
 8004f40:	2210      	movs	r2, #16
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	e035      	b.n	8004fb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f46:	4b42      	ldr	r3, [pc, #264]	; (8005050 <USBD_CDC_Init+0x1e4>)
 8004f48:	7819      	ldrb	r1, [r3, #0]
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f002 fb59 	bl	8007606 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f54:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <USBD_CDC_Init+0x1e4>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f003 020f 	and.w	r2, r3, #15
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	3324      	adds	r3, #36	; 0x24
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f6e:	4b39      	ldr	r3, [pc, #228]	; (8005054 <USBD_CDC_Init+0x1e8>)
 8004f70:	7819      	ldrb	r1, [r3, #0]
 8004f72:	2340      	movs	r3, #64	; 0x40
 8004f74:	2202      	movs	r2, #2
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f002 fb45 	bl	8007606 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f7c:	4b35      	ldr	r3, [pc, #212]	; (8005054 <USBD_CDC_Init+0x1e8>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 020f 	and.w	r2, r3, #15
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f94:	2201      	movs	r2, #1
 8004f96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f98:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <USBD_CDC_Init+0x1ec>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 020f 	and.w	r2, r3, #15
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	3326      	adds	r3, #38	; 0x26
 8004fae:	2210      	movs	r2, #16
 8004fb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <USBD_CDC_Init+0x1ec>)
 8004fb4:	7819      	ldrb	r1, [r3, #0]
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	2203      	movs	r2, #3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f002 fb23 	bl	8007606 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <USBD_CDC_Init+0x1ec>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f003 020f 	and.w	r2, r3, #15
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3324      	adds	r3, #36	; 0x24
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	33b0      	adds	r3, #176	; 0xb0
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005010:	2302      	movs	r3, #2
 8005012:	e018      	b.n	8005046 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7c1b      	ldrb	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <USBD_CDC_Init+0x1e8>)
 800501e:	7819      	ldrb	r1, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f002 fbda 	bl	80077e4 <USBD_LL_PrepareReceive>
 8005030:	e008      	b.n	8005044 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <USBD_CDC_Init+0x1e8>)
 8005034:	7819      	ldrb	r1, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f002 fbd0 	bl	80077e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000093 	.word	0x20000093
 8005054:	20000094 	.word	0x20000094
 8005058:	20000095 	.word	0x20000095

0800505c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005068:	4b3a      	ldr	r3, [pc, #232]	; (8005154 <USBD_CDC_DeInit+0xf8>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f002 faef 	bl	8007652 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005074:	4b37      	ldr	r3, [pc, #220]	; (8005154 <USBD_CDC_DeInit+0xf8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	3324      	adds	r3, #36	; 0x24
 800508a:	2200      	movs	r2, #0
 800508c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800508e:	4b32      	ldr	r3, [pc, #200]	; (8005158 <USBD_CDC_DeInit+0xfc>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f002 fadc 	bl	8007652 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <USBD_CDC_DeInit+0xfc>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050b2:	2200      	movs	r2, #0
 80050b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80050b6:	4b29      	ldr	r3, [pc, #164]	; (800515c <USBD_CDC_DeInit+0x100>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f002 fac8 	bl	8007652 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80050c2:	4b26      	ldr	r3, [pc, #152]	; (800515c <USBD_CDC_DeInit+0x100>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	2200      	movs	r2, #0
 80050da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <USBD_CDC_DeInit+0x100>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 020f 	and.w	r2, r3, #15
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3326      	adds	r3, #38	; 0x26
 80050f2:	2200      	movs	r2, #0
 80050f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	32b0      	adds	r2, #176	; 0xb0
 8005100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01f      	beq.n	8005148 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	33b0      	adds	r3, #176	; 0xb0
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	32b0      	adds	r2, #176	; 0xb0
 8005126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512a:	4618      	mov	r0, r3
 800512c:	f002 fbea 	bl	8007904 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	32b0      	adds	r2, #176	; 0xb0
 800513a:	2100      	movs	r1, #0
 800513c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000093 	.word	0x20000093
 8005158:	20000094 	.word	0x20000094
 800515c:	20000095 	.word	0x20000095

08005160 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	32b0      	adds	r2, #176	; 0xb0
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800518c:	2303      	movs	r3, #3
 800518e:	e0bf      	b.n	8005310 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005198:	2b00      	cmp	r3, #0
 800519a:	d050      	beq.n	800523e <USBD_CDC_Setup+0xde>
 800519c:	2b20      	cmp	r3, #32
 800519e:	f040 80af 	bne.w	8005300 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	88db      	ldrh	r3, [r3, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d03a      	beq.n	8005220 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b25b      	sxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	da1b      	bge.n	80051ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	33b0      	adds	r3, #176	; 0xb0
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80051ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	88d2      	ldrh	r2, [r2, #6]
 80051d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	88db      	ldrh	r3, [r3, #6]
 80051d6:	2b07      	cmp	r3, #7
 80051d8:	bf28      	it	cs
 80051da:	2307      	movcs	r3, #7
 80051dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	89fa      	ldrh	r2, [r7, #14]
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 fdb3 	bl	8006d50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051ea:	e090      	b.n	800530e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	785a      	ldrb	r2, [r3, #1]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	88db      	ldrh	r3, [r3, #6]
 80051fa:	2b3f      	cmp	r3, #63	; 0x3f
 80051fc:	d803      	bhi.n	8005206 <USBD_CDC_Setup+0xa6>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	88db      	ldrh	r3, [r3, #6]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	e000      	b.n	8005208 <USBD_CDC_Setup+0xa8>
 8005206:	2240      	movs	r2, #64	; 0x40
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800520e:	6939      	ldr	r1, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005216:	461a      	mov	r2, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 fdc5 	bl	8006da8 <USBD_CtlPrepareRx>
      break;
 800521e:	e076      	b.n	800530e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	33b0      	adds	r3, #176	; 0xb0
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	7850      	ldrb	r0, [r2, #1]
 8005236:	2200      	movs	r2, #0
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	4798      	blx	r3
      break;
 800523c:	e067      	b.n	800530e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b0b      	cmp	r3, #11
 8005244:	d851      	bhi.n	80052ea <USBD_CDC_Setup+0x18a>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <USBD_CDC_Setup+0xec>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	0800527d 	.word	0x0800527d
 8005250:	080052f9 	.word	0x080052f9
 8005254:	080052eb 	.word	0x080052eb
 8005258:	080052eb 	.word	0x080052eb
 800525c:	080052eb 	.word	0x080052eb
 8005260:	080052eb 	.word	0x080052eb
 8005264:	080052eb 	.word	0x080052eb
 8005268:	080052eb 	.word	0x080052eb
 800526c:	080052eb 	.word	0x080052eb
 8005270:	080052eb 	.word	0x080052eb
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052d1 	.word	0x080052d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b03      	cmp	r3, #3
 8005286:	d107      	bne.n	8005298 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005288:	f107 030a 	add.w	r3, r7, #10
 800528c:	2202      	movs	r2, #2
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fd5d 	bl	8006d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005296:	e032      	b.n	80052fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 fce7 	bl	8006c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80052a0:	2303      	movs	r3, #3
 80052a2:	75fb      	strb	r3, [r7, #23]
          break;
 80052a4:	e02b      	b.n	80052fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d107      	bne.n	80052c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80052b2:	f107 030d 	add.w	r3, r7, #13
 80052b6:	2201      	movs	r2, #1
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fd48 	bl	8006d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052c0:	e01d      	b.n	80052fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fcd2 	bl	8006c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80052ca:	2303      	movs	r3, #3
 80052cc:	75fb      	strb	r3, [r7, #23]
          break;
 80052ce:	e016      	b.n	80052fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d00f      	beq.n	80052fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fcc5 	bl	8006c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80052e4:	2303      	movs	r3, #3
 80052e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052e8:	e008      	b.n	80052fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 fcbe 	bl	8006c6e <USBD_CtlError>
          ret = USBD_FAIL;
 80052f2:	2303      	movs	r3, #3
 80052f4:	75fb      	strb	r3, [r7, #23]
          break;
 80052f6:	e002      	b.n	80052fe <USBD_CDC_Setup+0x19e>
          break;
 80052f8:	bf00      	nop
 80052fa:	e008      	b.n	800530e <USBD_CDC_Setup+0x1ae>
          break;
 80052fc:	bf00      	nop
      }
      break;
 80052fe:	e006      	b.n	800530e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fcb3 	bl	8006c6e <USBD_CtlError>
      ret = USBD_FAIL;
 8005308:	2303      	movs	r3, #3
 800530a:	75fb      	strb	r3, [r7, #23]
      break;
 800530c:	bf00      	nop
  }

  return (uint8_t)ret;
 800530e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800532a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	32b0      	adds	r2, #176	; 0xb0
 8005336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800533e:	2303      	movs	r3, #3
 8005340:	e065      	b.n	800540e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	32b0      	adds	r2, #176	; 0xb0
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	f003 020f 	and.w	r2, r3, #15
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	3318      	adds	r3, #24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02f      	beq.n	80053cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	f003 020f 	and.w	r2, r3, #15
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	3318      	adds	r3, #24
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 010f 	and.w	r1, r3, #15
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	460b      	mov	r3, r1
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4403      	add	r3, r0
 8005394:	3348      	adds	r3, #72	; 0x48
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	fbb2 f1f3 	udiv	r1, r2, r3
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d112      	bne.n	80053cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	f003 020f 	and.w	r2, r3, #15
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3318      	adds	r3, #24
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80053be:	78f9      	ldrb	r1, [r7, #3]
 80053c0:	2300      	movs	r3, #0
 80053c2:	2200      	movs	r2, #0
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f002 f9ec 	bl	80077a2 <USBD_LL_Transmit>
 80053ca:	e01f      	b.n	800540c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	33b0      	adds	r3, #176	; 0xb0
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d010      	beq.n	800540c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	33b0      	adds	r3, #176	; 0xb0
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	32b0      	adds	r2, #176	; 0xb0
 800542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005430:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	32b0      	adds	r2, #176	; 0xb0
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	e01a      	b.n	800547e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f002 f9ea 	bl	8007826 <USBD_LL_GetRxDataSize>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	33b0      	adds	r3, #176	; 0xb0
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005478:	4611      	mov	r1, r2
 800547a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	32b0      	adds	r2, #176	; 0xb0
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e025      	b.n	80054f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	33b0      	adds	r3, #176	; 0xb0
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <USBD_CDC_EP0_RxReady+0x6c>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054c2:	2bff      	cmp	r3, #255	; 0xff
 80054c4:	d015      	beq.n	80054f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	33b0      	adds	r3, #176	; 0xb0
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054e6:	b292      	uxth	r2, r2
 80054e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	22ff      	movs	r2, #255	; 0xff
 80054ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005504:	2182      	movs	r1, #130	; 0x82
 8005506:	4818      	ldr	r0, [pc, #96]	; (8005568 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005508:	f000 fd4f 	bl	8005faa <USBD_GetEpDesc>
 800550c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800550e:	2101      	movs	r1, #1
 8005510:	4815      	ldr	r0, [pc, #84]	; (8005568 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005512:	f000 fd4a 	bl	8005faa <USBD_GetEpDesc>
 8005516:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005518:	2181      	movs	r1, #129	; 0x81
 800551a:	4813      	ldr	r0, [pc, #76]	; (8005568 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800551c:	f000 fd45 	bl	8005faa <USBD_GetEpDesc>
 8005520:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2210      	movs	r2, #16
 800552c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2200      	movs	r2, #0
 8005538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800553c:	711a      	strb	r2, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005550:	711a      	strb	r2, [r3, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2243      	movs	r2, #67	; 0x43
 800555a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800555c:	4b02      	ldr	r3, [pc, #8]	; (8005568 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000050 	.word	0x20000050

0800556c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005574:	2182      	movs	r1, #130	; 0x82
 8005576:	4818      	ldr	r0, [pc, #96]	; (80055d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005578:	f000 fd17 	bl	8005faa <USBD_GetEpDesc>
 800557c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800557e:	2101      	movs	r1, #1
 8005580:	4815      	ldr	r0, [pc, #84]	; (80055d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005582:	f000 fd12 	bl	8005faa <USBD_GetEpDesc>
 8005586:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005588:	2181      	movs	r1, #129	; 0x81
 800558a:	4813      	ldr	r0, [pc, #76]	; (80055d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800558c:	f000 fd0d 	bl	8005faa <USBD_GetEpDesc>
 8005590:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2210      	movs	r2, #16
 800559c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d006      	beq.n	80055b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2200      	movs	r2, #0
 80055a8:	711a      	strb	r2, [r3, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f042 0202 	orr.w	r2, r2, #2
 80055b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	711a      	strb	r2, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f042 0202 	orr.w	r2, r2, #2
 80055c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2243      	movs	r2, #67	; 0x43
 80055ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055cc:	4b02      	ldr	r3, [pc, #8]	; (80055d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000050 	.word	0x20000050

080055dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055e4:	2182      	movs	r1, #130	; 0x82
 80055e6:	4818      	ldr	r0, [pc, #96]	; (8005648 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055e8:	f000 fcdf 	bl	8005faa <USBD_GetEpDesc>
 80055ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055ee:	2101      	movs	r1, #1
 80055f0:	4815      	ldr	r0, [pc, #84]	; (8005648 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055f2:	f000 fcda 	bl	8005faa <USBD_GetEpDesc>
 80055f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055f8:	2181      	movs	r1, #129	; 0x81
 80055fa:	4813      	ldr	r0, [pc, #76]	; (8005648 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055fc:	f000 fcd5 	bl	8005faa <USBD_GetEpDesc>
 8005600:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2210      	movs	r2, #16
 800560c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d006      	beq.n	8005622 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2200      	movs	r2, #0
 8005618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561c:	711a      	strb	r2, [r3, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005630:	711a      	strb	r2, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2243      	movs	r2, #67	; 0x43
 800563a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000050 	.word	0x20000050

0800564c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	220a      	movs	r2, #10
 8005658:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800565a:	4b03      	ldr	r3, [pc, #12]	; (8005668 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	2000000c 	.word	0x2000000c

0800566c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800567c:	2303      	movs	r3, #3
 800567e:	e009      	b.n	8005694 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	33b0      	adds	r3, #176	; 0xb0
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	32b0      	adds	r2, #176	; 0xb0
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e008      	b.n	80056d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	32b0      	adds	r2, #176	; 0xb0
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005704:	2303      	movs	r3, #3
 8005706:	e004      	b.n	8005712 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	32b0      	adds	r2, #176	; 0xb0
 8005732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005736:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	32b0      	adds	r2, #176	; 0xb0
 8005746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800574e:	2303      	movs	r3, #3
 8005750:	e025      	b.n	800579e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005758:	2b00      	cmp	r3, #0
 800575a:	d11f      	bne.n	800579c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2201      	movs	r2, #1
 8005760:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005764:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <USBD_CDC_TransmitPacket+0x88>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 020f 	and.w	r2, r3, #15
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4403      	add	r3, r0
 800577e:	3318      	adds	r3, #24
 8005780:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <USBD_CDC_TransmitPacket+0x88>)
 8005784:	7819      	ldrb	r1, [r3, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 f805 	bl	80077a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000093 	.word	0x20000093

080057ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32b0      	adds	r2, #176	; 0xb0
 80057be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	32b0      	adds	r2, #176	; 0xb0
 80057ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e018      	b.n	800580c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7c1b      	ldrb	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <USBD_CDC_ReceivePacket+0x68>)
 80057e4:	7819      	ldrb	r1, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fff7 	bl	80077e4 <USBD_LL_PrepareReceive>
 80057f6:	e008      	b.n	800580a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <USBD_CDC_ReceivePacket+0x68>)
 80057fa:	7819      	ldrb	r1, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005802:	2340      	movs	r3, #64	; 0x40
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 ffed 	bl	80077e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000094 	.word	0x20000094

08005818 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800582c:	2303      	movs	r3, #3
 800582e:	e01f      	b.n	8005870 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	79fa      	ldrb	r2, [r7, #7]
 8005862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f001 fe67 	bl	8007538 <USBD_LL_Init>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800588c:	2303      	movs	r3, #3
 800588e:	e025      	b.n	80058dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	32ae      	adds	r2, #174	; 0xae
 80058a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00f      	beq.n	80058cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	32ae      	adds	r2, #174	; 0xae
 80058b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	f107 020e 	add.w	r2, r7, #14
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
 80058c4:	4602      	mov	r2, r0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fe6f 	bl	80075d0 <USBD_LL_Start>
 80058f2:	4603      	mov	r3, r0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005904:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	460b      	mov	r3, r1
 800591c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	4611      	mov	r1, r2
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
 800593c:	4603      	mov	r3, r0
 800593e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	4611      	mov	r1, r2
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005970:	2303      	movs	r3, #3
 8005972:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f932 	bl	8006bfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d01a      	beq.n	80059f0 <USBD_LL_SetupStage+0x72>
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d822      	bhi.n	8005a04 <USBD_LL_SetupStage+0x86>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <USBD_LL_SetupStage+0x4a>
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d00a      	beq.n	80059dc <USBD_LL_SetupStage+0x5e>
 80059c6:	e01d      	b.n	8005a04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fb5f 	bl	8006094 <USBD_StdDevReq>
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
      break;
 80059da:	e020      	b.n	8005a1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fbc7 	bl	8006178 <USBD_StdItfReq>
 80059ea:	4603      	mov	r3, r0
 80059ec:	73fb      	strb	r3, [r7, #15]
      break;
 80059ee:	e016      	b.n	8005a1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fc29 	bl	8006250 <USBD_StdEPReq>
 80059fe:	4603      	mov	r3, r0
 8005a00:	73fb      	strb	r3, [r7, #15]
      break;
 8005a02:	e00c      	b.n	8005a1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fe3c 	bl	8007690 <USBD_LL_StallEP>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	bf00      	nop
  }

  return ret;
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	460b      	mov	r3, r1
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d16e      	bne.n	8005b1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	f040 8098 	bne.w	8005b84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d913      	bls.n	8005a88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	1ad2      	subs	r2, r2, r3
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	4293      	cmp	r3, r2
 8005a78:	bf28      	it	cs
 8005a7a:	4613      	movcs	r3, r2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f001 f9ae 	bl	8006de2 <USBD_CtlContinueRx>
 8005a86:	e07d      	b.n	8005b84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d014      	beq.n	8005ac0 <USBD_LL_DataOutStage+0x98>
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d81d      	bhi.n	8005ad6 <USBD_LL_DataOutStage+0xae>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <USBD_LL_DataOutStage+0x7c>
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d003      	beq.n	8005aaa <USBD_LL_DataOutStage+0x82>
 8005aa2:	e018      	b.n	8005ad6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8005aa8:	e018      	b.n	8005adc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fa5e 	bl	8005f76 <USBD_CoreFindIF>
 8005aba:	4603      	mov	r3, r0
 8005abc:	75bb      	strb	r3, [r7, #22]
            break;
 8005abe:	e00d      	b.n	8005adc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	4619      	mov	r1, r3
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa60 	bl	8005f90 <USBD_CoreFindEP>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ad4:	e002      	b.n	8005adc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75bb      	strb	r3, [r7, #22]
            break;
 8005ada:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005adc:	7dbb      	ldrb	r3, [r7, #22]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d119      	bne.n	8005b16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d113      	bne.n	8005b16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005aee:	7dba      	ldrb	r2, [r7, #22]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	32ae      	adds	r2, #174	; 0xae
 8005af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005afe:	7dba      	ldrb	r2, [r7, #22]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b06:	7dba      	ldrb	r2, [r7, #22]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	32ae      	adds	r2, #174	; 0xae
 8005b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f001 f974 	bl	8006e04 <USBD_CtlSendStatus>
 8005b1c:	e032      	b.n	8005b84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fa31 	bl	8005f90 <USBD_CoreFindEP>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b32:	7dbb      	ldrb	r3, [r7, #22]
 8005b34:	2bff      	cmp	r3, #255	; 0xff
 8005b36:	d025      	beq.n	8005b84 <USBD_LL_DataOutStage+0x15c>
 8005b38:	7dbb      	ldrb	r3, [r7, #22]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d122      	bne.n	8005b84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d117      	bne.n	8005b7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b4a:	7dba      	ldrb	r2, [r7, #22]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	32ae      	adds	r2, #174	; 0xae
 8005b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00f      	beq.n	8005b7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b5a:	7dba      	ldrb	r2, [r7, #22]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b62:	7dba      	ldrb	r2, [r7, #22]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	32ae      	adds	r2, #174	; 0xae
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	7afa      	ldrb	r2, [r7, #11]
 8005b70:	4611      	mov	r1, r2
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	4798      	blx	r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	e000      	b.n	8005b86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	460b      	mov	r3, r1
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d16f      	bne.n	8005c82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d15a      	bne.n	8005c68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d914      	bls.n	8005be8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f001 f8d6 	bl	8006d86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2100      	movs	r1, #0
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f001 fdff 	bl	80077e4 <USBD_LL_PrepareReceive>
 8005be6:	e03f      	b.n	8005c68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d11c      	bne.n	8005c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d316      	bcc.n	8005c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20f      	bcs.n	8005c2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2100      	movs	r1, #0
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f001 f8b7 	bl	8006d86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c20:	2300      	movs	r3, #0
 8005c22:	2200      	movs	r2, #0
 8005c24:	2100      	movs	r1, #0
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f001 fddc 	bl	80077e4 <USBD_LL_PrepareReceive>
 8005c2c:	e01c      	b.n	8005c68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d10f      	bne.n	8005c5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f001 fd17 	bl	8007690 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f001 f8e1 	bl	8006e2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d03a      	beq.n	8005ce8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff fe42 	bl	80058fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c80:	e032      	b.n	8005ce8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f97f 	bl	8005f90 <USBD_CoreFindEP>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2bff      	cmp	r3, #255	; 0xff
 8005c9a:	d025      	beq.n	8005ce8 <USBD_LL_DataInStage+0x15a>
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d122      	bne.n	8005ce8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d11c      	bne.n	8005ce8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cae:	7dfa      	ldrb	r2, [r7, #23]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	32ae      	adds	r2, #174	; 0xae
 8005cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cbe:	7dfa      	ldrb	r2, [r7, #23]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cc6:	7dfa      	ldrb	r2, [r7, #23]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	32ae      	adds	r2, #174	; 0xae
 8005ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	7afa      	ldrb	r2, [r7, #11]
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	4798      	blx	r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cde:	7dbb      	ldrb	r3, [r7, #22]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ce4:	7dbb      	ldrb	r3, [r7, #22]
 8005ce6:	e000      	b.n	8005cea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00e      	beq.n	8005d58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6852      	ldr	r2, [r2, #4]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	4611      	mov	r1, r2
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d54:	2303      	movs	r3, #3
 8005d56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d58:	2340      	movs	r3, #64	; 0x40
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fc51 	bl	8007606 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2240      	movs	r2, #64	; 0x40
 8005d70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	2200      	movs	r2, #0
 8005d78:	2180      	movs	r1, #128	; 0x80
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fc43 	bl	8007606 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2240      	movs	r2, #64	; 0x40
 8005d8a:	621a      	str	r2, [r3, #32]

  return ret;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d106      	bne.n	8005e04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d110      	bne.n	8005e48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	32ae      	adds	r2, #174	; 0xae
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e01c      	b.n	8005eae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d115      	bne.n	8005eac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	32ae      	adds	r2, #174	; 0xae
 8005e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	32ae      	adds	r2, #174	; 0xae
 8005e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	32ae      	adds	r2, #174	; 0xae
 8005ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e01c      	b.n	8005f12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d115      	bne.n	8005f10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	32ae      	adds	r2, #174	; 0xae
 8005eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	32ae      	adds	r2, #174	; 0xae
 8005f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	78fa      	ldrb	r2, [r7, #3]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00e      	beq.n	8005f6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6852      	ldr	r2, [r2, #4]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	885b      	ldrh	r3, [r3, #2]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d920      	bls.n	8006014 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fda:	e013      	b.n	8006004 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fdc:	f107 030a 	add.w	r3, r7, #10
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6978      	ldr	r0, [r7, #20]
 8005fe4:	f000 f81b 	bl	800601e <USBD_GetNextDesc>
 8005fe8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d108      	bne.n	8006004 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	789b      	ldrb	r3, [r3, #2]
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d008      	beq.n	8006012 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	885b      	ldrh	r3, [r3, #2]
 8006008:	b29a      	uxth	r2, r3
 800600a:	897b      	ldrh	r3, [r7, #10]
 800600c:	429a      	cmp	r2, r3
 800600e:	d8e5      	bhi.n	8005fdc <USBD_GetEpDesc+0x32>
 8006010:	e000      	b.n	8006014 <USBD_GetEpDesc+0x6a>
          break;
 8006012:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006014:	693b      	ldr	r3, [r7, #16]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	881a      	ldrh	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	4413      	add	r3, r2
 8006038:	b29a      	uxth	r2, r3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	3301      	adds	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006076:	8a3b      	ldrh	r3, [r7, #16]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	b21a      	sxth	r2, r3
 800607c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006080:	4313      	orrs	r3, r2
 8006082:	b21b      	sxth	r3, r3
 8006084:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006086:	89fb      	ldrh	r3, [r7, #14]
}
 8006088:	4618      	mov	r0, r3
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d005      	beq.n	80060ba <USBD_StdDevReq+0x26>
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	d857      	bhi.n	8006162 <USBD_StdDevReq+0xce>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00f      	beq.n	80060d6 <USBD_StdDevReq+0x42>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d153      	bne.n	8006162 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	32ae      	adds	r2, #174	; 0xae
 80060c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
 80060d0:	4603      	mov	r3, r0
 80060d2:	73fb      	strb	r3, [r7, #15]
      break;
 80060d4:	e04a      	b.n	800616c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	2b09      	cmp	r3, #9
 80060dc:	d83b      	bhi.n	8006156 <USBD_StdDevReq+0xc2>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <USBD_StdDevReq+0x50>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006139 	.word	0x08006139
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	08006157 	.word	0x08006157
 80060f0:	08006143 	.word	0x08006143
 80060f4:	08006157 	.word	0x08006157
 80060f8:	08006117 	.word	0x08006117
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	08006157 	.word	0x08006157
 8006104:	0800612f 	.word	0x0800612f
 8006108:	08006121 	.word	0x08006121
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa3c 	bl	800658c <USBD_GetDescriptor>
          break;
 8006114:	e024      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fbcb 	bl	80068b4 <USBD_SetAddress>
          break;
 800611e:	e01f      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fc0a 	bl	800693c <USBD_SetConfig>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
          break;
 800612c:	e018      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fcad 	bl	8006a90 <USBD_GetConfig>
          break;
 8006136:	e013      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fcde 	bl	8006afc <USBD_GetStatus>
          break;
 8006140:	e00e      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fd0d 	bl	8006b64 <USBD_SetFeature>
          break;
 800614a:	e009      	b.n	8006160 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fd31 	bl	8006bb6 <USBD_ClrFeature>
          break;
 8006154:	e004      	b.n	8006160 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fd88 	bl	8006c6e <USBD_CtlError>
          break;
 800615e:	bf00      	nop
      }
      break;
 8006160:	e004      	b.n	800616c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fd82 	bl	8006c6e <USBD_CtlError>
      break;
 800616a:	bf00      	nop
  }

  return ret;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop

08006178 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d005      	beq.n	800619e <USBD_StdItfReq+0x26>
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d852      	bhi.n	800623c <USBD_StdItfReq+0xc4>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <USBD_StdItfReq+0x26>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d14e      	bne.n	800623c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d840      	bhi.n	800622e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	889b      	ldrh	r3, [r3, #4]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d836      	bhi.n	8006224 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	889b      	ldrh	r3, [r3, #4]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fed9 	bl	8005f76 <USBD_CoreFindIF>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	2bff      	cmp	r3, #255	; 0xff
 80061cc:	d01d      	beq.n	800620a <USBD_StdItfReq+0x92>
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11a      	bne.n	800620a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061d4:	7bba      	ldrb	r2, [r7, #14]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	32ae      	adds	r2, #174	; 0xae
 80061da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00f      	beq.n	8006204 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061e4:	7bba      	ldrb	r2, [r7, #14]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061ec:	7bba      	ldrb	r2, [r7, #14]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32ae      	adds	r2, #174	; 0xae
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006202:	e004      	b.n	800620e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006208:	e001      	b.n	800620e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	88db      	ldrh	r3, [r3, #6]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d110      	bne.n	8006238 <USBD_StdItfReq+0xc0>
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10d      	bne.n	8006238 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fdf1 	bl	8006e04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006222:	e009      	b.n	8006238 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fd21 	bl	8006c6e <USBD_CtlError>
          break;
 800622c:	e004      	b.n	8006238 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fd1c 	bl	8006c6e <USBD_CtlError>
          break;
 8006236:	e000      	b.n	800623a <USBD_StdItfReq+0xc2>
          break;
 8006238:	bf00      	nop
      }
      break;
 800623a:	e004      	b.n	8006246 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fd15 	bl	8006c6e <USBD_CtlError>
      break;
 8006244:	bf00      	nop
  }

  return ret;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	889b      	ldrh	r3, [r3, #4]
 8006262:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d007      	beq.n	8006280 <USBD_StdEPReq+0x30>
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	f200 817f 	bhi.w	8006574 <USBD_StdEPReq+0x324>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02a      	beq.n	80062d0 <USBD_StdEPReq+0x80>
 800627a:	2b20      	cmp	r3, #32
 800627c:	f040 817a 	bne.w	8006574 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fe83 	bl	8005f90 <USBD_CoreFindEP>
 800628a:	4603      	mov	r3, r0
 800628c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800628e:	7b7b      	ldrb	r3, [r7, #13]
 8006290:	2bff      	cmp	r3, #255	; 0xff
 8006292:	f000 8174 	beq.w	800657e <USBD_StdEPReq+0x32e>
 8006296:	7b7b      	ldrb	r3, [r7, #13]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 8170 	bne.w	800657e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800629e:	7b7a      	ldrb	r2, [r7, #13]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062a6:	7b7a      	ldrb	r2, [r7, #13]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32ae      	adds	r2, #174	; 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8163 	beq.w	800657e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062b8:	7b7a      	ldrb	r2, [r7, #13]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	32ae      	adds	r2, #174	; 0xae
 80062be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ce:	e156      	b.n	800657e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d008      	beq.n	80062ea <USBD_StdEPReq+0x9a>
 80062d8:	2b03      	cmp	r3, #3
 80062da:	f300 8145 	bgt.w	8006568 <USBD_StdEPReq+0x318>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 809b 	beq.w	800641a <USBD_StdEPReq+0x1ca>
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d03c      	beq.n	8006362 <USBD_StdEPReq+0x112>
 80062e8:	e13e      	b.n	8006568 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d002      	beq.n	80062fc <USBD_StdEPReq+0xac>
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d016      	beq.n	8006328 <USBD_StdEPReq+0xd8>
 80062fa:	e02c      	b.n	8006356 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00d      	beq.n	800631e <USBD_StdEPReq+0xce>
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b80      	cmp	r3, #128	; 0x80
 8006306:	d00a      	beq.n	800631e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f9bf 	bl	8007690 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f9bb 	bl	8007690 <USBD_LL_StallEP>
 800631a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800631c:	e020      	b.n	8006360 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fca4 	bl	8006c6e <USBD_CtlError>
              break;
 8006326:	e01b      	b.n	8006360 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	885b      	ldrh	r3, [r3, #2]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10e      	bne.n	800634e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <USBD_StdEPReq+0xfe>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b80      	cmp	r3, #128	; 0x80
 800633a:	d008      	beq.n	800634e <USBD_StdEPReq+0xfe>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	88db      	ldrh	r3, [r3, #6]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f9a1 	bl	8007690 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fd58 	bl	8006e04 <USBD_CtlSendStatus>

              break;
 8006354:	e004      	b.n	8006360 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fc88 	bl	8006c6e <USBD_CtlError>
              break;
 800635e:	bf00      	nop
          }
          break;
 8006360:	e107      	b.n	8006572 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d002      	beq.n	8006374 <USBD_StdEPReq+0x124>
 800636e:	2b03      	cmp	r3, #3
 8006370:	d016      	beq.n	80063a0 <USBD_StdEPReq+0x150>
 8006372:	e04b      	b.n	800640c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00d      	beq.n	8006396 <USBD_StdEPReq+0x146>
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b80      	cmp	r3, #128	; 0x80
 800637e:	d00a      	beq.n	8006396 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f983 	bl	8007690 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800638a:	2180      	movs	r1, #128	; 0x80
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f97f 	bl	8007690 <USBD_LL_StallEP>
 8006392:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006394:	e040      	b.n	8006418 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc68 	bl	8006c6e <USBD_CtlError>
              break;
 800639e:	e03b      	b.n	8006418 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	885b      	ldrh	r3, [r3, #2]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d136      	bne.n	8006416 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f989 	bl	80076ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fd21 	bl	8006e04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fde2 	bl	8005f90 <USBD_CoreFindEP>
 80063cc:	4603      	mov	r3, r0
 80063ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063d0:	7b7b      	ldrb	r3, [r7, #13]
 80063d2:	2bff      	cmp	r3, #255	; 0xff
 80063d4:	d01f      	beq.n	8006416 <USBD_StdEPReq+0x1c6>
 80063d6:	7b7b      	ldrb	r3, [r7, #13]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11c      	bne.n	8006416 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063dc:	7b7a      	ldrb	r2, [r7, #13]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063e4:	7b7a      	ldrb	r2, [r7, #13]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32ae      	adds	r2, #174	; 0xae
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063f4:	7b7a      	ldrb	r2, [r7, #13]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32ae      	adds	r2, #174	; 0xae
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800640a:	e004      	b.n	8006416 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fc2d 	bl	8006c6e <USBD_CtlError>
              break;
 8006414:	e000      	b.n	8006418 <USBD_StdEPReq+0x1c8>
              break;
 8006416:	bf00      	nop
          }
          break;
 8006418:	e0ab      	b.n	8006572 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d002      	beq.n	800642c <USBD_StdEPReq+0x1dc>
 8006426:	2b03      	cmp	r3, #3
 8006428:	d032      	beq.n	8006490 <USBD_StdEPReq+0x240>
 800642a:	e097      	b.n	800655c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <USBD_StdEPReq+0x1f2>
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d004      	beq.n	8006442 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fc17 	bl	8006c6e <USBD_CtlError>
                break;
 8006440:	e091      	b.n	8006566 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da0b      	bge.n	8006462 <USBD_StdEPReq+0x212>
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	3310      	adds	r3, #16
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	e00b      	b.n	800647a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	4413      	add	r3, r2
 8006478:	3304      	adds	r3, #4
 800647a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2202      	movs	r2, #2
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fc61 	bl	8006d50 <USBD_CtlSendData>
              break;
 800648e:	e06a      	b.n	8006566 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006494:	2b00      	cmp	r3, #0
 8006496:	da11      	bge.n	80064bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	f003 020f 	and.w	r2, r3, #15
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d117      	bne.n	80064e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fbda 	bl	8006c6e <USBD_CtlError>
                  break;
 80064ba:	e054      	b.n	8006566 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fbc7 	bl	8006c6e <USBD_CtlError>
                  break;
 80064e0:	e041      	b.n	8006566 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da0b      	bge.n	8006502 <USBD_StdEPReq+0x2b2>
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	3310      	adds	r3, #16
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	3304      	adds	r3, #4
 8006500:	e00b      	b.n	800651a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4413      	add	r3, r2
 8006518:	3304      	adds	r3, #4
 800651a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <USBD_StdEPReq+0x2d8>
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b80      	cmp	r3, #128	; 0x80
 8006526:	d103      	bne.n	8006530 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e00e      	b.n	800654e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 f8e9 	bl	800770c <USBD_LL_IsStallEP>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2201      	movs	r2, #1
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e002      	b.n	800654e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2202      	movs	r2, #2
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fbfb 	bl	8006d50 <USBD_CtlSendData>
              break;
 800655a:	e004      	b.n	8006566 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fb85 	bl	8006c6e <USBD_CtlError>
              break;
 8006564:	bf00      	nop
          }
          break;
 8006566:	e004      	b.n	8006572 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fb7f 	bl	8006c6e <USBD_CtlError>
          break;
 8006570:	bf00      	nop
      }
      break;
 8006572:	e005      	b.n	8006580 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fb79 	bl	8006c6e <USBD_CtlError>
      break;
 800657c:	e000      	b.n	8006580 <USBD_StdEPReq+0x330>
      break;
 800657e:	bf00      	nop
  }

  return ret;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	885b      	ldrh	r3, [r3, #2]
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	2b0e      	cmp	r3, #14
 80065ae:	f200 8152 	bhi.w	8006856 <USBD_GetDescriptor+0x2ca>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <USBD_GetDescriptor+0x2c>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	08006629 	.word	0x08006629
 80065bc:	08006641 	.word	0x08006641
 80065c0:	08006681 	.word	0x08006681
 80065c4:	08006857 	.word	0x08006857
 80065c8:	08006857 	.word	0x08006857
 80065cc:	080067f7 	.word	0x080067f7
 80065d0:	08006823 	.word	0x08006823
 80065d4:	08006857 	.word	0x08006857
 80065d8:	08006857 	.word	0x08006857
 80065dc:	08006857 	.word	0x08006857
 80065e0:	08006857 	.word	0x08006857
 80065e4:	08006857 	.word	0x08006857
 80065e8:	08006857 	.word	0x08006857
 80065ec:	08006857 	.word	0x08006857
 80065f0:	080065f5 	.word	0x080065f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	7c12      	ldrb	r2, [r2, #16]
 800660c:	f107 0108 	add.w	r1, r7, #8
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006616:	e126      	b.n	8006866 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fb27 	bl	8006c6e <USBD_CtlError>
        err++;
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	3301      	adds	r3, #1
 8006624:	72fb      	strb	r3, [r7, #11]
      break;
 8006626:	e11e      	b.n	8006866 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	7c12      	ldrb	r2, [r2, #16]
 8006634:	f107 0108 	add.w	r1, r7, #8
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3
 800663c:	60f8      	str	r0, [r7, #12]
      break;
 800663e:	e112      	b.n	8006866 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1b      	ldrb	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10d      	bne.n	8006664 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	f107 0208 	add.w	r2, r7, #8
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	2202      	movs	r2, #2
 8006660:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006662:	e100      	b.n	8006866 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	f107 0208 	add.w	r2, r7, #8
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
 8006674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	2202      	movs	r2, #2
 800667c:	701a      	strb	r2, [r3, #0]
      break;
 800667e:	e0f2      	b.n	8006866 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	885b      	ldrh	r3, [r3, #2]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b05      	cmp	r3, #5
 8006688:	f200 80ac 	bhi.w	80067e4 <USBD_GetDescriptor+0x258>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <USBD_GetDescriptor+0x108>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066ad 	.word	0x080066ad
 8006698:	080066e1 	.word	0x080066e1
 800669c:	08006715 	.word	0x08006715
 80066a0:	08006749 	.word	0x08006749
 80066a4:	0800677d 	.word	0x0800677d
 80066a8:	080067b1 	.word	0x080067b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	7c12      	ldrb	r2, [r2, #16]
 80066c4:	f107 0108 	add.w	r1, r7, #8
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
 80066cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ce:	e091      	b.n	80067f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 facb 	bl	8006c6e <USBD_CtlError>
            err++;
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	3301      	adds	r3, #1
 80066dc:	72fb      	strb	r3, [r7, #11]
          break;
 80066de:	e089      	b.n	80067f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	7c12      	ldrb	r2, [r2, #16]
 80066f8:	f107 0108 	add.w	r1, r7, #8
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006702:	e077      	b.n	80067f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fab1 	bl	8006c6e <USBD_CtlError>
            err++;
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	3301      	adds	r3, #1
 8006710:	72fb      	strb	r3, [r7, #11]
          break;
 8006712:	e06f      	b.n	80067f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	7c12      	ldrb	r2, [r2, #16]
 800672c:	f107 0108 	add.w	r1, r7, #8
 8006730:	4610      	mov	r0, r2
 8006732:	4798      	blx	r3
 8006734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006736:	e05d      	b.n	80067f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa97 	bl	8006c6e <USBD_CtlError>
            err++;
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	3301      	adds	r3, #1
 8006744:	72fb      	strb	r3, [r7, #11]
          break;
 8006746:	e055      	b.n	80067f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	7c12      	ldrb	r2, [r2, #16]
 8006760:	f107 0108 	add.w	r1, r7, #8
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676a:	e043      	b.n	80067f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa7d 	bl	8006c6e <USBD_CtlError>
            err++;
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	3301      	adds	r3, #1
 8006778:	72fb      	strb	r3, [r7, #11]
          break;
 800677a:	e03b      	b.n	80067f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7c12      	ldrb	r2, [r2, #16]
 8006794:	f107 0108 	add.w	r1, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679e:	e029      	b.n	80067f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa63 	bl	8006c6e <USBD_CtlError>
            err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
          break;
 80067ae:	e021      	b.n	80067f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	7c12      	ldrb	r2, [r2, #16]
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d2:	e00f      	b.n	80067f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa49 	bl	8006c6e <USBD_CtlError>
            err++;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	3301      	adds	r3, #1
 80067e0:	72fb      	strb	r3, [r7, #11]
          break;
 80067e2:	e007      	b.n	80067f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa41 	bl	8006c6e <USBD_CtlError>
          err++;
 80067ec:	7afb      	ldrb	r3, [r7, #11]
 80067ee:	3301      	adds	r3, #1
 80067f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067f2:	bf00      	nop
      }
      break;
 80067f4:	e037      	b.n	8006866 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	7c1b      	ldrb	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	f107 0208 	add.w	r2, r7, #8
 800680a:	4610      	mov	r0, r2
 800680c:	4798      	blx	r3
 800680e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006810:	e029      	b.n	8006866 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa2a 	bl	8006c6e <USBD_CtlError>
        err++;
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	3301      	adds	r3, #1
 800681e:	72fb      	strb	r3, [r7, #11]
      break;
 8006820:	e021      	b.n	8006866 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	7c1b      	ldrb	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10d      	bne.n	8006846 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	f107 0208 	add.w	r2, r7, #8
 8006836:	4610      	mov	r0, r2
 8006838:	4798      	blx	r3
 800683a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	2207      	movs	r2, #7
 8006842:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006844:	e00f      	b.n	8006866 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa10 	bl	8006c6e <USBD_CtlError>
        err++;
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	3301      	adds	r3, #1
 8006852:	72fb      	strb	r3, [r7, #11]
      break;
 8006854:	e007      	b.n	8006866 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa08 	bl	8006c6e <USBD_CtlError>
      err++;
 800685e:	7afb      	ldrb	r3, [r7, #11]
 8006860:	3301      	adds	r3, #1
 8006862:	72fb      	strb	r3, [r7, #11]
      break;
 8006864:	bf00      	nop
  }

  if (err != 0U)
 8006866:	7afb      	ldrb	r3, [r7, #11]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11e      	bne.n	80068aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	88db      	ldrh	r3, [r3, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d016      	beq.n	80068a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006874:	893b      	ldrh	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	88da      	ldrh	r2, [r3, #6]
 800687e:	893b      	ldrh	r3, [r7, #8]
 8006880:	4293      	cmp	r3, r2
 8006882:	bf28      	it	cs
 8006884:	4613      	movcs	r3, r2
 8006886:	b29b      	uxth	r3, r3
 8006888:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800688a:	893b      	ldrh	r3, [r7, #8]
 800688c:	461a      	mov	r2, r3
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fa5d 	bl	8006d50 <USBD_CtlSendData>
 8006896:	e009      	b.n	80068ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9e7 	bl	8006c6e <USBD_CtlError>
 80068a0:	e004      	b.n	80068ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 faae 	bl	8006e04 <USBD_CtlSendStatus>
 80068a8:	e000      	b.n	80068ac <USBD_GetDescriptor+0x320>
    return;
 80068aa:	bf00      	nop
  }
}
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop

080068b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	889b      	ldrh	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d131      	bne.n	800692a <USBD_SetAddress+0x76>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	88db      	ldrh	r3, [r3, #6]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d12d      	bne.n	800692a <USBD_SetAddress+0x76>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	885b      	ldrh	r3, [r3, #2]
 80068d2:	2b7f      	cmp	r3, #127	; 0x7f
 80068d4:	d829      	bhi.n	800692a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	885b      	ldrh	r3, [r3, #2]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d104      	bne.n	80068f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9bc 	bl	8006c6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	e01d      	b.n	8006934 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 ff2d 	bl	8007764 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa7a 	bl	8006e04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691e:	e009      	b.n	8006934 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006928:	e004      	b.n	8006934 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f99e 	bl	8006c6e <USBD_CtlError>
  }
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	885b      	ldrh	r3, [r3, #2]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	4b4e      	ldr	r3, [pc, #312]	; (8006a8c <USBD_SetConfig+0x150>)
 8006952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006954:	4b4d      	ldr	r3, [pc, #308]	; (8006a8c <USBD_SetConfig+0x150>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d905      	bls.n	8006968 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f985 	bl	8006c6e <USBD_CtlError>
    return USBD_FAIL;
 8006964:	2303      	movs	r3, #3
 8006966:	e08c      	b.n	8006a82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d002      	beq.n	800697a <USBD_SetConfig+0x3e>
 8006974:	2b03      	cmp	r3, #3
 8006976:	d029      	beq.n	80069cc <USBD_SetConfig+0x90>
 8006978:	e075      	b.n	8006a66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800697a:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <USBD_SetConfig+0x150>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006982:	4b42      	ldr	r3, [pc, #264]	; (8006a8c <USBD_SetConfig+0x150>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800698c:	4b3f      	ldr	r3, [pc, #252]	; (8006a8c <USBD_SetConfig+0x150>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fe ffbd 	bl	8005912 <USBD_SetClassConfig>
 8006998:	4603      	mov	r3, r0
 800699a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f962 	bl	8006c6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069b2:	e065      	b.n	8006a80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fa25 	bl	8006e04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2203      	movs	r2, #3
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069c2:	e05d      	b.n	8006a80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa1d 	bl	8006e04 <USBD_CtlSendStatus>
      break;
 80069ca:	e059      	b.n	8006a80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069cc:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <USBD_SetConfig+0x150>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d112      	bne.n	80069fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069dc:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <USBD_SetConfig+0x150>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069e6:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <USBD_SetConfig+0x150>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7fe ffac 	bl	800594a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa06 	bl	8006e04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069f8:	e042      	b.n	8006a80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069fa:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <USBD_SetConfig+0x150>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d02a      	beq.n	8006a5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fe ff9a 	bl	800594a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a16:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <USBD_SetConfig+0x150>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a20:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <USBD_SetConfig+0x150>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fe ff73 	bl	8005912 <USBD_SetClassConfig>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00f      	beq.n	8006a56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f918 	bl	8006c6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fe ff7f 	bl	800594a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a54:	e014      	b.n	8006a80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9d4 	bl	8006e04 <USBD_CtlSendStatus>
      break;
 8006a5c:	e010      	b.n	8006a80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f9d0 	bl	8006e04 <USBD_CtlSendStatus>
      break;
 8006a64:	e00c      	b.n	8006a80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f900 	bl	8006c6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <USBD_SetConfig+0x150>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fe ff68 	bl	800594a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7e:	bf00      	nop
  }

  return ret;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000130 	.word	0x20000130

08006a90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	88db      	ldrh	r3, [r3, #6]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d004      	beq.n	8006aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8e2 	bl	8006c6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006aaa:	e023      	b.n	8006af4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	dc02      	bgt.n	8006abe <USBD_GetConfig+0x2e>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	dc03      	bgt.n	8006ac4 <USBD_GetConfig+0x34>
 8006abc:	e015      	b.n	8006aea <USBD_GetConfig+0x5a>
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d00b      	beq.n	8006ada <USBD_GetConfig+0x4a>
 8006ac2:	e012      	b.n	8006aea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3308      	adds	r3, #8
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f93c 	bl	8006d50 <USBD_CtlSendData>
        break;
 8006ad8:	e00c      	b.n	8006af4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3304      	adds	r3, #4
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f934 	bl	8006d50 <USBD_CtlSendData>
        break;
 8006ae8:	e004      	b.n	8006af4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8be 	bl	8006c6e <USBD_CtlError>
        break;
 8006af2:	bf00      	nop
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d81e      	bhi.n	8006b52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	88db      	ldrh	r3, [r3, #6]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d004      	beq.n	8006b26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f8a5 	bl	8006c6e <USBD_CtlError>
        break;
 8006b24:	e01a      	b.n	8006b5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f043 0202 	orr.w	r2, r3, #2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	330c      	adds	r3, #12
 8006b46:	2202      	movs	r2, #2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f900 	bl	8006d50 <USBD_CtlSendData>
      break;
 8006b50:	e004      	b.n	8006b5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f88a 	bl	8006c6e <USBD_CtlError>
      break;
 8006b5a:	bf00      	nop
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	885b      	ldrh	r3, [r3, #2]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d107      	bne.n	8006b86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f940 	bl	8006e04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b84:	e013      	b.n	8006bae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	885b      	ldrh	r3, [r3, #2]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d10b      	bne.n	8006ba6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	889b      	ldrh	r3, [r3, #4]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f930 	bl	8006e04 <USBD_CtlSendStatus>
}
 8006ba4:	e003      	b.n	8006bae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f860 	bl	8006c6e <USBD_CtlError>
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d80b      	bhi.n	8006be6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10c      	bne.n	8006bf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f910 	bl	8006e04 <USBD_CtlSendStatus>
      }
      break;
 8006be4:	e004      	b.n	8006bf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f840 	bl	8006c6e <USBD_CtlError>
      break;
 8006bee:	e000      	b.n	8006bf2 <USBD_ClrFeature+0x3c>
      break;
 8006bf0:	bf00      	nop
  }
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	781a      	ldrb	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff fa17 	bl	8006058 <SWAPBYTE>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff fa0a 	bl	8006058 <SWAPBYTE>
 8006c44:	4603      	mov	r3, r0
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3301      	adds	r3, #1
 8006c56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f7ff f9fd 	bl	8006058 <SWAPBYTE>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461a      	mov	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	80da      	strh	r2, [r3, #6]
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fd08 	bl	8007690 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd04 	bl	8007690 <USBD_LL_StallEP>
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d036      	beq.n	8006d14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f000 f836 	bl	8006d1c <USBD_GetLen>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	7812      	ldrb	r2, [r2, #0]
 8006cc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ce0:	e013      	b.n	8006d0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]
    idx++;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	4413      	add	r3, r2
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	3301      	adds	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e7      	bne.n	8006ce2 <USBD_GetString+0x52>
 8006d12:	e000      	b.n	8006d16 <USBD_GetString+0x86>
    return;
 8006d14:	bf00      	nop
  }
}
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d2c:	e005      	b.n	8006d3a <USBD_GetLen+0x1e>
  {
    len++;
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	3301      	adds	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f5      	bne.n	8006d2e <USBD_GetLen+0x12>
  }

  return len;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	2100      	movs	r1, #0
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fd13 	bl	80077a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	2100      	movs	r1, #0
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fd02 	bl	80077a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2203      	movs	r2, #3
 8006db8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fd06 	bl	80077e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	2100      	movs	r1, #0
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fcf5 	bl	80077e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e14:	2300      	movs	r3, #0
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fcc1 	bl	80077a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2205      	movs	r2, #5
 8006e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fccf 	bl	80077e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e54:	2200      	movs	r2, #0
 8006e56:	4912      	ldr	r1, [pc, #72]	; (8006ea0 <MX_USB_DEVICE_Init+0x50>)
 8006e58:	4812      	ldr	r0, [pc, #72]	; (8006ea4 <MX_USB_DEVICE_Init+0x54>)
 8006e5a:	f7fe fcdd 	bl	8005818 <USBD_Init>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e64:	f7f9 fc1e 	bl	80006a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e68:	490f      	ldr	r1, [pc, #60]	; (8006ea8 <MX_USB_DEVICE_Init+0x58>)
 8006e6a:	480e      	ldr	r0, [pc, #56]	; (8006ea4 <MX_USB_DEVICE_Init+0x54>)
 8006e6c:	f7fe fd04 	bl	8005878 <USBD_RegisterClass>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e76:	f7f9 fc15 	bl	80006a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e7a:	490c      	ldr	r1, [pc, #48]	; (8006eac <MX_USB_DEVICE_Init+0x5c>)
 8006e7c:	4809      	ldr	r0, [pc, #36]	; (8006ea4 <MX_USB_DEVICE_Init+0x54>)
 8006e7e:	f7fe fbf5 	bl	800566c <USBD_CDC_RegisterInterface>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e88:	f7f9 fc0c 	bl	80006a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e8c:	4805      	ldr	r0, [pc, #20]	; (8006ea4 <MX_USB_DEVICE_Init+0x54>)
 8006e8e:	f7fe fd29 	bl	80058e4 <USBD_Start>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e98:	f7f9 fc04 	bl	80006a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e9c:	bf00      	nop
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200000ac 	.word	0x200000ac
 8006ea4:	20000134 	.word	0x20000134
 8006ea8:	20000018 	.word	0x20000018
 8006eac:	20000098 	.word	0x20000098

08006eb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4905      	ldr	r1, [pc, #20]	; (8006ecc <CDC_Init_FS+0x1c>)
 8006eb8:	4805      	ldr	r0, [pc, #20]	; (8006ed0 <CDC_Init_FS+0x20>)
 8006eba:	f7fe fbf1 	bl	80056a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ebe:	4905      	ldr	r1, [pc, #20]	; (8006ed4 <CDC_Init_FS+0x24>)
 8006ec0:	4803      	ldr	r0, [pc, #12]	; (8006ed0 <CDC_Init_FS+0x20>)
 8006ec2:	f7fe fc0f 	bl	80056e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006ec6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000c10 	.word	0x20000c10
 8006ed0:	20000134 	.word	0x20000134
 8006ed4:	20000410 	.word	0x20000410

08006ed8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006edc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b23      	cmp	r3, #35	; 0x23
 8006efc:	d84a      	bhi.n	8006f94 <CDC_Control_FS+0xac>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <CDC_Control_FS+0x1c>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f95 	.word	0x08006f95
 8006f08:	08006f95 	.word	0x08006f95
 8006f0c:	08006f95 	.word	0x08006f95
 8006f10:	08006f95 	.word	0x08006f95
 8006f14:	08006f95 	.word	0x08006f95
 8006f18:	08006f95 	.word	0x08006f95
 8006f1c:	08006f95 	.word	0x08006f95
 8006f20:	08006f95 	.word	0x08006f95
 8006f24:	08006f95 	.word	0x08006f95
 8006f28:	08006f95 	.word	0x08006f95
 8006f2c:	08006f95 	.word	0x08006f95
 8006f30:	08006f95 	.word	0x08006f95
 8006f34:	08006f95 	.word	0x08006f95
 8006f38:	08006f95 	.word	0x08006f95
 8006f3c:	08006f95 	.word	0x08006f95
 8006f40:	08006f95 	.word	0x08006f95
 8006f44:	08006f95 	.word	0x08006f95
 8006f48:	08006f95 	.word	0x08006f95
 8006f4c:	08006f95 	.word	0x08006f95
 8006f50:	08006f95 	.word	0x08006f95
 8006f54:	08006f95 	.word	0x08006f95
 8006f58:	08006f95 	.word	0x08006f95
 8006f5c:	08006f95 	.word	0x08006f95
 8006f60:	08006f95 	.word	0x08006f95
 8006f64:	08006f95 	.word	0x08006f95
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	08006f95 	.word	0x08006f95
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f95 	.word	0x08006f95
 8006f78:	08006f95 	.word	0x08006f95
 8006f7c:	08006f95 	.word	0x08006f95
 8006f80:	08006f95 	.word	0x08006f95
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006f95 	.word	0x08006f95
 8006f8c:	08006f95 	.word	0x08006f95
 8006f90:	08006f95 	.word	0x08006f95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f94:	bf00      	nop
  }

  return (USBD_OK);
 8006f96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <CDC_Receive_FS+0x24>)
 8006fb2:	f7fe fb97 	bl	80056e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006fb6:	4804      	ldr	r0, [pc, #16]	; (8006fc8 <CDC_Receive_FS+0x24>)
 8006fb8:	f7fe fbf8 	bl	80057ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006fbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000134 	.word	0x20000134

08006fcc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fdc:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <CDC_Transmit_FS+0x48>)
 8006fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e00b      	b.n	800700a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006ff2:	887b      	ldrh	r3, [r7, #2]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4806      	ldr	r0, [pc, #24]	; (8007014 <CDC_Transmit_FS+0x48>)
 8006ffa:	f7fe fb51 	bl	80056a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ffe:	4805      	ldr	r0, [pc, #20]	; (8007014 <CDC_Transmit_FS+0x48>)
 8007000:	f7fe fb8e 	bl	8005720 <USBD_CDC_TransmitPacket>
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000134 	.word	0x20000134

08007018 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800702a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2212      	movs	r2, #18
 800704c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800704e:	4b03      	ldr	r3, [pc, #12]	; (800705c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	200000cc 	.word	0x200000cc

08007060 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2204      	movs	r2, #4
 8007070:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007072:	4b03      	ldr	r3, [pc, #12]	; (8007080 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	200000ec 	.word	0x200000ec

08007084 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	6039      	str	r1, [r7, #0]
 800708e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d105      	bne.n	80070a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	4907      	ldr	r1, [pc, #28]	; (80070b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800709a:	4808      	ldr	r0, [pc, #32]	; (80070bc <USBD_FS_ProductStrDescriptor+0x38>)
 800709c:	f7ff fdf8 	bl	8006c90 <USBD_GetString>
 80070a0:	e004      	b.n	80070ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4904      	ldr	r1, [pc, #16]	; (80070b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80070a6:	4805      	ldr	r0, [pc, #20]	; (80070bc <USBD_FS_ProductStrDescriptor+0x38>)
 80070a8:	f7ff fdf2 	bl	8006c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20001410 	.word	0x20001410
 80070bc:	080079f0 	.word	0x080079f0

080070c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	4904      	ldr	r1, [pc, #16]	; (80070e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070d0:	4804      	ldr	r0, [pc, #16]	; (80070e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070d2:	f7ff fddd 	bl	8006c90 <USBD_GetString>
  return USBD_StrDesc;
 80070d6:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20001410 	.word	0x20001410
 80070e4:	08007a0c 	.word	0x08007a0c

080070e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	221a      	movs	r2, #26
 80070f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070fa:	f000 f855 	bl	80071a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070fe:	4b02      	ldr	r3, [pc, #8]	; (8007108 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	200000f0 	.word	0x200000f0

0800710c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d105      	bne.n	800712a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4907      	ldr	r1, [pc, #28]	; (8007140 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007122:	4808      	ldr	r0, [pc, #32]	; (8007144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007124:	f7ff fdb4 	bl	8006c90 <USBD_GetString>
 8007128:	e004      	b.n	8007134 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4904      	ldr	r1, [pc, #16]	; (8007140 <USBD_FS_ConfigStrDescriptor+0x34>)
 800712e:	4805      	ldr	r0, [pc, #20]	; (8007144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007130:	f7ff fdae 	bl	8006c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20001410 	.word	0x20001410
 8007144:	08007a20 	.word	0x08007a20

08007148 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4907      	ldr	r1, [pc, #28]	; (800717c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800715e:	4808      	ldr	r0, [pc, #32]	; (8007180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007160:	f7ff fd96 	bl	8006c90 <USBD_GetString>
 8007164:	e004      	b.n	8007170 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4904      	ldr	r1, [pc, #16]	; (800717c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800716a:	4805      	ldr	r0, [pc, #20]	; (8007180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800716c:	f7ff fd90 	bl	8006c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007170:	4b02      	ldr	r3, [pc, #8]	; (800717c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20001410 	.word	0x20001410
 8007180:	08007a2c 	.word	0x08007a2c

08007184 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	220c      	movs	r2, #12
 8007194:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007196:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	200000e0 	.word	0x200000e0

080071a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <Get_SerialNum+0x44>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071b4:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <Get_SerialNum+0x48>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071ba:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <Get_SerialNum+0x4c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071ce:	2208      	movs	r2, #8
 80071d0:	4909      	ldr	r1, [pc, #36]	; (80071f8 <Get_SerialNum+0x50>)
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 f814 	bl	8007200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071d8:	2204      	movs	r2, #4
 80071da:	4908      	ldr	r1, [pc, #32]	; (80071fc <Get_SerialNum+0x54>)
 80071dc:	68b8      	ldr	r0, [r7, #8]
 80071de:	f000 f80f 	bl	8007200 <IntToUnicode>
  }
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	1fff7a10 	.word	0x1fff7a10
 80071f0:	1fff7a14 	.word	0x1fff7a14
 80071f4:	1fff7a18 	.word	0x1fff7a18
 80071f8:	200000f2 	.word	0x200000f2
 80071fc:	20000102 	.word	0x20000102

08007200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]
 8007216:	e027      	b.n	8007268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	0f1b      	lsrs	r3, r3, #28
 800721c:	2b09      	cmp	r3, #9
 800721e:	d80b      	bhi.n	8007238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0f1b      	lsrs	r3, r3, #28
 8007224:	b2da      	uxtb	r2, r3
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	4619      	mov	r1, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	440b      	add	r3, r1
 8007230:	3230      	adds	r2, #48	; 0x30
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	e00a      	b.n	800724e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	b2da      	uxtb	r2, r3
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	4619      	mov	r1, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	440b      	add	r3, r1
 8007248:	3237      	adds	r2, #55	; 0x37
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	3301      	adds	r3, #1
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	3301      	adds	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
 8007268:	7dfa      	ldrb	r2, [r7, #23]
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	429a      	cmp	r2, r3
 800726e:	d3d3      	bcc.n	8007218 <IntToUnicode+0x18>
  }
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b0a0      	sub	sp, #128	; 0x80
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007288:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	605a      	str	r2, [r3, #4]
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007298:	f107 0310 	add.w	r3, r7, #16
 800729c:	225c      	movs	r2, #92	; 0x5c
 800729e:	2100      	movs	r1, #0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fb89 	bl	80079b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ae:	d149      	bne.n	8007344 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80072b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80072b6:	2300      	movs	r3, #0
 80072b8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072ba:	f107 0310 	add.w	r3, r7, #16
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fb f994 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80072ca:	f7f9 f9eb 	bl	80006a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	4b1e      	ldr	r3, [pc, #120]	; (800734c <HAL_PCD_MspInit+0xcc>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	4a1d      	ldr	r2, [pc, #116]	; (800734c <HAL_PCD_MspInit+0xcc>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6313      	str	r3, [r2, #48]	; 0x30
 80072de:	4b1b      	ldr	r3, [pc, #108]	; (800734c <HAL_PCD_MspInit+0xcc>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80072ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f0:	2302      	movs	r3, #2
 80072f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072f8:	2303      	movs	r3, #3
 80072fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072fc:	230a      	movs	r3, #10
 80072fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007300:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007304:	4619      	mov	r1, r3
 8007306:	4812      	ldr	r0, [pc, #72]	; (8007350 <HAL_PCD_MspInit+0xd0>)
 8007308:	f7f9 fc20 	bl	8000b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <HAL_PCD_MspInit+0xcc>)
 800730e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007310:	4a0e      	ldr	r2, [pc, #56]	; (800734c <HAL_PCD_MspInit+0xcc>)
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	6353      	str	r3, [r2, #52]	; 0x34
 8007318:	2300      	movs	r3, #0
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_PCD_MspInit+0xcc>)
 800731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <HAL_PCD_MspInit+0xcc>)
 8007322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007326:	6453      	str	r3, [r2, #68]	; 0x44
 8007328:	4b08      	ldr	r3, [pc, #32]	; (800734c <HAL_PCD_MspInit+0xcc>)
 800732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	2043      	movs	r0, #67	; 0x43
 800733a:	f7f9 fbd0 	bl	8000ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800733e:	2043      	movs	r0, #67	; 0x43
 8007340:	f7f9 fbe9 	bl	8000b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007344:	bf00      	nop
 8007346:	3780      	adds	r7, #128	; 0x80
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40023800 	.word	0x40023800
 8007350:	40020000 	.word	0x40020000

08007354 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7fe fb07 	bl	800597e <USBD_LL_SetupStage>
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	4619      	mov	r1, r3
 80073a2:	f7fe fb41 	bl	8005a28 <USBD_LL_DataOutStage>
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	334c      	adds	r3, #76	; 0x4c
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	4619      	mov	r1, r3
 80073d6:	f7fe fbda 	bl	8005b8e <USBD_LL_DataInStage>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fd0e 	bl	8005e12 <USBD_LL_SOF>
}
 80073f6:	bf00      	nop
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007406:	2301      	movs	r3, #1
 8007408:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
 8007416:	e008      	b.n	800742a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d102      	bne.n	8007426 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	e001      	b.n	800742a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007426:	f7f9 f93d 	bl	80006a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007430:	7bfa      	ldrb	r2, [r7, #15]
 8007432:	4611      	mov	r1, r2
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fcae 	bl	8005d96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fc56 	bl	8005cf2 <USBD_LL_Reset>
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fca9 	bl	8005db6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <HAL_PCD_SuspendCallback+0x48>)
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	4a03      	ldr	r2, [pc, #12]	; (8007498 <HAL_PCD_SuspendCallback+0x48>)
 800748a:	f043 0306 	orr.w	r3, r3, #6
 800748e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	e000ed00 	.word	0xe000ed00

0800749c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fc99 	bl	8005de2 <USBD_LL_Resume>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fcf1 	bl	8005eb6 <USBD_LL_IsoOUTIncomplete>
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074ee:	78fa      	ldrb	r2, [r7, #3]
 80074f0:	4611      	mov	r1, r2
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fcad 	bl	8005e52 <USBD_LL_IsoINIncomplete>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fd03 	bl	8005f1a <USBD_LL_DevConnected>
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fd00 	bl	8005f30 <USBD_LL_DevDisconnected>
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d13c      	bne.n	80075c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007548:	4a20      	ldr	r2, [pc, #128]	; (80075cc <USBD_LL_Init+0x94>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1e      	ldr	r2, [pc, #120]	; (80075cc <USBD_LL_Init+0x94>)
 8007554:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007558:	4b1c      	ldr	r3, [pc, #112]	; (80075cc <USBD_LL_Init+0x94>)
 800755a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800755e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007560:	4b1a      	ldr	r3, [pc, #104]	; (80075cc <USBD_LL_Init+0x94>)
 8007562:	2206      	movs	r2, #6
 8007564:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007566:	4b19      	ldr	r3, [pc, #100]	; (80075cc <USBD_LL_Init+0x94>)
 8007568:	2202      	movs	r2, #2
 800756a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800756c:	4b17      	ldr	r3, [pc, #92]	; (80075cc <USBD_LL_Init+0x94>)
 800756e:	2200      	movs	r2, #0
 8007570:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007572:	4b16      	ldr	r3, [pc, #88]	; (80075cc <USBD_LL_Init+0x94>)
 8007574:	2202      	movs	r2, #2
 8007576:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007578:	4b14      	ldr	r3, [pc, #80]	; (80075cc <USBD_LL_Init+0x94>)
 800757a:	2200      	movs	r2, #0
 800757c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800757e:	4b13      	ldr	r3, [pc, #76]	; (80075cc <USBD_LL_Init+0x94>)
 8007580:	2200      	movs	r2, #0
 8007582:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007584:	4b11      	ldr	r3, [pc, #68]	; (80075cc <USBD_LL_Init+0x94>)
 8007586:	2200      	movs	r2, #0
 8007588:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <USBD_LL_Init+0x94>)
 800758c:	2200      	movs	r2, #0
 800758e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007590:	4b0e      	ldr	r3, [pc, #56]	; (80075cc <USBD_LL_Init+0x94>)
 8007592:	2200      	movs	r2, #0
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007596:	480d      	ldr	r0, [pc, #52]	; (80075cc <USBD_LL_Init+0x94>)
 8007598:	f7f9 fc6c 	bl	8000e74 <HAL_PCD_Init>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075a2:	f7f9 f87f 	bl	80006a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075a6:	2180      	movs	r1, #128	; 0x80
 80075a8:	4808      	ldr	r0, [pc, #32]	; (80075cc <USBD_LL_Init+0x94>)
 80075aa:	f7fa fef8 	bl	800239e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075ae:	2240      	movs	r2, #64	; 0x40
 80075b0:	2100      	movs	r1, #0
 80075b2:	4806      	ldr	r0, [pc, #24]	; (80075cc <USBD_LL_Init+0x94>)
 80075b4:	f7fa feac 	bl	8002310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075b8:	2280      	movs	r2, #128	; 0x80
 80075ba:	2101      	movs	r1, #1
 80075bc:	4803      	ldr	r0, [pc, #12]	; (80075cc <USBD_LL_Init+0x94>)
 80075be:	f7fa fea7 	bl	8002310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20001610 	.word	0x20001610

080075d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7f9 fd68 	bl	80010bc <HAL_PCD_Start>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 f990 	bl	8007918 <USBD_Get_USB_Status>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	4608      	mov	r0, r1
 8007610:	4611      	mov	r1, r2
 8007612:	461a      	mov	r2, r3
 8007614:	4603      	mov	r3, r0
 8007616:	70fb      	strb	r3, [r7, #3]
 8007618:	460b      	mov	r3, r1
 800761a:	70bb      	strb	r3, [r7, #2]
 800761c:	4613      	mov	r3, r2
 800761e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800762e:	78bb      	ldrb	r3, [r7, #2]
 8007630:	883a      	ldrh	r2, [r7, #0]
 8007632:	78f9      	ldrb	r1, [r7, #3]
 8007634:	f7fa fa66 	bl	8001b04 <HAL_PCD_EP_Open>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f96a 	bl	8007918 <USBD_Get_USB_Status>
 8007644:	4603      	mov	r3, r0
 8007646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007648:	7bbb      	ldrb	r3, [r7, #14]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7fa faaf 	bl	8001bd4 <HAL_PCD_EP_Close>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f94b 	bl	8007918 <USBD_Get_USB_Status>
 8007682:	4603      	mov	r3, r0
 8007684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007686:	7bbb      	ldrb	r3, [r7, #14]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076aa:	78fa      	ldrb	r2, [r7, #3]
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fa fb87 	bl	8001dc2 <HAL_PCD_EP_SetStall>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f92c 	bl	8007918 <USBD_Get_USB_Status>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fa fbcc 	bl	8001e8a <HAL_PCD_EP_ClrStall>
 80076f2:	4603      	mov	r3, r0
 80076f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 f90d 	bl	8007918 <USBD_Get_USB_Status>
 80076fe:	4603      	mov	r3, r0
 8007700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007702:	7bbb      	ldrb	r3, [r7, #14]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800771e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007724:	2b00      	cmp	r3, #0
 8007726:	da0b      	bge.n	8007740 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	4613      	mov	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	440b      	add	r3, r1
 800773a:	333e      	adds	r3, #62	; 0x3e
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	e00b      	b.n	8007758 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	4613      	mov	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007756:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7fa f999 	bl	8001aba <HAL_PCD_SetAddress>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f8c2 	bl	8007918 <USBD_Get_USB_Status>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007798:	7bbb      	ldrb	r3, [r7, #14]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	460b      	mov	r3, r1
 80077b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077c0:	7af9      	ldrb	r1, [r7, #11]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	f7fa fab2 	bl	8001d2e <HAL_PCD_EP_Transmit>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 f8a1 	bl	8007918 <USBD_Get_USB_Status>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077da:	7dbb      	ldrb	r3, [r7, #22]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	607a      	str	r2, [r7, #4]
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	460b      	mov	r3, r1
 80077f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007802:	7af9      	ldrb	r1, [r7, #11]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	f7fa fa2e 	bl	8001c68 <HAL_PCD_EP_Receive>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f880 	bl	8007918 <USBD_Get_USB_Status>
 8007818:	4603      	mov	r3, r0
 800781a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800781c:	7dbb      	ldrb	r3, [r7, #22]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f7fa fa5e 	bl	8001cfe <HAL_PCD_EP_GetRxCount>
 8007842:	4603      	mov	r3, r0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_PCDEx_LPM_Callback+0x18>
 800785e:	2b01      	cmp	r3, #1
 8007860:	d01f      	beq.n	80078a2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007862:	e03b      	b.n	80078dc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800786c:	f7f8 fe78 	bl	8000560 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007870:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	4a1b      	ldr	r2, [pc, #108]	; (80078e4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007876:	f023 0306 	bic.w	r3, r3, #6
 800787a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe faa1 	bl	8005de2 <USBD_LL_Resume>
    break;
 80078a0:	e01c      	b.n	80078dc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fa78 	bl	8005db6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <HAL_PCDEx_LPM_Callback+0x98>)
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <HAL_PCDEx_LPM_Callback+0x98>)
 80078d4:	f043 0306 	orr.w	r3, r3, #6
 80078d8:	6113      	str	r3, [r2, #16]
    break;
 80078da:	bf00      	nop
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	e000ed00 	.word	0xe000ed00

080078e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078f0:	4b03      	ldr	r3, [pc, #12]	; (8007900 <USBD_static_malloc+0x18>)
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20001b1c 	.word	0x20001b1c

08007904 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]

}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d817      	bhi.n	800795c <USBD_Get_USB_Status+0x44>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <USBD_Get_USB_Status+0x1c>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007945 	.word	0x08007945
 8007938:	0800794b 	.word	0x0800794b
 800793c:	08007951 	.word	0x08007951
 8007940:	08007957 	.word	0x08007957
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	e00b      	b.n	8007962 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
    break;
 800794e:	e008      	b.n	8007962 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
    break;
 8007954:	e005      	b.n	8007962 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007956:	2303      	movs	r3, #3
 8007958:	73fb      	strb	r3, [r7, #15]
    break;
 800795a:	e002      	b.n	8007962 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	73fb      	strb	r3, [r7, #15]
    break;
 8007960:	bf00      	nop
  }
  return usb_status;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <__libc_init_array>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	4d0d      	ldr	r5, [pc, #52]	; (80079a8 <__libc_init_array+0x38>)
 8007974:	4c0d      	ldr	r4, [pc, #52]	; (80079ac <__libc_init_array+0x3c>)
 8007976:	1b64      	subs	r4, r4, r5
 8007978:	10a4      	asrs	r4, r4, #2
 800797a:	2600      	movs	r6, #0
 800797c:	42a6      	cmp	r6, r4
 800797e:	d109      	bne.n	8007994 <__libc_init_array+0x24>
 8007980:	4d0b      	ldr	r5, [pc, #44]	; (80079b0 <__libc_init_array+0x40>)
 8007982:	4c0c      	ldr	r4, [pc, #48]	; (80079b4 <__libc_init_array+0x44>)
 8007984:	f000 f820 	bl	80079c8 <_init>
 8007988:	1b64      	subs	r4, r4, r5
 800798a:	10a4      	asrs	r4, r4, #2
 800798c:	2600      	movs	r6, #0
 800798e:	42a6      	cmp	r6, r4
 8007990:	d105      	bne.n	800799e <__libc_init_array+0x2e>
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	f855 3b04 	ldr.w	r3, [r5], #4
 8007998:	4798      	blx	r3
 800799a:	3601      	adds	r6, #1
 800799c:	e7ee      	b.n	800797c <__libc_init_array+0xc>
 800799e:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a2:	4798      	blx	r3
 80079a4:	3601      	adds	r6, #1
 80079a6:	e7f2      	b.n	800798e <__libc_init_array+0x1e>
 80079a8:	08007a54 	.word	0x08007a54
 80079ac:	08007a54 	.word	0x08007a54
 80079b0:	08007a54 	.word	0x08007a54
 80079b4:	08007a58 	.word	0x08007a58

080079b8 <memset>:
 80079b8:	4402      	add	r2, r0
 80079ba:	4603      	mov	r3, r0
 80079bc:	4293      	cmp	r3, r2
 80079be:	d100      	bne.n	80079c2 <memset+0xa>
 80079c0:	4770      	bx	lr
 80079c2:	f803 1b01 	strb.w	r1, [r3], #1
 80079c6:	e7f9      	b.n	80079bc <memset+0x4>

080079c8 <_init>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr

080079d4 <_fini>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	bf00      	nop
 80079d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079da:	bc08      	pop	{r3}
 80079dc:	469e      	mov	lr, r3
 80079de:	4770      	bx	lr
