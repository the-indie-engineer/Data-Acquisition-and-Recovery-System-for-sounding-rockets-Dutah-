
ISU DSM Integration 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011680  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08011850  08011850  00021850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120c0  080120c0  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  080120c0  080120c0  000220c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120c8  080120c8  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120c8  080120c8  000220c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120cc  080120cc  000220cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080120d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f58  200000a8  08012178  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003000  08012178  00033000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce4b  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004649  00000000  00000000  0004cf66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  000515b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e7  00000000  00000000  00052f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002802f  00000000  00000000  00054307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024edd  00000000  00000000  0007c336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6690  00000000  00000000  000a1213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007da4  00000000  00000000  001878a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b1  00000000  00000000  0018f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011838 	.word	0x08011838

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	08011838 	.word	0x08011838

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000fca:	23aa      	movs	r3, #170	; 0xaa
 8000fcc:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2316      	movs	r3, #22
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <read_calliberation_data+0x124>)
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	21ee      	movs	r1, #238	; 0xee
 8000fe2:	4842      	ldr	r0, [pc, #264]	; (80010ec <read_calliberation_data+0x128>)
 8000fe4:	f006 f8ae 	bl	8007144 <HAL_I2C_Mem_Read>
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <read_calliberation_data+0x124>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <read_calliberation_data+0x124>)
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <read_calliberation_data+0x12c>)
 8000ffc:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <read_calliberation_data+0x124>)
 8001000:	789b      	ldrb	r3, [r3, #2]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <read_calliberation_data+0x124>)
 8001008:	78db      	ldrb	r3, [r3, #3]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21a      	sxth	r2, r3
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <read_calliberation_data+0x130>)
 8001012:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <read_calliberation_data+0x124>)
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <read_calliberation_data+0x124>)
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <read_calliberation_data+0x134>)
 8001028:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <read_calliberation_data+0x124>)
 800102c:	799b      	ldrb	r3, [r3, #6]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <read_calliberation_data+0x124>)
 8001034:	79db      	ldrb	r3, [r3, #7]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21b      	sxth	r3, r3
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <read_calliberation_data+0x138>)
 8001040:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <read_calliberation_data+0x124>)
 8001044:	7a1b      	ldrb	r3, [r3, #8]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <read_calliberation_data+0x124>)
 800104c:	7a5b      	ldrb	r3, [r3, #9]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <read_calliberation_data+0x13c>)
 8001058:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <read_calliberation_data+0x124>)
 800105c:	7a9b      	ldrb	r3, [r3, #10]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <read_calliberation_data+0x124>)
 8001064:	7adb      	ldrb	r3, [r3, #11]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <read_calliberation_data+0x140>)
 8001070:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <read_calliberation_data+0x124>)
 8001074:	7b1b      	ldrb	r3, [r3, #12]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <read_calliberation_data+0x124>)
 800107c:	7b5b      	ldrb	r3, [r3, #13]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <read_calliberation_data+0x144>)
 8001086:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <read_calliberation_data+0x124>)
 800108a:	7b9b      	ldrb	r3, [r3, #14]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <read_calliberation_data+0x124>)
 8001092:	7bdb      	ldrb	r3, [r3, #15]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <read_calliberation_data+0x148>)
 800109c:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <read_calliberation_data+0x124>)
 80010a0:	7c1b      	ldrb	r3, [r3, #16]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <read_calliberation_data+0x124>)
 80010a8:	7c5b      	ldrb	r3, [r3, #17]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <read_calliberation_data+0x14c>)
 80010b2:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <read_calliberation_data+0x124>)
 80010b6:	7c9b      	ldrb	r3, [r3, #18]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <read_calliberation_data+0x124>)
 80010be:	7cdb      	ldrb	r3, [r3, #19]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <read_calliberation_data+0x150>)
 80010c8:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <read_calliberation_data+0x124>)
 80010cc:	7d1b      	ldrb	r3, [r3, #20]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <read_calliberation_data+0x124>)
 80010d4:	7d5b      	ldrb	r3, [r3, #21]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <read_calliberation_data+0x154>)
 80010de:	801a      	strh	r2, [r3, #0]

}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000010c 	.word	0x2000010c
 80010ec:	2000024c 	.word	0x2000024c
 80010f0:	200000c4 	.word	0x200000c4
 80010f4:	200000c6 	.word	0x200000c6
 80010f8:	200000c8 	.word	0x200000c8
 80010fc:	200000ca 	.word	0x200000ca
 8001100:	200000cc 	.word	0x200000cc
 8001104:	200000ce 	.word	0x200000ce
 8001108:	200000d0 	.word	0x200000d0
 800110c:	200000d2 	.word	0x200000d2
 8001110:	200000d4 	.word	0x200000d4
 8001114:	200000d6 	.word	0x200000d6
 8001118:	200000d8 	.word	0x200000d8

0800111c <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8001122:	232e      	movs	r3, #46	; 0x2e
 8001124:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	22f4      	movs	r2, #244	; 0xf4
 8001138:	21ee      	movs	r1, #238	; 0xee
 800113a:	4810      	ldr	r0, [pc, #64]	; (800117c <Get_UTemp+0x60>)
 800113c:	f005 ff08 	bl	8006f50 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001140:	2005      	movs	r0, #5
 8001142:	f004 faa1 	bl	8005688 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2302      	movs	r3, #2
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <Get_UTemp+0x64>)
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	22f6      	movs	r2, #246	; 0xf6
 8001158:	21ee      	movs	r1, #238	; 0xee
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <Get_UTemp+0x60>)
 800115c:	f005 fff2 	bl	8007144 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <Get_UTemp+0x64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <Get_UTemp+0x64>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b29b      	uxth	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000024c 	.word	0x2000024c
 8001180:	20000128 	.word	0x20000128

08001184 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001188:	f7ff ffc8 	bl	800111c <Get_UTemp>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b3e      	ldr	r3, [pc, #248]	; (800128c <BMP180_GetTemp+0x108>)
 8001192:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001194:	4b3d      	ldr	r3, [pc, #244]	; (800128c <BMP180_GetTemp+0x108>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <BMP180_GetTemp+0x10c>)
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9e0 	bl	8000564 <__aeabi_i2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <BMP180_GetTemp+0x110>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d9 	bl	8000564 <__aeabi_i2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <BMP180_GetTemp+0x114>)
 80011b8:	f7ff fb68 	bl	800088c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff fa38 	bl	8000638 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fce2 	bl	8000b98 <__aeabi_d2iz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a31      	ldr	r2, [pc, #196]	; (800129c <BMP180_GetTemp+0x118>)
 80011d8:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <BMP180_GetTemp+0x11c>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9bf 	bl	8000564 <__aeabi_i2d>
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <BMP180_GetTemp+0x120>)
 80011ec:	f7ff fa24 	bl	8000638 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <BMP180_GetTemp+0x124>)
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <BMP180_GetTemp+0x118>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4413      	add	r3, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9ac 	bl	8000564 <__aeabi_i2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7ff fb3a 	bl	800088c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fcba 	bl	8000b98 <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <BMP180_GetTemp+0x128>)
 8001228:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <BMP180_GetTemp+0x118>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <BMP180_GetTemp+0x128>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <BMP180_GetTemp+0x12c>)
 8001236:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <BMP180_GetTemp+0x12c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3308      	adds	r3, #8
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f990 	bl	8000564 <__aeabi_i2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <BMP180_GetTemp+0x130>)
 800124a:	f7ff fb1f 	bl	800088c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2iz>
 800125a:	4603      	mov	r3, r0
 800125c:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <BMP180_GetTemp+0x134>)
 800125e:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <BMP180_GetTemp+0x134>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f97d 	bl	8000564 <__aeabi_i2d>
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <BMP180_GetTemp+0x138>)
 8001270:	f7ff fb0c 	bl	800088c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fcd4 	bl	8000c28 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	ee07 3a90 	vmov	s15, r3
}
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	bdb0      	pop	{r4, r5, r7, pc}
 800128c:	200000dc 	.word	0x200000dc
 8001290:	200000ce 	.word	0x200000ce
 8001294:	200000cc 	.word	0x200000cc
 8001298:	40e00000 	.word	0x40e00000
 800129c:	200000e4 	.word	0x200000e4
 80012a0:	200000d6 	.word	0x200000d6
 80012a4:	40a00000 	.word	0x40a00000
 80012a8:	200000d8 	.word	0x200000d8
 80012ac:	200000e8 	.word	0x200000e8
 80012b0:	200000f4 	.word	0x200000f4
 80012b4:	40300000 	.word	0x40300000
 80012b8:	20000108 	.word	0x20000108
 80012bc:	40240000 	.word	0x40240000

080012c0 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	019b      	lsls	r3, r3, #6
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3334      	adds	r3, #52	; 0x34
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	f107 030f 	add.w	r3, r7, #15
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	22f4      	movs	r2, #244	; 0xf4
 80012ea:	21ee      	movs	r1, #238	; 0xee
 80012ec:	4820      	ldr	r0, [pc, #128]	; (8001370 <Get_UPress+0xb0>)
 80012ee:	f005 fe2f 	bl	8006f50 <HAL_I2C_Mem_Write>

	switch (oss)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d81b      	bhi.n	8001330 <Get_UPress+0x70>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <Get_UPress+0x40>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001311 	.word	0x08001311
 8001304:	08001319 	.word	0x08001319
 8001308:	08001321 	.word	0x08001321
 800130c:	08001329 	.word	0x08001329
	{
		case (0):
			HAL_Delay (5);
 8001310:	2005      	movs	r0, #5
 8001312:	f004 f9b9 	bl	8005688 <HAL_Delay>
			break;
 8001316:	e00b      	b.n	8001330 <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001318:	2008      	movs	r0, #8
 800131a:	f004 f9b5 	bl	8005688 <HAL_Delay>
			break;
 800131e:	e007      	b.n	8001330 <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 8001320:	200e      	movs	r0, #14
 8001322:	f004 f9b1 	bl	8005688 <HAL_Delay>
			break;
 8001326:	e003      	b.n	8001330 <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001328:	201a      	movs	r0, #26
 800132a:	f004 f9ad 	bl	8005688 <HAL_Delay>
			break;
 800132e:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2303      	movs	r3, #3
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <Get_UPress+0xb4>)
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	22f6      	movs	r2, #246	; 0xf6
 8001342:	21ee      	movs	r1, #238	; 0xee
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <Get_UPress+0xb0>)
 8001346:	f005 fefd 	bl	8007144 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <Get_UPress+0xb4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <Get_UPress+0xb4>)
 8001352:	785b      	ldrb	r3, [r3, #1]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	4413      	add	r3, r2
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <Get_UPress+0xb4>)
 800135a:	7892      	ldrb	r2, [r2, #2]
 800135c:	441a      	add	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f1c3 0308 	rsb	r3, r3, #8
 8001364:	fa42 f303 	asr.w	r3, r2, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000024c 	.word	0x2000024c
 8001374:	20000124 	.word	0x20000124

08001378 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff9d 	bl	80012c0 <Get_UPress>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4ba8      	ldr	r3, [pc, #672]	; (800162c <BMP180_GetPress+0x2b4>)
 800138c:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800138e:	4ba8      	ldr	r3, [pc, #672]	; (8001630 <BMP180_GetPress+0x2b8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4aa8      	ldr	r2, [pc, #672]	; (8001634 <BMP180_GetPress+0x2bc>)
 8001394:	8812      	ldrh	r2, [r2, #0]
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8e3 	bl	8000564 <__aeabi_i2d>
 800139e:	4604      	mov	r4, r0
 80013a0:	460d      	mov	r5, r1
 80013a2:	4ba5      	ldr	r3, [pc, #660]	; (8001638 <BMP180_GetPress+0x2c0>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8dc 	bl	8000564 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4ba2      	ldr	r3, [pc, #648]	; (800163c <BMP180_GetPress+0x2c4>)
 80013b2:	f7ff fa6b 	bl	800088c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7ff f93b 	bl	8000638 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fbe5 	bl	8000b98 <__aeabi_d2iz>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a9b      	ldr	r2, [pc, #620]	; (8001640 <BMP180_GetPress+0x2c8>)
 80013d2:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013d4:	4b9b      	ldr	r3, [pc, #620]	; (8001644 <BMP180_GetPress+0x2cc>)
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8c2 	bl	8000564 <__aeabi_i2d>
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b98      	ldr	r3, [pc, #608]	; (8001648 <BMP180_GetPress+0x2d0>)
 80013e6:	f7ff f927 	bl	8000638 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	4b96      	ldr	r3, [pc, #600]	; (800164c <BMP180_GetPress+0x2d4>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <BMP180_GetPress+0x2c8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8af 	bl	8000564 <__aeabi_i2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7ff fa3d 	bl	800088c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbbd 	bl	8000b98 <__aeabi_d2iz>
 800141e:	4603      	mov	r3, r0
 8001420:	4a8b      	ldr	r2, [pc, #556]	; (8001650 <BMP180_GetPress+0x2d8>)
 8001422:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001424:	4b86      	ldr	r3, [pc, #536]	; (8001640 <BMP180_GetPress+0x2c8>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b89      	ldr	r3, [pc, #548]	; (8001650 <BMP180_GetPress+0x2d8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4413      	add	r3, r2
 800142e:	4a89      	ldr	r2, [pc, #548]	; (8001654 <BMP180_GetPress+0x2dc>)
 8001430:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001432:	4b88      	ldr	r3, [pc, #544]	; (8001654 <BMP180_GetPress+0x2dc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800143a:	4a87      	ldr	r2, [pc, #540]	; (8001658 <BMP180_GetPress+0x2e0>)
 800143c:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800143e:	4b87      	ldr	r3, [pc, #540]	; (800165c <BMP180_GetPress+0x2e4>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f88d 	bl	8000564 <__aeabi_i2d>
 800144a:	4604      	mov	r4, r0
 800144c:	460d      	mov	r5, r1
 800144e:	4b82      	ldr	r3, [pc, #520]	; (8001658 <BMP180_GetPress+0x2e0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a81      	ldr	r2, [pc, #516]	; (8001658 <BMP180_GetPress+0x2e0>)
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f882 	bl	8000564 <__aeabi_i2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <BMP180_GetPress+0x2e8>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4620      	mov	r0, r4
 8001470:	4629      	mov	r1, r5
 8001472:	f7ff f8e1 	bl	8000638 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <BMP180_GetPress+0x2d0>)
 8001484:	f7ff fa02 	bl	800088c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb82 	bl	8000b98 <__aeabi_d2iz>
 8001494:	4603      	mov	r3, r0
 8001496:	4a6a      	ldr	r2, [pc, #424]	; (8001640 <BMP180_GetPress+0x2c8>)
 8001498:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 800149a:	4b72      	ldr	r3, [pc, #456]	; (8001664 <BMP180_GetPress+0x2ec>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <BMP180_GetPress+0x2e0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f85a 	bl	8000564 <__aeabi_i2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b64      	ldr	r3, [pc, #400]	; (8001648 <BMP180_GetPress+0x2d0>)
 80014b6:	f7ff f9e9 	bl	800088c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fb69 	bl	8000b98 <__aeabi_d2iz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a61      	ldr	r2, [pc, #388]	; (8001650 <BMP180_GetPress+0x2d8>)
 80014ca:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014cc:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <BMP180_GetPress+0x2c8>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <BMP180_GetPress+0x2d8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a64      	ldr	r2, [pc, #400]	; (8001668 <BMP180_GetPress+0x2f0>)
 80014d8:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014da:	4b64      	ldr	r3, [pc, #400]	; (800166c <BMP180_GetPress+0x2f4>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	009a      	lsls	r2, r3, #2
 80014e2:	4b61      	ldr	r3, [pc, #388]	; (8001668 <BMP180_GetPress+0x2f0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	441a      	add	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	3302      	adds	r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da00      	bge.n	80014f6 <BMP180_GetPress+0x17e>
 80014f4:	3303      	adds	r3, #3
 80014f6:	109b      	asrs	r3, r3, #2
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <BMP180_GetPress+0x2f8>)
 80014fc:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <BMP180_GetPress+0x2fc>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	461a      	mov	r2, r3
 8001506:	4b54      	ldr	r3, [pc, #336]	; (8001658 <BMP180_GetPress+0x2e0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f828 	bl	8000564 <__aeabi_i2d>
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b57      	ldr	r3, [pc, #348]	; (8001678 <BMP180_GetPress+0x300>)
 800151a:	f7ff f9b7 	bl	800088c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb37 	bl	8000b98 <__aeabi_d2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	4a44      	ldr	r2, [pc, #272]	; (8001640 <BMP180_GetPress+0x2c8>)
 800152e:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <BMP180_GetPress+0x304>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f814 	bl	8000564 <__aeabi_i2d>
 800153c:	4604      	mov	r4, r0
 800153e:	460d      	mov	r5, r1
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <BMP180_GetPress+0x2e0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a44      	ldr	r2, [pc, #272]	; (8001658 <BMP180_GetPress+0x2e0>)
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f809 	bl	8000564 <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b42      	ldr	r3, [pc, #264]	; (8001660 <BMP180_GetPress+0x2e8>)
 8001558:	f7ff f998 	bl	800088c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7ff f868 	bl	8000638 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b42      	ldr	r3, [pc, #264]	; (8001680 <BMP180_GetPress+0x308>)
 8001576:	f7ff f989 	bl	800088c <__aeabi_ddiv>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fb09 	bl	8000b98 <__aeabi_d2iz>
 8001586:	4603      	mov	r3, r0
 8001588:	4a31      	ldr	r2, [pc, #196]	; (8001650 <BMP180_GetPress+0x2d8>)
 800158a:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <BMP180_GetPress+0x2c8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <BMP180_GetPress+0x2d8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4413      	add	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffe3 	bl	8000564 <__aeabi_i2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b38      	ldr	r3, [pc, #224]	; (8001684 <BMP180_GetPress+0x30c>)
 80015a4:	f7ff f972 	bl	800088c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff faf2 	bl	8000b98 <__aeabi_d2iz>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a2c      	ldr	r2, [pc, #176]	; (8001668 <BMP180_GetPress+0x2f0>)
 80015b8:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <BMP180_GetPress+0x310>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <BMP180_GetPress+0x2f0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffb9 	bl	8000544 <__aeabi_ui2d>
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <BMP180_GetPress+0x2c4>)
 80015d8:	f7ff f958 	bl	800088c <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fb00 	bl	8000be8 <__aeabi_d2uiz>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a28      	ldr	r2, [pc, #160]	; (800168c <BMP180_GetPress+0x314>)
 80015ec:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <BMP180_GetPress+0x2b4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <BMP180_GetPress+0x2f8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	fa41 f202 	asr.w	r2, r1, r2
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <BMP180_GetPress+0x318>)
 800160a:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <BMP180_GetPress+0x318>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db41      	blt.n	8001698 <BMP180_GetPress+0x320>
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <BMP180_GetPress+0x318>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	005a      	lsls	r2, r3, #1
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <BMP180_GetPress+0x314>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <BMP180_GetPress+0x31c>)
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e040      	b.n	80016ac <BMP180_GetPress+0x334>
 800162a:	bf00      	nop
 800162c:	200000e0 	.word	0x200000e0
 8001630:	200000dc 	.word	0x200000dc
 8001634:	200000ce 	.word	0x200000ce
 8001638:	200000cc 	.word	0x200000cc
 800163c:	40e00000 	.word	0x40e00000
 8001640:	200000e4 	.word	0x200000e4
 8001644:	200000d6 	.word	0x200000d6
 8001648:	40a00000 	.word	0x40a00000
 800164c:	200000d8 	.word	0x200000d8
 8001650:	200000e8 	.word	0x200000e8
 8001654:	200000f4 	.word	0x200000f4
 8001658:	200000fc 	.word	0x200000fc
 800165c:	200000d2 	.word	0x200000d2
 8001660:	40b00000 	.word	0x40b00000
 8001664:	200000c6 	.word	0x200000c6
 8001668:	200000ec 	.word	0x200000ec
 800166c:	200000c4 	.word	0x200000c4
 8001670:	200000f0 	.word	0x200000f0
 8001674:	200000c8 	.word	0x200000c8
 8001678:	40c00000 	.word	0x40c00000
 800167c:	200000d0 	.word	0x200000d0
 8001680:	40f00000 	.word	0x40f00000
 8001684:	40100000 	.word	0x40100000
 8001688:	200000ca 	.word	0x200000ca
 800168c:	200000f8 	.word	0x200000f8
 8001690:	20000100 	.word	0x20000100
 8001694:	20000104 	.word	0x20000104
	else Press = (B7/B4)*2;
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <BMP180_GetPress+0x43c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <BMP180_GetPress+0x440>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b44      	ldr	r3, [pc, #272]	; (80017bc <BMP180_GetPress+0x444>)
 80016aa:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016ac:	4b43      	ldr	r3, [pc, #268]	; (80017bc <BMP180_GetPress+0x444>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff57 	bl	8000564 <__aeabi_i2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <BMP180_GetPress+0x448>)
 80016bc:	f7ff f8e6 	bl	800088c <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4614      	mov	r4, r2
 80016c6:	461d      	mov	r5, r3
 80016c8:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <BMP180_GetPress+0x444>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff49 	bl	8000564 <__aeabi_i2d>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <BMP180_GetPress+0x448>)
 80016d8:	f7ff f8d8 	bl	800088c <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe ffa8 	bl	8000638 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa52 	bl	8000b98 <__aeabi_d2iz>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <BMP180_GetPress+0x44c>)
 80016f8:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <BMP180_GetPress+0x44c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f640 32de 	movw	r2, #3038	; 0xbde
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff2c 	bl	8000564 <__aeabi_i2d>
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <BMP180_GetPress+0x450>)
 8001712:	f7ff f8bb 	bl	800088c <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa3b 	bl	8000b98 <__aeabi_d2iz>
 8001722:	4603      	mov	r3, r0
 8001724:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <BMP180_GetPress+0x44c>)
 8001726:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <BMP180_GetPress+0x444>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <BMP180_GetPress+0x454>)
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff16 	bl	8000564 <__aeabi_i2d>
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <BMP180_GetPress+0x450>)
 800173e:	f7ff f8a5 	bl	800088c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa25 	bl	8000b98 <__aeabi_d2iz>
 800174e:	4603      	mov	r3, r0
 8001750:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <BMP180_GetPress+0x458>)
 8001752:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <BMP180_GetPress+0x444>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe ff03 	bl	8000564 <__aeabi_i2d>
 800175e:	4604      	mov	r4, r0
 8001760:	460d      	mov	r5, r1
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <BMP180_GetPress+0x44c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <BMP180_GetPress+0x458>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fef7 	bl	8000564 <__aeabi_i2d>
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <BMP180_GetPress+0x45c>)
 800177c:	f7ff f886 	bl	800088c <__aeabi_ddiv>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fda0 	bl	80002cc <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fa00 	bl	8000b98 <__aeabi_d2iz>
 8001798:	4603      	mov	r3, r0
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <BMP180_GetPress+0x444>)
 800179c:	6013      	str	r3, [r2, #0]
	return Press;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <BMP180_GetPress+0x444>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bdb0      	pop	{r4, r5, r7, pc}
 80017b4:	20000100 	.word	0x20000100
 80017b8:	200000f8 	.word	0x200000f8
 80017bc:	20000104 	.word	0x20000104
 80017c0:	40700000 	.word	0x40700000
 80017c4:	200000e4 	.word	0x200000e4
 80017c8:	40f00000 	.word	0x40f00000
 80017cc:	ffffe343 	.word	0xffffe343
 80017d0:	200000e8 	.word	0x200000e8
 80017d4:	40300000 	.word	0x40300000

080017d8 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fdc9 	bl	8001378 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <BMP180_GetAlt+0x88>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001864 <BMP180_GetAlt+0x8c>
 80017f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017fa:	ee16 0a90 	vmov	r0, s13
 80017fe:	f7fe fec3 	bl	8000588 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001850 <BMP180_GetAlt+0x78>
 800180a:	ec43 2b10 	vmov	d0, r2, r3
 800180e:	f00f f8db 	bl	80109c8 <pow>
 8001812:	ec53 2b10 	vmov	r2, r3, d0
 8001816:	f04f 0000 	mov.w	r0, #0
 800181a:	4913      	ldr	r1, [pc, #76]	; (8001868 <BMP180_GetAlt+0x90>)
 800181c:	f7fe fd54 	bl	80002c8 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a30b      	add	r3, pc, #44	; (adr r3, 8001858 <BMP180_GetAlt+0x80>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe ff03 	bl	8000638 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9f5 	bl	8000c28 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	ee07 3a90 	vmov	s15, r3
}
 8001844:	eeb0 0a67 	vmov.f32	s0, s15
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	cc745124 	.word	0xcc745124
 8001854:	3fc85b95 	.word	0x3fc85b95
 8001858:	00000000 	.word	0x00000000
 800185c:	40e5a540 	.word	0x40e5a540
 8001860:	20000104 	.word	0x20000104
 8001864:	47c5e680 	.word	0x47c5e680
 8001868:	3ff00000 	.word	0x3ff00000

0800186c <BMP180_Start>:

void BMP180_Start (void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001870:	f7ff fba8 	bl	8000fc4 <read_calliberation_data>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <shiftIn>:
#include "HX710B.h"

enum HX_MODE { NONE, DIFF_10Hz, TEMP_40Hz, DIFF_40Hz};
const byte HX_MODE = DIFF_40Hz;

uint8_t shiftIn(GPIO_TypeDef* dataPort, uint16_t dataPin, GPIO_TypeDef* clockPort, uint16_t clockPin, uint8_t bitOrder) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	460b      	mov	r3, r1
 8001886:	817b      	strh	r3, [r7, #10]
 8001888:	4613      	mov	r3, r2
 800188a:	813b      	strh	r3, [r7, #8]
	uint8_t value = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	for (i = 0; i < 8; ++i) {
 8001890:	2300      	movs	r3, #0
 8001892:	75bb      	strb	r3, [r7, #22]
 8001894:	e035      	b.n	8001902 <shiftIn+0x8a>
		HAL_GPIO_WritePin(clockPort,clockPin, 1);
 8001896:	893b      	ldrh	r3, [r7, #8]
 8001898:	2201      	movs	r2, #1
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f005 f9f9 	bl	8006c94 <HAL_GPIO_WritePin>
		if (bitOrder == LSBFIRST)
 80018a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d110      	bne.n	80018cc <shiftIn+0x54>
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << i;
 80018aa:	897b      	ldrh	r3, [r7, #10]
 80018ac:	4619      	mov	r1, r3
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f005 f9d8 	bl	8006c64 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	7dbb      	ldrb	r3, [r7, #22]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	b25a      	sxtb	r2, r3
 80018c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	75fb      	strb	r3, [r7, #23]
 80018ca:	e011      	b.n	80018f0 <shiftIn+0x78>
		else
			value |= HAL_GPIO_ReadPin(dataPort,dataPin) << (7 - i);
 80018cc:	897b      	ldrh	r3, [r7, #10]
 80018ce:	4619      	mov	r1, r3
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f005 f9c7 	bl	8006c64 <HAL_GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	7dbb      	ldrb	r3, [r7, #22]
 80018dc:	f1c3 0307 	rsb	r3, r3, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	b25a      	sxtb	r2, r3
 80018e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(clockPort, clockPin, 0);
 80018f0:	893b      	ldrh	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	4619      	mov	r1, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f005 f9cc 	bl	8006c94 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; ++i) {
 80018fc:	7dbb      	ldrb	r3, [r7, #22]
 80018fe:	3301      	adds	r3, #1
 8001900:	75bb      	strb	r3, [r7, #22]
 8001902:	7dbb      	ldrb	r3, [r7, #22]
 8001904:	2b07      	cmp	r3, #7
 8001906:	d9c6      	bls.n	8001896 <shiftIn+0x1e>
	}
	return value;
 8001908:	7dfb      	ldrb	r3, [r7, #23]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <readHX>:

unsigned long readHX() {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b087      	sub	sp, #28
 8001918:	af02      	add	r7, sp, #8

  // pulse clock line to start a reading
  for (char i = 0; i < HX_MODE; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e00e      	b.n	800193e <readHX+0x2a>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001926:	4827      	ldr	r0, [pc, #156]	; (80019c4 <readHX+0xb0>)
 8001928:	f005 f9b4 	bl	8006c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NCP_SCK_GPIO_Port,NCP_SCK_Pin, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001932:	4824      	ldr	r0, [pc, #144]	; (80019c4 <readHX+0xb0>)
 8001934:	f005 f9ae 	bl	8006c94 <HAL_GPIO_WritePin>
  for (char i = 0; i < HX_MODE; i++) {
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	2203      	movs	r2, #3
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	4293      	cmp	r3, r2
 8001944:	d3ec      	bcc.n	8001920 <readHX+0xc>
  }

  // wait for the reading to finish
  while (HAL_GPIO_ReadPin(NCP_DAT_GPIO_Port,NCP_DAT_Pin)) {}
 8001946:	bf00      	nop
 8001948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800194c:	481d      	ldr	r0, [pc, #116]	; (80019c4 <readHX+0xb0>)
 800194e:	f005 f989 	bl	8006c64 <HAL_GPIO_ReadPin>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f7      	bne.n	8001948 <readHX+0x34>

  // read the 24-bit pressure as 3 bytes using SPI
  byte data[3];
  for (byte j = 3; j--;) {
 8001958:	2303      	movs	r3, #3
 800195a:	73bb      	strb	r3, [r7, #14]
 800195c:	e011      	b.n	8001982 <readHX+0x6e>
    data[j] = shiftIn(NCP_DAT_GPIO_Port, NCP_DAT_Pin, NCP_SCK_GPIO_Port, NCP_SCK_Pin, MSBFIRST);
 800195e:	7bbc      	ldrb	r4, [r7, #14]
 8001960:	2301      	movs	r3, #1
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <readHX+0xb0>)
 800196a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800196e:	4815      	ldr	r0, [pc, #84]	; (80019c4 <readHX+0xb0>)
 8001970:	f7ff ff82 	bl	8001878 <shiftIn>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	f104 0310 	add.w	r3, r4, #16
 800197c:	443b      	add	r3, r7
 800197e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for (byte j = 3; j--;) {
 8001982:	7bbb      	ldrb	r3, [r7, #14]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	73ba      	strb	r2, [r7, #14]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e8      	bne.n	800195e <readHX+0x4a>
  }

  data[2] ^= 0x80;  // see note
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8001992:	43db      	mvns	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	71bb      	strb	r3, [r7, #6]

  // shift the 3 bytes into a large integer
  long result=0;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  result += (long)data[2] << 16;
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	4413      	add	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
  result += (long)data[1] << 8;
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	4413      	add	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  result += (long)data[0];
 80019b0:	793b      	ldrb	r3, [r7, #4]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4413      	add	r3, r2
 80019b8:	60bb      	str	r3, [r7, #8]

  return result;
 80019ba:	68bb      	ldr	r3, [r7, #8]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	40020000 	.word	0x40020000

080019c8 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 80019d4:	2200      	movs	r2, #0
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	4834      	ldr	r0, [pc, #208]	; (8001aac <Max6675_Read_Temp+0xe4>)
 80019da:	f005 f95b 	bl	8006c94 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80019de:	2332      	movs	r3, #50	; 0x32
 80019e0:	2201      	movs	r2, #1
 80019e2:	4933      	ldr	r1, [pc, #204]	; (8001ab0 <Max6675_Read_Temp+0xe8>)
 80019e4:	4833      	ldr	r0, [pc, #204]	; (8001ab4 <Max6675_Read_Temp+0xec>)
 80019e6:	f007 f92c 	bl	8008c42 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 80019ea:	2201      	movs	r2, #1
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	482f      	ldr	r0, [pc, #188]	; (8001aac <Max6675_Read_Temp+0xe4>)
 80019f0:	f005 f950 	bl	8006c94 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <Max6675_Read_Temp+0xe8>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <Max6675_Read_Temp+0xf0>)
 8001a00:	701a      	strb	r2, [r3, #0]
Error=0;
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <Max6675_Read_Temp+0xf4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <Max6675_Read_Temp+0xf0>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d02b      	beq.n	8001a68 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <Max6675_Read_Temp+0xf0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d120      	bne.n	8001a5a <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001a18:	4829      	ldr	r0, [pc, #164]	; (8001ac0 <Max6675_Read_Temp+0xf8>)
 8001a1a:	f007 fd45 	bl	80094a8 <HAL_TIM_Base_Start>
		while(timer_val<1)
 8001a1e:	e011      	b.n	8001a44 <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <Max6675_Read_Temp+0xf0>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d103      	bne.n	8001a30 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <Max6675_Read_Temp+0xf4>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
				break;
 8001a2e:	e00d      	b.n	8001a4c <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <Max6675_Read_Temp+0xf8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <Max6675_Read_Temp+0xfc>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	0b5b      	lsrs	r3, r3, #13
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <Max6675_Read_Temp+0x100>)
 8001a42:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <Max6675_Read_Temp+0x100>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0e9      	beq.n	8001a20 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <Max6675_Read_Temp+0x100>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <Max6675_Read_Temp+0xf4>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e006      	b.n	8001a68 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <Max6675_Read_Temp+0xf0>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d102      	bne.n	8001a68 <Max6675_Read_Temp+0xa0>
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <Max6675_Read_Temp+0xf4>)
 8001a64:	2203      	movs	r2, #3
 8001a66:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <Max6675_Read_Temp+0xe8>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <Max6675_Read_Temp+0xe8>)
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4313      	orrs	r3, r2
 8001a76:	10db      	asrs	r3, r3, #3
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8001a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a88:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8001a94:	20fa      	movs	r0, #250	; 0xfa
 8001a96:	f003 fdf7 	bl	8005688 <HAL_Delay>
return Temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	ee07 3a90 	vmov	s15, r3
}
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	2000012c 	.word	0x2000012c
 8001ab4:	200002f4 	.word	0x200002f4
 8001ab8:	2000012e 	.word	0x2000012e
 8001abc:	2000012f 	.word	0x2000012f
 8001ac0:	200003a4 	.word	0x200003a4
 8001ac4:	d1b71759 	.word	0xd1b71759
 8001ac8:	2000055c 	.word	0x2000055c
 8001acc:	00000000 	.word	0x00000000

08001ad0 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ad4:	b08c      	sub	sp, #48	; 0x30
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001adc:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <decodeGGA+0x17c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001ae6:	e004      	b.n	8001af2 <decodeGGA+0x22>
 8001ae8:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <decodeGGA+0x17c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	4a57      	ldr	r2, [pc, #348]	; (8001c4c <decodeGGA+0x17c>)
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <decodeGGA+0x17c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b2c      	cmp	r3, #44	; 0x2c
 8001b00:	d1f2      	bne.n	8001ae8 <decodeGGA+0x18>
	inx++;
 8001b02:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <decodeGGA+0x17c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <decodeGGA+0x17c>)
 8001b0a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001b0c:	e004      	b.n	8001b18 <decodeGGA+0x48>
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <decodeGGA+0x17c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	4a4d      	ldr	r2, [pc, #308]	; (8001c4c <decodeGGA+0x17c>)
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <decodeGGA+0x17c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b2c      	cmp	r3, #44	; 0x2c
 8001b26:	d1f2      	bne.n	8001b0e <decodeGGA+0x3e>
	inx++;
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <decodeGGA+0x17c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <decodeGGA+0x17c>)
 8001b30:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001b32:	e004      	b.n	8001b3e <decodeGGA+0x6e>
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <decodeGGA+0x17c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	4a44      	ldr	r2, [pc, #272]	; (8001c4c <decodeGGA+0x17c>)
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <decodeGGA+0x17c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001b4c:	d1f2      	bne.n	8001b34 <decodeGGA+0x64>
	inx++;
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <decodeGGA+0x17c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <decodeGGA+0x17c>)
 8001b56:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001b58:	e004      	b.n	8001b64 <decodeGGA+0x94>
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <decodeGGA+0x17c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <decodeGGA+0x17c>)
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <decodeGGA+0x17c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b2c      	cmp	r3, #44	; 0x2c
 8001b72:	d1f2      	bne.n	8001b5a <decodeGGA+0x8a>
	inx++;
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <decodeGGA+0x17c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <decodeGGA+0x17c>)
 8001b7c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001b7e:	e004      	b.n	8001b8a <decodeGGA+0xba>
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <decodeGGA+0x17c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a31      	ldr	r2, [pc, #196]	; (8001c4c <decodeGGA+0x17c>)
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <decodeGGA+0x17c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b2c      	cmp	r3, #44	; 0x2c
 8001b98:	d1f2      	bne.n	8001b80 <decodeGGA+0xb0>
	inx++;
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <decodeGGA+0x17c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <decodeGGA+0x17c>)
 8001ba2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001ba4:	e004      	b.n	8001bb0 <decodeGGA+0xe0>
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <decodeGGA+0x17c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <decodeGGA+0x17c>)
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <decodeGGA+0x17c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b2c      	cmp	r3, #44	; 0x2c
 8001bbe:	d1f2      	bne.n	8001ba6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <decodeGGA+0x17c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a21      	ldr	r2, [pc, #132]	; (8001c4c <decodeGGA+0x17c>)
 8001bc8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <decodeGGA+0x17c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b31      	cmp	r3, #49	; 0x31
 8001bd8:	d00f      	beq.n	8001bfa <decodeGGA+0x12a>
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <decodeGGA+0x17c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b32      	cmp	r3, #50	; 0x32
 8001be8:	d007      	beq.n	8001bfa <decodeGGA+0x12a>
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <decodeGGA+0x17c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b36      	cmp	r3, #54	; 0x36
 8001bf8:	d106      	bne.n	8001c08 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <decodeGGA+0x17c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c06:	e009      	b.n	8001c1c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e2fd      	b.n	800220e <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <decodeGGA+0x17c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <decodeGGA+0x17c>)
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <decodeGGA+0x17c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b2c      	cmp	r3, #44	; 0x2c
 8001c2a:	d1f2      	bne.n	8001c12 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <decodeGGA+0x17c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <decodeGGA+0x17c>)
 8001c34:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00c fca7 	bl	800e592 <memset>
	i=0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c48:	e016      	b.n	8001c78 <decodeGGA+0x1a8>
 8001c4a:	bf00      	nop
 8001c4c:	20000130 	.word	0x20000130
	{
		buffer[i] = GGAbuffer[inx];
 8001c50:	4bab      	ldr	r3, [pc, #684]	; (8001f00 <decodeGGA+0x430>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	7819      	ldrb	r1, [r3, #0]
 8001c5c:	f107 020c 	add.w	r2, r7, #12
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	4413      	add	r3, r2
 8001c64:	460a      	mov	r2, r1
 8001c66:	701a      	strb	r2, [r3, #0]
		i++;
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001c6e:	4ba4      	ldr	r3, [pc, #656]	; (8001f00 <decodeGGA+0x430>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4aa2      	ldr	r2, [pc, #648]	; (8001f00 <decodeGGA+0x430>)
 8001c76:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c78:	4ba1      	ldr	r3, [pc, #644]	; (8001f00 <decodeGGA+0x430>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b2c      	cmp	r3, #44	; 0x2c
 8001c86:	d1e3      	bne.n	8001c50 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f00c fad9 	bl	800e244 <atoi>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a9b      	ldr	r2, [pc, #620]	; (8001f04 <decodeGGA+0x434>)
 8001c96:	fb82 1203 	smull	r1, r2, r2, r3
 8001c9a:	1312      	asrs	r2, r2, #12
 8001c9c:	17db      	asrs	r3, r3, #31
 8001c9e:	1ad2      	subs	r2, r2, r3
 8001ca0:	4b99      	ldr	r3, [pc, #612]	; (8001f08 <decodeGGA+0x438>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4999      	ldr	r1, [pc, #612]	; (8001f0c <decodeGGA+0x43c>)
 8001ca6:	fb81 0103 	smull	r0, r1, r1, r3
 8001caa:	1149      	asrs	r1, r1, #5
 8001cac:	17db      	asrs	r3, r3, #31
 8001cae:	1acb      	subs	r3, r1, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a97      	ldr	r2, [pc, #604]	; (8001f10 <decodeGGA+0x440>)
 8001cb4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00c fac2 	bl	800e244 <atoi>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a92      	ldr	r2, [pc, #584]	; (8001f0c <decodeGGA+0x43c>)
 8001cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc8:	1152      	asrs	r2, r2, #5
 8001cca:	17db      	asrs	r3, r3, #31
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	4a8f      	ldr	r2, [pc, #572]	; (8001f0c <decodeGGA+0x43c>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1151      	asrs	r1, r2, #5
 8001cd6:	17da      	asrs	r2, r3, #31
 8001cd8:	1a8a      	subs	r2, r1, r2
 8001cda:	2164      	movs	r1, #100	; 0x64
 8001cdc:	fb01 f202 	mul.w	r2, r1, r2
 8001ce0:	1a9a      	subs	r2, r3, r2
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <decodeGGA+0x438>)
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <decodeGGA+0x43c>)
 8001ce8:	fb83 0301 	smull	r0, r3, r3, r1
 8001cec:	1158      	asrs	r0, r3, #5
 8001cee:	17cb      	asrs	r3, r1, #31
 8001cf0:	1ac3      	subs	r3, r0, r3
 8001cf2:	2064      	movs	r0, #100	; 0x64
 8001cf4:	fb00 f303 	mul.w	r3, r0, r3
 8001cf8:	1acb      	subs	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a85      	ldr	r2, [pc, #532]	; (8001f14 <decodeGGA+0x444>)
 8001cfe:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001d00:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <decodeGGA+0x444>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b3b      	cmp	r3, #59	; 0x3b
 8001d06:	dd09      	ble.n	8001d1c <decodeGGA+0x24c>
	{
		min = min-60;
 8001d08:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <decodeGGA+0x444>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3b3c      	subs	r3, #60	; 0x3c
 8001d0e:	4a81      	ldr	r2, [pc, #516]	; (8001f14 <decodeGGA+0x444>)
 8001d10:	6013      	str	r3, [r2, #0]
		hr++;
 8001d12:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <decodeGGA+0x440>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	4a7d      	ldr	r2, [pc, #500]	; (8001f10 <decodeGGA+0x440>)
 8001d1a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <decodeGGA+0x440>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da09      	bge.n	8001d38 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001d24:	4b7a      	ldr	r3, [pc, #488]	; (8001f10 <decodeGGA+0x440>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3318      	adds	r3, #24
 8001d2a:	4a79      	ldr	r2, [pc, #484]	; (8001f10 <decodeGGA+0x440>)
 8001d2c:	6013      	str	r3, [r2, #0]
		daychange--;
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <decodeGGA+0x448>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	4a78      	ldr	r2, [pc, #480]	; (8001f18 <decodeGGA+0x448>)
 8001d36:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <decodeGGA+0x440>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b17      	cmp	r3, #23
 8001d3e:	dd09      	ble.n	8001d54 <decodeGGA+0x284>
	{
		hr=hr-24;
 8001d40:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <decodeGGA+0x440>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3b18      	subs	r3, #24
 8001d46:	4a72      	ldr	r2, [pc, #456]	; (8001f10 <decodeGGA+0x440>)
 8001d48:	6013      	str	r3, [r2, #0]
		daychange++;
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <decodeGGA+0x448>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4a71      	ldr	r2, [pc, #452]	; (8001f18 <decodeGGA+0x448>)
 8001d52:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001d54:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <decodeGGA+0x440>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001d5c:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <decodeGGA+0x444>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f00c fa6b 	bl	800e244 <atoi>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <decodeGGA+0x43c>)
 8001d72:	fb83 1302 	smull	r1, r3, r3, r2
 8001d76:	1159      	asrs	r1, r3, #5
 8001d78:	17d3      	asrs	r3, r2, #31
 8001d7a:	1acb      	subs	r3, r1, r3
 8001d7c:	2164      	movs	r1, #100	; 0x64
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001d88:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <decodeGGA+0x430>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	4a5c      	ldr	r2, [pc, #368]	; (8001f00 <decodeGGA+0x430>)
 8001d90:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	220c      	movs	r2, #12
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00c fbf9 	bl	800e592 <memset>
	i=0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001da4:	e013      	b.n	8001dce <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001da6:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <decodeGGA+0x430>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	7819      	ldrb	r1, [r3, #0]
 8001db2:	f107 020c 	add.w	r2, r7, #12
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	4413      	add	r3, r2
 8001dba:	460a      	mov	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
		i++;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001dc4:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <decodeGGA+0x430>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a4d      	ldr	r2, [pc, #308]	; (8001f00 <decodeGGA+0x430>)
 8001dcc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001dce:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <decodeGGA+0x430>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b2c      	cmp	r3, #44	; 0x2c
 8001ddc:	d1e3      	bne.n	8001da6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fa14 	bl	8000210 <strlen>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d801      	bhi.n	8001df2 <decodeGGA+0x322>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e20d      	b.n	800220e <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00c fa24 	bl	800e244 <atoi>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001e04:	e002      	b.n	8001e0c <decodeGGA+0x33c>
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	3301      	adds	r3, #1
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	f107 020c 	add.w	r2, r7, #12
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b2e      	cmp	r3, #46	; 0x2e
 8001e18:	d1f5      	bne.n	8001e06 <decodeGGA+0x336>
	j++;
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe f9f3 	bl	8000210 <strlen>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	f107 020c 	add.w	r2, r7, #12
 8001e38:	4413      	add	r3, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00c fa02 	bl	800e244 <atoi>
 8001e40:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001e42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb8c 	bl	8000564 <__aeabi_i2d>
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <decodeGGA+0x44c>)
 8001e52:	f7fe fd1b 	bl	800088c <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4690      	mov	r8, r2
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	69f8      	ldr	r0, [r7, #28]
 8001e60:	f7fe fb80 	bl	8000564 <__aeabi_i2d>
 8001e64:	4604      	mov	r4, r0
 8001e66:	460d      	mov	r5, r1
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb79 	bl	8000564 <__aeabi_i2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b11 	vmov	d1, r2, r3
 8001e7a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001ef8 <decodeGGA+0x428>
 8001e7e:	f00e fda3 	bl	80109c8 <pow>
 8001e82:	ec53 2b10 	vmov	r2, r3, d0
 8001e86:	4620      	mov	r0, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	f7fe fcff 	bl	800088c <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4640      	mov	r0, r8
 8001e94:	4649      	mov	r1, r9
 8001e96:	f7fe fa19 	bl	80002cc <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fec1 	bl	8000c28 <__aeabi_d2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]
	inx++;  
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <decodeGGA+0x430>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <decodeGGA+0x430>)
 8001eb8:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <decodeGGA+0x430>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <decodeGGA+0x430>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <decodeGGA+0x430>)
 8001ed2:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <decodeGGA+0x430>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <decodeGGA+0x430>)
 8001edc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00c fb53 	bl	800e592 <memset>
	i=0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001ef0:	e02a      	b.n	8001f48 <decodeGGA+0x478>
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	40240000 	.word	0x40240000
 8001f00:	20000130 	.word	0x20000130
 8001f04:	68db8bad 	.word	0x68db8bad
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	51eb851f 	.word	0x51eb851f
 8001f10:	20000134 	.word	0x20000134
 8001f14:	20000138 	.word	0x20000138
 8001f18:	20000148 	.word	0x20000148
 8001f1c:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <decodeGGA+0x680>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	7819      	ldrb	r1, [r3, #0]
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f32:	4413      	add	r3, r2
 8001f34:	460a      	mov	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
		i++;
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f3e:	4b84      	ldr	r3, [pc, #528]	; (8002150 <decodeGGA+0x680>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a82      	ldr	r2, [pc, #520]	; (8002150 <decodeGGA+0x680>)
 8001f46:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001f48:	4b81      	ldr	r3, [pc, #516]	; (8002150 <decodeGGA+0x680>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b2c      	cmp	r3, #44	; 0x2c
 8001f56:	d1e3      	bne.n	8001f20 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f00c f971 	bl	800e244 <atoi>
 8001f62:	4603      	mov	r3, r0
 8001f64:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001f6a:	e002      	b.n	8001f72 <decodeGGA+0x4a2>
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	3301      	adds	r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f72:	f107 020c 	add.w	r2, r7, #12
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8001f7e:	d1f5      	bne.n	8001f6c <decodeGGA+0x49c>
	j++;
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	3301      	adds	r3, #1
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe f940 	bl	8000210 <strlen>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	f107 020c 	add.w	r2, r7, #12
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00c f94f 	bl	800e244 <atoi>
 8001fa6:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001fa8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fad9 	bl	8000564 <__aeabi_i2d>
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b67      	ldr	r3, [pc, #412]	; (8002154 <decodeGGA+0x684>)
 8001fb8:	f7fe fc68 	bl	800088c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4690      	mov	r8, r2
 8001fc2:	4699      	mov	r9, r3
 8001fc4:	69f8      	ldr	r0, [r7, #28]
 8001fc6:	f7fe facd 	bl	8000564 <__aeabi_i2d>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	460d      	mov	r5, r1
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fac6 	bl	8000564 <__aeabi_i2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	ec43 2b11 	vmov	d1, r2, r3
 8001fe0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8002148 <decodeGGA+0x678>
 8001fe4:	f00e fcf0 	bl	80109c8 <pow>
 8001fe8:	ec53 2b10 	vmov	r2, r3, d0
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe fc4c 	bl	800088c <__aeabi_ddiv>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4640      	mov	r0, r8
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	f7fe f966 	bl	80002cc <__adddf3>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fe0e 	bl	8000c28 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	609a      	str	r2, [r3, #8]
	inx++;
 8002016:	4b4e      	ldr	r3, [pc, #312]	; (8002150 <decodeGGA+0x680>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	4a4c      	ldr	r2, [pc, #304]	; (8002150 <decodeGGA+0x680>)
 800201e:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002020:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <decodeGGA+0x680>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002030:	4b47      	ldr	r3, [pc, #284]	; (8002150 <decodeGGA+0x680>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4a46      	ldr	r2, [pc, #280]	; (8002150 <decodeGGA+0x680>)
 8002038:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800203a:	4b45      	ldr	r3, [pc, #276]	; (8002150 <decodeGGA+0x680>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	4a43      	ldr	r2, [pc, #268]	; (8002150 <decodeGGA+0x680>)
 8002042:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8002044:	4b42      	ldr	r3, [pc, #264]	; (8002150 <decodeGGA+0x680>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	4a41      	ldr	r2, [pc, #260]	; (8002150 <decodeGGA+0x680>)
 800204c:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 800204e:	4b40      	ldr	r3, [pc, #256]	; (8002150 <decodeGGA+0x680>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <decodeGGA+0x680>)
 8002056:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	220c      	movs	r2, #12
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f00c fa96 	bl	800e592 <memset>
	i=0;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800206a:	e013      	b.n	8002094 <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 800206c:	4b38      	ldr	r3, [pc, #224]	; (8002150 <decodeGGA+0x680>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	7819      	ldrb	r1, [r3, #0]
 8002078:	f107 020c 	add.w	r2, r7, #12
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	4413      	add	r3, r2
 8002080:	460a      	mov	r2, r1
 8002082:	701a      	strb	r2, [r3, #0]
		i++;
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	3301      	adds	r3, #1
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <decodeGGA+0x680>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <decodeGGA+0x680>)
 8002092:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <decodeGGA+0x680>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b2c      	cmp	r3, #44	; 0x2c
 80020a2:	d1e3      	bne.n	800206c <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00c f8cb 	bl	800e244 <atoi>
 80020ae:	4602      	mov	r2, r0
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <decodeGGA+0x680>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <decodeGGA+0x680>)
 80020bc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80020be:	e004      	b.n	80020ca <decodeGGA+0x5fa>
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <decodeGGA+0x680>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <decodeGGA+0x680>)
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <decodeGGA+0x680>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b2c      	cmp	r3, #44	; 0x2c
 80020d8:	d1f2      	bne.n	80020c0 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <decodeGGA+0x680>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <decodeGGA+0x680>)
 80020e2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	220c      	movs	r2, #12
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f00c fa50 	bl	800e592 <memset>
	i=0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80020f6:	e013      	b.n	8002120 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <decodeGGA+0x680>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	7819      	ldrb	r1, [r3, #0]
 8002104:	f107 020c 	add.w	r2, r7, #12
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	4413      	add	r3, r2
 800210c:	460a      	mov	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
		i++;
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	3301      	adds	r3, #1
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <decodeGGA+0x680>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <decodeGGA+0x680>)
 800211e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <decodeGGA+0x680>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b2c      	cmp	r3, #44	; 0x2c
 800212e:	d1e3      	bne.n	80020f8 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4618      	mov	r0, r3
 8002136:	f00c f885 	bl	800e244 <atoi>
 800213a:	4603      	mov	r3, r0
 800213c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8002142:	e00c      	b.n	800215e <decodeGGA+0x68e>
 8002144:	f3af 8000 	nop.w
 8002148:	00000000 	.word	0x00000000
 800214c:	40240000 	.word	0x40240000
 8002150:	20000130 	.word	0x20000130
 8002154:	40590000 	.word	0x40590000
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	3301      	adds	r3, #1
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
 800215e:	f107 020c 	add.w	r2, r7, #12
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b2e      	cmp	r3, #46	; 0x2e
 800216a:	d1f5      	bne.n	8002158 <decodeGGA+0x688>
	j++;
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	3301      	adds	r3, #1
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f84a 	bl	8000210 <strlen>
 800217c:	4602      	mov	r2, r0
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	f107 020c 	add.w	r2, r7, #12
 800218a:	4413      	add	r3, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f00c f859 	bl	800e244 <atoi>
 8002192:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8002194:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f9e3 	bl	8000564 <__aeabi_i2d>
 800219e:	4604      	mov	r4, r0
 80021a0:	460d      	mov	r5, r1
 80021a2:	69f8      	ldr	r0, [r7, #28]
 80021a4:	f7fe f9de 	bl	8000564 <__aeabi_i2d>
 80021a8:	4680      	mov	r8, r0
 80021aa:	4689      	mov	r9, r1
 80021ac:	6a38      	ldr	r0, [r7, #32]
 80021ae:	f7fe f9d9 	bl	8000564 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ec43 2b11 	vmov	d1, r2, r3
 80021ba:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002218 <decodeGGA+0x748>
 80021be:	f00e fc03 	bl	80109c8 <pow>
 80021c2:	ec53 2b10 	vmov	r2, r3, d0
 80021c6:	4640      	mov	r0, r8
 80021c8:	4649      	mov	r1, r9
 80021ca:	f7fe fb5f 	bl	800088c <__aeabi_ddiv>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe f879 	bl	80002cc <__adddf3>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fd21 	bl	8000c28 <__aeabi_d2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	621a      	str	r2, [r3, #32]

	inx++;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <decodeGGA+0x750>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <decodeGGA+0x750>)
 80021f8:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <decodeGGA+0x750>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800220c:	2300      	movs	r3, #0

}
 800220e:	4618      	mov	r0, r3
 8002210:	3730      	adds	r7, #48	; 0x30
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002218:	00000000 	.word	0x00000000
 800221c:	40240000 	.word	0x40240000
 8002220:	20000130 	.word	0x20000130
 8002224:	00000000 	.word	0x00000000

08002228 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800222c:	b090      	sub	sp, #64	; 0x40
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
	inx = 0;
 8002234:	4b94      	ldr	r3, [pc, #592]	; (8002488 <decodeRMC+0x260>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800223e:	e004      	b.n	800224a <decodeRMC+0x22>
 8002240:	4b91      	ldr	r3, [pc, #580]	; (8002488 <decodeRMC+0x260>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a90      	ldr	r2, [pc, #576]	; (8002488 <decodeRMC+0x260>)
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b8f      	ldr	r3, [pc, #572]	; (8002488 <decodeRMC+0x260>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b2c      	cmp	r3, #44	; 0x2c
 8002258:	d1f2      	bne.n	8002240 <decodeRMC+0x18>
	inx++;
 800225a:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <decodeRMC+0x260>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	4a89      	ldr	r2, [pc, #548]	; (8002488 <decodeRMC+0x260>)
 8002262:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8002264:	e004      	b.n	8002270 <decodeRMC+0x48>
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <decodeRMC+0x260>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a86      	ldr	r2, [pc, #536]	; (8002488 <decodeRMC+0x260>)
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b85      	ldr	r3, [pc, #532]	; (8002488 <decodeRMC+0x260>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b2c      	cmp	r3, #44	; 0x2c
 800227e:	d1f2      	bne.n	8002266 <decodeRMC+0x3e>
	inx++;
 8002280:	4b81      	ldr	r3, [pc, #516]	; (8002488 <decodeRMC+0x260>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	4a80      	ldr	r2, [pc, #512]	; (8002488 <decodeRMC+0x260>)
 8002288:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 800228a:	4b7f      	ldr	r3, [pc, #508]	; (8002488 <decodeRMC+0x260>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b41      	cmp	r3, #65	; 0x41
 8002298:	d10d      	bne.n	80022b6 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80022a0:	4b79      	ldr	r3, [pc, #484]	; (8002488 <decodeRMC+0x260>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	4a78      	ldr	r2, [pc, #480]	; (8002488 <decodeRMC+0x260>)
 80022a8:	6013      	str	r3, [r2, #0]
	inx++;
 80022aa:	4b77      	ldr	r3, [pc, #476]	; (8002488 <decodeRMC+0x260>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	4a75      	ldr	r2, [pc, #468]	; (8002488 <decodeRMC+0x260>)
 80022b2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022b4:	e009      	b.n	80022ca <decodeRMC+0xa2>
		rmc->isValid =0;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
		return 1;
 80022bc:	2301      	movs	r3, #1
 80022be:	e1d8      	b.n	8002672 <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80022c0:	4b71      	ldr	r3, [pc, #452]	; (8002488 <decodeRMC+0x260>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a70      	ldr	r2, [pc, #448]	; (8002488 <decodeRMC+0x260>)
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <decodeRMC+0x260>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b2c      	cmp	r3, #44	; 0x2c
 80022d8:	d1f2      	bne.n	80022c0 <decodeRMC+0x98>
	inx++;
 80022da:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <decodeRMC+0x260>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a69      	ldr	r2, [pc, #420]	; (8002488 <decodeRMC+0x260>)
 80022e2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80022e4:	e004      	b.n	80022f0 <decodeRMC+0xc8>
 80022e6:	4b68      	ldr	r3, [pc, #416]	; (8002488 <decodeRMC+0x260>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	4a66      	ldr	r2, [pc, #408]	; (8002488 <decodeRMC+0x260>)
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b65      	ldr	r3, [pc, #404]	; (8002488 <decodeRMC+0x260>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b2c      	cmp	r3, #44	; 0x2c
 80022fe:	d1f2      	bne.n	80022e6 <decodeRMC+0xbe>
	inx++;
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <decodeRMC+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	4a60      	ldr	r2, [pc, #384]	; (8002488 <decodeRMC+0x260>)
 8002308:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800230a:	e004      	b.n	8002316 <decodeRMC+0xee>
 800230c:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <decodeRMC+0x260>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a5d      	ldr	r2, [pc, #372]	; (8002488 <decodeRMC+0x260>)
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <decodeRMC+0x260>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b2c      	cmp	r3, #44	; 0x2c
 8002324:	d1f2      	bne.n	800230c <decodeRMC+0xe4>
	inx++;
 8002326:	4b58      	ldr	r3, [pc, #352]	; (8002488 <decodeRMC+0x260>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a56      	ldr	r2, [pc, #344]	; (8002488 <decodeRMC+0x260>)
 800232e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8002330:	e004      	b.n	800233c <decodeRMC+0x114>
 8002332:	4b55      	ldr	r3, [pc, #340]	; (8002488 <decodeRMC+0x260>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	4a53      	ldr	r2, [pc, #332]	; (8002488 <decodeRMC+0x260>)
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b52      	ldr	r3, [pc, #328]	; (8002488 <decodeRMC+0x260>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b2c      	cmp	r3, #44	; 0x2c
 800234a:	d1f2      	bne.n	8002332 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800234c:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <decodeRMC+0x260>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <decodeRMC+0x260>)
 8002354:	6013      	str	r3, [r2, #0]
	i=0;
 8002356:	2300      	movs	r3, #0
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	220c      	movs	r2, #12
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f00c f915 	bl	800e592 <memset>
	while (RMCbuffer[inx] != ',')
 8002368:	e013      	b.n	8002392 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <decodeRMC+0x260>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	7819      	ldrb	r1, [r3, #0]
 8002376:	f107 0208 	add.w	r2, r7, #8
 800237a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237c:	4413      	add	r3, r2
 800237e:	460a      	mov	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
		i++;
 8002382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002384:	3301      	adds	r3, #1
 8002386:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002388:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <decodeRMC+0x260>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <decodeRMC+0x260>)
 8002390:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <decodeRMC+0x260>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b2c      	cmp	r3, #44	; 0x2c
 80023a0:	d1e3      	bne.n	800236a <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d056      	beq.n	800245a <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00b ff47 	bl	800e244 <atoi>
 80023b6:	4603      	mov	r3, r0
 80023b8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80023be:	e002      	b.n	80023c6 <decodeRMC+0x19e>
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	3301      	adds	r3, #1
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c6:	f107 0208 	add.w	r2, r7, #8
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b2e      	cmp	r3, #46	; 0x2e
 80023d2:	d1f5      	bne.n	80023c0 <decodeRMC+0x198>
		j++;
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	3301      	adds	r3, #1
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fd ff16 	bl	8000210 <strlen>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	f107 0208 	add.w	r2, r7, #8
 80023f2:	4413      	add	r3, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00b ff25 	bl	800e244 <atoi>
 80023fa:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 80023fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f8af 	bl	8000564 <__aeabi_i2d>
 8002406:	4604      	mov	r4, r0
 8002408:	460d      	mov	r5, r1
 800240a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800240c:	f7fe f8aa 	bl	8000564 <__aeabi_i2d>
 8002410:	4680      	mov	r8, r0
 8002412:	4689      	mov	r9, r1
 8002414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002416:	f7fe f8a5 	bl	8000564 <__aeabi_i2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	ec43 2b11 	vmov	d1, r2, r3
 8002422:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002480 <decodeRMC+0x258>
 8002426:	f00e facf 	bl	80109c8 <pow>
 800242a:	ec53 2b10 	vmov	r2, r3, d0
 800242e:	4640      	mov	r0, r8
 8002430:	4649      	mov	r1, r9
 8002432:	f7fe fa2b 	bl	800088c <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4620      	mov	r0, r4
 800243c:	4629      	mov	r1, r5
 800243e:	f7fd ff45 	bl	80002cc <__adddf3>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fbed 	bl	8000c28 <__aeabi_d2f>
 800244e:	4603      	mov	r3, r0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	e003      	b.n	8002462 <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <decodeRMC+0x260>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <decodeRMC+0x260>)
 800246a:	6013      	str	r3, [r2, #0]
	i=0;
 800246c:	2300      	movs	r3, #0
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	220c      	movs	r2, #12
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f00c f88a 	bl	800e592 <memset>
	while (RMCbuffer[inx] != ',')
 800247e:	e019      	b.n	80024b4 <decodeRMC+0x28c>
 8002480:	00000000 	.word	0x00000000
 8002484:	40240000 	.word	0x40240000
 8002488:	20000130 	.word	0x20000130
	{
		buffer[i] = RMCbuffer[inx];
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <decodeRMC+0x460>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	7819      	ldrb	r1, [r3, #0]
 8002498:	f107 0208 	add.w	r2, r7, #8
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	4413      	add	r3, r2
 80024a0:	460a      	mov	r2, r1
 80024a2:	701a      	strb	r2, [r3, #0]
		i++;
 80024a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a6:	3301      	adds	r3, #1
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80024aa:	4b77      	ldr	r3, [pc, #476]	; (8002688 <decodeRMC+0x460>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a75      	ldr	r2, [pc, #468]	; (8002688 <decodeRMC+0x460>)
 80024b2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024b4:	4b74      	ldr	r3, [pc, #464]	; (8002688 <decodeRMC+0x460>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b2c      	cmp	r3, #44	; 0x2c
 80024c2:	d1e3      	bne.n	800248c <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d056      	beq.n	800257c <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00b feb6 	bl	800e244 <atoi>
 80024d8:	4603      	mov	r3, r0
 80024da:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80024e0:	e002      	b.n	80024e8 <decodeRMC+0x2c0>
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	3301      	adds	r3, #1
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
 80024e8:	f107 0208 	add.w	r2, r7, #8
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b2e      	cmp	r3, #46	; 0x2e
 80024f4:	d1f5      	bne.n	80024e2 <decodeRMC+0x2ba>
		j++;
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	3301      	adds	r3, #1
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd fe85 	bl	8000210 <strlen>
 8002506:	4602      	mov	r2, r0
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	f107 0208 	add.w	r2, r7, #8
 8002514:	4413      	add	r3, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f00b fe94 	bl	800e244 <atoi>
 800251c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800251e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f81e 	bl	8000564 <__aeabi_i2d>
 8002528:	4604      	mov	r4, r0
 800252a:	460d      	mov	r5, r1
 800252c:	69b8      	ldr	r0, [r7, #24]
 800252e:	f7fe f819 	bl	8000564 <__aeabi_i2d>
 8002532:	4680      	mov	r8, r0
 8002534:	4689      	mov	r9, r1
 8002536:	69f8      	ldr	r0, [r7, #28]
 8002538:	f7fe f814 	bl	8000564 <__aeabi_i2d>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	ec43 2b11 	vmov	d1, r2, r3
 8002544:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002680 <decodeRMC+0x458>
 8002548:	f00e fa3e 	bl	80109c8 <pow>
 800254c:	ec53 2b10 	vmov	r2, r3, d0
 8002550:	4640      	mov	r0, r8
 8002552:	4649      	mov	r1, r9
 8002554:	f7fe f99a 	bl	800088c <__aeabi_ddiv>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4620      	mov	r0, r4
 800255e:	4629      	mov	r1, r5
 8002560:	f7fd feb4 	bl	80002cc <__adddf3>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe fb5c 	bl	8000c28 <__aeabi_d2f>
 8002570:	4603      	mov	r3, r0
 8002572:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	e003      	b.n	8002584 <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <decodeRMC+0x460>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <decodeRMC+0x460>)
 800258c:	6013      	str	r3, [r2, #0]
	i=0;
 800258e:	2300      	movs	r3, #0
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	220c      	movs	r2, #12
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f00b fff9 	bl	800e592 <memset>
	while (RMCbuffer[inx] != ',')
 80025a0:	e013      	b.n	80025ca <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <decodeRMC+0x460>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	7819      	ldrb	r1, [r3, #0]
 80025ae:	f107 0208 	add.w	r2, r7, #8
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b4:	4413      	add	r3, r2
 80025b6:	460a      	mov	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
		i++;
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	3301      	adds	r3, #1
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <decodeRMC+0x460>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	4a30      	ldr	r2, [pc, #192]	; (8002688 <decodeRMC+0x460>)
 80025c8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80025ca:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <decodeRMC+0x460>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b2c      	cmp	r3, #44	; 0x2c
 80025d8:	d1e3      	bne.n	80025a2 <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	4618      	mov	r0, r3
 80025e0:	f00b fe30 	bl	800e244 <atoi>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a29      	ldr	r2, [pc, #164]	; (800268c <decodeRMC+0x464>)
 80025e8:	fb82 1203 	smull	r1, r2, r2, r3
 80025ec:	1312      	asrs	r2, r2, #12
 80025ee:	17db      	asrs	r3, r3, #31
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <decodeRMC+0x468>)
 80025f4:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00b fe22 	bl	800e244 <atoi>
 8002600:	4603      	mov	r3, r0
 8002602:	4a24      	ldr	r2, [pc, #144]	; (8002694 <decodeRMC+0x46c>)
 8002604:	fb82 1203 	smull	r1, r2, r2, r3
 8002608:	1152      	asrs	r2, r2, #5
 800260a:	17db      	asrs	r3, r3, #31
 800260c:	1ad2      	subs	r2, r2, r3
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <decodeRMC+0x46c>)
 8002610:	fb83 1302 	smull	r1, r3, r3, r2
 8002614:	1159      	asrs	r1, r3, #5
 8002616:	17d3      	asrs	r3, r2, #31
 8002618:	1acb      	subs	r3, r1, r3
 800261a:	2164      	movs	r1, #100	; 0x64
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <decodeRMC+0x470>)
 8002624:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	4618      	mov	r0, r3
 800262c:	f00b fe0a 	bl	800e244 <atoi>
 8002630:	4602      	mov	r2, r0
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <decodeRMC+0x46c>)
 8002634:	fb83 1302 	smull	r1, r3, r3, r2
 8002638:	1159      	asrs	r1, r3, #5
 800263a:	17d3      	asrs	r3, r2, #31
 800263c:	1acb      	subs	r3, r1, r3
 800263e:	2164      	movs	r1, #100	; 0x64
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <decodeRMC+0x474>)
 8002648:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <decodeRMC+0x468>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <decodeRMC+0x478>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <decodeRMC+0x468>)
 8002656:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <decodeRMC+0x468>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <decodeRMC+0x470>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <decodeRMC+0x474>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	609a      	str	r2, [r3, #8]

	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3740      	adds	r7, #64	; 0x40
 8002676:	46bd      	mov	sp, r7
 8002678:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800267c:	f3af 8000 	nop.w
 8002680:	00000000 	.word	0x00000000
 8002684:	40240000 	.word	0x40240000
 8002688:	20000130 	.word	0x20000130
 800268c:	68db8bad 	.word	0x68db8bad
 8002690:	2000013c 	.word	0x2000013c
 8002694:	51eb851f 	.word	0x51eb851f
 8002698:	20000140 	.word	0x20000140
 800269c:	20000144 	.word	0x20000144
 80026a0:	20000148 	.word	0x20000148

080026a4 <decToBcd>:
extern TIME_Handle time;
extern union Transmission trans1;

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <decToBcd+0x48>)
 80026b0:	fb82 1203 	smull	r1, r2, r2, r3
 80026b4:	1092      	asrs	r2, r2, #2
 80026b6:	17db      	asrs	r3, r3, #31
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	b2d8      	uxtb	r0, r3
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <decToBcd+0x48>)
 80026c4:	fb83 1302 	smull	r1, r3, r3, r2
 80026c8:	1099      	asrs	r1, r3, #2
 80026ca:	17d3      	asrs	r3, r2, #31
 80026cc:	1ac9      	subs	r1, r1, r3
 80026ce:	460b      	mov	r3, r1
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	1ad1      	subs	r1, r2, r3
 80026d8:	b2cb      	uxtb	r3, r1
 80026da:	4403      	add	r3, r0
 80026dc:	b2db      	uxtb	r3, r3
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	66666667 	.word	0x66666667

080026f0 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	461a      	mov	r2, r3
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	4413      	add	r3, r2
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <Set_Time>:

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af04      	add	r7, sp, #16
 8002726:	4604      	mov	r4, r0
 8002728:	4608      	mov	r0, r1
 800272a:	4611      	mov	r1, r2
 800272c:	461a      	mov	r2, r3
 800272e:	4623      	mov	r3, r4
 8002730:	71fb      	strb	r3, [r7, #7]
 8002732:	4603      	mov	r3, r0
 8002734:	71bb      	strb	r3, [r7, #6]
 8002736:	460b      	mov	r3, r1
 8002738:	717b      	strb	r3, [r7, #5]
 800273a:	4613      	mov	r3, r2
 800273c:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ffaf 	bl	80026a4 <decToBcd>
 8002746:	4603      	mov	r3, r0
 8002748:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 800274a:	79bb      	ldrb	r3, [r7, #6]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ffa9 	bl	80026a4 <decToBcd>
 8002752:	4603      	mov	r3, r0
 8002754:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 8002756:	797b      	ldrb	r3, [r7, #5]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ffa3 	bl	80026a4 <decToBcd>
 800275e:	4603      	mov	r3, r0
 8002760:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8002762:	793b      	ldrb	r3, [r7, #4]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff9d 	bl	80026a4 <decToBcd>
 800276a:	4603      	mov	r3, r0
 800276c:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 800276e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff96 	bl	80026a4 <decToBcd>
 8002778:	4603      	mov	r3, r0
 800277a:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 800277c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff8f 	bl	80026a4 <decToBcd>
 8002786:	4603      	mov	r3, r0
 8002788:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800278a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff88 	bl	80026a4 <decToBcd>
 8002794:	4603      	mov	r3, r0
 8002796:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8002798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	2307      	movs	r3, #7
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	f107 0308 	add.w	r3, r7, #8
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	2200      	movs	r2, #0
 80027ac:	21d0      	movs	r1, #208	; 0xd0
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <Set_Time+0x9c>)
 80027b0:	f004 fbce 	bl	8006f50 <HAL_I2C_Mem_Write>
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	200002a0 	.word	0x200002a0

080027c0 <Get_Time>:
void Get_Time (void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2307      	movs	r3, #7
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	463b      	mov	r3, r7
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	2200      	movs	r2, #0
 80027d8:	21d0      	movs	r1, #208	; 0xd0
 80027da:	481f      	ldr	r0, [pc, #124]	; (8002858 <Get_Time+0x98>)
 80027dc:	f004 fcb2 	bl	8007144 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80027e0:	783b      	ldrb	r3, [r7, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff84 	bl	80026f0 <bcdToDec>
 80027e8:	4603      	mov	r3, r0
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <Get_Time+0x9c>)
 80027ee:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff7c 	bl	80026f0 <bcdToDec>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <Get_Time+0x9c>)
 80027fe:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8002800:	78bb      	ldrb	r3, [r7, #2]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff74 	bl	80026f0 <bcdToDec>
 8002808:	4603      	mov	r3, r0
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <Get_Time+0x9c>)
 800280e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff6c 	bl	80026f0 <bcdToDec>
 8002818:	4603      	mov	r3, r0
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <Get_Time+0x9c>)
 800281e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8002820:	793b      	ldrb	r3, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff64 	bl	80026f0 <bcdToDec>
 8002828:	4603      	mov	r3, r0
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <Get_Time+0x9c>)
 800282e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8002830:	797b      	ldrb	r3, [r7, #5]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff5c 	bl	80026f0 <bcdToDec>
 8002838:	4603      	mov	r3, r0
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <Get_Time+0x9c>)
 800283e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff54 	bl	80026f0 <bcdToDec>
 8002848:	4603      	mov	r3, r0
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <Get_Time+0x9c>)
 800284e:	719a      	strb	r2, [r3, #6]

}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200002a0 	.word	0x200002a0
 800285c:	20000690 	.word	0x20000690

08002860 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002864:	2200      	movs	r2, #0
 8002866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800286a:	4804      	ldr	r0, [pc, #16]	; (800287c <SELECT+0x1c>)
 800286c:	f004 fa12 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002870:	2001      	movs	r0, #1
 8002872:	f002 ff09 	bl	8005688 <HAL_Delay>
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40020400 	.word	0x40020400

08002880 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800288a:	4804      	ldr	r0, [pc, #16]	; (800289c <DESELECT+0x1c>)
 800288c:	f004 fa02 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002890:	2001      	movs	r0, #1
 8002892:	f002 fef9 	bl	8005688 <HAL_Delay>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40020400 	.word	0x40020400

080028a0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80028aa:	bf00      	nop
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <SPI_TxByte+0x30>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d1f8      	bne.n	80028ac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80028ba:	1df9      	adds	r1, r7, #7
 80028bc:	2364      	movs	r3, #100	; 0x64
 80028be:	2201      	movs	r2, #1
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <SPI_TxByte+0x30>)
 80028c2:	f006 f882 	bl	80089ca <HAL_SPI_Transmit>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000034c 	.word	0x2000034c

080028d4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80028e0:	bf00      	nop
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <SPI_TxBuffer+0x30>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d1f8      	bne.n	80028e2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80028f0:	887a      	ldrh	r2, [r7, #2]
 80028f2:	2364      	movs	r3, #100	; 0x64
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4803      	ldr	r0, [pc, #12]	; (8002904 <SPI_TxBuffer+0x30>)
 80028f8:	f006 f867 	bl	80089ca <HAL_SPI_Transmit>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000034c 	.word	0x2000034c

08002908 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800290e:	23ff      	movs	r3, #255	; 0xff
 8002910:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002912:	bf00      	nop
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <SPI_RxByte+0x34>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d1f8      	bne.n	8002914 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002922:	1dba      	adds	r2, r7, #6
 8002924:	1df9      	adds	r1, r7, #7
 8002926:	2364      	movs	r3, #100	; 0x64
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <SPI_RxByte+0x34>)
 800292e:	f006 fa99 	bl	8008e64 <HAL_SPI_TransmitReceive>

	return data;
 8002932:	79bb      	ldrb	r3, [r7, #6]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000034c 	.word	0x2000034c

08002940 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002948:	f7ff ffde 	bl	8002908 <SPI_RxByte>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	701a      	strb	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <SD_ReadyWait+0x30>)
 8002964:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002968:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800296a:	f7ff ffcd 	bl	8002908 <SPI_RxByte>
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2bff      	cmp	r3, #255	; 0xff
 8002976:	d004      	beq.n	8002982 <SD_ReadyWait+0x26>
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <SD_ReadyWait+0x30>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f3      	bne.n	800296a <SD_ReadyWait+0xe>

	return res;
 8002982:	79fb      	ldrb	r3, [r7, #7]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000280e 	.word	0x2000280e

08002990 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002996:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800299a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800299c:	f7ff ff70 	bl	8002880 <DESELECT>
	for(int i = 0; i < 10; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	e005      	b.n	80029b2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80029a6:	20ff      	movs	r0, #255	; 0xff
 80029a8:	f7ff ff7a 	bl	80028a0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	3301      	adds	r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b09      	cmp	r3, #9
 80029b6:	ddf6      	ble.n	80029a6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80029b8:	f7ff ff52 	bl	8002860 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80029bc:	2340      	movs	r3, #64	; 0x40
 80029be:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80029d0:	2395      	movs	r3, #149	; 0x95
 80029d2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80029d4:	463b      	mov	r3, r7
 80029d6:	2106      	movs	r1, #6
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff7b 	bl	80028d4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80029de:	e002      	b.n	80029e6 <SD_PowerOn+0x56>
	{
		cnt--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80029e6:	f7ff ff8f 	bl	8002908 <SPI_RxByte>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d002      	beq.n	80029f6 <SD_PowerOn+0x66>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f4      	bne.n	80029e0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80029f6:	f7ff ff43 	bl	8002880 <DESELECT>
	SPI_TxByte(0XFF);
 80029fa:	20ff      	movs	r0, #255	; 0xff
 80029fc:	f7ff ff50 	bl	80028a0 <SPI_TxByte>

	PowerFlag = 1;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <SD_PowerOn+0x80>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000014d 	.word	0x2000014d

08002a14 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <SD_PowerOff+0x14>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	2000014d 	.word	0x2000014d

08002a2c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <SD_CheckPower+0x14>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	2000014d 	.word	0x2000014d

08002a44 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <SD_RxDataBlock+0x5c>)
 8002a50:	22c8      	movs	r2, #200	; 0xc8
 8002a52:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002a54:	f7ff ff58 	bl	8002908 <SPI_RxByte>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2bff      	cmp	r3, #255	; 0xff
 8002a60:	d104      	bne.n	8002a6c <SD_RxDataBlock+0x28>
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <SD_RxDataBlock+0x5c>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f3      	bne.n	8002a54 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8002a70:	d001      	beq.n	8002a76 <SD_RxDataBlock+0x32>
 8002a72:	2300      	movs	r3, #0
 8002a74:	e00f      	b.n	8002a96 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff5f 	bl	8002940 <SPI_RxBytePtr>
	} while(len--);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	1e5a      	subs	r2, r3, #1
 8002a86:	603a      	str	r2, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f4      	bne.n	8002a76 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002a8c:	f7ff ff3c 	bl	8002908 <SPI_RxByte>
	SPI_RxByte();
 8002a90:	f7ff ff3a 	bl	8002908 <SPI_RxByte>

	return TRUE;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000280c 	.word	0x2000280c

08002aa4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002ab4:	f7ff ff52 	bl	800295c <SD_ReadyWait>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2bff      	cmp	r3, #255	; 0xff
 8002abc:	d001      	beq.n	8002ac2 <SD_TxDataBlock+0x1e>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e02f      	b.n	8002b22 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff feeb 	bl	80028a0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	2bfd      	cmp	r3, #253	; 0xfd
 8002ace:	d020      	beq.n	8002b12 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fefd 	bl	80028d4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002ada:	f7ff ff15 	bl	8002908 <SPI_RxByte>
		SPI_RxByte();
 8002ade:	f7ff ff13 	bl	8002908 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002ae2:	e00b      	b.n	8002afc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002ae4:	f7ff ff10 	bl	8002908 <SPI_RxByte>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d006      	beq.n	8002b04 <SD_TxDataBlock+0x60>
			i++;
 8002af6:	7bbb      	ldrb	r3, [r7, #14]
 8002af8:	3301      	adds	r3, #1
 8002afa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d9f0      	bls.n	8002ae4 <SD_TxDataBlock+0x40>
 8002b02:	e000      	b.n	8002b06 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002b04:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002b06:	bf00      	nop
 8002b08:	f7ff fefe 	bl	8002908 <SPI_RxByte>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0fa      	beq.n	8002b08 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d101      	bne.n	8002b20 <SD_TxDataBlock+0x7c>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <SD_TxDataBlock+0x7e>

	return FALSE;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	6039      	str	r1, [r7, #0]
 8002b34:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002b36:	f7ff ff11 	bl	800295c <SD_ReadyWait>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2bff      	cmp	r3, #255	; 0xff
 8002b3e:	d001      	beq.n	8002b44 <SD_SendCmd+0x1a>
 8002b40:	23ff      	movs	r3, #255	; 0xff
 8002b42:	e042      	b.n	8002bca <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff feaa 	bl	80028a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	0e1b      	lsrs	r3, r3, #24
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fea4 	bl	80028a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fe9e 	bl	80028a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fe98 	bl	80028a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe93 	bl	80028a0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d102      	bne.n	8002b86 <SD_SendCmd+0x5c>
 8002b80:	2395      	movs	r3, #149	; 0x95
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e007      	b.n	8002b96 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b48      	cmp	r3, #72	; 0x48
 8002b8a:	d102      	bne.n	8002b92 <SD_SendCmd+0x68>
 8002b8c:	2387      	movs	r3, #135	; 0x87
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e001      	b.n	8002b96 <SD_SendCmd+0x6c>
	else crc = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fe81 	bl	80028a0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b4c      	cmp	r3, #76	; 0x4c
 8002ba2:	d101      	bne.n	8002ba8 <SD_SendCmd+0x7e>
 8002ba4:	f7ff feb0 	bl	8002908 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002ba8:	230a      	movs	r3, #10
 8002baa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002bac:	f7ff feac 	bl	8002908 <SPI_RxByte>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002bb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da05      	bge.n	8002bc8 <SD_SendCmd+0x9e>
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	73bb      	strb	r3, [r7, #14]
 8002bc2:	7bbb      	ldrb	r3, [r7, #14]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f1      	bne.n	8002bac <SD_SendCmd+0x82>

	return res;
 8002bc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <SD_disk_initialize+0x14>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0d6      	b.n	8002d96 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002be8:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <SD_disk_initialize+0x1cc>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <SD_disk_initialize+0x2a>
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <SD_disk_initialize+0x1cc>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e0cb      	b.n	8002d96 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8002bfe:	f7ff fec7 	bl	8002990 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002c02:	f7ff fe2d 	bl	8002860 <SELECT>

	/* check disk type */
	type = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2040      	movs	r0, #64	; 0x40
 8002c0e:	f7ff ff8c 	bl	8002b2a <SD_SendCmd>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	f040 80a6 	bne.w	8002d66 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8002c1a:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <SD_disk_initialize+0x1d0>)
 8002c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c20:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002c22:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002c26:	2048      	movs	r0, #72	; 0x48
 8002c28:	f7ff ff7f 	bl	8002b2a <SD_SendCmd>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d158      	bne.n	8002ce4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	e00c      	b.n	8002c52 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002c38:	7bfc      	ldrb	r4, [r7, #15]
 8002c3a:	f7ff fe65 	bl	8002908 <SPI_RxByte>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	f104 0310 	add.w	r3, r4, #16
 8002c46:	443b      	add	r3, r7
 8002c48:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d9ef      	bls.n	8002c38 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002c58:	7abb      	ldrb	r3, [r7, #10]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	f040 8083 	bne.w	8002d66 <SD_disk_initialize+0x192>
 8002c60:	7afb      	ldrb	r3, [r7, #11]
 8002c62:	2baa      	cmp	r3, #170	; 0xaa
 8002c64:	d17f      	bne.n	8002d66 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002c66:	2100      	movs	r1, #0
 8002c68:	2077      	movs	r0, #119	; 0x77
 8002c6a:	f7ff ff5e 	bl	8002b2a <SD_SendCmd>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d807      	bhi.n	8002c84 <SD_disk_initialize+0xb0>
 8002c74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c78:	2069      	movs	r0, #105	; 0x69
 8002c7a:	f7ff ff56 	bl	8002b2a <SD_SendCmd>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002c84:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <SD_disk_initialize+0x1d0>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1eb      	bne.n	8002c66 <SD_disk_initialize+0x92>
 8002c8e:	e000      	b.n	8002c92 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002c90:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <SD_disk_initialize+0x1d0>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d064      	beq.n	8002d66 <SD_disk_initialize+0x192>
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	207a      	movs	r0, #122	; 0x7a
 8002ca0:	f7ff ff43 	bl	8002b2a <SD_SendCmd>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d15d      	bne.n	8002d66 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e00c      	b.n	8002cca <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002cb0:	7bfc      	ldrb	r4, [r7, #15]
 8002cb2:	f7ff fe29 	bl	8002908 <SPI_RxByte>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f104 0310 	add.w	r3, r4, #16
 8002cbe:	443b      	add	r3, r7
 8002cc0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d9ef      	bls.n	8002cb0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002cd0:	7a3b      	ldrb	r3, [r7, #8]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <SD_disk_initialize+0x10a>
 8002cda:	230c      	movs	r3, #12
 8002cdc:	e000      	b.n	8002ce0 <SD_disk_initialize+0x10c>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	73bb      	strb	r3, [r7, #14]
 8002ce2:	e040      	b.n	8002d66 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2077      	movs	r0, #119	; 0x77
 8002ce8:	f7ff ff1f 	bl	8002b2a <SD_SendCmd>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d808      	bhi.n	8002d04 <SD_disk_initialize+0x130>
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2069      	movs	r0, #105	; 0x69
 8002cf6:	f7ff ff18 	bl	8002b2a <SD_SendCmd>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d801      	bhi.n	8002d04 <SD_disk_initialize+0x130>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e000      	b.n	8002d06 <SD_disk_initialize+0x132>
 8002d04:	2301      	movs	r3, #1
 8002d06:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d10e      	bne.n	8002d2c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2077      	movs	r0, #119	; 0x77
 8002d12:	f7ff ff0a 	bl	8002b2a <SD_SendCmd>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d80e      	bhi.n	8002d3a <SD_disk_initialize+0x166>
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2069      	movs	r0, #105	; 0x69
 8002d20:	f7ff ff03 	bl	8002b2a <SD_SendCmd>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <SD_disk_initialize+0x166>
 8002d2a:	e00d      	b.n	8002d48 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2041      	movs	r0, #65	; 0x41
 8002d30:	f7ff fefb 	bl	8002b2a <SD_SendCmd>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <SD_disk_initialize+0x1d0>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e1      	bne.n	8002d08 <SD_disk_initialize+0x134>
 8002d44:	e000      	b.n	8002d48 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002d46:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <SD_disk_initialize+0x1d0>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <SD_disk_initialize+0x18e>
 8002d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d56:	2050      	movs	r0, #80	; 0x50
 8002d58:	f7ff fee7 	bl	8002b2a <SD_SendCmd>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <SD_disk_initialize+0x192>
 8002d62:	2300      	movs	r3, #0
 8002d64:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <SD_disk_initialize+0x1d4>)
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002d6c:	f7ff fd88 	bl	8002880 <DESELECT>
	SPI_RxByte();
 8002d70:	f7ff fdca 	bl	8002908 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <SD_disk_initialize+0x1cc>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <SD_disk_initialize+0x1cc>)
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e001      	b.n	8002d90 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002d8c:	f7ff fe42 	bl	8002a14 <SD_PowerOff>
	}

	return Stat;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <SD_disk_initialize+0x1cc>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000004 	.word	0x20000004
 8002da4:	2000280c 	.word	0x2000280c
 8002da8:	2000014c 	.word	0x2000014c

08002dac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <SD_disk_status+0x14>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e002      	b.n	8002dc6 <SD_disk_status+0x1a>
	return Stat;
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <SD_disk_status+0x28>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <SD_disk_read+0x1c>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <SD_disk_read+0x20>
 8002df4:	2304      	movs	r3, #4
 8002df6:	e051      	b.n	8002e9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <SD_disk_read+0xcc>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <SD_disk_read+0x32>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e048      	b.n	8002e9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002e0a:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <SD_disk_read+0xd0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <SD_disk_read+0x44>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	025b      	lsls	r3, r3, #9
 8002e1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8002e1c:	f7ff fd20 	bl	8002860 <SELECT>

	if (count == 1)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d111      	bne.n	8002e4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	2051      	movs	r0, #81	; 0x51
 8002e2a:	f7ff fe7e 	bl	8002b2a <SD_SendCmd>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d129      	bne.n	8002e88 <SD_disk_read+0xb0>
 8002e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e38:	68b8      	ldr	r0, [r7, #8]
 8002e3a:	f7ff fe03 	bl	8002a44 <SD_RxDataBlock>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d021      	beq.n	8002e88 <SD_disk_read+0xb0>
 8002e44:	2300      	movs	r3, #0
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	e01e      	b.n	8002e88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	2052      	movs	r0, #82	; 0x52
 8002e4e:	f7ff fe6c 	bl	8002b2a <SD_SendCmd>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d117      	bne.n	8002e88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e5c:	68b8      	ldr	r0, [r7, #8]
 8002e5e:	f7ff fdf1 	bl	8002a44 <SD_RxDataBlock>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <SD_disk_read+0xa6>
				buff += 512;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ed      	bne.n	8002e58 <SD_disk_read+0x80>
 8002e7c:	e000      	b.n	8002e80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002e7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002e80:	2100      	movs	r1, #0
 8002e82:	204c      	movs	r0, #76	; 0x4c
 8002e84:	f7ff fe51 	bl	8002b2a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002e88:	f7ff fcfa 	bl	8002880 <DESELECT>
	SPI_RxByte();
 8002e8c:	f7ff fd3c 	bl	8002908 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	2000014c 	.word	0x2000014c

08002eac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <SD_disk_write+0x1c>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <SD_disk_write+0x20>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	e06b      	b.n	8002fa4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002ecc:	4b37      	ldr	r3, [pc, #220]	; (8002fac <SD_disk_write+0x100>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <SD_disk_write+0x32>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e062      	b.n	8002fa4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002ede:	4b33      	ldr	r3, [pc, #204]	; (8002fac <SD_disk_write+0x100>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <SD_disk_write+0x44>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e059      	b.n	8002fa4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002ef0:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <SD_disk_write+0x104>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <SD_disk_write+0x56>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	025b      	lsls	r3, r3, #9
 8002f00:	607b      	str	r3, [r7, #4]

	SELECT();
 8002f02:	f7ff fcad 	bl	8002860 <SELECT>

	if (count == 1)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d110      	bne.n	8002f2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	2058      	movs	r0, #88	; 0x58
 8002f10:	f7ff fe0b 	bl	8002b2a <SD_SendCmd>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d13a      	bne.n	8002f90 <SD_disk_write+0xe4>
 8002f1a:	21fe      	movs	r1, #254	; 0xfe
 8002f1c:	68b8      	ldr	r0, [r7, #8]
 8002f1e:	f7ff fdc1 	bl	8002aa4 <SD_TxDataBlock>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d033      	beq.n	8002f90 <SD_disk_write+0xe4>
			count = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	e030      	b.n	8002f90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <SD_disk_write+0x104>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2077      	movs	r0, #119	; 0x77
 8002f3e:	f7ff fdf4 	bl	8002b2a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002f42:	6839      	ldr	r1, [r7, #0]
 8002f44:	2057      	movs	r0, #87	; 0x57
 8002f46:	f7ff fdf0 	bl	8002b2a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	2059      	movs	r0, #89	; 0x59
 8002f4e:	f7ff fdec 	bl	8002b2a <SD_SendCmd>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11b      	bne.n	8002f90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002f58:	21fc      	movs	r1, #252	; 0xfc
 8002f5a:	68b8      	ldr	r0, [r7, #8]
 8002f5c:	f7ff fda2 	bl	8002aa4 <SD_TxDataBlock>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <SD_disk_write+0xd0>
				buff += 512;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ee      	bne.n	8002f58 <SD_disk_write+0xac>
 8002f7a:	e000      	b.n	8002f7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002f7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002f7e:	21fd      	movs	r1, #253	; 0xfd
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff fd8f 	bl	8002aa4 <SD_TxDataBlock>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <SD_disk_write+0xe4>
			{
				count = 1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002f90:	f7ff fc76 	bl	8002880 <DESELECT>
	SPI_RxByte();
 8002f94:	f7ff fcb8 	bl	8002908 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	2000014c 	.word	0x2000014c

08002fb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b08b      	sub	sp, #44	; 0x2c
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	603a      	str	r2, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <SD_disk_ioctl+0x1e>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e115      	b.n	80031fe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002fd8:	79bb      	ldrb	r3, [r7, #6]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d124      	bne.n	8003028 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d012      	beq.n	800300c <SD_disk_ioctl+0x58>
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	dc1a      	bgt.n	8003020 <SD_disk_ioctl+0x6c>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <SD_disk_ioctl+0x40>
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d006      	beq.n	8003000 <SD_disk_ioctl+0x4c>
 8002ff2:	e015      	b.n	8003020 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002ff4:	f7ff fd0e 	bl	8002a14 <SD_PowerOff>
			res = RES_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002ffe:	e0fc      	b.n	80031fa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003000:	f7ff fcc6 	bl	8002990 <SD_PowerOn>
			res = RES_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800300a:	e0f6      	b.n	80031fa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	1c5c      	adds	r4, r3, #1
 8003010:	f7ff fd0c 	bl	8002a2c <SD_CheckPower>
 8003014:	4603      	mov	r3, r0
 8003016:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800301e:	e0ec      	b.n	80031fa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003020:	2304      	movs	r3, #4
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003026:	e0e8      	b.n	80031fa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003028:	4b77      	ldr	r3, [pc, #476]	; (8003208 <SD_disk_ioctl+0x254>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <SD_disk_ioctl+0x86>
 8003036:	2303      	movs	r3, #3
 8003038:	e0e1      	b.n	80031fe <SD_disk_ioctl+0x24a>

		SELECT();
 800303a:	f7ff fc11 	bl	8002860 <SELECT>

		switch (ctrl)
 800303e:	79bb      	ldrb	r3, [r7, #6]
 8003040:	2b0d      	cmp	r3, #13
 8003042:	f200 80cb 	bhi.w	80031dc <SD_disk_ioctl+0x228>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <SD_disk_ioctl+0x98>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003147 	.word	0x08003147
 8003050:	08003085 	.word	0x08003085
 8003054:	08003137 	.word	0x08003137
 8003058:	080031dd 	.word	0x080031dd
 800305c:	080031dd 	.word	0x080031dd
 8003060:	080031dd 	.word	0x080031dd
 8003064:	080031dd 	.word	0x080031dd
 8003068:	080031dd 	.word	0x080031dd
 800306c:	080031dd 	.word	0x080031dd
 8003070:	080031dd 	.word	0x080031dd
 8003074:	080031dd 	.word	0x080031dd
 8003078:	08003159 	.word	0x08003159
 800307c:	0800317d 	.word	0x0800317d
 8003080:	080031a1 	.word	0x080031a1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003084:	2100      	movs	r1, #0
 8003086:	2049      	movs	r0, #73	; 0x49
 8003088:	f7ff fd4f 	bl	8002b2a <SD_SendCmd>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80a8 	bne.w	80031e4 <SD_disk_ioctl+0x230>
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	2110      	movs	r1, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fcd2 	bl	8002a44 <SD_RxDataBlock>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 809e 	beq.w	80031e4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80030a8:	7b3b      	ldrb	r3, [r7, #12]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10e      	bne.n	80030d0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80030b2:	7d7b      	ldrb	r3, [r7, #21]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	7d3b      	ldrb	r3, [r7, #20]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4413      	add	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80030c6:	8bfb      	ldrh	r3, [r7, #30]
 80030c8:	029a      	lsls	r2, r3, #10
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e02e      	b.n	800312e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80030d0:	7c7b      	ldrb	r3, [r7, #17]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	7dbb      	ldrb	r3, [r7, #22]
 80030da:	09db      	lsrs	r3, r3, #7
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	4413      	add	r3, r2
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	7d7b      	ldrb	r3, [r7, #21]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 0306 	and.w	r3, r3, #6
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3302      	adds	r3, #2
 80030f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80030f8:	7d3b      	ldrb	r3, [r7, #20]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	b29a      	uxth	r2, r3
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	b29b      	uxth	r3, r3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	b29b      	uxth	r3, r3
 8003108:	4413      	add	r3, r2
 800310a:	b29a      	uxth	r2, r3
 800310c:	7cbb      	ldrb	r3, [r7, #18]
 800310e:	029b      	lsls	r3, r3, #10
 8003110:	b29b      	uxth	r3, r3
 8003112:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003116:	b29b      	uxth	r3, r3
 8003118:	4413      	add	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	3301      	adds	r3, #1
 800311e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003120:	8bfa      	ldrh	r2, [r7, #30]
 8003122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003126:	3b09      	subs	r3, #9
 8003128:	409a      	lsls	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003134:	e056      	b.n	80031e4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003144:	e055      	b.n	80031f2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003146:	f7ff fc09 	bl	800295c <SD_ReadyWait>
 800314a:	4603      	mov	r3, r0
 800314c:	2bff      	cmp	r3, #255	; 0xff
 800314e:	d14b      	bne.n	80031e8 <SD_disk_ioctl+0x234>
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003156:	e047      	b.n	80031e8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003158:	2100      	movs	r1, #0
 800315a:	2049      	movs	r0, #73	; 0x49
 800315c:	f7ff fce5 	bl	8002b2a <SD_SendCmd>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d142      	bne.n	80031ec <SD_disk_ioctl+0x238>
 8003166:	2110      	movs	r1, #16
 8003168:	6a38      	ldr	r0, [r7, #32]
 800316a:	f7ff fc6b 	bl	8002a44 <SD_RxDataBlock>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d03b      	beq.n	80031ec <SD_disk_ioctl+0x238>
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800317a:	e037      	b.n	80031ec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800317c:	2100      	movs	r1, #0
 800317e:	204a      	movs	r0, #74	; 0x4a
 8003180:	f7ff fcd3 	bl	8002b2a <SD_SendCmd>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d132      	bne.n	80031f0 <SD_disk_ioctl+0x23c>
 800318a:	2110      	movs	r1, #16
 800318c:	6a38      	ldr	r0, [r7, #32]
 800318e:	f7ff fc59 	bl	8002a44 <SD_RxDataBlock>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02b      	beq.n	80031f0 <SD_disk_ioctl+0x23c>
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800319e:	e027      	b.n	80031f0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80031a0:	2100      	movs	r1, #0
 80031a2:	207a      	movs	r0, #122	; 0x7a
 80031a4:	f7ff fcc1 	bl	8002b2a <SD_SendCmd>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d116      	bne.n	80031dc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031b4:	e00b      	b.n	80031ce <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80031b6:	6a3c      	ldr	r4, [r7, #32]
 80031b8:	1c63      	adds	r3, r4, #1
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	f7ff fba4 	bl	8002908 <SPI_RxByte>
 80031c0:	4603      	mov	r3, r0
 80031c2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80031c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031c8:	3301      	adds	r3, #1
 80031ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d9ef      	bls.n	80031b6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031e2:	e006      	b.n	80031f2 <SD_disk_ioctl+0x23e>
			break;
 80031e4:	bf00      	nop
 80031e6:	e004      	b.n	80031f2 <SD_disk_ioctl+0x23e>
			break;
 80031e8:	bf00      	nop
 80031ea:	e002      	b.n	80031f2 <SD_disk_ioctl+0x23e>
			break;
 80031ec:	bf00      	nop
 80031ee:	e000      	b.n	80031f2 <SD_disk_ioctl+0x23e>
			break;
 80031f0:	bf00      	nop
		}

		DESELECT();
 80031f2:	f7ff fb45 	bl	8002880 <DESELECT>
		SPI_RxByte();
 80031f6:	f7ff fb87 	bl	8002908 <SPI_RxByte>
	}

	return res;
 80031fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031fe:	4618      	mov	r0, r3
 8003200:	372c      	adds	r7, #44	; 0x2c
 8003202:	46bd      	mov	sp, r7
 8003204:	bd90      	pop	{r4, r7, pc}
 8003206:	bf00      	nop
 8003208:	20000004 	.word	0x20000004

0800320c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003214:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003218:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003224:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003228:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800322c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003234:	e000      	b.n	8003238 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003236:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003238:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f9      	beq.n	8003236 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003242:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800324c:	687b      	ldr	r3, [r7, #4]
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <bufsize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int bufsize (char *buf)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
	int i=0;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8003266:	e002      	b.n	800326e <bufsize+0x14>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f6      	bne.n	8003268 <bufsize+0xe>
	return i;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <current_sensor5.2>:

  if(settime==1)
      Set_Time(timein.seconds, timein.minutes, timein.hour , timein.dayofweek, timein.dayofmonth, timein.month, timein.year);

  void current_sensor5()
  {
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue5 = dmaOut[1];
 8003292:	4b27      	ldr	r3, [pc, #156]	; (8003330 <current_sensor5.2+0xa8>)
 8003294:	885a      	ldrh	r2, [r3, #2]
 8003296:	4b27      	ldr	r3, [pc, #156]	; (8003334 <current_sensor5.2+0xac>)
 8003298:	801a      	strh	r2, [r3, #0]
  	  rawVoltage5 = ((float) readValue5 * 3.3) / 4095 *adc_err5;
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <current_sensor5.2+0xac>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	ee17 0a90 	vmov	r0, s15
 80032aa:	f7fd f96d 	bl	8000588 <__aeabi_f2d>
 80032ae:	a31c      	add	r3, pc, #112	; (adr r3, 8003320 <current_sensor5.2+0x98>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd f9c0 	bl	8000638 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	a319      	add	r3, pc, #100	; (adr r3, 8003328 <current_sensor5.2+0xa0>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f7fd fae1 	bl	800088c <__aeabi_ddiv>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4614      	mov	r4, r2
 80032d0:	461d      	mov	r5, r3
 80032d2:	4b19      	ldr	r3, [pc, #100]	; (8003338 <current_sensor5.2+0xb0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f956 	bl	8000588 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fd f9a8 	bl	8000638 <__aeabi_dmul>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fd fc9a 	bl	8000c28 <__aeabi_d2f>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4a11      	ldr	r2, [pc, #68]	; (800333c <current_sensor5.2+0xb4>)
 80032f8:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.CPM_Current =(1 - rawVoltage5)/sensitivity5;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <current_sensor5.2+0xb4>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003304:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <current_sensor5.2+0xb8>)
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <current_sensor5.2+0xbc>)
 8003314:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  }
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bdb0      	pop	{r4, r5, r7, pc}
 8003320:	66666666 	.word	0x66666666
 8003324:	400a6666 	.word	0x400a6666
 8003328:	00000000 	.word	0x00000000
 800332c:	40affe00 	.word	0x40affe00
 8003330:	20000560 	.word	0x20000560
 8003334:	20000570 	.word	0x20000570
 8003338:	2000000c 	.word	0x2000000c
 800333c:	20000574 	.word	0x20000574
 8003340:	20000008 	.word	0x20000008
 8003344:	200006a8 	.word	0x200006a8

08003348 <main>:
{
 8003348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af04      	add	r7, sp, #16
int main(void)
 800334e:	f107 0320 	add.w	r3, r7, #32
 8003352:	603b      	str	r3, [r7, #0]
	timein.seconds = 0;
 8003354:	4b7a      	ldr	r3, [pc, #488]	; (8003540 <main+0x1f8>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 800335a:	f002 f923 	bl	80055a4 <HAL_Init>
  SystemClock_Config();
 800335e:	f000 fc5d 	bl	8003c1c <SystemClock_Config>
  MX_GPIO_Init();
 8003362:	f000 ff4f 	bl	8004204 <MX_GPIO_Init>
  MX_DMA_Init();
 8003366:	f000 ff0f 	bl	8004188 <MX_DMA_Init>
  MX_ADC1_Init();
 800336a:	f000 fcc9 	bl	8003d00 <MX_ADC1_Init>
  MX_SPI1_Init();
 800336e:	f000 fdcd 	bl	8003f0c <MX_SPI1_Init>
  MX_TIM1_Init();
 8003372:	f000 fe39 	bl	8003fe8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003376:	f000 fedd 	bl	8004134 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800337a:	f000 fd3d 	bl	8003df8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800337e:	f000 fd69 	bl	8003e54 <MX_I2C2_Init>
  MX_UART4_Init();
 8003382:	f000 fe83 	bl	800408c <MX_UART4_Init>
  MX_I2C3_Init();
 8003386:	f000 fd93 	bl	8003eb0 <MX_I2C3_Init>
  MX_SPI2_Init();
 800338a:	f000 fdf7 	bl	8003f7c <MX_SPI2_Init>
  MX_FATFS_Init();
 800338e:	f007 fd7d 	bl	800ae8c <MX_FATFS_Init>
  MX_UART5_Init();
 8003392:	f000 fea5 	bl	80040e0 <MX_UART5_Init>
  HAL_UART_Receive_DMA(&huart5,rx_data, sizeof(rx_data));
 8003396:	2202      	movs	r2, #2
 8003398:	496a      	ldr	r1, [pc, #424]	; (8003544 <main+0x1fc>)
 800339a:	486b      	ldr	r0, [pc, #428]	; (8003548 <main+0x200>)
 800339c:	f006 fc49 	bl	8009c32 <HAL_UART_Receive_DMA>
  HAL_ADC_Init(&hadc1);
 80033a0:	486a      	ldr	r0, [pc, #424]	; (800354c <main+0x204>)
 80033a2:	f002 f995 	bl	80056d0 <HAL_ADC_Init>
  MPU6050_Init();
 80033a6:	f001 f81f 	bl	80043e8 <MPU6050_Init>
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 4);
 80033aa:	2204      	movs	r2, #4
 80033ac:	4968      	ldr	r1, [pc, #416]	; (8003550 <main+0x208>)
 80033ae:	4867      	ldr	r0, [pc, #412]	; (800354c <main+0x204>)
 80033b0:	f002 f9d2 	bl	8005758 <HAL_ADC_Start_DMA>
  BMP180_Start();
 80033b4:	f7fe fa5a 	bl	800186c <BMP180_Start>
  Ringbuf_init();
 80033b8:	f001 feb4 	bl	8005124 <Ringbuf_init>
  HAL_Delay(500);
 80033bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033c0:	f002 f962 	bl	8005688 <HAL_Delay>
  if(settime==1)
 80033c4:	4b63      	ldr	r3, [pc, #396]	; (8003554 <main+0x20c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d11b      	bne.n	8003404 <main+0xbc>
      Set_Time(timein.seconds, timein.minutes, timein.hour , timein.dayofweek, timein.dayofmonth, timein.month, timein.year);
 80033cc:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <main+0x1f8>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <main+0x1f8>)
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	461c      	mov	r4, r3
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <main+0x1f8>)
 80033da:	789b      	ldrb	r3, [r3, #2]
 80033dc:	461d      	mov	r5, r3
 80033de:	4b58      	ldr	r3, [pc, #352]	; (8003540 <main+0x1f8>)
 80033e0:	78db      	ldrb	r3, [r3, #3]
 80033e2:	461e      	mov	r6, r3
 80033e4:	4b56      	ldr	r3, [pc, #344]	; (8003540 <main+0x1f8>)
 80033e6:	791b      	ldrb	r3, [r3, #4]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b55      	ldr	r3, [pc, #340]	; (8003540 <main+0x1f8>)
 80033ec:	795b      	ldrb	r3, [r3, #5]
 80033ee:	4619      	mov	r1, r3
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <main+0x1f8>)
 80033f2:	799b      	ldrb	r3, [r3, #6]
 80033f4:	9302      	str	r3, [sp, #8]
 80033f6:	9101      	str	r1, [sp, #4]
 80033f8:	9200      	str	r2, [sp, #0]
 80033fa:	4633      	mov	r3, r6
 80033fc:	462a      	mov	r2, r5
 80033fe:	4621      	mov	r1, r4
 8003400:	f7ff f98e 	bl	8002720 <Set_Time>
  }
void isu_check()
{
	;
}
  strcpy(buffer,"Hello Duta'h\n");
 8003404:	4a54      	ldr	r2, [pc, #336]	; (8003558 <main+0x210>)
 8003406:	4b55      	ldr	r3, [pc, #340]	; (800355c <main+0x214>)
 8003408:	4614      	mov	r4, r2
 800340a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800340c:	c407      	stmia	r4!, {r0, r1, r2}
 800340e:	8023      	strh	r3, [r4, #0]
	  {
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
	  }*/
	  switch(rx_data[0])
 8003410:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <main+0x1fc>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	3b41      	subs	r3, #65	; 0x41
 8003416:	2b18      	cmp	r3, #24
 8003418:	f200 80a6 	bhi.w	8003568 <main+0x220>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <main+0xdc>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	080034b9 	.word	0x080034b9
 8003428:	08003569 	.word	0x08003569
 800342c:	08003569 	.word	0x08003569
 8003430:	08003569 	.word	0x08003569
 8003434:	08003569 	.word	0x08003569
 8003438:	08003527 	.word	0x08003527
 800343c:	08003569 	.word	0x08003569
 8003440:	08003569 	.word	0x08003569
 8003444:	080034d9 	.word	0x080034d9
 8003448:	08003569 	.word	0x08003569
 800344c:	080034a1 	.word	0x080034a1
 8003450:	08003569 	.word	0x08003569
 8003454:	08003569 	.word	0x08003569
 8003458:	08003489 	.word	0x08003489
 800345c:	08003569 	.word	0x08003569
 8003460:	08003569 	.word	0x08003569
 8003464:	08003569 	.word	0x08003569
 8003468:	08003569 	.word	0x08003569
 800346c:	08003569 	.word	0x08003569
 8003470:	08003569 	.word	0x08003569
 8003474:	08003569 	.word	0x08003569
 8003478:	08003569 	.word	0x08003569
 800347c:	08003569 	.word	0x08003569
 8003480:	08003569 	.word	0x08003569
 8003484:	08003505 	.word	0x08003505
	  	  {
	      case 'N': //Initialization
		  memset(tx_data,'S',2);
 8003488:	2202      	movs	r2, #2
 800348a:	2153      	movs	r1, #83	; 0x53
 800348c:	4834      	ldr	r0, [pc, #208]	; (8003560 <main+0x218>)
 800348e:	f00b f880 	bl	800e592 <memset>
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 8003492:	2364      	movs	r3, #100	; 0x64
 8003494:	2202      	movs	r2, #2
 8003496:	4932      	ldr	r1, [pc, #200]	; (8003560 <main+0x218>)
 8003498:	482b      	ldr	r0, [pc, #172]	; (8003548 <main+0x200>)
 800349a:	f006 fb38 	bl	8009b0e <HAL_UART_Transmit>
	  	  break;
 800349e:	e06e      	b.n	800357e <main+0x236>
	  	  case 'K': //Standby
	  	  memset(tx_data,'J',2);
 80034a0:	2202      	movs	r2, #2
 80034a2:	214a      	movs	r1, #74	; 0x4a
 80034a4:	482e      	ldr	r0, [pc, #184]	; (8003560 <main+0x218>)
 80034a6:	f00b f874 	bl	800e592 <memset>
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 80034aa:	2364      	movs	r3, #100	; 0x64
 80034ac:	2202      	movs	r2, #2
 80034ae:	492c      	ldr	r1, [pc, #176]	; (8003560 <main+0x218>)
 80034b0:	4825      	ldr	r0, [pc, #148]	; (8003548 <main+0x200>)
 80034b2:	f006 fb2c 	bl	8009b0e <HAL_UART_Transmit>
	  	  break;
 80034b6:	e062      	b.n	800357e <main+0x236>
	  	  case 'A': //Arming
	  	  memset(tx_data,'B',2);
 80034b8:	2202      	movs	r2, #2
 80034ba:	2142      	movs	r1, #66	; 0x42
 80034bc:	4828      	ldr	r0, [pc, #160]	; (8003560 <main+0x218>)
 80034be:	f00b f868 	bl	800e592 <memset>
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 80034c2:	2364      	movs	r3, #100	; 0x64
 80034c4:	2202      	movs	r2, #2
 80034c6:	4926      	ldr	r1, [pc, #152]	; (8003560 <main+0x218>)
 80034c8:	481f      	ldr	r0, [pc, #124]	; (8003548 <main+0x200>)
 80034ca:	f006 fb20 	bl	8009b0e <HAL_UART_Transmit>
	  	  isu_check();
 80034ce:	463b      	mov	r3, r7
 80034d0:	469c      	mov	ip, r3
 80034d2:	f000 fb97 	bl	8003c04 <isu_check.0>
	  	  break;
 80034d6:	e052      	b.n	800357e <main+0x236>
	  	  memset(tx_data,'D',2);
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
	  	  case 'I': //Launching
	  	  memset(tx_data,'L',2);
 80034d8:	2202      	movs	r2, #2
 80034da:	214c      	movs	r1, #76	; 0x4c
 80034dc:	4820      	ldr	r0, [pc, #128]	; (8003560 <main+0x218>)
 80034de:	f00b f858 	bl	800e592 <memset>
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 80034e2:	2364      	movs	r3, #100	; 0x64
 80034e4:	2202      	movs	r2, #2
 80034e6:	491e      	ldr	r1, [pc, #120]	; (8003560 <main+0x218>)
 80034e8:	4817      	ldr	r0, [pc, #92]	; (8003548 <main+0x200>)
 80034ea:	f006 fb10 	bl	8009b0e <HAL_UART_Transmit>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80034ee:	2201      	movs	r2, #1
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	481c      	ldr	r0, [pc, #112]	; (8003564 <main+0x21c>)
 80034f4:	f003 fbce 	bl	8006c94 <HAL_GPIO_WritePin>
	  	  memset(tx_data,'\0',2);
 80034f8:	2202      	movs	r2, #2
 80034fa:	2100      	movs	r1, #0
 80034fc:	4818      	ldr	r0, [pc, #96]	; (8003560 <main+0x218>)
 80034fe:	f00b f848 	bl	800e592 <memset>
	  	  break;
 8003502:	e03c      	b.n	800357e <main+0x236>
	  	  case 'Y': //Kill_Switch
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	2140      	movs	r1, #64	; 0x40
 8003508:	4816      	ldr	r0, [pc, #88]	; (8003564 <main+0x21c>)
 800350a:	f003 fbc3 	bl	8006c94 <HAL_GPIO_WritePin>
	  	  memset(tx_data,'E',2);
 800350e:	2202      	movs	r2, #2
 8003510:	2145      	movs	r1, #69	; 0x45
 8003512:	4813      	ldr	r0, [pc, #76]	; (8003560 <main+0x218>)
 8003514:	f00b f83d 	bl	800e592 <memset>
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 8003518:	2364      	movs	r3, #100	; 0x64
 800351a:	2202      	movs	r2, #2
 800351c:	4910      	ldr	r1, [pc, #64]	; (8003560 <main+0x218>)
 800351e:	480a      	ldr	r0, [pc, #40]	; (8003548 <main+0x200>)
 8003520:	f006 faf5 	bl	8009b0e <HAL_UART_Transmit>
	  	  break;
 8003524:	e02b      	b.n	800357e <main+0x236>
	  	  case 'F': //Error
	  	  memset(tx_data,'E',2);
 8003526:	2202      	movs	r2, #2
 8003528:	2145      	movs	r1, #69	; 0x45
 800352a:	480d      	ldr	r0, [pc, #52]	; (8003560 <main+0x218>)
 800352c:	f00b f831 	bl	800e592 <memset>
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 8003530:	2364      	movs	r3, #100	; 0x64
 8003532:	2202      	movs	r2, #2
 8003534:	490a      	ldr	r1, [pc, #40]	; (8003560 <main+0x218>)
 8003536:	4804      	ldr	r0, [pc, #16]	; (8003548 <main+0x200>)
 8003538:	f006 fae9 	bl	8009b0e <HAL_UART_Transmit>
	  	  break;
 800353c:	e01f      	b.n	800357e <main+0x236>
 800353e:	bf00      	nop
 8003540:	20000698 	.word	0x20000698
 8003544:	20000534 	.word	0x20000534
 8003548:	20000430 	.word	0x20000430
 800354c:	20000150 	.word	0x20000150
 8003550:	20000560 	.word	0x20000560
 8003554:	2000069f 	.word	0x2000069f
 8003558:	20002778 	.word	0x20002778
 800355c:	08011850 	.word	0x08011850
 8003560:	20000538 	.word	0x20000538
 8003564:	40020800 	.word	0x40020800
	  	  default:
	  	  memset(tx_data,'\0',2);
 8003568:	2202      	movs	r2, #2
 800356a:	2100      	movs	r1, #0
 800356c:	48c0      	ldr	r0, [pc, #768]	; (8003870 <main+0x528>)
 800356e:	f00b f810 	bl	800e592 <memset>
	  	  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 8003572:	2364      	movs	r3, #100	; 0x64
 8003574:	2202      	movs	r2, #2
 8003576:	49be      	ldr	r1, [pc, #760]	; (8003870 <main+0x528>)
 8003578:	48be      	ldr	r0, [pc, #760]	; (8003874 <main+0x52c>)
 800357a:	f006 fac8 	bl	8009b0e <HAL_UART_Transmit>
	  	  }
   HAL_Delay(5);
 800357e:	2005      	movs	r0, #5
 8003580:	f002 f882 	bl	8005688 <HAL_Delay>
	  if(Wait_for("GGA")==1)
 8003584:	48bc      	ldr	r0, [pc, #752]	; (8003878 <main+0x530>)
 8003586:	f001 fefd 	bl	8005384 <Wait_for>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <main+0x258>
	  {
		  Copy_upto("*", GGA);
 8003590:	49ba      	ldr	r1, [pc, #744]	; (800387c <main+0x534>)
 8003592:	48bb      	ldr	r0, [pc, #748]	; (8003880 <main+0x538>)
 8003594:	f001 fe76 	bl	8005284 <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 8003598:	49ba      	ldr	r1, [pc, #744]	; (8003884 <main+0x53c>)
 800359a:	48b8      	ldr	r0, [pc, #736]	; (800387c <main+0x534>)
 800359c:	f7fe fa98 	bl	8001ad0 <decodeGGA>
	  }
	  if (Wait_for("RMC")==1)
 80035a0:	48b9      	ldr	r0, [pc, #740]	; (8003888 <main+0x540>)
 80035a2:	f001 feef 	bl	8005384 <Wait_for>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <main+0x274>
	  {
		  Copy_upto("*",RMC);
 80035ac:	49b7      	ldr	r1, [pc, #732]	; (800388c <main+0x544>)
 80035ae:	48b4      	ldr	r0, [pc, #720]	; (8003880 <main+0x538>)
 80035b0:	f001 fe68 	bl	8005284 <Copy_upto>
		  decodeRMC(RMC, &gpsData.rmcstruct);
 80035b4:	49b6      	ldr	r1, [pc, #728]	; (8003890 <main+0x548>)
 80035b6:	48b5      	ldr	r0, [pc, #724]	; (800388c <main+0x544>)
 80035b8:	f7fe fe36 	bl	8002228 <decodeRMC>
	  }
	  
	  trans1.tlm1.M_Temp=Max6675_Read_Temp();
 80035bc:	f7fe fa04 	bl	80019c8 <Max6675_Read_Temp>
 80035c0:	eef0 7a40 	vmov.f32	s15, s0
 80035c4:	4bb3      	ldr	r3, [pc, #716]	; (8003894 <main+0x54c>)
 80035c6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  barometer_sensor();
 80035ca:	463b      	mov	r3, r7
 80035cc:	469c      	mov	ip, r3
 80035ce:	f000 faf3 	bl	8003bb8 <barometer_sensor.1>
	  trans1.tlm1.NC_Press =readHX();
 80035d2:	f7fe f99f 	bl	8001914 <readHX>
 80035d6:	ee07 0a90 	vmov	s15, r0
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	4bad      	ldr	r3, [pc, #692]	; (8003894 <main+0x54c>)
 80035e0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	  current_sensor5();
 80035e4:	463b      	mov	r3, r7
 80035e6:	469c      	mov	ip, r3
 80035e8:	f7ff fe4e 	bl	8003288 <current_sensor5.2>
	  current_sensor20();
 80035ec:	463b      	mov	r3, r7
 80035ee:	469c      	mov	ip, r3
 80035f0:	f000 fa82 	bl	8003af8 <current_sensor20.3>

	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 80035f4:	4aa8      	ldr	r2, [pc, #672]	; (8003898 <main+0x550>)
 80035f6:	49a9      	ldr	r1, [pc, #676]	; (800389c <main+0x554>)
 80035f8:	48a9      	ldr	r0, [pc, #676]	; (80038a0 <main+0x558>)
 80035fa:	f000 ff5d 	bl	80044b8 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 80035fe:	4aa9      	ldr	r2, [pc, #676]	; (80038a4 <main+0x55c>)
 8003600:	49a9      	ldr	r1, [pc, #676]	; (80038a8 <main+0x560>)
 8003602:	48aa      	ldr	r0, [pc, #680]	; (80038ac <main+0x564>)
 8003604:	f000 ffdc 	bl	80045c0 <MPU6050_Read_Gyro>
	  //Fall Detection
	 	  Avg1 = pow(pow(Ax,2)+pow(Ay,2)+pow(Az,2),0.5);
 8003608:	4ba5      	ldr	r3, [pc, #660]	; (80038a0 <main+0x558>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ffbb 	bl	8000588 <__aeabi_f2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8003860 <main+0x518>
 800361a:	ec43 2b10 	vmov	d0, r2, r3
 800361e:	f00d f9d3 	bl	80109c8 <pow>
 8003622:	ec55 4b10 	vmov	r4, r5, d0
 8003626:	4b9d      	ldr	r3, [pc, #628]	; (800389c <main+0x554>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ffac 	bl	8000588 <__aeabi_f2d>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8003860 <main+0x518>
 8003638:	ec43 2b10 	vmov	d0, r2, r3
 800363c:	f00d f9c4 	bl	80109c8 <pow>
 8003640:	ec53 2b10 	vmov	r2, r3, d0
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc fe40 	bl	80002cc <__adddf3>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	4b90      	ldr	r3, [pc, #576]	; (8003898 <main+0x550>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff95 	bl	8000588 <__aeabi_f2d>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8003860 <main+0x518>
 8003666:	ec43 2b10 	vmov	d0, r2, r3
 800366a:	f00d f9ad 	bl	80109c8 <pow>
 800366e:	ec53 2b10 	vmov	r2, r3, d0
 8003672:	4620      	mov	r0, r4
 8003674:	4629      	mov	r1, r5
 8003676:	f7fc fe29 	bl	80002cc <__adddf3>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	ec43 2b17 	vmov	d7, r2, r3
 8003682:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8003868 <main+0x520>
 8003686:	eeb0 0a47 	vmov.f32	s0, s14
 800368a:	eef0 0a67 	vmov.f32	s1, s15
 800368e:	f00d f99b 	bl	80109c8 <pow>
 8003692:	ec53 2b10 	vmov	r2, r3, d0
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7fd fac5 	bl	8000c28 <__aeabi_d2f>
 800369e:	4603      	mov	r3, r0
 80036a0:	4a83      	ldr	r2, [pc, #524]	; (80038b0 <main+0x568>)
 80036a2:	6013      	str	r3, [r2, #0]
	 	  Avg2 = pow(pow(Gx,2)+pow(Gy,2)+pow(Gz,2),0.5);
 80036a4:	4b81      	ldr	r3, [pc, #516]	; (80038ac <main+0x564>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc ff6d 	bl	8000588 <__aeabi_f2d>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8003860 <main+0x518>
 80036b6:	ec43 2b10 	vmov	d0, r2, r3
 80036ba:	f00d f985 	bl	80109c8 <pow>
 80036be:	ec55 4b10 	vmov	r4, r5, d0
 80036c2:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <main+0x560>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc ff5e 	bl	8000588 <__aeabi_f2d>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8003860 <main+0x518>
 80036d4:	ec43 2b10 	vmov	d0, r2, r3
 80036d8:	f00d f976 	bl	80109c8 <pow>
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	4620      	mov	r0, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	f7fc fdf2 	bl	80002cc <__adddf3>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	461d      	mov	r5, r3
 80036f0:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <main+0x55c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fc ff47 	bl	8000588 <__aeabi_f2d>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8003860 <main+0x518>
 8003702:	ec43 2b10 	vmov	d0, r2, r3
 8003706:	f00d f95f 	bl	80109c8 <pow>
 800370a:	ec53 2b10 	vmov	r2, r3, d0
 800370e:	4620      	mov	r0, r4
 8003710:	4629      	mov	r1, r5
 8003712:	f7fc fddb 	bl	80002cc <__adddf3>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	ec43 2b17 	vmov	d7, r2, r3
 800371e:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8003868 <main+0x520>
 8003722:	eeb0 0a47 	vmov.f32	s0, s14
 8003726:	eef0 0a67 	vmov.f32	s1, s15
 800372a:	f00d f94d 	bl	80109c8 <pow>
 800372e:	ec53 2b10 	vmov	r2, r3, d0
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	f7fd fa77 	bl	8000c28 <__aeabi_d2f>
 800373a:	4603      	mov	r3, r0
 800373c:	4a5d      	ldr	r2, [pc, #372]	; (80038b4 <main+0x56c>)
 800373e:	6013      	str	r3, [r2, #0]
	 	  tilt= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3); //tilt_sensor
 8003740:	2108      	movs	r1, #8
 8003742:	485d      	ldr	r0, [pc, #372]	; (80038b8 <main+0x570>)
 8003744:	f003 fa8e 	bl	8006c64 <HAL_GPIO_ReadPin>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2da      	uxtb	r2, r3
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <main+0x574>)
 8003756:	701a      	strb	r2, [r3, #0]
	 	  if(((Avg1 >= 1 && Avg2 >= 30) && tilt==0) || fall==true)
 8003758:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <main+0x568>)
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376a:	db10      	blt.n	800378e <main+0x446>
 800376c:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <main+0x56c>)
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377e:	db06      	blt.n	800378e <main+0x446>
 8003780:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <main+0x574>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	f083 0301 	eor.w	r3, r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <main+0x44e>
 800378e:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <main+0x578>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <main+0x464>
	 	  {
	 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); //Trigger PDS(Main Parachute)
 8003796:	2201      	movs	r2, #1
 8003798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800379c:	4846      	ldr	r0, [pc, #280]	; (80038b8 <main+0x570>)
 800379e:	f003 fa79 	bl	8006c94 <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80037a2:	2201      	movs	r2, #1
 80037a4:	2120      	movs	r1, #32
 80037a6:	4847      	ldr	r0, [pc, #284]	; (80038c4 <main+0x57c>)
 80037a8:	f003 fa74 	bl	8006c94 <HAL_GPIO_WritePin>
	 	  }
	 	  else
	 	  {
	 	  }
	 	  HAL_Delay (100);  // wait for a while
 80037ac:	2064      	movs	r0, #100	; 0x64
 80037ae:	f001 ff6b 	bl	8005688 <HAL_Delay>
	 	  //PDS_read_sensor
	 	  pds = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80037b2:	2120      	movs	r1, #32
 80037b4:	4840      	ldr	r0, [pc, #256]	; (80038b8 <main+0x570>)
 80037b6:	f003 fa55 	bl	8006c64 <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <main+0x580>)
 80037c8:	701a      	strb	r2, [r3, #0]
	 	  if(pds==0)
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <main+0x580>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	f083 0301 	eor.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <main+0x4d2>
	 	  {
	 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); //Trigger PDS(Main Parachute)
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037de:	4836      	ldr	r0, [pc, #216]	; (80038b8 <main+0x570>)
 80037e0:	f003 fa58 	bl	8006c94 <HAL_GPIO_WritePin>
	 		  if(pds_flag==1){
 80037e4:	4b39      	ldr	r3, [pc, #228]	; (80038cc <main+0x584>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d016      	beq.n	800381a <main+0x4d2>
	 			  memset(tx_data,'R',2);
 80037ec:	2202      	movs	r2, #2
 80037ee:	2152      	movs	r1, #82	; 0x52
 80037f0:	481f      	ldr	r0, [pc, #124]	; (8003870 <main+0x528>)
 80037f2:	f00a fece 	bl	800e592 <memset>
	 			  HAL_UART_Transmit(&huart5, tx_data, sizeof(tx_data), 100);
 80037f6:	2364      	movs	r3, #100	; 0x64
 80037f8:	2202      	movs	r2, #2
 80037fa:	491d      	ldr	r1, [pc, #116]	; (8003870 <main+0x528>)
 80037fc:	481d      	ldr	r0, [pc, #116]	; (8003874 <main+0x52c>)
 80037fe:	f006 f986 	bl	8009b0e <HAL_UART_Transmit>
	 			  HAL_Delay(3000);
 8003802:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003806:	f001 ff3f 	bl	8005688 <HAL_Delay>
	 			  memset(tx_data,'\0',2);
 800380a:	2202      	movs	r2, #2
 800380c:	2100      	movs	r1, #0
 800380e:	4818      	ldr	r0, [pc, #96]	; (8003870 <main+0x528>)
 8003810:	f00a febf 	bl	800e592 <memset>
	 			  pds_flag=0;
 8003814:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <main+0x584>)
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
	 		  }
	 	  }
	  //HAL_Delay(250);
	  trans1.tlm1.Ax=Ax;
 800381a:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <main+0x558>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <main+0x54c>)
 8003820:	6053      	str	r3, [r2, #4]
	  trans1.tlm1.Ay=Ay;
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <main+0x554>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <main+0x54c>)
 8003828:	6093      	str	r3, [r2, #8]
	  trans1.tlm1.Az=Az;
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <main+0x550>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a19      	ldr	r2, [pc, #100]	; (8003894 <main+0x54c>)
 8003830:	60d3      	str	r3, [r2, #12]
	  trans1.tlm1.Gx=Gx;
 8003832:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <main+0x564>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <main+0x54c>)
 8003838:	6113      	str	r3, [r2, #16]
	  trans1.tlm1.Gy=Gy;
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <main+0x560>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <main+0x54c>)
 8003840:	6153      	str	r3, [r2, #20]
	  trans1.tlm1.Gz=Gz;
 8003842:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <main+0x55c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <main+0x54c>)
 8003848:	6193      	str	r3, [r2, #24]


	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, 1);
 800384a:	2201      	movs	r2, #1
 800384c:	2140      	movs	r1, #64	; 0x40
 800384e:	481d      	ldr	r0, [pc, #116]	; (80038c4 <main+0x57c>)
 8003850:	f003 fa20 	bl	8006c94 <HAL_GPIO_WritePin>
	  trans1.tlm1.CPM_Voltage = dmaOut[0]*(5.0/4096.0);
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <main+0x588>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc fe83 	bl	8000564 <__aeabi_i2d>
 800385e:	e039      	b.n	80038d4 <main+0x58c>
 8003860:	00000000 	.word	0x00000000
 8003864:	40000000 	.word	0x40000000
 8003868:	00000000 	.word	0x00000000
 800386c:	3fe00000 	.word	0x3fe00000
 8003870:	20000538 	.word	0x20000538
 8003874:	20000430 	.word	0x20000430
 8003878:	08011860 	.word	0x08011860
 800387c:	20000580 	.word	0x20000580
 8003880:	08011864 	.word	0x08011864
 8003884:	2000064c 	.word	0x2000064c
 8003888:	08011868 	.word	0x08011868
 800388c:	200005e4 	.word	0x200005e4
 8003890:	20000678 	.word	0x20000678
 8003894:	200006a8 	.word	0x200006a8
 8003898:	20000544 	.word	0x20000544
 800389c:	20000540 	.word	0x20000540
 80038a0:	2000053c 	.word	0x2000053c
 80038a4:	20000550 	.word	0x20000550
 80038a8:	2000054c 	.word	0x2000054c
 80038ac:	20000548 	.word	0x20000548
 80038b0:	20000554 	.word	0x20000554
 80038b4:	20000558 	.word	0x20000558
 80038b8:	40020800 	.word	0x40020800
 80038bc:	20000648 	.word	0x20000648
 80038c0:	20000649 	.word	0x20000649
 80038c4:	40020000 	.word	0x40020000
 80038c8:	2000064a 	.word	0x2000064a
 80038cc:	20000005 	.word	0x20000005
 80038d0:	20000560 	.word	0x20000560
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	4b77      	ldr	r3, [pc, #476]	; (8003ab8 <main+0x770>)
 80038da:	f7fc fead 	bl	8000638 <__aeabi_dmul>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fd f99f 	bl	8000c28 <__aeabi_d2f>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4a73      	ldr	r2, [pc, #460]	; (8003abc <main+0x774>)
 80038ee:	61d3      	str	r3, [r2, #28]
	  HAL_GPIO_WritePin(HV_En_GPIO_Port, HV_En_Pin, 1);
 80038f0:	2201      	movs	r2, #1
 80038f2:	2120      	movs	r1, #32
 80038f4:	4872      	ldr	r0, [pc, #456]	; (8003ac0 <main+0x778>)
 80038f6:	f003 f9cd 	bl	8006c94 <HAL_GPIO_WritePin>
	  trans1.tlm1.H_Voltage=dmaOut[3]*(9.36/4096);
 80038fa:	4b72      	ldr	r3, [pc, #456]	; (8003ac4 <main+0x77c>)
 80038fc:	88db      	ldrh	r3, [r3, #6]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fe30 	bl	8000564 <__aeabi_i2d>
 8003904:	a36a      	add	r3, pc, #424	; (adr r3, 8003ab0 <main+0x768>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f7fc fe95 	bl	8000638 <__aeabi_dmul>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd f987 	bl	8000c28 <__aeabi_d2f>
 800391a:	4603      	mov	r3, r0
 800391c:	4a67      	ldr	r2, [pc, #412]	; (8003abc <main+0x774>)
 800391e:	6213      	str	r3, [r2, #32]

	  HAL_Delay(100);
 8003920:	2064      	movs	r0, #100	; 0x64
 8003922:	f001 feb1 	bl	8005688 <HAL_Delay>
	  Get_Time();
 8003926:	f7fe ff4b 	bl	80027c0 <Get_Time>
		trans1.tlm1.seconds=time.seconds;
 800392a:	4b67      	ldr	r3, [pc, #412]	; (8003ac8 <main+0x780>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003936:	4b61      	ldr	r3, [pc, #388]	; (8003abc <main+0x774>)
 8003938:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		trans1.tlm1.minutes=time.minutes;
 800393c:	4b62      	ldr	r3, [pc, #392]	; (8003ac8 <main+0x780>)
 800393e:	785b      	ldrb	r3, [r3, #1]
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003948:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <main+0x774>)
 800394a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		trans1.tlm1.hour=time.hour;
 800394e:	4b5e      	ldr	r3, [pc, #376]	; (8003ac8 <main+0x780>)
 8003950:	789b      	ldrb	r3, [r3, #2]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395a:	4b58      	ldr	r3, [pc, #352]	; (8003abc <main+0x774>)
 800395c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		trans1.tlm1.dayofmonth=time.dayofmonth;
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <main+0x780>)
 8003962:	791b      	ldrb	r3, [r3, #4]
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396c:	4b53      	ldr	r3, [pc, #332]	; (8003abc <main+0x774>)
 800396e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		trans1.tlm1.month=time.month;
 8003972:	4b55      	ldr	r3, [pc, #340]	; (8003ac8 <main+0x780>)
 8003974:	795b      	ldrb	r3, [r3, #5]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	4b4f      	ldr	r3, [pc, #316]	; (8003abc <main+0x774>)
 8003980:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		trans1.tlm1.year=time.year;
 8003984:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <main+0x780>)
 8003986:	799b      	ldrb	r3, [r3, #6]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003990:	4b4a      	ldr	r3, [pc, #296]	; (8003abc <main+0x774>)
 8003992:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


		fresult = f_mount(&fs, "/", 1);
 8003996:	2201      	movs	r2, #1
 8003998:	494c      	ldr	r1, [pc, #304]	; (8003acc <main+0x784>)
 800399a:	484d      	ldr	r0, [pc, #308]	; (8003ad0 <main+0x788>)
 800399c:	f009 fcbe 	bl	800d31c <f_mount>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <main+0x78c>)
 80039a6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 80039a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039ac:	f001 fe6c 	bl	8005688 <HAL_Delay>
		fresult = f_open(&fil, "testfile.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80039b0:	2213      	movs	r2, #19
 80039b2:	4949      	ldr	r1, [pc, #292]	; (8003ad8 <main+0x790>)
 80039b4:	4849      	ldr	r0, [pc, #292]	; (8003adc <main+0x794>)
 80039b6:	f009 fcf7 	bl	800d3a8 <f_open>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <main+0x78c>)
 80039c0:	701a      	strb	r2, [r3, #0]
		//	  memset(TxBuff,"\0",150);

	  for(int i=0; i<23; i++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	e059      	b.n	8003a7c <main+0x734>
	  {

		  memset(tempbuff,'\0',6);
 80039c8:	2206      	movs	r2, #6
 80039ca:	2100      	movs	r1, #0
 80039cc:	4844      	ldr	r0, [pc, #272]	; (8003ae0 <main+0x798>)
 80039ce:	f00a fde0 	bl	800e592 <memset>
		  gcvt(trans1.dataframe[i],4,tempbuff);
 80039d2:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <main+0x774>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc fdd3 	bl	8000588 <__aeabi_f2d>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	493e      	ldr	r1, [pc, #248]	; (8003ae0 <main+0x798>)
 80039e8:	2004      	movs	r0, #4
 80039ea:	ec43 2b10 	vmov	d0, r2, r3
 80039ee:	f00a fcb9 	bl	800e364 <gcvt>
		  //strcat(TxBuff,tempbuff);
		  strcat(tempbuff,",");
 80039f2:	483b      	ldr	r0, [pc, #236]	; (8003ae0 <main+0x798>)
 80039f4:	f7fc fc0c 	bl	8000210 <strlen>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <main+0x798>)
 80039fe:	4413      	add	r3, r2
 8003a00:	4938      	ldr	r1, [pc, #224]	; (8003ae4 <main+0x79c>)
 8003a02:	461a      	mov	r2, r3
 8003a04:	460b      	mov	r3, r1
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	8013      	strh	r3, [r2, #0]
		  HAL_UART_Transmit(&huart4, tempbuff, strlen(tempbuff), 100);
 8003a0a:	4835      	ldr	r0, [pc, #212]	; (8003ae0 <main+0x798>)
 8003a0c:	f7fc fc00 	bl	8000210 <strlen>
 8003a10:	4603      	mov	r3, r0
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	2364      	movs	r3, #100	; 0x64
 8003a16:	4932      	ldr	r1, [pc, #200]	; (8003ae0 <main+0x798>)
 8003a18:	4833      	ldr	r0, [pc, #204]	; (8003ae8 <main+0x7a0>)
 8003a1a:	f006 f878 	bl	8009b0e <HAL_UART_Transmit>
		  if(i==22) strcat(tempbuff, "\n");
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b16      	cmp	r3, #22
 8003a22:	d10b      	bne.n	8003a3c <main+0x6f4>
 8003a24:	482e      	ldr	r0, [pc, #184]	; (8003ae0 <main+0x798>)
 8003a26:	f7fc fbf3 	bl	8000210 <strlen>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <main+0x798>)
 8003a30:	4413      	add	r3, r2
 8003a32:	492e      	ldr	r1, [pc, #184]	; (8003aec <main+0x7a4>)
 8003a34:	461a      	mov	r2, r3
 8003a36:	460b      	mov	r3, r1
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	8013      	strh	r3, [r2, #0]


		  f_lseek(&fil,writepos);
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <main+0x7a8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	4826      	ldr	r0, [pc, #152]	; (8003adc <main+0x794>)
 8003a44:	f00a f8b8 	bl	800dbb8 <f_lseek>
		  fresult = f_write(&fil, tempbuff, bufsize(tempbuff), &bw);
 8003a48:	4825      	ldr	r0, [pc, #148]	; (8003ae0 <main+0x798>)
 8003a4a:	f7ff fc06 	bl	800325a <bufsize>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <main+0x7ac>)
 8003a54:	4922      	ldr	r1, [pc, #136]	; (8003ae0 <main+0x798>)
 8003a56:	4821      	ldr	r0, [pc, #132]	; (8003adc <main+0x794>)
 8003a58:	f009 fe72 	bl	800d740 <f_write>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <main+0x78c>)
 8003a62:	701a      	strb	r2, [r3, #0]
		  writepos+=bufsize(tempbuff);
 8003a64:	481e      	ldr	r0, [pc, #120]	; (8003ae0 <main+0x798>)
 8003a66:	f7ff fbf8 	bl	800325a <bufsize>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <main+0x7a8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4413      	add	r3, r2
 8003a72:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <main+0x7a8>)
 8003a74:	6013      	str	r3, [r2, #0]
	  for(int i=0; i<23; i++)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b16      	cmp	r3, #22
 8003a80:	dda2      	ble.n	80039c8 <main+0x680>
//		strcat(tempbuff,",");
//		HAL_UART_Transmit(&huart4, tempbuff, strlen(tempbuff), 100);
//		HAL_UART_Transmit(&huart4, "0,", 3, 100);
//		HAL_UART_Transmit(&huart4, "0", 3, 100);

	  f_close(&fil);
 8003a82:	4816      	ldr	r0, [pc, #88]	; (8003adc <main+0x794>)
 8003a84:	f00a f86e 	bl	800db64 <f_close>
	  fresult = f_mount(NULL, "/", 1);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4910      	ldr	r1, [pc, #64]	; (8003acc <main+0x784>)
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f009 fc45 	bl	800d31c <f_mount>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <main+0x78c>)
 8003a98:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart4, "\n", 1, 100);
 8003a9a:	2364      	movs	r3, #100	; 0x64
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4913      	ldr	r1, [pc, #76]	; (8003aec <main+0x7a4>)
 8003aa0:	4811      	ldr	r0, [pc, #68]	; (8003ae8 <main+0x7a0>)
 8003aa2:	f006 f834 	bl	8009b0e <HAL_UART_Transmit>
	  fresult = f_open(&fil, "testfile.txt", FA_READ);
	  f_read (&fil, rxbuffer, f_size(&fil), &br);
	  f_close(&fil);
	  fresult = f_mount(NULL, "/", 1);*/

	  HAL_Delay(100);
 8003aa6:	2064      	movs	r0, #100	; 0x64
 8003aa8:	f001 fdee 	bl	8005688 <HAL_Delay>
  {
 8003aac:	e4b0      	b.n	8003410 <main+0xc8>
 8003aae:	bf00      	nop
 8003ab0:	eb851eb8 	.word	0xeb851eb8
 8003ab4:	3f62b851 	.word	0x3f62b851
 8003ab8:	3f540000 	.word	0x3f540000
 8003abc:	200006a8 	.word	0x200006a8
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	20000560 	.word	0x20000560
 8003ac8:	20000690 	.word	0x20000690
 8003acc:	0801186c 	.word	0x0801186c
 8003ad0:	20000708 	.word	0x20000708
 8003ad4:	20002770 	.word	0x20002770
 8003ad8:	08011870 	.word	0x08011870
 8003adc:	20001740 	.word	0x20001740
 8003ae0:	200006a0 	.word	0x200006a0
 8003ae4:	08011880 	.word	0x08011880
 8003ae8:	200003ec 	.word	0x200003ec
 8003aec:	08011884 	.word	0x08011884
 8003af0:	200027f8 	.word	0x200027f8
 8003af4:	20002774 	.word	0x20002774

08003af8 <current_sensor20.3>:
  {
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue20 = dmaOut[2];
 8003b02:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <current_sensor20.3+0xa8>)
 8003b04:	889a      	ldrh	r2, [r3, #4]
 8003b06:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <current_sensor20.3+0xac>)
 8003b08:	801a      	strh	r2, [r3, #0]
  	  rawVoltage20 = ((float) readValue20 * 3.3) / 4095 *adc_err20;
 8003b0a:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <current_sensor20.3+0xac>)
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b16:	ee17 0a90 	vmov	r0, s15
 8003b1a:	f7fc fd35 	bl	8000588 <__aeabi_f2d>
 8003b1e:	a31c      	add	r3, pc, #112	; (adr r3, 8003b90 <current_sensor20.3+0x98>)
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f7fc fd88 	bl	8000638 <__aeabi_dmul>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	a319      	add	r3, pc, #100	; (adr r3, 8003b98 <current_sensor20.3+0xa0>)
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f7fc fea9 	bl	800088c <__aeabi_ddiv>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4614      	mov	r4, r2
 8003b40:	461d      	mov	r5, r3
 8003b42:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <current_sensor20.3+0xb0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fd1e 	bl	8000588 <__aeabi_f2d>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7fc fd70 	bl	8000638 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f7fd f862 	bl	8000c28 <__aeabi_d2f>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4a11      	ldr	r2, [pc, #68]	; (8003bac <current_sensor20.3+0xb4>)
 8003b68:	6013      	str	r3, [r2, #0]
  	  trans1.tlm1.H_Current =(1 - rawVoltage20)/sensitivity20;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <current_sensor20.3+0xb4>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b74:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <current_sensor20.3+0xb8>)
 8003b7a:	ed93 7a00 	vldr	s14, [r3]
 8003b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <current_sensor20.3+0xbc>)
 8003b84:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  }
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b90:	66666666 	.word	0x66666666
 8003b94:	400a6666 	.word	0x400a6666
 8003b98:	00000000 	.word	0x00000000
 8003b9c:	40affe00 	.word	0x40affe00
 8003ba0:	20000560 	.word	0x20000560
 8003ba4:	20000578 	.word	0x20000578
 8003ba8:	20000014 	.word	0x20000014
 8003bac:	2000057c 	.word	0x2000057c
 8003bb0:	20000010 	.word	0x20000010
 8003bb4:	200006a8 	.word	0x200006a8

08003bb8 <barometer_sensor.1>:
  {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 8003bc2:	f7fd fadf 	bl	8001184 <BMP180_GetTemp>
 8003bc6:	eef0 7a40 	vmov.f32	s15, s0
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <barometer_sensor.1+0x40>)
 8003bcc:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7fd fbd1 	bl	8001378 <BMP180_GetPress>
 8003bd6:	eef0 7a40 	vmov.f32	s15, s0
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <barometer_sensor.1+0x44>)
 8003bdc:	edc3 7a00 	vstr	s15, [r3]
  	  trans1.tlm1.Altitude = BMP180_GetAlt(0);
 8003be0:	2000      	movs	r0, #0
 8003be2:	f7fd fdf9 	bl	80017d8 <BMP180_GetAlt>
 8003be6:	eef0 7a40 	vmov.f32	s15, s0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <barometer_sensor.1+0x48>)
 8003bec:	edc3 7a00 	vstr	s15, [r3]
  }
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000568 	.word	0x20000568
 8003bfc:	2000056c 	.word	0x2000056c
 8003c00:	200006a8 	.word	0x200006a8

08003c04 <isu_check.0>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	f8c7 c004 	str.w	ip, [r7, #4]
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b094      	sub	sp, #80	; 0x50
 8003c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c22:	f107 031c 	add.w	r3, r7, #28
 8003c26:	2234      	movs	r2, #52	; 0x34
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f00a fcb1 	bl	800e592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	2300      	movs	r3, #0
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <SystemClock_Config+0xdc>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <SystemClock_Config+0xdc>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c50:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <SystemClock_Config+0xdc>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <SystemClock_Config+0xe0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a25      	ldr	r2, [pc, #148]	; (8003cfc <SystemClock_Config+0xe0>)
 8003c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <SystemClock_Config+0xe0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c80:	2310      	movs	r3, #16
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c84:	2302      	movs	r3, #2
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003c90:	23b4      	movs	r3, #180	; 0xb4
 8003c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c94:	2302      	movs	r3, #2
 8003c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fb69 	bl	800837c <HAL_RCC_OscConfig>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003cb0:	f000 fb94 	bl	80043dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003cb4:	f003 ffc8 	bl	8007c48 <HAL_PWREx_EnableOverDrive>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003cbe:	f000 fb8d 	bl	80043dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003cce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	2105      	movs	r1, #5
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 f801 	bl	8007ce8 <HAL_RCC_ClockConfig>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003cec:	f000 fb76 	bl	80043dc <Error_Handler>
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3750      	adds	r7, #80	; 0x50
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000

08003d00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d06:	463b      	mov	r3, r7
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d14:	4a36      	ldr	r2, [pc, #216]	; (8003df0 <MX_ADC1_Init+0xf0>)
 8003d16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003d18:	4b34      	ldr	r3, [pc, #208]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d20:	4b32      	ldr	r3, [pc, #200]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003d26:	4b31      	ldr	r3, [pc, #196]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d2c:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d3a:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d42:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <MX_ADC1_Init+0xf4>)
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003d4c:	4b27      	ldr	r3, [pc, #156]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d4e:	2204      	movs	r2, #4
 8003d50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d60:	4822      	ldr	r0, [pc, #136]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d62:	f001 fcb5 	bl	80056d0 <HAL_ADC_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003d6c:	f000 fb36 	bl	80043dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d74:	2301      	movs	r3, #1
 8003d76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	4619      	mov	r1, r3
 8003d80:	481a      	ldr	r0, [pc, #104]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d82:	f001 fe17 	bl	80059b4 <HAL_ADC_ConfigChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003d8c:	f000 fb26 	bl	80043dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d90:	2301      	movs	r3, #1
 8003d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003d94:	2302      	movs	r3, #2
 8003d96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d98:	463b      	mov	r3, r7
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4813      	ldr	r0, [pc, #76]	; (8003dec <MX_ADC1_Init+0xec>)
 8003d9e:	f001 fe09 	bl	80059b4 <HAL_ADC_ConfigChannel>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003da8:	f000 fb18 	bl	80043dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003dac:	2304      	movs	r3, #4
 8003dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003db0:	2303      	movs	r3, #3
 8003db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003db4:	463b      	mov	r3, r7
 8003db6:	4619      	mov	r1, r3
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <MX_ADC1_Init+0xec>)
 8003dba:	f001 fdfb 	bl	80059b4 <HAL_ADC_ConfigChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003dc4:	f000 fb0a 	bl	80043dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003dc8:	2308      	movs	r3, #8
 8003dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003dcc:	2304      	movs	r3, #4
 8003dce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4805      	ldr	r0, [pc, #20]	; (8003dec <MX_ADC1_Init+0xec>)
 8003dd6:	f001 fded 	bl	80059b4 <HAL_ADC_ConfigChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003de0:	f000 fafc 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000150 	.word	0x20000150
 8003df0:	40012000 	.word	0x40012000
 8003df4:	0f000001 	.word	0x0f000001

08003df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <MX_I2C1_Init+0x54>)
 8003e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e04:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <MX_I2C1_Init+0x58>)
 8003e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e34:	4804      	ldr	r0, [pc, #16]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e36:	f002 ff47 	bl	8006cc8 <HAL_I2C_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e40:	f000 facc 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200001f8 	.word	0x200001f8
 8003e4c:	40005400 	.word	0x40005400
 8003e50:	000186a0 	.word	0x000186a0

08003e54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <MX_I2C2_Init+0x54>)
 8003e5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e60:	4a12      	ldr	r2, [pc, #72]	; (8003eac <MX_I2C2_Init+0x58>)
 8003e62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e84:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e90:	4804      	ldr	r0, [pc, #16]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e92:	f002 ff19 	bl	8006cc8 <HAL_I2C_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003e9c:	f000 fa9e 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	2000024c 	.word	0x2000024c
 8003ea8:	40005800 	.word	0x40005800
 8003eac:	000186a0 	.word	0x000186a0

08003eb0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <MX_I2C3_Init+0x54>)
 8003eb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003ebc:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <MX_I2C3_Init+0x58>)
 8003ebe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ed2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003eec:	4804      	ldr	r0, [pc, #16]	; (8003f00 <MX_I2C3_Init+0x50>)
 8003eee:	f002 feeb 	bl	8006cc8 <HAL_I2C_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003ef8:	f000 fa70 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200002a0 	.word	0x200002a0
 8003f04:	40005c00 	.word	0x40005c00
 8003f08:	000186a0 	.word	0x000186a0

08003f0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f12:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <MX_SPI1_Init+0x6c>)
 8003f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f24:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f38:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f52:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f5a:	220a      	movs	r2, #10
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f5e:	4805      	ldr	r0, [pc, #20]	; (8003f74 <MX_SPI1_Init+0x68>)
 8003f60:	f004 fcaa 	bl	80088b8 <HAL_SPI_Init>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8003f6a:	f000 fa37 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200002f4 	.word	0x200002f4
 8003f78:	40013000 	.word	0x40013000

08003f7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003f82:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <MX_SPI2_Init+0x68>)
 8003f84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f86:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003f88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f8e:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f94:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f9a:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fa6:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fb0:	2238      	movs	r2, #56	; 0x38
 8003fb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fc8:	220a      	movs	r2, #10
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fcc:	4804      	ldr	r0, [pc, #16]	; (8003fe0 <MX_SPI2_Init+0x64>)
 8003fce:	f004 fc73 	bl	80088b8 <HAL_SPI_Init>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003fd8:	f000 fa00 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2000034c 	.word	0x2000034c
 8003fe4:	40003800 	.word	0x40003800

08003fe8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fee:	f107 0308 	add.w	r3, r7, #8
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004004:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <MX_TIM1_Init+0x9c>)
 8004006:	4a20      	ldr	r2, [pc, #128]	; (8004088 <MX_TIM1_Init+0xa0>)
 8004008:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <MX_TIM1_Init+0x9c>)
 800400c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8004010:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <MX_TIM1_Init+0x9c>)
 8004014:	2200      	movs	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <MX_TIM1_Init+0x9c>)
 800401a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800401e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <MX_TIM1_Init+0x9c>)
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <MX_TIM1_Init+0x9c>)
 8004028:	2200      	movs	r2, #0
 800402a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <MX_TIM1_Init+0x9c>)
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004032:	4814      	ldr	r0, [pc, #80]	; (8004084 <MX_TIM1_Init+0x9c>)
 8004034:	f005 f9e8 	bl	8009408 <HAL_TIM_Base_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800403e:	f000 f9cd 	bl	80043dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004046:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004048:	f107 0308 	add.w	r3, r7, #8
 800404c:	4619      	mov	r1, r3
 800404e:	480d      	ldr	r0, [pc, #52]	; (8004084 <MX_TIM1_Init+0x9c>)
 8004050:	f005 fa92 	bl	8009578 <HAL_TIM_ConfigClockSource>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800405a:	f000 f9bf 	bl	80043dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004066:	463b      	mov	r3, r7
 8004068:	4619      	mov	r1, r3
 800406a:	4806      	ldr	r0, [pc, #24]	; (8004084 <MX_TIM1_Init+0x9c>)
 800406c:	f005 fc86 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004076:	f000 f9b1 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800407a:	bf00      	nop
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200003a4 	.word	0x200003a4
 8004088:	40010000 	.word	0x40010000

0800408c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <MX_UART4_Init+0x4c>)
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <MX_UART4_Init+0x50>)
 8004094:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <MX_UART4_Init+0x4c>)
 8004098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800409c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <MX_UART4_Init+0x4c>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <MX_UART4_Init+0x4c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <MX_UART4_Init+0x4c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <MX_UART4_Init+0x4c>)
 80040b2:	220c      	movs	r2, #12
 80040b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <MX_UART4_Init+0x4c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <MX_UART4_Init+0x4c>)
 80040be:	2200      	movs	r2, #0
 80040c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80040c2:	4805      	ldr	r0, [pc, #20]	; (80040d8 <MX_UART4_Init+0x4c>)
 80040c4:	f005 fcd6 	bl	8009a74 <HAL_UART_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80040ce:	f000 f985 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200003ec 	.word	0x200003ec
 80040dc:	40004c00 	.word	0x40004c00

080040e0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <MX_UART5_Init+0x4c>)
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <MX_UART5_Init+0x50>)
 80040e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <MX_UART5_Init+0x4c>)
 80040ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80040f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <MX_UART5_Init+0x4c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <MX_UART5_Init+0x4c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <MX_UART5_Init+0x4c>)
 8004100:	2200      	movs	r2, #0
 8004102:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <MX_UART5_Init+0x4c>)
 8004106:	220c      	movs	r2, #12
 8004108:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <MX_UART5_Init+0x4c>)
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <MX_UART5_Init+0x4c>)
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004116:	4805      	ldr	r0, [pc, #20]	; (800412c <MX_UART5_Init+0x4c>)
 8004118:	f005 fcac 	bl	8009a74 <HAL_UART_Init>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004122:	f000 f95b 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000430 	.word	0x20000430
 8004130:	40005000 	.word	0x40005000

08004134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <MX_USART1_UART_Init+0x50>)
 800413c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 8004140:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 800414e:	2200      	movs	r2, #0
 8004150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 800415a:	220c      	movs	r2, #12
 800415c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 8004166:	2200      	movs	r2, #0
 8004168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800416a:	4805      	ldr	r0, [pc, #20]	; (8004180 <MX_USART1_UART_Init+0x4c>)
 800416c:	f005 fc82 	bl	8009a74 <HAL_UART_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004176:	f000 f931 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20002814 	.word	0x20002814
 8004184:	40011000 	.word	0x40011000

08004188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <MX_DMA_Init+0x78>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <MX_DMA_Init+0x78>)
 8004198:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800419c:	6313      	str	r3, [r2, #48]	; 0x30
 800419e:	4b18      	ldr	r3, [pc, #96]	; (8004200 <MX_DMA_Init+0x78>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	607b      	str	r3, [r7, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <MX_DMA_Init+0x78>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <MX_DMA_Init+0x78>)
 80041b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041b8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <MX_DMA_Init+0x78>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	200b      	movs	r0, #11
 80041cc:	f001 ff7d 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80041d0:	200b      	movs	r0, #11
 80041d2:	f001 ff96 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2100      	movs	r1, #0
 80041da:	202f      	movs	r0, #47	; 0x2f
 80041dc:	f001 ff75 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80041e0:	202f      	movs	r0, #47	; 0x2f
 80041e2:	f001 ff8e 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	2100      	movs	r1, #0
 80041ea:	2038      	movs	r0, #56	; 0x38
 80041ec:	f001 ff6d 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80041f0:	2038      	movs	r0, #56	; 0x38
 80041f2:	f001 ff86 	bl	8006102 <HAL_NVIC_EnableIRQ>

}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800

08004204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420a:	f107 0314 	add.w	r3, r7, #20
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <MX_GPIO_Init+0x190>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	4a5c      	ldr	r2, [pc, #368]	; (8004394 <MX_GPIO_Init+0x190>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6313      	str	r3, [r2, #48]	; 0x30
 800422a:	4b5a      	ldr	r3, [pc, #360]	; (8004394 <MX_GPIO_Init+0x190>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	4b56      	ldr	r3, [pc, #344]	; (8004394 <MX_GPIO_Init+0x190>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4a55      	ldr	r2, [pc, #340]	; (8004394 <MX_GPIO_Init+0x190>)
 8004240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004244:	6313      	str	r3, [r2, #48]	; 0x30
 8004246:	4b53      	ldr	r3, [pc, #332]	; (8004394 <MX_GPIO_Init+0x190>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <MX_GPIO_Init+0x190>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a4e      	ldr	r2, [pc, #312]	; (8004394 <MX_GPIO_Init+0x190>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b4c      	ldr	r3, [pc, #304]	; (8004394 <MX_GPIO_Init+0x190>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	4b48      	ldr	r3, [pc, #288]	; (8004394 <MX_GPIO_Init+0x190>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a47      	ldr	r2, [pc, #284]	; (8004394 <MX_GPIO_Init+0x190>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b45      	ldr	r3, [pc, #276]	; (8004394 <MX_GPIO_Init+0x190>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <MX_GPIO_Init+0x190>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <MX_GPIO_Init+0x190>)
 8004294:	f043 0308 	orr.w	r3, r3, #8
 8004298:	6313      	str	r3, [r2, #48]	; 0x30
 800429a:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <MX_GPIO_Init+0x190>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CV_Enable_Pin|MT_CS_Pin|NCP_SCK_Pin, GPIO_PIN_RESET);
 80042a6:	2200      	movs	r2, #0
 80042a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80042ac:	483a      	ldr	r0, [pc, #232]	; (8004398 <MX_GPIO_Init+0x194>)
 80042ae:	f002 fcf1 	bl	8006c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|HV_En_Pin, GPIO_PIN_RESET);
 80042b2:	2200      	movs	r2, #0
 80042b4:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80042b8:	4838      	ldr	r0, [pc, #224]	; (800439c <MX_GPIO_Init+0x198>)
 80042ba:	f002 fceb 	bl	8006c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor_Pin|Drougue_Parachute_Pin|Main_Parachute_Pin, GPIO_PIN_RESET);
 80042be:	2200      	movs	r2, #0
 80042c0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80042c4:	4836      	ldr	r0, [pc, #216]	; (80043a0 <MX_GPIO_Init+0x19c>)
 80042c6:	f002 fce5 	bl	8006c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Tilt_Sensor_Pin */
  GPIO_InitStruct.Pin = Tilt_Sensor_Pin;
 80042ca:	2308      	movs	r3, #8
 80042cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tilt_Sensor_GPIO_Port, &GPIO_InitStruct);
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	4619      	mov	r1, r3
 80042dc:	4830      	ldr	r0, [pc, #192]	; (80043a0 <MX_GPIO_Init+0x19c>)
 80042de:	f002 fb2d 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 80042e2:	2340      	movs	r3, #64	; 0x40
 80042e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042ea:	2302      	movs	r3, #2
 80042ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ee:	2300      	movs	r3, #0
 80042f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 80042f2:	f107 0314 	add.w	r3, r7, #20
 80042f6:	4619      	mov	r1, r3
 80042f8:	4827      	ldr	r0, [pc, #156]	; (8004398 <MX_GPIO_Init+0x194>)
 80042fa:	f002 fb1f 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pins : MT_CS_Pin NCP_SCK_Pin */
  GPIO_InitStruct.Pin = MT_CS_Pin|NCP_SCK_Pin;
 80042fe:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8004302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004304:	2301      	movs	r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	4619      	mov	r1, r3
 8004316:	4820      	ldr	r0, [pc, #128]	; (8004398 <MX_GPIO_Init+0x194>)
 8004318:	f002 fb10 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pin : Read_PDS_Pin */
  GPIO_InitStruct.Pin = Read_PDS_Pin;
 800431c:	2320      	movs	r3, #32
 800431e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004324:	2302      	movs	r3, #2
 8004326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Read_PDS_GPIO_Port, &GPIO_InitStruct);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4619      	mov	r1, r3
 800432e:	481c      	ldr	r0, [pc, #112]	; (80043a0 <MX_GPIO_Init+0x19c>)
 8004330:	f002 fb04 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin HV_En_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|HV_En_Pin;
 8004334:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8004338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433a:	2301      	movs	r3, #1
 800433c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	4619      	mov	r1, r3
 800434c:	4813      	ldr	r0, [pc, #76]	; (800439c <MX_GPIO_Init+0x198>)
 800434e:	f002 faf5 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_Pin Drougue_Parachute_Pin Main_Parachute_Pin */
  GPIO_InitStruct.Pin = Motor_Pin|Drougue_Parachute_Pin|Main_Parachute_Pin;
 8004352:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004358:	2301      	movs	r3, #1
 800435a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800435c:	2302      	movs	r3, #2
 800435e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	2300      	movs	r3, #0
 8004362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	4619      	mov	r1, r3
 800436a:	480d      	ldr	r0, [pc, #52]	; (80043a0 <MX_GPIO_Init+0x19c>)
 800436c:	f002 fae6 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pin : NCP_DAT_Pin */
  GPIO_InitStruct.Pin = NCP_DAT_Pin;
 8004370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NCP_DAT_GPIO_Port, &GPIO_InitStruct);
 800437e:	f107 0314 	add.w	r3, r7, #20
 8004382:	4619      	mov	r1, r3
 8004384:	4804      	ldr	r0, [pc, #16]	; (8004398 <MX_GPIO_Init+0x194>)
 8004386:	f002 fad9 	bl	800693c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800438a:	bf00      	nop
 800438c:	3728      	adds	r7, #40	; 0x28
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	40020000 	.word	0x40020000
 800439c:	40020400 	.word	0x40020400
 80043a0:	40020800 	.word	0x40020800

080043a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e009      	b.n	80043ca <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	60ba      	str	r2, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe ff24 	bl	800320c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	3301      	adds	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	dbf1      	blt.n	80043b6 <_write+0x12>
	}
	return len;
 80043d2:	687b      	ldr	r3, [r7, #4]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043e0:	b672      	cpsid	i
}
 80043e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043e4:	e7fe      	b.n	80043e4 <Error_Handler+0x8>
	...

080043e8 <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80043ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f2:	9302      	str	r3, [sp, #8]
 80043f4:	2301      	movs	r3, #1
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <MPU6050_Init+0xc0>)
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2301      	movs	r3, #1
 80043fe:	2275      	movs	r2, #117	; 0x75
 8004400:	21d0      	movs	r1, #208	; 0xd0
 8004402:	482a      	ldr	r0, [pc, #168]	; (80044ac <MPU6050_Init+0xc4>)
 8004404:	f002 fe9e 	bl	8007144 <HAL_I2C_Mem_Read>
 8004408:	4603      	mov	r3, r0
 800440a:	b29a      	uxth	r2, r3
 800440c:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <MPU6050_Init+0xc8>)
 800440e:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <MPU6050_Init+0xc0>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b68      	cmp	r3, #104	; 0x68
 8004416:	d140      	bne.n	800449a <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8004418:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <MPU6050_Init+0xcc>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800441e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004422:	9302      	str	r3, [sp, #8]
 8004424:	2301      	movs	r3, #1
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <MPU6050_Init+0xcc>)
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2301      	movs	r3, #1
 800442e:	226b      	movs	r2, #107	; 0x6b
 8004430:	21d0      	movs	r1, #208	; 0xd0
 8004432:	481e      	ldr	r0, [pc, #120]	; (80044ac <MPU6050_Init+0xc4>)
 8004434:	f002 fd8c 	bl	8006f50 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <MPU6050_Init+0xcc>)
 800443a:	2207      	movs	r2, #7
 800443c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800443e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004442:	9302      	str	r3, [sp, #8]
 8004444:	2301      	movs	r3, #1
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <MPU6050_Init+0xcc>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2301      	movs	r3, #1
 800444e:	2219      	movs	r2, #25
 8004450:	21d0      	movs	r1, #208	; 0xd0
 8004452:	4816      	ldr	r0, [pc, #88]	; (80044ac <MPU6050_Init+0xc4>)
 8004454:	f002 fd7c 	bl	8006f50 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8004458:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <MPU6050_Init+0xcc>)
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800445e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004462:	9302      	str	r3, [sp, #8]
 8004464:	2301      	movs	r3, #1
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <MPU6050_Init+0xcc>)
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2301      	movs	r3, #1
 800446e:	221c      	movs	r2, #28
 8004470:	21d0      	movs	r1, #208	; 0xd0
 8004472:	480e      	ldr	r0, [pc, #56]	; (80044ac <MPU6050_Init+0xc4>)
 8004474:	f002 fd6c 	bl	8006f50 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <MPU6050_Init+0xcc>)
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800447e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004482:	9302      	str	r3, [sp, #8]
 8004484:	2301      	movs	r3, #1
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <MPU6050_Init+0xcc>)
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2301      	movs	r3, #1
 800448e:	221b      	movs	r2, #27
 8004490:	21d0      	movs	r1, #208	; 0xd0
 8004492:	4806      	ldr	r0, [pc, #24]	; (80044ac <MPU6050_Init+0xc4>)
 8004494:	f002 fd5c 	bl	8006f50 <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 8004498:	e002      	b.n	80044a0 <MPU6050_Init+0xb8>
	else check=-1;
 800449a:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <MPU6050_Init+0xc0>)
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	701a      	strb	r2, [r3, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20002808 	.word	0x20002808
 80044ac:	200001f8 	.word	0x200001f8
 80044b0:	20000018 	.word	0x20000018
 80044b4:	20002809 	.word	0x20002809

080044b8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af04      	add	r7, sp, #16
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80044c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c8:	9302      	str	r3, [sp, #8]
 80044ca:	2306      	movs	r3, #6
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	f107 0310 	add.w	r3, r7, #16
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2301      	movs	r3, #1
 80044d6:	223b      	movs	r2, #59	; 0x3b
 80044d8:	21d0      	movs	r1, #208	; 0xd0
 80044da:	4832      	ldr	r0, [pc, #200]	; (80045a4 <MPU6050_Read_Accel+0xec>)
 80044dc:	f002 fe32 	bl	8007144 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80044e0:	7c3b      	ldrb	r3, [r7, #16]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	b21a      	sxth	r2, r3
 80044e6:	7c7b      	ldrb	r3, [r7, #17]
 80044e8:	b21b      	sxth	r3, r3
 80044ea:	4313      	orrs	r3, r2
 80044ec:	b21a      	sxth	r2, r3
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <MPU6050_Read_Accel+0xf0>)
 80044f0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80044f2:	7cbb      	ldrb	r3, [r7, #18]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	b21a      	sxth	r2, r3
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	4313      	orrs	r3, r2
 80044fe:	b21a      	sxth	r2, r3
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <MPU6050_Read_Accel+0xf4>)
 8004502:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8004504:	7d3b      	ldrb	r3, [r7, #20]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	b21a      	sxth	r2, r3
 800450a:	7d7b      	ldrb	r3, [r7, #21]
 800450c:	b21b      	sxth	r3, r3
 800450e:	4313      	orrs	r3, r2
 8004510:	b21a      	sxth	r2, r3
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <MPU6050_Read_Accel+0xf8>)
 8004514:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 8004516:	7c7b      	ldrb	r3, [r7, #17]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	b29a      	uxth	r2, r3
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <MPU6050_Read_Accel+0xfc>)
 8004522:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <MPU6050_Read_Accel+0xf0>)
 8004526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc f81a 	bl	8000564 <__aeabi_i2d>
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <MPU6050_Read_Accel+0x100>)
 8004536:	f7fc f9a9 	bl	800088c <__aeabi_ddiv>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	f7fc fb71 	bl	8000c28 <__aeabi_d2f>
 8004546:	4602      	mov	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 800454c:	4b17      	ldr	r3, [pc, #92]	; (80045ac <MPU6050_Read_Accel+0xf4>)
 800454e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc f806 	bl	8000564 <__aeabi_i2d>
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <MPU6050_Read_Accel+0x100>)
 800455e:	f7fc f995 	bl	800088c <__aeabi_ddiv>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	f7fc fb5d 	bl	8000c28 <__aeabi_d2f>
 800456e:	4602      	mov	r2, r0
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <MPU6050_Read_Accel+0xf8>)
 8004576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fb fff2 	bl	8000564 <__aeabi_i2d>
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <MPU6050_Read_Accel+0x100>)
 8004586:	f7fc f981 	bl	800088c <__aeabi_ddiv>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	f7fc fb49 	bl	8000c28 <__aeabi_d2f>
 8004596:	4602      	mov	r2, r0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	601a      	str	r2, [r3, #0]

}
 800459c:	bf00      	nop
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200001f8 	.word	0x200001f8
 80045a8:	200027fc 	.word	0x200027fc
 80045ac:	200027fe 	.word	0x200027fe
 80045b0:	20002800 	.word	0x20002800
 80045b4:	20000018 	.word	0x20000018
 80045b8:	40d00000 	.word	0x40d00000
 80045bc:	00000000 	.word	0x00000000

080045c0 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af04      	add	r7, sp, #16
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80045cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045d0:	9302      	str	r3, [sp, #8]
 80045d2:	2306      	movs	r3, #6
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	f107 0310 	add.w	r3, r7, #16
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2301      	movs	r3, #1
 80045de:	2243      	movs	r2, #67	; 0x43
 80045e0:	21d0      	movs	r1, #208	; 0xd0
 80045e2:	4831      	ldr	r0, [pc, #196]	; (80046a8 <MPU6050_Read_Gyro+0xe8>)
 80045e4:	f002 fdae 	bl	8007144 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80045e8:	7c3b      	ldrb	r3, [r7, #16]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	b21a      	sxth	r2, r3
 80045ee:	7c7b      	ldrb	r3, [r7, #17]
 80045f0:	b21b      	sxth	r3, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b21a      	sxth	r2, r3
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <MPU6050_Read_Gyro+0xec>)
 80045f8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80045fa:	7cbb      	ldrb	r3, [r7, #18]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	b21a      	sxth	r2, r3
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	b21b      	sxth	r3, r3
 8004604:	4313      	orrs	r3, r2
 8004606:	b21a      	sxth	r2, r3
 8004608:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <MPU6050_Read_Gyro+0xf0>)
 800460a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800460c:	7d3b      	ldrb	r3, [r7, #20]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	b21a      	sxth	r2, r3
 8004612:	7d7b      	ldrb	r3, [r7, #21]
 8004614:	b21b      	sxth	r3, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	b21a      	sxth	r2, r3
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <MPU6050_Read_Gyro+0xf4>)
 800461c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <MPU6050_Read_Gyro+0xec>)
 8004620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb ff9d 	bl	8000564 <__aeabi_i2d>
 800462a:	a31d      	add	r3, pc, #116	; (adr r3, 80046a0 <MPU6050_Read_Gyro+0xe0>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fc f92c 	bl	800088c <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f7fc faf4 	bl	8000c28 <__aeabi_d2f>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <MPU6050_Read_Gyro+0xf0>)
 8004648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb ff89 	bl	8000564 <__aeabi_i2d>
 8004652:	a313      	add	r3, pc, #76	; (adr r3, 80046a0 <MPU6050_Read_Gyro+0xe0>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fc f918 	bl	800088c <__aeabi_ddiv>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f7fc fae0 	bl	8000c28 <__aeabi_d2f>
 8004668:	4602      	mov	r2, r0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <MPU6050_Read_Gyro+0xf4>)
 8004670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fb ff75 	bl	8000564 <__aeabi_i2d>
 800467a:	a309      	add	r3, pc, #36	; (adr r3, 80046a0 <MPU6050_Read_Gyro+0xe0>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fc f904 	bl	800088c <__aeabi_ddiv>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	f7fc facc 	bl	8000c28 <__aeabi_d2f>
 8004690:	4602      	mov	r2, r0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	601a      	str	r2, [r3, #0]
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	00000000 	.word	0x00000000
 80046a4:	40606000 	.word	0x40606000
 80046a8:	200001f8 	.word	0x200001f8
 80046ac:	20002802 	.word	0x20002802
 80046b0:	20002804 	.word	0x20002804
 80046b4:	20002806 	.word	0x20002806

080046b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <HAL_MspInit+0x58>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a12      	ldr	r2, [pc, #72]	; (8004710 <HAL_MspInit+0x58>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <HAL_MspInit+0x58>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_MspInit+0x58>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a0b      	ldr	r2, [pc, #44]	; (8004710 <HAL_MspInit+0x58>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_MspInit+0x58>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80046f6:	2200      	movs	r2, #0
 80046f8:	2100      	movs	r1, #0
 80046fa:	2005      	movs	r0, #5
 80046fc:	f001 fce5 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004700:	2005      	movs	r0, #5
 8004702:	f001 fcfe 	bl	8006102 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800

08004714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3c      	ldr	r2, [pc, #240]	; (8004824 <HAL_ADC_MspInit+0x110>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d171      	bne.n	800481a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <HAL_ADC_MspInit+0x114>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	4a3a      	ldr	r2, [pc, #232]	; (8004828 <HAL_ADC_MspInit+0x114>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	6453      	str	r3, [r2, #68]	; 0x44
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_ADC_MspInit+0x114>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_ADC_MspInit+0x114>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a33      	ldr	r2, [pc, #204]	; (8004828 <HAL_ADC_MspInit+0x114>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	4b31      	ldr	r3, [pc, #196]	; (8004828 <HAL_ADC_MspInit+0x114>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <HAL_ADC_MspInit+0x114>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <HAL_ADC_MspInit+0x114>)
 8004778:	f043 0302 	orr.w	r3, r3, #2
 800477c:	6313      	str	r3, [r2, #48]	; 0x30
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_ADC_MspInit+0x114>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800478a:	2313      	movs	r3, #19
 800478c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800478e:	2303      	movs	r3, #3
 8004790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	4619      	mov	r1, r3
 800479c:	4823      	ldr	r0, [pc, #140]	; (800482c <HAL_ADC_MspInit+0x118>)
 800479e:	f002 f8cd 	bl	800693c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047a2:	2301      	movs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a6:	2303      	movs	r3, #3
 80047a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	4619      	mov	r1, r3
 80047b4:	481e      	ldr	r0, [pc, #120]	; (8004830 <HAL_ADC_MspInit+0x11c>)
 80047b6:	f002 f8c1 	bl	800693c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047bc:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <HAL_ADC_MspInit+0x124>)
 80047be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047d2:	4b18      	ldr	r3, [pc, #96]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047da:	4b16      	ldr	r3, [pc, #88]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_ADC_MspInit+0x120>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047fe:	480d      	ldr	r0, [pc, #52]	; (8004834 <HAL_ADC_MspInit+0x120>)
 8004800:	f001 fc9a 	bl	8006138 <HAL_DMA_Init>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800480a:	f7ff fde7 	bl	80043dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a08      	ldr	r2, [pc, #32]	; (8004834 <HAL_ADC_MspInit+0x120>)
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
 8004814:	4a07      	ldr	r2, [pc, #28]	; (8004834 <HAL_ADC_MspInit+0x120>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800481a:	bf00      	nop
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40012000 	.word	0x40012000
 8004828:	40023800 	.word	0x40023800
 800482c:	40020000 	.word	0x40020000
 8004830:	40020400 	.word	0x40020400
 8004834:	20000198 	.word	0x20000198
 8004838:	40026410 	.word	0x40026410

0800483c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a5b      	ldr	r2, [pc, #364]	; (80049c8 <HAL_I2C_MspInit+0x18c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d12c      	bne.n	80048b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	4b5a      	ldr	r3, [pc, #360]	; (80049cc <HAL_I2C_MspInit+0x190>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a59      	ldr	r2, [pc, #356]	; (80049cc <HAL_I2C_MspInit+0x190>)
 8004868:	f043 0302 	orr.w	r3, r3, #2
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b57      	ldr	r3, [pc, #348]	; (80049cc <HAL_I2C_MspInit+0x190>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800487a:	23c0      	movs	r3, #192	; 0xc0
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800487e:	2312      	movs	r3, #18
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004886:	2303      	movs	r3, #3
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800488a:	2304      	movs	r3, #4
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800488e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004892:	4619      	mov	r1, r3
 8004894:	484e      	ldr	r0, [pc, #312]	; (80049d0 <HAL_I2C_MspInit+0x194>)
 8004896:	f002 f851 	bl	800693c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a4a      	ldr	r2, [pc, #296]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80048a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b48      	ldr	r3, [pc, #288]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80048b6:	e083      	b.n	80049c0 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a45      	ldr	r2, [pc, #276]	; (80049d4 <HAL_I2C_MspInit+0x198>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d12d      	bne.n	800491e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	4b41      	ldr	r3, [pc, #260]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a40      	ldr	r2, [pc, #256]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b3e      	ldr	r3, [pc, #248]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80048de:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048e4:	2312      	movs	r3, #18
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ec:	2303      	movs	r3, #3
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80048f0:	2304      	movs	r3, #4
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048f8:	4619      	mov	r1, r3
 80048fa:	4835      	ldr	r0, [pc, #212]	; (80049d0 <HAL_I2C_MspInit+0x194>)
 80048fc:	f002 f81e 	bl	800693c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_I2C_MspInit+0x190>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	4a30      	ldr	r2, [pc, #192]	; (80049cc <HAL_I2C_MspInit+0x190>)
 800490a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800490e:	6413      	str	r3, [r2, #64]	; 0x40
 8004910:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_I2C_MspInit+0x190>)
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	697b      	ldr	r3, [r7, #20]
}
 800491c:	e050      	b.n	80049c0 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <HAL_I2C_MspInit+0x19c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d14b      	bne.n	80049c0 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	4b27      	ldr	r3, [pc, #156]	; (80049cc <HAL_I2C_MspInit+0x190>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <HAL_I2C_MspInit+0x190>)
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	6313      	str	r3, [r2, #48]	; 0x30
 8004938:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_I2C_MspInit+0x190>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_I2C_MspInit+0x190>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <HAL_I2C_MspInit+0x190>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6313      	str	r3, [r2, #48]	; 0x30
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_I2C_MspInit+0x190>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004966:	2312      	movs	r3, #18
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496e:	2303      	movs	r3, #3
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004972:	2304      	movs	r3, #4
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800497a:	4619      	mov	r1, r3
 800497c:	4817      	ldr	r0, [pc, #92]	; (80049dc <HAL_I2C_MspInit+0x1a0>)
 800497e:	f001 ffdd 	bl	800693c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004988:	2312      	movs	r3, #18
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004990:	2303      	movs	r3, #3
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004994:	2304      	movs	r3, #4
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800499c:	4619      	mov	r1, r3
 800499e:	4810      	ldr	r0, [pc, #64]	; (80049e0 <HAL_I2C_MspInit+0x1a4>)
 80049a0:	f001 ffcc 	bl	800693c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	4b08      	ldr	r3, [pc, #32]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80049ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049b2:	6413      	str	r3, [r2, #64]	; 0x40
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_I2C_MspInit+0x190>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
}
 80049c0:	bf00      	nop
 80049c2:	3738      	adds	r7, #56	; 0x38
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40005400 	.word	0x40005400
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40020400 	.word	0x40020400
 80049d4:	40005800 	.word	0x40005800
 80049d8:	40005c00 	.word	0x40005c00
 80049dc:	40020800 	.word	0x40020800
 80049e0:	40020000 	.word	0x40020000

080049e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	; 0x38
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_SPI_MspInit+0x180>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d14a      	bne.n	8004a9c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	4b57      	ldr	r3, [pc, #348]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	4a56      	ldr	r2, [pc, #344]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a14:	6453      	str	r3, [r2, #68]	; 0x44
 8004a16:	4b54      	ldr	r3, [pc, #336]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1e:	623b      	str	r3, [r7, #32]
 8004a20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4a4f      	ldr	r2, [pc, #316]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
 8004a32:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	4b49      	ldr	r3, [pc, #292]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a48      	ldr	r2, [pc, #288]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b46      	ldr	r3, [pc, #280]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a66:	2303      	movs	r3, #3
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a72:	4619      	mov	r1, r3
 8004a74:	483d      	ldr	r0, [pc, #244]	; (8004b6c <HAL_SPI_MspInit+0x188>)
 8004a76:	f001 ff61 	bl	800693c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a86:	2303      	movs	r3, #3
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a8a:	2305      	movs	r3, #5
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a92:	4619      	mov	r1, r3
 8004a94:	4836      	ldr	r0, [pc, #216]	; (8004b70 <HAL_SPI_MspInit+0x18c>)
 8004a96:	f001 ff51 	bl	800693c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a9a:	e05f      	b.n	8004b5c <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <HAL_SPI_MspInit+0x190>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d15a      	bne.n	8004b5c <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a2e      	ldr	r2, [pc, #184]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_SPI_MspInit+0x184>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004afa:	2302      	movs	r3, #2
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b06:	2303      	movs	r3, #3
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004b0a:	2307      	movs	r3, #7
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b12:	4619      	mov	r1, r3
 8004b14:	4818      	ldr	r0, [pc, #96]	; (8004b78 <HAL_SPI_MspInit+0x194>)
 8004b16:	f001 ff11 	bl	800693c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b26:	2303      	movs	r3, #3
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b2a:	2305      	movs	r3, #5
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b32:	4619      	mov	r1, r3
 8004b34:	4810      	ldr	r0, [pc, #64]	; (8004b78 <HAL_SPI_MspInit+0x194>)
 8004b36:	f001 ff01 	bl	800693c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b40:	2302      	movs	r3, #2
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b4c:	2305      	movs	r3, #5
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b54:	4619      	mov	r1, r3
 8004b56:	4806      	ldr	r0, [pc, #24]	; (8004b70 <HAL_SPI_MspInit+0x18c>)
 8004b58:	f001 fef0 	bl	800693c <HAL_GPIO_Init>
}
 8004b5c:	bf00      	nop
 8004b5e:	3738      	adds	r7, #56	; 0x38
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40013000 	.word	0x40013000
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40020000 	.word	0x40020000
 8004b70:	40020400 	.word	0x40020400
 8004b74:	40003800 	.word	0x40003800
 8004b78:	40020800 	.word	0x40020800

08004b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0b      	ldr	r2, [pc, #44]	; (8004bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10d      	bne.n	8004baa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <HAL_TIM_Base_MspInit+0x40>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <HAL_TIM_Base_MspInit+0x40>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <HAL_TIM_Base_MspInit+0x40>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40023800 	.word	0x40023800

08004bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	; 0x38
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a93      	ldr	r2, [pc, #588]	; (8004e2c <HAL_UART_MspInit+0x26c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d12d      	bne.n	8004c3e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	4b92      	ldr	r3, [pc, #584]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a91      	ldr	r2, [pc, #580]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b8f      	ldr	r3, [pc, #572]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	4b8b      	ldr	r3, [pc, #556]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	4a8a      	ldr	r2, [pc, #552]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c08:	f043 0304 	orr.w	r3, r3, #4
 8004c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0e:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c20:	2302      	movs	r3, #2
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c34:	4619      	mov	r1, r3
 8004c36:	487f      	ldr	r0, [pc, #508]	; (8004e34 <HAL_UART_MspInit+0x274>)
 8004c38:	f001 fe80 	bl	800693c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c3c:	e0f1      	b.n	8004e22 <HAL_UART_MspInit+0x262>
  else if(huart->Instance==UART5)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7d      	ldr	r2, [pc, #500]	; (8004e38 <HAL_UART_MspInit+0x278>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	f040 80b2 	bne.w	8004dae <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	4b78      	ldr	r3, [pc, #480]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a77      	ldr	r2, [pc, #476]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5a:	4b75      	ldr	r3, [pc, #468]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	4b71      	ldr	r3, [pc, #452]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4a70      	ldr	r2, [pc, #448]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	6313      	str	r3, [r2, #48]	; 0x30
 8004c76:	4b6e      	ldr	r3, [pc, #440]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	4b6a      	ldr	r3, [pc, #424]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a69      	ldr	r2, [pc, #420]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c8c:	f043 0308 	orr.w	r3, r3, #8
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cac:	2303      	movs	r3, #3
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb8:	4619      	mov	r1, r3
 8004cba:	485e      	ldr	r0, [pc, #376]	; (8004e34 <HAL_UART_MspInit+0x274>)
 8004cbc:	f001 fe3e 	bl	800693c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4858      	ldr	r0, [pc, #352]	; (8004e3c <HAL_UART_MspInit+0x27c>)
 8004cdc:	f001 fe2e 	bl	800693c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004ce0:	4b57      	ldr	r3, [pc, #348]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004ce2:	4a58      	ldr	r2, [pc, #352]	; (8004e44 <HAL_UART_MspInit+0x284>)
 8004ce4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004ce6:	4b56      	ldr	r3, [pc, #344]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cec:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cee:	4b54      	ldr	r3, [pc, #336]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf4:	4b52      	ldr	r3, [pc, #328]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cfa:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d00:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d02:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d08:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8004d0e:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d14:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d16:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d1c:	4b48      	ldr	r3, [pc, #288]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004d22:	4847      	ldr	r0, [pc, #284]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d24:	f001 fa08 	bl	8006138 <HAL_DMA_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8004d2e:	f7ff fb55 	bl	80043dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a42      	ldr	r2, [pc, #264]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
 8004d38:	4a41      	ldr	r2, [pc, #260]	; (8004e40 <HAL_UART_MspInit+0x280>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004d3e:	4b42      	ldr	r3, [pc, #264]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d40:	4a42      	ldr	r2, [pc, #264]	; (8004e4c <HAL_UART_MspInit+0x28c>)
 8004d42:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8004d44:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d4a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d4e:	2240      	movs	r2, #64	; 0x40
 8004d50:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d5e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d66:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d72:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d74:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d7a:	4b33      	ldr	r3, [pc, #204]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004d80:	4831      	ldr	r0, [pc, #196]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d82:	f001 f9d9 	bl	8006138 <HAL_DMA_Init>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8004d8c:	f7ff fb26 	bl	80043dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a2d      	ldr	r2, [pc, #180]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d94:	635a      	str	r2, [r3, #52]	; 0x34
 8004d96:	4a2c      	ldr	r2, [pc, #176]	; (8004e48 <HAL_UART_MspInit+0x288>)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2035      	movs	r0, #53	; 0x35
 8004da2:	f001 f992 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004da6:	2035      	movs	r0, #53	; 0x35
 8004da8:	f001 f9ab 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8004dac:	e039      	b.n	8004e22 <HAL_UART_MspInit+0x262>
  else if(huart->Instance==USART1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <HAL_UART_MspInit+0x290>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d134      	bne.n	8004e22 <HAL_UART_MspInit+0x262>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004dc2:	f043 0310 	orr.w	r3, r3, #16
 8004dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6313      	str	r3, [r2, #48]	; 0x30
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_UART_MspInit+0x270>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004df0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df6:	2302      	movs	r3, #2
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e02:	2307      	movs	r3, #7
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4811      	ldr	r0, [pc, #68]	; (8004e54 <HAL_UART_MspInit+0x294>)
 8004e0e:	f001 fd95 	bl	800693c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e12:	2200      	movs	r2, #0
 8004e14:	2100      	movs	r1, #0
 8004e16:	2025      	movs	r0, #37	; 0x25
 8004e18:	f001 f957 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e1c:	2025      	movs	r0, #37	; 0x25
 8004e1e:	f001 f970 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8004e22:	bf00      	nop
 8004e24:	3738      	adds	r7, #56	; 0x38
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40004c00 	.word	0x40004c00
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40020800 	.word	0x40020800
 8004e38:	40005000 	.word	0x40005000
 8004e3c:	40020c00 	.word	0x40020c00
 8004e40:	20000474 	.word	0x20000474
 8004e44:	40026010 	.word	0x40026010
 8004e48:	200004d4 	.word	0x200004d4
 8004e4c:	400260b8 	.word	0x400260b8
 8004e50:	40011000 	.word	0x40011000
 8004e54:	40020000 	.word	0x40020000

08004e58 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <SDTimer_Handler+0x40>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d006      	beq.n	8004e74 <SDTimer_Handler+0x1c>
    Timer1--;
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <SDTimer_Handler+0x40>)
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <SDTimer_Handler+0x40>)
 8004e72:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <SDTimer_Handler+0x44>)
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <SDTimer_Handler+0x34>
    Timer2--;
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <SDTimer_Handler+0x44>)
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <SDTimer_Handler+0x44>)
 8004e8a:	801a      	strh	r2, [r3, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	2000280c 	.word	0x2000280c
 8004e9c:	2000280e 	.word	0x2000280e

08004ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ea4:	e7fe      	b.n	8004ea4 <NMI_Handler+0x4>

08004ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eaa:	e7fe      	b.n	8004eaa <HardFault_Handler+0x4>

08004eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004eb0:	e7fe      	b.n	8004eb0 <MemManage_Handler+0x4>

08004eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004eb6:	e7fe      	b.n	8004eb6 <BusFault_Handler+0x4>

08004eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ebc:	e7fe      	b.n	8004ebc <UsageFault_Handler+0x4>

08004ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <SysTick_Handler+0x44>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <SysTick_Handler+0x44>)
 8004ef8:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <SysTick_Handler+0x44>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	d904      	bls.n	8004f0e <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <SysTick_Handler+0x44>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8004f0a:	f7ff ffa5 	bl	8004e58 <SDTimer_Handler>
		  }

if(timeout >0) timeout--;
 8004f0e:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <SysTick_Handler+0x48>)
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <SysTick_Handler+0x3a>
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <SysTick_Handler+0x48>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <SysTick_Handler+0x48>)
 8004f20:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f22:	f000 fb91 	bl	8005648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2000280a 	.word	0x2000280a
 8004f30:	20002858 	.word	0x20002858

08004f34 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <DMA1_Stream0_IRQHandler+0x10>)
 8004f4a:	f001 fa8d 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000474 	.word	0x20000474

08004f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8004f5c:	4803      	ldr	r0, [pc, #12]	; (8004f6c <USART1_IRQHandler+0x14>)
 8004f5e:	f000 fa99 	bl	8005494 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f62:	4802      	ldr	r0, [pc, #8]	; (8004f6c <USART1_IRQHandler+0x14>)
 8004f64:	f004 fe96 	bl	8009c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20002814 	.word	0x20002814

08004f70 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004f74:	4802      	ldr	r0, [pc, #8]	; (8004f80 <DMA1_Stream7_IRQHandler+0x10>)
 8004f76:	f001 fa77 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200004d4 	.word	0x200004d4

08004f84 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <UART5_IRQHandler+0x10>)
 8004f8a:	f004 fe83 	bl	8009c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000430 	.word	0x20000430

08004f98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <DMA2_Stream0_IRQHandler+0x10>)
 8004f9e:	f001 fa63 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000198 	.word	0x20000198

08004fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	return 1;
 8004fb0:	2301      	movs	r3, #1
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <_kill>:

int _kill(int pid, int sig)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fc6:	f009 fb33 	bl	800e630 <__errno>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2216      	movs	r2, #22
 8004fce:	601a      	str	r2, [r3, #0]
	return -1;
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <_exit>:

void _exit (int status)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ffe7 	bl	8004fbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fee:	e7fe      	b.n	8004fee <_exit+0x12>

08004ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e00a      	b.n	8005018 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005002:	f3af 8000 	nop.w
 8005006:	4601      	mov	r1, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	60ba      	str	r2, [r7, #8]
 800500e:	b2ca      	uxtb	r2, r1
 8005010:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3301      	adds	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	dbf0      	blt.n	8005002 <_read+0x12>
	}

return len;
 8005020:	687b      	ldr	r3, [r7, #4]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_close>:
	}
	return len;
}

int _close(int file)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
	return -1;
 8005032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005052:	605a      	str	r2, [r3, #4]
	return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <_isatty>:

int _isatty(int file)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
	return 1;
 800506a:	2301      	movs	r3, #1
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
	return 0;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800509c:	4a14      	ldr	r2, [pc, #80]	; (80050f0 <_sbrk+0x5c>)
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <_sbrk+0x60>)
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050a8:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <_sbrk+0x64>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <_sbrk+0x64>)
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <_sbrk+0x68>)
 80050b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <_sbrk+0x64>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d207      	bcs.n	80050d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050c4:	f009 fab4 	bl	800e630 <__errno>
 80050c8:	4603      	mov	r3, r0
 80050ca:	220c      	movs	r2, #12
 80050cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	e009      	b.n	80050e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <_sbrk+0x64>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <_sbrk+0x64>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <_sbrk+0x64>)
 80050e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20020000 	.word	0x20020000
 80050f4:	00000800 	.word	0x00000800
 80050f8:	20002810 	.word	0x20002810
 80050fc:	20003000 	.word	0x20003000

08005100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <SystemInit+0x20>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <SystemInit+0x20>)
 800510c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <Ringbuf_init+0x3c>)
 800512a:	4a0e      	ldr	r2, [pc, #56]	; (8005164 <Ringbuf_init+0x40>)
 800512c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <Ringbuf_init+0x44>)
 8005130:	4a0e      	ldr	r2, [pc, #56]	; (800516c <Ringbuf_init+0x48>)
 8005132:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <Ringbuf_init+0x4c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <Ringbuf_init+0x4c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <Ringbuf_init+0x4c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	4b09      	ldr	r3, [pc, #36]	; (8005170 <Ringbuf_init+0x4c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0220 	orr.w	r2, r2, #32
 8005152:	60da      	str	r2, [r3, #12]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20002c6c 	.word	0x20002c6c
 8005164:	2000285c 	.word	0x2000285c
 8005168:	20002c70 	.word	0x20002c70
 800516c:	20002a64 	.word	0x20002a64
 8005170:	20002814 	.word	0x20002814

08005174 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	6039      	str	r1, [r7, #0]
 800517e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	429a      	cmp	r2, r3
 8005198:	d009      	beq.n	80051ae <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	79f9      	ldrb	r1, [r7, #7]
 80051a4:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80051c2:	4b13      	ldr	r3, [pc, #76]	; (8005210 <Uart_read+0x54>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <Uart_read+0x54>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d102      	bne.n	80051dc <Uart_read+0x20>
  {
    return -1;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e013      	b.n	8005204 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <Uart_read+0x54>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <Uart_read+0x54>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051e8:	5cd3      	ldrb	r3, [r2, r3]
 80051ea:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <Uart_read+0x54>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <Uart_read+0x54>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8005202:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20002c6c 	.word	0x20002c6c

08005214 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <IsDataAvailable+0x30>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005220:	b29a      	uxth	r2, r3
 8005222:	4b08      	ldr	r3, [pc, #32]	; (8005244 <IsDataAvailable+0x30>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800522a:	b29b      	uxth	r3, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	b29b      	uxth	r3, r3
 8005230:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005234:	b29b      	uxth	r3, r3
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800523a:	4618      	mov	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	20002c6c 	.word	0x20002c6c

08005248 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <Uart_peek+0x38>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <Uart_peek+0x38>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800525c:	429a      	cmp	r2, r3
 800525e:	d102      	bne.n	8005266 <Uart_peek+0x1e>
  {
    return -1;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295
 8005264:	e006      	b.n	8005274 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <Uart_peek+0x38>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <Uart_peek+0x38>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005272:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20002c6c 	.word	0x20002c6c

08005284 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fa ffbc 	bl	8000210 <strlen>
 8005298:	4603      	mov	r3, r0
 800529a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80052a0:	e01e      	b.n	80052e0 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80052a2:	4b36      	ldr	r3, [pc, #216]	; (800537c <Copy_upto+0xf8>)
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	4b35      	ldr	r3, [pc, #212]	; (800537c <Copy_upto+0xf8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6838      	ldr	r0, [r7, #0]
 80052b2:	4403      	add	r3, r0
 80052b4:	5c8a      	ldrb	r2, [r1, r2]
 80052b6:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80052b8:	4b30      	ldr	r3, [pc, #192]	; (800537c <Copy_upto+0xf8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	4b2e      	ldr	r3, [pc, #184]	; (800537c <Copy_upto+0xf8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	3301      	adds	r3, #1
 80052d2:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80052d4:	bf00      	nop
 80052d6:	f7ff ff9d 	bl	8005214 <IsDataAvailable>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0fa      	beq.n	80052d6 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80052e0:	f7ff ffb2 	bl	8005248 <Uart_peek>
 80052e4:	4601      	mov	r1, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4413      	add	r3, r2
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	4299      	cmp	r1, r3
 80052f0:	d1d7      	bne.n	80052a2 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80052f2:	e027      	b.n	8005344 <Copy_upto+0xc0>
	{
		so_far++;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3301      	adds	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80052fa:	f7ff ff5f 	bl	80051bc <Uart_read>
 80052fe:	4601      	mov	r1, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	613a      	str	r2, [r7, #16]
 8005306:	461a      	mov	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	4413      	add	r3, r2
 800530c:	b2ca      	uxtb	r2, r1
 800530e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	429a      	cmp	r2, r3
 8005316:	d101      	bne.n	800531c <Copy_upto+0x98>
 8005318:	2301      	movs	r3, #1
 800531a:	e02a      	b.n	8005372 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 800531c:	4b18      	ldr	r3, [pc, #96]	; (8005380 <Copy_upto+0xfc>)
 800531e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005322:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8005324:	bf00      	nop
 8005326:	f7ff ff75 	bl	8005214 <IsDataAvailable>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <Copy_upto+0xb4>
 8005330:	4b13      	ldr	r3, [pc, #76]	; (8005380 <Copy_upto+0xfc>)
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f6      	bne.n	8005326 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <Copy_upto+0xfc>)
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <Copy_upto+0xc0>
 8005340:	2300      	movs	r3, #0
 8005342:	e016      	b.n	8005372 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8005344:	f7ff ff80 	bl	8005248 <Uart_peek>
 8005348:	4601      	mov	r1, r0
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	4299      	cmp	r1, r3
 8005354:	d0ce      	beq.n	80052f4 <Copy_upto+0x70>
	}

	if (so_far != len)
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	429a      	cmp	r2, r3
 800535c:	d002      	beq.n	8005364 <Copy_upto+0xe0>
	{
		so_far = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
		goto again;
 8005362:	e79d      	b.n	80052a0 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	429a      	cmp	r2, r3
 800536a:	d101      	bne.n	8005370 <Copy_upto+0xec>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <Copy_upto+0xee>
	else return 0;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20002c6c 	.word	0x20002c6c
 8005380:	20002858 	.word	0x20002858

08005384 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7fa ff3d 	bl	8000210 <strlen>
 8005396:	4603      	mov	r3, r0
 8005398:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 800539a:	4b3c      	ldr	r3, [pc, #240]	; (800548c <Wait_for+0x108>)
 800539c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80053a0:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80053a2:	bf00      	nop
 80053a4:	f7ff ff36 	bl	8005214 <IsDataAvailable>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <Wait_for+0x32>
 80053ae:	4b37      	ldr	r3, [pc, #220]	; (800548c <Wait_for+0x108>)
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f6      	bne.n	80053a4 <Wait_for+0x20>
	if (timeout == 0) return 0;
 80053b6:	4b35      	ldr	r3, [pc, #212]	; (800548c <Wait_for+0x108>)
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d119      	bne.n	80053f2 <Wait_for+0x6e>
 80053be:	2300      	movs	r3, #0
 80053c0:	e060      	b.n	8005484 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80053c2:	4b33      	ldr	r3, [pc, #204]	; (8005490 <Wait_for+0x10c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <Wait_for+0x10c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d00b      	beq.n	80053ee <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80053d6:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <Wait_for+0x10c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	4b2b      	ldr	r3, [pc, #172]	; (8005490 <Wait_for+0x10c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80053ec:	e001      	b.n	80053f2 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e048      	b.n	8005484 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80053f2:	f7ff ff29 	bl	8005248 <Uart_peek>
 80053f6:	4601      	mov	r1, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	4299      	cmp	r1, r3
 8005402:	d1de      	bne.n	80053c2 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8005404:	e027      	b.n	8005456 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800540c:	4b20      	ldr	r3, [pc, #128]	; (8005490 <Wait_for+0x10c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	4b1e      	ldr	r3, [pc, #120]	; (8005490 <Wait_for+0x10c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800541e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d101      	bne.n	800542e <Wait_for+0xaa>
 800542a:	2301      	movs	r3, #1
 800542c:	e02a      	b.n	8005484 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800542e:	4b17      	ldr	r3, [pc, #92]	; (800548c <Wait_for+0x108>)
 8005430:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005434:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8005436:	bf00      	nop
 8005438:	f7ff feec 	bl	8005214 <IsDataAvailable>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <Wait_for+0xc6>
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <Wait_for+0x108>)
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f6      	bne.n	8005438 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <Wait_for+0x108>)
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <Wait_for+0xd2>
 8005452:	2300      	movs	r3, #0
 8005454:	e016      	b.n	8005484 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8005456:	f7ff fef7 	bl	8005248 <Uart_peek>
 800545a:	4601      	mov	r1, r0
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	4299      	cmp	r1, r3
 8005466:	d0ce      	beq.n	8005406 <Wait_for+0x82>
	}

	if (so_far != len)
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	d002      	beq.n	8005476 <Wait_for+0xf2>
	{
		so_far = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
		goto again;
 8005474:	e791      	b.n	800539a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d101      	bne.n	8005482 <Wait_for+0xfe>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <Wait_for+0x100>
	else return 0;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20002858 	.word	0x20002858
 8005490:	20002c6c 	.word	0x20002c6c

08005494 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d013      	beq.n	80054de <Uart_isr+0x4a>
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00e      	beq.n	80054de <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80054ce:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <Uart_isr+0xb4>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fe4c 	bl	8005174 <store_char>
        return;
 80054dc:	e031      	b.n	8005542 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02c      	beq.n	8005542 <Uart_isr+0xae>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d027      	beq.n	8005542 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <Uart_isr+0xb8>)
 80054f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <Uart_isr+0xb8>)
 80054fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80054fe:	429a      	cmp	r2, r3
 8005500:	d108      	bne.n	8005514 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005510:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8005512:	e015      	b.n	8005540 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <Uart_isr+0xb8>)
 8005516:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800551a:	4a0c      	ldr	r2, [pc, #48]	; (800554c <Uart_isr+0xb8>)
 800551c:	5cd3      	ldrb	r3, [r2, r3]
 800551e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <Uart_isr+0xb8>)
 8005522:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005526:	3301      	adds	r3, #1
 8005528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552c:	4a07      	ldr	r2, [pc, #28]	; (800554c <Uart_isr+0xb8>)
 800552e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	7bba      	ldrb	r2, [r7, #14]
 800553e:	605a      	str	r2, [r3, #4]
    	return;
 8005540:	bf00      	nop
    }
}
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20002c6c 	.word	0x20002c6c
 800554c:	20002a64 	.word	0x20002a64

08005550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005554:	480d      	ldr	r0, [pc, #52]	; (800558c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005556:	490e      	ldr	r1, [pc, #56]	; (8005590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005558:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800555a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800555c:	e002      	b.n	8005564 <LoopCopyDataInit>

0800555e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800555e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005562:	3304      	adds	r3, #4

08005564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005568:	d3f9      	bcc.n	800555e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800556a:	4a0b      	ldr	r2, [pc, #44]	; (8005598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800556c:	4c0b      	ldr	r4, [pc, #44]	; (800559c <LoopFillZerobss+0x26>)
  movs r3, #0
 800556e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005570:	e001      	b.n	8005576 <LoopFillZerobss>

08005572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005574:	3204      	adds	r2, #4

08005576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005578:	d3fb      	bcc.n	8005572 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800557a:	f7ff fdc1 	bl	8005100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800557e:	f009 f85d 	bl	800e63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005582:	f7fd fee1 	bl	8003348 <main>
  bx  lr    
 8005586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800558c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005590:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8005594:	080120d0 	.word	0x080120d0
  ldr r2, =_sbss
 8005598:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800559c:	20003000 	.word	0x20003000

080055a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055a0:	e7fe      	b.n	80055a0 <ADC_IRQHandler>
	...

080055a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_Init+0x40>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <HAL_Init+0x40>)
 80055ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_Init+0x40>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <HAL_Init+0x40>)
 80055ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055c0:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <HAL_Init+0x40>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a07      	ldr	r2, [pc, #28]	; (80055e4 <HAL_Init+0x40>)
 80055c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055cc:	2003      	movs	r0, #3
 80055ce:	f000 fd71 	bl	80060b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055d2:	200f      	movs	r0, #15
 80055d4:	f000 f808 	bl	80055e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055d8:	f7ff f86e 	bl	80046b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40023c00 	.word	0x40023c00

080055e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055f0:	4b12      	ldr	r3, [pc, #72]	; (800563c <HAL_InitTick+0x54>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b12      	ldr	r3, [pc, #72]	; (8005640 <HAL_InitTick+0x58>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	4619      	mov	r1, r3
 80055fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fd89 	bl	800611e <HAL_SYSTICK_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e00e      	b.n	8005634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b0f      	cmp	r3, #15
 800561a:	d80a      	bhi.n	8005632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800561c:	2200      	movs	r2, #0
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	f000 fd51 	bl	80060ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005628:	4a06      	ldr	r2, [pc, #24]	; (8005644 <HAL_InitTick+0x5c>)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	e000      	b.n	8005634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	2000001c 	.word	0x2000001c
 8005640:	20000024 	.word	0x20000024
 8005644:	20000020 	.word	0x20000020

08005648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_IncTick+0x20>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <HAL_IncTick+0x24>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4413      	add	r3, r2
 8005658:	4a04      	ldr	r2, [pc, #16]	; (800566c <HAL_IncTick+0x24>)
 800565a:	6013      	str	r3, [r2, #0]
}
 800565c:	bf00      	nop
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000024 	.word	0x20000024
 800566c:	20002c74 	.word	0x20002c74

08005670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return uwTick;
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <HAL_GetTick+0x14>)
 8005676:	681b      	ldr	r3, [r3, #0]
}
 8005678:	4618      	mov	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20002c74 	.word	0x20002c74

08005688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005690:	f7ff ffee 	bl	8005670 <HAL_GetTick>
 8005694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d005      	beq.n	80056ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <HAL_Delay+0x44>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056ae:	bf00      	nop
 80056b0:	f7ff ffde 	bl	8005670 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d8f7      	bhi.n	80056b0 <HAL_Delay+0x28>
  {
  }
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000024 	.word	0x20000024

080056d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e033      	b.n	800574e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff f810 	bl	8004714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b00      	cmp	r3, #0
 800570c:	d118      	bne.n	8005740 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005716:	f023 0302 	bic.w	r3, r3, #2
 800571a:	f043 0202 	orr.w	r2, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa78 	bl	8005c18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40
 800573e:	e001      	b.n	8005744 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_ADC_Start_DMA+0x1e>
 8005772:	2302      	movs	r3, #2
 8005774:	e0e9      	b.n	800594a <HAL_ADC_Start_DMA+0x1f2>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d018      	beq.n	80057be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800579c:	4b6d      	ldr	r3, [pc, #436]	; (8005954 <HAL_ADC_Start_DMA+0x1fc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6d      	ldr	r2, [pc, #436]	; (8005958 <HAL_ADC_Start_DMA+0x200>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	0c9a      	lsrs	r2, r3, #18
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057b0:	e002      	b.n	80057b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f9      	bne.n	80057b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057cc:	d107      	bne.n	80057de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 80a1 	bne.w	8005930 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005818:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d106      	bne.n	800583c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f023 0206 	bic.w	r2, r3, #6
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	645a      	str	r2, [r3, #68]	; 0x44
 800583a:	e002      	b.n	8005842 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800584a:	4b44      	ldr	r3, [pc, #272]	; (800595c <HAL_ADC_Start_DMA+0x204>)
 800584c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	4a43      	ldr	r2, [pc, #268]	; (8005960 <HAL_ADC_Start_DMA+0x208>)
 8005854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	4a42      	ldr	r2, [pc, #264]	; (8005964 <HAL_ADC_Start_DMA+0x20c>)
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	4a41      	ldr	r2, [pc, #260]	; (8005968 <HAL_ADC_Start_DMA+0x210>)
 8005864:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800586e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800587e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	334c      	adds	r3, #76	; 0x4c
 800589a:	4619      	mov	r1, r3
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f000 fcf8 	bl	8006294 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d12a      	bne.n	8005906 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	; (800596c <HAL_ADC_Start_DMA+0x214>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d015      	beq.n	80058e6 <HAL_ADC_Start_DMA+0x18e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <HAL_ADC_Start_DMA+0x218>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d105      	bne.n	80058d0 <HAL_ADC_Start_DMA+0x178>
 80058c4:	4b25      	ldr	r3, [pc, #148]	; (800595c <HAL_ADC_Start_DMA+0x204>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a27      	ldr	r2, [pc, #156]	; (8005974 <HAL_ADC_Start_DMA+0x21c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d136      	bne.n	8005948 <HAL_ADC_Start_DMA+0x1f0>
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_ADC_Start_DMA+0x204>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d130      	bne.n	8005948 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d129      	bne.n	8005948 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	e020      	b.n	8005948 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a18      	ldr	r2, [pc, #96]	; (800596c <HAL_ADC_Start_DMA+0x214>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d11b      	bne.n	8005948 <HAL_ADC_Start_DMA+0x1f0>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d114      	bne.n	8005948 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800592c:	609a      	str	r2, [r3, #8]
 800592e:	e00b      	b.n	8005948 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f043 0210 	orr.w	r2, r3, #16
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000001c 	.word	0x2000001c
 8005958:	431bde83 	.word	0x431bde83
 800595c:	40012300 	.word	0x40012300
 8005960:	08005e11 	.word	0x08005e11
 8005964:	08005ecb 	.word	0x08005ecb
 8005968:	08005ee7 	.word	0x08005ee7
 800596c:	40012000 	.word	0x40012000
 8005970:	40012100 	.word	0x40012100
 8005974:	40012200 	.word	0x40012200

08005978 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x1c>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e113      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x244>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b09      	cmp	r3, #9
 80059de:	d925      	bls.n	8005a2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68d9      	ldr	r1, [r3, #12]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	3b1e      	subs	r3, #30
 80059f6:	2207      	movs	r2, #7
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	43da      	mvns	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	400a      	ands	r2, r1
 8005a04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68d9      	ldr	r1, [r3, #12]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4618      	mov	r0, r3
 8005a18:	4603      	mov	r3, r0
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4403      	add	r3, r0
 8005a1e:	3b1e      	subs	r3, #30
 8005a20:	409a      	lsls	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	e022      	b.n	8005a72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6919      	ldr	r1, [r3, #16]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	2207      	movs	r2, #7
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	43da      	mvns	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	400a      	ands	r2, r1
 8005a4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6919      	ldr	r1, [r3, #16]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	4618      	mov	r0, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4403      	add	r3, r0
 8005a68:	409a      	lsls	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d824      	bhi.n	8005ac4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	3b05      	subs	r3, #5
 8005a8c:	221f      	movs	r2, #31
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43da      	mvns	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	400a      	ands	r2, r1
 8005a9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3b05      	subs	r3, #5
 8005ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8005ac2:	e04c      	b.n	8005b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	d824      	bhi.n	8005b16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	3b23      	subs	r3, #35	; 0x23
 8005ade:	221f      	movs	r2, #31
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43da      	mvns	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	400a      	ands	r2, r1
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4618      	mov	r0, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	3b23      	subs	r3, #35	; 0x23
 8005b08:	fa00 f203 	lsl.w	r2, r0, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
 8005b14:	e023      	b.n	8005b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	3b41      	subs	r3, #65	; 0x41
 8005b28:	221f      	movs	r2, #31
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	400a      	ands	r2, r1
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4618      	mov	r0, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	3b41      	subs	r3, #65	; 0x41
 8005b52:	fa00 f203 	lsl.w	r2, r0, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b5e:	4b29      	ldr	r3, [pc, #164]	; (8005c04 <HAL_ADC_ConfigChannel+0x250>)
 8005b60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <HAL_ADC_ConfigChannel+0x254>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d10f      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x1d8>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b12      	cmp	r3, #18
 8005b72:	d10b      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <HAL_ADC_ConfigChannel+0x254>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d12b      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x23a>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <HAL_ADC_ConfigChannel+0x258>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <HAL_ADC_ConfigChannel+0x1f4>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b11      	cmp	r3, #17
 8005ba6:	d122      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a11      	ldr	r2, [pc, #68]	; (8005c0c <HAL_ADC_ConfigChannel+0x258>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d111      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bca:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_ADC_ConfigChannel+0x25c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <HAL_ADC_ConfigChannel+0x260>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	0c9a      	lsrs	r2, r3, #18
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005be0:	e002      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f9      	bne.n	8005be2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40012300 	.word	0x40012300
 8005c08:	40012000 	.word	0x40012000
 8005c0c:	10000012 	.word	0x10000012
 8005c10:	2000001c 	.word	0x2000001c
 8005c14:	431bde83 	.word	0x431bde83

08005c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c20:	4b79      	ldr	r3, [pc, #484]	; (8005e08 <ADC_Init+0x1f0>)
 8005c22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6859      	ldr	r1, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	4a58      	ldr	r2, [pc, #352]	; (8005e0c <ADC_Init+0x1f4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	e00f      	b.n	8005d16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0202 	bic.w	r2, r2, #2
 8005d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6899      	ldr	r1, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7e1b      	ldrb	r3, [r3, #24]
 8005d30:	005a      	lsls	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	035a      	lsls	r2, r3, #13
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	e007      	b.n	8005d8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	051a      	lsls	r2, r3, #20
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6899      	ldr	r1, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dce:	025a      	lsls	r2, r3, #9
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6899      	ldr	r1, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	029a      	lsls	r2, r3, #10
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40012300 	.word	0x40012300
 8005e0c:	0f000001 	.word	0x0f000001

08005e10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d13c      	bne.n	8005ea4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d12b      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d127      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d119      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0220 	bic.w	r2, r2, #32
 8005e76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff fd6b 	bl	8005978 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005ea2:	e00e      	b.n	8005ec2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff fd75 	bl	80059a0 <HAL_ADC_ErrorCallback>
}
 8005eb6:	e004      	b.n	8005ec2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff fd57 	bl	800598c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f043 0204 	orr.w	r2, r3, #4
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7ff fd4a 	bl	80059a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <__NVIC_SetPriorityGrouping>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f30:	4013      	ands	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f46:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	60d3      	str	r3, [r2, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <__NVIC_GetPriorityGrouping>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <__NVIC_GetPriorityGrouping+0x18>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f003 0307 	and.w	r3, r3, #7
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <__NVIC_EnableIRQ>:
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db0b      	blt.n	8005fa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	f003 021f 	and.w	r2, r3, #31
 8005f90:	4907      	ldr	r1, [pc, #28]	; (8005fb0 <__NVIC_EnableIRQ+0x38>)
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2001      	movs	r0, #1
 8005f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e100 	.word	0xe000e100

08005fb4 <__NVIC_SetPriority>:
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db0a      	blt.n	8005fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	490c      	ldr	r1, [pc, #48]	; (8006000 <__NVIC_SetPriority+0x4c>)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005fdc:	e00a      	b.n	8005ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4908      	ldr	r1, [pc, #32]	; (8006004 <__NVIC_SetPriority+0x50>)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	3b04      	subs	r3, #4
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	761a      	strb	r2, [r3, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	e000e100 	.word	0xe000e100
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <NVIC_EncodePriority>:
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	; 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf28      	it	cs
 8006026:	2304      	movcs	r3, #4
 8006028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3304      	adds	r3, #4
 800602e:	2b06      	cmp	r3, #6
 8006030:	d902      	bls.n	8006038 <NVIC_EncodePriority+0x30>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3b03      	subs	r3, #3
 8006036:	e000      	b.n	800603a <NVIC_EncodePriority+0x32>
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	401a      	ands	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006050:	f04f 31ff 	mov.w	r1, #4294967295
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	43d9      	mvns	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006060:	4313      	orrs	r3, r2
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	; 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <SysTick_Config>:
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3b01      	subs	r3, #1
 800607c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006080:	d301      	bcc.n	8006086 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006082:	2301      	movs	r3, #1
 8006084:	e00f      	b.n	80060a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <SysTick_Config+0x40>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3b01      	subs	r3, #1
 800608c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800608e:	210f      	movs	r1, #15
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	f7ff ff8e 	bl	8005fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <SysTick_Config+0x40>)
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800609e:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <SysTick_Config+0x40>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	e000e010 	.word	0xe000e010

080060b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff29 	bl	8005f14 <__NVIC_SetPriorityGrouping>
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	4603      	mov	r3, r0
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060dc:	f7ff ff3e 	bl	8005f5c <__NVIC_GetPriorityGrouping>
 80060e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	6978      	ldr	r0, [r7, #20]
 80060e8:	f7ff ff8e 	bl	8006008 <NVIC_EncodePriority>
 80060ec:	4602      	mov	r2, r0
 80060ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff5d 	bl	8005fb4 <__NVIC_SetPriority>
}
 80060fa:	bf00      	nop
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	4603      	mov	r3, r0
 800610a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800610c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff ff31 	bl	8005f78 <__NVIC_EnableIRQ>
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff ffa2 	bl	8006070 <SysTick_Config>
 800612c:	4603      	mov	r3, r0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006144:	f7ff fa94 	bl	8005670 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e099      	b.n	8006288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006174:	e00f      	b.n	8006196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006176:	f7ff fa7b 	bl	8005670 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b05      	cmp	r3, #5
 8006182:	d908      	bls.n	8006196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2203      	movs	r2, #3
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e078      	b.n	8006288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e8      	bne.n	8006176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4b38      	ldr	r3, [pc, #224]	; (8006290 <HAL_DMA_Init+0x158>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d107      	bne.n	8006200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	4313      	orrs	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0307 	bic.w	r3, r3, #7
 8006216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b04      	cmp	r3, #4
 8006228:	d117      	bne.n	800625a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fb01 	bl	8006844 <DMA_CheckFifoParam>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2240      	movs	r2, #64	; 0x40
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006256:	2301      	movs	r3, #1
 8006258:	e016      	b.n	8006288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fab8 	bl	80067d8 <DMA_CalcBaseAndBitshift>
 8006268:	4603      	mov	r3, r0
 800626a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	223f      	movs	r2, #63	; 0x3f
 8006272:	409a      	lsls	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	f010803f 	.word	0xf010803f

08006294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_DMA_Start_IT+0x26>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e040      	b.n	800633c <HAL_DMA_Start_IT+0xa8>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d12f      	bne.n	800632e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fa4a 	bl	800677c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	223f      	movs	r2, #63	; 0x3f
 80062ee:	409a      	lsls	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0216 	orr.w	r2, r2, #22
 8006302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0208 	orr.w	r2, r2, #8
 800631a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e005      	b.n	800633a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006352:	f7ff f98d 	bl	8005670 <HAL_GetTick>
 8006356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d008      	beq.n	8006376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e052      	b.n	800641c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0216 	bic.w	r2, r2, #22
 8006384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <HAL_DMA_Abort+0x62>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0208 	bic.w	r2, r2, #8
 80063b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c6:	e013      	b.n	80063f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063c8:	f7ff f952 	bl	8005670 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d90c      	bls.n	80063f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2203      	movs	r2, #3
 80063e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e015      	b.n	800641c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e4      	bne.n	80063c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006402:	223f      	movs	r2, #63	; 0x3f
 8006404:	409a      	lsls	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d004      	beq.n	8006442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e00c      	b.n	800645c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2205      	movs	r2, #5
 8006446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006474:	4b8e      	ldr	r3, [pc, #568]	; (80066b0 <HAL_DMA_IRQHandler+0x248>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a8e      	ldr	r2, [pc, #568]	; (80066b4 <HAL_DMA_IRQHandler+0x24c>)
 800647a:	fba2 2303 	umull	r2, r3, r2, r3
 800647e:	0a9b      	lsrs	r3, r3, #10
 8006480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006492:	2208      	movs	r2, #8
 8006494:	409a      	lsls	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01a      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d013      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0204 	bic.w	r2, r2, #4
 80064ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	2208      	movs	r2, #8
 80064c2:	409a      	lsls	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	f043 0201 	orr.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	2201      	movs	r2, #1
 80064da:	409a      	lsls	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f6:	2201      	movs	r2, #1
 80064f8:	409a      	lsls	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f043 0202 	orr.w	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	2204      	movs	r2, #4
 8006510:	409a      	lsls	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652c:	2204      	movs	r2, #4
 800652e:	409a      	lsls	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006544:	2210      	movs	r2, #16
 8006546:	409a      	lsls	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d043      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03c      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	2210      	movs	r2, #16
 8006564:	409a      	lsls	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d018      	beq.n	80065aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d108      	bne.n	8006598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d024      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
 8006596:	e01f      	b.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
 80065a8:	e016      	b.n	80065d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0208 	bic.w	r2, r2, #8
 80065c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	2220      	movs	r2, #32
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 808f 	beq.w	8006708 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8087 	beq.w	8006708 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	2220      	movs	r2, #32
 8006600:	409a      	lsls	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b05      	cmp	r3, #5
 8006610:	d136      	bne.n	8006680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0216 	bic.w	r2, r2, #22
 8006620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_DMA_IRQHandler+0x1da>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0208 	bic.w	r2, r2, #8
 8006650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006656:	223f      	movs	r2, #63	; 0x3f
 8006658:	409a      	lsls	r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006672:	2b00      	cmp	r3, #0
 8006674:	d07e      	beq.n	8006774 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
        }
        return;
 800667e:	e079      	b.n	8006774 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10d      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d031      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	e02c      	b.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
 80066ae:	bf00      	nop
 80066b0:	2000001c 	.word	0x2000001c
 80066b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d023      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	e01e      	b.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10f      	bne.n	80066f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0210 	bic.w	r2, r2, #16
 80066e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	2b00      	cmp	r3, #0
 800670e:	d032      	beq.n	8006776 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d022      	beq.n	8006762 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2205      	movs	r2, #5
 8006720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	3301      	adds	r3, #1
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	429a      	cmp	r2, r3
 800673e:	d307      	bcc.n	8006750 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f2      	bne.n	8006734 <HAL_DMA_IRQHandler+0x2cc>
 800674e:	e000      	b.n	8006752 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006750:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
 8006772:	e000      	b.n	8006776 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006774:	bf00      	nop
    }
  }
}
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006798:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b40      	cmp	r3, #64	; 0x40
 80067a8:	d108      	bne.n	80067bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067ba:	e007      	b.n	80067cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	3b10      	subs	r3, #16
 80067e8:	4a14      	ldr	r2, [pc, #80]	; (800683c <DMA_CalcBaseAndBitshift+0x64>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067f2:	4a13      	ldr	r2, [pc, #76]	; (8006840 <DMA_CalcBaseAndBitshift+0x68>)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b03      	cmp	r3, #3
 8006804:	d909      	bls.n	800681a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	1d1a      	adds	r2, r3, #4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	659a      	str	r2, [r3, #88]	; 0x58
 8006818:	e007      	b.n	800682a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	aaaaaaab 	.word	0xaaaaaaab
 8006840:	080118e8 	.word	0x080118e8

08006844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11f      	bne.n	800689e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b03      	cmp	r3, #3
 8006862:	d856      	bhi.n	8006912 <DMA_CheckFifoParam+0xce>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <DMA_CheckFifoParam+0x28>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	0800687d 	.word	0x0800687d
 8006870:	0800688f 	.word	0x0800688f
 8006874:	0800687d 	.word	0x0800687d
 8006878:	08006913 	.word	0x08006913
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d046      	beq.n	8006916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800688c:	e043      	b.n	8006916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006896:	d140      	bne.n	800691a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800689c:	e03d      	b.n	800691a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a6:	d121      	bne.n	80068ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d837      	bhi.n	800691e <DMA_CheckFifoParam+0xda>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <DMA_CheckFifoParam+0x70>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	080068cb 	.word	0x080068cb
 80068bc:	080068c5 	.word	0x080068c5
 80068c0:	080068dd 	.word	0x080068dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e030      	b.n	800692c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d025      	beq.n	8006922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068da:	e022      	b.n	8006922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068e4:	d11f      	bne.n	8006926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068ea:	e01c      	b.n	8006926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d903      	bls.n	80068fa <DMA_CheckFifoParam+0xb6>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d003      	beq.n	8006900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068f8:	e018      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
      break;
 80068fe:	e015      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00e      	beq.n	800692a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	e00b      	b.n	800692a <DMA_CheckFifoParam+0xe6>
      break;
 8006912:	bf00      	nop
 8006914:	e00a      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 8006916:	bf00      	nop
 8006918:	e008      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 800691a:	bf00      	nop
 800691c:	e006      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;   
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 800692a:	bf00      	nop
    }
  } 
  
  return status; 
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop

0800693c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	; 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e165      	b.n	8006c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006958:	2201      	movs	r2, #1
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	429a      	cmp	r2, r3
 8006972:	f040 8154 	bne.w	8006c1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b01      	cmp	r3, #1
 8006980:	d005      	beq.n	800698e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800698a:	2b02      	cmp	r3, #2
 800698c:	d130      	bne.n	80069f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	2203      	movs	r2, #3
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4013      	ands	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069c4:	2201      	movs	r2, #1
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	4013      	ands	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 0201 	and.w	r2, r3, #1
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d017      	beq.n	8006a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	2203      	movs	r2, #3
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4013      	ands	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d123      	bne.n	8006a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	08da      	lsrs	r2, r3, #3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3208      	adds	r2, #8
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	220f      	movs	r2, #15
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	08da      	lsrs	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3208      	adds	r2, #8
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 0203 	and.w	r2, r3, #3
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 80ae 	beq.w	8006c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4b5d      	ldr	r3, [pc, #372]	; (8006c3c <HAL_GPIO_Init+0x300>)
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aca:	4a5c      	ldr	r2, [pc, #368]	; (8006c3c <HAL_GPIO_Init+0x300>)
 8006acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ad2:	4b5a      	ldr	r3, [pc, #360]	; (8006c3c <HAL_GPIO_Init+0x300>)
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ade:	4a58      	ldr	r2, [pc, #352]	; (8006c40 <HAL_GPIO_Init+0x304>)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	220f      	movs	r2, #15
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a4f      	ldr	r2, [pc, #316]	; (8006c44 <HAL_GPIO_Init+0x308>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d025      	beq.n	8006b56 <HAL_GPIO_Init+0x21a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a4e      	ldr	r2, [pc, #312]	; (8006c48 <HAL_GPIO_Init+0x30c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01f      	beq.n	8006b52 <HAL_GPIO_Init+0x216>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a4d      	ldr	r2, [pc, #308]	; (8006c4c <HAL_GPIO_Init+0x310>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d019      	beq.n	8006b4e <HAL_GPIO_Init+0x212>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a4c      	ldr	r2, [pc, #304]	; (8006c50 <HAL_GPIO_Init+0x314>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_GPIO_Init+0x20e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a4b      	ldr	r2, [pc, #300]	; (8006c54 <HAL_GPIO_Init+0x318>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00d      	beq.n	8006b46 <HAL_GPIO_Init+0x20a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a4a      	ldr	r2, [pc, #296]	; (8006c58 <HAL_GPIO_Init+0x31c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <HAL_GPIO_Init+0x206>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a49      	ldr	r2, [pc, #292]	; (8006c5c <HAL_GPIO_Init+0x320>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d101      	bne.n	8006b3e <HAL_GPIO_Init+0x202>
 8006b3a:	2306      	movs	r3, #6
 8006b3c:	e00c      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b3e:	2307      	movs	r3, #7
 8006b40:	e00a      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b42:	2305      	movs	r3, #5
 8006b44:	e008      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b46:	2304      	movs	r3, #4
 8006b48:	e006      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e004      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e002      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b56:	2300      	movs	r3, #0
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	f002 0203 	and.w	r2, r2, #3
 8006b5e:	0092      	lsls	r2, r2, #2
 8006b60:	4093      	lsls	r3, r2
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b68:	4935      	ldr	r1, [pc, #212]	; (8006c40 <HAL_GPIO_Init+0x304>)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	3302      	adds	r3, #2
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b76:	4b3a      	ldr	r3, [pc, #232]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b9a:	4a31      	ldr	r2, [pc, #196]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ba0:	4b2f      	ldr	r3, [pc, #188]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bc4:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bca:	4b25      	ldr	r3, [pc, #148]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bee:	4a1c      	ldr	r2, [pc, #112]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bf4:	4b1a      	ldr	r3, [pc, #104]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4013      	ands	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c18:	4a11      	ldr	r2, [pc, #68]	; (8006c60 <HAL_GPIO_Init+0x324>)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	f67f ae96 	bls.w	8006958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3724      	adds	r7, #36	; 0x24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40013800 	.word	0x40013800
 8006c44:	40020000 	.word	0x40020000
 8006c48:	40020400 	.word	0x40020400
 8006c4c:	40020800 	.word	0x40020800
 8006c50:	40020c00 	.word	0x40020c00
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40021400 	.word	0x40021400
 8006c5c:	40021800 	.word	0x40021800
 8006c60:	40013c00 	.word	0x40013c00

08006c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	887b      	ldrh	r3, [r7, #2]
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	e001      	b.n	8006c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	807b      	strh	r3, [r7, #2]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ca4:	787b      	ldrb	r3, [r7, #1]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006caa:	887a      	ldrh	r2, [r7, #2]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006cb0:	e003      	b.n	8006cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cb2:	887b      	ldrh	r3, [r7, #2]
 8006cb4:	041a      	lsls	r2, r3, #16
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	619a      	str	r2, [r3, #24]
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e12b      	b.n	8006f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fd fda4 	bl	800483c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2224      	movs	r2, #36	; 0x24
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d2c:	f001 f8ce 	bl	8007ecc <HAL_RCC_GetPCLK1Freq>
 8006d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4a81      	ldr	r2, [pc, #516]	; (8006f3c <HAL_I2C_Init+0x274>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d807      	bhi.n	8006d4c <HAL_I2C_Init+0x84>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a80      	ldr	r2, [pc, #512]	; (8006f40 <HAL_I2C_Init+0x278>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bf94      	ite	ls
 8006d44:	2301      	movls	r3, #1
 8006d46:	2300      	movhi	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	e006      	b.n	8006d5a <HAL_I2C_Init+0x92>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a7d      	ldr	r2, [pc, #500]	; (8006f44 <HAL_I2C_Init+0x27c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	bf94      	ite	ls
 8006d54:	2301      	movls	r3, #1
 8006d56:	2300      	movhi	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0e7      	b.n	8006f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a78      	ldr	r2, [pc, #480]	; (8006f48 <HAL_I2C_Init+0x280>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	0c9b      	lsrs	r3, r3, #18
 8006d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a6a      	ldr	r2, [pc, #424]	; (8006f3c <HAL_I2C_Init+0x274>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d802      	bhi.n	8006d9c <HAL_I2C_Init+0xd4>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	e009      	b.n	8006db0 <HAL_I2C_Init+0xe8>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	4a69      	ldr	r2, [pc, #420]	; (8006f4c <HAL_I2C_Init+0x284>)
 8006da8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dac:	099b      	lsrs	r3, r3, #6
 8006dae:	3301      	adds	r3, #1
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	430b      	orrs	r3, r1
 8006db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	495c      	ldr	r1, [pc, #368]	; (8006f3c <HAL_I2C_Init+0x274>)
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	d819      	bhi.n	8006e04 <HAL_I2C_Init+0x13c>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	1e59      	subs	r1, r3, #1
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dde:	1c59      	adds	r1, r3, #1
 8006de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006de4:	400b      	ands	r3, r1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <HAL_I2C_Init+0x138>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	1e59      	subs	r1, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006df8:	3301      	adds	r3, #1
 8006dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfe:	e051      	b.n	8006ea4 <HAL_I2C_Init+0x1dc>
 8006e00:	2304      	movs	r3, #4
 8006e02:	e04f      	b.n	8006ea4 <HAL_I2C_Init+0x1dc>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d111      	bne.n	8006e30 <HAL_I2C_Init+0x168>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	1e58      	subs	r0, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6859      	ldr	r1, [r3, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	440b      	add	r3, r1
 8006e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e1e:	3301      	adds	r3, #1
 8006e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf0c      	ite	eq
 8006e28:	2301      	moveq	r3, #1
 8006e2a:	2300      	movne	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	e012      	b.n	8006e56 <HAL_I2C_Init+0x18e>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	1e58      	subs	r0, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6859      	ldr	r1, [r3, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	0099      	lsls	r1, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e46:	3301      	adds	r3, #1
 8006e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bf0c      	ite	eq
 8006e50:	2301      	moveq	r3, #1
 8006e52:	2300      	movne	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_I2C_Init+0x196>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e022      	b.n	8006ea4 <HAL_I2C_Init+0x1dc>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10e      	bne.n	8006e84 <HAL_I2C_Init+0x1bc>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1e58      	subs	r0, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6859      	ldr	r1, [r3, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	440b      	add	r3, r1
 8006e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	e00f      	b.n	8006ea4 <HAL_I2C_Init+0x1dc>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	1e58      	subs	r0, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6859      	ldr	r1, [r3, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	0099      	lsls	r1, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	6809      	ldr	r1, [r1, #0]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69da      	ldr	r2, [r3, #28]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6911      	ldr	r1, [r2, #16]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68d2      	ldr	r2, [r2, #12]
 8006ede:	4311      	orrs	r1, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695a      	ldr	r2, [r3, #20]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	000186a0 	.word	0x000186a0
 8006f40:	001e847f 	.word	0x001e847f
 8006f44:	003d08ff 	.word	0x003d08ff
 8006f48:	431bde83 	.word	0x431bde83
 8006f4c:	10624dd3 	.word	0x10624dd3

08006f50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	817b      	strh	r3, [r7, #10]
 8006f62:	460b      	mov	r3, r1
 8006f64:	813b      	strh	r3, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f6a:	f7fe fb81 	bl	8005670 <HAL_GetTick>
 8006f6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	f040 80d9 	bne.w	8007130 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	2319      	movs	r3, #25
 8006f84:	2201      	movs	r2, #1
 8006f86:	496d      	ldr	r1, [pc, #436]	; (800713c <HAL_I2C_Mem_Write+0x1ec>)
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fc7f 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
 8006f96:	e0cc      	b.n	8007132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_I2C_Mem_Write+0x56>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e0c5      	b.n	8007132 <HAL_I2C_Mem_Write+0x1e2>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d007      	beq.n	8006fcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2221      	movs	r2, #33	; 0x21
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2240      	movs	r2, #64	; 0x40
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a4d      	ldr	r2, [pc, #308]	; (8007140 <HAL_I2C_Mem_Write+0x1f0>)
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800700e:	88f8      	ldrh	r0, [r7, #6]
 8007010:	893a      	ldrh	r2, [r7, #8]
 8007012:	8979      	ldrh	r1, [r7, #10]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	4603      	mov	r3, r0
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 fab6 	bl	8007590 <I2C_RequestMemoryWrite>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d052      	beq.n	80070d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e081      	b.n	8007132 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fd00 	bl	8007a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00d      	beq.n	800705a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	2b04      	cmp	r3, #4
 8007044:	d107      	bne.n	8007056 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e06b      	b.n	8007132 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b01      	subs	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d11b      	bne.n	80070d0 <HAL_I2C_Mem_Write+0x180>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709c:	2b00      	cmp	r3, #0
 800709e:	d017      	beq.n	80070d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1aa      	bne.n	800702e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fcec 	bl	8007aba <I2C_WaitOnBTFFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00d      	beq.n	8007104 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d107      	bne.n	8007100 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e016      	b.n	8007132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	e000      	b.n	8007132 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007130:	2302      	movs	r3, #2
  }
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	00100002 	.word	0x00100002
 8007140:	ffff0000 	.word	0xffff0000

08007144 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08c      	sub	sp, #48	; 0x30
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4603      	mov	r3, r0
 8007154:	817b      	strh	r3, [r7, #10]
 8007156:	460b      	mov	r3, r1
 8007158:	813b      	strh	r3, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800715e:	f7fe fa87 	bl	8005670 <HAL_GetTick>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b20      	cmp	r3, #32
 800716e:	f040 8208 	bne.w	8007582 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	2319      	movs	r3, #25
 8007178:	2201      	movs	r2, #1
 800717a:	497b      	ldr	r1, [pc, #492]	; (8007368 <HAL_I2C_Mem_Read+0x224>)
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fb85 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
 800718a:	e1fb      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_I2C_Mem_Read+0x56>
 8007196:	2302      	movs	r3, #2
 8007198:	e1f4      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d007      	beq.n	80071c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2222      	movs	r2, #34	; 0x22
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2240      	movs	r2, #64	; 0x40
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80071f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4a5b      	ldr	r2, [pc, #364]	; (800736c <HAL_I2C_Mem_Read+0x228>)
 8007200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007202:	88f8      	ldrh	r0, [r7, #6]
 8007204:	893a      	ldrh	r2, [r7, #8]
 8007206:	8979      	ldrh	r1, [r7, #10]
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	4603      	mov	r3, r0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fa52 	bl	80076bc <I2C_RequestMemoryRead>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e1b0      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d113      	bne.n	8007252 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	623b      	str	r3, [r7, #32]
 800723e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e184      	b.n	800755c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007256:	2b01      	cmp	r3, #1
 8007258:	d11b      	bne.n	8007292 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	61fb      	str	r3, [r7, #28]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e164      	b.n	800755c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007296:	2b02      	cmp	r3, #2
 8007298:	d11b      	bne.n	80072d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ba:	2300      	movs	r3, #0
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	e144      	b.n	800755c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072e8:	e138      	b.n	800755c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	f200 80f1 	bhi.w	80074d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d123      	bne.n	8007344 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fc1b 	bl	8007b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e139      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007342:	e10b      	b.n	800755c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007348:	2b02      	cmp	r3, #2
 800734a:	d14e      	bne.n	80073ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	2200      	movs	r2, #0
 8007354:	4906      	ldr	r1, [pc, #24]	; (8007370 <HAL_I2C_Mem_Read+0x22c>)
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 fa98 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e10e      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
 8007366:	bf00      	nop
 8007368:	00100002 	.word	0x00100002
 800736c:	ffff0000 	.word	0xffff0000
 8007370:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073e8:	e0b8      	b.n	800755c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	2200      	movs	r2, #0
 80073f2:	4966      	ldr	r1, [pc, #408]	; (800758c <HAL_I2C_Mem_Read+0x448>)
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 fa49 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e0bf      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	2200      	movs	r2, #0
 800744e:	494f      	ldr	r1, [pc, #316]	; (800758c <HAL_I2C_Mem_Read+0x448>)
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 fa1b 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e091      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800746e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074d4:	e042      	b.n	800755c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fb2e 	bl	8007b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e04c      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007512:	b29b      	uxth	r3, r3
 8007514:	3b01      	subs	r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b04      	cmp	r3, #4
 8007528:	d118      	bne.n	800755c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007560:	2b00      	cmp	r3, #0
 8007562:	f47f aec2 	bne.w	80072ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e000      	b.n	8007584 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007582:	2302      	movs	r3, #2
  }
}
 8007584:	4618      	mov	r0, r3
 8007586:	3728      	adds	r7, #40	; 0x28
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	00010004 	.word	0x00010004

08007590 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	817b      	strh	r3, [r7, #10]
 80075a2:	460b      	mov	r3, r1
 80075a4:	813b      	strh	r3, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f960 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00d      	beq.n	80075ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e0:	d103      	bne.n	80075ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e05f      	b.n	80076ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075ee:	897b      	ldrh	r3, [r7, #10]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	6a3a      	ldr	r2, [r7, #32]
 8007602:	492d      	ldr	r1, [pc, #180]	; (80076b8 <I2C_RequestMemoryWrite+0x128>)
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f998 	bl	800793a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e04c      	b.n	80076ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800762a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762c:	6a39      	ldr	r1, [r7, #32]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fa02 	bl	8007a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00d      	beq.n	8007656 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	2b04      	cmp	r3, #4
 8007640:	d107      	bne.n	8007652 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e02b      	b.n	80076ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d105      	bne.n	8007668 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800765c:	893b      	ldrh	r3, [r7, #8]
 800765e:	b2da      	uxtb	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	611a      	str	r2, [r3, #16]
 8007666:	e021      	b.n	80076ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007668:	893b      	ldrh	r3, [r7, #8]
 800766a:	0a1b      	lsrs	r3, r3, #8
 800766c:	b29b      	uxth	r3, r3
 800766e:	b2da      	uxtb	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007678:	6a39      	ldr	r1, [r7, #32]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f9dc 	bl	8007a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00d      	beq.n	80076a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b04      	cmp	r3, #4
 800768c:	d107      	bne.n	800769e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e005      	b.n	80076ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076a2:	893b      	ldrh	r3, [r7, #8]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	00010002 	.word	0x00010002

080076bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	4608      	mov	r0, r1
 80076c6:	4611      	mov	r1, r2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	817b      	strh	r3, [r7, #10]
 80076ce:	460b      	mov	r3, r1
 80076d0:	813b      	strh	r3, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f8c2 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800771c:	d103      	bne.n	8007726 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e0aa      	b.n	8007880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800772a:	897b      	ldrh	r3, [r7, #10]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007738:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	6a3a      	ldr	r2, [r7, #32]
 800773e:	4952      	ldr	r1, [pc, #328]	; (8007888 <I2C_RequestMemoryRead+0x1cc>)
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f8fa 	bl	800793a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e097      	b.n	8007880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007768:	6a39      	ldr	r1, [r7, #32]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f964 	bl	8007a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00d      	beq.n	8007792 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	2b04      	cmp	r3, #4
 800777c:	d107      	bne.n	800778e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800778c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e076      	b.n	8007880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d105      	bne.n	80077a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	611a      	str	r2, [r3, #16]
 80077a2:	e021      	b.n	80077e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077a4:	893b      	ldrh	r3, [r7, #8]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b4:	6a39      	ldr	r1, [r7, #32]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f93e 	bl	8007a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00d      	beq.n	80077de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d107      	bne.n	80077da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e050      	b.n	8007880 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077de:	893b      	ldrh	r3, [r7, #8]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	6a39      	ldr	r1, [r7, #32]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f923 	bl	8007a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00d      	beq.n	8007814 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d107      	bne.n	8007810 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800780e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e035      	b.n	8007880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007822:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	2200      	movs	r2, #0
 800782c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f82b 	bl	800788c <I2C_WaitOnFlagUntilTimeout>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00d      	beq.n	8007858 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784a:	d103      	bne.n	8007854 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007852:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e013      	b.n	8007880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007858:	897b      	ldrh	r3, [r7, #10]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	f043 0301 	orr.w	r3, r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	6a3a      	ldr	r2, [r7, #32]
 800786c:	4906      	ldr	r1, [pc, #24]	; (8007888 <I2C_RequestMemoryRead+0x1cc>)
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f863 	bl	800793a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	00010002 	.word	0x00010002

0800788c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	4613      	mov	r3, r2
 800789a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800789c:	e025      	b.n	80078ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a4:	d021      	beq.n	80078ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a6:	f7fd fee3 	bl	8005670 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d302      	bcc.n	80078bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d116      	bne.n	80078ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f043 0220 	orr.w	r2, r3, #32
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e023      	b.n	8007932 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	0c1b      	lsrs	r3, r3, #16
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d10d      	bne.n	8007910 <I2C_WaitOnFlagUntilTimeout+0x84>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	43da      	mvns	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4013      	ands	r3, r2
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	bf0c      	ite	eq
 8007906:	2301      	moveq	r3, #1
 8007908:	2300      	movne	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	e00c      	b.n	800792a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	43da      	mvns	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4013      	ands	r3, r2
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	bf0c      	ite	eq
 8007922:	2301      	moveq	r3, #1
 8007924:	2300      	movne	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	429a      	cmp	r2, r3
 800792e:	d0b6      	beq.n	800789e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
 8007946:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007948:	e051      	b.n	80079ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007958:	d123      	bne.n	80079a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007968:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007972:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	f043 0204 	orr.w	r2, r3, #4
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e046      	b.n	8007a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d021      	beq.n	80079ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079aa:	f7fd fe61 	bl	8005670 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d302      	bcc.n	80079c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d116      	bne.n	80079ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f043 0220 	orr.w	r2, r3, #32
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e020      	b.n	8007a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d10c      	bne.n	8007a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	43da      	mvns	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4013      	ands	r3, r2
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bf14      	ite	ne
 8007a0a:	2301      	movne	r3, #1
 8007a0c:	2300      	moveq	r3, #0
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	e00b      	b.n	8007a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	43da      	mvns	r2, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bf14      	ite	ne
 8007a24:	2301      	movne	r3, #1
 8007a26:	2300      	moveq	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d18d      	bne.n	800794a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a44:	e02d      	b.n	8007aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f8ce 	bl	8007be8 <I2C_IsAcknowledgeFailed>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e02d      	b.n	8007ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d021      	beq.n	8007aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5e:	f7fd fe07 	bl	8005670 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d302      	bcc.n	8007a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d116      	bne.n	8007aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f043 0220 	orr.w	r2, r3, #32
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e007      	b.n	8007ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d1ca      	bne.n	8007a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ac6:	e02d      	b.n	8007b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f88d 	bl	8007be8 <I2C_IsAcknowledgeFailed>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e02d      	b.n	8007b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ade:	d021      	beq.n	8007b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae0:	f7fd fdc6 	bl	8005670 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d302      	bcc.n	8007af6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d116      	bne.n	8007b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	f043 0220 	orr.w	r2, r3, #32
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e007      	b.n	8007b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d1ca      	bne.n	8007ac8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b48:	e042      	b.n	8007bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d119      	bne.n	8007b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0210 	mvn.w	r2, #16
 8007b60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e029      	b.n	8007be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8c:	f7fd fd70 	bl	8005670 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d302      	bcc.n	8007ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d116      	bne.n	8007bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	f043 0220 	orr.w	r2, r3, #32
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e007      	b.n	8007be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b40      	cmp	r3, #64	; 0x40
 8007bdc:	d1b5      	bne.n	8007b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfe:	d11b      	bne.n	8007c38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	f043 0204 	orr.w	r2, r3, #4
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c52:	2300      	movs	r3, #0
 8007c54:	603b      	str	r3, [r7, #0]
 8007c56:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	4a1f      	ldr	r2, [pc, #124]	; (8007cd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c60:	6413      	str	r3, [r2, #64]	; 0x40
 8007c62:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c6e:	4b1b      	ldr	r3, [pc, #108]	; (8007cdc <HAL_PWREx_EnableOverDrive+0x94>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c74:	f7fd fcfc 	bl	8005670 <HAL_GetTick>
 8007c78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c7a:	e009      	b.n	8007c90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c7c:	f7fd fcf8 	bl	8005670 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c8a:	d901      	bls.n	8007c90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e01f      	b.n	8007cd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c90:	4b13      	ldr	r3, [pc, #76]	; (8007ce0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c9c:	d1ee      	bne.n	8007c7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ca4:	f7fd fce4 	bl	8005670 <HAL_GetTick>
 8007ca8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007caa:	e009      	b.n	8007cc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007cac:	f7fd fce0 	bl	8005670 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cba:	d901      	bls.n	8007cc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e007      	b.n	8007cd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ccc:	d1ee      	bne.n	8007cac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40023800 	.word	0x40023800
 8007cdc:	420e0040 	.word	0x420e0040
 8007ce0:	40007000 	.word	0x40007000
 8007ce4:	420e0044 	.word	0x420e0044

08007ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0cc      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cfc:	4b68      	ldr	r3, [pc, #416]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d90c      	bls.n	8007d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0a:	4b65      	ldr	r3, [pc, #404]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b63      	ldr	r3, [pc, #396]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0b8      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d020      	beq.n	8007d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d3c:	4b59      	ldr	r3, [pc, #356]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4a58      	ldr	r2, [pc, #352]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d54:	4b53      	ldr	r3, [pc, #332]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	4a52      	ldr	r2, [pc, #328]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d60:	4b50      	ldr	r3, [pc, #320]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	494d      	ldr	r1, [pc, #308]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d044      	beq.n	8007e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d107      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d86:	4b47      	ldr	r3, [pc, #284]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d119      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e07f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d003      	beq.n	8007da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d107      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da6:	4b3f      	ldr	r3, [pc, #252]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e06f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db6:	4b3b      	ldr	r3, [pc, #236]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e067      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dc6:	4b37      	ldr	r3, [pc, #220]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f023 0203 	bic.w	r2, r3, #3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	4934      	ldr	r1, [pc, #208]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007dd8:	f7fd fc4a 	bl	8005670 <HAL_GetTick>
 8007ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dde:	e00a      	b.n	8007df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007de0:	f7fd fc46 	bl	8005670 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e04f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df6:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 020c 	and.w	r2, r3, #12
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d1eb      	bne.n	8007de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d20c      	bcs.n	8007e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1e:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d001      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e032      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	4916      	ldr	r1, [pc, #88]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	490e      	ldr	r1, [pc, #56]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e6e:	f000 f855 	bl	8007f1c <HAL_RCC_GetSysClockFreq>
 8007e72:	4602      	mov	r2, r0
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	490a      	ldr	r1, [pc, #40]	; (8007ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8007e80:	5ccb      	ldrb	r3, [r1, r3]
 8007e82:	fa22 f303 	lsr.w	r3, r2, r3
 8007e86:	4a09      	ldr	r2, [pc, #36]	; (8007eac <HAL_RCC_ClockConfig+0x1c4>)
 8007e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fd fbaa 	bl	80055e8 <HAL_InitTick>

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40023c00 	.word	0x40023c00
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	080118d0 	.word	0x080118d0
 8007eac:	2000001c 	.word	0x2000001c
 8007eb0:	20000020 	.word	0x20000020

08007eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007eb8:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007eba:	681b      	ldr	r3, [r3, #0]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	2000001c 	.word	0x2000001c

08007ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ed0:	f7ff fff0 	bl	8007eb4 <HAL_RCC_GetHCLKFreq>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	4b05      	ldr	r3, [pc, #20]	; (8007eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	0a9b      	lsrs	r3, r3, #10
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	4903      	ldr	r1, [pc, #12]	; (8007ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ee2:	5ccb      	ldrb	r3, [r1, r3]
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	080118e0 	.word	0x080118e0

08007ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ef8:	f7ff ffdc 	bl	8007eb4 <HAL_RCC_GetHCLKFreq>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	0b5b      	lsrs	r3, r3, #13
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	4903      	ldr	r1, [pc, #12]	; (8007f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f0a:	5ccb      	ldrb	r3, [r1, r3]
 8007f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40023800 	.word	0x40023800
 8007f18:	080118e0 	.word	0x080118e0

08007f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f20:	b0ae      	sub	sp, #184	; 0xb8
 8007f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f42:	4bcb      	ldr	r3, [pc, #812]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 030c 	and.w	r3, r3, #12
 8007f4a:	2b0c      	cmp	r3, #12
 8007f4c:	f200 8206 	bhi.w	800835c <HAL_RCC_GetSysClockFreq+0x440>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f8d 	.word	0x08007f8d
 8007f5c:	0800835d 	.word	0x0800835d
 8007f60:	0800835d 	.word	0x0800835d
 8007f64:	0800835d 	.word	0x0800835d
 8007f68:	08007f95 	.word	0x08007f95
 8007f6c:	0800835d 	.word	0x0800835d
 8007f70:	0800835d 	.word	0x0800835d
 8007f74:	0800835d 	.word	0x0800835d
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	0800835d 	.word	0x0800835d
 8007f80:	0800835d 	.word	0x0800835d
 8007f84:	0800835d 	.word	0x0800835d
 8007f88:	0800818d 	.word	0x0800818d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f8c:	4bb9      	ldr	r3, [pc, #740]	; (8008274 <HAL_RCC_GetSysClockFreq+0x358>)
 8007f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007f92:	e1e7      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f94:	4bb8      	ldr	r3, [pc, #736]	; (8008278 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007f9a:	e1e3      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f9c:	4bb4      	ldr	r3, [pc, #720]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fa8:	4bb1      	ldr	r3, [pc, #708]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d071      	beq.n	8008098 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fb4:	4bae      	ldr	r3, [pc, #696]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	099b      	lsrs	r3, r3, #6
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	f04f 0000 	mov.w	r0, #0
 8007fe2:	f04f 0100 	mov.w	r1, #0
 8007fe6:	0159      	lsls	r1, r3, #5
 8007fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fec:	0150      	lsls	r0, r2, #5
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	1a51      	subs	r1, r2, r1
 8007ff6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8007ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800800c:	4649      	mov	r1, r9
 800800e:	018b      	lsls	r3, r1, #6
 8008010:	4641      	mov	r1, r8
 8008012:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008016:	4641      	mov	r1, r8
 8008018:	018a      	lsls	r2, r1, #6
 800801a:	4641      	mov	r1, r8
 800801c:	1a51      	subs	r1, r2, r1
 800801e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008020:	4649      	mov	r1, r9
 8008022:	eb63 0301 	sbc.w	r3, r3, r1
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008034:	4649      	mov	r1, r9
 8008036:	00cb      	lsls	r3, r1, #3
 8008038:	4641      	mov	r1, r8
 800803a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800803e:	4641      	mov	r1, r8
 8008040:	00ca      	lsls	r2, r1, #3
 8008042:	4610      	mov	r0, r2
 8008044:	4619      	mov	r1, r3
 8008046:	4603      	mov	r3, r0
 8008048:	4622      	mov	r2, r4
 800804a:	189b      	adds	r3, r3, r2
 800804c:	633b      	str	r3, [r7, #48]	; 0x30
 800804e:	462b      	mov	r3, r5
 8008050:	460a      	mov	r2, r1
 8008052:	eb42 0303 	adc.w	r3, r2, r3
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008064:	4629      	mov	r1, r5
 8008066:	024b      	lsls	r3, r1, #9
 8008068:	4621      	mov	r1, r4
 800806a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800806e:	4621      	mov	r1, r4
 8008070:	024a      	lsls	r2, r1, #9
 8008072:	4610      	mov	r0, r2
 8008074:	4619      	mov	r1, r3
 8008076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800807a:	2200      	movs	r2, #0
 800807c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008084:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008088:	f7f8 fe1e 	bl	8000cc8 <__aeabi_uldivmod>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4613      	mov	r3, r2
 8008092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008096:	e067      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008098:	4b75      	ldr	r3, [pc, #468]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	099b      	lsrs	r3, r3, #6
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80080a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80080b2:	2300      	movs	r3, #0
 80080b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80080ba:	4622      	mov	r2, r4
 80080bc:	462b      	mov	r3, r5
 80080be:	f04f 0000 	mov.w	r0, #0
 80080c2:	f04f 0100 	mov.w	r1, #0
 80080c6:	0159      	lsls	r1, r3, #5
 80080c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080cc:	0150      	lsls	r0, r2, #5
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4621      	mov	r1, r4
 80080d4:	1a51      	subs	r1, r2, r1
 80080d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80080d8:	4629      	mov	r1, r5
 80080da:	eb63 0301 	sbc.w	r3, r3, r1
 80080de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80080ec:	4649      	mov	r1, r9
 80080ee:	018b      	lsls	r3, r1, #6
 80080f0:	4641      	mov	r1, r8
 80080f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080f6:	4641      	mov	r1, r8
 80080f8:	018a      	lsls	r2, r1, #6
 80080fa:	4641      	mov	r1, r8
 80080fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8008100:	4649      	mov	r1, r9
 8008102:	eb63 0b01 	sbc.w	fp, r3, r1
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	f04f 0300 	mov.w	r3, #0
 800810e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008112:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008116:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800811a:	4692      	mov	sl, r2
 800811c:	469b      	mov	fp, r3
 800811e:	4623      	mov	r3, r4
 8008120:	eb1a 0303 	adds.w	r3, sl, r3
 8008124:	623b      	str	r3, [r7, #32]
 8008126:	462b      	mov	r3, r5
 8008128:	eb4b 0303 	adc.w	r3, fp, r3
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800813a:	4629      	mov	r1, r5
 800813c:	028b      	lsls	r3, r1, #10
 800813e:	4621      	mov	r1, r4
 8008140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008144:	4621      	mov	r1, r4
 8008146:	028a      	lsls	r2, r1, #10
 8008148:	4610      	mov	r0, r2
 800814a:	4619      	mov	r1, r3
 800814c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008150:	2200      	movs	r2, #0
 8008152:	673b      	str	r3, [r7, #112]	; 0x70
 8008154:	677a      	str	r2, [r7, #116]	; 0x74
 8008156:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800815a:	f7f8 fdb5 	bl	8000cc8 <__aeabi_uldivmod>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4613      	mov	r3, r2
 8008164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008168:	4b41      	ldr	r3, [pc, #260]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	0c1b      	lsrs	r3, r3, #16
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	3301      	adds	r3, #1
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800817a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800817e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008182:	fbb2 f3f3 	udiv	r3, r2, r3
 8008186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800818a:	e0eb      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800818c:	4b38      	ldr	r3, [pc, #224]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008198:	4b35      	ldr	r3, [pc, #212]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d06b      	beq.n	800827c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081a4:	4b32      	ldr	r3, [pc, #200]	; (8008270 <HAL_RCC_GetSysClockFreq+0x354>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	099b      	lsrs	r3, r3, #6
 80081aa:	2200      	movs	r2, #0
 80081ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b6:	663b      	str	r3, [r7, #96]	; 0x60
 80081b8:	2300      	movs	r3, #0
 80081ba:	667b      	str	r3, [r7, #100]	; 0x64
 80081bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80081c0:	4622      	mov	r2, r4
 80081c2:	462b      	mov	r3, r5
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f04f 0100 	mov.w	r1, #0
 80081cc:	0159      	lsls	r1, r3, #5
 80081ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081d2:	0150      	lsls	r0, r2, #5
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4621      	mov	r1, r4
 80081da:	1a51      	subs	r1, r2, r1
 80081dc:	61b9      	str	r1, [r7, #24]
 80081de:	4629      	mov	r1, r5
 80081e0:	eb63 0301 	sbc.w	r3, r3, r1
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	f04f 0200 	mov.w	r2, #0
 80081ea:	f04f 0300 	mov.w	r3, #0
 80081ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80081f2:	4659      	mov	r1, fp
 80081f4:	018b      	lsls	r3, r1, #6
 80081f6:	4651      	mov	r1, sl
 80081f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081fc:	4651      	mov	r1, sl
 80081fe:	018a      	lsls	r2, r1, #6
 8008200:	4651      	mov	r1, sl
 8008202:	ebb2 0801 	subs.w	r8, r2, r1
 8008206:	4659      	mov	r1, fp
 8008208:	eb63 0901 	sbc.w	r9, r3, r1
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008218:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800821c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008220:	4690      	mov	r8, r2
 8008222:	4699      	mov	r9, r3
 8008224:	4623      	mov	r3, r4
 8008226:	eb18 0303 	adds.w	r3, r8, r3
 800822a:	613b      	str	r3, [r7, #16]
 800822c:	462b      	mov	r3, r5
 800822e:	eb49 0303 	adc.w	r3, r9, r3
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008240:	4629      	mov	r1, r5
 8008242:	024b      	lsls	r3, r1, #9
 8008244:	4621      	mov	r1, r4
 8008246:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800824a:	4621      	mov	r1, r4
 800824c:	024a      	lsls	r2, r1, #9
 800824e:	4610      	mov	r0, r2
 8008250:	4619      	mov	r1, r3
 8008252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008256:	2200      	movs	r2, #0
 8008258:	65bb      	str	r3, [r7, #88]	; 0x58
 800825a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800825c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008260:	f7f8 fd32 	bl	8000cc8 <__aeabi_uldivmod>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4613      	mov	r3, r2
 800826a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800826e:	e065      	b.n	800833c <HAL_RCC_GetSysClockFreq+0x420>
 8008270:	40023800 	.word	0x40023800
 8008274:	00f42400 	.word	0x00f42400
 8008278:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800827c:	4b3d      	ldr	r3, [pc, #244]	; (8008374 <HAL_RCC_GetSysClockFreq+0x458>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	099b      	lsrs	r3, r3, #6
 8008282:	2200      	movs	r2, #0
 8008284:	4618      	mov	r0, r3
 8008286:	4611      	mov	r1, r2
 8008288:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800828c:	653b      	str	r3, [r7, #80]	; 0x50
 800828e:	2300      	movs	r3, #0
 8008290:	657b      	str	r3, [r7, #84]	; 0x54
 8008292:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008296:	4642      	mov	r2, r8
 8008298:	464b      	mov	r3, r9
 800829a:	f04f 0000 	mov.w	r0, #0
 800829e:	f04f 0100 	mov.w	r1, #0
 80082a2:	0159      	lsls	r1, r3, #5
 80082a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082a8:	0150      	lsls	r0, r2, #5
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4641      	mov	r1, r8
 80082b0:	1a51      	subs	r1, r2, r1
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	4649      	mov	r1, r9
 80082b6:	eb63 0301 	sbc.w	r3, r3, r1
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80082c8:	4659      	mov	r1, fp
 80082ca:	018b      	lsls	r3, r1, #6
 80082cc:	4651      	mov	r1, sl
 80082ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082d2:	4651      	mov	r1, sl
 80082d4:	018a      	lsls	r2, r1, #6
 80082d6:	4651      	mov	r1, sl
 80082d8:	1a54      	subs	r4, r2, r1
 80082da:	4659      	mov	r1, fp
 80082dc:	eb63 0501 	sbc.w	r5, r3, r1
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	00eb      	lsls	r3, r5, #3
 80082ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082ee:	00e2      	lsls	r2, r4, #3
 80082f0:	4614      	mov	r4, r2
 80082f2:	461d      	mov	r5, r3
 80082f4:	4643      	mov	r3, r8
 80082f6:	18e3      	adds	r3, r4, r3
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	464b      	mov	r3, r9
 80082fc:	eb45 0303 	adc.w	r3, r5, r3
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	f04f 0200 	mov.w	r2, #0
 8008306:	f04f 0300 	mov.w	r3, #0
 800830a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800830e:	4629      	mov	r1, r5
 8008310:	028b      	lsls	r3, r1, #10
 8008312:	4621      	mov	r1, r4
 8008314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008318:	4621      	mov	r1, r4
 800831a:	028a      	lsls	r2, r1, #10
 800831c:	4610      	mov	r0, r2
 800831e:	4619      	mov	r1, r3
 8008320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008324:	2200      	movs	r2, #0
 8008326:	64bb      	str	r3, [r7, #72]	; 0x48
 8008328:	64fa      	str	r2, [r7, #76]	; 0x4c
 800832a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800832e:	f7f8 fccb 	bl	8000cc8 <__aeabi_uldivmod>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4613      	mov	r3, r2
 8008338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800833c:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <HAL_RCC_GetSysClockFreq+0x458>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	0f1b      	lsrs	r3, r3, #28
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800834a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800834e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008352:	fbb2 f3f3 	udiv	r3, r2, r3
 8008356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800835a:	e003      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <HAL_RCC_GetSysClockFreq+0x45c>)
 800835e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008368:	4618      	mov	r0, r3
 800836a:	37b8      	adds	r7, #184	; 0xb8
 800836c:	46bd      	mov	sp, r7
 800836e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008372:	bf00      	nop
 8008374:	40023800 	.word	0x40023800
 8008378:	00f42400 	.word	0x00f42400

0800837c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e28d      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 8083 	beq.w	80084a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800839c:	4b94      	ldr	r3, [pc, #592]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f003 030c 	and.w	r3, r3, #12
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d019      	beq.n	80083dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80083a8:	4b91      	ldr	r3, [pc, #580]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d106      	bne.n	80083c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80083b4:	4b8e      	ldr	r3, [pc, #568]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c0:	d00c      	beq.n	80083dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083c2:	4b8b      	ldr	r3, [pc, #556]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80083ca:	2b0c      	cmp	r3, #12
 80083cc:	d112      	bne.n	80083f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083ce:	4b88      	ldr	r3, [pc, #544]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083da:	d10b      	bne.n	80083f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083dc:	4b84      	ldr	r3, [pc, #528]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d05b      	beq.n	80084a0 <HAL_RCC_OscConfig+0x124>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d157      	bne.n	80084a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e25a      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fc:	d106      	bne.n	800840c <HAL_RCC_OscConfig+0x90>
 80083fe:	4b7c      	ldr	r3, [pc, #496]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a7b      	ldr	r2, [pc, #492]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	e01d      	b.n	8008448 <HAL_RCC_OscConfig+0xcc>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008414:	d10c      	bne.n	8008430 <HAL_RCC_OscConfig+0xb4>
 8008416:	4b76      	ldr	r3, [pc, #472]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a75      	ldr	r2, [pc, #468]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 800841c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	4b73      	ldr	r3, [pc, #460]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a72      	ldr	r2, [pc, #456]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	e00b      	b.n	8008448 <HAL_RCC_OscConfig+0xcc>
 8008430:	4b6f      	ldr	r3, [pc, #444]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a6e      	ldr	r2, [pc, #440]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	4b6c      	ldr	r3, [pc, #432]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a6b      	ldr	r2, [pc, #428]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d013      	beq.n	8008478 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008450:	f7fd f90e 	bl	8005670 <HAL_GetTick>
 8008454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008456:	e008      	b.n	800846a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008458:	f7fd f90a 	bl	8005670 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b64      	cmp	r3, #100	; 0x64
 8008464:	d901      	bls.n	800846a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e21f      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800846a:	4b61      	ldr	r3, [pc, #388]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0f0      	beq.n	8008458 <HAL_RCC_OscConfig+0xdc>
 8008476:	e014      	b.n	80084a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008478:	f7fd f8fa 	bl	8005670 <HAL_GetTick>
 800847c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008480:	f7fd f8f6 	bl	8005670 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b64      	cmp	r3, #100	; 0x64
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e20b      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008492:	4b57      	ldr	r3, [pc, #348]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1f0      	bne.n	8008480 <HAL_RCC_OscConfig+0x104>
 800849e:	e000      	b.n	80084a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d06f      	beq.n	800858e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80084ae:	4b50      	ldr	r3, [pc, #320]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 030c 	and.w	r3, r3, #12
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d017      	beq.n	80084ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80084ba:	4b4d      	ldr	r3, [pc, #308]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	d105      	bne.n	80084d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80084c6:	4b4a      	ldr	r3, [pc, #296]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084d2:	4b47      	ldr	r3, [pc, #284]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80084da:	2b0c      	cmp	r3, #12
 80084dc:	d11c      	bne.n	8008518 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084de:	4b44      	ldr	r3, [pc, #272]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d116      	bne.n	8008518 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ea:	4b41      	ldr	r3, [pc, #260]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_RCC_OscConfig+0x186>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d001      	beq.n	8008502 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e1d3      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008502:	4b3b      	ldr	r3, [pc, #236]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4937      	ldr	r1, [pc, #220]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008512:	4313      	orrs	r3, r2
 8008514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008516:	e03a      	b.n	800858e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d020      	beq.n	8008562 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008520:	4b34      	ldr	r3, [pc, #208]	; (80085f4 <HAL_RCC_OscConfig+0x278>)
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008526:	f7fd f8a3 	bl	8005670 <HAL_GetTick>
 800852a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800852e:	f7fd f89f 	bl	8005670 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e1b4      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008540:	4b2b      	ldr	r3, [pc, #172]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0f0      	beq.n	800852e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800854c:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	4925      	ldr	r1, [pc, #148]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 800855c:	4313      	orrs	r3, r2
 800855e:	600b      	str	r3, [r1, #0]
 8008560:	e015      	b.n	800858e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008562:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <HAL_RCC_OscConfig+0x278>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fd f882 	bl	8005670 <HAL_GetTick>
 800856c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008570:	f7fd f87e 	bl	8005670 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e193      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008582:	4b1b      	ldr	r3, [pc, #108]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f0      	bne.n	8008570 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d036      	beq.n	8008608 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <HAL_RCC_OscConfig+0x27c>)
 80085a4:	2201      	movs	r2, #1
 80085a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a8:	f7fd f862 	bl	8005670 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085b0:	f7fd f85e 	bl	8005670 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e173      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085c2:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <HAL_RCC_OscConfig+0x274>)
 80085c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0f0      	beq.n	80085b0 <HAL_RCC_OscConfig+0x234>
 80085ce:	e01b      	b.n	8008608 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085d0:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <HAL_RCC_OscConfig+0x27c>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d6:	f7fd f84b 	bl	8005670 <HAL_GetTick>
 80085da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085dc:	e00e      	b.n	80085fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085de:	f7fd f847 	bl	8005670 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d907      	bls.n	80085fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e15c      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
 80085f0:	40023800 	.word	0x40023800
 80085f4:	42470000 	.word	0x42470000
 80085f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085fc:	4b8a      	ldr	r3, [pc, #552]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80085fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1ea      	bne.n	80085de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 8097 	beq.w	8008744 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800861a:	4b83      	ldr	r3, [pc, #524]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10f      	bne.n	8008646 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008626:	2300      	movs	r3, #0
 8008628:	60bb      	str	r3, [r7, #8]
 800862a:	4b7f      	ldr	r3, [pc, #508]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	4a7e      	ldr	r2, [pc, #504]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 8008630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008634:	6413      	str	r3, [r2, #64]	; 0x40
 8008636:	4b7c      	ldr	r3, [pc, #496]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863e:	60bb      	str	r3, [r7, #8]
 8008640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008646:	4b79      	ldr	r3, [pc, #484]	; (800882c <HAL_RCC_OscConfig+0x4b0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d118      	bne.n	8008684 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008652:	4b76      	ldr	r3, [pc, #472]	; (800882c <HAL_RCC_OscConfig+0x4b0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a75      	ldr	r2, [pc, #468]	; (800882c <HAL_RCC_OscConfig+0x4b0>)
 8008658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800865c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800865e:	f7fd f807 	bl	8005670 <HAL_GetTick>
 8008662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008664:	e008      	b.n	8008678 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008666:	f7fd f803 	bl	8005670 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e118      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008678:	4b6c      	ldr	r3, [pc, #432]	; (800882c <HAL_RCC_OscConfig+0x4b0>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0f0      	beq.n	8008666 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d106      	bne.n	800869a <HAL_RCC_OscConfig+0x31e>
 800868c:	4b66      	ldr	r3, [pc, #408]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008690:	4a65      	ldr	r2, [pc, #404]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 8008692:	f043 0301 	orr.w	r3, r3, #1
 8008696:	6713      	str	r3, [r2, #112]	; 0x70
 8008698:	e01c      	b.n	80086d4 <HAL_RCC_OscConfig+0x358>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b05      	cmp	r3, #5
 80086a0:	d10c      	bne.n	80086bc <HAL_RCC_OscConfig+0x340>
 80086a2:	4b61      	ldr	r3, [pc, #388]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	4a60      	ldr	r2, [pc, #384]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086a8:	f043 0304 	orr.w	r3, r3, #4
 80086ac:	6713      	str	r3, [r2, #112]	; 0x70
 80086ae:	4b5e      	ldr	r3, [pc, #376]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b2:	4a5d      	ldr	r2, [pc, #372]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086b4:	f043 0301 	orr.w	r3, r3, #1
 80086b8:	6713      	str	r3, [r2, #112]	; 0x70
 80086ba:	e00b      	b.n	80086d4 <HAL_RCC_OscConfig+0x358>
 80086bc:	4b5a      	ldr	r3, [pc, #360]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c0:	4a59      	ldr	r2, [pc, #356]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086c2:	f023 0301 	bic.w	r3, r3, #1
 80086c6:	6713      	str	r3, [r2, #112]	; 0x70
 80086c8:	4b57      	ldr	r3, [pc, #348]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086cc:	4a56      	ldr	r2, [pc, #344]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086ce:	f023 0304 	bic.w	r3, r3, #4
 80086d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d015      	beq.n	8008708 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086dc:	f7fc ffc8 	bl	8005670 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086e2:	e00a      	b.n	80086fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086e4:	f7fc ffc4 	bl	8005670 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e0d7      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086fa:	4b4b      	ldr	r3, [pc, #300]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80086fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0ee      	beq.n	80086e4 <HAL_RCC_OscConfig+0x368>
 8008706:	e014      	b.n	8008732 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008708:	f7fc ffb2 	bl	8005670 <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800870e:	e00a      	b.n	8008726 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008710:	f7fc ffae 	bl	8005670 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	f241 3288 	movw	r2, #5000	; 0x1388
 800871e:	4293      	cmp	r3, r2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e0c1      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008726:	4b40      	ldr	r3, [pc, #256]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 8008728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1ee      	bne.n	8008710 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d105      	bne.n	8008744 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008738:	4b3b      	ldr	r3, [pc, #236]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 800873a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873c:	4a3a      	ldr	r2, [pc, #232]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 800873e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008742:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 80ad 	beq.w	80088a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800874e:	4b36      	ldr	r3, [pc, #216]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f003 030c 	and.w	r3, r3, #12
 8008756:	2b08      	cmp	r3, #8
 8008758:	d060      	beq.n	800881c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d145      	bne.n	80087ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008762:	4b33      	ldr	r3, [pc, #204]	; (8008830 <HAL_RCC_OscConfig+0x4b4>)
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008768:	f7fc ff82 	bl	8005670 <HAL_GetTick>
 800876c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800876e:	e008      	b.n	8008782 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008770:	f7fc ff7e 	bl	8005670 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e093      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008782:	4b29      	ldr	r3, [pc, #164]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1f0      	bne.n	8008770 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69da      	ldr	r2, [r3, #28]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	019b      	lsls	r3, r3, #6
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	085b      	lsrs	r3, r3, #1
 80087a6:	3b01      	subs	r3, #1
 80087a8:	041b      	lsls	r3, r3, #16
 80087aa:	431a      	orrs	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	061b      	lsls	r3, r3, #24
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	071b      	lsls	r3, r3, #28
 80087ba:	491b      	ldr	r1, [pc, #108]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087c0:	4b1b      	ldr	r3, [pc, #108]	; (8008830 <HAL_RCC_OscConfig+0x4b4>)
 80087c2:	2201      	movs	r2, #1
 80087c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fc ff53 	bl	8005670 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087ce:	f7fc ff4f 	bl	8005670 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e064      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087e0:	4b11      	ldr	r3, [pc, #68]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x452>
 80087ec:	e05c      	b.n	80088a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ee:	4b10      	ldr	r3, [pc, #64]	; (8008830 <HAL_RCC_OscConfig+0x4b4>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fc ff3c 	bl	8005670 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087fc:	f7fc ff38 	bl	8005670 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e04d      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <HAL_RCC_OscConfig+0x4ac>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f0      	bne.n	80087fc <HAL_RCC_OscConfig+0x480>
 800881a:	e045      	b.n	80088a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d107      	bne.n	8008834 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e040      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
 8008828:	40023800 	.word	0x40023800
 800882c:	40007000 	.word	0x40007000
 8008830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008834:	4b1f      	ldr	r3, [pc, #124]	; (80088b4 <HAL_RCC_OscConfig+0x538>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d030      	beq.n	80088a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800884c:	429a      	cmp	r2, r3
 800884e:	d129      	bne.n	80088a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800885a:	429a      	cmp	r2, r3
 800885c:	d122      	bne.n	80088a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008864:	4013      	ands	r3, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800886a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800886c:	4293      	cmp	r3, r2
 800886e:	d119      	bne.n	80088a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	3b01      	subs	r3, #1
 800887e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008880:	429a      	cmp	r2, r3
 8008882:	d10f      	bne.n	80088a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008890:	429a      	cmp	r2, r3
 8008892:	d107      	bne.n	80088a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d001      	beq.n	80088a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	40023800 	.word	0x40023800

080088b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e07b      	b.n	80089c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d108      	bne.n	80088e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088da:	d009      	beq.n	80088f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	61da      	str	r2, [r3, #28]
 80088e2:	e005      	b.n	80088f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fc f86a 	bl	80049e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	431a      	orrs	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008974:	ea42 0103 	orr.w	r1, r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	0c1b      	lsrs	r3, r3, #16
 800898e:	f003 0104 	and.w	r1, r3, #4
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	f003 0210 	and.w	r2, r3, #16
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b088      	sub	sp, #32
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	603b      	str	r3, [r7, #0]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_SPI_Transmit+0x22>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e126      	b.n	8008c3a <HAL_SPI_Transmit+0x270>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089f4:	f7fc fe3c 	bl	8005670 <HAL_GetTick>
 80089f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d002      	beq.n	8008a10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a0e:	e10b      	b.n	8008c28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <HAL_SPI_Transmit+0x52>
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a20:	e102      	b.n	8008c28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2203      	movs	r2, #3
 8008a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	88fa      	ldrh	r2, [r7, #6]
 8008a3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a68:	d10f      	bne.n	8008a8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a94:	2b40      	cmp	r3, #64	; 0x40
 8008a96:	d007      	beq.n	8008aa8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab0:	d14b      	bne.n	8008b4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <HAL_SPI_Transmit+0xf6>
 8008aba:	8afb      	ldrh	r3, [r7, #22]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d13e      	bne.n	8008b3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	881a      	ldrh	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad0:	1c9a      	adds	r2, r3, #2
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	3b01      	subs	r3, #1
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008ae4:	e02b      	b.n	8008b3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d112      	bne.n	8008b1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	881a      	ldrh	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	1c9a      	adds	r2, r3, #2
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b18:	e011      	b.n	8008b3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b1a:	f7fc fda9 	bl	8005670 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d803      	bhi.n	8008b32 <HAL_SPI_Transmit+0x168>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d102      	bne.n	8008b38 <HAL_SPI_Transmit+0x16e>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b3c:	e074      	b.n	8008c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1ce      	bne.n	8008ae6 <HAL_SPI_Transmit+0x11c>
 8008b48:	e04c      	b.n	8008be4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_SPI_Transmit+0x18e>
 8008b52:	8afb      	ldrh	r3, [r7, #22]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d140      	bne.n	8008bda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	330c      	adds	r3, #12
 8008b62:	7812      	ldrb	r2, [r2, #0]
 8008b64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b7e:	e02c      	b.n	8008bda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d113      	bne.n	8008bb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	330c      	adds	r3, #12
 8008b98:	7812      	ldrb	r2, [r2, #0]
 8008b9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	3b01      	subs	r3, #1
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bb4:	e011      	b.n	8008bda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bb6:	f7fc fd5b 	bl	8005670 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d803      	bhi.n	8008bce <HAL_SPI_Transmit+0x204>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d102      	bne.n	8008bd4 <HAL_SPI_Transmit+0x20a>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bd8:	e026      	b.n	8008c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1cd      	bne.n	8008b80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fbcb 	bl	8009384 <SPI_EndRxTxTransaction>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c02:	2300      	movs	r3, #0
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	613b      	str	r3, [r7, #16]
 8008c16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	77fb      	strb	r3, [r7, #31]
 8008c24:	e000      	b.n	8008c28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008c26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af02      	add	r7, sp, #8
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	603b      	str	r3, [r7, #0]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c5e:	d112      	bne.n	8008c86 <HAL_SPI_Receive+0x44>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10e      	bne.n	8008c86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4613      	mov	r3, r2
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f8f1 	bl	8008e64 <HAL_SPI_TransmitReceive>
 8008c82:	4603      	mov	r3, r0
 8008c84:	e0ea      	b.n	8008e5c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_SPI_Receive+0x52>
 8008c90:	2302      	movs	r3, #2
 8008c92:	e0e3      	b.n	8008e5c <HAL_SPI_Receive+0x21a>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c9c:	f7fc fce8 	bl	8005670 <HAL_GetTick>
 8008ca0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d002      	beq.n	8008cb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008cae:	2302      	movs	r3, #2
 8008cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cb2:	e0ca      	b.n	8008e4a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <HAL_SPI_Receive+0x7e>
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d102      	bne.n	8008cc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cc4:	e0c1      	b.n	8008e4a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	88fa      	ldrh	r2, [r7, #6]
 8008ce4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d0c:	d10f      	bne.n	8008d2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d38:	2b40      	cmp	r3, #64	; 0x40
 8008d3a:	d007      	beq.n	8008d4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d162      	bne.n	8008e1a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008d54:	e02e      	b.n	8008db4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d115      	bne.n	8008d90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f103 020c 	add.w	r2, r3, #12
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	7812      	ldrb	r2, [r2, #0]
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d8e:	e011      	b.n	8008db4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d90:	f7fc fc6e 	bl	8005670 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d803      	bhi.n	8008da8 <HAL_SPI_Receive+0x166>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d102      	bne.n	8008dae <HAL_SPI_Receive+0x16c>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008db2:	e04a      	b.n	8008e4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1cb      	bne.n	8008d56 <HAL_SPI_Receive+0x114>
 8008dbe:	e031      	b.n	8008e24 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d113      	bne.n	8008df6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	b292      	uxth	r2, r2
 8008dda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de0:	1c9a      	adds	r2, r3, #2
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008df4:	e011      	b.n	8008e1a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008df6:	f7fc fc3b 	bl	8005670 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d803      	bhi.n	8008e0e <HAL_SPI_Receive+0x1cc>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d102      	bne.n	8008e14 <HAL_SPI_Receive+0x1d2>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e18:	e017      	b.n	8008e4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1cd      	bne.n	8008dc0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fa45 	bl	80092b8 <SPI_EndRxTransaction>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2220      	movs	r2, #32
 8008e38:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	75fb      	strb	r3, [r7, #23]
 8008e46:	e000      	b.n	8008e4a <HAL_SPI_Receive+0x208>
  }

error :
 8008e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08c      	sub	sp, #48	; 0x30
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e72:	2301      	movs	r3, #1
 8008e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d101      	bne.n	8008e8a <HAL_SPI_TransmitReceive+0x26>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e18a      	b.n	80091a0 <HAL_SPI_TransmitReceive+0x33c>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e92:	f7fc fbed 	bl	8005670 <HAL_GetTick>
 8008e96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ea8:	887b      	ldrh	r3, [r7, #2]
 8008eaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d00f      	beq.n	8008ed4 <HAL_SPI_TransmitReceive+0x70>
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eba:	d107      	bne.n	8008ecc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <HAL_SPI_TransmitReceive+0x68>
 8008ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d003      	beq.n	8008ed4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008ecc:	2302      	movs	r3, #2
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ed2:	e15b      	b.n	800918c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0x82>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0x82>
 8008ee0:	887b      	ldrh	r3, [r7, #2]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008eec:	e14e      	b.n	800918c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d003      	beq.n	8008f02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2205      	movs	r2, #5
 8008efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	887a      	ldrh	r2, [r7, #2]
 8008f12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	887a      	ldrh	r2, [r7, #2]
 8008f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	887a      	ldrh	r2, [r7, #2]
 8008f24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	887a      	ldrh	r2, [r7, #2]
 8008f2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f42:	2b40      	cmp	r3, #64	; 0x40
 8008f44:	d007      	beq.n	8008f56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f5e:	d178      	bne.n	8009052 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <HAL_SPI_TransmitReceive+0x10a>
 8008f68:	8b7b      	ldrh	r3, [r7, #26]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d166      	bne.n	800903c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	881a      	ldrh	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7e:	1c9a      	adds	r2, r3, #2
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f92:	e053      	b.n	800903c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d11b      	bne.n	8008fda <HAL_SPI_TransmitReceive+0x176>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d016      	beq.n	8008fda <HAL_SPI_TransmitReceive+0x176>
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d113      	bne.n	8008fda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	881a      	ldrh	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	1c9a      	adds	r2, r3, #2
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d119      	bne.n	800901c <HAL_SPI_TransmitReceive+0x1b8>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d014      	beq.n	800901c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	b292      	uxth	r2, r2
 8008ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	1c9a      	adds	r2, r3, #2
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900e:	b29b      	uxth	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009018:	2301      	movs	r3, #1
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800901c:	f7fc fb28 	bl	8005670 <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009028:	429a      	cmp	r2, r3
 800902a:	d807      	bhi.n	800903c <HAL_SPI_TransmitReceive+0x1d8>
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009032:	d003      	beq.n	800903c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800903a:	e0a7      	b.n	800918c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009040:	b29b      	uxth	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1a6      	bne.n	8008f94 <HAL_SPI_TransmitReceive+0x130>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904a:	b29b      	uxth	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1a1      	bne.n	8008f94 <HAL_SPI_TransmitReceive+0x130>
 8009050:	e07c      	b.n	800914c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x1fc>
 800905a:	8b7b      	ldrh	r3, [r7, #26]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d16b      	bne.n	8009138 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	330c      	adds	r3, #12
 800906a:	7812      	ldrb	r2, [r2, #0]
 800906c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b01      	subs	r3, #1
 8009080:	b29a      	uxth	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009086:	e057      	b.n	8009138 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b02      	cmp	r3, #2
 8009094:	d11c      	bne.n	80090d0 <HAL_SPI_TransmitReceive+0x26c>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800909a:	b29b      	uxth	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d017      	beq.n	80090d0 <HAL_SPI_TransmitReceive+0x26c>
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d114      	bne.n	80090d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	3b01      	subs	r3, #1
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d119      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x2ae>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d014      	beq.n	8009112 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800910e:	2301      	movs	r3, #1
 8009110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009112:	f7fc faad 	bl	8005670 <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911e:	429a      	cmp	r2, r3
 8009120:	d803      	bhi.n	800912a <HAL_SPI_TransmitReceive+0x2c6>
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009128:	d102      	bne.n	8009130 <HAL_SPI_TransmitReceive+0x2cc>
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	2b00      	cmp	r3, #0
 800912e:	d103      	bne.n	8009138 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009136:	e029      	b.n	800918c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1a2      	bne.n	8009088 <HAL_SPI_TransmitReceive+0x224>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d19d      	bne.n	8009088 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800914c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f917 	bl	8009384 <SPI_EndRxTxTransaction>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009168:	e010      	b.n	800918c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10b      	bne.n	800918a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	e000      	b.n	800918c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800918a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800919c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3730      	adds	r7, #48	; 0x30
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091b8:	f7fc fa5a 	bl	8005670 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4413      	add	r3, r2
 80091c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091c8:	f7fc fa52 	bl	8005670 <HAL_GetTick>
 80091cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091ce:	4b39      	ldr	r3, [pc, #228]	; (80092b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	015b      	lsls	r3, r3, #5
 80091d4:	0d1b      	lsrs	r3, r3, #20
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091de:	e054      	b.n	800928a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e6:	d050      	beq.n	800928a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091e8:	f7fc fa42 	bl	8005670 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d902      	bls.n	80091fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d13d      	bne.n	800927a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800920c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009216:	d111      	bne.n	800923c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009220:	d004      	beq.n	800922c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922a:	d107      	bne.n	800923c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009244:	d10f      	bne.n	8009266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e017      	b.n	80092aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	3b01      	subs	r3, #1
 8009288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4013      	ands	r3, r2
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	429a      	cmp	r2, r3
 8009298:	bf0c      	ite	eq
 800929a:	2301      	moveq	r3, #1
 800929c:	2300      	movne	r3, #0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d19b      	bne.n	80091e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3720      	adds	r7, #32
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	2000001c 	.word	0x2000001c

080092b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af02      	add	r7, sp, #8
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092cc:	d111      	bne.n	80092f2 <SPI_EndRxTransaction+0x3a>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092d6:	d004      	beq.n	80092e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092e0:	d107      	bne.n	80092f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092fa:	d12a      	bne.n	8009352 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009304:	d012      	beq.n	800932c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2200      	movs	r2, #0
 800930e:	2180      	movs	r1, #128	; 0x80
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff ff49 	bl	80091a8 <SPI_WaitFlagStateUntilTimeout>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d02d      	beq.n	8009378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009320:	f043 0220 	orr.w	r2, r3, #32
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e026      	b.n	800937a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2200      	movs	r2, #0
 8009334:	2101      	movs	r1, #1
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f7ff ff36 	bl	80091a8 <SPI_WaitFlagStateUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d01a      	beq.n	8009378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009346:	f043 0220 	orr.w	r2, r3, #32
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e013      	b.n	800937a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2200      	movs	r2, #0
 800935a:	2101      	movs	r1, #1
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff ff23 	bl	80091a8 <SPI_WaitFlagStateUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d007      	beq.n	8009378 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800936c:	f043 0220 	orr.w	r2, r3, #32
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e000      	b.n	800937a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009390:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <SPI_EndRxTxTransaction+0x7c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a1b      	ldr	r2, [pc, #108]	; (8009404 <SPI_EndRxTxTransaction+0x80>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	0d5b      	lsrs	r3, r3, #21
 800939c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093a0:	fb02 f303 	mul.w	r3, r2, r3
 80093a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093ae:	d112      	bne.n	80093d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2200      	movs	r2, #0
 80093b8:	2180      	movs	r1, #128	; 0x80
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7ff fef4 	bl	80091a8 <SPI_WaitFlagStateUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ca:	f043 0220 	orr.w	r2, r3, #32
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e00f      	b.n	80093f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	3b01      	subs	r3, #1
 80093e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ec:	2b80      	cmp	r3, #128	; 0x80
 80093ee:	d0f2      	beq.n	80093d6 <SPI_EndRxTxTransaction+0x52>
 80093f0:	e000      	b.n	80093f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80093f2:	bf00      	nop
  }

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	2000001c 	.word	0x2000001c
 8009404:	165e9f81 	.word	0x165e9f81

08009408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e041      	b.n	800949e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fb fba4 	bl	8004b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f000 f95e 	bl	8009708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d001      	beq.n	80094c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e046      	b.n	800954e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a23      	ldr	r2, [pc, #140]	; (800955c <HAL_TIM_Base_Start+0xb4>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d022      	beq.n	8009518 <HAL_TIM_Base_Start+0x70>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094da:	d01d      	beq.n	8009518 <HAL_TIM_Base_Start+0x70>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <HAL_TIM_Base_Start+0xb8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d018      	beq.n	8009518 <HAL_TIM_Base_Start+0x70>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1e      	ldr	r2, [pc, #120]	; (8009564 <HAL_TIM_Base_Start+0xbc>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d013      	beq.n	8009518 <HAL_TIM_Base_Start+0x70>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a1c      	ldr	r2, [pc, #112]	; (8009568 <HAL_TIM_Base_Start+0xc0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00e      	beq.n	8009518 <HAL_TIM_Base_Start+0x70>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1b      	ldr	r2, [pc, #108]	; (800956c <HAL_TIM_Base_Start+0xc4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d009      	beq.n	8009518 <HAL_TIM_Base_Start+0x70>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a19      	ldr	r2, [pc, #100]	; (8009570 <HAL_TIM_Base_Start+0xc8>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d004      	beq.n	8009518 <HAL_TIM_Base_Start+0x70>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a18      	ldr	r2, [pc, #96]	; (8009574 <HAL_TIM_Base_Start+0xcc>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d111      	bne.n	800953c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b06      	cmp	r3, #6
 8009528:	d010      	beq.n	800954c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0201 	orr.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800953a:	e007      	b.n	800954c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0201 	orr.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40010000 	.word	0x40010000
 8009560:	40000400 	.word	0x40000400
 8009564:	40000800 	.word	0x40000800
 8009568:	40000c00 	.word	0x40000c00
 800956c:	40010400 	.word	0x40010400
 8009570:	40014000 	.word	0x40014000
 8009574:	40001800 	.word	0x40001800

08009578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800958c:	2b01      	cmp	r3, #1
 800958e:	d101      	bne.n	8009594 <HAL_TIM_ConfigClockSource+0x1c>
 8009590:	2302      	movs	r3, #2
 8009592:	e0b4      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x186>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095cc:	d03e      	beq.n	800964c <HAL_TIM_ConfigClockSource+0xd4>
 80095ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d2:	f200 8087 	bhi.w	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 80095d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095da:	f000 8086 	beq.w	80096ea <HAL_TIM_ConfigClockSource+0x172>
 80095de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e2:	d87f      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 80095e4:	2b70      	cmp	r3, #112	; 0x70
 80095e6:	d01a      	beq.n	800961e <HAL_TIM_ConfigClockSource+0xa6>
 80095e8:	2b70      	cmp	r3, #112	; 0x70
 80095ea:	d87b      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 80095ec:	2b60      	cmp	r3, #96	; 0x60
 80095ee:	d050      	beq.n	8009692 <HAL_TIM_ConfigClockSource+0x11a>
 80095f0:	2b60      	cmp	r3, #96	; 0x60
 80095f2:	d877      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 80095f4:	2b50      	cmp	r3, #80	; 0x50
 80095f6:	d03c      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0xfa>
 80095f8:	2b50      	cmp	r3, #80	; 0x50
 80095fa:	d873      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 80095fc:	2b40      	cmp	r3, #64	; 0x40
 80095fe:	d058      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x13a>
 8009600:	2b40      	cmp	r3, #64	; 0x40
 8009602:	d86f      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 8009604:	2b30      	cmp	r3, #48	; 0x30
 8009606:	d064      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x15a>
 8009608:	2b30      	cmp	r3, #48	; 0x30
 800960a:	d86b      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 800960c:	2b20      	cmp	r3, #32
 800960e:	d060      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x15a>
 8009610:	2b20      	cmp	r3, #32
 8009612:	d867      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
 8009614:	2b00      	cmp	r3, #0
 8009616:	d05c      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x15a>
 8009618:	2b10      	cmp	r3, #16
 800961a:	d05a      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x15a>
 800961c:	e062      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6899      	ldr	r1, [r3, #8]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f000 f985 	bl	800993c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	609a      	str	r2, [r3, #8]
      break;
 800964a:	e04f      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6818      	ldr	r0, [r3, #0]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	6899      	ldr	r1, [r3, #8]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f000 f96e 	bl	800993c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800966e:	609a      	str	r2, [r3, #8]
      break;
 8009670:	e03c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6818      	ldr	r0, [r3, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	6859      	ldr	r1, [r3, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	461a      	mov	r2, r3
 8009680:	f000 f8e2 	bl	8009848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2150      	movs	r1, #80	; 0x50
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f93b 	bl	8009906 <TIM_ITRx_SetConfig>
      break;
 8009690:	e02c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	6859      	ldr	r1, [r3, #4]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	461a      	mov	r2, r3
 80096a0:	f000 f901 	bl	80098a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2160      	movs	r1, #96	; 0x60
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 f92b 	bl	8009906 <TIM_ITRx_SetConfig>
      break;
 80096b0:	e01c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6859      	ldr	r1, [r3, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	461a      	mov	r2, r3
 80096c0:	f000 f8c2 	bl	8009848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2140      	movs	r1, #64	; 0x40
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f91b 	bl	8009906 <TIM_ITRx_SetConfig>
      break;
 80096d0:	e00c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f000 f912 	bl	8009906 <TIM_ITRx_SetConfig>
      break;
 80096e2:	e003      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
      break;
 80096e8:	e000      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80096ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a40      	ldr	r2, [pc, #256]	; (800981c <TIM_Base_SetConfig+0x114>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d013      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009726:	d00f      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a3d      	ldr	r2, [pc, #244]	; (8009820 <TIM_Base_SetConfig+0x118>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d00b      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a3c      	ldr	r2, [pc, #240]	; (8009824 <TIM_Base_SetConfig+0x11c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d007      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a3b      	ldr	r2, [pc, #236]	; (8009828 <TIM_Base_SetConfig+0x120>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d003      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a3a      	ldr	r2, [pc, #232]	; (800982c <TIM_Base_SetConfig+0x124>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d108      	bne.n	800975a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a2f      	ldr	r2, [pc, #188]	; (800981c <TIM_Base_SetConfig+0x114>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d02b      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009768:	d027      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a2c      	ldr	r2, [pc, #176]	; (8009820 <TIM_Base_SetConfig+0x118>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d023      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a2b      	ldr	r2, [pc, #172]	; (8009824 <TIM_Base_SetConfig+0x11c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d01f      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a2a      	ldr	r2, [pc, #168]	; (8009828 <TIM_Base_SetConfig+0x120>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d01b      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a29      	ldr	r2, [pc, #164]	; (800982c <TIM_Base_SetConfig+0x124>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d017      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a28      	ldr	r2, [pc, #160]	; (8009830 <TIM_Base_SetConfig+0x128>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d013      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a27      	ldr	r2, [pc, #156]	; (8009834 <TIM_Base_SetConfig+0x12c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00f      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a26      	ldr	r2, [pc, #152]	; (8009838 <TIM_Base_SetConfig+0x130>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d00b      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a25      	ldr	r2, [pc, #148]	; (800983c <TIM_Base_SetConfig+0x134>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d007      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a24      	ldr	r2, [pc, #144]	; (8009840 <TIM_Base_SetConfig+0x138>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d003      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a23      	ldr	r2, [pc, #140]	; (8009844 <TIM_Base_SetConfig+0x13c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d108      	bne.n	80097cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689a      	ldr	r2, [r3, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a0a      	ldr	r2, [pc, #40]	; (800981c <TIM_Base_SetConfig+0x114>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d003      	beq.n	8009800 <TIM_Base_SetConfig+0xf8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a0c      	ldr	r2, [pc, #48]	; (800982c <TIM_Base_SetConfig+0x124>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d103      	bne.n	8009808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	615a      	str	r2, [r3, #20]
}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	40010000 	.word	0x40010000
 8009820:	40000400 	.word	0x40000400
 8009824:	40000800 	.word	0x40000800
 8009828:	40000c00 	.word	0x40000c00
 800982c:	40010400 	.word	0x40010400
 8009830:	40014000 	.word	0x40014000
 8009834:	40014400 	.word	0x40014400
 8009838:	40014800 	.word	0x40014800
 800983c:	40001800 	.word	0x40001800
 8009840:	40001c00 	.word	0x40001c00
 8009844:	40002000 	.word	0x40002000

08009848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f023 0201 	bic.w	r2, r3, #1
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	011b      	lsls	r3, r3, #4
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4313      	orrs	r3, r2
 800987c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f023 030a 	bic.w	r3, r3, #10
 8009884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	621a      	str	r2, [r3, #32]
}
 800989a:	bf00      	nop
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b087      	sub	sp, #28
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	f023 0210 	bic.w	r2, r3, #16
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	031b      	lsls	r3, r3, #12
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	621a      	str	r2, [r3, #32]
}
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4313      	orrs	r3, r2
 8009924:	f043 0307 	orr.w	r3, r3, #7
 8009928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	609a      	str	r2, [r3, #8]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	021a      	lsls	r2, r3, #8
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	431a      	orrs	r2, r3
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4313      	orrs	r3, r2
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	609a      	str	r2, [r3, #8]
}
 8009970:	bf00      	nop
 8009972:	371c      	adds	r7, #28
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009990:	2302      	movs	r3, #2
 8009992:	e05a      	b.n	8009a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d022      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e0:	d01d      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a1d      	ldr	r2, [pc, #116]	; (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d018      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00e      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a18      	ldr	r2, [pc, #96]	; (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d009      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d004      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a15      	ldr	r2, [pc, #84]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d10c      	bne.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40010000 	.word	0x40010000
 8009a5c:	40000400 	.word	0x40000400
 8009a60:	40000800 	.word	0x40000800
 8009a64:	40000c00 	.word	0x40000c00
 8009a68:	40010400 	.word	0x40010400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40001800 	.word	0x40001800

08009a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e03f      	b.n	8009b06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7fb f890 	bl	8004bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2224      	movs	r2, #36	; 0x24
 8009aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 ff73 	bl	800a9a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	695a      	ldr	r2, [r3, #20]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b08a      	sub	sp, #40	; 0x28
 8009b12:	af02      	add	r7, sp, #8
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	603b      	str	r3, [r7, #0]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d17c      	bne.n	8009c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <HAL_UART_Transmit+0x2c>
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e075      	b.n	8009c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_UART_Transmit+0x3e>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e06e      	b.n	8009c2a <HAL_UART_Transmit+0x11c>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2221      	movs	r2, #33	; 0x21
 8009b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b62:	f7fb fd85 	bl	8005670 <HAL_GetTick>
 8009b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	88fa      	ldrh	r2, [r7, #6]
 8009b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	88fa      	ldrh	r2, [r7, #6]
 8009b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b7c:	d108      	bne.n	8009b90 <HAL_UART_Transmit+0x82>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d104      	bne.n	8009b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	61bb      	str	r3, [r7, #24]
 8009b8e:	e003      	b.n	8009b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b94:	2300      	movs	r3, #0
 8009b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ba0:	e02a      	b.n	8009bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fc2b 	bl	800a408 <UART_WaitOnFlagUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e036      	b.n	8009c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10b      	bne.n	8009bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	e007      	b.n	8009bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	781a      	ldrb	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	3301      	adds	r3, #1
 8009be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1cf      	bne.n	8009ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2140      	movs	r1, #64	; 0x40
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 fbfb 	bl	800a408 <UART_WaitOnFlagUntilTimeout>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e006      	b.n	8009c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e000      	b.n	8009c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009c28:	2302      	movs	r3, #2
  }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3720      	adds	r7, #32
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	d11d      	bne.n	8009c88 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_UART_Receive_DMA+0x26>
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e016      	b.n	8009c8a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Receive_DMA+0x38>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e00f      	b.n	8009c8a <HAL_UART_Receive_DMA+0x58>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c78:	88fb      	ldrh	r3, [r7, #6]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 fc30 	bl	800a4e4 <UART_Start_Receive_DMA>
 8009c84:	4603      	mov	r3, r0
 8009c86:	e000      	b.n	8009c8a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c88:	2302      	movs	r3, #2
  }
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b0ba      	sub	sp, #232	; 0xe8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10f      	bne.n	8009cfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d009      	beq.n	8009cfa <HAL_UART_IRQHandler+0x66>
 8009ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fd9b 	bl	800a82e <UART_Receive_IT>
      return;
 8009cf8:	e256      	b.n	800a1a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 80de 	beq.w	8009ec0 <HAL_UART_IRQHandler+0x22c>
 8009d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d106      	bne.n	8009d1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80d1 	beq.w	8009ec0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <HAL_UART_IRQHandler+0xae>
 8009d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d005      	beq.n	8009d42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f043 0201 	orr.w	r2, r3, #1
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <HAL_UART_IRQHandler+0xd2>
 8009d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d005      	beq.n	8009d66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	f043 0202 	orr.w	r2, r3, #2
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <HAL_UART_IRQHandler+0xf6>
 8009d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d005      	beq.n	8009d8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	f043 0204 	orr.w	r2, r3, #4
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d8e:	f003 0308 	and.w	r3, r3, #8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d011      	beq.n	8009dba <HAL_UART_IRQHandler+0x126>
 8009d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d005      	beq.n	8009dba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db2:	f043 0208 	orr.w	r2, r3, #8
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 81ed 	beq.w	800a19e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc8:	f003 0320 	and.w	r3, r3, #32
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d008      	beq.n	8009de2 <HAL_UART_IRQHandler+0x14e>
 8009dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fd26 	bl	800a82e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dec:	2b40      	cmp	r3, #64	; 0x40
 8009dee:	bf0c      	ite	eq
 8009df0:	2301      	moveq	r3, #1
 8009df2:	2300      	movne	r3, #0
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f003 0308 	and.w	r3, r3, #8
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d103      	bne.n	8009e0e <HAL_UART_IRQHandler+0x17a>
 8009e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d04f      	beq.n	8009eae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fc2e 	bl	800a670 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1e:	2b40      	cmp	r3, #64	; 0x40
 8009e20:	d141      	bne.n	8009ea6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3314      	adds	r3, #20
 8009e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3314      	adds	r3, #20
 8009e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1d9      	bne.n	8009e22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d013      	beq.n	8009e9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	4a7d      	ldr	r2, [pc, #500]	; (800a070 <HAL_UART_IRQHandler+0x3dc>)
 8009e7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fc face 	bl	8006424 <HAL_DMA_Abort_IT>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d016      	beq.n	8009ebc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9c:	e00e      	b.n	8009ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f9a4 	bl	800a1ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea4:	e00a      	b.n	8009ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f9a0 	bl	800a1ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eac:	e006      	b.n	8009ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f99c 	bl	800a1ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009eba:	e170      	b.n	800a19e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ebc:	bf00      	nop
    return;
 8009ebe:	e16e      	b.n	800a19e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	f040 814a 	bne.w	800a15e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ece:	f003 0310 	and.w	r3, r3, #16
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 8143 	beq.w	800a15e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 813c 	beq.w	800a15e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60bb      	str	r3, [r7, #8]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	60bb      	str	r3, [r7, #8]
 8009efa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f06:	2b40      	cmp	r3, #64	; 0x40
 8009f08:	f040 80b4 	bne.w	800a074 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8140 	beq.w	800a1a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	f080 8139 	bcs.w	800a1a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f42:	f000 8088 	beq.w	800a056 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	330c      	adds	r3, #12
 8009f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f82:	e841 2300 	strex	r3, r2, [r1]
 8009f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1d9      	bne.n	8009f46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3314      	adds	r3, #20
 8009f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fa4:	f023 0301 	bic.w	r3, r3, #1
 8009fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3314      	adds	r3, #20
 8009fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009fb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e1      	bne.n	8009f92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3314      	adds	r3, #20
 8009fd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3314      	adds	r3, #20
 8009fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e3      	bne.n	8009fce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2220      	movs	r2, #32
 800a00a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	330c      	adds	r3, #12
 800a01a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a026:	f023 0310 	bic.w	r3, r3, #16
 800a02a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	330c      	adds	r3, #12
 800a034:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a038:	65ba      	str	r2, [r7, #88]	; 0x58
 800a03a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a03e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a040:	e841 2300 	strex	r3, r2, [r1]
 800a044:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1e3      	bne.n	800a014 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	4618      	mov	r0, r3
 800a052:	f7fc f977 	bl	8006344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a05e:	b29b      	uxth	r3, r3
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	b29b      	uxth	r3, r3
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f8ca 	bl	800a200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a06c:	e099      	b.n	800a1a2 <HAL_UART_IRQHandler+0x50e>
 800a06e:	bf00      	nop
 800a070:	0800a737 	.word	0x0800a737
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 808b 	beq.w	800a1a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 8086 	beq.w	800a1a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	330c      	adds	r3, #12
 800a0a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	330c      	adds	r3, #12
 800a0ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a0be:	647a      	str	r2, [r7, #68]	; 0x44
 800a0c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e3      	bne.n	800a09a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3314      	adds	r3, #20
 800a0d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f023 0301 	bic.w	r3, r3, #1
 800a0e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3314      	adds	r3, #20
 800a0f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a0f6:	633a      	str	r2, [r7, #48]	; 0x30
 800a0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e3      	bne.n	800a0d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	330c      	adds	r3, #12
 800a11e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	60fb      	str	r3, [r7, #12]
   return(result);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f023 0310 	bic.w	r3, r3, #16
 800a12e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	330c      	adds	r3, #12
 800a138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a13c:	61fa      	str	r2, [r7, #28]
 800a13e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	69b9      	ldr	r1, [r7, #24]
 800a142:	69fa      	ldr	r2, [r7, #28]
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	617b      	str	r3, [r7, #20]
   return(result);
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e3      	bne.n	800a118 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f852 	bl	800a200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a15c:	e023      	b.n	800a1a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <HAL_UART_IRQHandler+0x4ea>
 800a16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 faf1 	bl	800a75e <UART_Transmit_IT>
    return;
 800a17c:	e014      	b.n	800a1a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00e      	beq.n	800a1a8 <HAL_UART_IRQHandler+0x514>
 800a18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	d008      	beq.n	800a1a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fb31 	bl	800a7fe <UART_EndTransmit_IT>
    return;
 800a19c:	e004      	b.n	800a1a8 <HAL_UART_IRQHandler+0x514>
    return;
 800a19e:	bf00      	nop
 800a1a0:	e002      	b.n	800a1a8 <HAL_UART_IRQHandler+0x514>
      return;
 800a1a2:	bf00      	nop
 800a1a4:	e000      	b.n	800a1a8 <HAL_UART_IRQHandler+0x514>
      return;
 800a1a6:	bf00      	nop
  }
}
 800a1a8:	37e8      	adds	r7, #232	; 0xe8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop

0800a1b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b09c      	sub	sp, #112	; 0x70
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a230:	2b00      	cmp	r3, #0
 800a232:	d172      	bne.n	800a31a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a236:	2200      	movs	r2, #0
 800a238:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a23a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	330c      	adds	r3, #12
 800a240:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a244:	e853 3f00 	ldrex	r3, [r3]
 800a248:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a24c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a250:	66bb      	str	r3, [r7, #104]	; 0x68
 800a252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	330c      	adds	r3, #12
 800a258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a25a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a25c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a262:	e841 2300 	strex	r3, r2, [r1]
 800a266:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1e5      	bne.n	800a23a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a26e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3314      	adds	r3, #20
 800a274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	e853 3f00 	ldrex	r3, [r3]
 800a27c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a280:	f023 0301 	bic.w	r3, r3, #1
 800a284:	667b      	str	r3, [r7, #100]	; 0x64
 800a286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3314      	adds	r3, #20
 800a28c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a28e:	647a      	str	r2, [r7, #68]	; 0x44
 800a290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e5      	bne.n	800a26e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3314      	adds	r3, #20
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3314      	adds	r3, #20
 800a2c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2c2:	633a      	str	r2, [r7, #48]	; 0x30
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e5      	bne.n	800a2a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d119      	bne.n	800a31a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	330c      	adds	r3, #12
 800a2ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f023 0310 	bic.w	r3, r3, #16
 800a2fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	330c      	adds	r3, #12
 800a304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a306:	61fa      	str	r2, [r7, #28]
 800a308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	69b9      	ldr	r1, [r7, #24]
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	617b      	str	r3, [r7, #20]
   return(result);
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e5      	bne.n	800a2e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d106      	bne.n	800a330 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a326:	4619      	mov	r1, r3
 800a328:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a32a:	f7ff ff69 	bl	800a200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a32e:	e002      	b.n	800a336 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a330:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a332:	f7ff ff47 	bl	800a1c4 <HAL_UART_RxCpltCallback>
}
 800a336:	bf00      	nop
 800a338:	3770      	adds	r7, #112	; 0x70
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a350:	2b01      	cmp	r3, #1
 800a352:	d108      	bne.n	800a366 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a358:	085b      	lsrs	r3, r3, #1
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4619      	mov	r1, r3
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff ff4e 	bl	800a200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a364:	e002      	b.n	800a36c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f7ff ff36 	bl	800a1d8 <HAL_UART_RxHalfCpltCallback>
}
 800a36c:	bf00      	nop
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a390:	2b80      	cmp	r3, #128	; 0x80
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b21      	cmp	r3, #33	; 0x21
 800a3a6:	d108      	bne.n	800a3ba <UART_DMAError+0x46>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d005      	beq.n	800a3ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a3b4:	68b8      	ldr	r0, [r7, #8]
 800a3b6:	f000 f933 	bl	800a620 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c4:	2b40      	cmp	r3, #64	; 0x40
 800a3c6:	bf0c      	ite	eq
 800a3c8:	2301      	moveq	r3, #1
 800a3ca:	2300      	movne	r3, #0
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b22      	cmp	r3, #34	; 0x22
 800a3da:	d108      	bne.n	800a3ee <UART_DMAError+0x7a>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d005      	beq.n	800a3ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a3e8:	68b8      	ldr	r0, [r7, #8]
 800a3ea:	f000 f941 	bl	800a670 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f2:	f043 0210 	orr.w	r2, r3, #16
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3fa:	68b8      	ldr	r0, [r7, #8]
 800a3fc:	f7ff fef6 	bl	800a1ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a400:	bf00      	nop
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b090      	sub	sp, #64	; 0x40
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	4613      	mov	r3, r2
 800a416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a418:	e050      	b.n	800a4bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d04c      	beq.n	800a4bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a424:	2b00      	cmp	r3, #0
 800a426:	d007      	beq.n	800a438 <UART_WaitOnFlagUntilTimeout+0x30>
 800a428:	f7fb f922 	bl	8005670 <HAL_GetTick>
 800a42c:	4602      	mov	r2, r0
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a434:	429a      	cmp	r2, r3
 800a436:	d241      	bcs.n	800a4bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	330c      	adds	r3, #12
 800a43e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	330c      	adds	r3, #12
 800a456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a458:	637a      	str	r2, [r7, #52]	; 0x34
 800a45a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a45e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e5      	bne.n	800a438 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3314      	adds	r3, #20
 800a472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	613b      	str	r3, [r7, #16]
   return(result);
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f023 0301 	bic.w	r3, r3, #1
 800a482:	63bb      	str	r3, [r7, #56]	; 0x38
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3314      	adds	r3, #20
 800a48a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a48c:	623a      	str	r2, [r7, #32]
 800a48e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	69f9      	ldr	r1, [r7, #28]
 800a492:	6a3a      	ldr	r2, [r7, #32]
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	61bb      	str	r3, [r7, #24]
   return(result);
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e5      	bne.n	800a46c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e00f      	b.n	800a4dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	bf0c      	ite	eq
 800a4cc:	2301      	moveq	r3, #1
 800a4ce:	2300      	movne	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d09f      	beq.n	800a41a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3740      	adds	r7, #64	; 0x40
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b098      	sub	sp, #96	; 0x60
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	88fa      	ldrh	r2, [r7, #6]
 800a4fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2222      	movs	r2, #34	; 0x22
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	4a40      	ldr	r2, [pc, #256]	; (800a614 <UART_Start_Receive_DMA+0x130>)
 800a512:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	4a3f      	ldr	r2, [pc, #252]	; (800a618 <UART_Start_Receive_DMA+0x134>)
 800a51a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	4a3e      	ldr	r2, [pc, #248]	; (800a61c <UART_Start_Receive_DMA+0x138>)
 800a522:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a528:	2200      	movs	r2, #0
 800a52a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a52c:	f107 0308 	add.w	r3, r7, #8
 800a530:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	88fb      	ldrh	r3, [r7, #6]
 800a544:	f7fb fea6 	bl	8006294 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a548:	2300      	movs	r3, #0
 800a54a:	613b      	str	r3, [r7, #16]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	613b      	str	r3, [r7, #16]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	613b      	str	r3, [r7, #16]
 800a55c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d019      	beq.n	800a5a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	330c      	adds	r3, #12
 800a574:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a584:	65bb      	str	r3, [r7, #88]	; 0x58
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	330c      	adds	r3, #12
 800a58c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a58e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a590:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e5      	bne.n	800a56e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3314      	adds	r3, #20
 800a5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	f043 0301 	orr.w	r3, r3, #1
 800a5b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3314      	adds	r3, #20
 800a5c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5c2:	63ba      	str	r2, [r7, #56]	; 0x38
 800a5c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a5c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e5      	bne.n	800a5a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3314      	adds	r3, #20
 800a5dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	e853 3f00 	ldrex	r3, [r3]
 800a5e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ec:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3314      	adds	r3, #20
 800a5f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5f6:	627a      	str	r2, [r7, #36]	; 0x24
 800a5f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fa:	6a39      	ldr	r1, [r7, #32]
 800a5fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fe:	e841 2300 	strex	r3, r2, [r1]
 800a602:	61fb      	str	r3, [r7, #28]
   return(result);
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e5      	bne.n	800a5d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3760      	adds	r7, #96	; 0x60
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	0800a219 	.word	0x0800a219
 800a618:	0800a33f 	.word	0x0800a33f
 800a61c:	0800a375 	.word	0x0800a375

0800a620 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a620:	b480      	push	{r7}
 800a622:	b089      	sub	sp, #36	; 0x24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	330c      	adds	r3, #12
 800a62e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	e853 3f00 	ldrex	r3, [r3]
 800a636:	60bb      	str	r3, [r7, #8]
   return(result);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a63e:	61fb      	str	r3, [r7, #28]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	330c      	adds	r3, #12
 800a646:	69fa      	ldr	r2, [r7, #28]
 800a648:	61ba      	str	r2, [r7, #24]
 800a64a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64c:	6979      	ldr	r1, [r7, #20]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	e841 2300 	strex	r3, r2, [r1]
 800a654:	613b      	str	r3, [r7, #16]
   return(result);
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e5      	bne.n	800a628 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a664:	bf00      	nop
 800a666:	3724      	adds	r7, #36	; 0x24
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a670:	b480      	push	{r7}
 800a672:	b095      	sub	sp, #84	; 0x54
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	330c      	adds	r3, #12
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a68e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	330c      	adds	r3, #12
 800a696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a698:	643a      	str	r2, [r7, #64]	; 0x40
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a69e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e5      	bne.n	800a678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3314      	adds	r3, #20
 800a6b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3314      	adds	r3, #20
 800a6ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6d4:	e841 2300 	strex	r3, r2, [r1]
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1e5      	bne.n	800a6ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d119      	bne.n	800a71c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	330c      	adds	r3, #12
 800a6ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	e853 3f00 	ldrex	r3, [r3]
 800a6f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f023 0310 	bic.w	r3, r3, #16
 800a6fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	330c      	adds	r3, #12
 800a706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a708:	61ba      	str	r2, [r7, #24]
 800a70a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70c:	6979      	ldr	r1, [r7, #20]
 800a70e:	69ba      	ldr	r2, [r7, #24]
 800a710:	e841 2300 	strex	r3, r2, [r1]
 800a714:	613b      	str	r3, [r7, #16]
   return(result);
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1e5      	bne.n	800a6e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a72a:	bf00      	nop
 800a72c:	3754      	adds	r7, #84	; 0x54
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f7ff fd4b 	bl	800a1ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a75e:	b480      	push	{r7}
 800a760:	b085      	sub	sp, #20
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b21      	cmp	r3, #33	; 0x21
 800a770:	d13e      	bne.n	800a7f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77a:	d114      	bne.n	800a7a6 <UART_Transmit_IT+0x48>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d110      	bne.n	800a7a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a1b      	ldr	r3, [r3, #32]
 800a788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a798:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	1c9a      	adds	r2, r3, #2
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	621a      	str	r2, [r3, #32]
 800a7a4:	e008      	b.n	800a7b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	1c59      	adds	r1, r3, #1
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	6211      	str	r1, [r2, #32]
 800a7b0:	781a      	ldrb	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10f      	bne.n	800a7ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68da      	ldr	r2, [r3, #12]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e000      	b.n	800a7f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a7f0:	2302      	movs	r3, #2
  }
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fcc6 	bl	800a1b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b08c      	sub	sp, #48	; 0x30
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b22      	cmp	r3, #34	; 0x22
 800a840:	f040 80ab 	bne.w	800a99a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a84c:	d117      	bne.n	800a87e <UART_Receive_IT+0x50>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d113      	bne.n	800a87e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	b29b      	uxth	r3, r3
 800a868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a876:	1c9a      	adds	r2, r3, #2
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	629a      	str	r2, [r3, #40]	; 0x28
 800a87c:	e026      	b.n	800a8cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a884:	2300      	movs	r3, #0
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a890:	d007      	beq.n	800a8a2 <UART_Receive_IT+0x74>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <UART_Receive_IT+0x82>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	e008      	b.n	800a8c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d15a      	bne.n	800a996 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f022 0220 	bic.w	r2, r2, #32
 800a8ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	695a      	ldr	r2, [r3, #20]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0201 	bic.w	r2, r2, #1
 800a90e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2220      	movs	r2, #32
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d135      	bne.n	800a98c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	330c      	adds	r3, #12
 800a92c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	e853 3f00 	ldrex	r3, [r3]
 800a934:	613b      	str	r3, [r7, #16]
   return(result);
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f023 0310 	bic.w	r3, r3, #16
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	330c      	adds	r3, #12
 800a944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a946:	623a      	str	r2, [r7, #32]
 800a948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94a:	69f9      	ldr	r1, [r7, #28]
 800a94c:	6a3a      	ldr	r2, [r7, #32]
 800a94e:	e841 2300 	strex	r3, r2, [r1]
 800a952:	61bb      	str	r3, [r7, #24]
   return(result);
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1e5      	bne.n	800a926 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0310 	and.w	r3, r3, #16
 800a964:	2b10      	cmp	r3, #16
 800a966:	d10a      	bne.n	800a97e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fc3b 	bl	800a200 <HAL_UARTEx_RxEventCallback>
 800a98a:	e002      	b.n	800a992 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff fc19 	bl	800a1c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	e002      	b.n	800a99c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	e000      	b.n	800a99c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a99a:	2302      	movs	r3, #2
  }
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3730      	adds	r7, #48	; 0x30
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9a8:	b0c0      	sub	sp, #256	; 0x100
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c0:	68d9      	ldr	r1, [r3, #12]
 800a9c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	ea40 0301 	orr.w	r3, r0, r1
 800a9cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a9fc:	f021 010c 	bic.w	r1, r1, #12
 800aa00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa0a:	430b      	orrs	r3, r1
 800aa0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aa1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa1e:	6999      	ldr	r1, [r3, #24]
 800aa20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	ea40 0301 	orr.w	r3, r0, r1
 800aa2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	4b8f      	ldr	r3, [pc, #572]	; (800ac70 <UART_SetConfig+0x2cc>)
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d005      	beq.n	800aa44 <UART_SetConfig+0xa0>
 800aa38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4b8d      	ldr	r3, [pc, #564]	; (800ac74 <UART_SetConfig+0x2d0>)
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d104      	bne.n	800aa4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa44:	f7fd fa56 	bl	8007ef4 <HAL_RCC_GetPCLK2Freq>
 800aa48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aa4c:	e003      	b.n	800aa56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa4e:	f7fd fa3d 	bl	8007ecc <HAL_RCC_GetPCLK1Freq>
 800aa52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa60:	f040 810c 	bne.w	800ac7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aa76:	4622      	mov	r2, r4
 800aa78:	462b      	mov	r3, r5
 800aa7a:	1891      	adds	r1, r2, r2
 800aa7c:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa7e:	415b      	adcs	r3, r3
 800aa80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa86:	4621      	mov	r1, r4
 800aa88:	eb12 0801 	adds.w	r8, r2, r1
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	eb43 0901 	adc.w	r9, r3, r1
 800aa92:	f04f 0200 	mov.w	r2, #0
 800aa96:	f04f 0300 	mov.w	r3, #0
 800aa9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aaa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aaa6:	4690      	mov	r8, r2
 800aaa8:	4699      	mov	r9, r3
 800aaaa:	4623      	mov	r3, r4
 800aaac:	eb18 0303 	adds.w	r3, r8, r3
 800aab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aab4:	462b      	mov	r3, r5
 800aab6:	eb49 0303 	adc.w	r3, r9, r3
 800aaba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aaca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aad2:	460b      	mov	r3, r1
 800aad4:	18db      	adds	r3, r3, r3
 800aad6:	653b      	str	r3, [r7, #80]	; 0x50
 800aad8:	4613      	mov	r3, r2
 800aada:	eb42 0303 	adc.w	r3, r2, r3
 800aade:	657b      	str	r3, [r7, #84]	; 0x54
 800aae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aae8:	f7f6 f8ee 	bl	8000cc8 <__aeabi_uldivmod>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4b61      	ldr	r3, [pc, #388]	; (800ac78 <UART_SetConfig+0x2d4>)
 800aaf2:	fba3 2302 	umull	r2, r3, r3, r2
 800aaf6:	095b      	lsrs	r3, r3, #5
 800aaf8:	011c      	lsls	r4, r3, #4
 800aafa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ab08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	464b      	mov	r3, r9
 800ab10:	1891      	adds	r1, r2, r2
 800ab12:	64b9      	str	r1, [r7, #72]	; 0x48
 800ab14:	415b      	adcs	r3, r3
 800ab16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	eb12 0a01 	adds.w	sl, r2, r1
 800ab22:	4649      	mov	r1, r9
 800ab24:	eb43 0b01 	adc.w	fp, r3, r1
 800ab28:	f04f 0200 	mov.w	r2, #0
 800ab2c:	f04f 0300 	mov.w	r3, #0
 800ab30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab3c:	4692      	mov	sl, r2
 800ab3e:	469b      	mov	fp, r3
 800ab40:	4643      	mov	r3, r8
 800ab42:	eb1a 0303 	adds.w	r3, sl, r3
 800ab46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab4a:	464b      	mov	r3, r9
 800ab4c:	eb4b 0303 	adc.w	r3, fp, r3
 800ab50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	18db      	adds	r3, r3, r3
 800ab6c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab6e:	4613      	mov	r3, r2
 800ab70:	eb42 0303 	adc.w	r3, r2, r3
 800ab74:	647b      	str	r3, [r7, #68]	; 0x44
 800ab76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ab7e:	f7f6 f8a3 	bl	8000cc8 <__aeabi_uldivmod>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4611      	mov	r1, r2
 800ab88:	4b3b      	ldr	r3, [pc, #236]	; (800ac78 <UART_SetConfig+0x2d4>)
 800ab8a:	fba3 2301 	umull	r2, r3, r3, r1
 800ab8e:	095b      	lsrs	r3, r3, #5
 800ab90:	2264      	movs	r2, #100	; 0x64
 800ab92:	fb02 f303 	mul.w	r3, r2, r3
 800ab96:	1acb      	subs	r3, r1, r3
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ab9e:	4b36      	ldr	r3, [pc, #216]	; (800ac78 <UART_SetConfig+0x2d4>)
 800aba0:	fba3 2302 	umull	r2, r3, r3, r2
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800abac:	441c      	add	r4, r3
 800abae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abb2:	2200      	movs	r2, #0
 800abb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800abbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800abc0:	4642      	mov	r2, r8
 800abc2:	464b      	mov	r3, r9
 800abc4:	1891      	adds	r1, r2, r2
 800abc6:	63b9      	str	r1, [r7, #56]	; 0x38
 800abc8:	415b      	adcs	r3, r3
 800abca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800abd0:	4641      	mov	r1, r8
 800abd2:	1851      	adds	r1, r2, r1
 800abd4:	6339      	str	r1, [r7, #48]	; 0x30
 800abd6:	4649      	mov	r1, r9
 800abd8:	414b      	adcs	r3, r1
 800abda:	637b      	str	r3, [r7, #52]	; 0x34
 800abdc:	f04f 0200 	mov.w	r2, #0
 800abe0:	f04f 0300 	mov.w	r3, #0
 800abe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800abe8:	4659      	mov	r1, fp
 800abea:	00cb      	lsls	r3, r1, #3
 800abec:	4651      	mov	r1, sl
 800abee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abf2:	4651      	mov	r1, sl
 800abf4:	00ca      	lsls	r2, r1, #3
 800abf6:	4610      	mov	r0, r2
 800abf8:	4619      	mov	r1, r3
 800abfa:	4603      	mov	r3, r0
 800abfc:	4642      	mov	r2, r8
 800abfe:	189b      	adds	r3, r3, r2
 800ac00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac04:	464b      	mov	r3, r9
 800ac06:	460a      	mov	r2, r1
 800ac08:	eb42 0303 	adc.w	r3, r2, r3
 800ac0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ac1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ac20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ac24:	460b      	mov	r3, r1
 800ac26:	18db      	adds	r3, r3, r3
 800ac28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	eb42 0303 	adc.w	r3, r2, r3
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ac36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ac3a:	f7f6 f845 	bl	8000cc8 <__aeabi_uldivmod>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <UART_SetConfig+0x2d4>)
 800ac44:	fba3 1302 	umull	r1, r3, r3, r2
 800ac48:	095b      	lsrs	r3, r3, #5
 800ac4a:	2164      	movs	r1, #100	; 0x64
 800ac4c:	fb01 f303 	mul.w	r3, r1, r3
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	3332      	adds	r3, #50	; 0x32
 800ac56:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <UART_SetConfig+0x2d4>)
 800ac58:	fba2 2303 	umull	r2, r3, r2, r3
 800ac5c:	095b      	lsrs	r3, r3, #5
 800ac5e:	f003 0207 	and.w	r2, r3, #7
 800ac62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4422      	add	r2, r4
 800ac6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac6c:	e106      	b.n	800ae7c <UART_SetConfig+0x4d8>
 800ac6e:	bf00      	nop
 800ac70:	40011000 	.word	0x40011000
 800ac74:	40011400 	.word	0x40011400
 800ac78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ac8e:	4642      	mov	r2, r8
 800ac90:	464b      	mov	r3, r9
 800ac92:	1891      	adds	r1, r2, r2
 800ac94:	6239      	str	r1, [r7, #32]
 800ac96:	415b      	adcs	r3, r3
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
 800ac9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac9e:	4641      	mov	r1, r8
 800aca0:	1854      	adds	r4, r2, r1
 800aca2:	4649      	mov	r1, r9
 800aca4:	eb43 0501 	adc.w	r5, r3, r1
 800aca8:	f04f 0200 	mov.w	r2, #0
 800acac:	f04f 0300 	mov.w	r3, #0
 800acb0:	00eb      	lsls	r3, r5, #3
 800acb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800acb6:	00e2      	lsls	r2, r4, #3
 800acb8:	4614      	mov	r4, r2
 800acba:	461d      	mov	r5, r3
 800acbc:	4643      	mov	r3, r8
 800acbe:	18e3      	adds	r3, r4, r3
 800acc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800acc4:	464b      	mov	r3, r9
 800acc6:	eb45 0303 	adc.w	r3, r5, r3
 800acca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800acce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800acda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800acde:	f04f 0200 	mov.w	r2, #0
 800ace2:	f04f 0300 	mov.w	r3, #0
 800ace6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800acea:	4629      	mov	r1, r5
 800acec:	008b      	lsls	r3, r1, #2
 800acee:	4621      	mov	r1, r4
 800acf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acf4:	4621      	mov	r1, r4
 800acf6:	008a      	lsls	r2, r1, #2
 800acf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800acfc:	f7f5 ffe4 	bl	8000cc8 <__aeabi_uldivmod>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4b60      	ldr	r3, [pc, #384]	; (800ae88 <UART_SetConfig+0x4e4>)
 800ad06:	fba3 2302 	umull	r2, r3, r3, r2
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	011c      	lsls	r4, r3, #4
 800ad0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ad18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ad20:	4642      	mov	r2, r8
 800ad22:	464b      	mov	r3, r9
 800ad24:	1891      	adds	r1, r2, r2
 800ad26:	61b9      	str	r1, [r7, #24]
 800ad28:	415b      	adcs	r3, r3
 800ad2a:	61fb      	str	r3, [r7, #28]
 800ad2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad30:	4641      	mov	r1, r8
 800ad32:	1851      	adds	r1, r2, r1
 800ad34:	6139      	str	r1, [r7, #16]
 800ad36:	4649      	mov	r1, r9
 800ad38:	414b      	adcs	r3, r1
 800ad3a:	617b      	str	r3, [r7, #20]
 800ad3c:	f04f 0200 	mov.w	r2, #0
 800ad40:	f04f 0300 	mov.w	r3, #0
 800ad44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad48:	4659      	mov	r1, fp
 800ad4a:	00cb      	lsls	r3, r1, #3
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad52:	4651      	mov	r1, sl
 800ad54:	00ca      	lsls	r2, r1, #3
 800ad56:	4610      	mov	r0, r2
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	189b      	adds	r3, r3, r2
 800ad60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad64:	464b      	mov	r3, r9
 800ad66:	460a      	mov	r2, r1
 800ad68:	eb42 0303 	adc.w	r3, r2, r3
 800ad6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad7c:	f04f 0200 	mov.w	r2, #0
 800ad80:	f04f 0300 	mov.w	r3, #0
 800ad84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ad88:	4649      	mov	r1, r9
 800ad8a:	008b      	lsls	r3, r1, #2
 800ad8c:	4641      	mov	r1, r8
 800ad8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad92:	4641      	mov	r1, r8
 800ad94:	008a      	lsls	r2, r1, #2
 800ad96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad9a:	f7f5 ff95 	bl	8000cc8 <__aeabi_uldivmod>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4611      	mov	r1, r2
 800ada4:	4b38      	ldr	r3, [pc, #224]	; (800ae88 <UART_SetConfig+0x4e4>)
 800ada6:	fba3 2301 	umull	r2, r3, r3, r1
 800adaa:	095b      	lsrs	r3, r3, #5
 800adac:	2264      	movs	r2, #100	; 0x64
 800adae:	fb02 f303 	mul.w	r3, r2, r3
 800adb2:	1acb      	subs	r3, r1, r3
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	3332      	adds	r3, #50	; 0x32
 800adb8:	4a33      	ldr	r2, [pc, #204]	; (800ae88 <UART_SetConfig+0x4e4>)
 800adba:	fba2 2303 	umull	r2, r3, r2, r3
 800adbe:	095b      	lsrs	r3, r3, #5
 800adc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adc4:	441c      	add	r4, r3
 800adc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adca:	2200      	movs	r2, #0
 800adcc:	673b      	str	r3, [r7, #112]	; 0x70
 800adce:	677a      	str	r2, [r7, #116]	; 0x74
 800add0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800add4:	4642      	mov	r2, r8
 800add6:	464b      	mov	r3, r9
 800add8:	1891      	adds	r1, r2, r2
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	415b      	adcs	r3, r3
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ade4:	4641      	mov	r1, r8
 800ade6:	1851      	adds	r1, r2, r1
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	4649      	mov	r1, r9
 800adec:	414b      	adcs	r3, r1
 800adee:	607b      	str	r3, [r7, #4]
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	f04f 0300 	mov.w	r3, #0
 800adf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800adfc:	4659      	mov	r1, fp
 800adfe:	00cb      	lsls	r3, r1, #3
 800ae00:	4651      	mov	r1, sl
 800ae02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae06:	4651      	mov	r1, sl
 800ae08:	00ca      	lsls	r2, r1, #3
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4603      	mov	r3, r0
 800ae10:	4642      	mov	r2, r8
 800ae12:	189b      	adds	r3, r3, r2
 800ae14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae16:	464b      	mov	r3, r9
 800ae18:	460a      	mov	r2, r1
 800ae1a:	eb42 0303 	adc.w	r3, r2, r3
 800ae1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	663b      	str	r3, [r7, #96]	; 0x60
 800ae2a:	667a      	str	r2, [r7, #100]	; 0x64
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	f04f 0300 	mov.w	r3, #0
 800ae34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ae38:	4649      	mov	r1, r9
 800ae3a:	008b      	lsls	r3, r1, #2
 800ae3c:	4641      	mov	r1, r8
 800ae3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae42:	4641      	mov	r1, r8
 800ae44:	008a      	lsls	r2, r1, #2
 800ae46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ae4a:	f7f5 ff3d 	bl	8000cc8 <__aeabi_uldivmod>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <UART_SetConfig+0x4e4>)
 800ae54:	fba3 1302 	umull	r1, r3, r3, r2
 800ae58:	095b      	lsrs	r3, r3, #5
 800ae5a:	2164      	movs	r1, #100	; 0x64
 800ae5c:	fb01 f303 	mul.w	r3, r1, r3
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	3332      	adds	r3, #50	; 0x32
 800ae66:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <UART_SetConfig+0x4e4>)
 800ae68:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6c:	095b      	lsrs	r3, r3, #5
 800ae6e:	f003 020f 	and.w	r2, r3, #15
 800ae72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4422      	add	r2, r4
 800ae7a:	609a      	str	r2, [r3, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ae82:	46bd      	mov	sp, r7
 800ae84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae88:	51eb851f 	.word	0x51eb851f

0800ae8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ae90:	4904      	ldr	r1, [pc, #16]	; (800aea4 <MX_FATFS_Init+0x18>)
 800ae92:	4805      	ldr	r0, [pc, #20]	; (800aea8 <MX_FATFS_Init+0x1c>)
 800ae94:	f003 f900 	bl	800e098 <FATFS_LinkDriver>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	4b03      	ldr	r3, [pc, #12]	; (800aeac <MX_FATFS_Init+0x20>)
 800ae9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aea0:	bf00      	nop
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20002c7c 	.word	0x20002c7c
 800aea8:	20000028 	.word	0x20000028
 800aeac:	20002c78 	.word	0x20002c78

0800aeb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aeb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	4603      	mov	r3, r0
 800aec8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	4618      	mov	r0, r3
 800aece:	f7f7 fe81 	bl	8002bd4 <SD_disk_initialize>
 800aed2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f7 ff5f 	bl	8002dac <SD_disk_status>
 800aeee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800af08:	7bf8      	ldrb	r0, [r7, #15]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	68b9      	ldr	r1, [r7, #8]
 800af10:	f7f7 ff62 	bl	8002dd8 <SD_disk_read>
 800af14:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800af2e:	7bf8      	ldrb	r0, [r7, #15]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	68b9      	ldr	r1, [r7, #8]
 800af36:	f7f7 ffb9 	bl	8002eac <SD_disk_write>
 800af3a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	603a      	str	r2, [r7, #0]
 800af4e:	71fb      	strb	r3, [r7, #7]
 800af50:	460b      	mov	r3, r1
 800af52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800af54:	79b9      	ldrb	r1, [r7, #6]
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f8 f82a 	bl	8002fb4 <SD_disk_ioctl>
 800af60:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	4a08      	ldr	r2, [pc, #32]	; (800af9c <disk_status+0x30>)
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	79fa      	ldrb	r2, [r7, #7]
 800af84:	4905      	ldr	r1, [pc, #20]	; (800af9c <disk_status+0x30>)
 800af86:	440a      	add	r2, r1
 800af88:	7a12      	ldrb	r2, [r2, #8]
 800af8a:	4610      	mov	r0, r2
 800af8c:	4798      	blx	r3
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]
  return stat;
 800af92:	7bfb      	ldrb	r3, [r7, #15]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20002ea8 	.word	0x20002ea8

0800afa0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800afae:	79fb      	ldrb	r3, [r7, #7]
 800afb0:	4a0d      	ldr	r2, [pc, #52]	; (800afe8 <disk_initialize+0x48>)
 800afb2:	5cd3      	ldrb	r3, [r2, r3]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d111      	bne.n	800afdc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	4a0b      	ldr	r2, [pc, #44]	; (800afe8 <disk_initialize+0x48>)
 800afbc:	2101      	movs	r1, #1
 800afbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800afc0:	79fb      	ldrb	r3, [r7, #7]
 800afc2:	4a09      	ldr	r2, [pc, #36]	; (800afe8 <disk_initialize+0x48>)
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	79fa      	ldrb	r2, [r7, #7]
 800afce:	4906      	ldr	r1, [pc, #24]	; (800afe8 <disk_initialize+0x48>)
 800afd0:	440a      	add	r2, r1
 800afd2:	7a12      	ldrb	r2, [r2, #8]
 800afd4:	4610      	mov	r0, r2
 800afd6:	4798      	blx	r3
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20002ea8 	.word	0x20002ea8

0800afec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800afec:	b590      	push	{r4, r7, lr}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	607a      	str	r2, [r7, #4]
 800aff6:	603b      	str	r3, [r7, #0]
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	4a0a      	ldr	r2, [pc, #40]	; (800b028 <disk_read+0x3c>)
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	689c      	ldr	r4, [r3, #8]
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	4a07      	ldr	r2, [pc, #28]	; (800b028 <disk_read+0x3c>)
 800b00c:	4413      	add	r3, r2
 800b00e:	7a18      	ldrb	r0, [r3, #8]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	47a0      	blx	r4
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	bd90      	pop	{r4, r7, pc}
 800b026:	bf00      	nop
 800b028:	20002ea8 	.word	0x20002ea8

0800b02c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b02c:	b590      	push	{r4, r7, lr}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	607a      	str	r2, [r7, #4]
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	4a0a      	ldr	r2, [pc, #40]	; (800b068 <disk_write+0x3c>)
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	68dc      	ldr	r4, [r3, #12]
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	4a07      	ldr	r2, [pc, #28]	; (800b068 <disk_write+0x3c>)
 800b04c:	4413      	add	r3, r2
 800b04e:	7a18      	ldrb	r0, [r3, #8]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	47a0      	blx	r4
 800b058:	4603      	mov	r3, r0
 800b05a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	371c      	adds	r7, #28
 800b062:	46bd      	mov	sp, r7
 800b064:	bd90      	pop	{r4, r7, pc}
 800b066:	bf00      	nop
 800b068:	20002ea8 	.word	0x20002ea8

0800b06c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	603a      	str	r2, [r7, #0]
 800b076:	71fb      	strb	r3, [r7, #7]
 800b078:	460b      	mov	r3, r1
 800b07a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b07c:	79fb      	ldrb	r3, [r7, #7]
 800b07e:	4a09      	ldr	r2, [pc, #36]	; (800b0a4 <disk_ioctl+0x38>)
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	79fa      	ldrb	r2, [r7, #7]
 800b08a:	4906      	ldr	r1, [pc, #24]	; (800b0a4 <disk_ioctl+0x38>)
 800b08c:	440a      	add	r2, r1
 800b08e:	7a10      	ldrb	r0, [r2, #8]
 800b090:	79b9      	ldrb	r1, [r7, #6]
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4798      	blx	r3
 800b096:	4603      	mov	r3, r0
 800b098:	73fb      	strb	r3, [r7, #15]
  return res;
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20002ea8 	.word	0x20002ea8

0800b0a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b0b8:	89fb      	ldrh	r3, [r7, #14]
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	b21a      	sxth	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b21b      	sxth	r3, r3
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	b21b      	sxth	r3, r3
 800b0c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b0ca:	89fb      	ldrh	r3, [r7, #14]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3303      	adds	r3, #3
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	3202      	adds	r2, #2
 800b0f0:	7812      	ldrb	r2, [r2, #0]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	021b      	lsls	r3, r3, #8
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	3201      	adds	r2, #1
 800b0fe:	7812      	ldrb	r2, [r2, #0]
 800b100:	4313      	orrs	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	7812      	ldrb	r2, [r2, #0]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b110:	68fb      	ldr	r3, [r7, #12]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	1c5a      	adds	r2, r3, #1
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	887a      	ldrh	r2, [r7, #2]
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	701a      	strb	r2, [r3, #0]
 800b136:	887b      	ldrh	r3, [r7, #2]
 800b138:	0a1b      	lsrs	r3, r3, #8
 800b13a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	887a      	ldrh	r2, [r7, #2]
 800b144:	b2d2      	uxtb	r2, r2
 800b146:	701a      	strb	r2, [r3, #0]
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	b2d2      	uxtb	r2, r2
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	0a1b      	lsrs	r3, r3, #8
 800b16e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	b2d2      	uxtb	r2, r2
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	0a1b      	lsrs	r3, r3, #8
 800b180:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	b2d2      	uxtb	r2, r2
 800b18c:	701a      	strb	r2, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	0a1b      	lsrs	r3, r3, #8
 800b192:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	607a      	str	r2, [r7, #4]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	b2d2      	uxtb	r2, r2
 800b19e:	701a      	strb	r2, [r3, #0]
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00d      	beq.n	800b1e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	1c53      	adds	r3, r2, #1
 800b1ca:	613b      	str	r3, [r7, #16]
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	1c59      	adds	r1, r3, #1
 800b1d0:	6179      	str	r1, [r7, #20]
 800b1d2:	7812      	ldrb	r2, [r2, #0]
 800b1d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	607b      	str	r3, [r7, #4]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1f1      	bne.n	800b1c6 <mem_cpy+0x1a>
	}
}
 800b1e2:	bf00      	nop
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b1ee:	b480      	push	{r7}
 800b1f0:	b087      	sub	sp, #28
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	617a      	str	r2, [r7, #20]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1f3      	bne.n	800b1fe <mem_set+0x10>
}
 800b216:	bf00      	nop
 800b218:	bf00      	nop
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b224:	b480      	push	{r7}
 800b226:	b089      	sub	sp, #36	; 0x24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	61fb      	str	r3, [r7, #28]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	61fa      	str	r2, [r7, #28]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	4619      	mov	r1, r3
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	1c5a      	adds	r2, r3, #1
 800b24a:	61ba      	str	r2, [r7, #24]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	1acb      	subs	r3, r1, r3
 800b250:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	3b01      	subs	r3, #1
 800b256:	607b      	str	r3, [r7, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <mem_cmp+0x40>
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0eb      	beq.n	800b23c <mem_cmp+0x18>

	return r;
 800b264:	697b      	ldr	r3, [r7, #20]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3724      	adds	r7, #36	; 0x24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b272:	b480      	push	{r7}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b27c:	e002      	b.n	800b284 <chk_chr+0x12>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3301      	adds	r3, #1
 800b282:	607b      	str	r3, [r7, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d005      	beq.n	800b298 <chk_chr+0x26>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	461a      	mov	r2, r3
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	4293      	cmp	r3, r2
 800b296:	d1f2      	bne.n	800b27e <chk_chr+0xc>
	return *str;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	781b      	ldrb	r3, [r3, #0]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60bb      	str	r3, [r7, #8]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	60fb      	str	r3, [r7, #12]
 800b2ba:	e029      	b.n	800b310 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b2bc:	4a27      	ldr	r2, [pc, #156]	; (800b35c <chk_lock+0xb4>)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	011b      	lsls	r3, r3, #4
 800b2c2:	4413      	add	r3, r2
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d01d      	beq.n	800b306 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b2ca:	4a24      	ldr	r2, [pc, #144]	; (800b35c <chk_lock+0xb4>)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	4413      	add	r3, r2
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d116      	bne.n	800b30a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b2dc:	4a1f      	ldr	r2, [pc, #124]	; (800b35c <chk_lock+0xb4>)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	4413      	add	r3, r2
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d10c      	bne.n	800b30a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b2f0:	4a1a      	ldr	r2, [pc, #104]	; (800b35c <chk_lock+0xb4>)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	011b      	lsls	r3, r3, #4
 800b2f6:	4413      	add	r3, r2
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b300:	429a      	cmp	r2, r3
 800b302:	d102      	bne.n	800b30a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b304:	e007      	b.n	800b316 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b306:	2301      	movs	r3, #1
 800b308:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d9d2      	bls.n	800b2bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d109      	bne.n	800b330 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d102      	bne.n	800b328 <chk_lock+0x80>
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d101      	bne.n	800b32c <chk_lock+0x84>
 800b328:	2300      	movs	r3, #0
 800b32a:	e010      	b.n	800b34e <chk_lock+0xa6>
 800b32c:	2312      	movs	r3, #18
 800b32e:	e00e      	b.n	800b34e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d108      	bne.n	800b348 <chk_lock+0xa0>
 800b336:	4a09      	ldr	r2, [pc, #36]	; (800b35c <chk_lock+0xb4>)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	4413      	add	r3, r2
 800b33e:	330c      	adds	r3, #12
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b346:	d101      	bne.n	800b34c <chk_lock+0xa4>
 800b348:	2310      	movs	r3, #16
 800b34a:	e000      	b.n	800b34e <chk_lock+0xa6>
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20002c88 	.word	0x20002c88

0800b360 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b366:	2300      	movs	r3, #0
 800b368:	607b      	str	r3, [r7, #4]
 800b36a:	e002      	b.n	800b372 <enq_lock+0x12>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3301      	adds	r3, #1
 800b370:	607b      	str	r3, [r7, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d806      	bhi.n	800b386 <enq_lock+0x26>
 800b378:	4a09      	ldr	r2, [pc, #36]	; (800b3a0 <enq_lock+0x40>)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	011b      	lsls	r3, r3, #4
 800b37e:	4413      	add	r3, r2
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1f2      	bne.n	800b36c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b02      	cmp	r3, #2
 800b38a:	bf14      	ite	ne
 800b38c:	2301      	movne	r3, #1
 800b38e:	2300      	moveq	r3, #0
 800b390:	b2db      	uxtb	r3, r3
}
 800b392:	4618      	mov	r0, r3
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	20002c88 	.word	0x20002c88

0800b3a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60fb      	str	r3, [r7, #12]
 800b3b2:	e01f      	b.n	800b3f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b3b4:	4a41      	ldr	r2, [pc, #260]	; (800b4bc <inc_lock+0x118>)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	011b      	lsls	r3, r3, #4
 800b3ba:	4413      	add	r3, r2
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d113      	bne.n	800b3ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b3c6:	4a3d      	ldr	r2, [pc, #244]	; (800b4bc <inc_lock+0x118>)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	011b      	lsls	r3, r3, #4
 800b3cc:	4413      	add	r3, r2
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d109      	bne.n	800b3ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b3da:	4a38      	ldr	r2, [pc, #224]	; (800b4bc <inc_lock+0x118>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	011b      	lsls	r3, r3, #4
 800b3e0:	4413      	add	r3, r2
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d006      	beq.n	800b3fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d9dc      	bls.n	800b3b4 <inc_lock+0x10>
 800b3fa:	e000      	b.n	800b3fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b3fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2b02      	cmp	r3, #2
 800b402:	d132      	bne.n	800b46a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b404:	2300      	movs	r3, #0
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	e002      	b.n	800b410 <inc_lock+0x6c>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3301      	adds	r3, #1
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d806      	bhi.n	800b424 <inc_lock+0x80>
 800b416:	4a29      	ldr	r2, [pc, #164]	; (800b4bc <inc_lock+0x118>)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	011b      	lsls	r3, r3, #4
 800b41c:	4413      	add	r3, r2
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1f2      	bne.n	800b40a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b02      	cmp	r3, #2
 800b428:	d101      	bne.n	800b42e <inc_lock+0x8a>
 800b42a:	2300      	movs	r3, #0
 800b42c:	e040      	b.n	800b4b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	4922      	ldr	r1, [pc, #136]	; (800b4bc <inc_lock+0x118>)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	440b      	add	r3, r1
 800b43a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689a      	ldr	r2, [r3, #8]
 800b440:	491e      	ldr	r1, [pc, #120]	; (800b4bc <inc_lock+0x118>)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	440b      	add	r3, r1
 800b448:	3304      	adds	r3, #4
 800b44a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	695a      	ldr	r2, [r3, #20]
 800b450:	491a      	ldr	r1, [pc, #104]	; (800b4bc <inc_lock+0x118>)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	011b      	lsls	r3, r3, #4
 800b456:	440b      	add	r3, r1
 800b458:	3308      	adds	r3, #8
 800b45a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b45c:	4a17      	ldr	r2, [pc, #92]	; (800b4bc <inc_lock+0x118>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	4413      	add	r3, r2
 800b464:	330c      	adds	r3, #12
 800b466:	2200      	movs	r2, #0
 800b468:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d009      	beq.n	800b484 <inc_lock+0xe0>
 800b470:	4a12      	ldr	r2, [pc, #72]	; (800b4bc <inc_lock+0x118>)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	4413      	add	r3, r2
 800b478:	330c      	adds	r3, #12
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <inc_lock+0xe0>
 800b480:	2300      	movs	r3, #0
 800b482:	e015      	b.n	800b4b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d108      	bne.n	800b49c <inc_lock+0xf8>
 800b48a:	4a0c      	ldr	r2, [pc, #48]	; (800b4bc <inc_lock+0x118>)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	4413      	add	r3, r2
 800b492:	330c      	adds	r3, #12
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	3301      	adds	r3, #1
 800b498:	b29a      	uxth	r2, r3
 800b49a:	e001      	b.n	800b4a0 <inc_lock+0xfc>
 800b49c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4a0:	4906      	ldr	r1, [pc, #24]	; (800b4bc <inc_lock+0x118>)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	011b      	lsls	r3, r3, #4
 800b4a6:	440b      	add	r3, r1
 800b4a8:	330c      	adds	r3, #12
 800b4aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3301      	adds	r3, #1
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	20002c88 	.word	0x20002c88

0800b4c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	607b      	str	r3, [r7, #4]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d825      	bhi.n	800b520 <dec_lock+0x60>
		n = Files[i].ctr;
 800b4d4:	4a17      	ldr	r2, [pc, #92]	; (800b534 <dec_lock+0x74>)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	011b      	lsls	r3, r3, #4
 800b4da:	4413      	add	r3, r2
 800b4dc:	330c      	adds	r3, #12
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b4e2:	89fb      	ldrh	r3, [r7, #14]
 800b4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e8:	d101      	bne.n	800b4ee <dec_lock+0x2e>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b4ee:	89fb      	ldrh	r3, [r7, #14]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <dec_lock+0x3a>
 800b4f4:	89fb      	ldrh	r3, [r7, #14]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b4fa:	4a0e      	ldr	r2, [pc, #56]	; (800b534 <dec_lock+0x74>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	4413      	add	r3, r2
 800b502:	330c      	adds	r3, #12
 800b504:	89fa      	ldrh	r2, [r7, #14]
 800b506:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b508:	89fb      	ldrh	r3, [r7, #14]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d105      	bne.n	800b51a <dec_lock+0x5a>
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <dec_lock+0x74>)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	011b      	lsls	r3, r3, #4
 800b514:	4413      	add	r3, r2
 800b516:	2200      	movs	r2, #0
 800b518:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	737b      	strb	r3, [r7, #13]
 800b51e:	e001      	b.n	800b524 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b520:	2302      	movs	r3, #2
 800b522:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b524:	7b7b      	ldrb	r3, [r7, #13]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20002c88 	.word	0x20002c88

0800b538 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b540:	2300      	movs	r3, #0
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	e010      	b.n	800b568 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b546:	4a0d      	ldr	r2, [pc, #52]	; (800b57c <clear_lock+0x44>)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	011b      	lsls	r3, r3, #4
 800b54c:	4413      	add	r3, r2
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	429a      	cmp	r2, r3
 800b554:	d105      	bne.n	800b562 <clear_lock+0x2a>
 800b556:	4a09      	ldr	r2, [pc, #36]	; (800b57c <clear_lock+0x44>)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	4413      	add	r3, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3301      	adds	r3, #1
 800b566:	60fb      	str	r3, [r7, #12]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d9eb      	bls.n	800b546 <clear_lock+0xe>
	}
}
 800b56e:	bf00      	nop
 800b570:	bf00      	nop
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20002c88 	.word	0x20002c88

0800b580 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	78db      	ldrb	r3, [r3, #3]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d034      	beq.n	800b5fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b598:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	7858      	ldrb	r0, [r3, #1]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	f7ff fd40 	bl	800b02c <disk_write>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d002      	beq.n	800b5b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	73fb      	strb	r3, [r7, #15]
 800b5b6:	e022      	b.n	800b5fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	1ad2      	subs	r2, r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d217      	bcs.n	800b5fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	789b      	ldrb	r3, [r3, #2]
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	e010      	b.n	800b5f8 <sync_window+0x78>
					wsect += fs->fsize;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	4413      	add	r3, r2
 800b5de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	7858      	ldrb	r0, [r3, #1]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	f7ff fd1d 	bl	800b02c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	613b      	str	r3, [r7, #16]
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d8eb      	bhi.n	800b5d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d01b      	beq.n	800b658 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ffad 	bl	800b580 <sync_window>
 800b626:	4603      	mov	r3, r0
 800b628:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d113      	bne.n	800b658 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7858      	ldrb	r0, [r3, #1]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b63a:	2301      	movs	r3, #1
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	f7ff fcd5 	bl	800afec <disk_read>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d004      	beq.n	800b652 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b648:	f04f 33ff 	mov.w	r3, #4294967295
 800b64c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b64e:	2301      	movs	r3, #1
 800b650:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	683a      	ldr	r2, [r7, #0]
 800b656:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff ff87 	bl	800b580 <sync_window>
 800b672:	4603      	mov	r3, r0
 800b674:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d159      	bne.n	800b730 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b03      	cmp	r3, #3
 800b682:	d149      	bne.n	800b718 <sync_fs+0xb4>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	791b      	ldrb	r3, [r3, #4]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d145      	bne.n	800b718 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	899b      	ldrh	r3, [r3, #12]
 800b696:	461a      	mov	r2, r3
 800b698:	2100      	movs	r1, #0
 800b69a:	f7ff fda8 	bl	800b1ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3338      	adds	r3, #56	; 0x38
 800b6a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fd37 	bl	800b11e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3338      	adds	r3, #56	; 0x38
 800b6b4:	4921      	ldr	r1, [pc, #132]	; (800b73c <sync_fs+0xd8>)
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7ff fd4c 	bl	800b154 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3338      	adds	r3, #56	; 0x38
 800b6c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b6c4:	491e      	ldr	r1, [pc, #120]	; (800b740 <sync_fs+0xdc>)
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7ff fd44 	bl	800b154 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3338      	adds	r3, #56	; 0x38
 800b6d0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4610      	mov	r0, r2
 800b6dc:	f7ff fd3a 	bl	800b154 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3338      	adds	r3, #56	; 0x38
 800b6e4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	695b      	ldr	r3, [r3, #20]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f7ff fd30 	bl	800b154 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	7858      	ldrb	r0, [r3, #1]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b70c:	2301      	movs	r3, #1
 800b70e:	f7ff fc8d 	bl	800b02c <disk_write>
			fs->fsi_flag = 0;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	785b      	ldrb	r3, [r3, #1]
 800b71c:	2200      	movs	r2, #0
 800b71e:	2100      	movs	r1, #0
 800b720:	4618      	mov	r0, r3
 800b722:	f7ff fca3 	bl	800b06c <disk_ioctl>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <sync_fs+0xcc>
 800b72c:	2301      	movs	r3, #1
 800b72e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	41615252 	.word	0x41615252
 800b740:	61417272 	.word	0x61417272

0800b744 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	3b02      	subs	r3, #2
 800b752:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	3b02      	subs	r3, #2
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d301      	bcc.n	800b764 <clust2sect+0x20>
 800b760:	2300      	movs	r3, #0
 800b762:	e008      	b.n	800b776 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	895b      	ldrh	r3, [r3, #10]
 800b768:	461a      	mov	r2, r3
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	fb03 f202 	mul.w	r2, r3, r2
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b774:	4413      	add	r3, r2
}
 800b776:	4618      	mov	r0, r3
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b086      	sub	sp, #24
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d904      	bls.n	800b7a2 <get_fat+0x20>
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	69db      	ldr	r3, [r3, #28]
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d302      	bcc.n	800b7a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	617b      	str	r3, [r7, #20]
 800b7a6:	e0bb      	b.n	800b920 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	f000 8083 	beq.w	800b8be <get_fat+0x13c>
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	f300 80a7 	bgt.w	800b90c <get_fat+0x18a>
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d002      	beq.n	800b7c8 <get_fat+0x46>
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d056      	beq.n	800b874 <get_fat+0xf2>
 800b7c6:	e0a1      	b.n	800b90c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	085b      	lsrs	r3, r3, #1
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	899b      	ldrh	r3, [r3, #12]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7e6:	4413      	add	r3, r2
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6938      	ldr	r0, [r7, #16]
 800b7ec:	f7ff ff0c 	bl	800b608 <move_window>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f040 808d 	bne.w	800b912 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	60fa      	str	r2, [r7, #12]
 800b7fe:	693a      	ldr	r2, [r7, #16]
 800b800:	8992      	ldrh	r2, [r2, #12]
 800b802:	fbb3 f1f2 	udiv	r1, r3, r2
 800b806:	fb01 f202 	mul.w	r2, r1, r2
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4413      	add	r3, r2
 800b810:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b814:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	899b      	ldrh	r3, [r3, #12]
 800b81e:	4619      	mov	r1, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	fbb3 f3f1 	udiv	r3, r3, r1
 800b826:	4413      	add	r3, r2
 800b828:	4619      	mov	r1, r3
 800b82a:	6938      	ldr	r0, [r7, #16]
 800b82c:	f7ff feec 	bl	800b608 <move_window>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d16f      	bne.n	800b916 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	899b      	ldrh	r3, [r3, #12]
 800b83a:	461a      	mov	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b842:	fb01 f202 	mul.w	r2, r1, r2
 800b846:	1a9b      	subs	r3, r3, r2
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	4413      	add	r3, r2
 800b84c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	461a      	mov	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	4313      	orrs	r3, r2
 800b858:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <get_fat+0xe8>
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	091b      	lsrs	r3, r3, #4
 800b868:	e002      	b.n	800b870 <get_fat+0xee>
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b870:	617b      	str	r3, [r7, #20]
			break;
 800b872:	e055      	b.n	800b920 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	899b      	ldrh	r3, [r3, #12]
 800b87c:	085b      	lsrs	r3, r3, #1
 800b87e:	b29b      	uxth	r3, r3
 800b880:	4619      	mov	r1, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	fbb3 f3f1 	udiv	r3, r3, r1
 800b888:	4413      	add	r3, r2
 800b88a:	4619      	mov	r1, r3
 800b88c:	6938      	ldr	r0, [r7, #16]
 800b88e:	f7ff febb 	bl	800b608 <move_window>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d140      	bne.n	800b91a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	8992      	ldrh	r2, [r2, #12]
 800b8a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8aa:	fb00 f202 	mul.w	r2, r0, r2
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	440b      	add	r3, r1
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff fbf8 	bl	800b0a8 <ld_word>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	617b      	str	r3, [r7, #20]
			break;
 800b8bc:	e030      	b.n	800b920 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	899b      	ldrh	r3, [r3, #12]
 800b8c6:	089b      	lsrs	r3, r3, #2
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8d2:	4413      	add	r3, r2
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6938      	ldr	r0, [r7, #16]
 800b8d8:	f7ff fe96 	bl	800b608 <move_window>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d11d      	bne.n	800b91e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	8992      	ldrh	r2, [r2, #12]
 800b8f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8f4:	fb00 f202 	mul.w	r2, r0, r2
 800b8f8:	1a9b      	subs	r3, r3, r2
 800b8fa:	440b      	add	r3, r1
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fbeb 	bl	800b0d8 <ld_dword>
 800b902:	4603      	mov	r3, r0
 800b904:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b908:	617b      	str	r3, [r7, #20]
			break;
 800b90a:	e009      	b.n	800b920 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b90c:	2301      	movs	r3, #1
 800b90e:	617b      	str	r3, [r7, #20]
 800b910:	e006      	b.n	800b920 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b912:	bf00      	nop
 800b914:	e004      	b.n	800b920 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b916:	bf00      	nop
 800b918:	e002      	b.n	800b920 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b91a:	bf00      	nop
 800b91c:	e000      	b.n	800b920 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b91e:	bf00      	nop
		}
	}

	return val;
 800b920:	697b      	ldr	r3, [r7, #20]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b92a:	b590      	push	{r4, r7, lr}
 800b92c:	b089      	sub	sp, #36	; 0x24
 800b92e:	af00      	add	r7, sp, #0
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b936:	2302      	movs	r3, #2
 800b938:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	f240 8109 	bls.w	800bb54 <put_fat+0x22a>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	69db      	ldr	r3, [r3, #28]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	429a      	cmp	r2, r3
 800b94a:	f080 8103 	bcs.w	800bb54 <put_fat+0x22a>
		switch (fs->fs_type) {
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b03      	cmp	r3, #3
 800b954:	f000 80b6 	beq.w	800bac4 <put_fat+0x19a>
 800b958:	2b03      	cmp	r3, #3
 800b95a:	f300 80fb 	bgt.w	800bb54 <put_fat+0x22a>
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d003      	beq.n	800b96a <put_fat+0x40>
 800b962:	2b02      	cmp	r3, #2
 800b964:	f000 8083 	beq.w	800ba6e <put_fat+0x144>
 800b968:	e0f4      	b.n	800bb54 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	61bb      	str	r3, [r7, #24]
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	085b      	lsrs	r3, r3, #1
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	4413      	add	r3, r2
 800b976:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	899b      	ldrh	r3, [r3, #12]
 800b980:	4619      	mov	r1, r3
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	fbb3 f3f1 	udiv	r3, r3, r1
 800b988:	4413      	add	r3, r2
 800b98a:	4619      	mov	r1, r3
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff fe3b 	bl	800b608 <move_window>
 800b992:	4603      	mov	r3, r0
 800b994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b996:	7ffb      	ldrb	r3, [r7, #31]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 80d4 	bne.w	800bb46 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	61ba      	str	r2, [r7, #24]
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	8992      	ldrh	r2, [r2, #12]
 800b9ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9b2:	fb00 f202 	mul.w	r2, r0, r2
 800b9b6:	1a9b      	subs	r3, r3, r2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00d      	beq.n	800b9e2 <put_fat+0xb8>
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	b25b      	sxtb	r3, r3
 800b9cc:	f003 030f 	and.w	r3, r3, #15
 800b9d0:	b25a      	sxtb	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	b25b      	sxtb	r3, r3
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	b25b      	sxtb	r3, r3
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	e001      	b.n	800b9e6 <put_fat+0xbc>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	899b      	ldrh	r3, [r3, #12]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba00:	4413      	add	r3, r2
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7ff fdff 	bl	800b608 <move_window>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba0e:	7ffb      	ldrb	r3, [r7, #31]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f040 809a 	bne.w	800bb4a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	899b      	ldrh	r3, [r3, #12]
 800ba20:	461a      	mov	r2, r3
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba28:	fb00 f202 	mul.w	r2, r0, r2
 800ba2c:	1a9b      	subs	r3, r3, r2
 800ba2e:	440b      	add	r3, r1
 800ba30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	f003 0301 	and.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <put_fat+0x11a>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	091b      	lsrs	r3, r3, #4
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	e00e      	b.n	800ba62 <put_fat+0x138>
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	b25b      	sxtb	r3, r3
 800ba4a:	f023 030f 	bic.w	r3, r3, #15
 800ba4e:	b25a      	sxtb	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	0a1b      	lsrs	r3, r3, #8
 800ba54:	b25b      	sxtb	r3, r3
 800ba56:	f003 030f 	and.w	r3, r3, #15
 800ba5a:	b25b      	sxtb	r3, r3
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	b25b      	sxtb	r3, r3
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	70da      	strb	r2, [r3, #3]
			break;
 800ba6c:	e072      	b.n	800bb54 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	085b      	lsrs	r3, r3, #1
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba82:	4413      	add	r3, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff fdbe 	bl	800b608 <move_window>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba90:	7ffb      	ldrb	r3, [r7, #31]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d15b      	bne.n	800bb4e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	8992      	ldrh	r2, [r2, #12]
 800baa4:	fbb3 f0f2 	udiv	r0, r3, r2
 800baa8:	fb00 f202 	mul.w	r2, r0, r2
 800baac:	1a9b      	subs	r3, r3, r2
 800baae:	440b      	add	r3, r1
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	b292      	uxth	r2, r2
 800bab4:	4611      	mov	r1, r2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff fb31 	bl	800b11e <st_word>
			fs->wflag = 1;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2201      	movs	r2, #1
 800bac0:	70da      	strb	r2, [r3, #3]
			break;
 800bac2:	e047      	b.n	800bb54 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	899b      	ldrh	r3, [r3, #12]
 800bacc:	089b      	lsrs	r3, r3, #2
 800bace:	b29b      	uxth	r3, r3
 800bad0:	4619      	mov	r1, r3
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	fbb3 f3f1 	udiv	r3, r3, r1
 800bad8:	4413      	add	r3, r2
 800bada:	4619      	mov	r1, r3
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7ff fd93 	bl	800b608 <move_window>
 800bae2:	4603      	mov	r3, r0
 800bae4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bae6:	7ffb      	ldrb	r3, [r7, #31]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d132      	bne.n	800bb52 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	8992      	ldrh	r2, [r2, #12]
 800bb00:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb04:	fb00 f202 	mul.w	r2, r0, r2
 800bb08:	1a9b      	subs	r3, r3, r2
 800bb0a:	440b      	add	r3, r1
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fae3 	bl	800b0d8 <ld_dword>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb18:	4323      	orrs	r3, r4
 800bb1a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	8992      	ldrh	r2, [r2, #12]
 800bb2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb2e:	fb00 f202 	mul.w	r2, r0, r2
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	440b      	add	r3, r1
 800bb36:	6879      	ldr	r1, [r7, #4]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fb0b 	bl	800b154 <st_dword>
			fs->wflag = 1;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2201      	movs	r2, #1
 800bb42:	70da      	strb	r2, [r3, #3]
			break;
 800bb44:	e006      	b.n	800bb54 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bb46:	bf00      	nop
 800bb48:	e004      	b.n	800bb54 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bb4a:	bf00      	nop
 800bb4c:	e002      	b.n	800bb54 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bb4e:	bf00      	nop
 800bb50:	e000      	b.n	800bb54 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bb52:	bf00      	nop
		}
	}
	return res;
 800bb54:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3724      	adds	r7, #36	; 0x24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd90      	pop	{r4, r7, pc}

0800bb5e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b088      	sub	sp, #32
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d904      	bls.n	800bb84 <remove_chain+0x26>
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d301      	bcc.n	800bb88 <remove_chain+0x2a>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e04b      	b.n	800bc20 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00c      	beq.n	800bba8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	69b8      	ldr	r0, [r7, #24]
 800bb96:	f7ff fec8 	bl	800b92a <put_fat>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb9e:	7ffb      	ldrb	r3, [r7, #31]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <remove_chain+0x4a>
 800bba4:	7ffb      	ldrb	r3, [r7, #31]
 800bba6:	e03b      	b.n	800bc20 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f7ff fde9 	bl	800b782 <get_fat>
 800bbb0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d031      	beq.n	800bc1c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d101      	bne.n	800bbc2 <remove_chain+0x64>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	e02e      	b.n	800bc20 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d101      	bne.n	800bbce <remove_chain+0x70>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e028      	b.n	800bc20 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bbce:	2200      	movs	r2, #0
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	69b8      	ldr	r0, [r7, #24]
 800bbd4:	f7ff fea9 	bl	800b92a <put_fat>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bbdc:	7ffb      	ldrb	r3, [r7, #31]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <remove_chain+0x88>
 800bbe2:	7ffb      	ldrb	r3, [r7, #31]
 800bbe4:	e01c      	b.n	800bc20 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	699a      	ldr	r2, [r3, #24]
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	69db      	ldr	r3, [r3, #28]
 800bbee:	3b02      	subs	r3, #2
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d20b      	bcs.n	800bc0c <remove_chain+0xae>
			fs->free_clst++;
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	791b      	ldrb	r3, [r3, #4]
 800bc02:	f043 0301 	orr.w	r3, r3, #1
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d3c6      	bcc.n	800bba8 <remove_chain+0x4a>
 800bc1a:	e000      	b.n	800bc1e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bc1c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3720      	adds	r7, #32
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10d      	bne.n	800bc5a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d004      	beq.n	800bc54 <create_chain+0x2c>
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	69db      	ldr	r3, [r3, #28]
 800bc4e:	69ba      	ldr	r2, [r7, #24]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d31b      	bcc.n	800bc8c <create_chain+0x64>
 800bc54:	2301      	movs	r3, #1
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	e018      	b.n	800bc8c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff fd90 	bl	800b782 <get_fat>
 800bc62:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d801      	bhi.n	800bc6e <create_chain+0x46>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e070      	b.n	800bd50 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc74:	d101      	bne.n	800bc7a <create_chain+0x52>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	e06a      	b.n	800bd50 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d201      	bcs.n	800bc88 <create_chain+0x60>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	e063      	b.n	800bd50 <create_chain+0x128>
		scl = clst;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	3301      	adds	r3, #1
 800bc94:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	69db      	ldr	r3, [r3, #28]
 800bc9a:	69fa      	ldr	r2, [r7, #28]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d307      	bcc.n	800bcb0 <create_chain+0x88>
				ncl = 2;
 800bca0:	2302      	movs	r3, #2
 800bca2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bca4:	69fa      	ldr	r2, [r7, #28]
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d901      	bls.n	800bcb0 <create_chain+0x88>
 800bcac:	2300      	movs	r3, #0
 800bcae:	e04f      	b.n	800bd50 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bcb0:	69f9      	ldr	r1, [r7, #28]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fd65 	bl	800b782 <get_fat>
 800bcb8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00e      	beq.n	800bcde <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d003      	beq.n	800bcce <create_chain+0xa6>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bccc:	d101      	bne.n	800bcd2 <create_chain+0xaa>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	e03e      	b.n	800bd50 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bcd2:	69fa      	ldr	r2, [r7, #28]
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d1da      	bne.n	800bc90 <create_chain+0x68>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e038      	b.n	800bd50 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bcde:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bce0:	f04f 32ff 	mov.w	r2, #4294967295
 800bce4:	69f9      	ldr	r1, [r7, #28]
 800bce6:	6938      	ldr	r0, [r7, #16]
 800bce8:	f7ff fe1f 	bl	800b92a <put_fat>
 800bcec:	4603      	mov	r3, r0
 800bcee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d109      	bne.n	800bd0a <create_chain+0xe2>
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d006      	beq.n	800bd0a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bcfc:	69fa      	ldr	r2, [r7, #28]
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6938      	ldr	r0, [r7, #16]
 800bd02:	f7ff fe12 	bl	800b92a <put_fat>
 800bd06:	4603      	mov	r3, r0
 800bd08:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d116      	bne.n	800bd3e <create_chain+0x116>
		fs->last_clst = ncl;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	69fa      	ldr	r2, [r7, #28]
 800bd14:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	699a      	ldr	r2, [r3, #24]
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	3b02      	subs	r3, #2
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d804      	bhi.n	800bd2e <create_chain+0x106>
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	1e5a      	subs	r2, r3, #1
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	791b      	ldrb	r3, [r3, #4]
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	711a      	strb	r2, [r3, #4]
 800bd3c:	e007      	b.n	800bd4e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d102      	bne.n	800bd4a <create_chain+0x122>
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	e000      	b.n	800bd4c <create_chain+0x124>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bd4e:	69fb      	ldr	r3, [r7, #28]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	899b      	ldrh	r3, [r3, #12]
 800bd74:	461a      	mov	r2, r3
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	8952      	ldrh	r2, [r2, #10]
 800bd80:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd84:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	1d1a      	adds	r2, r3, #4
 800bd8a:	613a      	str	r2, [r7, #16]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <clmt_clust+0x42>
 800bd96:	2300      	movs	r3, #0
 800bd98:	e010      	b.n	800bdbc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d307      	bcc.n	800bdb2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	3304      	adds	r3, #4
 800bdae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bdb0:	e7e9      	b.n	800bd86 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bdb2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	4413      	add	r3, r2
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	371c      	adds	r7, #28
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdde:	d204      	bcs.n	800bdea <dir_sdi+0x22>
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	f003 031f 	and.w	r3, r3, #31
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <dir_sdi+0x26>
		return FR_INT_ERR;
 800bdea:	2302      	movs	r3, #2
 800bdec:	e071      	b.n	800bed2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d106      	bne.n	800be0e <dir_sdi+0x46>
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d902      	bls.n	800be0e <dir_sdi+0x46>
		clst = fs->dirbase;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10c      	bne.n	800be2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	095b      	lsrs	r3, r3, #5
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	8912      	ldrh	r2, [r2, #8]
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d301      	bcc.n	800be24 <dir_sdi+0x5c>
 800be20:	2302      	movs	r3, #2
 800be22:	e056      	b.n	800bed2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	61da      	str	r2, [r3, #28]
 800be2c:	e02d      	b.n	800be8a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	895b      	ldrh	r3, [r3, #10]
 800be32:	461a      	mov	r2, r3
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	899b      	ldrh	r3, [r3, #12]
 800be38:	fb02 f303 	mul.w	r3, r2, r3
 800be3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be3e:	e019      	b.n	800be74 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6979      	ldr	r1, [r7, #20]
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff fc9c 	bl	800b782 <get_fat>
 800be4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be52:	d101      	bne.n	800be58 <dir_sdi+0x90>
 800be54:	2301      	movs	r3, #1
 800be56:	e03c      	b.n	800bed2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d904      	bls.n	800be68 <dir_sdi+0xa0>
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	429a      	cmp	r2, r3
 800be66:	d301      	bcc.n	800be6c <dir_sdi+0xa4>
 800be68:	2302      	movs	r3, #2
 800be6a:	e032      	b.n	800bed2 <dir_sdi+0x10a>
			ofs -= csz;
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d2e1      	bcs.n	800be40 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800be7c:	6979      	ldr	r1, [r7, #20]
 800be7e:	6938      	ldr	r0, [r7, #16]
 800be80:	f7ff fc60 	bl	800b744 <clust2sect>
 800be84:	4602      	mov	r2, r0
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	69db      	ldr	r3, [r3, #28]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <dir_sdi+0xd4>
 800be98:	2302      	movs	r3, #2
 800be9a:	e01a      	b.n	800bed2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	69da      	ldr	r2, [r3, #28]
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	899b      	ldrh	r3, [r3, #12]
 800bea4:	4619      	mov	r1, r3
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	fbb3 f3f1 	udiv	r3, r3, r1
 800beac:	441a      	add	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	899b      	ldrh	r3, [r3, #12]
 800bebc:	461a      	mov	r2, r3
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bec4:	fb00 f202 	mul.w	r2, r0, r2
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	18ca      	adds	r2, r1, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3718      	adds	r7, #24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b086      	sub	sp, #24
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	3320      	adds	r3, #32
 800bef0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <dir_next+0x28>
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf00:	d301      	bcc.n	800bf06 <dir_next+0x2c>
 800bf02:	2304      	movs	r3, #4
 800bf04:	e0bb      	b.n	800c07e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	899b      	ldrh	r3, [r3, #12]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf12:	fb01 f202 	mul.w	r2, r1, r2
 800bf16:	1a9b      	subs	r3, r3, r2
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f040 809d 	bne.w	800c058 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	69db      	ldr	r3, [r3, #28]
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10b      	bne.n	800bf48 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	095b      	lsrs	r3, r3, #5
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	8912      	ldrh	r2, [r2, #8]
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	f0c0 808d 	bcc.w	800c058 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	61da      	str	r2, [r3, #28]
 800bf44:	2304      	movs	r3, #4
 800bf46:	e09a      	b.n	800c07e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	899b      	ldrh	r3, [r3, #12]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	8952      	ldrh	r2, [r2, #10]
 800bf58:	3a01      	subs	r2, #1
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d17b      	bne.n	800c058 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7ff fc0a 	bl	800b782 <get_fat>
 800bf6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d801      	bhi.n	800bf7a <dir_next+0xa0>
 800bf76:	2302      	movs	r3, #2
 800bf78:	e081      	b.n	800c07e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf80:	d101      	bne.n	800bf86 <dir_next+0xac>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e07b      	b.n	800c07e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d359      	bcc.n	800c044 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d104      	bne.n	800bfa0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	61da      	str	r2, [r3, #28]
 800bf9c:	2304      	movs	r3, #4
 800bf9e:	e06e      	b.n	800c07e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	f7ff fe3d 	bl	800bc28 <create_chain>
 800bfae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <dir_next+0xe0>
 800bfb6:	2307      	movs	r3, #7
 800bfb8:	e061      	b.n	800c07e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d101      	bne.n	800bfc4 <dir_next+0xea>
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	e05c      	b.n	800c07e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d101      	bne.n	800bfd0 <dir_next+0xf6>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e056      	b.n	800c07e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f7ff fad5 	bl	800b580 <sync_window>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <dir_next+0x106>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e04e      	b.n	800c07e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	899b      	ldrh	r3, [r3, #12]
 800bfea:	461a      	mov	r2, r3
 800bfec:	2100      	movs	r1, #0
 800bfee:	f7ff f8fe 	bl	800b1ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bff2:	2300      	movs	r3, #0
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	6979      	ldr	r1, [r7, #20]
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f7ff fba3 	bl	800b744 <clust2sect>
 800bffe:	4602      	mov	r2, r0
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	635a      	str	r2, [r3, #52]	; 0x34
 800c004:	e012      	b.n	800c02c <dir_next+0x152>
						fs->wflag = 1;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2201      	movs	r2, #1
 800c00a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f7ff fab7 	bl	800b580 <sync_window>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d001      	beq.n	800c01c <dir_next+0x142>
 800c018:	2301      	movs	r3, #1
 800c01a:	e030      	b.n	800c07e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	3301      	adds	r3, #1
 800c020:	613b      	str	r3, [r7, #16]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	635a      	str	r2, [r3, #52]	; 0x34
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	895b      	ldrh	r3, [r3, #10]
 800c030:	461a      	mov	r2, r3
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	4293      	cmp	r3, r2
 800c036:	d3e6      	bcc.n	800c006 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c04a:	6979      	ldr	r1, [r7, #20]
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f7ff fb79 	bl	800b744 <clust2sect>
 800c052:	4602      	mov	r2, r0
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	899b      	ldrh	r3, [r3, #12]
 800c068:	461a      	mov	r2, r3
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c070:	fb00 f202 	mul.w	r2, r0, r2
 800c074:	1a9b      	subs	r3, r3, r2
 800c076:	18ca      	adds	r2, r1, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b086      	sub	sp, #24
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c096:	2100      	movs	r1, #0
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff fe95 	bl	800bdc8 <dir_sdi>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d12b      	bne.n	800c100 <dir_alloc+0x7a>
		n = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7ff faa8 	bl	800b608 <move_window>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d11d      	bne.n	800c0fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2be5      	cmp	r3, #229	; 0xe5
 800c0ca:	d004      	beq.n	800c0d6 <dir_alloc+0x50>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a1b      	ldr	r3, [r3, #32]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d107      	bne.n	800c0e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	613b      	str	r3, [r7, #16]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d102      	bne.n	800c0ea <dir_alloc+0x64>
 800c0e4:	e00c      	b.n	800c100 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7ff fef4 	bl	800beda <dir_next>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d0d7      	beq.n	800c0ac <dir_alloc+0x26>
 800c0fc:	e000      	b.n	800c100 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c0fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	2b04      	cmp	r3, #4
 800c104:	d101      	bne.n	800c10a <dir_alloc+0x84>
 800c106:	2307      	movs	r3, #7
 800c108:	75fb      	strb	r3, [r7, #23]
	return res;
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	331a      	adds	r3, #26
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe ffc0 	bl	800b0a8 <ld_word>
 800c128:	4603      	mov	r3, r0
 800c12a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	2b03      	cmp	r3, #3
 800c132:	d109      	bne.n	800c148 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	3314      	adds	r3, #20
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe ffb5 	bl	800b0a8 <ld_word>
 800c13e:	4603      	mov	r3, r0
 800c140:	041b      	lsls	r3, r3, #16
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	4313      	orrs	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c148:	68fb      	ldr	r3, [r7, #12]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	331a      	adds	r3, #26
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	b292      	uxth	r2, r2
 800c166:	4611      	mov	r1, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe ffd8 	bl	800b11e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b03      	cmp	r3, #3
 800c174:	d109      	bne.n	800c18a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	f103 0214 	add.w	r2, r3, #20
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	0c1b      	lsrs	r3, r3, #16
 800c180:	b29b      	uxth	r3, r3
 800c182:	4619      	mov	r1, r3
 800c184:	4610      	mov	r0, r2
 800c186:	f7fe ffca 	bl	800b11e <st_word>
	}
}
 800c18a:	bf00      	nop
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c194:	b590      	push	{r4, r7, lr}
 800c196:	b087      	sub	sp, #28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	331a      	adds	r3, #26
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe ff80 	bl	800b0a8 <ld_word>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <cmp_lfn+0x1e>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e059      	b.n	800c266 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1ba:	1e5a      	subs	r2, r3, #1
 800c1bc:	4613      	mov	r3, r2
 800c1be:	005b      	lsls	r3, r3, #1
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	81fb      	strh	r3, [r7, #14]
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]
 800c1d0:	e033      	b.n	800c23a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c1d2:	4a27      	ldr	r2, [pc, #156]	; (800c270 <cmp_lfn+0xdc>)
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	4413      	add	r3, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe ff61 	bl	800b0a8 <ld_word>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c1ea:	89fb      	ldrh	r3, [r7, #14]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d01a      	beq.n	800c226 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	2bfe      	cmp	r3, #254	; 0xfe
 800c1f4:	d812      	bhi.n	800c21c <cmp_lfn+0x88>
 800c1f6:	89bb      	ldrh	r3, [r7, #12]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f001 ff99 	bl	800e130 <ff_wtoupper>
 800c1fe:	4603      	mov	r3, r0
 800c200:	461c      	mov	r4, r3
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	617a      	str	r2, [r7, #20]
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	4413      	add	r3, r2
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	f001 ff8d 	bl	800e130 <ff_wtoupper>
 800c216:	4603      	mov	r3, r0
 800c218:	429c      	cmp	r4, r3
 800c21a:	d001      	beq.n	800c220 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c21c:	2300      	movs	r3, #0
 800c21e:	e022      	b.n	800c266 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c220:	89bb      	ldrh	r3, [r7, #12]
 800c222:	81fb      	strh	r3, [r7, #14]
 800c224:	e006      	b.n	800c234 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c226:	89bb      	ldrh	r3, [r7, #12]
 800c228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d001      	beq.n	800c234 <cmp_lfn+0xa0>
 800c230:	2300      	movs	r3, #0
 800c232:	e018      	b.n	800c266 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	3301      	adds	r3, #1
 800c238:	613b      	str	r3, [r7, #16]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	2b0c      	cmp	r3, #12
 800c23e:	d9c8      	bls.n	800c1d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00b      	beq.n	800c264 <cmp_lfn+0xd0>
 800c24c:	89fb      	ldrh	r3, [r7, #14]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d008      	beq.n	800c264 <cmp_lfn+0xd0>
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	4413      	add	r3, r2
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d001      	beq.n	800c264 <cmp_lfn+0xd0>
 800c260:	2300      	movs	r3, #0
 800c262:	e000      	b.n	800c266 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c264:	2301      	movs	r3, #1
}
 800c266:	4618      	mov	r0, r3
 800c268:	371c      	adds	r7, #28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd90      	pop	{r4, r7, pc}
 800c26e:	bf00      	nop
 800c270:	08011970 	.word	0x08011970

0800c274 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b088      	sub	sp, #32
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	4611      	mov	r1, r2
 800c280:	461a      	mov	r2, r3
 800c282:	460b      	mov	r3, r1
 800c284:	71fb      	strb	r3, [r7, #7]
 800c286:	4613      	mov	r3, r2
 800c288:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	330d      	adds	r3, #13
 800c28e:	79ba      	ldrb	r2, [r7, #6]
 800c290:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	330b      	adds	r3, #11
 800c296:	220f      	movs	r2, #15
 800c298:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	330c      	adds	r3, #12
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	331a      	adds	r3, #26
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fe ff38 	bl	800b11e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c2ae:	79fb      	ldrb	r3, [r7, #7]
 800c2b0:	1e5a      	subs	r2, r3, #1
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	82fb      	strh	r3, [r7, #22]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c2c6:	8afb      	ldrh	r3, [r7, #22]
 800c2c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d007      	beq.n	800c2e0 <put_lfn+0x6c>
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	61fa      	str	r2, [r7, #28]
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	4413      	add	r3, r2
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c2e0:	4a17      	ldr	r2, [pc, #92]	; (800c340 <put_lfn+0xcc>)
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	8afa      	ldrh	r2, [r7, #22]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe ff13 	bl	800b11e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c2f8:	8afb      	ldrh	r3, [r7, #22]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d102      	bne.n	800c304 <put_lfn+0x90>
 800c2fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c302:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	3301      	adds	r3, #1
 800c308:	61bb      	str	r3, [r7, #24]
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	2b0c      	cmp	r3, #12
 800c30e:	d9da      	bls.n	800c2c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c310:	8afb      	ldrh	r3, [r7, #22]
 800c312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c316:	4293      	cmp	r3, r2
 800c318:	d006      	beq.n	800c328 <put_lfn+0xb4>
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	4413      	add	r3, r2
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d103      	bne.n	800c330 <put_lfn+0xbc>
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	79fa      	ldrb	r2, [r7, #7]
 800c334:	701a      	strb	r2, [r3, #0]
}
 800c336:	bf00      	nop
 800c338:	3720      	adds	r7, #32
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	08011970 	.word	0x08011970

0800c344 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08c      	sub	sp, #48	; 0x30
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c352:	220b      	movs	r2, #11
 800c354:	68b9      	ldr	r1, [r7, #8]
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f7fe ff28 	bl	800b1ac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	2b05      	cmp	r3, #5
 800c360:	d92b      	bls.n	800c3ba <gen_numname+0x76>
		sr = seq;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c366:	e022      	b.n	800c3ae <gen_numname+0x6a>
			wc = *lfn++;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	1c9a      	adds	r2, r3, #2
 800c36c:	607a      	str	r2, [r7, #4]
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c372:	2300      	movs	r3, #0
 800c374:	62bb      	str	r3, [r7, #40]	; 0x28
 800c376:	e017      	b.n	800c3a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	005a      	lsls	r2, r3, #1
 800c37c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	4413      	add	r3, r2
 800c384:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c388:	085b      	lsrs	r3, r3, #1
 800c38a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <gen_numname+0x5e>
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c39c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c3a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	2b0f      	cmp	r3, #15
 800c3ac:	d9e4      	bls.n	800c378 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1d8      	bne.n	800c368 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c3ba:	2307      	movs	r3, #7
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	f003 030f 	and.w	r3, r3, #15
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	3330      	adds	r3, #48	; 0x30
 800c3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c3ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3d2:	2b39      	cmp	r3, #57	; 0x39
 800c3d4:	d904      	bls.n	800c3e0 <gen_numname+0x9c>
 800c3d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3da:	3307      	adds	r3, #7
 800c3dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e2:	1e5a      	subs	r2, r3, #1
 800c3e4:	62ba      	str	r2, [r7, #40]	; 0x28
 800c3e6:	3330      	adds	r3, #48	; 0x30
 800c3e8:	443b      	add	r3, r7
 800c3ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c3ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	091b      	lsrs	r3, r3, #4
 800c3f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1df      	bne.n	800c3be <gen_numname+0x7a>
	ns[i] = '~';
 800c3fe:	f107 0214 	add.w	r2, r7, #20
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	4413      	add	r3, r2
 800c406:	227e      	movs	r2, #126	; 0x7e
 800c408:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c40a:	2300      	movs	r3, #0
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
 800c40e:	e002      	b.n	800c416 <gen_numname+0xd2>
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	3301      	adds	r3, #1
 800c414:	627b      	str	r3, [r7, #36]	; 0x24
 800c416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d205      	bcs.n	800c42a <gen_numname+0xe6>
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	4413      	add	r3, r2
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	2b20      	cmp	r3, #32
 800c428:	d1f2      	bne.n	800c410 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42c:	2b07      	cmp	r3, #7
 800c42e:	d807      	bhi.n	800c440 <gen_numname+0xfc>
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	62ba      	str	r2, [r7, #40]	; 0x28
 800c436:	3330      	adds	r3, #48	; 0x30
 800c438:	443b      	add	r3, r7
 800c43a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c43e:	e000      	b.n	800c442 <gen_numname+0xfe>
 800c440:	2120      	movs	r1, #32
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	627a      	str	r2, [r7, #36]	; 0x24
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4413      	add	r3, r2
 800c44c:	460a      	mov	r2, r1
 800c44e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	2b07      	cmp	r3, #7
 800c454:	d9e9      	bls.n	800c42a <gen_numname+0xe6>
}
 800c456:	bf00      	nop
 800c458:	bf00      	nop
 800c45a:	3730      	adds	r7, #48	; 0x30
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c46c:	230b      	movs	r3, #11
 800c46e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
 800c472:	b2da      	uxtb	r2, r3
 800c474:	0852      	lsrs	r2, r2, #1
 800c476:	01db      	lsls	r3, r3, #7
 800c478:	4313      	orrs	r3, r2
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	1c59      	adds	r1, r3, #1
 800c480:	6079      	str	r1, [r7, #4]
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	4413      	add	r3, r2
 800c486:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	60bb      	str	r3, [r7, #8]
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1ed      	bne.n	800c470 <sum_sfn+0x10>
	return sum;
 800c494:	7bfb      	ldrb	r3, [r7, #15]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3714      	adds	r7, #20
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b086      	sub	sp, #24
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff fc88 	bl	800bdc8 <dir_sdi>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <dir_find+0x24>
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
 800c4c4:	e0a9      	b.n	800c61a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c4c6:	23ff      	movs	r3, #255	; 0xff
 800c4c8:	753b      	strb	r3, [r7, #20]
 800c4ca:	7d3b      	ldrb	r3, [r7, #20]
 800c4cc:	757b      	strb	r3, [r7, #21]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	69db      	ldr	r3, [r3, #28]
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6938      	ldr	r0, [r7, #16]
 800c4de:	f7ff f893 	bl	800b608 <move_window>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4e6:	7dfb      	ldrb	r3, [r7, #23]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f040 8090 	bne.w	800c60e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c4f6:	7dbb      	ldrb	r3, [r7, #22]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d102      	bne.n	800c502 <dir_find+0x60>
 800c4fc:	2304      	movs	r3, #4
 800c4fe:	75fb      	strb	r3, [r7, #23]
 800c500:	e08a      	b.n	800c618 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	330b      	adds	r3, #11
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c50e:	73fb      	strb	r3, [r7, #15]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7bfa      	ldrb	r2, [r7, #15]
 800c514:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c516:	7dbb      	ldrb	r3, [r7, #22]
 800c518:	2be5      	cmp	r3, #229	; 0xe5
 800c51a:	d007      	beq.n	800c52c <dir_find+0x8a>
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	f003 0308 	and.w	r3, r3, #8
 800c522:	2b00      	cmp	r3, #0
 800c524:	d009      	beq.n	800c53a <dir_find+0x98>
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	2b0f      	cmp	r3, #15
 800c52a:	d006      	beq.n	800c53a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c52c:	23ff      	movs	r3, #255	; 0xff
 800c52e:	757b      	strb	r3, [r7, #21]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f04f 32ff 	mov.w	r2, #4294967295
 800c536:	631a      	str	r2, [r3, #48]	; 0x30
 800c538:	e05e      	b.n	800c5f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	2b0f      	cmp	r3, #15
 800c53e:	d136      	bne.n	800c5ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d154      	bne.n	800c5f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c54e:	7dbb      	ldrb	r3, [r7, #22]
 800c550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00d      	beq.n	800c574 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6a1b      	ldr	r3, [r3, #32]
 800c55c:	7b5b      	ldrb	r3, [r3, #13]
 800c55e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c560:	7dbb      	ldrb	r3, [r7, #22]
 800c562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c566:	75bb      	strb	r3, [r7, #22]
 800c568:	7dbb      	ldrb	r3, [r7, #22]
 800c56a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	695a      	ldr	r2, [r3, #20]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c574:	7dba      	ldrb	r2, [r7, #22]
 800c576:	7d7b      	ldrb	r3, [r7, #21]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d115      	bne.n	800c5a8 <dir_find+0x106>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	330d      	adds	r3, #13
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	7d3a      	ldrb	r2, [r7, #20]
 800c586:	429a      	cmp	r2, r3
 800c588:	d10e      	bne.n	800c5a8 <dir_find+0x106>
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	691a      	ldr	r2, [r3, #16]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f7ff fdfd 	bl	800c194 <cmp_lfn>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d003      	beq.n	800c5a8 <dir_find+0x106>
 800c5a0:	7d7b      	ldrb	r3, [r7, #21]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	e000      	b.n	800c5aa <dir_find+0x108>
 800c5a8:	23ff      	movs	r3, #255	; 0xff
 800c5aa:	757b      	strb	r3, [r7, #21]
 800c5ac:	e024      	b.n	800c5f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c5ae:	7d7b      	ldrb	r3, [r7, #21]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d109      	bne.n	800c5c8 <dir_find+0x126>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff ff51 	bl	800c460 <sum_sfn>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	7d3b      	ldrb	r3, [r7, #20]
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d024      	beq.n	800c612 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10a      	bne.n	800c5ec <dir_find+0x14a>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a18      	ldr	r0, [r3, #32]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	3324      	adds	r3, #36	; 0x24
 800c5de:	220b      	movs	r2, #11
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	f7fe fe1f 	bl	800b224 <mem_cmp>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d014      	beq.n	800c616 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c5ec:	23ff      	movs	r3, #255	; 0xff
 800c5ee:	757b      	strb	r3, [r7, #21]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff fc6d 	bl	800beda <dir_next>
 800c600:	4603      	mov	r3, r0
 800c602:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f43f af65 	beq.w	800c4d6 <dir_find+0x34>
 800c60c:	e004      	b.n	800c618 <dir_find+0x176>
		if (res != FR_OK) break;
 800c60e:	bf00      	nop
 800c610:	e002      	b.n	800c618 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c612:	bf00      	nop
 800c614:	e000      	b.n	800c618 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c616:	bf00      	nop

	return res;
 800c618:	7dfb      	ldrb	r3, [r7, #23]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08c      	sub	sp, #48	; 0x30
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c638:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <dir_register+0x20>
 800c640:	2306      	movs	r3, #6
 800c642:	e0e0      	b.n	800c806 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c644:	2300      	movs	r3, #0
 800c646:	627b      	str	r3, [r7, #36]	; 0x24
 800c648:	e002      	b.n	800c650 <dir_register+0x2c>
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	3301      	adds	r3, #1
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	691a      	ldr	r2, [r3, #16]
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	005b      	lsls	r3, r3, #1
 800c658:	4413      	add	r3, r2
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1f4      	bne.n	800c64a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c666:	f107 030c 	add.w	r3, r7, #12
 800c66a:	220c      	movs	r2, #12
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7fe fd9d 	bl	800b1ac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d032      	beq.n	800c6e2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2240      	movs	r2, #64	; 0x40
 800c680:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c684:	2301      	movs	r3, #1
 800c686:	62bb      	str	r3, [r7, #40]	; 0x28
 800c688:	e016      	b.n	800c6b8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	691a      	ldr	r2, [r3, #16]
 800c694:	f107 010c 	add.w	r1, r7, #12
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	f7ff fe53 	bl	800c344 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7ff feff 	bl	800c4a2 <dir_find>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c6aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d106      	bne.n	800c6c0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	2b63      	cmp	r3, #99	; 0x63
 800c6bc:	d9e5      	bls.n	800c68a <dir_register+0x66>
 800c6be:	e000      	b.n	800c6c2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c6c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c4:	2b64      	cmp	r3, #100	; 0x64
 800c6c6:	d101      	bne.n	800c6cc <dir_register+0xa8>
 800c6c8:	2307      	movs	r3, #7
 800c6ca:	e09c      	b.n	800c806 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d002      	beq.n	800c6da <dir_register+0xb6>
 800c6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6d8:	e095      	b.n	800c806 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c6da:	7dfa      	ldrb	r2, [r7, #23]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
 800c6e4:	f003 0302 	and.w	r3, r3, #2
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d007      	beq.n	800c6fc <dir_register+0xd8>
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	330c      	adds	r3, #12
 800c6f0:	4a47      	ldr	r2, [pc, #284]	; (800c810 <dir_register+0x1ec>)
 800c6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f6:	089b      	lsrs	r3, r3, #2
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	e000      	b.n	800c6fe <dir_register+0xda>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c700:	6a39      	ldr	r1, [r7, #32]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7ff fcbf 	bl	800c086 <dir_alloc>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c70e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c712:	2b00      	cmp	r3, #0
 800c714:	d148      	bne.n	800c7a8 <dir_register+0x184>
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	3b01      	subs	r3, #1
 800c71a:	623b      	str	r3, [r7, #32]
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d042      	beq.n	800c7a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	695a      	ldr	r2, [r3, #20]
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	015b      	lsls	r3, r3, #5
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fb4a 	bl	800bdc8 <dir_sdi>
 800c734:	4603      	mov	r3, r0
 800c736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c73a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d132      	bne.n	800c7a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3324      	adds	r3, #36	; 0x24
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff fe8a 	bl	800c460 <sum_sfn>
 800c74c:	4603      	mov	r3, r0
 800c74e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	4619      	mov	r1, r3
 800c756:	69f8      	ldr	r0, [r7, #28]
 800c758:	f7fe ff56 	bl	800b608 <move_window>
 800c75c:	4603      	mov	r3, r0
 800c75e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c766:	2b00      	cmp	r3, #0
 800c768:	d11d      	bne.n	800c7a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	6918      	ldr	r0, [r3, #16]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a19      	ldr	r1, [r3, #32]
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	b2da      	uxtb	r2, r3
 800c776:	7efb      	ldrb	r3, [r7, #27]
 800c778:	f7ff fd7c 	bl	800c274 <put_lfn>
				fs->wflag = 1;
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	2201      	movs	r2, #1
 800c780:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c782:	2100      	movs	r1, #0
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff fba8 	bl	800beda <dir_next>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c790:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c794:	2b00      	cmp	r3, #0
 800c796:	d107      	bne.n	800c7a8 <dir_register+0x184>
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	623b      	str	r3, [r7, #32]
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1d5      	bne.n	800c750 <dir_register+0x12c>
 800c7a4:	e000      	b.n	800c7a8 <dir_register+0x184>
				if (res != FR_OK) break;
 800c7a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c7a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d128      	bne.n	800c802 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	69db      	ldr	r3, [r3, #28]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	69f8      	ldr	r0, [r7, #28]
 800c7b8:	f7fe ff26 	bl	800b608 <move_window>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d11b      	bne.n	800c802 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	2220      	movs	r2, #32
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fd0b 	bl	800b1ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a18      	ldr	r0, [r3, #32]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	3324      	adds	r3, #36	; 0x24
 800c7e0:	220b      	movs	r2, #11
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	f7fe fce2 	bl	800b1ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a1b      	ldr	r3, [r3, #32]
 800c7f2:	330c      	adds	r3, #12
 800c7f4:	f002 0218 	and.w	r2, r2, #24
 800c7f8:	b2d2      	uxtb	r2, r2
 800c7fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	2201      	movs	r2, #1
 800c800:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c806:	4618      	mov	r0, r3
 800c808:	3730      	adds	r7, #48	; 0x30
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	4ec4ec4f 	.word	0x4ec4ec4f

0800c814 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08a      	sub	sp, #40	; 0x28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	613b      	str	r3, [r7, #16]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	2300      	movs	r3, #0
 800c82e:	617b      	str	r3, [r7, #20]
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	61ba      	str	r2, [r7, #24]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	4413      	add	r3, r2
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c844:	2b1f      	cmp	r3, #31
 800c846:	d940      	bls.n	800c8ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c84a:	2b2f      	cmp	r3, #47	; 0x2f
 800c84c:	d006      	beq.n	800c85c <create_name+0x48>
 800c84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c850:	2b5c      	cmp	r3, #92	; 0x5c
 800c852:	d110      	bne.n	800c876 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c854:	e002      	b.n	800c85c <create_name+0x48>
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	3301      	adds	r3, #1
 800c85a:	61bb      	str	r3, [r7, #24]
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	4413      	add	r3, r2
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	2b2f      	cmp	r3, #47	; 0x2f
 800c866:	d0f6      	beq.n	800c856 <create_name+0x42>
 800c868:	693a      	ldr	r2, [r7, #16]
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	4413      	add	r3, r2
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b5c      	cmp	r3, #92	; 0x5c
 800c872:	d0f0      	beq.n	800c856 <create_name+0x42>
			break;
 800c874:	e02a      	b.n	800c8cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2bfe      	cmp	r3, #254	; 0xfe
 800c87a:	d901      	bls.n	800c880 <create_name+0x6c>
 800c87c:	2306      	movs	r3, #6
 800c87e:	e17d      	b.n	800cb7c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c882:	b2db      	uxtb	r3, r3
 800c884:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c888:	2101      	movs	r1, #1
 800c88a:	4618      	mov	r0, r3
 800c88c:	f001 fc14 	bl	800e0b8 <ff_convert>
 800c890:	4603      	mov	r3, r0
 800c892:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <create_name+0x8a>
 800c89a:	2306      	movs	r3, #6
 800c89c:	e16e      	b.n	800cb7c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c89e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8a0:	2b7f      	cmp	r3, #127	; 0x7f
 800c8a2:	d809      	bhi.n	800c8b8 <create_name+0xa4>
 800c8a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	488d      	ldr	r0, [pc, #564]	; (800cae0 <create_name+0x2cc>)
 800c8aa:	f7fe fce2 	bl	800b272 <chk_chr>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d001      	beq.n	800c8b8 <create_name+0xa4>
 800c8b4:	2306      	movs	r3, #6
 800c8b6:	e161      	b.n	800cb7c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	617a      	str	r2, [r7, #20]
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c8c8:	e7b4      	b.n	800c834 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c8ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c8d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8d8:	2b1f      	cmp	r3, #31
 800c8da:	d801      	bhi.n	800c8e0 <create_name+0xcc>
 800c8dc:	2304      	movs	r3, #4
 800c8de:	e000      	b.n	800c8e2 <create_name+0xce>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c8e6:	e011      	b.n	800c90c <create_name+0xf8>
		w = lfn[di - 1];
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c8fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8fc:	2b20      	cmp	r3, #32
 800c8fe:	d002      	beq.n	800c906 <create_name+0xf2>
 800c900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c902:	2b2e      	cmp	r3, #46	; 0x2e
 800c904:	d106      	bne.n	800c914 <create_name+0x100>
		di--;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	3b01      	subs	r3, #1
 800c90a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1ea      	bne.n	800c8e8 <create_name+0xd4>
 800c912:	e000      	b.n	800c916 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c914:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	4413      	add	r3, r2
 800c91e:	2200      	movs	r2, #0
 800c920:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d101      	bne.n	800c92c <create_name+0x118>
 800c928:	2306      	movs	r3, #6
 800c92a:	e127      	b.n	800cb7c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3324      	adds	r3, #36	; 0x24
 800c930:	220b      	movs	r2, #11
 800c932:	2120      	movs	r1, #32
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe fc5a 	bl	800b1ee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c93a:	2300      	movs	r3, #0
 800c93c:	61bb      	str	r3, [r7, #24]
 800c93e:	e002      	b.n	800c946 <create_name+0x132>
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	3301      	adds	r3, #1
 800c944:	61bb      	str	r3, [r7, #24]
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	005b      	lsls	r3, r3, #1
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	4413      	add	r3, r2
 800c94e:	881b      	ldrh	r3, [r3, #0]
 800c950:	2b20      	cmp	r3, #32
 800c952:	d0f5      	beq.n	800c940 <create_name+0x12c>
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4413      	add	r3, r2
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	2b2e      	cmp	r3, #46	; 0x2e
 800c960:	d0ee      	beq.n	800c940 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d009      	beq.n	800c97c <create_name+0x168>
 800c968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c96c:	f043 0303 	orr.w	r3, r3, #3
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c974:	e002      	b.n	800c97c <create_name+0x168>
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	3b01      	subs	r3, #1
 800c97a:	617b      	str	r3, [r7, #20]
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d009      	beq.n	800c996 <create_name+0x182>
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c988:	3b01      	subs	r3, #1
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4413      	add	r3, r2
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	2b2e      	cmp	r3, #46	; 0x2e
 800c994:	d1ef      	bne.n	800c976 <create_name+0x162>

	i = b = 0; ni = 8;
 800c996:	2300      	movs	r3, #0
 800c998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c99c:	2300      	movs	r3, #0
 800c99e:	623b      	str	r3, [r7, #32]
 800c9a0:	2308      	movs	r3, #8
 800c9a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	61ba      	str	r2, [r7, #24]
 800c9aa:	005b      	lsls	r3, r3, #1
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8090 	beq.w	800cadc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c9bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9be:	2b20      	cmp	r3, #32
 800c9c0:	d006      	beq.n	800c9d0 <create_name+0x1bc>
 800c9c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c4:	2b2e      	cmp	r3, #46	; 0x2e
 800c9c6:	d10a      	bne.n	800c9de <create_name+0x1ca>
 800c9c8:	69ba      	ldr	r2, [r7, #24]
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d006      	beq.n	800c9de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c9d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d4:	f043 0303 	orr.w	r3, r3, #3
 800c9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9dc:	e07d      	b.n	800cada <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c9de:	6a3a      	ldr	r2, [r7, #32]
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d203      	bcs.n	800c9ee <create_name+0x1da>
 800c9e6:	69ba      	ldr	r2, [r7, #24]
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d123      	bne.n	800ca36 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	2b0b      	cmp	r3, #11
 800c9f2:	d106      	bne.n	800ca02 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f8:	f043 0303 	orr.w	r3, r3, #3
 800c9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca00:	e075      	b.n	800caee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ca02:	69ba      	ldr	r2, [r7, #24]
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d005      	beq.n	800ca16 <create_name+0x202>
 800ca0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca0e:	f043 0303 	orr.w	r3, r3, #3
 800ca12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ca16:	69ba      	ldr	r2, [r7, #24]
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d866      	bhi.n	800caec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	61bb      	str	r3, [r7, #24]
 800ca22:	2308      	movs	r3, #8
 800ca24:	623b      	str	r3, [r7, #32]
 800ca26:	230b      	movs	r3, #11
 800ca28:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ca2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca34:	e051      	b.n	800cada <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ca36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca38:	2b7f      	cmp	r3, #127	; 0x7f
 800ca3a:	d914      	bls.n	800ca66 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ca3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca3e:	2100      	movs	r1, #0
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 fb39 	bl	800e0b8 <ff_convert>
 800ca46:	4603      	mov	r3, r0
 800ca48:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ca4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d004      	beq.n	800ca5a <create_name+0x246>
 800ca50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca52:	3b80      	subs	r3, #128	; 0x80
 800ca54:	4a23      	ldr	r2, [pc, #140]	; (800cae4 <create_name+0x2d0>)
 800ca56:	5cd3      	ldrb	r3, [r2, r3]
 800ca58:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ca5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca5e:	f043 0302 	orr.w	r3, r3, #2
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ca66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d007      	beq.n	800ca7c <create_name+0x268>
 800ca6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca6e:	4619      	mov	r1, r3
 800ca70:	481d      	ldr	r0, [pc, #116]	; (800cae8 <create_name+0x2d4>)
 800ca72:	f7fe fbfe 	bl	800b272 <chk_chr>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d008      	beq.n	800ca8e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ca7c:	235f      	movs	r3, #95	; 0x5f
 800ca7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ca80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca84:	f043 0303 	orr.w	r3, r3, #3
 800ca88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca8c:	e01b      	b.n	800cac6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ca8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca90:	2b40      	cmp	r3, #64	; 0x40
 800ca92:	d909      	bls.n	800caa8 <create_name+0x294>
 800ca94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca96:	2b5a      	cmp	r3, #90	; 0x5a
 800ca98:	d806      	bhi.n	800caa8 <create_name+0x294>
					b |= 2;
 800ca9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca9e:	f043 0302 	orr.w	r3, r3, #2
 800caa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800caa6:	e00e      	b.n	800cac6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800caa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caaa:	2b60      	cmp	r3, #96	; 0x60
 800caac:	d90b      	bls.n	800cac6 <create_name+0x2b2>
 800caae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cab0:	2b7a      	cmp	r3, #122	; 0x7a
 800cab2:	d808      	bhi.n	800cac6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cab8:	f043 0301 	orr.w	r3, r3, #1
 800cabc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cac2:	3b20      	subs	r3, #32
 800cac4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	623a      	str	r2, [r7, #32]
 800cacc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cace:	b2d1      	uxtb	r1, r2
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	4413      	add	r3, r2
 800cad4:	460a      	mov	r2, r1
 800cad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cada:	e763      	b.n	800c9a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cadc:	bf00      	nop
 800cade:	e006      	b.n	800caee <create_name+0x2da>
 800cae0:	08011888 	.word	0x08011888
 800cae4:	080118f0 	.word	0x080118f0
 800cae8:	08011894 	.word	0x08011894
			if (si > di) break;			/* No extension */
 800caec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800caf4:	2be5      	cmp	r3, #229	; 0xe5
 800caf6:	d103      	bne.n	800cb00 <create_name+0x2ec>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2205      	movs	r2, #5
 800cafc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	2b08      	cmp	r3, #8
 800cb04:	d104      	bne.n	800cb10 <create_name+0x2fc>
 800cb06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cb10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb14:	f003 030c 	and.w	r3, r3, #12
 800cb18:	2b0c      	cmp	r3, #12
 800cb1a:	d005      	beq.n	800cb28 <create_name+0x314>
 800cb1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	d105      	bne.n	800cb34 <create_name+0x320>
 800cb28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb2c:	f043 0302 	orr.w	r3, r3, #2
 800cb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cb34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb38:	f003 0302 	and.w	r3, r3, #2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d117      	bne.n	800cb70 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cb40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb44:	f003 0303 	and.w	r3, r3, #3
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d105      	bne.n	800cb58 <create_name+0x344>
 800cb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb50:	f043 0310 	orr.w	r3, r3, #16
 800cb54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cb58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb5c:	f003 030c 	and.w	r3, r3, #12
 800cb60:	2b04      	cmp	r3, #4
 800cb62:	d105      	bne.n	800cb70 <create_name+0x35c>
 800cb64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb68:	f043 0308 	orr.w	r3, r3, #8
 800cb6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800cb7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3728      	adds	r7, #40	; 0x28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb98:	e002      	b.n	800cba0 <follow_path+0x1c>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	2b2f      	cmp	r3, #47	; 0x2f
 800cba6:	d0f8      	beq.n	800cb9a <follow_path+0x16>
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b5c      	cmp	r3, #92	; 0x5c
 800cbae:	d0f4      	beq.n	800cb9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b1f      	cmp	r3, #31
 800cbbc:	d80a      	bhi.n	800cbd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2280      	movs	r2, #128	; 0x80
 800cbc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff f8fd 	bl	800bdc8 <dir_sdi>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	75fb      	strb	r3, [r7, #23]
 800cbd2:	e048      	b.n	800cc66 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cbd4:	463b      	mov	r3, r7
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff fe1b 	bl	800c814 <create_name>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d139      	bne.n	800cc5c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff fc5a 	bl	800c4a2 <dir_find>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00a      	beq.n	800cc16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d12c      	bne.n	800cc60 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc06:	7afb      	ldrb	r3, [r7, #11]
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d127      	bne.n	800cc60 <follow_path+0xdc>
 800cc10:	2305      	movs	r3, #5
 800cc12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cc14:	e024      	b.n	800cc60 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc16:	7afb      	ldrb	r3, [r7, #11]
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d121      	bne.n	800cc64 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	799b      	ldrb	r3, [r3, #6]
 800cc24:	f003 0310 	and.w	r3, r3, #16
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d102      	bne.n	800cc32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cc2c:	2305      	movs	r3, #5
 800cc2e:	75fb      	strb	r3, [r7, #23]
 800cc30:	e019      	b.n	800cc66 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	8992      	ldrh	r2, [r2, #12]
 800cc40:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc44:	fb00 f202 	mul.w	r2, r0, r2
 800cc48:	1a9b      	subs	r3, r3, r2
 800cc4a:	440b      	add	r3, r1
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f7ff fa60 	bl	800c114 <ld_clust>
 800cc54:	4602      	mov	r2, r0
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc5a:	e7bb      	b.n	800cbd4 <follow_path+0x50>
			if (res != FR_OK) break;
 800cc5c:	bf00      	nop
 800cc5e:	e002      	b.n	800cc66 <follow_path+0xe2>
				break;
 800cc60:	bf00      	nop
 800cc62:	e000      	b.n	800cc66 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc64:	bf00      	nop
			}
		}
	}

	return res;
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc78:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d031      	beq.n	800ccea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	617b      	str	r3, [r7, #20]
 800cc8c:	e002      	b.n	800cc94 <get_ldnumber+0x24>
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	3301      	adds	r3, #1
 800cc92:	617b      	str	r3, [r7, #20]
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	2b1f      	cmp	r3, #31
 800cc9a:	d903      	bls.n	800cca4 <get_ldnumber+0x34>
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b3a      	cmp	r3, #58	; 0x3a
 800cca2:	d1f4      	bne.n	800cc8e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b3a      	cmp	r3, #58	; 0x3a
 800ccaa:	d11c      	bne.n	800cce6 <get_ldnumber+0x76>
			tp = *path;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	60fa      	str	r2, [r7, #12]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	3b30      	subs	r3, #48	; 0x30
 800ccbc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b09      	cmp	r3, #9
 800ccc2:	d80e      	bhi.n	800cce2 <get_ldnumber+0x72>
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d10a      	bne.n	800cce2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d107      	bne.n	800cce2 <get_ldnumber+0x72>
					vol = (int)i;
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	617b      	str	r3, [r7, #20]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	e002      	b.n	800ccec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cce6:	2300      	movs	r3, #0
 800cce8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ccea:	693b      	ldr	r3, [r7, #16]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	371c      	adds	r7, #28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	70da      	strb	r2, [r3, #3]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7fe fc78 	bl	800b608 <move_window>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <check_fs+0x2a>
 800cd1e:	2304      	movs	r3, #4
 800cd20:	e038      	b.n	800cd94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	3338      	adds	r3, #56	; 0x38
 800cd26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe f9bc 	bl	800b0a8 <ld_word>
 800cd30:	4603      	mov	r3, r0
 800cd32:	461a      	mov	r2, r3
 800cd34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d001      	beq.n	800cd40 <check_fs+0x48>
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e029      	b.n	800cd94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cd46:	2be9      	cmp	r3, #233	; 0xe9
 800cd48:	d009      	beq.n	800cd5e <check_fs+0x66>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cd50:	2beb      	cmp	r3, #235	; 0xeb
 800cd52:	d11e      	bne.n	800cd92 <check_fs+0x9a>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cd5a:	2b90      	cmp	r3, #144	; 0x90
 800cd5c:	d119      	bne.n	800cd92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	3338      	adds	r3, #56	; 0x38
 800cd62:	3336      	adds	r3, #54	; 0x36
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe f9b7 	bl	800b0d8 <ld_dword>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd70:	4a0a      	ldr	r2, [pc, #40]	; (800cd9c <check_fs+0xa4>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d101      	bne.n	800cd7a <check_fs+0x82>
 800cd76:	2300      	movs	r3, #0
 800cd78:	e00c      	b.n	800cd94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3338      	adds	r3, #56	; 0x38
 800cd7e:	3352      	adds	r3, #82	; 0x52
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fe f9a9 	bl	800b0d8 <ld_dword>
 800cd86:	4603      	mov	r3, r0
 800cd88:	4a05      	ldr	r2, [pc, #20]	; (800cda0 <check_fs+0xa8>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d101      	bne.n	800cd92 <check_fs+0x9a>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e000      	b.n	800cd94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cd92:	2302      	movs	r3, #2
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	00544146 	.word	0x00544146
 800cda0:	33544146 	.word	0x33544146

0800cda4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b096      	sub	sp, #88	; 0x58
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f7ff ff59 	bl	800cc70 <get_ldnumber>
 800cdbe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	da01      	bge.n	800cdca <find_volume+0x26>
 800cdc6:	230b      	movs	r3, #11
 800cdc8:	e265      	b.n	800d296 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cdca:	4a9f      	ldr	r2, [pc, #636]	; (800d048 <find_volume+0x2a4>)
 800cdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <find_volume+0x3a>
 800cdda:	230c      	movs	r3, #12
 800cddc:	e25b      	b.n	800d296 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cde2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	f023 0301 	bic.w	r3, r3, #1
 800cdea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d01a      	beq.n	800ce2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	785b      	ldrb	r3, [r3, #1]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fe f8b7 	bl	800af6c <disk_status>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ce04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10c      	bne.n	800ce2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ce10:	79fb      	ldrb	r3, [r7, #7]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d007      	beq.n	800ce26 <find_volume+0x82>
 800ce16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce1a:	f003 0304 	and.w	r3, r3, #4
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ce22:	230a      	movs	r3, #10
 800ce24:	e237      	b.n	800d296 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ce26:	2300      	movs	r3, #0
 800ce28:	e235      	b.n	800d296 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ce30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce32:	b2da      	uxtb	r2, r3
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe f8af 	bl	800afa0 <disk_initialize>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ce48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ce54:	2303      	movs	r3, #3
 800ce56:	e21e      	b.n	800d296 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d007      	beq.n	800ce6e <find_volume+0xca>
 800ce5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce62:	f003 0304 	and.w	r3, r3, #4
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ce6a:	230a      	movs	r3, #10
 800ce6c:	e213      	b.n	800d296 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ce6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce70:	7858      	ldrb	r0, [r3, #1]
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	330c      	adds	r3, #12
 800ce76:	461a      	mov	r2, r3
 800ce78:	2102      	movs	r1, #2
 800ce7a:	f7fe f8f7 	bl	800b06c <disk_ioctl>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d001      	beq.n	800ce88 <find_volume+0xe4>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e206      	b.n	800d296 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	899b      	ldrh	r3, [r3, #12]
 800ce8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce90:	d80d      	bhi.n	800ceae <find_volume+0x10a>
 800ce92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce94:	899b      	ldrh	r3, [r3, #12]
 800ce96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce9a:	d308      	bcc.n	800ceae <find_volume+0x10a>
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	899b      	ldrh	r3, [r3, #12]
 800cea0:	461a      	mov	r2, r3
 800cea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea4:	899b      	ldrh	r3, [r3, #12]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	4013      	ands	r3, r2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <find_volume+0x10e>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e1f1      	b.n	800d296 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ceb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ceb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ceba:	f7ff ff1d 	bl	800ccf8 <check_fs>
 800cebe:	4603      	mov	r3, r0
 800cec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d149      	bne.n	800cf60 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cecc:	2300      	movs	r3, #0
 800cece:	643b      	str	r3, [r7, #64]	; 0x40
 800ced0:	e01e      	b.n	800cf10 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ced8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceda:	011b      	lsls	r3, r3, #4
 800cedc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cee0:	4413      	add	r3, r2
 800cee2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	3304      	adds	r3, #4
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d006      	beq.n	800cefc <find_volume+0x158>
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	3308      	adds	r3, #8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe f8f0 	bl	800b0d8 <ld_dword>
 800cef8:	4602      	mov	r2, r0
 800cefa:	e000      	b.n	800cefe <find_volume+0x15a>
 800cefc:	2200      	movs	r2, #0
 800cefe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	3358      	adds	r3, #88	; 0x58
 800cf04:	443b      	add	r3, r7
 800cf06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d9dd      	bls.n	800ced2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cf16:	2300      	movs	r3, #0
 800cf18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cf1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <find_volume+0x182>
 800cf20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf22:	3b01      	subs	r3, #1
 800cf24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cf26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	3358      	adds	r3, #88	; 0x58
 800cf2c:	443b      	add	r3, r7
 800cf2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d005      	beq.n	800cf46 <find_volume+0x1a2>
 800cf3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf3e:	f7ff fedb 	bl	800ccf8 <check_fs>
 800cf42:	4603      	mov	r3, r0
 800cf44:	e000      	b.n	800cf48 <find_volume+0x1a4>
 800cf46:	2303      	movs	r3, #3
 800cf48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d905      	bls.n	800cf60 <find_volume+0x1bc>
 800cf54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf56:	3301      	adds	r3, #1
 800cf58:	643b      	str	r3, [r7, #64]	; 0x40
 800cf5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	d9e2      	bls.n	800cf26 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cf60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d101      	bne.n	800cf6c <find_volume+0x1c8>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e194      	b.n	800d296 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d901      	bls.n	800cf78 <find_volume+0x1d4>
 800cf74:	230d      	movs	r3, #13
 800cf76:	e18e      	b.n	800d296 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	3338      	adds	r3, #56	; 0x38
 800cf7c:	330b      	adds	r3, #11
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fe f892 	bl	800b0a8 <ld_word>
 800cf84:	4603      	mov	r3, r0
 800cf86:	461a      	mov	r2, r3
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	899b      	ldrh	r3, [r3, #12]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d001      	beq.n	800cf94 <find_volume+0x1f0>
 800cf90:	230d      	movs	r3, #13
 800cf92:	e180      	b.n	800d296 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf96:	3338      	adds	r3, #56	; 0x38
 800cf98:	3316      	adds	r3, #22
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe f884 	bl	800b0a8 <ld_word>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <find_volume+0x214>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	3338      	adds	r3, #56	; 0x38
 800cfae:	3324      	adds	r3, #36	; 0x24
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe f891 	bl	800b0d8 <ld_dword>
 800cfb6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfbc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	789b      	ldrb	r3, [r3, #2]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d005      	beq.n	800cfdc <find_volume+0x238>
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	789b      	ldrb	r3, [r3, #2]
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d001      	beq.n	800cfdc <find_volume+0x238>
 800cfd8:	230d      	movs	r3, #13
 800cfda:	e15c      	b.n	800d296 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	789b      	ldrb	r3, [r3, #2]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe4:	fb02 f303 	mul.w	r3, r2, r3
 800cfe8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	895b      	ldrh	r3, [r3, #10]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d008      	beq.n	800d010 <find_volume+0x26c>
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	895b      	ldrh	r3, [r3, #10]
 800d002:	461a      	mov	r2, r3
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	895b      	ldrh	r3, [r3, #10]
 800d008:	3b01      	subs	r3, #1
 800d00a:	4013      	ands	r3, r2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <find_volume+0x270>
 800d010:	230d      	movs	r3, #13
 800d012:	e140      	b.n	800d296 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	3338      	adds	r3, #56	; 0x38
 800d018:	3311      	adds	r3, #17
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe f844 	bl	800b0a8 <ld_word>
 800d020:	4603      	mov	r3, r0
 800d022:	461a      	mov	r2, r3
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	891b      	ldrh	r3, [r3, #8]
 800d02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d02e:	8992      	ldrh	r2, [r2, #12]
 800d030:	0952      	lsrs	r2, r2, #5
 800d032:	b292      	uxth	r2, r2
 800d034:	fbb3 f1f2 	udiv	r1, r3, r2
 800d038:	fb01 f202 	mul.w	r2, r1, r2
 800d03c:	1a9b      	subs	r3, r3, r2
 800d03e:	b29b      	uxth	r3, r3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <find_volume+0x2a8>
 800d044:	230d      	movs	r3, #13
 800d046:	e126      	b.n	800d296 <find_volume+0x4f2>
 800d048:	20002c80 	.word	0x20002c80

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	3338      	adds	r3, #56	; 0x38
 800d050:	3313      	adds	r3, #19
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe f828 	bl	800b0a8 <ld_word>
 800d058:	4603      	mov	r3, r0
 800d05a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <find_volume+0x2cc>
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	3338      	adds	r3, #56	; 0x38
 800d066:	3320      	adds	r3, #32
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe f835 	bl	800b0d8 <ld_dword>
 800d06e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	3338      	adds	r3, #56	; 0x38
 800d074:	330e      	adds	r3, #14
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe f816 	bl	800b0a8 <ld_word>
 800d07c:	4603      	mov	r3, r0
 800d07e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <find_volume+0x2e6>
 800d086:	230d      	movs	r3, #13
 800d088:	e105      	b.n	800d296 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d08a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08e:	4413      	add	r3, r2
 800d090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d092:	8911      	ldrh	r1, [r2, #8]
 800d094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d096:	8992      	ldrh	r2, [r2, #12]
 800d098:	0952      	lsrs	r2, r2, #5
 800d09a:	b292      	uxth	r2, r2
 800d09c:	fbb1 f2f2 	udiv	r2, r1, r2
 800d0a0:	b292      	uxth	r2, r2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d0a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d201      	bcs.n	800d0b2 <find_volume+0x30e>
 800d0ae:	230d      	movs	r3, #13
 800d0b0:	e0f1      	b.n	800d296 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ba:	8952      	ldrh	r2, [r2, #10]
 800d0bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <find_volume+0x328>
 800d0c8:	230d      	movs	r3, #13
 800d0ca:	e0e4      	b.n	800d296 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d802      	bhi.n	800d0e2 <find_volume+0x33e>
 800d0dc:	2302      	movs	r3, #2
 800d0de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d802      	bhi.n	800d0f2 <find_volume+0x34e>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	1c9a      	adds	r2, r3, #2
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0fe:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d100:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d104:	441a      	add	r2, r3
 800d106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d108:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d10a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	441a      	add	r2, r3
 800d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d112:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d114:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d118:	2b03      	cmp	r3, #3
 800d11a:	d11e      	bne.n	800d15a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11e:	3338      	adds	r3, #56	; 0x38
 800d120:	332a      	adds	r3, #42	; 0x2a
 800d122:	4618      	mov	r0, r3
 800d124:	f7fd ffc0 	bl	800b0a8 <ld_word>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <find_volume+0x38e>
 800d12e:	230d      	movs	r3, #13
 800d130:	e0b1      	b.n	800d296 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	891b      	ldrh	r3, [r3, #8]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <find_volume+0x39a>
 800d13a:	230d      	movs	r3, #13
 800d13c:	e0ab      	b.n	800d296 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	3338      	adds	r3, #56	; 0x38
 800d142:	332c      	adds	r3, #44	; 0x2c
 800d144:	4618      	mov	r0, r3
 800d146:	f7fd ffc7 	bl	800b0d8 <ld_dword>
 800d14a:	4602      	mov	r2, r0
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d152:	69db      	ldr	r3, [r3, #28]
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	647b      	str	r3, [r7, #68]	; 0x44
 800d158:	e01f      	b.n	800d19a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	891b      	ldrh	r3, [r3, #8]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d101      	bne.n	800d166 <find_volume+0x3c2>
 800d162:	230d      	movs	r3, #13
 800d164:	e097      	b.n	800d296 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d16c:	441a      	add	r2, r3
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d172:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d176:	2b02      	cmp	r3, #2
 800d178:	d103      	bne.n	800d182 <find_volume+0x3de>
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	69db      	ldr	r3, [r3, #28]
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	e00a      	b.n	800d198 <find_volume+0x3f4>
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	69da      	ldr	r2, [r3, #28]
 800d186:	4613      	mov	r3, r2
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	4413      	add	r3, r2
 800d18c:	085a      	lsrs	r2, r3, #1
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d198:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19c:	6a1a      	ldr	r2, [r3, #32]
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	899b      	ldrh	r3, [r3, #12]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1ac:	8989      	ldrh	r1, [r1, #12]
 800d1ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d201      	bcs.n	800d1ba <find_volume+0x416>
 800d1b6:	230d      	movs	r3, #13
 800d1b8:	e06d      	b.n	800d296 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c0:	619a      	str	r2, [r3, #24]
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c4:	699a      	ldr	r2, [r3, #24]
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	2280      	movs	r2, #128	; 0x80
 800d1ce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d1d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	d149      	bne.n	800d26c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1da:	3338      	adds	r3, #56	; 0x38
 800d1dc:	3330      	adds	r3, #48	; 0x30
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fd ff62 	bl	800b0a8 <ld_word>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d140      	bne.n	800d26c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1f2:	f7fe fa09 	bl	800b608 <move_window>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d137      	bne.n	800d26c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	2200      	movs	r2, #0
 800d200:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	3338      	adds	r3, #56	; 0x38
 800d206:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd ff4c 	bl	800b0a8 <ld_word>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d218:	429a      	cmp	r2, r3
 800d21a:	d127      	bne.n	800d26c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	3338      	adds	r3, #56	; 0x38
 800d220:	4618      	mov	r0, r3
 800d222:	f7fd ff59 	bl	800b0d8 <ld_dword>
 800d226:	4603      	mov	r3, r0
 800d228:	4a1d      	ldr	r2, [pc, #116]	; (800d2a0 <find_volume+0x4fc>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d11e      	bne.n	800d26c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d230:	3338      	adds	r3, #56	; 0x38
 800d232:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d236:	4618      	mov	r0, r3
 800d238:	f7fd ff4e 	bl	800b0d8 <ld_dword>
 800d23c:	4603      	mov	r3, r0
 800d23e:	4a19      	ldr	r2, [pc, #100]	; (800d2a4 <find_volume+0x500>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d113      	bne.n	800d26c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d246:	3338      	adds	r3, #56	; 0x38
 800d248:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fd ff43 	bl	800b0d8 <ld_dword>
 800d252:	4602      	mov	r2, r0
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	3338      	adds	r3, #56	; 0x38
 800d25c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d260:	4618      	mov	r0, r3
 800d262:	f7fd ff39 	bl	800b0d8 <ld_dword>
 800d266:	4602      	mov	r2, r0
 800d268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d272:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d274:	4b0c      	ldr	r3, [pc, #48]	; (800d2a8 <find_volume+0x504>)
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	3301      	adds	r3, #1
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <find_volume+0x504>)
 800d27e:	801a      	strh	r2, [r3, #0]
 800d280:	4b09      	ldr	r3, [pc, #36]	; (800d2a8 <find_volume+0x504>)
 800d282:	881a      	ldrh	r2, [r3, #0]
 800d284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d286:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28a:	4a08      	ldr	r2, [pc, #32]	; (800d2ac <find_volume+0x508>)
 800d28c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d28e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d290:	f7fe f952 	bl	800b538 <clear_lock>
#endif
	return FR_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3758      	adds	r7, #88	; 0x58
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	41615252 	.word	0x41615252
 800d2a4:	61417272 	.word	0x61417272
 800d2a8:	20002c84 	.word	0x20002c84
 800d2ac:	20002ca8 	.word	0x20002ca8

0800d2b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d2ba:	2309      	movs	r3, #9
 800d2bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d01c      	beq.n	800d2fe <validate+0x4e>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d018      	beq.n	800d2fe <validate+0x4e>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d013      	beq.n	800d2fe <validate+0x4e>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	889a      	ldrh	r2, [r3, #4]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	88db      	ldrh	r3, [r3, #6]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d10c      	bne.n	800d2fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	785b      	ldrb	r3, [r3, #1]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fd fe3e 	bl	800af6c <disk_status>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	f003 0301 	and.w	r3, r3, #1
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <validate+0x4e>
			res = FR_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d102      	bne.n	800d30a <validate+0x5a>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	e000      	b.n	800d30c <validate+0x5c>
 800d30a:	2300      	movs	r3, #0
 800d30c:	683a      	ldr	r2, [r7, #0]
 800d30e:	6013      	str	r3, [r2, #0]
	return res;
 800d310:	7bfb      	ldrb	r3, [r7, #15]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b088      	sub	sp, #32
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	4613      	mov	r3, r2
 800d328:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d32e:	f107 0310 	add.w	r3, r7, #16
 800d332:	4618      	mov	r0, r3
 800d334:	f7ff fc9c 	bl	800cc70 <get_ldnumber>
 800d338:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	da01      	bge.n	800d344 <f_mount+0x28>
 800d340:	230b      	movs	r3, #11
 800d342:	e02b      	b.n	800d39c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d344:	4a17      	ldr	r2, [pc, #92]	; (800d3a4 <f_mount+0x88>)
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d34c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d354:	69b8      	ldr	r0, [r7, #24]
 800d356:	f7fe f8ef 	bl	800b538 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2200      	movs	r2, #0
 800d35e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	490d      	ldr	r1, [pc, #52]	; (800d3a4 <f_mount+0x88>)
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <f_mount+0x66>
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d001      	beq.n	800d386 <f_mount+0x6a>
 800d382:	2300      	movs	r3, #0
 800d384:	e00a      	b.n	800d39c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d386:	f107 010c 	add.w	r1, r7, #12
 800d38a:	f107 0308 	add.w	r3, r7, #8
 800d38e:	2200      	movs	r2, #0
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff fd07 	bl	800cda4 <find_volume>
 800d396:	4603      	mov	r3, r0
 800d398:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3720      	adds	r7, #32
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20002c80 	.word	0x20002c80

0800d3a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b09a      	sub	sp, #104	; 0x68
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <f_open+0x18>
 800d3bc:	2309      	movs	r3, #9
 800d3be:	e1bb      	b.n	800d738 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d3c8:	79fa      	ldrb	r2, [r7, #7]
 800d3ca:	f107 0114 	add.w	r1, r7, #20
 800d3ce:	f107 0308 	add.w	r3, r7, #8
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7ff fce6 	bl	800cda4 <find_volume>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d3de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f040 819f 	bne.w	800d726 <f_open+0x37e>
		dj.obj.fs = fs;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	f107 0318 	add.w	r3, r7, #24
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff fbc5 	bl	800cb84 <follow_path>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d404:	2b00      	cmp	r3, #0
 800d406:	d11a      	bne.n	800d43e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d408:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d40c:	b25b      	sxtb	r3, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	da03      	bge.n	800d41a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d412:	2306      	movs	r3, #6
 800d414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d418:	e011      	b.n	800d43e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d41a:	79fb      	ldrb	r3, [r7, #7]
 800d41c:	f023 0301 	bic.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	bf14      	ite	ne
 800d424:	2301      	movne	r3, #1
 800d426:	2300      	moveq	r3, #0
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	461a      	mov	r2, r3
 800d42c:	f107 0318 	add.w	r3, r7, #24
 800d430:	4611      	mov	r1, r2
 800d432:	4618      	mov	r0, r3
 800d434:	f7fd ff38 	bl	800b2a8 <chk_lock>
 800d438:	4603      	mov	r3, r0
 800d43a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	f003 031c 	and.w	r3, r3, #28
 800d444:	2b00      	cmp	r3, #0
 800d446:	d07f      	beq.n	800d548 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d448:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d017      	beq.n	800d480 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d450:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d454:	2b04      	cmp	r3, #4
 800d456:	d10e      	bne.n	800d476 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d458:	f7fd ff82 	bl	800b360 <enq_lock>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d006      	beq.n	800d470 <f_open+0xc8>
 800d462:	f107 0318 	add.w	r3, r7, #24
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff f8dc 	bl	800c624 <dir_register>
 800d46c:	4603      	mov	r3, r0
 800d46e:	e000      	b.n	800d472 <f_open+0xca>
 800d470:	2312      	movs	r3, #18
 800d472:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	f043 0308 	orr.w	r3, r3, #8
 800d47c:	71fb      	strb	r3, [r7, #7]
 800d47e:	e010      	b.n	800d4a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d480:	7fbb      	ldrb	r3, [r7, #30]
 800d482:	f003 0311 	and.w	r3, r3, #17
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <f_open+0xea>
					res = FR_DENIED;
 800d48a:	2307      	movs	r3, #7
 800d48c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d490:	e007      	b.n	800d4a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d492:	79fb      	ldrb	r3, [r7, #7]
 800d494:	f003 0304 	and.w	r3, r3, #4
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <f_open+0xfa>
 800d49c:	2308      	movs	r3, #8
 800d49e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d4a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d168      	bne.n	800d57c <f_open+0x1d4>
 800d4aa:	79fb      	ldrb	r3, [r7, #7]
 800d4ac:	f003 0308 	and.w	r3, r3, #8
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d063      	beq.n	800d57c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d4b4:	f7fd fcfc 	bl	800aeb0 <get_fattime>
 800d4b8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	330e      	adds	r3, #14
 800d4be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fd fe47 	bl	800b154 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c8:	3316      	adds	r3, #22
 800d4ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fd fe41 	bl	800b154 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d4:	330b      	adds	r3, #11
 800d4d6:	2220      	movs	r2, #32
 800d4d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fe17 	bl	800c114 <ld_clust>
 800d4e6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fe fe2f 	bl	800c152 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	331c      	adds	r3, #28
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fd fe2a 	bl	800b154 <st_dword>
					fs->wflag = 1;
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2201      	movs	r2, #1
 800d504:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d037      	beq.n	800d57c <f_open+0x1d4>
						dw = fs->winsect;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d510:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d512:	f107 0318 	add.w	r3, r7, #24
 800d516:	2200      	movs	r2, #0
 800d518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe fb1f 	bl	800bb5e <remove_chain>
 800d520:	4603      	mov	r3, r0
 800d522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d526:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d126      	bne.n	800d57c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe f868 	bl	800b608 <move_window>
 800d538:	4603      	mov	r3, r0
 800d53a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d542:	3a01      	subs	r2, #1
 800d544:	615a      	str	r2, [r3, #20]
 800d546:	e019      	b.n	800d57c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d548:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d115      	bne.n	800d57c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d550:	7fbb      	ldrb	r3, [r7, #30]
 800d552:	f003 0310 	and.w	r3, r3, #16
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d55a:	2304      	movs	r3, #4
 800d55c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d560:	e00c      	b.n	800d57c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d562:	79fb      	ldrb	r3, [r7, #7]
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d007      	beq.n	800d57c <f_open+0x1d4>
 800d56c:	7fbb      	ldrb	r3, [r7, #30]
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <f_open+0x1d4>
						res = FR_DENIED;
 800d576:	2307      	movs	r3, #7
 800d578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d57c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d580:	2b00      	cmp	r3, #0
 800d582:	d128      	bne.n	800d5d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	f003 0308 	and.w	r3, r3, #8
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d58e:	79fb      	ldrb	r3, [r7, #7]
 800d590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d594:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d59e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5a4:	79fb      	ldrb	r3, [r7, #7]
 800d5a6:	f023 0301 	bic.w	r3, r3, #1
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf14      	ite	ne
 800d5ae:	2301      	movne	r3, #1
 800d5b0:	2300      	moveq	r3, #0
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	f107 0318 	add.w	r3, r7, #24
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fd fef1 	bl	800b3a4 <inc_lock>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d102      	bne.n	800d5d6 <f_open+0x22e>
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d5d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f040 80a3 	bne.w	800d726 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe fd94 	bl	800c114 <ld_clust>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f4:	331c      	adds	r3, #28
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fd fd6e 	bl	800b0d8 <ld_dword>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	88da      	ldrh	r2, [r3, #6]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	79fa      	ldrb	r2, [r7, #7]
 800d61a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2200      	movs	r2, #0
 800d626:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3330      	adds	r3, #48	; 0x30
 800d632:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d636:	2100      	movs	r1, #0
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fd fdd8 	bl	800b1ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	f003 0320 	and.w	r3, r3, #32
 800d644:	2b00      	cmp	r3, #0
 800d646:	d06e      	beq.n	800d726 <f_open+0x37e>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d06a      	beq.n	800d726 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	68da      	ldr	r2, [r3, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	895b      	ldrh	r3, [r3, #10]
 800d65c:	461a      	mov	r2, r3
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	899b      	ldrh	r3, [r3, #12]
 800d662:	fb02 f303 	mul.w	r3, r2, r3
 800d666:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d674:	e016      	b.n	800d6a4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe f881 	bl	800b782 <get_fat>
 800d680:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d684:	2b01      	cmp	r3, #1
 800d686:	d802      	bhi.n	800d68e <f_open+0x2e6>
 800d688:	2302      	movs	r3, #2
 800d68a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d68e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d694:	d102      	bne.n	800d69c <f_open+0x2f4>
 800d696:	2301      	movs	r3, #1
 800d698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d69c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d103      	bne.n	800d6b4 <f_open+0x30c>
 800d6ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d8e0      	bhi.n	800d676 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d6ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d131      	bne.n	800d726 <f_open+0x37e>
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6ce:	fb01 f202 	mul.w	r2, r1, r2
 800d6d2:	1a9b      	subs	r3, r3, r2
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d026      	beq.n	800d726 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fe f831 	bl	800b744 <clust2sect>
 800d6e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d6e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d103      	bne.n	800d6f2 <f_open+0x34a>
						res = FR_INT_ERR;
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d6f0:	e019      	b.n	800d726 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	899b      	ldrh	r3, [r3, #12]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800d6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d700:	441a      	add	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	7858      	ldrb	r0, [r3, #1]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6a1a      	ldr	r2, [r3, #32]
 800d714:	2301      	movs	r3, #1
 800d716:	f7fd fc69 	bl	800afec <disk_read>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <f_open+0x37e>
 800d720:	2301      	movs	r3, #1
 800d722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d002      	beq.n	800d734 <f_open+0x38c>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3768      	adds	r7, #104	; 0x68
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08c      	sub	sp, #48	; 0x30
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
 800d74c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2200      	movs	r2, #0
 800d756:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f107 0210 	add.w	r2, r7, #16
 800d75e:	4611      	mov	r1, r2
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff fda5 	bl	800d2b0 <validate>
 800d766:	4603      	mov	r3, r0
 800d768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d76c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d770:	2b00      	cmp	r3, #0
 800d772:	d107      	bne.n	800d784 <f_write+0x44>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	7d5b      	ldrb	r3, [r3, #21]
 800d778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d77c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d780:	2b00      	cmp	r3, #0
 800d782:	d002      	beq.n	800d78a <f_write+0x4a>
 800d784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d788:	e16a      	b.n	800da60 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	7d1b      	ldrb	r3, [r3, #20]
 800d78e:	f003 0302 	and.w	r3, r3, #2
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <f_write+0x5a>
 800d796:	2307      	movs	r3, #7
 800d798:	e162      	b.n	800da60 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	699a      	ldr	r2, [r3, #24]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	441a      	add	r2, r3
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	f080 814c 	bcs.w	800da44 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	43db      	mvns	r3, r3
 800d7b2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d7b4:	e146      	b.n	800da44 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	693a      	ldr	r2, [r7, #16]
 800d7bc:	8992      	ldrh	r2, [r2, #12]
 800d7be:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7c2:	fb01 f202 	mul.w	r2, r1, r2
 800d7c6:	1a9b      	subs	r3, r3, r2
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f040 80f1 	bne.w	800d9b0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	8992      	ldrh	r2, [r2, #12]
 800d7d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7da:	693a      	ldr	r2, [r7, #16]
 800d7dc:	8952      	ldrh	r2, [r2, #10]
 800d7de:	3a01      	subs	r2, #1
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d143      	bne.n	800d872 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10c      	bne.n	800d80c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d11a      	bne.n	800d834 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2100      	movs	r1, #0
 800d802:	4618      	mov	r0, r3
 800d804:	f7fe fa10 	bl	800bc28 <create_chain>
 800d808:	62b8      	str	r0, [r7, #40]	; 0x28
 800d80a:	e013      	b.n	800d834 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d007      	beq.n	800d824 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	4619      	mov	r1, r3
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7fe fa9c 	bl	800bd58 <clmt_clust>
 800d820:	62b8      	str	r0, [r7, #40]	; 0x28
 800d822:	e007      	b.n	800d834 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	4619      	mov	r1, r3
 800d82c:	4610      	mov	r0, r2
 800d82e:	f7fe f9fb 	bl	800bc28 <create_chain>
 800d832:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 8109 	beq.w	800da4e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d104      	bne.n	800d84c <f_write+0x10c>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2202      	movs	r2, #2
 800d846:	755a      	strb	r2, [r3, #21]
 800d848:	2302      	movs	r3, #2
 800d84a:	e109      	b.n	800da60 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d852:	d104      	bne.n	800d85e <f_write+0x11e>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2201      	movs	r2, #1
 800d858:	755a      	strb	r2, [r3, #21]
 800d85a:	2301      	movs	r3, #1
 800d85c:	e100      	b.n	800da60 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d862:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <f_write+0x132>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d870:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	7d1b      	ldrb	r3, [r3, #20]
 800d876:	b25b      	sxtb	r3, r3
 800d878:	2b00      	cmp	r3, #0
 800d87a:	da18      	bge.n	800d8ae <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	7858      	ldrb	r0, [r3, #1]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6a1a      	ldr	r2, [r3, #32]
 800d88a:	2301      	movs	r3, #1
 800d88c:	f7fd fbce 	bl	800b02c <disk_write>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d004      	beq.n	800d8a0 <f_write+0x160>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2201      	movs	r2, #1
 800d89a:	755a      	strb	r2, [r3, #21]
 800d89c:	2301      	movs	r3, #1
 800d89e:	e0df      	b.n	800da60 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d8ae:	693a      	ldr	r2, [r7, #16]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4610      	mov	r0, r2
 800d8b8:	f7fd ff44 	bl	800b744 <clust2sect>
 800d8bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d104      	bne.n	800d8ce <f_write+0x18e>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	755a      	strb	r2, [r3, #21]
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	e0c8      	b.n	800da60 <f_write+0x320>
			sect += csect;
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	899b      	ldrh	r3, [r3, #12]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d043      	beq.n	800d972 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d8ea:	69ba      	ldr	r2, [r7, #24]
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	693a      	ldr	r2, [r7, #16]
 800d8f2:	8952      	ldrh	r2, [r2, #10]
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d905      	bls.n	800d904 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	895b      	ldrh	r3, [r3, #10]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	7858      	ldrb	r0, [r3, #1]
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	69f9      	ldr	r1, [r7, #28]
 800d90e:	f7fd fb8d 	bl	800b02c <disk_write>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d004      	beq.n	800d922 <f_write+0x1e2>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2201      	movs	r2, #1
 800d91c:	755a      	strb	r2, [r3, #21]
 800d91e:	2301      	movs	r3, #1
 800d920:	e09e      	b.n	800da60 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6a1a      	ldr	r2, [r3, #32]
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	6a3a      	ldr	r2, [r7, #32]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d918      	bls.n	800d962 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6a1a      	ldr	r2, [r3, #32]
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	8992      	ldrh	r2, [r2, #12]
 800d942:	fb02 f303 	mul.w	r3, r2, r3
 800d946:	69fa      	ldr	r2, [r7, #28]
 800d948:	18d1      	adds	r1, r2, r3
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	899b      	ldrh	r3, [r3, #12]
 800d94e:	461a      	mov	r2, r3
 800d950:	f7fd fc2c 	bl	800b1ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	7d1b      	ldrb	r3, [r3, #20]
 800d958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	899b      	ldrh	r3, [r3, #12]
 800d966:	461a      	mov	r2, r3
 800d968:	6a3b      	ldr	r3, [r7, #32]
 800d96a:	fb02 f303 	mul.w	r3, r2, r3
 800d96e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d970:	e04b      	b.n	800da0a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d016      	beq.n	800d9aa <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	699a      	ldr	r2, [r3, #24]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d984:	429a      	cmp	r2, r3
 800d986:	d210      	bcs.n	800d9aa <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	7858      	ldrb	r0, [r3, #1]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d992:	2301      	movs	r3, #1
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	f7fd fb29 	bl	800afec <disk_read>
 800d99a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d004      	beq.n	800d9aa <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	755a      	strb	r2, [r3, #21]
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e05a      	b.n	800da60 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	697a      	ldr	r2, [r7, #20]
 800d9ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	899b      	ldrh	r3, [r3, #12]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	693a      	ldr	r2, [r7, #16]
 800d9bc:	8992      	ldrh	r2, [r2, #12]
 800d9be:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9c2:	fb01 f202 	mul.w	r2, r1, r2
 800d9c6:	1a9b      	subs	r3, r3, r2
 800d9c8:	1ac3      	subs	r3, r0, r3
 800d9ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d901      	bls.n	800d9d8 <f_write+0x298>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	693a      	ldr	r2, [r7, #16]
 800d9e4:	8992      	ldrh	r2, [r2, #12]
 800d9e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9ea:	fb00 f202 	mul.w	r2, r0, r2
 800d9ee:	1a9b      	subs	r3, r3, r2
 800d9f0:	440b      	add	r3, r1
 800d9f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f4:	69f9      	ldr	r1, [r7, #28]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fd fbd8 	bl	800b1ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	7d1b      	ldrb	r3, [r3, #20]
 800da00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da04:	b2da      	uxtb	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800da0a:	69fa      	ldr	r2, [r7, #28]
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	4413      	add	r3, r2
 800da10:	61fb      	str	r3, [r7, #28]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	699a      	ldr	r2, [r3, #24]
 800da16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da18:	441a      	add	r2, r3
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	619a      	str	r2, [r3, #24]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	68da      	ldr	r2, [r3, #12]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	429a      	cmp	r2, r3
 800da28:	bf38      	it	cc
 800da2a:	461a      	movcc	r2, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	60da      	str	r2, [r3, #12]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	441a      	add	r2, r3
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	f47f aeb5 	bne.w	800d7b6 <f_write+0x76>
 800da4c:	e000      	b.n	800da50 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800da4e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	7d1b      	ldrb	r3, [r3, #20]
 800da54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3730      	adds	r7, #48	; 0x30
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f107 0208 	add.w	r2, r7, #8
 800da76:	4611      	mov	r1, r2
 800da78:	4618      	mov	r0, r3
 800da7a:	f7ff fc19 	bl	800d2b0 <validate>
 800da7e:	4603      	mov	r3, r0
 800da80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d168      	bne.n	800db5a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	7d1b      	ldrb	r3, [r3, #20]
 800da8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da90:	2b00      	cmp	r3, #0
 800da92:	d062      	beq.n	800db5a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	b25b      	sxtb	r3, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	da15      	bge.n	800daca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	7858      	ldrb	r0, [r3, #1]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a1a      	ldr	r2, [r3, #32]
 800daac:	2301      	movs	r3, #1
 800daae:	f7fd fabd 	bl	800b02c <disk_write>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <f_sync+0x54>
 800dab8:	2301      	movs	r3, #1
 800daba:	e04f      	b.n	800db5c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	7d1b      	ldrb	r3, [r3, #20]
 800dac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800daca:	f7fd f9f1 	bl	800aeb0 <get_fattime>
 800dace:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f7fd fd95 	bl	800b608 <move_window>
 800dade:	4603      	mov	r3, r0
 800dae0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d138      	bne.n	800db5a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	330b      	adds	r3, #11
 800daf2:	781a      	ldrb	r2, [r3, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	330b      	adds	r3, #11
 800daf8:	f042 0220 	orr.w	r2, r2, #32
 800dafc:	b2d2      	uxtb	r2, r2
 800dafe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6818      	ldr	r0, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	461a      	mov	r2, r3
 800db0a:	68f9      	ldr	r1, [r7, #12]
 800db0c:	f7fe fb21 	bl	800c152 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f103 021c 	add.w	r2, r3, #28
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	f7fd fb19 	bl	800b154 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	3316      	adds	r3, #22
 800db26:	6939      	ldr	r1, [r7, #16]
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fd fb13 	bl	800b154 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3312      	adds	r3, #18
 800db32:	2100      	movs	r1, #0
 800db34:	4618      	mov	r0, r3
 800db36:	f7fd faf2 	bl	800b11e <st_word>
					fs->wflag = 1;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2201      	movs	r2, #1
 800db3e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	4618      	mov	r0, r3
 800db44:	f7fd fd8e 	bl	800b664 <sync_fs>
 800db48:	4603      	mov	r3, r0
 800db4a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	7d1b      	ldrb	r3, [r3, #20]
 800db50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db54:	b2da      	uxtb	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800db5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7ff ff7b 	bl	800da68 <f_sync>
 800db72:	4603      	mov	r3, r0
 800db74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800db76:	7bfb      	ldrb	r3, [r7, #15]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d118      	bne.n	800dbae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f107 0208 	add.w	r2, r7, #8
 800db82:	4611      	mov	r1, r2
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff fb93 	bl	800d2b0 <validate>
 800db8a:	4603      	mov	r3, r0
 800db8c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db8e:	7bfb      	ldrb	r3, [r7, #15]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10c      	bne.n	800dbae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fd fc91 	bl	800b4c0 <dec_lock>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b090      	sub	sp, #64	; 0x40
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f107 0208 	add.w	r2, r7, #8
 800dbc8:	4611      	mov	r1, r2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7ff fb70 	bl	800d2b0 <validate>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dbd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d103      	bne.n	800dbe6 <f_lseek+0x2e>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	7d5b      	ldrb	r3, [r3, #21]
 800dbe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dbe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <f_lseek+0x3c>
 800dbee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbf2:	e201      	b.n	800dff8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 80d9 	beq.w	800ddb0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc04:	d15a      	bne.n	800dcbc <f_lseek+0x104>
			tbl = fp->cltbl;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0e:	1d1a      	adds	r2, r3, #4
 800dc10:	627a      	str	r2, [r7, #36]	; 0x24
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	617b      	str	r3, [r7, #20]
 800dc16:	2302      	movs	r3, #2
 800dc18:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d03a      	beq.n	800dc9c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc28:	613b      	str	r3, [r7, #16]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc30:	3302      	adds	r3, #2
 800dc32:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fd fd9d 	bl	800b782 <get_fat>
 800dc48:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d804      	bhi.n	800dc5a <f_lseek+0xa2>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2202      	movs	r2, #2
 800dc54:	755a      	strb	r2, [r3, #21]
 800dc56:	2302      	movs	r3, #2
 800dc58:	e1ce      	b.n	800dff8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc60:	d104      	bne.n	800dc6c <f_lseek+0xb4>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2201      	movs	r2, #1
 800dc66:	755a      	strb	r2, [r3, #21]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e1c5      	b.n	800dff8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d0de      	beq.n	800dc34 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dc76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d809      	bhi.n	800dc92 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	1d1a      	adds	r2, r3, #4
 800dc82:	627a      	str	r2, [r7, #36]	; 0x24
 800dc84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc86:	601a      	str	r2, [r3, #0]
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	1d1a      	adds	r2, r3, #4
 800dc8c:	627a      	str	r2, [r7, #36]	; 0x24
 800dc8e:	693a      	ldr	r2, [r7, #16]
 800dc90:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	69db      	ldr	r3, [r3, #28]
 800dc96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d3c4      	bcc.n	800dc26 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dca2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d803      	bhi.n	800dcb4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	2200      	movs	r2, #0
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	e19f      	b.n	800dff4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dcb4:	2311      	movs	r3, #17
 800dcb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dcba:	e19b      	b.n	800dff4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d902      	bls.n	800dccc <f_lseek+0x114>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f000 818d 	beq.w	800dff4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	4619      	mov	r1, r3
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7fe f839 	bl	800bd58 <clmt_clust>
 800dce6:	4602      	mov	r2, r0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	f7fd fd25 	bl	800b744 <clust2sect>
 800dcfa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d104      	bne.n	800dd0c <f_lseek+0x154>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2202      	movs	r2, #2
 800dd06:	755a      	strb	r2, [r3, #21]
 800dd08:	2302      	movs	r3, #2
 800dd0a:	e175      	b.n	800dff8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	8992      	ldrh	r2, [r2, #12]
 800dd14:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	8952      	ldrh	r2, [r2, #10]
 800dd1c:	3a01      	subs	r2, #1
 800dd1e:	4013      	ands	r3, r2
 800dd20:	69ba      	ldr	r2, [r7, #24]
 800dd22:	4413      	add	r3, r2
 800dd24:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	699b      	ldr	r3, [r3, #24]
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	8992      	ldrh	r2, [r2, #12]
 800dd2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd32:	fb01 f202 	mul.w	r2, r1, r2
 800dd36:	1a9b      	subs	r3, r3, r2
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 815b 	beq.w	800dff4 <f_lseek+0x43c>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	69ba      	ldr	r2, [r7, #24]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	f000 8155 	beq.w	800dff4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	7d1b      	ldrb	r3, [r3, #20]
 800dd4e:	b25b      	sxtb	r3, r3
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	da18      	bge.n	800dd86 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	7858      	ldrb	r0, [r3, #1]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a1a      	ldr	r2, [r3, #32]
 800dd62:	2301      	movs	r3, #1
 800dd64:	f7fd f962 	bl	800b02c <disk_write>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d004      	beq.n	800dd78 <f_lseek+0x1c0>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2201      	movs	r2, #1
 800dd72:	755a      	strb	r2, [r3, #21]
 800dd74:	2301      	movs	r3, #1
 800dd76:	e13f      	b.n	800dff8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	7d1b      	ldrb	r3, [r3, #20]
 800dd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	7858      	ldrb	r0, [r3, #1]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd90:	2301      	movs	r3, #1
 800dd92:	69ba      	ldr	r2, [r7, #24]
 800dd94:	f7fd f92a 	bl	800afec <disk_read>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d004      	beq.n	800dda8 <f_lseek+0x1f0>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2201      	movs	r2, #1
 800dda2:	755a      	strb	r2, [r3, #21]
 800dda4:	2301      	movs	r3, #1
 800dda6:	e127      	b.n	800dff8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	69ba      	ldr	r2, [r7, #24]
 800ddac:	621a      	str	r2, [r3, #32]
 800ddae:	e121      	b.n	800dff4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d908      	bls.n	800ddcc <f_lseek+0x214>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	7d1b      	ldrb	r3, [r3, #20]
 800ddbe:	f003 0302 	and.w	r3, r3, #2
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d102      	bne.n	800ddcc <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	637b      	str	r3, [r7, #52]	; 0x34
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddda:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 80b5 	beq.w	800df4e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	895b      	ldrh	r3, [r3, #10]
 800dde8:	461a      	mov	r2, r3
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	899b      	ldrh	r3, [r3, #12]
 800ddee:	fb02 f303 	mul.w	r3, r2, r3
 800ddf2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ddf4:	6a3b      	ldr	r3, [r7, #32]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d01b      	beq.n	800de32 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	1e5a      	subs	r2, r3, #1
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	fbb2 f2f3 	udiv	r2, r2, r3
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	1e59      	subs	r1, r3, #1
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800de0e:	429a      	cmp	r2, r3
 800de10:	d30f      	bcc.n	800de32 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800de12:	6a3b      	ldr	r3, [r7, #32]
 800de14:	1e5a      	subs	r2, r3, #1
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	425b      	negs	r3, r3
 800de1a:	401a      	ands	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800de30:	e022      	b.n	800de78 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800de38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d119      	bne.n	800de72 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2100      	movs	r1, #0
 800de42:	4618      	mov	r0, r3
 800de44:	f7fd fef0 	bl	800bc28 <create_chain>
 800de48:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d104      	bne.n	800de5a <f_lseek+0x2a2>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2202      	movs	r2, #2
 800de54:	755a      	strb	r2, [r3, #21]
 800de56:	2302      	movs	r3, #2
 800de58:	e0ce      	b.n	800dff8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de60:	d104      	bne.n	800de6c <f_lseek+0x2b4>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2201      	movs	r2, #1
 800de66:	755a      	strb	r2, [r3, #21]
 800de68:	2301      	movs	r3, #1
 800de6a:	e0c5      	b.n	800dff8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de70:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de76:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d067      	beq.n	800df4e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800de7e:	e03a      	b.n	800def6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	699a      	ldr	r2, [r3, #24]
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	441a      	add	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	7d1b      	ldrb	r3, [r3, #20]
 800de98:	f003 0302 	and.w	r3, r3, #2
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00b      	beq.n	800deb8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fd febf 	bl	800bc28 <create_chain>
 800deaa:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d108      	bne.n	800dec4 <f_lseek+0x30c>
							ofs = 0; break;
 800deb2:	2300      	movs	r3, #0
 800deb4:	603b      	str	r3, [r7, #0]
 800deb6:	e022      	b.n	800defe <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800debc:	4618      	mov	r0, r3
 800debe:	f7fd fc60 	bl	800b782 <get_fat>
 800dec2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deca:	d104      	bne.n	800ded6 <f_lseek+0x31e>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	755a      	strb	r2, [r3, #21]
 800ded2:	2301      	movs	r3, #1
 800ded4:	e090      	b.n	800dff8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ded6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d904      	bls.n	800dee6 <f_lseek+0x32e>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d304      	bcc.n	800def0 <f_lseek+0x338>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2202      	movs	r2, #2
 800deea:	755a      	strb	r2, [r3, #21]
 800deec:	2302      	movs	r3, #2
 800deee:	e083      	b.n	800dff8 <f_lseek+0x440>
					fp->clust = clst;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800def4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	429a      	cmp	r2, r3
 800defc:	d8c0      	bhi.n	800de80 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	699a      	ldr	r2, [r3, #24]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	441a      	add	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	899b      	ldrh	r3, [r3, #12]
 800df0e:	461a      	mov	r2, r3
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	fbb3 f1f2 	udiv	r1, r3, r2
 800df16:	fb01 f202 	mul.w	r2, r1, r2
 800df1a:	1a9b      	subs	r3, r3, r2
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d016      	beq.n	800df4e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df24:	4618      	mov	r0, r3
 800df26:	f7fd fc0d 	bl	800b744 <clust2sect>
 800df2a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800df2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d104      	bne.n	800df3c <f_lseek+0x384>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2202      	movs	r2, #2
 800df36:	755a      	strb	r2, [r3, #21]
 800df38:	2302      	movs	r3, #2
 800df3a:	e05d      	b.n	800dff8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	899b      	ldrh	r3, [r3, #12]
 800df40:	461a      	mov	r2, r3
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	fbb3 f3f2 	udiv	r3, r3, r2
 800df48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df4a:	4413      	add	r3, r2
 800df4c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	699a      	ldr	r2, [r3, #24]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	429a      	cmp	r2, r3
 800df58:	d90a      	bls.n	800df70 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	699a      	ldr	r2, [r3, #24]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	7d1b      	ldrb	r3, [r3, #20]
 800df66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	699b      	ldr	r3, [r3, #24]
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	8992      	ldrh	r2, [r2, #12]
 800df78:	fbb3 f1f2 	udiv	r1, r3, r2
 800df7c:	fb01 f202 	mul.w	r2, r1, r2
 800df80:	1a9b      	subs	r3, r3, r2
 800df82:	2b00      	cmp	r3, #0
 800df84:	d036      	beq.n	800dff4 <f_lseek+0x43c>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a1b      	ldr	r3, [r3, #32]
 800df8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d031      	beq.n	800dff4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	b25b      	sxtb	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	da18      	bge.n	800dfcc <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	7858      	ldrb	r0, [r3, #1]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a1a      	ldr	r2, [r3, #32]
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	f7fd f83f 	bl	800b02c <disk_write>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d004      	beq.n	800dfbe <f_lseek+0x406>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	755a      	strb	r2, [r3, #21]
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e01c      	b.n	800dff8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	7d1b      	ldrb	r3, [r3, #20]
 800dfc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	7858      	ldrb	r0, [r3, #1]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfda:	f7fd f807 	bl	800afec <disk_read>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d004      	beq.n	800dfee <f_lseek+0x436>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	755a      	strb	r2, [r3, #21]
 800dfea:	2301      	movs	r3, #1
 800dfec:	e004      	b.n	800dff8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dff2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dff4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3740      	adds	r7, #64	; 0x40
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e000:	b480      	push	{r7}
 800e002:	b087      	sub	sp, #28
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	4613      	mov	r3, r2
 800e00c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e00e:	2301      	movs	r3, #1
 800e010:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e016:	4b1f      	ldr	r3, [pc, #124]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e018:	7a5b      	ldrb	r3, [r3, #9]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d131      	bne.n	800e084 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e020:	4b1c      	ldr	r3, [pc, #112]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e022:	7a5b      	ldrb	r3, [r3, #9]
 800e024:	b2db      	uxtb	r3, r3
 800e026:	461a      	mov	r2, r3
 800e028:	4b1a      	ldr	r3, [pc, #104]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e02a:	2100      	movs	r1, #0
 800e02c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e02e:	4b19      	ldr	r3, [pc, #100]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e030:	7a5b      	ldrb	r3, [r3, #9]
 800e032:	b2db      	uxtb	r3, r3
 800e034:	4a17      	ldr	r2, [pc, #92]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e03e:	4b15      	ldr	r3, [pc, #84]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e040:	7a5b      	ldrb	r3, [r3, #9]
 800e042:	b2db      	uxtb	r3, r3
 800e044:	461a      	mov	r2, r3
 800e046:	4b13      	ldr	r3, [pc, #76]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e048:	4413      	add	r3, r2
 800e04a:	79fa      	ldrb	r2, [r7, #7]
 800e04c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e04e:	4b11      	ldr	r3, [pc, #68]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e050:	7a5b      	ldrb	r3, [r3, #9]
 800e052:	b2db      	uxtb	r3, r3
 800e054:	1c5a      	adds	r2, r3, #1
 800e056:	b2d1      	uxtb	r1, r2
 800e058:	4a0e      	ldr	r2, [pc, #56]	; (800e094 <FATFS_LinkDriverEx+0x94>)
 800e05a:	7251      	strb	r1, [r2, #9]
 800e05c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e05e:	7dbb      	ldrb	r3, [r7, #22]
 800e060:	3330      	adds	r3, #48	; 0x30
 800e062:	b2da      	uxtb	r2, r3
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	3301      	adds	r3, #1
 800e06c:	223a      	movs	r2, #58	; 0x3a
 800e06e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	3302      	adds	r3, #2
 800e074:	222f      	movs	r2, #47	; 0x2f
 800e076:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	3303      	adds	r3, #3
 800e07c:	2200      	movs	r2, #0
 800e07e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e080:	2300      	movs	r3, #0
 800e082:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e084:	7dfb      	ldrb	r3, [r7, #23]
}
 800e086:	4618      	mov	r0, r3
 800e088:	371c      	adds	r7, #28
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	20002ea8 	.word	0x20002ea8

0800e098 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff ffaa 	bl	800e000 <FATFS_LinkDriverEx>
 800e0ac:	4603      	mov	r3, r0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	4603      	mov	r3, r0
 800e0c0:	6039      	str	r1, [r7, #0]
 800e0c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e0c4:	88fb      	ldrh	r3, [r7, #6]
 800e0c6:	2b7f      	cmp	r3, #127	; 0x7f
 800e0c8:	d802      	bhi.n	800e0d0 <ff_convert+0x18>
		c = chr;
 800e0ca:	88fb      	ldrh	r3, [r7, #6]
 800e0cc:	81fb      	strh	r3, [r7, #14]
 800e0ce:	e025      	b.n	800e11c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00b      	beq.n	800e0ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e0d6:	88fb      	ldrh	r3, [r7, #6]
 800e0d8:	2bff      	cmp	r3, #255	; 0xff
 800e0da:	d805      	bhi.n	800e0e8 <ff_convert+0x30>
 800e0dc:	88fb      	ldrh	r3, [r7, #6]
 800e0de:	3b80      	subs	r3, #128	; 0x80
 800e0e0:	4a12      	ldr	r2, [pc, #72]	; (800e12c <ff_convert+0x74>)
 800e0e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0e6:	e000      	b.n	800e0ea <ff_convert+0x32>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	81fb      	strh	r3, [r7, #14]
 800e0ec:	e016      	b.n	800e11c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	81fb      	strh	r3, [r7, #14]
 800e0f2:	e009      	b.n	800e108 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e0f4:	89fb      	ldrh	r3, [r7, #14]
 800e0f6:	4a0d      	ldr	r2, [pc, #52]	; (800e12c <ff_convert+0x74>)
 800e0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0fc:	88fa      	ldrh	r2, [r7, #6]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d006      	beq.n	800e110 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e102:	89fb      	ldrh	r3, [r7, #14]
 800e104:	3301      	adds	r3, #1
 800e106:	81fb      	strh	r3, [r7, #14]
 800e108:	89fb      	ldrh	r3, [r7, #14]
 800e10a:	2b7f      	cmp	r3, #127	; 0x7f
 800e10c:	d9f2      	bls.n	800e0f4 <ff_convert+0x3c>
 800e10e:	e000      	b.n	800e112 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e110:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e112:	89fb      	ldrh	r3, [r7, #14]
 800e114:	3380      	adds	r3, #128	; 0x80
 800e116:	b29b      	uxth	r3, r3
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e11c:	89fb      	ldrh	r3, [r7, #14]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3714      	adds	r7, #20
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	08011980 	.word	0x08011980

0800e130 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e130:	b480      	push	{r7}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e13a:	88fb      	ldrh	r3, [r7, #6]
 800e13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e140:	d201      	bcs.n	800e146 <ff_wtoupper+0x16>
 800e142:	4b3e      	ldr	r3, [pc, #248]	; (800e23c <ff_wtoupper+0x10c>)
 800e144:	e000      	b.n	800e148 <ff_wtoupper+0x18>
 800e146:	4b3e      	ldr	r3, [pc, #248]	; (800e240 <ff_wtoupper+0x110>)
 800e148:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	1c9a      	adds	r2, r3, #2
 800e14e:	617a      	str	r2, [r7, #20]
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e154:	8a7b      	ldrh	r3, [r7, #18]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d068      	beq.n	800e22c <ff_wtoupper+0xfc>
 800e15a:	88fa      	ldrh	r2, [r7, #6]
 800e15c:	8a7b      	ldrh	r3, [r7, #18]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d364      	bcc.n	800e22c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	1c9a      	adds	r2, r3, #2
 800e166:	617a      	str	r2, [r7, #20]
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	823b      	strh	r3, [r7, #16]
 800e16c:	8a3b      	ldrh	r3, [r7, #16]
 800e16e:	0a1b      	lsrs	r3, r3, #8
 800e170:	81fb      	strh	r3, [r7, #14]
 800e172:	8a3b      	ldrh	r3, [r7, #16]
 800e174:	b2db      	uxtb	r3, r3
 800e176:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e178:	88fa      	ldrh	r2, [r7, #6]
 800e17a:	8a79      	ldrh	r1, [r7, #18]
 800e17c:	8a3b      	ldrh	r3, [r7, #16]
 800e17e:	440b      	add	r3, r1
 800e180:	429a      	cmp	r2, r3
 800e182:	da49      	bge.n	800e218 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e184:	89fb      	ldrh	r3, [r7, #14]
 800e186:	2b08      	cmp	r3, #8
 800e188:	d84f      	bhi.n	800e22a <ff_wtoupper+0xfa>
 800e18a:	a201      	add	r2, pc, #4	; (adr r2, 800e190 <ff_wtoupper+0x60>)
 800e18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e190:	0800e1b5 	.word	0x0800e1b5
 800e194:	0800e1c7 	.word	0x0800e1c7
 800e198:	0800e1dd 	.word	0x0800e1dd
 800e19c:	0800e1e5 	.word	0x0800e1e5
 800e1a0:	0800e1ed 	.word	0x0800e1ed
 800e1a4:	0800e1f5 	.word	0x0800e1f5
 800e1a8:	0800e1fd 	.word	0x0800e1fd
 800e1ac:	0800e205 	.word	0x0800e205
 800e1b0:	0800e20d 	.word	0x0800e20d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e1b4:	88fa      	ldrh	r2, [r7, #6]
 800e1b6:	8a7b      	ldrh	r3, [r7, #18]
 800e1b8:	1ad3      	subs	r3, r2, r3
 800e1ba:	005b      	lsls	r3, r3, #1
 800e1bc:	697a      	ldr	r2, [r7, #20]
 800e1be:	4413      	add	r3, r2
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	80fb      	strh	r3, [r7, #6]
 800e1c4:	e027      	b.n	800e216 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e1c6:	88fa      	ldrh	r2, [r7, #6]
 800e1c8:	8a7b      	ldrh	r3, [r7, #18]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	88fa      	ldrh	r2, [r7, #6]
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	80fb      	strh	r3, [r7, #6]
 800e1da:	e01c      	b.n	800e216 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e1dc:	88fb      	ldrh	r3, [r7, #6]
 800e1de:	3b10      	subs	r3, #16
 800e1e0:	80fb      	strh	r3, [r7, #6]
 800e1e2:	e018      	b.n	800e216 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	3b20      	subs	r3, #32
 800e1e8:	80fb      	strh	r3, [r7, #6]
 800e1ea:	e014      	b.n	800e216 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e1ec:	88fb      	ldrh	r3, [r7, #6]
 800e1ee:	3b30      	subs	r3, #48	; 0x30
 800e1f0:	80fb      	strh	r3, [r7, #6]
 800e1f2:	e010      	b.n	800e216 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e1f4:	88fb      	ldrh	r3, [r7, #6]
 800e1f6:	3b1a      	subs	r3, #26
 800e1f8:	80fb      	strh	r3, [r7, #6]
 800e1fa:	e00c      	b.n	800e216 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e1fc:	88fb      	ldrh	r3, [r7, #6]
 800e1fe:	3308      	adds	r3, #8
 800e200:	80fb      	strh	r3, [r7, #6]
 800e202:	e008      	b.n	800e216 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e204:	88fb      	ldrh	r3, [r7, #6]
 800e206:	3b50      	subs	r3, #80	; 0x50
 800e208:	80fb      	strh	r3, [r7, #6]
 800e20a:	e004      	b.n	800e216 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e20c:	88fb      	ldrh	r3, [r7, #6]
 800e20e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e212:	80fb      	strh	r3, [r7, #6]
 800e214:	bf00      	nop
			}
			break;
 800e216:	e008      	b.n	800e22a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e218:	89fb      	ldrh	r3, [r7, #14]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d195      	bne.n	800e14a <ff_wtoupper+0x1a>
 800e21e:	8a3b      	ldrh	r3, [r7, #16]
 800e220:	005b      	lsls	r3, r3, #1
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	4413      	add	r3, r2
 800e226:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e228:	e78f      	b.n	800e14a <ff_wtoupper+0x1a>
			break;
 800e22a:	bf00      	nop
	}

	return chr;
 800e22c:	88fb      	ldrh	r3, [r7, #6]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	371c      	adds	r7, #28
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	08011a80 	.word	0x08011a80
 800e240:	08011c74 	.word	0x08011c74

0800e244 <atoi>:
 800e244:	220a      	movs	r2, #10
 800e246:	2100      	movs	r1, #0
 800e248:	f000 b882 	b.w	800e350 <strtol>

0800e24c <_strtol_l.constprop.0>:
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e252:	d001      	beq.n	800e258 <_strtol_l.constprop.0+0xc>
 800e254:	2b24      	cmp	r3, #36	; 0x24
 800e256:	d906      	bls.n	800e266 <_strtol_l.constprop.0+0x1a>
 800e258:	f000 f9ea 	bl	800e630 <__errno>
 800e25c:	2316      	movs	r3, #22
 800e25e:	6003      	str	r3, [r0, #0]
 800e260:	2000      	movs	r0, #0
 800e262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e266:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e34c <_strtol_l.constprop.0+0x100>
 800e26a:	460d      	mov	r5, r1
 800e26c:	462e      	mov	r6, r5
 800e26e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e272:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e276:	f017 0708 	ands.w	r7, r7, #8
 800e27a:	d1f7      	bne.n	800e26c <_strtol_l.constprop.0+0x20>
 800e27c:	2c2d      	cmp	r4, #45	; 0x2d
 800e27e:	d132      	bne.n	800e2e6 <_strtol_l.constprop.0+0x9a>
 800e280:	782c      	ldrb	r4, [r5, #0]
 800e282:	2701      	movs	r7, #1
 800e284:	1cb5      	adds	r5, r6, #2
 800e286:	2b00      	cmp	r3, #0
 800e288:	d05b      	beq.n	800e342 <_strtol_l.constprop.0+0xf6>
 800e28a:	2b10      	cmp	r3, #16
 800e28c:	d109      	bne.n	800e2a2 <_strtol_l.constprop.0+0x56>
 800e28e:	2c30      	cmp	r4, #48	; 0x30
 800e290:	d107      	bne.n	800e2a2 <_strtol_l.constprop.0+0x56>
 800e292:	782c      	ldrb	r4, [r5, #0]
 800e294:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e298:	2c58      	cmp	r4, #88	; 0x58
 800e29a:	d14d      	bne.n	800e338 <_strtol_l.constprop.0+0xec>
 800e29c:	786c      	ldrb	r4, [r5, #1]
 800e29e:	2310      	movs	r3, #16
 800e2a0:	3502      	adds	r5, #2
 800e2a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e2a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2aa:	f04f 0e00 	mov.w	lr, #0
 800e2ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800e2b2:	4676      	mov	r6, lr
 800e2b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800e2b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e2bc:	f1bc 0f09 	cmp.w	ip, #9
 800e2c0:	d816      	bhi.n	800e2f0 <_strtol_l.constprop.0+0xa4>
 800e2c2:	4664      	mov	r4, ip
 800e2c4:	42a3      	cmp	r3, r4
 800e2c6:	dd24      	ble.n	800e312 <_strtol_l.constprop.0+0xc6>
 800e2c8:	f1be 3fff 	cmp.w	lr, #4294967295
 800e2cc:	d008      	beq.n	800e2e0 <_strtol_l.constprop.0+0x94>
 800e2ce:	45b1      	cmp	r9, r6
 800e2d0:	d31c      	bcc.n	800e30c <_strtol_l.constprop.0+0xc0>
 800e2d2:	d101      	bne.n	800e2d8 <_strtol_l.constprop.0+0x8c>
 800e2d4:	45a2      	cmp	sl, r4
 800e2d6:	db19      	blt.n	800e30c <_strtol_l.constprop.0+0xc0>
 800e2d8:	fb06 4603 	mla	r6, r6, r3, r4
 800e2dc:	f04f 0e01 	mov.w	lr, #1
 800e2e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2e4:	e7e8      	b.n	800e2b8 <_strtol_l.constprop.0+0x6c>
 800e2e6:	2c2b      	cmp	r4, #43	; 0x2b
 800e2e8:	bf04      	itt	eq
 800e2ea:	782c      	ldrbeq	r4, [r5, #0]
 800e2ec:	1cb5      	addeq	r5, r6, #2
 800e2ee:	e7ca      	b.n	800e286 <_strtol_l.constprop.0+0x3a>
 800e2f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e2f4:	f1bc 0f19 	cmp.w	ip, #25
 800e2f8:	d801      	bhi.n	800e2fe <_strtol_l.constprop.0+0xb2>
 800e2fa:	3c37      	subs	r4, #55	; 0x37
 800e2fc:	e7e2      	b.n	800e2c4 <_strtol_l.constprop.0+0x78>
 800e2fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e302:	f1bc 0f19 	cmp.w	ip, #25
 800e306:	d804      	bhi.n	800e312 <_strtol_l.constprop.0+0xc6>
 800e308:	3c57      	subs	r4, #87	; 0x57
 800e30a:	e7db      	b.n	800e2c4 <_strtol_l.constprop.0+0x78>
 800e30c:	f04f 3eff 	mov.w	lr, #4294967295
 800e310:	e7e6      	b.n	800e2e0 <_strtol_l.constprop.0+0x94>
 800e312:	f1be 3fff 	cmp.w	lr, #4294967295
 800e316:	d105      	bne.n	800e324 <_strtol_l.constprop.0+0xd8>
 800e318:	2322      	movs	r3, #34	; 0x22
 800e31a:	6003      	str	r3, [r0, #0]
 800e31c:	4646      	mov	r6, r8
 800e31e:	b942      	cbnz	r2, 800e332 <_strtol_l.constprop.0+0xe6>
 800e320:	4630      	mov	r0, r6
 800e322:	e79e      	b.n	800e262 <_strtol_l.constprop.0+0x16>
 800e324:	b107      	cbz	r7, 800e328 <_strtol_l.constprop.0+0xdc>
 800e326:	4276      	negs	r6, r6
 800e328:	2a00      	cmp	r2, #0
 800e32a:	d0f9      	beq.n	800e320 <_strtol_l.constprop.0+0xd4>
 800e32c:	f1be 0f00 	cmp.w	lr, #0
 800e330:	d000      	beq.n	800e334 <_strtol_l.constprop.0+0xe8>
 800e332:	1e69      	subs	r1, r5, #1
 800e334:	6011      	str	r1, [r2, #0]
 800e336:	e7f3      	b.n	800e320 <_strtol_l.constprop.0+0xd4>
 800e338:	2430      	movs	r4, #48	; 0x30
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1b1      	bne.n	800e2a2 <_strtol_l.constprop.0+0x56>
 800e33e:	2308      	movs	r3, #8
 800e340:	e7af      	b.n	800e2a2 <_strtol_l.constprop.0+0x56>
 800e342:	2c30      	cmp	r4, #48	; 0x30
 800e344:	d0a5      	beq.n	800e292 <_strtol_l.constprop.0+0x46>
 800e346:	230a      	movs	r3, #10
 800e348:	e7ab      	b.n	800e2a2 <_strtol_l.constprop.0+0x56>
 800e34a:	bf00      	nop
 800e34c:	08011d31 	.word	0x08011d31

0800e350 <strtol>:
 800e350:	4613      	mov	r3, r2
 800e352:	460a      	mov	r2, r1
 800e354:	4601      	mov	r1, r0
 800e356:	4802      	ldr	r0, [pc, #8]	; (800e360 <strtol+0x10>)
 800e358:	6800      	ldr	r0, [r0, #0]
 800e35a:	f7ff bf77 	b.w	800e24c <_strtol_l.constprop.0>
 800e35e:	bf00      	nop
 800e360:	20000094 	.word	0x20000094

0800e364 <gcvt>:
 800e364:	b530      	push	{r4, r5, lr}
 800e366:	2200      	movs	r2, #0
 800e368:	b085      	sub	sp, #20
 800e36a:	460c      	mov	r4, r1
 800e36c:	4605      	mov	r5, r0
 800e36e:	2300      	movs	r3, #0
 800e370:	ec51 0b10 	vmov	r0, r1, d0
 800e374:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e378:	f7f2 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800e37c:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e380:	4622      	mov	r2, r4
 800e382:	b118      	cbz	r0, 800e38c <gcvt+0x28>
 800e384:	232d      	movs	r3, #45	; 0x2d
 800e386:	f802 3b01 	strb.w	r3, [r2], #1
 800e38a:	3d01      	subs	r5, #1
 800e38c:	2300      	movs	r3, #0
 800e38e:	4806      	ldr	r0, [pc, #24]	; (800e3a8 <gcvt+0x44>)
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	4629      	mov	r1, r5
 800e394:	2367      	movs	r3, #103	; 0x67
 800e396:	6800      	ldr	r0, [r0, #0]
 800e398:	f000 fae6 	bl	800e968 <_gcvt>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	bf14      	ite	ne
 800e3a0:	4620      	movne	r0, r4
 800e3a2:	2000      	moveq	r0, #0
 800e3a4:	b005      	add	sp, #20
 800e3a6:	bd30      	pop	{r4, r5, pc}
 800e3a8:	20000094 	.word	0x20000094

0800e3ac <std>:
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	b510      	push	{r4, lr}
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3ba:	6083      	str	r3, [r0, #8]
 800e3bc:	8181      	strh	r1, [r0, #12]
 800e3be:	6643      	str	r3, [r0, #100]	; 0x64
 800e3c0:	81c2      	strh	r2, [r0, #14]
 800e3c2:	6183      	str	r3, [r0, #24]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	2208      	movs	r2, #8
 800e3c8:	305c      	adds	r0, #92	; 0x5c
 800e3ca:	f000 f8e2 	bl	800e592 <memset>
 800e3ce:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <std+0x38>)
 800e3d0:	6263      	str	r3, [r4, #36]	; 0x24
 800e3d2:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <std+0x3c>)
 800e3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3d6:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <std+0x40>)
 800e3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3da:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <std+0x44>)
 800e3dc:	6224      	str	r4, [r4, #32]
 800e3de:	6323      	str	r3, [r4, #48]	; 0x30
 800e3e0:	bd10      	pop	{r4, pc}
 800e3e2:	bf00      	nop
 800e3e4:	0800e50d 	.word	0x0800e50d
 800e3e8:	0800e52f 	.word	0x0800e52f
 800e3ec:	0800e567 	.word	0x0800e567
 800e3f0:	0800e58b 	.word	0x0800e58b

0800e3f4 <stdio_exit_handler>:
 800e3f4:	4a02      	ldr	r2, [pc, #8]	; (800e400 <stdio_exit_handler+0xc>)
 800e3f6:	4903      	ldr	r1, [pc, #12]	; (800e404 <stdio_exit_handler+0x10>)
 800e3f8:	4803      	ldr	r0, [pc, #12]	; (800e408 <stdio_exit_handler+0x14>)
 800e3fa:	f000 b869 	b.w	800e4d0 <_fwalk_sglue>
 800e3fe:	bf00      	nop
 800e400:	2000003c 	.word	0x2000003c
 800e404:	0800ebf5 	.word	0x0800ebf5
 800e408:	20000048 	.word	0x20000048

0800e40c <cleanup_stdio>:
 800e40c:	6841      	ldr	r1, [r0, #4]
 800e40e:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <cleanup_stdio+0x34>)
 800e410:	4299      	cmp	r1, r3
 800e412:	b510      	push	{r4, lr}
 800e414:	4604      	mov	r4, r0
 800e416:	d001      	beq.n	800e41c <cleanup_stdio+0x10>
 800e418:	f000 fbec 	bl	800ebf4 <_fflush_r>
 800e41c:	68a1      	ldr	r1, [r4, #8]
 800e41e:	4b09      	ldr	r3, [pc, #36]	; (800e444 <cleanup_stdio+0x38>)
 800e420:	4299      	cmp	r1, r3
 800e422:	d002      	beq.n	800e42a <cleanup_stdio+0x1e>
 800e424:	4620      	mov	r0, r4
 800e426:	f000 fbe5 	bl	800ebf4 <_fflush_r>
 800e42a:	68e1      	ldr	r1, [r4, #12]
 800e42c:	4b06      	ldr	r3, [pc, #24]	; (800e448 <cleanup_stdio+0x3c>)
 800e42e:	4299      	cmp	r1, r3
 800e430:	d004      	beq.n	800e43c <cleanup_stdio+0x30>
 800e432:	4620      	mov	r0, r4
 800e434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e438:	f000 bbdc 	b.w	800ebf4 <_fflush_r>
 800e43c:	bd10      	pop	{r4, pc}
 800e43e:	bf00      	nop
 800e440:	20002eb4 	.word	0x20002eb4
 800e444:	20002f1c 	.word	0x20002f1c
 800e448:	20002f84 	.word	0x20002f84

0800e44c <global_stdio_init.part.0>:
 800e44c:	b510      	push	{r4, lr}
 800e44e:	4b0b      	ldr	r3, [pc, #44]	; (800e47c <global_stdio_init.part.0+0x30>)
 800e450:	4c0b      	ldr	r4, [pc, #44]	; (800e480 <global_stdio_init.part.0+0x34>)
 800e452:	4a0c      	ldr	r2, [pc, #48]	; (800e484 <global_stdio_init.part.0+0x38>)
 800e454:	601a      	str	r2, [r3, #0]
 800e456:	4620      	mov	r0, r4
 800e458:	2200      	movs	r2, #0
 800e45a:	2104      	movs	r1, #4
 800e45c:	f7ff ffa6 	bl	800e3ac <std>
 800e460:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e464:	2201      	movs	r2, #1
 800e466:	2109      	movs	r1, #9
 800e468:	f7ff ffa0 	bl	800e3ac <std>
 800e46c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e470:	2202      	movs	r2, #2
 800e472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e476:	2112      	movs	r1, #18
 800e478:	f7ff bf98 	b.w	800e3ac <std>
 800e47c:	20002fec 	.word	0x20002fec
 800e480:	20002eb4 	.word	0x20002eb4
 800e484:	0800e3f5 	.word	0x0800e3f5

0800e488 <__sfp_lock_acquire>:
 800e488:	4801      	ldr	r0, [pc, #4]	; (800e490 <__sfp_lock_acquire+0x8>)
 800e48a:	f000 b8fb 	b.w	800e684 <__retarget_lock_acquire_recursive>
 800e48e:	bf00      	nop
 800e490:	20002ff5 	.word	0x20002ff5

0800e494 <__sfp_lock_release>:
 800e494:	4801      	ldr	r0, [pc, #4]	; (800e49c <__sfp_lock_release+0x8>)
 800e496:	f000 b8f6 	b.w	800e686 <__retarget_lock_release_recursive>
 800e49a:	bf00      	nop
 800e49c:	20002ff5 	.word	0x20002ff5

0800e4a0 <__sinit>:
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	f7ff fff0 	bl	800e488 <__sfp_lock_acquire>
 800e4a8:	6a23      	ldr	r3, [r4, #32]
 800e4aa:	b11b      	cbz	r3, 800e4b4 <__sinit+0x14>
 800e4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4b0:	f7ff bff0 	b.w	800e494 <__sfp_lock_release>
 800e4b4:	4b04      	ldr	r3, [pc, #16]	; (800e4c8 <__sinit+0x28>)
 800e4b6:	6223      	str	r3, [r4, #32]
 800e4b8:	4b04      	ldr	r3, [pc, #16]	; (800e4cc <__sinit+0x2c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1f5      	bne.n	800e4ac <__sinit+0xc>
 800e4c0:	f7ff ffc4 	bl	800e44c <global_stdio_init.part.0>
 800e4c4:	e7f2      	b.n	800e4ac <__sinit+0xc>
 800e4c6:	bf00      	nop
 800e4c8:	0800e40d 	.word	0x0800e40d
 800e4cc:	20002fec 	.word	0x20002fec

0800e4d0 <_fwalk_sglue>:
 800e4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	4688      	mov	r8, r1
 800e4d8:	4614      	mov	r4, r2
 800e4da:	2600      	movs	r6, #0
 800e4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4e0:	f1b9 0901 	subs.w	r9, r9, #1
 800e4e4:	d505      	bpl.n	800e4f2 <_fwalk_sglue+0x22>
 800e4e6:	6824      	ldr	r4, [r4, #0]
 800e4e8:	2c00      	cmp	r4, #0
 800e4ea:	d1f7      	bne.n	800e4dc <_fwalk_sglue+0xc>
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4f2:	89ab      	ldrh	r3, [r5, #12]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d907      	bls.n	800e508 <_fwalk_sglue+0x38>
 800e4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	d003      	beq.n	800e508 <_fwalk_sglue+0x38>
 800e500:	4629      	mov	r1, r5
 800e502:	4638      	mov	r0, r7
 800e504:	47c0      	blx	r8
 800e506:	4306      	orrs	r6, r0
 800e508:	3568      	adds	r5, #104	; 0x68
 800e50a:	e7e9      	b.n	800e4e0 <_fwalk_sglue+0x10>

0800e50c <__sread>:
 800e50c:	b510      	push	{r4, lr}
 800e50e:	460c      	mov	r4, r1
 800e510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e514:	f000 f868 	bl	800e5e8 <_read_r>
 800e518:	2800      	cmp	r0, #0
 800e51a:	bfab      	itete	ge
 800e51c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e51e:	89a3      	ldrhlt	r3, [r4, #12]
 800e520:	181b      	addge	r3, r3, r0
 800e522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e526:	bfac      	ite	ge
 800e528:	6563      	strge	r3, [r4, #84]	; 0x54
 800e52a:	81a3      	strhlt	r3, [r4, #12]
 800e52c:	bd10      	pop	{r4, pc}

0800e52e <__swrite>:
 800e52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e532:	461f      	mov	r7, r3
 800e534:	898b      	ldrh	r3, [r1, #12]
 800e536:	05db      	lsls	r3, r3, #23
 800e538:	4605      	mov	r5, r0
 800e53a:	460c      	mov	r4, r1
 800e53c:	4616      	mov	r6, r2
 800e53e:	d505      	bpl.n	800e54c <__swrite+0x1e>
 800e540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e544:	2302      	movs	r3, #2
 800e546:	2200      	movs	r2, #0
 800e548:	f000 f83c 	bl	800e5c4 <_lseek_r>
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	4632      	mov	r2, r6
 800e55a:	463b      	mov	r3, r7
 800e55c:	4628      	mov	r0, r5
 800e55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e562:	f000 b853 	b.w	800e60c <_write_r>

0800e566 <__sseek>:
 800e566:	b510      	push	{r4, lr}
 800e568:	460c      	mov	r4, r1
 800e56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e56e:	f000 f829 	bl	800e5c4 <_lseek_r>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	89a3      	ldrh	r3, [r4, #12]
 800e576:	bf15      	itete	ne
 800e578:	6560      	strne	r0, [r4, #84]	; 0x54
 800e57a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e57e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e582:	81a3      	strheq	r3, [r4, #12]
 800e584:	bf18      	it	ne
 800e586:	81a3      	strhne	r3, [r4, #12]
 800e588:	bd10      	pop	{r4, pc}

0800e58a <__sclose>:
 800e58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e58e:	f000 b809 	b.w	800e5a4 <_close_r>

0800e592 <memset>:
 800e592:	4402      	add	r2, r0
 800e594:	4603      	mov	r3, r0
 800e596:	4293      	cmp	r3, r2
 800e598:	d100      	bne.n	800e59c <memset+0xa>
 800e59a:	4770      	bx	lr
 800e59c:	f803 1b01 	strb.w	r1, [r3], #1
 800e5a0:	e7f9      	b.n	800e596 <memset+0x4>
	...

0800e5a4 <_close_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	4d06      	ldr	r5, [pc, #24]	; (800e5c0 <_close_r+0x1c>)
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	4608      	mov	r0, r1
 800e5ae:	602b      	str	r3, [r5, #0]
 800e5b0:	f7f6 fd3b 	bl	800502a <_close>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d102      	bne.n	800e5be <_close_r+0x1a>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	b103      	cbz	r3, 800e5be <_close_r+0x1a>
 800e5bc:	6023      	str	r3, [r4, #0]
 800e5be:	bd38      	pop	{r3, r4, r5, pc}
 800e5c0:	20002ff0 	.word	0x20002ff0

0800e5c4 <_lseek_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	4d07      	ldr	r5, [pc, #28]	; (800e5e4 <_lseek_r+0x20>)
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	4608      	mov	r0, r1
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	602a      	str	r2, [r5, #0]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	f7f6 fd50 	bl	8005078 <_lseek>
 800e5d8:	1c43      	adds	r3, r0, #1
 800e5da:	d102      	bne.n	800e5e2 <_lseek_r+0x1e>
 800e5dc:	682b      	ldr	r3, [r5, #0]
 800e5de:	b103      	cbz	r3, 800e5e2 <_lseek_r+0x1e>
 800e5e0:	6023      	str	r3, [r4, #0]
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}
 800e5e4:	20002ff0 	.word	0x20002ff0

0800e5e8 <_read_r>:
 800e5e8:	b538      	push	{r3, r4, r5, lr}
 800e5ea:	4d07      	ldr	r5, [pc, #28]	; (800e608 <_read_r+0x20>)
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f7f6 fcfa 	bl	8004ff0 <_read>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d102      	bne.n	800e606 <_read_r+0x1e>
 800e600:	682b      	ldr	r3, [r5, #0]
 800e602:	b103      	cbz	r3, 800e606 <_read_r+0x1e>
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	bd38      	pop	{r3, r4, r5, pc}
 800e608:	20002ff0 	.word	0x20002ff0

0800e60c <_write_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d07      	ldr	r5, [pc, #28]	; (800e62c <_write_r+0x20>)
 800e610:	4604      	mov	r4, r0
 800e612:	4608      	mov	r0, r1
 800e614:	4611      	mov	r1, r2
 800e616:	2200      	movs	r2, #0
 800e618:	602a      	str	r2, [r5, #0]
 800e61a:	461a      	mov	r2, r3
 800e61c:	f7f5 fec2 	bl	80043a4 <_write>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d102      	bne.n	800e62a <_write_r+0x1e>
 800e624:	682b      	ldr	r3, [r5, #0]
 800e626:	b103      	cbz	r3, 800e62a <_write_r+0x1e>
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	20002ff0 	.word	0x20002ff0

0800e630 <__errno>:
 800e630:	4b01      	ldr	r3, [pc, #4]	; (800e638 <__errno+0x8>)
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	20000094 	.word	0x20000094

0800e63c <__libc_init_array>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4d0d      	ldr	r5, [pc, #52]	; (800e674 <__libc_init_array+0x38>)
 800e640:	4c0d      	ldr	r4, [pc, #52]	; (800e678 <__libc_init_array+0x3c>)
 800e642:	1b64      	subs	r4, r4, r5
 800e644:	10a4      	asrs	r4, r4, #2
 800e646:	2600      	movs	r6, #0
 800e648:	42a6      	cmp	r6, r4
 800e64a:	d109      	bne.n	800e660 <__libc_init_array+0x24>
 800e64c:	4d0b      	ldr	r5, [pc, #44]	; (800e67c <__libc_init_array+0x40>)
 800e64e:	4c0c      	ldr	r4, [pc, #48]	; (800e680 <__libc_init_array+0x44>)
 800e650:	f003 f8f2 	bl	8011838 <_init>
 800e654:	1b64      	subs	r4, r4, r5
 800e656:	10a4      	asrs	r4, r4, #2
 800e658:	2600      	movs	r6, #0
 800e65a:	42a6      	cmp	r6, r4
 800e65c:	d105      	bne.n	800e66a <__libc_init_array+0x2e>
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	f855 3b04 	ldr.w	r3, [r5], #4
 800e664:	4798      	blx	r3
 800e666:	3601      	adds	r6, #1
 800e668:	e7ee      	b.n	800e648 <__libc_init_array+0xc>
 800e66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66e:	4798      	blx	r3
 800e670:	3601      	adds	r6, #1
 800e672:	e7f2      	b.n	800e65a <__libc_init_array+0x1e>
 800e674:	080120c8 	.word	0x080120c8
 800e678:	080120c8 	.word	0x080120c8
 800e67c:	080120c8 	.word	0x080120c8
 800e680:	080120cc 	.word	0x080120cc

0800e684 <__retarget_lock_acquire_recursive>:
 800e684:	4770      	bx	lr

0800e686 <__retarget_lock_release_recursive>:
 800e686:	4770      	bx	lr

0800e688 <_free_r>:
 800e688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e68a:	2900      	cmp	r1, #0
 800e68c:	d044      	beq.n	800e718 <_free_r+0x90>
 800e68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e692:	9001      	str	r0, [sp, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	f1a1 0404 	sub.w	r4, r1, #4
 800e69a:	bfb8      	it	lt
 800e69c:	18e4      	addlt	r4, r4, r3
 800e69e:	f000 f8df 	bl	800e860 <__malloc_lock>
 800e6a2:	4a1e      	ldr	r2, [pc, #120]	; (800e71c <_free_r+0x94>)
 800e6a4:	9801      	ldr	r0, [sp, #4]
 800e6a6:	6813      	ldr	r3, [r2, #0]
 800e6a8:	b933      	cbnz	r3, 800e6b8 <_free_r+0x30>
 800e6aa:	6063      	str	r3, [r4, #4]
 800e6ac:	6014      	str	r4, [r2, #0]
 800e6ae:	b003      	add	sp, #12
 800e6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6b4:	f000 b8da 	b.w	800e86c <__malloc_unlock>
 800e6b8:	42a3      	cmp	r3, r4
 800e6ba:	d908      	bls.n	800e6ce <_free_r+0x46>
 800e6bc:	6825      	ldr	r5, [r4, #0]
 800e6be:	1961      	adds	r1, r4, r5
 800e6c0:	428b      	cmp	r3, r1
 800e6c2:	bf01      	itttt	eq
 800e6c4:	6819      	ldreq	r1, [r3, #0]
 800e6c6:	685b      	ldreq	r3, [r3, #4]
 800e6c8:	1949      	addeq	r1, r1, r5
 800e6ca:	6021      	streq	r1, [r4, #0]
 800e6cc:	e7ed      	b.n	800e6aa <_free_r+0x22>
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	b10b      	cbz	r3, 800e6d8 <_free_r+0x50>
 800e6d4:	42a3      	cmp	r3, r4
 800e6d6:	d9fa      	bls.n	800e6ce <_free_r+0x46>
 800e6d8:	6811      	ldr	r1, [r2, #0]
 800e6da:	1855      	adds	r5, r2, r1
 800e6dc:	42a5      	cmp	r5, r4
 800e6de:	d10b      	bne.n	800e6f8 <_free_r+0x70>
 800e6e0:	6824      	ldr	r4, [r4, #0]
 800e6e2:	4421      	add	r1, r4
 800e6e4:	1854      	adds	r4, r2, r1
 800e6e6:	42a3      	cmp	r3, r4
 800e6e8:	6011      	str	r1, [r2, #0]
 800e6ea:	d1e0      	bne.n	800e6ae <_free_r+0x26>
 800e6ec:	681c      	ldr	r4, [r3, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	6053      	str	r3, [r2, #4]
 800e6f2:	440c      	add	r4, r1
 800e6f4:	6014      	str	r4, [r2, #0]
 800e6f6:	e7da      	b.n	800e6ae <_free_r+0x26>
 800e6f8:	d902      	bls.n	800e700 <_free_r+0x78>
 800e6fa:	230c      	movs	r3, #12
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	e7d6      	b.n	800e6ae <_free_r+0x26>
 800e700:	6825      	ldr	r5, [r4, #0]
 800e702:	1961      	adds	r1, r4, r5
 800e704:	428b      	cmp	r3, r1
 800e706:	bf04      	itt	eq
 800e708:	6819      	ldreq	r1, [r3, #0]
 800e70a:	685b      	ldreq	r3, [r3, #4]
 800e70c:	6063      	str	r3, [r4, #4]
 800e70e:	bf04      	itt	eq
 800e710:	1949      	addeq	r1, r1, r5
 800e712:	6021      	streq	r1, [r4, #0]
 800e714:	6054      	str	r4, [r2, #4]
 800e716:	e7ca      	b.n	800e6ae <_free_r+0x26>
 800e718:	b003      	add	sp, #12
 800e71a:	bd30      	pop	{r4, r5, pc}
 800e71c:	20002ff8 	.word	0x20002ff8

0800e720 <sbrk_aligned>:
 800e720:	b570      	push	{r4, r5, r6, lr}
 800e722:	4e0e      	ldr	r6, [pc, #56]	; (800e75c <sbrk_aligned+0x3c>)
 800e724:	460c      	mov	r4, r1
 800e726:	6831      	ldr	r1, [r6, #0]
 800e728:	4605      	mov	r5, r0
 800e72a:	b911      	cbnz	r1, 800e732 <sbrk_aligned+0x12>
 800e72c:	f000 fa8a 	bl	800ec44 <_sbrk_r>
 800e730:	6030      	str	r0, [r6, #0]
 800e732:	4621      	mov	r1, r4
 800e734:	4628      	mov	r0, r5
 800e736:	f000 fa85 	bl	800ec44 <_sbrk_r>
 800e73a:	1c43      	adds	r3, r0, #1
 800e73c:	d00a      	beq.n	800e754 <sbrk_aligned+0x34>
 800e73e:	1cc4      	adds	r4, r0, #3
 800e740:	f024 0403 	bic.w	r4, r4, #3
 800e744:	42a0      	cmp	r0, r4
 800e746:	d007      	beq.n	800e758 <sbrk_aligned+0x38>
 800e748:	1a21      	subs	r1, r4, r0
 800e74a:	4628      	mov	r0, r5
 800e74c:	f000 fa7a 	bl	800ec44 <_sbrk_r>
 800e750:	3001      	adds	r0, #1
 800e752:	d101      	bne.n	800e758 <sbrk_aligned+0x38>
 800e754:	f04f 34ff 	mov.w	r4, #4294967295
 800e758:	4620      	mov	r0, r4
 800e75a:	bd70      	pop	{r4, r5, r6, pc}
 800e75c:	20002ffc 	.word	0x20002ffc

0800e760 <_malloc_r>:
 800e760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e764:	1ccd      	adds	r5, r1, #3
 800e766:	f025 0503 	bic.w	r5, r5, #3
 800e76a:	3508      	adds	r5, #8
 800e76c:	2d0c      	cmp	r5, #12
 800e76e:	bf38      	it	cc
 800e770:	250c      	movcc	r5, #12
 800e772:	2d00      	cmp	r5, #0
 800e774:	4607      	mov	r7, r0
 800e776:	db01      	blt.n	800e77c <_malloc_r+0x1c>
 800e778:	42a9      	cmp	r1, r5
 800e77a:	d905      	bls.n	800e788 <_malloc_r+0x28>
 800e77c:	230c      	movs	r3, #12
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	2600      	movs	r6, #0
 800e782:	4630      	mov	r0, r6
 800e784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e788:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e85c <_malloc_r+0xfc>
 800e78c:	f000 f868 	bl	800e860 <__malloc_lock>
 800e790:	f8d8 3000 	ldr.w	r3, [r8]
 800e794:	461c      	mov	r4, r3
 800e796:	bb5c      	cbnz	r4, 800e7f0 <_malloc_r+0x90>
 800e798:	4629      	mov	r1, r5
 800e79a:	4638      	mov	r0, r7
 800e79c:	f7ff ffc0 	bl	800e720 <sbrk_aligned>
 800e7a0:	1c43      	adds	r3, r0, #1
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	d155      	bne.n	800e852 <_malloc_r+0xf2>
 800e7a6:	f8d8 4000 	ldr.w	r4, [r8]
 800e7aa:	4626      	mov	r6, r4
 800e7ac:	2e00      	cmp	r6, #0
 800e7ae:	d145      	bne.n	800e83c <_malloc_r+0xdc>
 800e7b0:	2c00      	cmp	r4, #0
 800e7b2:	d048      	beq.n	800e846 <_malloc_r+0xe6>
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	4631      	mov	r1, r6
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	eb04 0903 	add.w	r9, r4, r3
 800e7be:	f000 fa41 	bl	800ec44 <_sbrk_r>
 800e7c2:	4581      	cmp	r9, r0
 800e7c4:	d13f      	bne.n	800e846 <_malloc_r+0xe6>
 800e7c6:	6821      	ldr	r1, [r4, #0]
 800e7c8:	1a6d      	subs	r5, r5, r1
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f7ff ffa7 	bl	800e720 <sbrk_aligned>
 800e7d2:	3001      	adds	r0, #1
 800e7d4:	d037      	beq.n	800e846 <_malloc_r+0xe6>
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	442b      	add	r3, r5
 800e7da:	6023      	str	r3, [r4, #0]
 800e7dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d038      	beq.n	800e856 <_malloc_r+0xf6>
 800e7e4:	685a      	ldr	r2, [r3, #4]
 800e7e6:	42a2      	cmp	r2, r4
 800e7e8:	d12b      	bne.n	800e842 <_malloc_r+0xe2>
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	605a      	str	r2, [r3, #4]
 800e7ee:	e00f      	b.n	800e810 <_malloc_r+0xb0>
 800e7f0:	6822      	ldr	r2, [r4, #0]
 800e7f2:	1b52      	subs	r2, r2, r5
 800e7f4:	d41f      	bmi.n	800e836 <_malloc_r+0xd6>
 800e7f6:	2a0b      	cmp	r2, #11
 800e7f8:	d917      	bls.n	800e82a <_malloc_r+0xca>
 800e7fa:	1961      	adds	r1, r4, r5
 800e7fc:	42a3      	cmp	r3, r4
 800e7fe:	6025      	str	r5, [r4, #0]
 800e800:	bf18      	it	ne
 800e802:	6059      	strne	r1, [r3, #4]
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	bf08      	it	eq
 800e808:	f8c8 1000 	streq.w	r1, [r8]
 800e80c:	5162      	str	r2, [r4, r5]
 800e80e:	604b      	str	r3, [r1, #4]
 800e810:	4638      	mov	r0, r7
 800e812:	f104 060b 	add.w	r6, r4, #11
 800e816:	f000 f829 	bl	800e86c <__malloc_unlock>
 800e81a:	f026 0607 	bic.w	r6, r6, #7
 800e81e:	1d23      	adds	r3, r4, #4
 800e820:	1af2      	subs	r2, r6, r3
 800e822:	d0ae      	beq.n	800e782 <_malloc_r+0x22>
 800e824:	1b9b      	subs	r3, r3, r6
 800e826:	50a3      	str	r3, [r4, r2]
 800e828:	e7ab      	b.n	800e782 <_malloc_r+0x22>
 800e82a:	42a3      	cmp	r3, r4
 800e82c:	6862      	ldr	r2, [r4, #4]
 800e82e:	d1dd      	bne.n	800e7ec <_malloc_r+0x8c>
 800e830:	f8c8 2000 	str.w	r2, [r8]
 800e834:	e7ec      	b.n	800e810 <_malloc_r+0xb0>
 800e836:	4623      	mov	r3, r4
 800e838:	6864      	ldr	r4, [r4, #4]
 800e83a:	e7ac      	b.n	800e796 <_malloc_r+0x36>
 800e83c:	4634      	mov	r4, r6
 800e83e:	6876      	ldr	r6, [r6, #4]
 800e840:	e7b4      	b.n	800e7ac <_malloc_r+0x4c>
 800e842:	4613      	mov	r3, r2
 800e844:	e7cc      	b.n	800e7e0 <_malloc_r+0x80>
 800e846:	230c      	movs	r3, #12
 800e848:	603b      	str	r3, [r7, #0]
 800e84a:	4638      	mov	r0, r7
 800e84c:	f000 f80e 	bl	800e86c <__malloc_unlock>
 800e850:	e797      	b.n	800e782 <_malloc_r+0x22>
 800e852:	6025      	str	r5, [r4, #0]
 800e854:	e7dc      	b.n	800e810 <_malloc_r+0xb0>
 800e856:	605b      	str	r3, [r3, #4]
 800e858:	deff      	udf	#255	; 0xff
 800e85a:	bf00      	nop
 800e85c:	20002ff8 	.word	0x20002ff8

0800e860 <__malloc_lock>:
 800e860:	4801      	ldr	r0, [pc, #4]	; (800e868 <__malloc_lock+0x8>)
 800e862:	f7ff bf0f 	b.w	800e684 <__retarget_lock_acquire_recursive>
 800e866:	bf00      	nop
 800e868:	20002ff4 	.word	0x20002ff4

0800e86c <__malloc_unlock>:
 800e86c:	4801      	ldr	r0, [pc, #4]	; (800e874 <__malloc_unlock+0x8>)
 800e86e:	f7ff bf0a 	b.w	800e686 <__retarget_lock_release_recursive>
 800e872:	bf00      	nop
 800e874:	20002ff4 	.word	0x20002ff4

0800e878 <print_e>:
 800e878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87a:	b087      	sub	sp, #28
 800e87c:	ec43 2b10 	vmov	d0, r2, r3
 800e880:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e882:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800e886:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e888:	ab04      	add	r3, sp, #16
 800e88a:	9301      	str	r3, [sp, #4]
 800e88c:	ab03      	add	r3, sp, #12
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	1c62      	adds	r2, r4, #1
 800e892:	ab05      	add	r3, sp, #20
 800e894:	460f      	mov	r7, r1
 800e896:	2102      	movs	r1, #2
 800e898:	f000 fa76 	bl	800ed88 <_dtoa_r>
 800e89c:	9a05      	ldr	r2, [sp, #20]
 800e89e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d105      	bne.n	800e8b2 <print_e+0x3a>
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f000 f9db 	bl	800ec64 <strcpy>
 800e8ae:	b007      	add	sp, #28
 800e8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8b2:	463b      	mov	r3, r7
 800e8b4:	7801      	ldrb	r1, [r0, #0]
 800e8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e8ba:	2c00      	cmp	r4, #0
 800e8bc:	bfc8      	it	gt
 800e8be:	2501      	movgt	r5, #1
 800e8c0:	212e      	movs	r1, #46	; 0x2e
 800e8c2:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e8c6:	b10f      	cbz	r7, 800e8cc <print_e+0x54>
 800e8c8:	2c00      	cmp	r4, #0
 800e8ca:	dc37      	bgt.n	800e93c <print_e+0xc4>
 800e8cc:	2e67      	cmp	r6, #103	; 0x67
 800e8ce:	d046      	beq.n	800e95e <print_e+0xe6>
 800e8d0:	2e47      	cmp	r6, #71	; 0x47
 800e8d2:	d046      	beq.n	800e962 <print_e+0xea>
 800e8d4:	212e      	movs	r1, #46	; 0x2e
 800e8d6:	2030      	movs	r0, #48	; 0x30
 800e8d8:	2c00      	cmp	r4, #0
 800e8da:	dc38      	bgt.n	800e94e <print_e+0xd6>
 800e8dc:	1e51      	subs	r1, r2, #1
 800e8de:	2900      	cmp	r1, #0
 800e8e0:	bfb8      	it	lt
 800e8e2:	f1c2 0201 	rsblt	r2, r2, #1
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	9105      	str	r1, [sp, #20]
 800e8ea:	bfac      	ite	ge
 800e8ec:	222b      	movge	r2, #43	; 0x2b
 800e8ee:	9205      	strlt	r2, [sp, #20]
 800e8f0:	f800 6b02 	strb.w	r6, [r0], #2
 800e8f4:	bfa8      	it	ge
 800e8f6:	705a      	strbge	r2, [r3, #1]
 800e8f8:	9a05      	ldr	r2, [sp, #20]
 800e8fa:	bfbc      	itt	lt
 800e8fc:	212d      	movlt	r1, #45	; 0x2d
 800e8fe:	7059      	strblt	r1, [r3, #1]
 800e900:	2a63      	cmp	r2, #99	; 0x63
 800e902:	dd0b      	ble.n	800e91c <print_e+0xa4>
 800e904:	2164      	movs	r1, #100	; 0x64
 800e906:	fb92 f1f1 	sdiv	r1, r2, r1
 800e90a:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800e90e:	1cd8      	adds	r0, r3, #3
 800e910:	709c      	strb	r4, [r3, #2]
 800e912:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800e916:	fb03 2201 	mla	r2, r3, r1, r2
 800e91a:	9205      	str	r2, [sp, #20]
 800e91c:	9b05      	ldr	r3, [sp, #20]
 800e91e:	220a      	movs	r2, #10
 800e920:	fb93 f2f2 	sdiv	r2, r3, r2
 800e924:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800e928:	7001      	strb	r1, [r0, #0]
 800e92a:	f06f 0109 	mvn.w	r1, #9
 800e92e:	fb01 3302 	mla	r3, r1, r2, r3
 800e932:	3330      	adds	r3, #48	; 0x30
 800e934:	7043      	strb	r3, [r0, #1]
 800e936:	2300      	movs	r3, #0
 800e938:	7083      	strb	r3, [r0, #2]
 800e93a:	e7b8      	b.n	800e8ae <print_e+0x36>
 800e93c:	b10d      	cbz	r5, 800e942 <print_e+0xca>
 800e93e:	f803 1b01 	strb.w	r1, [r3], #1
 800e942:	7805      	ldrb	r5, [r0, #0]
 800e944:	f803 5b01 	strb.w	r5, [r3], #1
 800e948:	3c01      	subs	r4, #1
 800e94a:	2500      	movs	r5, #0
 800e94c:	e7b9      	b.n	800e8c2 <print_e+0x4a>
 800e94e:	b10d      	cbz	r5, 800e954 <print_e+0xdc>
 800e950:	f803 1b01 	strb.w	r1, [r3], #1
 800e954:	f803 0b01 	strb.w	r0, [r3], #1
 800e958:	3c01      	subs	r4, #1
 800e95a:	2500      	movs	r5, #0
 800e95c:	e7bc      	b.n	800e8d8 <print_e+0x60>
 800e95e:	2665      	movs	r6, #101	; 0x65
 800e960:	e7bc      	b.n	800e8dc <print_e+0x64>
 800e962:	2645      	movs	r6, #69	; 0x45
 800e964:	e7ba      	b.n	800e8dc <print_e+0x64>
	...

0800e968 <_gcvt>:
 800e968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e96c:	ec55 4b10 	vmov	r4, r5, d0
 800e970:	b088      	sub	sp, #32
 800e972:	4681      	mov	r9, r0
 800e974:	4688      	mov	r8, r1
 800e976:	4616      	mov	r6, r2
 800e978:	469a      	mov	sl, r3
 800e97a:	ee10 0a10 	vmov	r0, s0
 800e97e:	2200      	movs	r2, #0
 800e980:	2300      	movs	r3, #0
 800e982:	4629      	mov	r1, r5
 800e984:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e986:	f7f2 f8c9 	bl	8000b1c <__aeabi_dcmplt>
 800e98a:	b110      	cbz	r0, 800e992 <_gcvt+0x2a>
 800e98c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e990:	461d      	mov	r5, r3
 800e992:	2200      	movs	r2, #0
 800e994:	2300      	movs	r3, #0
 800e996:	4620      	mov	r0, r4
 800e998:	4629      	mov	r1, r5
 800e99a:	f7f2 f8b5 	bl	8000b08 <__aeabi_dcmpeq>
 800e99e:	b138      	cbz	r0, 800e9b0 <_gcvt+0x48>
 800e9a0:	2330      	movs	r3, #48	; 0x30
 800e9a2:	7033      	strb	r3, [r6, #0]
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	7073      	strb	r3, [r6, #1]
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	b008      	add	sp, #32
 800e9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b0:	a34b      	add	r3, pc, #300	; (adr r3, 800eae0 <_gcvt+0x178>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	f7f2 f8b9 	bl	8000b30 <__aeabi_dcmple>
 800e9be:	b158      	cbz	r0, 800e9d8 <_gcvt+0x70>
 800e9c0:	f108 33ff 	add.w	r3, r8, #4294967295
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	e9cd a701 	strd	sl, r7, [sp, #4]
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	462b      	mov	r3, r5
 800e9ce:	4631      	mov	r1, r6
 800e9d0:	4648      	mov	r0, r9
 800e9d2:	f7ff ff51 	bl	800e878 <print_e>
 800e9d6:	e7e7      	b.n	800e9a8 <_gcvt+0x40>
 800e9d8:	4640      	mov	r0, r8
 800e9da:	f001 fb4b 	bl	8010074 <_mprec_log10>
 800e9de:	4622      	mov	r2, r4
 800e9e0:	ec51 0b10 	vmov	r0, r1, d0
 800e9e4:	462b      	mov	r3, r5
 800e9e6:	f7f2 f8a3 	bl	8000b30 <__aeabi_dcmple>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d1e8      	bne.n	800e9c0 <_gcvt+0x58>
 800e9ee:	ab07      	add	r3, sp, #28
 800e9f0:	9301      	str	r3, [sp, #4]
 800e9f2:	ab06      	add	r3, sp, #24
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	4642      	mov	r2, r8
 800e9f8:	ab05      	add	r3, sp, #20
 800e9fa:	ec45 4b10 	vmov	d0, r4, r5
 800e9fe:	2102      	movs	r1, #2
 800ea00:	4648      	mov	r0, r9
 800ea02:	f000 f9c1 	bl	800ed88 <_dtoa_r>
 800ea06:	9a05      	ldr	r2, [sp, #20]
 800ea08:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d00e      	beq.n	800ea2e <_gcvt+0xc6>
 800ea10:	4633      	mov	r3, r6
 800ea12:	44b0      	add	r8, r6
 800ea14:	4605      	mov	r5, r0
 800ea16:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ea1a:	9c05      	ldr	r4, [sp, #20]
 800ea1c:	eba8 0203 	sub.w	r2, r8, r3
 800ea20:	b109      	cbz	r1, 800ea26 <_gcvt+0xbe>
 800ea22:	2c00      	cmp	r4, #0
 800ea24:	dc08      	bgt.n	800ea38 <_gcvt+0xd0>
 800ea26:	2100      	movs	r1, #0
 800ea28:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800ea2c:	e00d      	b.n	800ea4a <_gcvt+0xe2>
 800ea2e:	4601      	mov	r1, r0
 800ea30:	4630      	mov	r0, r6
 800ea32:	f000 f917 	bl	800ec64 <strcpy>
 800ea36:	e7b7      	b.n	800e9a8 <_gcvt+0x40>
 800ea38:	3c01      	subs	r4, #1
 800ea3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea3e:	9405      	str	r4, [sp, #20]
 800ea40:	e7e8      	b.n	800ea14 <_gcvt+0xac>
 800ea42:	f803 cb01 	strb.w	ip, [r3], #1
 800ea46:	3a01      	subs	r2, #1
 800ea48:	2101      	movs	r1, #1
 800ea4a:	2c00      	cmp	r4, #0
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	dc2a      	bgt.n	800eaa6 <_gcvt+0x13e>
 800ea50:	b101      	cbz	r1, 800ea54 <_gcvt+0xec>
 800ea52:	9405      	str	r4, [sp, #20]
 800ea54:	b90f      	cbnz	r7, 800ea5a <_gcvt+0xf2>
 800ea56:	7829      	ldrb	r1, [r5, #0]
 800ea58:	b311      	cbz	r1, 800eaa0 <_gcvt+0x138>
 800ea5a:	42b3      	cmp	r3, r6
 800ea5c:	bf04      	itt	eq
 800ea5e:	2130      	moveq	r1, #48	; 0x30
 800ea60:	f803 1b01 	strbeq.w	r1, [r3], #1
 800ea64:	212e      	movs	r1, #46	; 0x2e
 800ea66:	7019      	strb	r1, [r3, #0]
 800ea68:	9905      	ldr	r1, [sp, #20]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	2400      	movs	r4, #0
 800ea6e:	eba1 0c03 	sub.w	ip, r1, r3
 800ea72:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800ea76:	eb1c 0f00 	cmn.w	ip, r0
 800ea7a:	d41c      	bmi.n	800eab6 <_gcvt+0x14e>
 800ea7c:	2900      	cmp	r1, #0
 800ea7e:	f1c1 0000 	rsb	r0, r1, #0
 800ea82:	bfc8      	it	gt
 800ea84:	2000      	movgt	r0, #0
 800ea86:	f100 0c01 	add.w	ip, r0, #1
 800ea8a:	4463      	add	r3, ip
 800ea8c:	4401      	add	r1, r0
 800ea8e:	b104      	cbz	r4, 800ea92 <_gcvt+0x12a>
 800ea90:	9105      	str	r1, [sp, #20]
 800ea92:	1e69      	subs	r1, r5, #1
 800ea94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea98:	b108      	cbz	r0, 800ea9e <_gcvt+0x136>
 800ea9a:	2a00      	cmp	r2, #0
 800ea9c:	dc0f      	bgt.n	800eabe <_gcvt+0x156>
 800ea9e:	b9df      	cbnz	r7, 800ead8 <_gcvt+0x170>
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	701a      	strb	r2, [r3, #0]
 800eaa4:	e780      	b.n	800e9a8 <_gcvt+0x40>
 800eaa6:	2a00      	cmp	r2, #0
 800eaa8:	f104 34ff 	add.w	r4, r4, #4294967295
 800eaac:	dcc9      	bgt.n	800ea42 <_gcvt+0xda>
 800eaae:	2900      	cmp	r1, #0
 800eab0:	d0d0      	beq.n	800ea54 <_gcvt+0xec>
 800eab2:	9005      	str	r0, [sp, #20]
 800eab4:	e7ce      	b.n	800ea54 <_gcvt+0xec>
 800eab6:	f800 ef01 	strb.w	lr, [r0, #1]!
 800eaba:	2401      	movs	r4, #1
 800eabc:	e7db      	b.n	800ea76 <_gcvt+0x10e>
 800eabe:	f803 0b01 	strb.w	r0, [r3], #1
 800eac2:	3a01      	subs	r2, #1
 800eac4:	e7e6      	b.n	800ea94 <_gcvt+0x12c>
 800eac6:	f801 5b01 	strb.w	r5, [r1], #1
 800eaca:	1a60      	subs	r0, r4, r1
 800eacc:	2800      	cmp	r0, #0
 800eace:	dcfa      	bgt.n	800eac6 <_gcvt+0x15e>
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	bfa8      	it	ge
 800ead4:	189b      	addge	r3, r3, r2
 800ead6:	e7e3      	b.n	800eaa0 <_gcvt+0x138>
 800ead8:	4619      	mov	r1, r3
 800eada:	189c      	adds	r4, r3, r2
 800eadc:	2530      	movs	r5, #48	; 0x30
 800eade:	e7f4      	b.n	800eaca <_gcvt+0x162>
 800eae0:	eb1c432d 	.word	0xeb1c432d
 800eae4:	3f1a36e2 	.word	0x3f1a36e2

0800eae8 <__sflush_r>:
 800eae8:	898a      	ldrh	r2, [r1, #12]
 800eaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaee:	4605      	mov	r5, r0
 800eaf0:	0710      	lsls	r0, r2, #28
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	d458      	bmi.n	800eba8 <__sflush_r+0xc0>
 800eaf6:	684b      	ldr	r3, [r1, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	dc05      	bgt.n	800eb08 <__sflush_r+0x20>
 800eafc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	dc02      	bgt.n	800eb08 <__sflush_r+0x20>
 800eb02:	2000      	movs	r0, #0
 800eb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb0a:	2e00      	cmp	r6, #0
 800eb0c:	d0f9      	beq.n	800eb02 <__sflush_r+0x1a>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb14:	682f      	ldr	r7, [r5, #0]
 800eb16:	6a21      	ldr	r1, [r4, #32]
 800eb18:	602b      	str	r3, [r5, #0]
 800eb1a:	d032      	beq.n	800eb82 <__sflush_r+0x9a>
 800eb1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb1e:	89a3      	ldrh	r3, [r4, #12]
 800eb20:	075a      	lsls	r2, r3, #29
 800eb22:	d505      	bpl.n	800eb30 <__sflush_r+0x48>
 800eb24:	6863      	ldr	r3, [r4, #4]
 800eb26:	1ac0      	subs	r0, r0, r3
 800eb28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb2a:	b10b      	cbz	r3, 800eb30 <__sflush_r+0x48>
 800eb2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb2e:	1ac0      	subs	r0, r0, r3
 800eb30:	2300      	movs	r3, #0
 800eb32:	4602      	mov	r2, r0
 800eb34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb36:	6a21      	ldr	r1, [r4, #32]
 800eb38:	4628      	mov	r0, r5
 800eb3a:	47b0      	blx	r6
 800eb3c:	1c43      	adds	r3, r0, #1
 800eb3e:	89a3      	ldrh	r3, [r4, #12]
 800eb40:	d106      	bne.n	800eb50 <__sflush_r+0x68>
 800eb42:	6829      	ldr	r1, [r5, #0]
 800eb44:	291d      	cmp	r1, #29
 800eb46:	d82b      	bhi.n	800eba0 <__sflush_r+0xb8>
 800eb48:	4a29      	ldr	r2, [pc, #164]	; (800ebf0 <__sflush_r+0x108>)
 800eb4a:	410a      	asrs	r2, r1
 800eb4c:	07d6      	lsls	r6, r2, #31
 800eb4e:	d427      	bmi.n	800eba0 <__sflush_r+0xb8>
 800eb50:	2200      	movs	r2, #0
 800eb52:	6062      	str	r2, [r4, #4]
 800eb54:	04d9      	lsls	r1, r3, #19
 800eb56:	6922      	ldr	r2, [r4, #16]
 800eb58:	6022      	str	r2, [r4, #0]
 800eb5a:	d504      	bpl.n	800eb66 <__sflush_r+0x7e>
 800eb5c:	1c42      	adds	r2, r0, #1
 800eb5e:	d101      	bne.n	800eb64 <__sflush_r+0x7c>
 800eb60:	682b      	ldr	r3, [r5, #0]
 800eb62:	b903      	cbnz	r3, 800eb66 <__sflush_r+0x7e>
 800eb64:	6560      	str	r0, [r4, #84]	; 0x54
 800eb66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb68:	602f      	str	r7, [r5, #0]
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	d0c9      	beq.n	800eb02 <__sflush_r+0x1a>
 800eb6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb72:	4299      	cmp	r1, r3
 800eb74:	d002      	beq.n	800eb7c <__sflush_r+0x94>
 800eb76:	4628      	mov	r0, r5
 800eb78:	f7ff fd86 	bl	800e688 <_free_r>
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	6360      	str	r0, [r4, #52]	; 0x34
 800eb80:	e7c0      	b.n	800eb04 <__sflush_r+0x1c>
 800eb82:	2301      	movs	r3, #1
 800eb84:	4628      	mov	r0, r5
 800eb86:	47b0      	blx	r6
 800eb88:	1c41      	adds	r1, r0, #1
 800eb8a:	d1c8      	bne.n	800eb1e <__sflush_r+0x36>
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d0c5      	beq.n	800eb1e <__sflush_r+0x36>
 800eb92:	2b1d      	cmp	r3, #29
 800eb94:	d001      	beq.n	800eb9a <__sflush_r+0xb2>
 800eb96:	2b16      	cmp	r3, #22
 800eb98:	d101      	bne.n	800eb9e <__sflush_r+0xb6>
 800eb9a:	602f      	str	r7, [r5, #0]
 800eb9c:	e7b1      	b.n	800eb02 <__sflush_r+0x1a>
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eba4:	81a3      	strh	r3, [r4, #12]
 800eba6:	e7ad      	b.n	800eb04 <__sflush_r+0x1c>
 800eba8:	690f      	ldr	r7, [r1, #16]
 800ebaa:	2f00      	cmp	r7, #0
 800ebac:	d0a9      	beq.n	800eb02 <__sflush_r+0x1a>
 800ebae:	0793      	lsls	r3, r2, #30
 800ebb0:	680e      	ldr	r6, [r1, #0]
 800ebb2:	bf08      	it	eq
 800ebb4:	694b      	ldreq	r3, [r1, #20]
 800ebb6:	600f      	str	r7, [r1, #0]
 800ebb8:	bf18      	it	ne
 800ebba:	2300      	movne	r3, #0
 800ebbc:	eba6 0807 	sub.w	r8, r6, r7
 800ebc0:	608b      	str	r3, [r1, #8]
 800ebc2:	f1b8 0f00 	cmp.w	r8, #0
 800ebc6:	dd9c      	ble.n	800eb02 <__sflush_r+0x1a>
 800ebc8:	6a21      	ldr	r1, [r4, #32]
 800ebca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebcc:	4643      	mov	r3, r8
 800ebce:	463a      	mov	r2, r7
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b0      	blx	r6
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	dc06      	bgt.n	800ebe6 <__sflush_r+0xfe>
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebde:	81a3      	strh	r3, [r4, #12]
 800ebe0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe4:	e78e      	b.n	800eb04 <__sflush_r+0x1c>
 800ebe6:	4407      	add	r7, r0
 800ebe8:	eba8 0800 	sub.w	r8, r8, r0
 800ebec:	e7e9      	b.n	800ebc2 <__sflush_r+0xda>
 800ebee:	bf00      	nop
 800ebf0:	dfbffffe 	.word	0xdfbffffe

0800ebf4 <_fflush_r>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	690b      	ldr	r3, [r1, #16]
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	b913      	cbnz	r3, 800ec04 <_fflush_r+0x10>
 800ebfe:	2500      	movs	r5, #0
 800ec00:	4628      	mov	r0, r5
 800ec02:	bd38      	pop	{r3, r4, r5, pc}
 800ec04:	b118      	cbz	r0, 800ec0e <_fflush_r+0x1a>
 800ec06:	6a03      	ldr	r3, [r0, #32]
 800ec08:	b90b      	cbnz	r3, 800ec0e <_fflush_r+0x1a>
 800ec0a:	f7ff fc49 	bl	800e4a0 <__sinit>
 800ec0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d0f3      	beq.n	800ebfe <_fflush_r+0xa>
 800ec16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec18:	07d0      	lsls	r0, r2, #31
 800ec1a:	d404      	bmi.n	800ec26 <_fflush_r+0x32>
 800ec1c:	0599      	lsls	r1, r3, #22
 800ec1e:	d402      	bmi.n	800ec26 <_fflush_r+0x32>
 800ec20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec22:	f7ff fd2f 	bl	800e684 <__retarget_lock_acquire_recursive>
 800ec26:	4628      	mov	r0, r5
 800ec28:	4621      	mov	r1, r4
 800ec2a:	f7ff ff5d 	bl	800eae8 <__sflush_r>
 800ec2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec30:	07da      	lsls	r2, r3, #31
 800ec32:	4605      	mov	r5, r0
 800ec34:	d4e4      	bmi.n	800ec00 <_fflush_r+0xc>
 800ec36:	89a3      	ldrh	r3, [r4, #12]
 800ec38:	059b      	lsls	r3, r3, #22
 800ec3a:	d4e1      	bmi.n	800ec00 <_fflush_r+0xc>
 800ec3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec3e:	f7ff fd22 	bl	800e686 <__retarget_lock_release_recursive>
 800ec42:	e7dd      	b.n	800ec00 <_fflush_r+0xc>

0800ec44 <_sbrk_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4d06      	ldr	r5, [pc, #24]	; (800ec60 <_sbrk_r+0x1c>)
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	4608      	mov	r0, r1
 800ec4e:	602b      	str	r3, [r5, #0]
 800ec50:	f7f6 fa20 	bl	8005094 <_sbrk>
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	d102      	bne.n	800ec5e <_sbrk_r+0x1a>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	b103      	cbz	r3, 800ec5e <_sbrk_r+0x1a>
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}
 800ec60:	20002ff0 	.word	0x20002ff0

0800ec64 <strcpy>:
 800ec64:	4603      	mov	r3, r0
 800ec66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec6a:	f803 2b01 	strb.w	r2, [r3], #1
 800ec6e:	2a00      	cmp	r2, #0
 800ec70:	d1f9      	bne.n	800ec66 <strcpy+0x2>
 800ec72:	4770      	bx	lr

0800ec74 <quorem>:
 800ec74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec78:	6903      	ldr	r3, [r0, #16]
 800ec7a:	690c      	ldr	r4, [r1, #16]
 800ec7c:	42a3      	cmp	r3, r4
 800ec7e:	4607      	mov	r7, r0
 800ec80:	db7e      	blt.n	800ed80 <quorem+0x10c>
 800ec82:	3c01      	subs	r4, #1
 800ec84:	f101 0814 	add.w	r8, r1, #20
 800ec88:	f100 0514 	add.w	r5, r0, #20
 800ec8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec90:	9301      	str	r3, [sp, #4]
 800ec92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eca2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eca6:	fbb2 f6f3 	udiv	r6, r2, r3
 800ecaa:	d331      	bcc.n	800ed10 <quorem+0x9c>
 800ecac:	f04f 0e00 	mov.w	lr, #0
 800ecb0:	4640      	mov	r0, r8
 800ecb2:	46ac      	mov	ip, r5
 800ecb4:	46f2      	mov	sl, lr
 800ecb6:	f850 2b04 	ldr.w	r2, [r0], #4
 800ecba:	b293      	uxth	r3, r2
 800ecbc:	fb06 e303 	mla	r3, r6, r3, lr
 800ecc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ecc4:	0c1a      	lsrs	r2, r3, #16
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	ebaa 0303 	sub.w	r3, sl, r3
 800eccc:	f8dc a000 	ldr.w	sl, [ip]
 800ecd0:	fa13 f38a 	uxtah	r3, r3, sl
 800ecd4:	fb06 220e 	mla	r2, r6, lr, r2
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	9b00      	ldr	r3, [sp, #0]
 800ecdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ece0:	b292      	uxth	r2, r2
 800ece2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ece6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecea:	f8bd 3000 	ldrh.w	r3, [sp]
 800ecee:	4581      	cmp	r9, r0
 800ecf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecf4:	f84c 3b04 	str.w	r3, [ip], #4
 800ecf8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ecfc:	d2db      	bcs.n	800ecb6 <quorem+0x42>
 800ecfe:	f855 300b 	ldr.w	r3, [r5, fp]
 800ed02:	b92b      	cbnz	r3, 800ed10 <quorem+0x9c>
 800ed04:	9b01      	ldr	r3, [sp, #4]
 800ed06:	3b04      	subs	r3, #4
 800ed08:	429d      	cmp	r5, r3
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	d32c      	bcc.n	800ed68 <quorem+0xf4>
 800ed0e:	613c      	str	r4, [r7, #16]
 800ed10:	4638      	mov	r0, r7
 800ed12:	f001 f8af 	bl	800fe74 <__mcmp>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	db22      	blt.n	800ed60 <quorem+0xec>
 800ed1a:	3601      	adds	r6, #1
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	2000      	movs	r0, #0
 800ed20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed24:	f8d1 c000 	ldr.w	ip, [r1]
 800ed28:	b293      	uxth	r3, r2
 800ed2a:	1ac3      	subs	r3, r0, r3
 800ed2c:	0c12      	lsrs	r2, r2, #16
 800ed2e:	fa13 f38c 	uxtah	r3, r3, ip
 800ed32:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ed36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed40:	45c1      	cmp	r9, r8
 800ed42:	f841 3b04 	str.w	r3, [r1], #4
 800ed46:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed4a:	d2e9      	bcs.n	800ed20 <quorem+0xac>
 800ed4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed54:	b922      	cbnz	r2, 800ed60 <quorem+0xec>
 800ed56:	3b04      	subs	r3, #4
 800ed58:	429d      	cmp	r5, r3
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	d30a      	bcc.n	800ed74 <quorem+0x100>
 800ed5e:	613c      	str	r4, [r7, #16]
 800ed60:	4630      	mov	r0, r6
 800ed62:	b003      	add	sp, #12
 800ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed68:	6812      	ldr	r2, [r2, #0]
 800ed6a:	3b04      	subs	r3, #4
 800ed6c:	2a00      	cmp	r2, #0
 800ed6e:	d1ce      	bne.n	800ed0e <quorem+0x9a>
 800ed70:	3c01      	subs	r4, #1
 800ed72:	e7c9      	b.n	800ed08 <quorem+0x94>
 800ed74:	6812      	ldr	r2, [r2, #0]
 800ed76:	3b04      	subs	r3, #4
 800ed78:	2a00      	cmp	r2, #0
 800ed7a:	d1f0      	bne.n	800ed5e <quorem+0xea>
 800ed7c:	3c01      	subs	r4, #1
 800ed7e:	e7eb      	b.n	800ed58 <quorem+0xe4>
 800ed80:	2000      	movs	r0, #0
 800ed82:	e7ee      	b.n	800ed62 <quorem+0xee>
 800ed84:	0000      	movs	r0, r0
	...

0800ed88 <_dtoa_r>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	ed2d 8b04 	vpush	{d8-d9}
 800ed90:	69c5      	ldr	r5, [r0, #28]
 800ed92:	b093      	sub	sp, #76	; 0x4c
 800ed94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ed98:	ec57 6b10 	vmov	r6, r7, d0
 800ed9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eda0:	9107      	str	r1, [sp, #28]
 800eda2:	4604      	mov	r4, r0
 800eda4:	920a      	str	r2, [sp, #40]	; 0x28
 800eda6:	930d      	str	r3, [sp, #52]	; 0x34
 800eda8:	b975      	cbnz	r5, 800edc8 <_dtoa_r+0x40>
 800edaa:	2010      	movs	r0, #16
 800edac:	f000 fdde 	bl	800f96c <malloc>
 800edb0:	4602      	mov	r2, r0
 800edb2:	61e0      	str	r0, [r4, #28]
 800edb4:	b920      	cbnz	r0, 800edc0 <_dtoa_r+0x38>
 800edb6:	4bae      	ldr	r3, [pc, #696]	; (800f070 <_dtoa_r+0x2e8>)
 800edb8:	21ef      	movs	r1, #239	; 0xef
 800edba:	48ae      	ldr	r0, [pc, #696]	; (800f074 <_dtoa_r+0x2ec>)
 800edbc:	f001 f986 	bl	80100cc <__assert_func>
 800edc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800edc4:	6005      	str	r5, [r0, #0]
 800edc6:	60c5      	str	r5, [r0, #12]
 800edc8:	69e3      	ldr	r3, [r4, #28]
 800edca:	6819      	ldr	r1, [r3, #0]
 800edcc:	b151      	cbz	r1, 800ede4 <_dtoa_r+0x5c>
 800edce:	685a      	ldr	r2, [r3, #4]
 800edd0:	604a      	str	r2, [r1, #4]
 800edd2:	2301      	movs	r3, #1
 800edd4:	4093      	lsls	r3, r2
 800edd6:	608b      	str	r3, [r1, #8]
 800edd8:	4620      	mov	r0, r4
 800edda:	f000 fe0f 	bl	800f9fc <_Bfree>
 800edde:	69e3      	ldr	r3, [r4, #28]
 800ede0:	2200      	movs	r2, #0
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	1e3b      	subs	r3, r7, #0
 800ede6:	bfbb      	ittet	lt
 800ede8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800edec:	9303      	strlt	r3, [sp, #12]
 800edee:	2300      	movge	r3, #0
 800edf0:	2201      	movlt	r2, #1
 800edf2:	bfac      	ite	ge
 800edf4:	f8c8 3000 	strge.w	r3, [r8]
 800edf8:	f8c8 2000 	strlt.w	r2, [r8]
 800edfc:	4b9e      	ldr	r3, [pc, #632]	; (800f078 <_dtoa_r+0x2f0>)
 800edfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ee02:	ea33 0308 	bics.w	r3, r3, r8
 800ee06:	d11b      	bne.n	800ee40 <_dtoa_r+0xb8>
 800ee08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee0e:	6013      	str	r3, [r2, #0]
 800ee10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ee14:	4333      	orrs	r3, r6
 800ee16:	f000 8593 	beq.w	800f940 <_dtoa_r+0xbb8>
 800ee1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee1c:	b963      	cbnz	r3, 800ee38 <_dtoa_r+0xb0>
 800ee1e:	4b97      	ldr	r3, [pc, #604]	; (800f07c <_dtoa_r+0x2f4>)
 800ee20:	e027      	b.n	800ee72 <_dtoa_r+0xea>
 800ee22:	4b97      	ldr	r3, [pc, #604]	; (800f080 <_dtoa_r+0x2f8>)
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee2a:	6013      	str	r3, [r2, #0]
 800ee2c:	9800      	ldr	r0, [sp, #0]
 800ee2e:	b013      	add	sp, #76	; 0x4c
 800ee30:	ecbd 8b04 	vpop	{d8-d9}
 800ee34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee38:	4b90      	ldr	r3, [pc, #576]	; (800f07c <_dtoa_r+0x2f4>)
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	3303      	adds	r3, #3
 800ee3e:	e7f3      	b.n	800ee28 <_dtoa_r+0xa0>
 800ee40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee44:	2200      	movs	r2, #0
 800ee46:	ec51 0b17 	vmov	r0, r1, d7
 800ee4a:	eeb0 8a47 	vmov.f32	s16, s14
 800ee4e:	eef0 8a67 	vmov.f32	s17, s15
 800ee52:	2300      	movs	r3, #0
 800ee54:	f7f1 fe58 	bl	8000b08 <__aeabi_dcmpeq>
 800ee58:	4681      	mov	r9, r0
 800ee5a:	b160      	cbz	r0, 800ee76 <_dtoa_r+0xee>
 800ee5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee5e:	2301      	movs	r3, #1
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 8568 	beq.w	800f93a <_dtoa_r+0xbb2>
 800ee6a:	4b86      	ldr	r3, [pc, #536]	; (800f084 <_dtoa_r+0x2fc>)
 800ee6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee6e:	6013      	str	r3, [r2, #0]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	e7da      	b.n	800ee2c <_dtoa_r+0xa4>
 800ee76:	aa10      	add	r2, sp, #64	; 0x40
 800ee78:	a911      	add	r1, sp, #68	; 0x44
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ee80:	eef0 0a68 	vmov.f32	s1, s17
 800ee84:	f001 f89c 	bl	800ffc0 <__d2b>
 800ee88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ee8c:	4682      	mov	sl, r0
 800ee8e:	2d00      	cmp	r5, #0
 800ee90:	d07f      	beq.n	800ef92 <_dtoa_r+0x20a>
 800ee92:	ee18 3a90 	vmov	r3, s17
 800ee96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ee9e:	ec51 0b18 	vmov	r0, r1, d8
 800eea2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eea6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eeaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800eeae:	4619      	mov	r1, r3
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	4b75      	ldr	r3, [pc, #468]	; (800f088 <_dtoa_r+0x300>)
 800eeb4:	f7f1 fa08 	bl	80002c8 <__aeabi_dsub>
 800eeb8:	a367      	add	r3, pc, #412	; (adr r3, 800f058 <_dtoa_r+0x2d0>)
 800eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebe:	f7f1 fbbb 	bl	8000638 <__aeabi_dmul>
 800eec2:	a367      	add	r3, pc, #412	; (adr r3, 800f060 <_dtoa_r+0x2d8>)
 800eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec8:	f7f1 fa00 	bl	80002cc <__adddf3>
 800eecc:	4606      	mov	r6, r0
 800eece:	4628      	mov	r0, r5
 800eed0:	460f      	mov	r7, r1
 800eed2:	f7f1 fb47 	bl	8000564 <__aeabi_i2d>
 800eed6:	a364      	add	r3, pc, #400	; (adr r3, 800f068 <_dtoa_r+0x2e0>)
 800eed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eedc:	f7f1 fbac 	bl	8000638 <__aeabi_dmul>
 800eee0:	4602      	mov	r2, r0
 800eee2:	460b      	mov	r3, r1
 800eee4:	4630      	mov	r0, r6
 800eee6:	4639      	mov	r1, r7
 800eee8:	f7f1 f9f0 	bl	80002cc <__adddf3>
 800eeec:	4606      	mov	r6, r0
 800eeee:	460f      	mov	r7, r1
 800eef0:	f7f1 fe52 	bl	8000b98 <__aeabi_d2iz>
 800eef4:	2200      	movs	r2, #0
 800eef6:	4683      	mov	fp, r0
 800eef8:	2300      	movs	r3, #0
 800eefa:	4630      	mov	r0, r6
 800eefc:	4639      	mov	r1, r7
 800eefe:	f7f1 fe0d 	bl	8000b1c <__aeabi_dcmplt>
 800ef02:	b148      	cbz	r0, 800ef18 <_dtoa_r+0x190>
 800ef04:	4658      	mov	r0, fp
 800ef06:	f7f1 fb2d 	bl	8000564 <__aeabi_i2d>
 800ef0a:	4632      	mov	r2, r6
 800ef0c:	463b      	mov	r3, r7
 800ef0e:	f7f1 fdfb 	bl	8000b08 <__aeabi_dcmpeq>
 800ef12:	b908      	cbnz	r0, 800ef18 <_dtoa_r+0x190>
 800ef14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef18:	f1bb 0f16 	cmp.w	fp, #22
 800ef1c:	d857      	bhi.n	800efce <_dtoa_r+0x246>
 800ef1e:	4b5b      	ldr	r3, [pc, #364]	; (800f08c <_dtoa_r+0x304>)
 800ef20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ef24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef28:	ec51 0b18 	vmov	r0, r1, d8
 800ef2c:	f7f1 fdf6 	bl	8000b1c <__aeabi_dcmplt>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	d04e      	beq.n	800efd2 <_dtoa_r+0x24a>
 800ef34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef38:	2300      	movs	r3, #0
 800ef3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ef3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef3e:	1b5b      	subs	r3, r3, r5
 800ef40:	1e5a      	subs	r2, r3, #1
 800ef42:	bf45      	ittet	mi
 800ef44:	f1c3 0301 	rsbmi	r3, r3, #1
 800ef48:	9305      	strmi	r3, [sp, #20]
 800ef4a:	2300      	movpl	r3, #0
 800ef4c:	2300      	movmi	r3, #0
 800ef4e:	9206      	str	r2, [sp, #24]
 800ef50:	bf54      	ite	pl
 800ef52:	9305      	strpl	r3, [sp, #20]
 800ef54:	9306      	strmi	r3, [sp, #24]
 800ef56:	f1bb 0f00 	cmp.w	fp, #0
 800ef5a:	db3c      	blt.n	800efd6 <_dtoa_r+0x24e>
 800ef5c:	9b06      	ldr	r3, [sp, #24]
 800ef5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ef62:	445b      	add	r3, fp
 800ef64:	9306      	str	r3, [sp, #24]
 800ef66:	2300      	movs	r3, #0
 800ef68:	9308      	str	r3, [sp, #32]
 800ef6a:	9b07      	ldr	r3, [sp, #28]
 800ef6c:	2b09      	cmp	r3, #9
 800ef6e:	d868      	bhi.n	800f042 <_dtoa_r+0x2ba>
 800ef70:	2b05      	cmp	r3, #5
 800ef72:	bfc4      	itt	gt
 800ef74:	3b04      	subgt	r3, #4
 800ef76:	9307      	strgt	r3, [sp, #28]
 800ef78:	9b07      	ldr	r3, [sp, #28]
 800ef7a:	f1a3 0302 	sub.w	r3, r3, #2
 800ef7e:	bfcc      	ite	gt
 800ef80:	2500      	movgt	r5, #0
 800ef82:	2501      	movle	r5, #1
 800ef84:	2b03      	cmp	r3, #3
 800ef86:	f200 8085 	bhi.w	800f094 <_dtoa_r+0x30c>
 800ef8a:	e8df f003 	tbb	[pc, r3]
 800ef8e:	3b2e      	.short	0x3b2e
 800ef90:	5839      	.short	0x5839
 800ef92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ef96:	441d      	add	r5, r3
 800ef98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ef9c:	2b20      	cmp	r3, #32
 800ef9e:	bfc1      	itttt	gt
 800efa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800efa4:	fa08 f803 	lslgt.w	r8, r8, r3
 800efa8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800efac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800efb0:	bfd6      	itet	le
 800efb2:	f1c3 0320 	rsble	r3, r3, #32
 800efb6:	ea48 0003 	orrgt.w	r0, r8, r3
 800efba:	fa06 f003 	lslle.w	r0, r6, r3
 800efbe:	f7f1 fac1 	bl	8000544 <__aeabi_ui2d>
 800efc2:	2201      	movs	r2, #1
 800efc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800efc8:	3d01      	subs	r5, #1
 800efca:	920e      	str	r2, [sp, #56]	; 0x38
 800efcc:	e76f      	b.n	800eeae <_dtoa_r+0x126>
 800efce:	2301      	movs	r3, #1
 800efd0:	e7b3      	b.n	800ef3a <_dtoa_r+0x1b2>
 800efd2:	900c      	str	r0, [sp, #48]	; 0x30
 800efd4:	e7b2      	b.n	800ef3c <_dtoa_r+0x1b4>
 800efd6:	9b05      	ldr	r3, [sp, #20]
 800efd8:	eba3 030b 	sub.w	r3, r3, fp
 800efdc:	9305      	str	r3, [sp, #20]
 800efde:	f1cb 0300 	rsb	r3, fp, #0
 800efe2:	9308      	str	r3, [sp, #32]
 800efe4:	2300      	movs	r3, #0
 800efe6:	930b      	str	r3, [sp, #44]	; 0x2c
 800efe8:	e7bf      	b.n	800ef6a <_dtoa_r+0x1e2>
 800efea:	2300      	movs	r3, #0
 800efec:	9309      	str	r3, [sp, #36]	; 0x24
 800efee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	dc52      	bgt.n	800f09a <_dtoa_r+0x312>
 800eff4:	2301      	movs	r3, #1
 800eff6:	9301      	str	r3, [sp, #4]
 800eff8:	9304      	str	r3, [sp, #16]
 800effa:	461a      	mov	r2, r3
 800effc:	920a      	str	r2, [sp, #40]	; 0x28
 800effe:	e00b      	b.n	800f018 <_dtoa_r+0x290>
 800f000:	2301      	movs	r3, #1
 800f002:	e7f3      	b.n	800efec <_dtoa_r+0x264>
 800f004:	2300      	movs	r3, #0
 800f006:	9309      	str	r3, [sp, #36]	; 0x24
 800f008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f00a:	445b      	add	r3, fp
 800f00c:	9301      	str	r3, [sp, #4]
 800f00e:	3301      	adds	r3, #1
 800f010:	2b01      	cmp	r3, #1
 800f012:	9304      	str	r3, [sp, #16]
 800f014:	bfb8      	it	lt
 800f016:	2301      	movlt	r3, #1
 800f018:	69e0      	ldr	r0, [r4, #28]
 800f01a:	2100      	movs	r1, #0
 800f01c:	2204      	movs	r2, #4
 800f01e:	f102 0614 	add.w	r6, r2, #20
 800f022:	429e      	cmp	r6, r3
 800f024:	d93d      	bls.n	800f0a2 <_dtoa_r+0x31a>
 800f026:	6041      	str	r1, [r0, #4]
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 fca7 	bl	800f97c <_Balloc>
 800f02e:	9000      	str	r0, [sp, #0]
 800f030:	2800      	cmp	r0, #0
 800f032:	d139      	bne.n	800f0a8 <_dtoa_r+0x320>
 800f034:	4b16      	ldr	r3, [pc, #88]	; (800f090 <_dtoa_r+0x308>)
 800f036:	4602      	mov	r2, r0
 800f038:	f240 11af 	movw	r1, #431	; 0x1af
 800f03c:	e6bd      	b.n	800edba <_dtoa_r+0x32>
 800f03e:	2301      	movs	r3, #1
 800f040:	e7e1      	b.n	800f006 <_dtoa_r+0x27e>
 800f042:	2501      	movs	r5, #1
 800f044:	2300      	movs	r3, #0
 800f046:	9307      	str	r3, [sp, #28]
 800f048:	9509      	str	r5, [sp, #36]	; 0x24
 800f04a:	f04f 33ff 	mov.w	r3, #4294967295
 800f04e:	9301      	str	r3, [sp, #4]
 800f050:	9304      	str	r3, [sp, #16]
 800f052:	2200      	movs	r2, #0
 800f054:	2312      	movs	r3, #18
 800f056:	e7d1      	b.n	800effc <_dtoa_r+0x274>
 800f058:	636f4361 	.word	0x636f4361
 800f05c:	3fd287a7 	.word	0x3fd287a7
 800f060:	8b60c8b3 	.word	0x8b60c8b3
 800f064:	3fc68a28 	.word	0x3fc68a28
 800f068:	509f79fb 	.word	0x509f79fb
 800f06c:	3fd34413 	.word	0x3fd34413
 800f070:	08011e40 	.word	0x08011e40
 800f074:	08011e57 	.word	0x08011e57
 800f078:	7ff00000 	.word	0x7ff00000
 800f07c:	08011e3a 	.word	0x08011e3a
 800f080:	08011e31 	.word	0x08011e31
 800f084:	08011e3f 	.word	0x08011e3f
 800f088:	3ff80000 	.word	0x3ff80000
 800f08c:	08011f48 	.word	0x08011f48
 800f090:	08011eaf 	.word	0x08011eaf
 800f094:	2301      	movs	r3, #1
 800f096:	9309      	str	r3, [sp, #36]	; 0x24
 800f098:	e7d7      	b.n	800f04a <_dtoa_r+0x2c2>
 800f09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f09c:	9301      	str	r3, [sp, #4]
 800f09e:	9304      	str	r3, [sp, #16]
 800f0a0:	e7ba      	b.n	800f018 <_dtoa_r+0x290>
 800f0a2:	3101      	adds	r1, #1
 800f0a4:	0052      	lsls	r2, r2, #1
 800f0a6:	e7ba      	b.n	800f01e <_dtoa_r+0x296>
 800f0a8:	69e3      	ldr	r3, [r4, #28]
 800f0aa:	9a00      	ldr	r2, [sp, #0]
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	9b04      	ldr	r3, [sp, #16]
 800f0b0:	2b0e      	cmp	r3, #14
 800f0b2:	f200 80a8 	bhi.w	800f206 <_dtoa_r+0x47e>
 800f0b6:	2d00      	cmp	r5, #0
 800f0b8:	f000 80a5 	beq.w	800f206 <_dtoa_r+0x47e>
 800f0bc:	f1bb 0f00 	cmp.w	fp, #0
 800f0c0:	dd38      	ble.n	800f134 <_dtoa_r+0x3ac>
 800f0c2:	4bc0      	ldr	r3, [pc, #768]	; (800f3c4 <_dtoa_r+0x63c>)
 800f0c4:	f00b 020f 	and.w	r2, fp, #15
 800f0c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f0d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f0d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f0d8:	d019      	beq.n	800f10e <_dtoa_r+0x386>
 800f0da:	4bbb      	ldr	r3, [pc, #748]	; (800f3c8 <_dtoa_r+0x640>)
 800f0dc:	ec51 0b18 	vmov	r0, r1, d8
 800f0e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0e4:	f7f1 fbd2 	bl	800088c <__aeabi_ddiv>
 800f0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0ec:	f008 080f 	and.w	r8, r8, #15
 800f0f0:	2503      	movs	r5, #3
 800f0f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f3c8 <_dtoa_r+0x640>
 800f0f6:	f1b8 0f00 	cmp.w	r8, #0
 800f0fa:	d10a      	bne.n	800f112 <_dtoa_r+0x38a>
 800f0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f100:	4632      	mov	r2, r6
 800f102:	463b      	mov	r3, r7
 800f104:	f7f1 fbc2 	bl	800088c <__aeabi_ddiv>
 800f108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f10c:	e02b      	b.n	800f166 <_dtoa_r+0x3de>
 800f10e:	2502      	movs	r5, #2
 800f110:	e7ef      	b.n	800f0f2 <_dtoa_r+0x36a>
 800f112:	f018 0f01 	tst.w	r8, #1
 800f116:	d008      	beq.n	800f12a <_dtoa_r+0x3a2>
 800f118:	4630      	mov	r0, r6
 800f11a:	4639      	mov	r1, r7
 800f11c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f120:	f7f1 fa8a 	bl	8000638 <__aeabi_dmul>
 800f124:	3501      	adds	r5, #1
 800f126:	4606      	mov	r6, r0
 800f128:	460f      	mov	r7, r1
 800f12a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f12e:	f109 0908 	add.w	r9, r9, #8
 800f132:	e7e0      	b.n	800f0f6 <_dtoa_r+0x36e>
 800f134:	f000 809f 	beq.w	800f276 <_dtoa_r+0x4ee>
 800f138:	f1cb 0600 	rsb	r6, fp, #0
 800f13c:	4ba1      	ldr	r3, [pc, #644]	; (800f3c4 <_dtoa_r+0x63c>)
 800f13e:	4fa2      	ldr	r7, [pc, #648]	; (800f3c8 <_dtoa_r+0x640>)
 800f140:	f006 020f 	and.w	r2, r6, #15
 800f144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14c:	ec51 0b18 	vmov	r0, r1, d8
 800f150:	f7f1 fa72 	bl	8000638 <__aeabi_dmul>
 800f154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f158:	1136      	asrs	r6, r6, #4
 800f15a:	2300      	movs	r3, #0
 800f15c:	2502      	movs	r5, #2
 800f15e:	2e00      	cmp	r6, #0
 800f160:	d17e      	bne.n	800f260 <_dtoa_r+0x4d8>
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1d0      	bne.n	800f108 <_dtoa_r+0x380>
 800f166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f168:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 8084 	beq.w	800f27a <_dtoa_r+0x4f2>
 800f172:	4b96      	ldr	r3, [pc, #600]	; (800f3cc <_dtoa_r+0x644>)
 800f174:	2200      	movs	r2, #0
 800f176:	4640      	mov	r0, r8
 800f178:	4649      	mov	r1, r9
 800f17a:	f7f1 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d07b      	beq.n	800f27a <_dtoa_r+0x4f2>
 800f182:	9b04      	ldr	r3, [sp, #16]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d078      	beq.n	800f27a <_dtoa_r+0x4f2>
 800f188:	9b01      	ldr	r3, [sp, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	dd39      	ble.n	800f202 <_dtoa_r+0x47a>
 800f18e:	4b90      	ldr	r3, [pc, #576]	; (800f3d0 <_dtoa_r+0x648>)
 800f190:	2200      	movs	r2, #0
 800f192:	4640      	mov	r0, r8
 800f194:	4649      	mov	r1, r9
 800f196:	f7f1 fa4f 	bl	8000638 <__aeabi_dmul>
 800f19a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f19e:	9e01      	ldr	r6, [sp, #4]
 800f1a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f1a4:	3501      	adds	r5, #1
 800f1a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	f7f1 f9da 	bl	8000564 <__aeabi_i2d>
 800f1b0:	4642      	mov	r2, r8
 800f1b2:	464b      	mov	r3, r9
 800f1b4:	f7f1 fa40 	bl	8000638 <__aeabi_dmul>
 800f1b8:	4b86      	ldr	r3, [pc, #536]	; (800f3d4 <_dtoa_r+0x64c>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f7f1 f886 	bl	80002cc <__adddf3>
 800f1c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f1c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1c8:	9303      	str	r3, [sp, #12]
 800f1ca:	2e00      	cmp	r6, #0
 800f1cc:	d158      	bne.n	800f280 <_dtoa_r+0x4f8>
 800f1ce:	4b82      	ldr	r3, [pc, #520]	; (800f3d8 <_dtoa_r+0x650>)
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	4640      	mov	r0, r8
 800f1d4:	4649      	mov	r1, r9
 800f1d6:	f7f1 f877 	bl	80002c8 <__aeabi_dsub>
 800f1da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1de:	4680      	mov	r8, r0
 800f1e0:	4689      	mov	r9, r1
 800f1e2:	f7f1 fcb9 	bl	8000b58 <__aeabi_dcmpgt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	f040 8296 	bne.w	800f718 <_dtoa_r+0x990>
 800f1ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f1f0:	4640      	mov	r0, r8
 800f1f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1f6:	4649      	mov	r1, r9
 800f1f8:	f7f1 fc90 	bl	8000b1c <__aeabi_dcmplt>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	f040 8289 	bne.w	800f714 <_dtoa_r+0x98c>
 800f202:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f2c0 814e 	blt.w	800f4aa <_dtoa_r+0x722>
 800f20e:	f1bb 0f0e 	cmp.w	fp, #14
 800f212:	f300 814a 	bgt.w	800f4aa <_dtoa_r+0x722>
 800f216:	4b6b      	ldr	r3, [pc, #428]	; (800f3c4 <_dtoa_r+0x63c>)
 800f218:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f21c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f222:	2b00      	cmp	r3, #0
 800f224:	f280 80dc 	bge.w	800f3e0 <_dtoa_r+0x658>
 800f228:	9b04      	ldr	r3, [sp, #16]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f300 80d8 	bgt.w	800f3e0 <_dtoa_r+0x658>
 800f230:	f040 826f 	bne.w	800f712 <_dtoa_r+0x98a>
 800f234:	4b68      	ldr	r3, [pc, #416]	; (800f3d8 <_dtoa_r+0x650>)
 800f236:	2200      	movs	r2, #0
 800f238:	4640      	mov	r0, r8
 800f23a:	4649      	mov	r1, r9
 800f23c:	f7f1 f9fc 	bl	8000638 <__aeabi_dmul>
 800f240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f244:	f7f1 fc7e 	bl	8000b44 <__aeabi_dcmpge>
 800f248:	9e04      	ldr	r6, [sp, #16]
 800f24a:	4637      	mov	r7, r6
 800f24c:	2800      	cmp	r0, #0
 800f24e:	f040 8245 	bne.w	800f6dc <_dtoa_r+0x954>
 800f252:	9d00      	ldr	r5, [sp, #0]
 800f254:	2331      	movs	r3, #49	; 0x31
 800f256:	f805 3b01 	strb.w	r3, [r5], #1
 800f25a:	f10b 0b01 	add.w	fp, fp, #1
 800f25e:	e241      	b.n	800f6e4 <_dtoa_r+0x95c>
 800f260:	07f2      	lsls	r2, r6, #31
 800f262:	d505      	bpl.n	800f270 <_dtoa_r+0x4e8>
 800f264:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f268:	f7f1 f9e6 	bl	8000638 <__aeabi_dmul>
 800f26c:	3501      	adds	r5, #1
 800f26e:	2301      	movs	r3, #1
 800f270:	1076      	asrs	r6, r6, #1
 800f272:	3708      	adds	r7, #8
 800f274:	e773      	b.n	800f15e <_dtoa_r+0x3d6>
 800f276:	2502      	movs	r5, #2
 800f278:	e775      	b.n	800f166 <_dtoa_r+0x3de>
 800f27a:	9e04      	ldr	r6, [sp, #16]
 800f27c:	465f      	mov	r7, fp
 800f27e:	e792      	b.n	800f1a6 <_dtoa_r+0x41e>
 800f280:	9900      	ldr	r1, [sp, #0]
 800f282:	4b50      	ldr	r3, [pc, #320]	; (800f3c4 <_dtoa_r+0x63c>)
 800f284:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f288:	4431      	add	r1, r6
 800f28a:	9102      	str	r1, [sp, #8]
 800f28c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f28e:	eeb0 9a47 	vmov.f32	s18, s14
 800f292:	eef0 9a67 	vmov.f32	s19, s15
 800f296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f29a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f29e:	2900      	cmp	r1, #0
 800f2a0:	d044      	beq.n	800f32c <_dtoa_r+0x5a4>
 800f2a2:	494e      	ldr	r1, [pc, #312]	; (800f3dc <_dtoa_r+0x654>)
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	f7f1 faf1 	bl	800088c <__aeabi_ddiv>
 800f2aa:	ec53 2b19 	vmov	r2, r3, d9
 800f2ae:	f7f1 f80b 	bl	80002c8 <__aeabi_dsub>
 800f2b2:	9d00      	ldr	r5, [sp, #0]
 800f2b4:	ec41 0b19 	vmov	d9, r0, r1
 800f2b8:	4649      	mov	r1, r9
 800f2ba:	4640      	mov	r0, r8
 800f2bc:	f7f1 fc6c 	bl	8000b98 <__aeabi_d2iz>
 800f2c0:	4606      	mov	r6, r0
 800f2c2:	f7f1 f94f 	bl	8000564 <__aeabi_i2d>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4640      	mov	r0, r8
 800f2cc:	4649      	mov	r1, r9
 800f2ce:	f7f0 fffb 	bl	80002c8 <__aeabi_dsub>
 800f2d2:	3630      	adds	r6, #48	; 0x30
 800f2d4:	f805 6b01 	strb.w	r6, [r5], #1
 800f2d8:	ec53 2b19 	vmov	r2, r3, d9
 800f2dc:	4680      	mov	r8, r0
 800f2de:	4689      	mov	r9, r1
 800f2e0:	f7f1 fc1c 	bl	8000b1c <__aeabi_dcmplt>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d164      	bne.n	800f3b2 <_dtoa_r+0x62a>
 800f2e8:	4642      	mov	r2, r8
 800f2ea:	464b      	mov	r3, r9
 800f2ec:	4937      	ldr	r1, [pc, #220]	; (800f3cc <_dtoa_r+0x644>)
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	f7f0 ffea 	bl	80002c8 <__aeabi_dsub>
 800f2f4:	ec53 2b19 	vmov	r2, r3, d9
 800f2f8:	f7f1 fc10 	bl	8000b1c <__aeabi_dcmplt>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	f040 80b6 	bne.w	800f46e <_dtoa_r+0x6e6>
 800f302:	9b02      	ldr	r3, [sp, #8]
 800f304:	429d      	cmp	r5, r3
 800f306:	f43f af7c 	beq.w	800f202 <_dtoa_r+0x47a>
 800f30a:	4b31      	ldr	r3, [pc, #196]	; (800f3d0 <_dtoa_r+0x648>)
 800f30c:	ec51 0b19 	vmov	r0, r1, d9
 800f310:	2200      	movs	r2, #0
 800f312:	f7f1 f991 	bl	8000638 <__aeabi_dmul>
 800f316:	4b2e      	ldr	r3, [pc, #184]	; (800f3d0 <_dtoa_r+0x648>)
 800f318:	ec41 0b19 	vmov	d9, r0, r1
 800f31c:	2200      	movs	r2, #0
 800f31e:	4640      	mov	r0, r8
 800f320:	4649      	mov	r1, r9
 800f322:	f7f1 f989 	bl	8000638 <__aeabi_dmul>
 800f326:	4680      	mov	r8, r0
 800f328:	4689      	mov	r9, r1
 800f32a:	e7c5      	b.n	800f2b8 <_dtoa_r+0x530>
 800f32c:	ec51 0b17 	vmov	r0, r1, d7
 800f330:	f7f1 f982 	bl	8000638 <__aeabi_dmul>
 800f334:	9b02      	ldr	r3, [sp, #8]
 800f336:	9d00      	ldr	r5, [sp, #0]
 800f338:	930f      	str	r3, [sp, #60]	; 0x3c
 800f33a:	ec41 0b19 	vmov	d9, r0, r1
 800f33e:	4649      	mov	r1, r9
 800f340:	4640      	mov	r0, r8
 800f342:	f7f1 fc29 	bl	8000b98 <__aeabi_d2iz>
 800f346:	4606      	mov	r6, r0
 800f348:	f7f1 f90c 	bl	8000564 <__aeabi_i2d>
 800f34c:	3630      	adds	r6, #48	; 0x30
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	4640      	mov	r0, r8
 800f354:	4649      	mov	r1, r9
 800f356:	f7f0 ffb7 	bl	80002c8 <__aeabi_dsub>
 800f35a:	f805 6b01 	strb.w	r6, [r5], #1
 800f35e:	9b02      	ldr	r3, [sp, #8]
 800f360:	429d      	cmp	r5, r3
 800f362:	4680      	mov	r8, r0
 800f364:	4689      	mov	r9, r1
 800f366:	f04f 0200 	mov.w	r2, #0
 800f36a:	d124      	bne.n	800f3b6 <_dtoa_r+0x62e>
 800f36c:	4b1b      	ldr	r3, [pc, #108]	; (800f3dc <_dtoa_r+0x654>)
 800f36e:	ec51 0b19 	vmov	r0, r1, d9
 800f372:	f7f0 ffab 	bl	80002cc <__adddf3>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	4640      	mov	r0, r8
 800f37c:	4649      	mov	r1, r9
 800f37e:	f7f1 fbeb 	bl	8000b58 <__aeabi_dcmpgt>
 800f382:	2800      	cmp	r0, #0
 800f384:	d173      	bne.n	800f46e <_dtoa_r+0x6e6>
 800f386:	ec53 2b19 	vmov	r2, r3, d9
 800f38a:	4914      	ldr	r1, [pc, #80]	; (800f3dc <_dtoa_r+0x654>)
 800f38c:	2000      	movs	r0, #0
 800f38e:	f7f0 ff9b 	bl	80002c8 <__aeabi_dsub>
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	4640      	mov	r0, r8
 800f398:	4649      	mov	r1, r9
 800f39a:	f7f1 fbbf 	bl	8000b1c <__aeabi_dcmplt>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	f43f af2f 	beq.w	800f202 <_dtoa_r+0x47a>
 800f3a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f3a6:	1e6b      	subs	r3, r5, #1
 800f3a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f3ae:	2b30      	cmp	r3, #48	; 0x30
 800f3b0:	d0f8      	beq.n	800f3a4 <_dtoa_r+0x61c>
 800f3b2:	46bb      	mov	fp, r7
 800f3b4:	e04a      	b.n	800f44c <_dtoa_r+0x6c4>
 800f3b6:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <_dtoa_r+0x648>)
 800f3b8:	f7f1 f93e 	bl	8000638 <__aeabi_dmul>
 800f3bc:	4680      	mov	r8, r0
 800f3be:	4689      	mov	r9, r1
 800f3c0:	e7bd      	b.n	800f33e <_dtoa_r+0x5b6>
 800f3c2:	bf00      	nop
 800f3c4:	08011f48 	.word	0x08011f48
 800f3c8:	08011f20 	.word	0x08011f20
 800f3cc:	3ff00000 	.word	0x3ff00000
 800f3d0:	40240000 	.word	0x40240000
 800f3d4:	401c0000 	.word	0x401c0000
 800f3d8:	40140000 	.word	0x40140000
 800f3dc:	3fe00000 	.word	0x3fe00000
 800f3e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f3e4:	9d00      	ldr	r5, [sp, #0]
 800f3e6:	4642      	mov	r2, r8
 800f3e8:	464b      	mov	r3, r9
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	4639      	mov	r1, r7
 800f3ee:	f7f1 fa4d 	bl	800088c <__aeabi_ddiv>
 800f3f2:	f7f1 fbd1 	bl	8000b98 <__aeabi_d2iz>
 800f3f6:	9001      	str	r0, [sp, #4]
 800f3f8:	f7f1 f8b4 	bl	8000564 <__aeabi_i2d>
 800f3fc:	4642      	mov	r2, r8
 800f3fe:	464b      	mov	r3, r9
 800f400:	f7f1 f91a 	bl	8000638 <__aeabi_dmul>
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	4630      	mov	r0, r6
 800f40a:	4639      	mov	r1, r7
 800f40c:	f7f0 ff5c 	bl	80002c8 <__aeabi_dsub>
 800f410:	9e01      	ldr	r6, [sp, #4]
 800f412:	9f04      	ldr	r7, [sp, #16]
 800f414:	3630      	adds	r6, #48	; 0x30
 800f416:	f805 6b01 	strb.w	r6, [r5], #1
 800f41a:	9e00      	ldr	r6, [sp, #0]
 800f41c:	1bae      	subs	r6, r5, r6
 800f41e:	42b7      	cmp	r7, r6
 800f420:	4602      	mov	r2, r0
 800f422:	460b      	mov	r3, r1
 800f424:	d134      	bne.n	800f490 <_dtoa_r+0x708>
 800f426:	f7f0 ff51 	bl	80002cc <__adddf3>
 800f42a:	4642      	mov	r2, r8
 800f42c:	464b      	mov	r3, r9
 800f42e:	4606      	mov	r6, r0
 800f430:	460f      	mov	r7, r1
 800f432:	f7f1 fb91 	bl	8000b58 <__aeabi_dcmpgt>
 800f436:	b9c8      	cbnz	r0, 800f46c <_dtoa_r+0x6e4>
 800f438:	4642      	mov	r2, r8
 800f43a:	464b      	mov	r3, r9
 800f43c:	4630      	mov	r0, r6
 800f43e:	4639      	mov	r1, r7
 800f440:	f7f1 fb62 	bl	8000b08 <__aeabi_dcmpeq>
 800f444:	b110      	cbz	r0, 800f44c <_dtoa_r+0x6c4>
 800f446:	9b01      	ldr	r3, [sp, #4]
 800f448:	07db      	lsls	r3, r3, #31
 800f44a:	d40f      	bmi.n	800f46c <_dtoa_r+0x6e4>
 800f44c:	4651      	mov	r1, sl
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fad4 	bl	800f9fc <_Bfree>
 800f454:	2300      	movs	r3, #0
 800f456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f458:	702b      	strb	r3, [r5, #0]
 800f45a:	f10b 0301 	add.w	r3, fp, #1
 800f45e:	6013      	str	r3, [r2, #0]
 800f460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f462:	2b00      	cmp	r3, #0
 800f464:	f43f ace2 	beq.w	800ee2c <_dtoa_r+0xa4>
 800f468:	601d      	str	r5, [r3, #0]
 800f46a:	e4df      	b.n	800ee2c <_dtoa_r+0xa4>
 800f46c:	465f      	mov	r7, fp
 800f46e:	462b      	mov	r3, r5
 800f470:	461d      	mov	r5, r3
 800f472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f476:	2a39      	cmp	r2, #57	; 0x39
 800f478:	d106      	bne.n	800f488 <_dtoa_r+0x700>
 800f47a:	9a00      	ldr	r2, [sp, #0]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d1f7      	bne.n	800f470 <_dtoa_r+0x6e8>
 800f480:	9900      	ldr	r1, [sp, #0]
 800f482:	2230      	movs	r2, #48	; 0x30
 800f484:	3701      	adds	r7, #1
 800f486:	700a      	strb	r2, [r1, #0]
 800f488:	781a      	ldrb	r2, [r3, #0]
 800f48a:	3201      	adds	r2, #1
 800f48c:	701a      	strb	r2, [r3, #0]
 800f48e:	e790      	b.n	800f3b2 <_dtoa_r+0x62a>
 800f490:	4ba3      	ldr	r3, [pc, #652]	; (800f720 <_dtoa_r+0x998>)
 800f492:	2200      	movs	r2, #0
 800f494:	f7f1 f8d0 	bl	8000638 <__aeabi_dmul>
 800f498:	2200      	movs	r2, #0
 800f49a:	2300      	movs	r3, #0
 800f49c:	4606      	mov	r6, r0
 800f49e:	460f      	mov	r7, r1
 800f4a0:	f7f1 fb32 	bl	8000b08 <__aeabi_dcmpeq>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d09e      	beq.n	800f3e6 <_dtoa_r+0x65e>
 800f4a8:	e7d0      	b.n	800f44c <_dtoa_r+0x6c4>
 800f4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4ac:	2a00      	cmp	r2, #0
 800f4ae:	f000 80ca 	beq.w	800f646 <_dtoa_r+0x8be>
 800f4b2:	9a07      	ldr	r2, [sp, #28]
 800f4b4:	2a01      	cmp	r2, #1
 800f4b6:	f300 80ad 	bgt.w	800f614 <_dtoa_r+0x88c>
 800f4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4bc:	2a00      	cmp	r2, #0
 800f4be:	f000 80a5 	beq.w	800f60c <_dtoa_r+0x884>
 800f4c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f4c6:	9e08      	ldr	r6, [sp, #32]
 800f4c8:	9d05      	ldr	r5, [sp, #20]
 800f4ca:	9a05      	ldr	r2, [sp, #20]
 800f4cc:	441a      	add	r2, r3
 800f4ce:	9205      	str	r2, [sp, #20]
 800f4d0:	9a06      	ldr	r2, [sp, #24]
 800f4d2:	2101      	movs	r1, #1
 800f4d4:	441a      	add	r2, r3
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	9206      	str	r2, [sp, #24]
 800f4da:	f000 fb45 	bl	800fb68 <__i2b>
 800f4de:	4607      	mov	r7, r0
 800f4e0:	b165      	cbz	r5, 800f4fc <_dtoa_r+0x774>
 800f4e2:	9b06      	ldr	r3, [sp, #24]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	dd09      	ble.n	800f4fc <_dtoa_r+0x774>
 800f4e8:	42ab      	cmp	r3, r5
 800f4ea:	9a05      	ldr	r2, [sp, #20]
 800f4ec:	bfa8      	it	ge
 800f4ee:	462b      	movge	r3, r5
 800f4f0:	1ad2      	subs	r2, r2, r3
 800f4f2:	9205      	str	r2, [sp, #20]
 800f4f4:	9a06      	ldr	r2, [sp, #24]
 800f4f6:	1aed      	subs	r5, r5, r3
 800f4f8:	1ad3      	subs	r3, r2, r3
 800f4fa:	9306      	str	r3, [sp, #24]
 800f4fc:	9b08      	ldr	r3, [sp, #32]
 800f4fe:	b1f3      	cbz	r3, 800f53e <_dtoa_r+0x7b6>
 800f500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f502:	2b00      	cmp	r3, #0
 800f504:	f000 80a3 	beq.w	800f64e <_dtoa_r+0x8c6>
 800f508:	2e00      	cmp	r6, #0
 800f50a:	dd10      	ble.n	800f52e <_dtoa_r+0x7a6>
 800f50c:	4639      	mov	r1, r7
 800f50e:	4632      	mov	r2, r6
 800f510:	4620      	mov	r0, r4
 800f512:	f000 fbe9 	bl	800fce8 <__pow5mult>
 800f516:	4652      	mov	r2, sl
 800f518:	4601      	mov	r1, r0
 800f51a:	4607      	mov	r7, r0
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 fb39 	bl	800fb94 <__multiply>
 800f522:	4651      	mov	r1, sl
 800f524:	4680      	mov	r8, r0
 800f526:	4620      	mov	r0, r4
 800f528:	f000 fa68 	bl	800f9fc <_Bfree>
 800f52c:	46c2      	mov	sl, r8
 800f52e:	9b08      	ldr	r3, [sp, #32]
 800f530:	1b9a      	subs	r2, r3, r6
 800f532:	d004      	beq.n	800f53e <_dtoa_r+0x7b6>
 800f534:	4651      	mov	r1, sl
 800f536:	4620      	mov	r0, r4
 800f538:	f000 fbd6 	bl	800fce8 <__pow5mult>
 800f53c:	4682      	mov	sl, r0
 800f53e:	2101      	movs	r1, #1
 800f540:	4620      	mov	r0, r4
 800f542:	f000 fb11 	bl	800fb68 <__i2b>
 800f546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f548:	2b00      	cmp	r3, #0
 800f54a:	4606      	mov	r6, r0
 800f54c:	f340 8081 	ble.w	800f652 <_dtoa_r+0x8ca>
 800f550:	461a      	mov	r2, r3
 800f552:	4601      	mov	r1, r0
 800f554:	4620      	mov	r0, r4
 800f556:	f000 fbc7 	bl	800fce8 <__pow5mult>
 800f55a:	9b07      	ldr	r3, [sp, #28]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	4606      	mov	r6, r0
 800f560:	dd7a      	ble.n	800f658 <_dtoa_r+0x8d0>
 800f562:	f04f 0800 	mov.w	r8, #0
 800f566:	6933      	ldr	r3, [r6, #16]
 800f568:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f56c:	6918      	ldr	r0, [r3, #16]
 800f56e:	f000 faad 	bl	800facc <__hi0bits>
 800f572:	f1c0 0020 	rsb	r0, r0, #32
 800f576:	9b06      	ldr	r3, [sp, #24]
 800f578:	4418      	add	r0, r3
 800f57a:	f010 001f 	ands.w	r0, r0, #31
 800f57e:	f000 8094 	beq.w	800f6aa <_dtoa_r+0x922>
 800f582:	f1c0 0320 	rsb	r3, r0, #32
 800f586:	2b04      	cmp	r3, #4
 800f588:	f340 8085 	ble.w	800f696 <_dtoa_r+0x90e>
 800f58c:	9b05      	ldr	r3, [sp, #20]
 800f58e:	f1c0 001c 	rsb	r0, r0, #28
 800f592:	4403      	add	r3, r0
 800f594:	9305      	str	r3, [sp, #20]
 800f596:	9b06      	ldr	r3, [sp, #24]
 800f598:	4403      	add	r3, r0
 800f59a:	4405      	add	r5, r0
 800f59c:	9306      	str	r3, [sp, #24]
 800f59e:	9b05      	ldr	r3, [sp, #20]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	dd05      	ble.n	800f5b0 <_dtoa_r+0x828>
 800f5a4:	4651      	mov	r1, sl
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f000 fbf7 	bl	800fd9c <__lshift>
 800f5ae:	4682      	mov	sl, r0
 800f5b0:	9b06      	ldr	r3, [sp, #24]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	dd05      	ble.n	800f5c2 <_dtoa_r+0x83a>
 800f5b6:	4631      	mov	r1, r6
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f000 fbee 	bl	800fd9c <__lshift>
 800f5c0:	4606      	mov	r6, r0
 800f5c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d072      	beq.n	800f6ae <_dtoa_r+0x926>
 800f5c8:	4631      	mov	r1, r6
 800f5ca:	4650      	mov	r0, sl
 800f5cc:	f000 fc52 	bl	800fe74 <__mcmp>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	da6c      	bge.n	800f6ae <_dtoa_r+0x926>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4651      	mov	r1, sl
 800f5d8:	220a      	movs	r2, #10
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f000 fa30 	bl	800fa40 <__multadd>
 800f5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f5e6:	4682      	mov	sl, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f000 81b0 	beq.w	800f94e <_dtoa_r+0xbc6>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	220a      	movs	r2, #10
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f000 fa23 	bl	800fa40 <__multadd>
 800f5fa:	9b01      	ldr	r3, [sp, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	4607      	mov	r7, r0
 800f600:	f300 8096 	bgt.w	800f730 <_dtoa_r+0x9a8>
 800f604:	9b07      	ldr	r3, [sp, #28]
 800f606:	2b02      	cmp	r3, #2
 800f608:	dc59      	bgt.n	800f6be <_dtoa_r+0x936>
 800f60a:	e091      	b.n	800f730 <_dtoa_r+0x9a8>
 800f60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f60e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f612:	e758      	b.n	800f4c6 <_dtoa_r+0x73e>
 800f614:	9b04      	ldr	r3, [sp, #16]
 800f616:	1e5e      	subs	r6, r3, #1
 800f618:	9b08      	ldr	r3, [sp, #32]
 800f61a:	42b3      	cmp	r3, r6
 800f61c:	bfbf      	itttt	lt
 800f61e:	9b08      	ldrlt	r3, [sp, #32]
 800f620:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f622:	9608      	strlt	r6, [sp, #32]
 800f624:	1af3      	sublt	r3, r6, r3
 800f626:	bfb4      	ite	lt
 800f628:	18d2      	addlt	r2, r2, r3
 800f62a:	1b9e      	subge	r6, r3, r6
 800f62c:	9b04      	ldr	r3, [sp, #16]
 800f62e:	bfbc      	itt	lt
 800f630:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f632:	2600      	movlt	r6, #0
 800f634:	2b00      	cmp	r3, #0
 800f636:	bfb7      	itett	lt
 800f638:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f63c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f640:	1a9d      	sublt	r5, r3, r2
 800f642:	2300      	movlt	r3, #0
 800f644:	e741      	b.n	800f4ca <_dtoa_r+0x742>
 800f646:	9e08      	ldr	r6, [sp, #32]
 800f648:	9d05      	ldr	r5, [sp, #20]
 800f64a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f64c:	e748      	b.n	800f4e0 <_dtoa_r+0x758>
 800f64e:	9a08      	ldr	r2, [sp, #32]
 800f650:	e770      	b.n	800f534 <_dtoa_r+0x7ac>
 800f652:	9b07      	ldr	r3, [sp, #28]
 800f654:	2b01      	cmp	r3, #1
 800f656:	dc19      	bgt.n	800f68c <_dtoa_r+0x904>
 800f658:	9b02      	ldr	r3, [sp, #8]
 800f65a:	b9bb      	cbnz	r3, 800f68c <_dtoa_r+0x904>
 800f65c:	9b03      	ldr	r3, [sp, #12]
 800f65e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f662:	b99b      	cbnz	r3, 800f68c <_dtoa_r+0x904>
 800f664:	9b03      	ldr	r3, [sp, #12]
 800f666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f66a:	0d1b      	lsrs	r3, r3, #20
 800f66c:	051b      	lsls	r3, r3, #20
 800f66e:	b183      	cbz	r3, 800f692 <_dtoa_r+0x90a>
 800f670:	9b05      	ldr	r3, [sp, #20]
 800f672:	3301      	adds	r3, #1
 800f674:	9305      	str	r3, [sp, #20]
 800f676:	9b06      	ldr	r3, [sp, #24]
 800f678:	3301      	adds	r3, #1
 800f67a:	9306      	str	r3, [sp, #24]
 800f67c:	f04f 0801 	mov.w	r8, #1
 800f680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f682:	2b00      	cmp	r3, #0
 800f684:	f47f af6f 	bne.w	800f566 <_dtoa_r+0x7de>
 800f688:	2001      	movs	r0, #1
 800f68a:	e774      	b.n	800f576 <_dtoa_r+0x7ee>
 800f68c:	f04f 0800 	mov.w	r8, #0
 800f690:	e7f6      	b.n	800f680 <_dtoa_r+0x8f8>
 800f692:	4698      	mov	r8, r3
 800f694:	e7f4      	b.n	800f680 <_dtoa_r+0x8f8>
 800f696:	d082      	beq.n	800f59e <_dtoa_r+0x816>
 800f698:	9a05      	ldr	r2, [sp, #20]
 800f69a:	331c      	adds	r3, #28
 800f69c:	441a      	add	r2, r3
 800f69e:	9205      	str	r2, [sp, #20]
 800f6a0:	9a06      	ldr	r2, [sp, #24]
 800f6a2:	441a      	add	r2, r3
 800f6a4:	441d      	add	r5, r3
 800f6a6:	9206      	str	r2, [sp, #24]
 800f6a8:	e779      	b.n	800f59e <_dtoa_r+0x816>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	e7f4      	b.n	800f698 <_dtoa_r+0x910>
 800f6ae:	9b04      	ldr	r3, [sp, #16]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	dc37      	bgt.n	800f724 <_dtoa_r+0x99c>
 800f6b4:	9b07      	ldr	r3, [sp, #28]
 800f6b6:	2b02      	cmp	r3, #2
 800f6b8:	dd34      	ble.n	800f724 <_dtoa_r+0x99c>
 800f6ba:	9b04      	ldr	r3, [sp, #16]
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	9b01      	ldr	r3, [sp, #4]
 800f6c0:	b963      	cbnz	r3, 800f6dc <_dtoa_r+0x954>
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	2205      	movs	r2, #5
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 f9ba 	bl	800fa40 <__multadd>
 800f6cc:	4601      	mov	r1, r0
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	4650      	mov	r0, sl
 800f6d2:	f000 fbcf 	bl	800fe74 <__mcmp>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	f73f adbb 	bgt.w	800f252 <_dtoa_r+0x4ca>
 800f6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6de:	9d00      	ldr	r5, [sp, #0]
 800f6e0:	ea6f 0b03 	mvn.w	fp, r3
 800f6e4:	f04f 0800 	mov.w	r8, #0
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f000 f986 	bl	800f9fc <_Bfree>
 800f6f0:	2f00      	cmp	r7, #0
 800f6f2:	f43f aeab 	beq.w	800f44c <_dtoa_r+0x6c4>
 800f6f6:	f1b8 0f00 	cmp.w	r8, #0
 800f6fa:	d005      	beq.n	800f708 <_dtoa_r+0x980>
 800f6fc:	45b8      	cmp	r8, r7
 800f6fe:	d003      	beq.n	800f708 <_dtoa_r+0x980>
 800f700:	4641      	mov	r1, r8
 800f702:	4620      	mov	r0, r4
 800f704:	f000 f97a 	bl	800f9fc <_Bfree>
 800f708:	4639      	mov	r1, r7
 800f70a:	4620      	mov	r0, r4
 800f70c:	f000 f976 	bl	800f9fc <_Bfree>
 800f710:	e69c      	b.n	800f44c <_dtoa_r+0x6c4>
 800f712:	2600      	movs	r6, #0
 800f714:	4637      	mov	r7, r6
 800f716:	e7e1      	b.n	800f6dc <_dtoa_r+0x954>
 800f718:	46bb      	mov	fp, r7
 800f71a:	4637      	mov	r7, r6
 800f71c:	e599      	b.n	800f252 <_dtoa_r+0x4ca>
 800f71e:	bf00      	nop
 800f720:	40240000 	.word	0x40240000
 800f724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f726:	2b00      	cmp	r3, #0
 800f728:	f000 80c8 	beq.w	800f8bc <_dtoa_r+0xb34>
 800f72c:	9b04      	ldr	r3, [sp, #16]
 800f72e:	9301      	str	r3, [sp, #4]
 800f730:	2d00      	cmp	r5, #0
 800f732:	dd05      	ble.n	800f740 <_dtoa_r+0x9b8>
 800f734:	4639      	mov	r1, r7
 800f736:	462a      	mov	r2, r5
 800f738:	4620      	mov	r0, r4
 800f73a:	f000 fb2f 	bl	800fd9c <__lshift>
 800f73e:	4607      	mov	r7, r0
 800f740:	f1b8 0f00 	cmp.w	r8, #0
 800f744:	d05b      	beq.n	800f7fe <_dtoa_r+0xa76>
 800f746:	6879      	ldr	r1, [r7, #4]
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 f917 	bl	800f97c <_Balloc>
 800f74e:	4605      	mov	r5, r0
 800f750:	b928      	cbnz	r0, 800f75e <_dtoa_r+0x9d6>
 800f752:	4b83      	ldr	r3, [pc, #524]	; (800f960 <_dtoa_r+0xbd8>)
 800f754:	4602      	mov	r2, r0
 800f756:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f75a:	f7ff bb2e 	b.w	800edba <_dtoa_r+0x32>
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	3202      	adds	r2, #2
 800f762:	0092      	lsls	r2, r2, #2
 800f764:	f107 010c 	add.w	r1, r7, #12
 800f768:	300c      	adds	r0, #12
 800f76a:	f000 fca1 	bl	80100b0 <memcpy>
 800f76e:	2201      	movs	r2, #1
 800f770:	4629      	mov	r1, r5
 800f772:	4620      	mov	r0, r4
 800f774:	f000 fb12 	bl	800fd9c <__lshift>
 800f778:	9b00      	ldr	r3, [sp, #0]
 800f77a:	3301      	adds	r3, #1
 800f77c:	9304      	str	r3, [sp, #16]
 800f77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f782:	4413      	add	r3, r2
 800f784:	9308      	str	r3, [sp, #32]
 800f786:	9b02      	ldr	r3, [sp, #8]
 800f788:	f003 0301 	and.w	r3, r3, #1
 800f78c:	46b8      	mov	r8, r7
 800f78e:	9306      	str	r3, [sp, #24]
 800f790:	4607      	mov	r7, r0
 800f792:	9b04      	ldr	r3, [sp, #16]
 800f794:	4631      	mov	r1, r6
 800f796:	3b01      	subs	r3, #1
 800f798:	4650      	mov	r0, sl
 800f79a:	9301      	str	r3, [sp, #4]
 800f79c:	f7ff fa6a 	bl	800ec74 <quorem>
 800f7a0:	4641      	mov	r1, r8
 800f7a2:	9002      	str	r0, [sp, #8]
 800f7a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f7a8:	4650      	mov	r0, sl
 800f7aa:	f000 fb63 	bl	800fe74 <__mcmp>
 800f7ae:	463a      	mov	r2, r7
 800f7b0:	9005      	str	r0, [sp, #20]
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f000 fb79 	bl	800feac <__mdiff>
 800f7ba:	68c2      	ldr	r2, [r0, #12]
 800f7bc:	4605      	mov	r5, r0
 800f7be:	bb02      	cbnz	r2, 800f802 <_dtoa_r+0xa7a>
 800f7c0:	4601      	mov	r1, r0
 800f7c2:	4650      	mov	r0, sl
 800f7c4:	f000 fb56 	bl	800fe74 <__mcmp>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	4629      	mov	r1, r5
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	9209      	str	r2, [sp, #36]	; 0x24
 800f7d0:	f000 f914 	bl	800f9fc <_Bfree>
 800f7d4:	9b07      	ldr	r3, [sp, #28]
 800f7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7d8:	9d04      	ldr	r5, [sp, #16]
 800f7da:	ea43 0102 	orr.w	r1, r3, r2
 800f7de:	9b06      	ldr	r3, [sp, #24]
 800f7e0:	4319      	orrs	r1, r3
 800f7e2:	d110      	bne.n	800f806 <_dtoa_r+0xa7e>
 800f7e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f7e8:	d029      	beq.n	800f83e <_dtoa_r+0xab6>
 800f7ea:	9b05      	ldr	r3, [sp, #20]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	dd02      	ble.n	800f7f6 <_dtoa_r+0xa6e>
 800f7f0:	9b02      	ldr	r3, [sp, #8]
 800f7f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f7f6:	9b01      	ldr	r3, [sp, #4]
 800f7f8:	f883 9000 	strb.w	r9, [r3]
 800f7fc:	e774      	b.n	800f6e8 <_dtoa_r+0x960>
 800f7fe:	4638      	mov	r0, r7
 800f800:	e7ba      	b.n	800f778 <_dtoa_r+0x9f0>
 800f802:	2201      	movs	r2, #1
 800f804:	e7e1      	b.n	800f7ca <_dtoa_r+0xa42>
 800f806:	9b05      	ldr	r3, [sp, #20]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	db04      	blt.n	800f816 <_dtoa_r+0xa8e>
 800f80c:	9907      	ldr	r1, [sp, #28]
 800f80e:	430b      	orrs	r3, r1
 800f810:	9906      	ldr	r1, [sp, #24]
 800f812:	430b      	orrs	r3, r1
 800f814:	d120      	bne.n	800f858 <_dtoa_r+0xad0>
 800f816:	2a00      	cmp	r2, #0
 800f818:	dded      	ble.n	800f7f6 <_dtoa_r+0xa6e>
 800f81a:	4651      	mov	r1, sl
 800f81c:	2201      	movs	r2, #1
 800f81e:	4620      	mov	r0, r4
 800f820:	f000 fabc 	bl	800fd9c <__lshift>
 800f824:	4631      	mov	r1, r6
 800f826:	4682      	mov	sl, r0
 800f828:	f000 fb24 	bl	800fe74 <__mcmp>
 800f82c:	2800      	cmp	r0, #0
 800f82e:	dc03      	bgt.n	800f838 <_dtoa_r+0xab0>
 800f830:	d1e1      	bne.n	800f7f6 <_dtoa_r+0xa6e>
 800f832:	f019 0f01 	tst.w	r9, #1
 800f836:	d0de      	beq.n	800f7f6 <_dtoa_r+0xa6e>
 800f838:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f83c:	d1d8      	bne.n	800f7f0 <_dtoa_r+0xa68>
 800f83e:	9a01      	ldr	r2, [sp, #4]
 800f840:	2339      	movs	r3, #57	; 0x39
 800f842:	7013      	strb	r3, [r2, #0]
 800f844:	462b      	mov	r3, r5
 800f846:	461d      	mov	r5, r3
 800f848:	3b01      	subs	r3, #1
 800f84a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f84e:	2a39      	cmp	r2, #57	; 0x39
 800f850:	d06c      	beq.n	800f92c <_dtoa_r+0xba4>
 800f852:	3201      	adds	r2, #1
 800f854:	701a      	strb	r2, [r3, #0]
 800f856:	e747      	b.n	800f6e8 <_dtoa_r+0x960>
 800f858:	2a00      	cmp	r2, #0
 800f85a:	dd07      	ble.n	800f86c <_dtoa_r+0xae4>
 800f85c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f860:	d0ed      	beq.n	800f83e <_dtoa_r+0xab6>
 800f862:	9a01      	ldr	r2, [sp, #4]
 800f864:	f109 0301 	add.w	r3, r9, #1
 800f868:	7013      	strb	r3, [r2, #0]
 800f86a:	e73d      	b.n	800f6e8 <_dtoa_r+0x960>
 800f86c:	9b04      	ldr	r3, [sp, #16]
 800f86e:	9a08      	ldr	r2, [sp, #32]
 800f870:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f874:	4293      	cmp	r3, r2
 800f876:	d043      	beq.n	800f900 <_dtoa_r+0xb78>
 800f878:	4651      	mov	r1, sl
 800f87a:	2300      	movs	r3, #0
 800f87c:	220a      	movs	r2, #10
 800f87e:	4620      	mov	r0, r4
 800f880:	f000 f8de 	bl	800fa40 <__multadd>
 800f884:	45b8      	cmp	r8, r7
 800f886:	4682      	mov	sl, r0
 800f888:	f04f 0300 	mov.w	r3, #0
 800f88c:	f04f 020a 	mov.w	r2, #10
 800f890:	4641      	mov	r1, r8
 800f892:	4620      	mov	r0, r4
 800f894:	d107      	bne.n	800f8a6 <_dtoa_r+0xb1e>
 800f896:	f000 f8d3 	bl	800fa40 <__multadd>
 800f89a:	4680      	mov	r8, r0
 800f89c:	4607      	mov	r7, r0
 800f89e:	9b04      	ldr	r3, [sp, #16]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	9304      	str	r3, [sp, #16]
 800f8a4:	e775      	b.n	800f792 <_dtoa_r+0xa0a>
 800f8a6:	f000 f8cb 	bl	800fa40 <__multadd>
 800f8aa:	4639      	mov	r1, r7
 800f8ac:	4680      	mov	r8, r0
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	220a      	movs	r2, #10
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f000 f8c4 	bl	800fa40 <__multadd>
 800f8b8:	4607      	mov	r7, r0
 800f8ba:	e7f0      	b.n	800f89e <_dtoa_r+0xb16>
 800f8bc:	9b04      	ldr	r3, [sp, #16]
 800f8be:	9301      	str	r3, [sp, #4]
 800f8c0:	9d00      	ldr	r5, [sp, #0]
 800f8c2:	4631      	mov	r1, r6
 800f8c4:	4650      	mov	r0, sl
 800f8c6:	f7ff f9d5 	bl	800ec74 <quorem>
 800f8ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f8ce:	9b00      	ldr	r3, [sp, #0]
 800f8d0:	f805 9b01 	strb.w	r9, [r5], #1
 800f8d4:	1aea      	subs	r2, r5, r3
 800f8d6:	9b01      	ldr	r3, [sp, #4]
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	dd07      	ble.n	800f8ec <_dtoa_r+0xb64>
 800f8dc:	4651      	mov	r1, sl
 800f8de:	2300      	movs	r3, #0
 800f8e0:	220a      	movs	r2, #10
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 f8ac 	bl	800fa40 <__multadd>
 800f8e8:	4682      	mov	sl, r0
 800f8ea:	e7ea      	b.n	800f8c2 <_dtoa_r+0xb3a>
 800f8ec:	9b01      	ldr	r3, [sp, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	bfc8      	it	gt
 800f8f2:	461d      	movgt	r5, r3
 800f8f4:	9b00      	ldr	r3, [sp, #0]
 800f8f6:	bfd8      	it	le
 800f8f8:	2501      	movle	r5, #1
 800f8fa:	441d      	add	r5, r3
 800f8fc:	f04f 0800 	mov.w	r8, #0
 800f900:	4651      	mov	r1, sl
 800f902:	2201      	movs	r2, #1
 800f904:	4620      	mov	r0, r4
 800f906:	f000 fa49 	bl	800fd9c <__lshift>
 800f90a:	4631      	mov	r1, r6
 800f90c:	4682      	mov	sl, r0
 800f90e:	f000 fab1 	bl	800fe74 <__mcmp>
 800f912:	2800      	cmp	r0, #0
 800f914:	dc96      	bgt.n	800f844 <_dtoa_r+0xabc>
 800f916:	d102      	bne.n	800f91e <_dtoa_r+0xb96>
 800f918:	f019 0f01 	tst.w	r9, #1
 800f91c:	d192      	bne.n	800f844 <_dtoa_r+0xabc>
 800f91e:	462b      	mov	r3, r5
 800f920:	461d      	mov	r5, r3
 800f922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f926:	2a30      	cmp	r2, #48	; 0x30
 800f928:	d0fa      	beq.n	800f920 <_dtoa_r+0xb98>
 800f92a:	e6dd      	b.n	800f6e8 <_dtoa_r+0x960>
 800f92c:	9a00      	ldr	r2, [sp, #0]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d189      	bne.n	800f846 <_dtoa_r+0xabe>
 800f932:	f10b 0b01 	add.w	fp, fp, #1
 800f936:	2331      	movs	r3, #49	; 0x31
 800f938:	e796      	b.n	800f868 <_dtoa_r+0xae0>
 800f93a:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <_dtoa_r+0xbdc>)
 800f93c:	f7ff ba99 	b.w	800ee72 <_dtoa_r+0xea>
 800f940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f942:	2b00      	cmp	r3, #0
 800f944:	f47f aa6d 	bne.w	800ee22 <_dtoa_r+0x9a>
 800f948:	4b07      	ldr	r3, [pc, #28]	; (800f968 <_dtoa_r+0xbe0>)
 800f94a:	f7ff ba92 	b.w	800ee72 <_dtoa_r+0xea>
 800f94e:	9b01      	ldr	r3, [sp, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	dcb5      	bgt.n	800f8c0 <_dtoa_r+0xb38>
 800f954:	9b07      	ldr	r3, [sp, #28]
 800f956:	2b02      	cmp	r3, #2
 800f958:	f73f aeb1 	bgt.w	800f6be <_dtoa_r+0x936>
 800f95c:	e7b0      	b.n	800f8c0 <_dtoa_r+0xb38>
 800f95e:	bf00      	nop
 800f960:	08011eaf 	.word	0x08011eaf
 800f964:	08011e3e 	.word	0x08011e3e
 800f968:	08011e31 	.word	0x08011e31

0800f96c <malloc>:
 800f96c:	4b02      	ldr	r3, [pc, #8]	; (800f978 <malloc+0xc>)
 800f96e:	4601      	mov	r1, r0
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	f7fe bef5 	b.w	800e760 <_malloc_r>
 800f976:	bf00      	nop
 800f978:	20000094 	.word	0x20000094

0800f97c <_Balloc>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	69c6      	ldr	r6, [r0, #28]
 800f980:	4604      	mov	r4, r0
 800f982:	460d      	mov	r5, r1
 800f984:	b976      	cbnz	r6, 800f9a4 <_Balloc+0x28>
 800f986:	2010      	movs	r0, #16
 800f988:	f7ff fff0 	bl	800f96c <malloc>
 800f98c:	4602      	mov	r2, r0
 800f98e:	61e0      	str	r0, [r4, #28]
 800f990:	b920      	cbnz	r0, 800f99c <_Balloc+0x20>
 800f992:	4b18      	ldr	r3, [pc, #96]	; (800f9f4 <_Balloc+0x78>)
 800f994:	4818      	ldr	r0, [pc, #96]	; (800f9f8 <_Balloc+0x7c>)
 800f996:	216b      	movs	r1, #107	; 0x6b
 800f998:	f000 fb98 	bl	80100cc <__assert_func>
 800f99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9a0:	6006      	str	r6, [r0, #0]
 800f9a2:	60c6      	str	r6, [r0, #12]
 800f9a4:	69e6      	ldr	r6, [r4, #28]
 800f9a6:	68f3      	ldr	r3, [r6, #12]
 800f9a8:	b183      	cbz	r3, 800f9cc <_Balloc+0x50>
 800f9aa:	69e3      	ldr	r3, [r4, #28]
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f9b2:	b9b8      	cbnz	r0, 800f9e4 <_Balloc+0x68>
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	fa01 f605 	lsl.w	r6, r1, r5
 800f9ba:	1d72      	adds	r2, r6, #5
 800f9bc:	0092      	lsls	r2, r2, #2
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 fba2 	bl	8010108 <_calloc_r>
 800f9c4:	b160      	cbz	r0, 800f9e0 <_Balloc+0x64>
 800f9c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f9ca:	e00e      	b.n	800f9ea <_Balloc+0x6e>
 800f9cc:	2221      	movs	r2, #33	; 0x21
 800f9ce:	2104      	movs	r1, #4
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f000 fb99 	bl	8010108 <_calloc_r>
 800f9d6:	69e3      	ldr	r3, [r4, #28]
 800f9d8:	60f0      	str	r0, [r6, #12]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1e4      	bne.n	800f9aa <_Balloc+0x2e>
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	bd70      	pop	{r4, r5, r6, pc}
 800f9e4:	6802      	ldr	r2, [r0, #0]
 800f9e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f9f0:	e7f7      	b.n	800f9e2 <_Balloc+0x66>
 800f9f2:	bf00      	nop
 800f9f4:	08011e40 	.word	0x08011e40
 800f9f8:	08011ec0 	.word	0x08011ec0

0800f9fc <_Bfree>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	69c6      	ldr	r6, [r0, #28]
 800fa00:	4605      	mov	r5, r0
 800fa02:	460c      	mov	r4, r1
 800fa04:	b976      	cbnz	r6, 800fa24 <_Bfree+0x28>
 800fa06:	2010      	movs	r0, #16
 800fa08:	f7ff ffb0 	bl	800f96c <malloc>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	61e8      	str	r0, [r5, #28]
 800fa10:	b920      	cbnz	r0, 800fa1c <_Bfree+0x20>
 800fa12:	4b09      	ldr	r3, [pc, #36]	; (800fa38 <_Bfree+0x3c>)
 800fa14:	4809      	ldr	r0, [pc, #36]	; (800fa3c <_Bfree+0x40>)
 800fa16:	218f      	movs	r1, #143	; 0x8f
 800fa18:	f000 fb58 	bl	80100cc <__assert_func>
 800fa1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa20:	6006      	str	r6, [r0, #0]
 800fa22:	60c6      	str	r6, [r0, #12]
 800fa24:	b13c      	cbz	r4, 800fa36 <_Bfree+0x3a>
 800fa26:	69eb      	ldr	r3, [r5, #28]
 800fa28:	6862      	ldr	r2, [r4, #4]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa30:	6021      	str	r1, [r4, #0]
 800fa32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa36:	bd70      	pop	{r4, r5, r6, pc}
 800fa38:	08011e40 	.word	0x08011e40
 800fa3c:	08011ec0 	.word	0x08011ec0

0800fa40 <__multadd>:
 800fa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa44:	690d      	ldr	r5, [r1, #16]
 800fa46:	4607      	mov	r7, r0
 800fa48:	460c      	mov	r4, r1
 800fa4a:	461e      	mov	r6, r3
 800fa4c:	f101 0c14 	add.w	ip, r1, #20
 800fa50:	2000      	movs	r0, #0
 800fa52:	f8dc 3000 	ldr.w	r3, [ip]
 800fa56:	b299      	uxth	r1, r3
 800fa58:	fb02 6101 	mla	r1, r2, r1, r6
 800fa5c:	0c1e      	lsrs	r6, r3, #16
 800fa5e:	0c0b      	lsrs	r3, r1, #16
 800fa60:	fb02 3306 	mla	r3, r2, r6, r3
 800fa64:	b289      	uxth	r1, r1
 800fa66:	3001      	adds	r0, #1
 800fa68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa6c:	4285      	cmp	r5, r0
 800fa6e:	f84c 1b04 	str.w	r1, [ip], #4
 800fa72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fa76:	dcec      	bgt.n	800fa52 <__multadd+0x12>
 800fa78:	b30e      	cbz	r6, 800fabe <__multadd+0x7e>
 800fa7a:	68a3      	ldr	r3, [r4, #8]
 800fa7c:	42ab      	cmp	r3, r5
 800fa7e:	dc19      	bgt.n	800fab4 <__multadd+0x74>
 800fa80:	6861      	ldr	r1, [r4, #4]
 800fa82:	4638      	mov	r0, r7
 800fa84:	3101      	adds	r1, #1
 800fa86:	f7ff ff79 	bl	800f97c <_Balloc>
 800fa8a:	4680      	mov	r8, r0
 800fa8c:	b928      	cbnz	r0, 800fa9a <__multadd+0x5a>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	4b0c      	ldr	r3, [pc, #48]	; (800fac4 <__multadd+0x84>)
 800fa92:	480d      	ldr	r0, [pc, #52]	; (800fac8 <__multadd+0x88>)
 800fa94:	21ba      	movs	r1, #186	; 0xba
 800fa96:	f000 fb19 	bl	80100cc <__assert_func>
 800fa9a:	6922      	ldr	r2, [r4, #16]
 800fa9c:	3202      	adds	r2, #2
 800fa9e:	f104 010c 	add.w	r1, r4, #12
 800faa2:	0092      	lsls	r2, r2, #2
 800faa4:	300c      	adds	r0, #12
 800faa6:	f000 fb03 	bl	80100b0 <memcpy>
 800faaa:	4621      	mov	r1, r4
 800faac:	4638      	mov	r0, r7
 800faae:	f7ff ffa5 	bl	800f9fc <_Bfree>
 800fab2:	4644      	mov	r4, r8
 800fab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fab8:	3501      	adds	r5, #1
 800faba:	615e      	str	r6, [r3, #20]
 800fabc:	6125      	str	r5, [r4, #16]
 800fabe:	4620      	mov	r0, r4
 800fac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac4:	08011eaf 	.word	0x08011eaf
 800fac8:	08011ec0 	.word	0x08011ec0

0800facc <__hi0bits>:
 800facc:	0c03      	lsrs	r3, r0, #16
 800face:	041b      	lsls	r3, r3, #16
 800fad0:	b9d3      	cbnz	r3, 800fb08 <__hi0bits+0x3c>
 800fad2:	0400      	lsls	r0, r0, #16
 800fad4:	2310      	movs	r3, #16
 800fad6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fada:	bf04      	itt	eq
 800fadc:	0200      	lsleq	r0, r0, #8
 800fade:	3308      	addeq	r3, #8
 800fae0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fae4:	bf04      	itt	eq
 800fae6:	0100      	lsleq	r0, r0, #4
 800fae8:	3304      	addeq	r3, #4
 800faea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800faee:	bf04      	itt	eq
 800faf0:	0080      	lsleq	r0, r0, #2
 800faf2:	3302      	addeq	r3, #2
 800faf4:	2800      	cmp	r0, #0
 800faf6:	db05      	blt.n	800fb04 <__hi0bits+0x38>
 800faf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fafc:	f103 0301 	add.w	r3, r3, #1
 800fb00:	bf08      	it	eq
 800fb02:	2320      	moveq	r3, #32
 800fb04:	4618      	mov	r0, r3
 800fb06:	4770      	bx	lr
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e7e4      	b.n	800fad6 <__hi0bits+0xa>

0800fb0c <__lo0bits>:
 800fb0c:	6803      	ldr	r3, [r0, #0]
 800fb0e:	f013 0207 	ands.w	r2, r3, #7
 800fb12:	d00c      	beq.n	800fb2e <__lo0bits+0x22>
 800fb14:	07d9      	lsls	r1, r3, #31
 800fb16:	d422      	bmi.n	800fb5e <__lo0bits+0x52>
 800fb18:	079a      	lsls	r2, r3, #30
 800fb1a:	bf49      	itett	mi
 800fb1c:	085b      	lsrmi	r3, r3, #1
 800fb1e:	089b      	lsrpl	r3, r3, #2
 800fb20:	6003      	strmi	r3, [r0, #0]
 800fb22:	2201      	movmi	r2, #1
 800fb24:	bf5c      	itt	pl
 800fb26:	6003      	strpl	r3, [r0, #0]
 800fb28:	2202      	movpl	r2, #2
 800fb2a:	4610      	mov	r0, r2
 800fb2c:	4770      	bx	lr
 800fb2e:	b299      	uxth	r1, r3
 800fb30:	b909      	cbnz	r1, 800fb36 <__lo0bits+0x2a>
 800fb32:	0c1b      	lsrs	r3, r3, #16
 800fb34:	2210      	movs	r2, #16
 800fb36:	b2d9      	uxtb	r1, r3
 800fb38:	b909      	cbnz	r1, 800fb3e <__lo0bits+0x32>
 800fb3a:	3208      	adds	r2, #8
 800fb3c:	0a1b      	lsrs	r3, r3, #8
 800fb3e:	0719      	lsls	r1, r3, #28
 800fb40:	bf04      	itt	eq
 800fb42:	091b      	lsreq	r3, r3, #4
 800fb44:	3204      	addeq	r2, #4
 800fb46:	0799      	lsls	r1, r3, #30
 800fb48:	bf04      	itt	eq
 800fb4a:	089b      	lsreq	r3, r3, #2
 800fb4c:	3202      	addeq	r2, #2
 800fb4e:	07d9      	lsls	r1, r3, #31
 800fb50:	d403      	bmi.n	800fb5a <__lo0bits+0x4e>
 800fb52:	085b      	lsrs	r3, r3, #1
 800fb54:	f102 0201 	add.w	r2, r2, #1
 800fb58:	d003      	beq.n	800fb62 <__lo0bits+0x56>
 800fb5a:	6003      	str	r3, [r0, #0]
 800fb5c:	e7e5      	b.n	800fb2a <__lo0bits+0x1e>
 800fb5e:	2200      	movs	r2, #0
 800fb60:	e7e3      	b.n	800fb2a <__lo0bits+0x1e>
 800fb62:	2220      	movs	r2, #32
 800fb64:	e7e1      	b.n	800fb2a <__lo0bits+0x1e>
	...

0800fb68 <__i2b>:
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	2101      	movs	r1, #1
 800fb6e:	f7ff ff05 	bl	800f97c <_Balloc>
 800fb72:	4602      	mov	r2, r0
 800fb74:	b928      	cbnz	r0, 800fb82 <__i2b+0x1a>
 800fb76:	4b05      	ldr	r3, [pc, #20]	; (800fb8c <__i2b+0x24>)
 800fb78:	4805      	ldr	r0, [pc, #20]	; (800fb90 <__i2b+0x28>)
 800fb7a:	f240 1145 	movw	r1, #325	; 0x145
 800fb7e:	f000 faa5 	bl	80100cc <__assert_func>
 800fb82:	2301      	movs	r3, #1
 800fb84:	6144      	str	r4, [r0, #20]
 800fb86:	6103      	str	r3, [r0, #16]
 800fb88:	bd10      	pop	{r4, pc}
 800fb8a:	bf00      	nop
 800fb8c:	08011eaf 	.word	0x08011eaf
 800fb90:	08011ec0 	.word	0x08011ec0

0800fb94 <__multiply>:
 800fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb98:	4691      	mov	r9, r2
 800fb9a:	690a      	ldr	r2, [r1, #16]
 800fb9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	bfb8      	it	lt
 800fba4:	460b      	movlt	r3, r1
 800fba6:	460c      	mov	r4, r1
 800fba8:	bfbc      	itt	lt
 800fbaa:	464c      	movlt	r4, r9
 800fbac:	4699      	movlt	r9, r3
 800fbae:	6927      	ldr	r7, [r4, #16]
 800fbb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fbb4:	68a3      	ldr	r3, [r4, #8]
 800fbb6:	6861      	ldr	r1, [r4, #4]
 800fbb8:	eb07 060a 	add.w	r6, r7, sl
 800fbbc:	42b3      	cmp	r3, r6
 800fbbe:	b085      	sub	sp, #20
 800fbc0:	bfb8      	it	lt
 800fbc2:	3101      	addlt	r1, #1
 800fbc4:	f7ff feda 	bl	800f97c <_Balloc>
 800fbc8:	b930      	cbnz	r0, 800fbd8 <__multiply+0x44>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	4b44      	ldr	r3, [pc, #272]	; (800fce0 <__multiply+0x14c>)
 800fbce:	4845      	ldr	r0, [pc, #276]	; (800fce4 <__multiply+0x150>)
 800fbd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fbd4:	f000 fa7a 	bl	80100cc <__assert_func>
 800fbd8:	f100 0514 	add.w	r5, r0, #20
 800fbdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fbe0:	462b      	mov	r3, r5
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	4543      	cmp	r3, r8
 800fbe6:	d321      	bcc.n	800fc2c <__multiply+0x98>
 800fbe8:	f104 0314 	add.w	r3, r4, #20
 800fbec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fbf0:	f109 0314 	add.w	r3, r9, #20
 800fbf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fbf8:	9202      	str	r2, [sp, #8]
 800fbfa:	1b3a      	subs	r2, r7, r4
 800fbfc:	3a15      	subs	r2, #21
 800fbfe:	f022 0203 	bic.w	r2, r2, #3
 800fc02:	3204      	adds	r2, #4
 800fc04:	f104 0115 	add.w	r1, r4, #21
 800fc08:	428f      	cmp	r7, r1
 800fc0a:	bf38      	it	cc
 800fc0c:	2204      	movcc	r2, #4
 800fc0e:	9201      	str	r2, [sp, #4]
 800fc10:	9a02      	ldr	r2, [sp, #8]
 800fc12:	9303      	str	r3, [sp, #12]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d80c      	bhi.n	800fc32 <__multiply+0x9e>
 800fc18:	2e00      	cmp	r6, #0
 800fc1a:	dd03      	ble.n	800fc24 <__multiply+0x90>
 800fc1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d05b      	beq.n	800fcdc <__multiply+0x148>
 800fc24:	6106      	str	r6, [r0, #16]
 800fc26:	b005      	add	sp, #20
 800fc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2c:	f843 2b04 	str.w	r2, [r3], #4
 800fc30:	e7d8      	b.n	800fbe4 <__multiply+0x50>
 800fc32:	f8b3 a000 	ldrh.w	sl, [r3]
 800fc36:	f1ba 0f00 	cmp.w	sl, #0
 800fc3a:	d024      	beq.n	800fc86 <__multiply+0xf2>
 800fc3c:	f104 0e14 	add.w	lr, r4, #20
 800fc40:	46a9      	mov	r9, r5
 800fc42:	f04f 0c00 	mov.w	ip, #0
 800fc46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fc4a:	f8d9 1000 	ldr.w	r1, [r9]
 800fc4e:	fa1f fb82 	uxth.w	fp, r2
 800fc52:	b289      	uxth	r1, r1
 800fc54:	fb0a 110b 	mla	r1, sl, fp, r1
 800fc58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fc5c:	f8d9 2000 	ldr.w	r2, [r9]
 800fc60:	4461      	add	r1, ip
 800fc62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc66:	fb0a c20b 	mla	r2, sl, fp, ip
 800fc6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fc6e:	b289      	uxth	r1, r1
 800fc70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc74:	4577      	cmp	r7, lr
 800fc76:	f849 1b04 	str.w	r1, [r9], #4
 800fc7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc7e:	d8e2      	bhi.n	800fc46 <__multiply+0xb2>
 800fc80:	9a01      	ldr	r2, [sp, #4]
 800fc82:	f845 c002 	str.w	ip, [r5, r2]
 800fc86:	9a03      	ldr	r2, [sp, #12]
 800fc88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	f1b9 0f00 	cmp.w	r9, #0
 800fc92:	d021      	beq.n	800fcd8 <__multiply+0x144>
 800fc94:	6829      	ldr	r1, [r5, #0]
 800fc96:	f104 0c14 	add.w	ip, r4, #20
 800fc9a:	46ae      	mov	lr, r5
 800fc9c:	f04f 0a00 	mov.w	sl, #0
 800fca0:	f8bc b000 	ldrh.w	fp, [ip]
 800fca4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fca8:	fb09 220b 	mla	r2, r9, fp, r2
 800fcac:	4452      	add	r2, sl
 800fcae:	b289      	uxth	r1, r1
 800fcb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fcb4:	f84e 1b04 	str.w	r1, [lr], #4
 800fcb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fcbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fcc0:	f8be 1000 	ldrh.w	r1, [lr]
 800fcc4:	fb09 110a 	mla	r1, r9, sl, r1
 800fcc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fccc:	4567      	cmp	r7, ip
 800fcce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fcd2:	d8e5      	bhi.n	800fca0 <__multiply+0x10c>
 800fcd4:	9a01      	ldr	r2, [sp, #4]
 800fcd6:	50a9      	str	r1, [r5, r2]
 800fcd8:	3504      	adds	r5, #4
 800fcda:	e799      	b.n	800fc10 <__multiply+0x7c>
 800fcdc:	3e01      	subs	r6, #1
 800fcde:	e79b      	b.n	800fc18 <__multiply+0x84>
 800fce0:	08011eaf 	.word	0x08011eaf
 800fce4:	08011ec0 	.word	0x08011ec0

0800fce8 <__pow5mult>:
 800fce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcec:	4615      	mov	r5, r2
 800fcee:	f012 0203 	ands.w	r2, r2, #3
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	460f      	mov	r7, r1
 800fcf6:	d007      	beq.n	800fd08 <__pow5mult+0x20>
 800fcf8:	4c25      	ldr	r4, [pc, #148]	; (800fd90 <__pow5mult+0xa8>)
 800fcfa:	3a01      	subs	r2, #1
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd02:	f7ff fe9d 	bl	800fa40 <__multadd>
 800fd06:	4607      	mov	r7, r0
 800fd08:	10ad      	asrs	r5, r5, #2
 800fd0a:	d03d      	beq.n	800fd88 <__pow5mult+0xa0>
 800fd0c:	69f4      	ldr	r4, [r6, #28]
 800fd0e:	b97c      	cbnz	r4, 800fd30 <__pow5mult+0x48>
 800fd10:	2010      	movs	r0, #16
 800fd12:	f7ff fe2b 	bl	800f96c <malloc>
 800fd16:	4602      	mov	r2, r0
 800fd18:	61f0      	str	r0, [r6, #28]
 800fd1a:	b928      	cbnz	r0, 800fd28 <__pow5mult+0x40>
 800fd1c:	4b1d      	ldr	r3, [pc, #116]	; (800fd94 <__pow5mult+0xac>)
 800fd1e:	481e      	ldr	r0, [pc, #120]	; (800fd98 <__pow5mult+0xb0>)
 800fd20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fd24:	f000 f9d2 	bl	80100cc <__assert_func>
 800fd28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd2c:	6004      	str	r4, [r0, #0]
 800fd2e:	60c4      	str	r4, [r0, #12]
 800fd30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fd34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd38:	b94c      	cbnz	r4, 800fd4e <__pow5mult+0x66>
 800fd3a:	f240 2171 	movw	r1, #625	; 0x271
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f7ff ff12 	bl	800fb68 <__i2b>
 800fd44:	2300      	movs	r3, #0
 800fd46:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	6003      	str	r3, [r0, #0]
 800fd4e:	f04f 0900 	mov.w	r9, #0
 800fd52:	07eb      	lsls	r3, r5, #31
 800fd54:	d50a      	bpl.n	800fd6c <__pow5mult+0x84>
 800fd56:	4639      	mov	r1, r7
 800fd58:	4622      	mov	r2, r4
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	f7ff ff1a 	bl	800fb94 <__multiply>
 800fd60:	4639      	mov	r1, r7
 800fd62:	4680      	mov	r8, r0
 800fd64:	4630      	mov	r0, r6
 800fd66:	f7ff fe49 	bl	800f9fc <_Bfree>
 800fd6a:	4647      	mov	r7, r8
 800fd6c:	106d      	asrs	r5, r5, #1
 800fd6e:	d00b      	beq.n	800fd88 <__pow5mult+0xa0>
 800fd70:	6820      	ldr	r0, [r4, #0]
 800fd72:	b938      	cbnz	r0, 800fd84 <__pow5mult+0x9c>
 800fd74:	4622      	mov	r2, r4
 800fd76:	4621      	mov	r1, r4
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7ff ff0b 	bl	800fb94 <__multiply>
 800fd7e:	6020      	str	r0, [r4, #0]
 800fd80:	f8c0 9000 	str.w	r9, [r0]
 800fd84:	4604      	mov	r4, r0
 800fd86:	e7e4      	b.n	800fd52 <__pow5mult+0x6a>
 800fd88:	4638      	mov	r0, r7
 800fd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8e:	bf00      	nop
 800fd90:	08012010 	.word	0x08012010
 800fd94:	08011e40 	.word	0x08011e40
 800fd98:	08011ec0 	.word	0x08011ec0

0800fd9c <__lshift>:
 800fd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fda0:	460c      	mov	r4, r1
 800fda2:	6849      	ldr	r1, [r1, #4]
 800fda4:	6923      	ldr	r3, [r4, #16]
 800fda6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdaa:	68a3      	ldr	r3, [r4, #8]
 800fdac:	4607      	mov	r7, r0
 800fdae:	4691      	mov	r9, r2
 800fdb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdb4:	f108 0601 	add.w	r6, r8, #1
 800fdb8:	42b3      	cmp	r3, r6
 800fdba:	db0b      	blt.n	800fdd4 <__lshift+0x38>
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	f7ff fddd 	bl	800f97c <_Balloc>
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	b948      	cbnz	r0, 800fdda <__lshift+0x3e>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	4b28      	ldr	r3, [pc, #160]	; (800fe6c <__lshift+0xd0>)
 800fdca:	4829      	ldr	r0, [pc, #164]	; (800fe70 <__lshift+0xd4>)
 800fdcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fdd0:	f000 f97c 	bl	80100cc <__assert_func>
 800fdd4:	3101      	adds	r1, #1
 800fdd6:	005b      	lsls	r3, r3, #1
 800fdd8:	e7ee      	b.n	800fdb8 <__lshift+0x1c>
 800fdda:	2300      	movs	r3, #0
 800fddc:	f100 0114 	add.w	r1, r0, #20
 800fde0:	f100 0210 	add.w	r2, r0, #16
 800fde4:	4618      	mov	r0, r3
 800fde6:	4553      	cmp	r3, sl
 800fde8:	db33      	blt.n	800fe52 <__lshift+0xb6>
 800fdea:	6920      	ldr	r0, [r4, #16]
 800fdec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fdf0:	f104 0314 	add.w	r3, r4, #20
 800fdf4:	f019 091f 	ands.w	r9, r9, #31
 800fdf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fe00:	d02b      	beq.n	800fe5a <__lshift+0xbe>
 800fe02:	f1c9 0e20 	rsb	lr, r9, #32
 800fe06:	468a      	mov	sl, r1
 800fe08:	2200      	movs	r2, #0
 800fe0a:	6818      	ldr	r0, [r3, #0]
 800fe0c:	fa00 f009 	lsl.w	r0, r0, r9
 800fe10:	4310      	orrs	r0, r2
 800fe12:	f84a 0b04 	str.w	r0, [sl], #4
 800fe16:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe1a:	459c      	cmp	ip, r3
 800fe1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fe20:	d8f3      	bhi.n	800fe0a <__lshift+0x6e>
 800fe22:	ebac 0304 	sub.w	r3, ip, r4
 800fe26:	3b15      	subs	r3, #21
 800fe28:	f023 0303 	bic.w	r3, r3, #3
 800fe2c:	3304      	adds	r3, #4
 800fe2e:	f104 0015 	add.w	r0, r4, #21
 800fe32:	4584      	cmp	ip, r0
 800fe34:	bf38      	it	cc
 800fe36:	2304      	movcc	r3, #4
 800fe38:	50ca      	str	r2, [r1, r3]
 800fe3a:	b10a      	cbz	r2, 800fe40 <__lshift+0xa4>
 800fe3c:	f108 0602 	add.w	r6, r8, #2
 800fe40:	3e01      	subs	r6, #1
 800fe42:	4638      	mov	r0, r7
 800fe44:	612e      	str	r6, [r5, #16]
 800fe46:	4621      	mov	r1, r4
 800fe48:	f7ff fdd8 	bl	800f9fc <_Bfree>
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe52:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe56:	3301      	adds	r3, #1
 800fe58:	e7c5      	b.n	800fde6 <__lshift+0x4a>
 800fe5a:	3904      	subs	r1, #4
 800fe5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe60:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe64:	459c      	cmp	ip, r3
 800fe66:	d8f9      	bhi.n	800fe5c <__lshift+0xc0>
 800fe68:	e7ea      	b.n	800fe40 <__lshift+0xa4>
 800fe6a:	bf00      	nop
 800fe6c:	08011eaf 	.word	0x08011eaf
 800fe70:	08011ec0 	.word	0x08011ec0

0800fe74 <__mcmp>:
 800fe74:	b530      	push	{r4, r5, lr}
 800fe76:	6902      	ldr	r2, [r0, #16]
 800fe78:	690c      	ldr	r4, [r1, #16]
 800fe7a:	1b12      	subs	r2, r2, r4
 800fe7c:	d10e      	bne.n	800fe9c <__mcmp+0x28>
 800fe7e:	f100 0314 	add.w	r3, r0, #20
 800fe82:	3114      	adds	r1, #20
 800fe84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fe88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fe8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fe90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe94:	42a5      	cmp	r5, r4
 800fe96:	d003      	beq.n	800fea0 <__mcmp+0x2c>
 800fe98:	d305      	bcc.n	800fea6 <__mcmp+0x32>
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	4610      	mov	r0, r2
 800fe9e:	bd30      	pop	{r4, r5, pc}
 800fea0:	4283      	cmp	r3, r0
 800fea2:	d3f3      	bcc.n	800fe8c <__mcmp+0x18>
 800fea4:	e7fa      	b.n	800fe9c <__mcmp+0x28>
 800fea6:	f04f 32ff 	mov.w	r2, #4294967295
 800feaa:	e7f7      	b.n	800fe9c <__mcmp+0x28>

0800feac <__mdiff>:
 800feac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb0:	460c      	mov	r4, r1
 800feb2:	4606      	mov	r6, r0
 800feb4:	4611      	mov	r1, r2
 800feb6:	4620      	mov	r0, r4
 800feb8:	4690      	mov	r8, r2
 800feba:	f7ff ffdb 	bl	800fe74 <__mcmp>
 800febe:	1e05      	subs	r5, r0, #0
 800fec0:	d110      	bne.n	800fee4 <__mdiff+0x38>
 800fec2:	4629      	mov	r1, r5
 800fec4:	4630      	mov	r0, r6
 800fec6:	f7ff fd59 	bl	800f97c <_Balloc>
 800feca:	b930      	cbnz	r0, 800feda <__mdiff+0x2e>
 800fecc:	4b3a      	ldr	r3, [pc, #232]	; (800ffb8 <__mdiff+0x10c>)
 800fece:	4602      	mov	r2, r0
 800fed0:	f240 2137 	movw	r1, #567	; 0x237
 800fed4:	4839      	ldr	r0, [pc, #228]	; (800ffbc <__mdiff+0x110>)
 800fed6:	f000 f8f9 	bl	80100cc <__assert_func>
 800feda:	2301      	movs	r3, #1
 800fedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee4:	bfa4      	itt	ge
 800fee6:	4643      	movge	r3, r8
 800fee8:	46a0      	movge	r8, r4
 800feea:	4630      	mov	r0, r6
 800feec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fef0:	bfa6      	itte	ge
 800fef2:	461c      	movge	r4, r3
 800fef4:	2500      	movge	r5, #0
 800fef6:	2501      	movlt	r5, #1
 800fef8:	f7ff fd40 	bl	800f97c <_Balloc>
 800fefc:	b920      	cbnz	r0, 800ff08 <__mdiff+0x5c>
 800fefe:	4b2e      	ldr	r3, [pc, #184]	; (800ffb8 <__mdiff+0x10c>)
 800ff00:	4602      	mov	r2, r0
 800ff02:	f240 2145 	movw	r1, #581	; 0x245
 800ff06:	e7e5      	b.n	800fed4 <__mdiff+0x28>
 800ff08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff0c:	6926      	ldr	r6, [r4, #16]
 800ff0e:	60c5      	str	r5, [r0, #12]
 800ff10:	f104 0914 	add.w	r9, r4, #20
 800ff14:	f108 0514 	add.w	r5, r8, #20
 800ff18:	f100 0e14 	add.w	lr, r0, #20
 800ff1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ff20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ff24:	f108 0210 	add.w	r2, r8, #16
 800ff28:	46f2      	mov	sl, lr
 800ff2a:	2100      	movs	r1, #0
 800ff2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ff34:	fa11 f88b 	uxtah	r8, r1, fp
 800ff38:	b299      	uxth	r1, r3
 800ff3a:	0c1b      	lsrs	r3, r3, #16
 800ff3c:	eba8 0801 	sub.w	r8, r8, r1
 800ff40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ff44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ff48:	fa1f f888 	uxth.w	r8, r8
 800ff4c:	1419      	asrs	r1, r3, #16
 800ff4e:	454e      	cmp	r6, r9
 800ff50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ff54:	f84a 3b04 	str.w	r3, [sl], #4
 800ff58:	d8e8      	bhi.n	800ff2c <__mdiff+0x80>
 800ff5a:	1b33      	subs	r3, r6, r4
 800ff5c:	3b15      	subs	r3, #21
 800ff5e:	f023 0303 	bic.w	r3, r3, #3
 800ff62:	3304      	adds	r3, #4
 800ff64:	3415      	adds	r4, #21
 800ff66:	42a6      	cmp	r6, r4
 800ff68:	bf38      	it	cc
 800ff6a:	2304      	movcc	r3, #4
 800ff6c:	441d      	add	r5, r3
 800ff6e:	4473      	add	r3, lr
 800ff70:	469e      	mov	lr, r3
 800ff72:	462e      	mov	r6, r5
 800ff74:	4566      	cmp	r6, ip
 800ff76:	d30e      	bcc.n	800ff96 <__mdiff+0xea>
 800ff78:	f10c 0203 	add.w	r2, ip, #3
 800ff7c:	1b52      	subs	r2, r2, r5
 800ff7e:	f022 0203 	bic.w	r2, r2, #3
 800ff82:	3d03      	subs	r5, #3
 800ff84:	45ac      	cmp	ip, r5
 800ff86:	bf38      	it	cc
 800ff88:	2200      	movcc	r2, #0
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ff90:	b17a      	cbz	r2, 800ffb2 <__mdiff+0x106>
 800ff92:	6107      	str	r7, [r0, #16]
 800ff94:	e7a4      	b.n	800fee0 <__mdiff+0x34>
 800ff96:	f856 8b04 	ldr.w	r8, [r6], #4
 800ff9a:	fa11 f288 	uxtah	r2, r1, r8
 800ff9e:	1414      	asrs	r4, r2, #16
 800ffa0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ffa4:	b292      	uxth	r2, r2
 800ffa6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ffaa:	f84e 2b04 	str.w	r2, [lr], #4
 800ffae:	1421      	asrs	r1, r4, #16
 800ffb0:	e7e0      	b.n	800ff74 <__mdiff+0xc8>
 800ffb2:	3f01      	subs	r7, #1
 800ffb4:	e7ea      	b.n	800ff8c <__mdiff+0xe0>
 800ffb6:	bf00      	nop
 800ffb8:	08011eaf 	.word	0x08011eaf
 800ffbc:	08011ec0 	.word	0x08011ec0

0800ffc0 <__d2b>:
 800ffc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffc4:	460f      	mov	r7, r1
 800ffc6:	2101      	movs	r1, #1
 800ffc8:	ec59 8b10 	vmov	r8, r9, d0
 800ffcc:	4616      	mov	r6, r2
 800ffce:	f7ff fcd5 	bl	800f97c <_Balloc>
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	b930      	cbnz	r0, 800ffe4 <__d2b+0x24>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	4b24      	ldr	r3, [pc, #144]	; (801006c <__d2b+0xac>)
 800ffda:	4825      	ldr	r0, [pc, #148]	; (8010070 <__d2b+0xb0>)
 800ffdc:	f240 310f 	movw	r1, #783	; 0x30f
 800ffe0:	f000 f874 	bl	80100cc <__assert_func>
 800ffe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ffe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffec:	bb2d      	cbnz	r5, 801003a <__d2b+0x7a>
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	f1b8 0300 	subs.w	r3, r8, #0
 800fff4:	d026      	beq.n	8010044 <__d2b+0x84>
 800fff6:	4668      	mov	r0, sp
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	f7ff fd87 	bl	800fb0c <__lo0bits>
 800fffe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010002:	b1e8      	cbz	r0, 8010040 <__d2b+0x80>
 8010004:	f1c0 0320 	rsb	r3, r0, #32
 8010008:	fa02 f303 	lsl.w	r3, r2, r3
 801000c:	430b      	orrs	r3, r1
 801000e:	40c2      	lsrs	r2, r0
 8010010:	6163      	str	r3, [r4, #20]
 8010012:	9201      	str	r2, [sp, #4]
 8010014:	9b01      	ldr	r3, [sp, #4]
 8010016:	61a3      	str	r3, [r4, #24]
 8010018:	2b00      	cmp	r3, #0
 801001a:	bf14      	ite	ne
 801001c:	2202      	movne	r2, #2
 801001e:	2201      	moveq	r2, #1
 8010020:	6122      	str	r2, [r4, #16]
 8010022:	b1bd      	cbz	r5, 8010054 <__d2b+0x94>
 8010024:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010028:	4405      	add	r5, r0
 801002a:	603d      	str	r5, [r7, #0]
 801002c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010030:	6030      	str	r0, [r6, #0]
 8010032:	4620      	mov	r0, r4
 8010034:	b003      	add	sp, #12
 8010036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801003a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801003e:	e7d6      	b.n	800ffee <__d2b+0x2e>
 8010040:	6161      	str	r1, [r4, #20]
 8010042:	e7e7      	b.n	8010014 <__d2b+0x54>
 8010044:	a801      	add	r0, sp, #4
 8010046:	f7ff fd61 	bl	800fb0c <__lo0bits>
 801004a:	9b01      	ldr	r3, [sp, #4]
 801004c:	6163      	str	r3, [r4, #20]
 801004e:	3020      	adds	r0, #32
 8010050:	2201      	movs	r2, #1
 8010052:	e7e5      	b.n	8010020 <__d2b+0x60>
 8010054:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010058:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801005c:	6038      	str	r0, [r7, #0]
 801005e:	6918      	ldr	r0, [r3, #16]
 8010060:	f7ff fd34 	bl	800facc <__hi0bits>
 8010064:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010068:	e7e2      	b.n	8010030 <__d2b+0x70>
 801006a:	bf00      	nop
 801006c:	08011eaf 	.word	0x08011eaf
 8010070:	08011ec0 	.word	0x08011ec0

08010074 <_mprec_log10>:
 8010074:	2817      	cmp	r0, #23
 8010076:	b5d0      	push	{r4, r6, r7, lr}
 8010078:	4604      	mov	r4, r0
 801007a:	dc07      	bgt.n	801008c <_mprec_log10+0x18>
 801007c:	4b09      	ldr	r3, [pc, #36]	; (80100a4 <_mprec_log10+0x30>)
 801007e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8010082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010086:	ec41 0b10 	vmov	d0, r0, r1
 801008a:	bdd0      	pop	{r4, r6, r7, pc}
 801008c:	4906      	ldr	r1, [pc, #24]	; (80100a8 <_mprec_log10+0x34>)
 801008e:	4f07      	ldr	r7, [pc, #28]	; (80100ac <_mprec_log10+0x38>)
 8010090:	2000      	movs	r0, #0
 8010092:	2600      	movs	r6, #0
 8010094:	4632      	mov	r2, r6
 8010096:	463b      	mov	r3, r7
 8010098:	f7f0 face 	bl	8000638 <__aeabi_dmul>
 801009c:	3c01      	subs	r4, #1
 801009e:	d1f9      	bne.n	8010094 <_mprec_log10+0x20>
 80100a0:	e7f1      	b.n	8010086 <_mprec_log10+0x12>
 80100a2:	bf00      	nop
 80100a4:	08011f48 	.word	0x08011f48
 80100a8:	3ff00000 	.word	0x3ff00000
 80100ac:	40240000 	.word	0x40240000

080100b0 <memcpy>:
 80100b0:	440a      	add	r2, r1
 80100b2:	4291      	cmp	r1, r2
 80100b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80100b8:	d100      	bne.n	80100bc <memcpy+0xc>
 80100ba:	4770      	bx	lr
 80100bc:	b510      	push	{r4, lr}
 80100be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100c6:	4291      	cmp	r1, r2
 80100c8:	d1f9      	bne.n	80100be <memcpy+0xe>
 80100ca:	bd10      	pop	{r4, pc}

080100cc <__assert_func>:
 80100cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100ce:	4614      	mov	r4, r2
 80100d0:	461a      	mov	r2, r3
 80100d2:	4b09      	ldr	r3, [pc, #36]	; (80100f8 <__assert_func+0x2c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4605      	mov	r5, r0
 80100d8:	68d8      	ldr	r0, [r3, #12]
 80100da:	b14c      	cbz	r4, 80100f0 <__assert_func+0x24>
 80100dc:	4b07      	ldr	r3, [pc, #28]	; (80100fc <__assert_func+0x30>)
 80100de:	9100      	str	r1, [sp, #0]
 80100e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80100e4:	4906      	ldr	r1, [pc, #24]	; (8010100 <__assert_func+0x34>)
 80100e6:	462b      	mov	r3, r5
 80100e8:	f000 f824 	bl	8010134 <fiprintf>
 80100ec:	f000 f834 	bl	8010158 <abort>
 80100f0:	4b04      	ldr	r3, [pc, #16]	; (8010104 <__assert_func+0x38>)
 80100f2:	461c      	mov	r4, r3
 80100f4:	e7f3      	b.n	80100de <__assert_func+0x12>
 80100f6:	bf00      	nop
 80100f8:	20000094 	.word	0x20000094
 80100fc:	0801201c 	.word	0x0801201c
 8010100:	08012029 	.word	0x08012029
 8010104:	08012057 	.word	0x08012057

08010108 <_calloc_r>:
 8010108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801010a:	fba1 2402 	umull	r2, r4, r1, r2
 801010e:	b94c      	cbnz	r4, 8010124 <_calloc_r+0x1c>
 8010110:	4611      	mov	r1, r2
 8010112:	9201      	str	r2, [sp, #4]
 8010114:	f7fe fb24 	bl	800e760 <_malloc_r>
 8010118:	9a01      	ldr	r2, [sp, #4]
 801011a:	4605      	mov	r5, r0
 801011c:	b930      	cbnz	r0, 801012c <_calloc_r+0x24>
 801011e:	4628      	mov	r0, r5
 8010120:	b003      	add	sp, #12
 8010122:	bd30      	pop	{r4, r5, pc}
 8010124:	220c      	movs	r2, #12
 8010126:	6002      	str	r2, [r0, #0]
 8010128:	2500      	movs	r5, #0
 801012a:	e7f8      	b.n	801011e <_calloc_r+0x16>
 801012c:	4621      	mov	r1, r4
 801012e:	f7fe fa30 	bl	800e592 <memset>
 8010132:	e7f4      	b.n	801011e <_calloc_r+0x16>

08010134 <fiprintf>:
 8010134:	b40e      	push	{r1, r2, r3}
 8010136:	b503      	push	{r0, r1, lr}
 8010138:	4601      	mov	r1, r0
 801013a:	ab03      	add	r3, sp, #12
 801013c:	4805      	ldr	r0, [pc, #20]	; (8010154 <fiprintf+0x20>)
 801013e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010142:	6800      	ldr	r0, [r0, #0]
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	f000 f837 	bl	80101b8 <_vfiprintf_r>
 801014a:	b002      	add	sp, #8
 801014c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010150:	b003      	add	sp, #12
 8010152:	4770      	bx	lr
 8010154:	20000094 	.word	0x20000094

08010158 <abort>:
 8010158:	b508      	push	{r3, lr}
 801015a:	2006      	movs	r0, #6
 801015c:	f000 fb94 	bl	8010888 <raise>
 8010160:	2001      	movs	r0, #1
 8010162:	f7f4 ff3b 	bl	8004fdc <_exit>

08010166 <__sfputc_r>:
 8010166:	6893      	ldr	r3, [r2, #8]
 8010168:	3b01      	subs	r3, #1
 801016a:	2b00      	cmp	r3, #0
 801016c:	b410      	push	{r4}
 801016e:	6093      	str	r3, [r2, #8]
 8010170:	da08      	bge.n	8010184 <__sfputc_r+0x1e>
 8010172:	6994      	ldr	r4, [r2, #24]
 8010174:	42a3      	cmp	r3, r4
 8010176:	db01      	blt.n	801017c <__sfputc_r+0x16>
 8010178:	290a      	cmp	r1, #10
 801017a:	d103      	bne.n	8010184 <__sfputc_r+0x1e>
 801017c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010180:	f000 bac4 	b.w	801070c <__swbuf_r>
 8010184:	6813      	ldr	r3, [r2, #0]
 8010186:	1c58      	adds	r0, r3, #1
 8010188:	6010      	str	r0, [r2, #0]
 801018a:	7019      	strb	r1, [r3, #0]
 801018c:	4608      	mov	r0, r1
 801018e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010192:	4770      	bx	lr

08010194 <__sfputs_r>:
 8010194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010196:	4606      	mov	r6, r0
 8010198:	460f      	mov	r7, r1
 801019a:	4614      	mov	r4, r2
 801019c:	18d5      	adds	r5, r2, r3
 801019e:	42ac      	cmp	r4, r5
 80101a0:	d101      	bne.n	80101a6 <__sfputs_r+0x12>
 80101a2:	2000      	movs	r0, #0
 80101a4:	e007      	b.n	80101b6 <__sfputs_r+0x22>
 80101a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101aa:	463a      	mov	r2, r7
 80101ac:	4630      	mov	r0, r6
 80101ae:	f7ff ffda 	bl	8010166 <__sfputc_r>
 80101b2:	1c43      	adds	r3, r0, #1
 80101b4:	d1f3      	bne.n	801019e <__sfputs_r+0xa>
 80101b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101b8 <_vfiprintf_r>:
 80101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101bc:	460d      	mov	r5, r1
 80101be:	b09d      	sub	sp, #116	; 0x74
 80101c0:	4614      	mov	r4, r2
 80101c2:	4698      	mov	r8, r3
 80101c4:	4606      	mov	r6, r0
 80101c6:	b118      	cbz	r0, 80101d0 <_vfiprintf_r+0x18>
 80101c8:	6a03      	ldr	r3, [r0, #32]
 80101ca:	b90b      	cbnz	r3, 80101d0 <_vfiprintf_r+0x18>
 80101cc:	f7fe f968 	bl	800e4a0 <__sinit>
 80101d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101d2:	07d9      	lsls	r1, r3, #31
 80101d4:	d405      	bmi.n	80101e2 <_vfiprintf_r+0x2a>
 80101d6:	89ab      	ldrh	r3, [r5, #12]
 80101d8:	059a      	lsls	r2, r3, #22
 80101da:	d402      	bmi.n	80101e2 <_vfiprintf_r+0x2a>
 80101dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101de:	f7fe fa51 	bl	800e684 <__retarget_lock_acquire_recursive>
 80101e2:	89ab      	ldrh	r3, [r5, #12]
 80101e4:	071b      	lsls	r3, r3, #28
 80101e6:	d501      	bpl.n	80101ec <_vfiprintf_r+0x34>
 80101e8:	692b      	ldr	r3, [r5, #16]
 80101ea:	b99b      	cbnz	r3, 8010214 <_vfiprintf_r+0x5c>
 80101ec:	4629      	mov	r1, r5
 80101ee:	4630      	mov	r0, r6
 80101f0:	f000 faca 	bl	8010788 <__swsetup_r>
 80101f4:	b170      	cbz	r0, 8010214 <_vfiprintf_r+0x5c>
 80101f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101f8:	07dc      	lsls	r4, r3, #31
 80101fa:	d504      	bpl.n	8010206 <_vfiprintf_r+0x4e>
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010200:	b01d      	add	sp, #116	; 0x74
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010206:	89ab      	ldrh	r3, [r5, #12]
 8010208:	0598      	lsls	r0, r3, #22
 801020a:	d4f7      	bmi.n	80101fc <_vfiprintf_r+0x44>
 801020c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801020e:	f7fe fa3a 	bl	800e686 <__retarget_lock_release_recursive>
 8010212:	e7f3      	b.n	80101fc <_vfiprintf_r+0x44>
 8010214:	2300      	movs	r3, #0
 8010216:	9309      	str	r3, [sp, #36]	; 0x24
 8010218:	2320      	movs	r3, #32
 801021a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801021e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010222:	2330      	movs	r3, #48	; 0x30
 8010224:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80103d8 <_vfiprintf_r+0x220>
 8010228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801022c:	f04f 0901 	mov.w	r9, #1
 8010230:	4623      	mov	r3, r4
 8010232:	469a      	mov	sl, r3
 8010234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010238:	b10a      	cbz	r2, 801023e <_vfiprintf_r+0x86>
 801023a:	2a25      	cmp	r2, #37	; 0x25
 801023c:	d1f9      	bne.n	8010232 <_vfiprintf_r+0x7a>
 801023e:	ebba 0b04 	subs.w	fp, sl, r4
 8010242:	d00b      	beq.n	801025c <_vfiprintf_r+0xa4>
 8010244:	465b      	mov	r3, fp
 8010246:	4622      	mov	r2, r4
 8010248:	4629      	mov	r1, r5
 801024a:	4630      	mov	r0, r6
 801024c:	f7ff ffa2 	bl	8010194 <__sfputs_r>
 8010250:	3001      	adds	r0, #1
 8010252:	f000 80a9 	beq.w	80103a8 <_vfiprintf_r+0x1f0>
 8010256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010258:	445a      	add	r2, fp
 801025a:	9209      	str	r2, [sp, #36]	; 0x24
 801025c:	f89a 3000 	ldrb.w	r3, [sl]
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 80a1 	beq.w	80103a8 <_vfiprintf_r+0x1f0>
 8010266:	2300      	movs	r3, #0
 8010268:	f04f 32ff 	mov.w	r2, #4294967295
 801026c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010270:	f10a 0a01 	add.w	sl, sl, #1
 8010274:	9304      	str	r3, [sp, #16]
 8010276:	9307      	str	r3, [sp, #28]
 8010278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801027c:	931a      	str	r3, [sp, #104]	; 0x68
 801027e:	4654      	mov	r4, sl
 8010280:	2205      	movs	r2, #5
 8010282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010286:	4854      	ldr	r0, [pc, #336]	; (80103d8 <_vfiprintf_r+0x220>)
 8010288:	f7ef ffca 	bl	8000220 <memchr>
 801028c:	9a04      	ldr	r2, [sp, #16]
 801028e:	b9d8      	cbnz	r0, 80102c8 <_vfiprintf_r+0x110>
 8010290:	06d1      	lsls	r1, r2, #27
 8010292:	bf44      	itt	mi
 8010294:	2320      	movmi	r3, #32
 8010296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801029a:	0713      	lsls	r3, r2, #28
 801029c:	bf44      	itt	mi
 801029e:	232b      	movmi	r3, #43	; 0x2b
 80102a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102a4:	f89a 3000 	ldrb.w	r3, [sl]
 80102a8:	2b2a      	cmp	r3, #42	; 0x2a
 80102aa:	d015      	beq.n	80102d8 <_vfiprintf_r+0x120>
 80102ac:	9a07      	ldr	r2, [sp, #28]
 80102ae:	4654      	mov	r4, sl
 80102b0:	2000      	movs	r0, #0
 80102b2:	f04f 0c0a 	mov.w	ip, #10
 80102b6:	4621      	mov	r1, r4
 80102b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102bc:	3b30      	subs	r3, #48	; 0x30
 80102be:	2b09      	cmp	r3, #9
 80102c0:	d94d      	bls.n	801035e <_vfiprintf_r+0x1a6>
 80102c2:	b1b0      	cbz	r0, 80102f2 <_vfiprintf_r+0x13a>
 80102c4:	9207      	str	r2, [sp, #28]
 80102c6:	e014      	b.n	80102f2 <_vfiprintf_r+0x13a>
 80102c8:	eba0 0308 	sub.w	r3, r0, r8
 80102cc:	fa09 f303 	lsl.w	r3, r9, r3
 80102d0:	4313      	orrs	r3, r2
 80102d2:	9304      	str	r3, [sp, #16]
 80102d4:	46a2      	mov	sl, r4
 80102d6:	e7d2      	b.n	801027e <_vfiprintf_r+0xc6>
 80102d8:	9b03      	ldr	r3, [sp, #12]
 80102da:	1d19      	adds	r1, r3, #4
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	9103      	str	r1, [sp, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	bfbb      	ittet	lt
 80102e4:	425b      	neglt	r3, r3
 80102e6:	f042 0202 	orrlt.w	r2, r2, #2
 80102ea:	9307      	strge	r3, [sp, #28]
 80102ec:	9307      	strlt	r3, [sp, #28]
 80102ee:	bfb8      	it	lt
 80102f0:	9204      	strlt	r2, [sp, #16]
 80102f2:	7823      	ldrb	r3, [r4, #0]
 80102f4:	2b2e      	cmp	r3, #46	; 0x2e
 80102f6:	d10c      	bne.n	8010312 <_vfiprintf_r+0x15a>
 80102f8:	7863      	ldrb	r3, [r4, #1]
 80102fa:	2b2a      	cmp	r3, #42	; 0x2a
 80102fc:	d134      	bne.n	8010368 <_vfiprintf_r+0x1b0>
 80102fe:	9b03      	ldr	r3, [sp, #12]
 8010300:	1d1a      	adds	r2, r3, #4
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	9203      	str	r2, [sp, #12]
 8010306:	2b00      	cmp	r3, #0
 8010308:	bfb8      	it	lt
 801030a:	f04f 33ff 	movlt.w	r3, #4294967295
 801030e:	3402      	adds	r4, #2
 8010310:	9305      	str	r3, [sp, #20]
 8010312:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80103e8 <_vfiprintf_r+0x230>
 8010316:	7821      	ldrb	r1, [r4, #0]
 8010318:	2203      	movs	r2, #3
 801031a:	4650      	mov	r0, sl
 801031c:	f7ef ff80 	bl	8000220 <memchr>
 8010320:	b138      	cbz	r0, 8010332 <_vfiprintf_r+0x17a>
 8010322:	9b04      	ldr	r3, [sp, #16]
 8010324:	eba0 000a 	sub.w	r0, r0, sl
 8010328:	2240      	movs	r2, #64	; 0x40
 801032a:	4082      	lsls	r2, r0
 801032c:	4313      	orrs	r3, r2
 801032e:	3401      	adds	r4, #1
 8010330:	9304      	str	r3, [sp, #16]
 8010332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010336:	4829      	ldr	r0, [pc, #164]	; (80103dc <_vfiprintf_r+0x224>)
 8010338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801033c:	2206      	movs	r2, #6
 801033e:	f7ef ff6f 	bl	8000220 <memchr>
 8010342:	2800      	cmp	r0, #0
 8010344:	d03f      	beq.n	80103c6 <_vfiprintf_r+0x20e>
 8010346:	4b26      	ldr	r3, [pc, #152]	; (80103e0 <_vfiprintf_r+0x228>)
 8010348:	bb1b      	cbnz	r3, 8010392 <_vfiprintf_r+0x1da>
 801034a:	9b03      	ldr	r3, [sp, #12]
 801034c:	3307      	adds	r3, #7
 801034e:	f023 0307 	bic.w	r3, r3, #7
 8010352:	3308      	adds	r3, #8
 8010354:	9303      	str	r3, [sp, #12]
 8010356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010358:	443b      	add	r3, r7
 801035a:	9309      	str	r3, [sp, #36]	; 0x24
 801035c:	e768      	b.n	8010230 <_vfiprintf_r+0x78>
 801035e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010362:	460c      	mov	r4, r1
 8010364:	2001      	movs	r0, #1
 8010366:	e7a6      	b.n	80102b6 <_vfiprintf_r+0xfe>
 8010368:	2300      	movs	r3, #0
 801036a:	3401      	adds	r4, #1
 801036c:	9305      	str	r3, [sp, #20]
 801036e:	4619      	mov	r1, r3
 8010370:	f04f 0c0a 	mov.w	ip, #10
 8010374:	4620      	mov	r0, r4
 8010376:	f810 2b01 	ldrb.w	r2, [r0], #1
 801037a:	3a30      	subs	r2, #48	; 0x30
 801037c:	2a09      	cmp	r2, #9
 801037e:	d903      	bls.n	8010388 <_vfiprintf_r+0x1d0>
 8010380:	2b00      	cmp	r3, #0
 8010382:	d0c6      	beq.n	8010312 <_vfiprintf_r+0x15a>
 8010384:	9105      	str	r1, [sp, #20]
 8010386:	e7c4      	b.n	8010312 <_vfiprintf_r+0x15a>
 8010388:	fb0c 2101 	mla	r1, ip, r1, r2
 801038c:	4604      	mov	r4, r0
 801038e:	2301      	movs	r3, #1
 8010390:	e7f0      	b.n	8010374 <_vfiprintf_r+0x1bc>
 8010392:	ab03      	add	r3, sp, #12
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	462a      	mov	r2, r5
 8010398:	4b12      	ldr	r3, [pc, #72]	; (80103e4 <_vfiprintf_r+0x22c>)
 801039a:	a904      	add	r1, sp, #16
 801039c:	4630      	mov	r0, r6
 801039e:	f3af 8000 	nop.w
 80103a2:	4607      	mov	r7, r0
 80103a4:	1c78      	adds	r0, r7, #1
 80103a6:	d1d6      	bne.n	8010356 <_vfiprintf_r+0x19e>
 80103a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103aa:	07d9      	lsls	r1, r3, #31
 80103ac:	d405      	bmi.n	80103ba <_vfiprintf_r+0x202>
 80103ae:	89ab      	ldrh	r3, [r5, #12]
 80103b0:	059a      	lsls	r2, r3, #22
 80103b2:	d402      	bmi.n	80103ba <_vfiprintf_r+0x202>
 80103b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103b6:	f7fe f966 	bl	800e686 <__retarget_lock_release_recursive>
 80103ba:	89ab      	ldrh	r3, [r5, #12]
 80103bc:	065b      	lsls	r3, r3, #25
 80103be:	f53f af1d 	bmi.w	80101fc <_vfiprintf_r+0x44>
 80103c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103c4:	e71c      	b.n	8010200 <_vfiprintf_r+0x48>
 80103c6:	ab03      	add	r3, sp, #12
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	462a      	mov	r2, r5
 80103cc:	4b05      	ldr	r3, [pc, #20]	; (80103e4 <_vfiprintf_r+0x22c>)
 80103ce:	a904      	add	r1, sp, #16
 80103d0:	4630      	mov	r0, r6
 80103d2:	f000 f879 	bl	80104c8 <_printf_i>
 80103d6:	e7e4      	b.n	80103a2 <_vfiprintf_r+0x1ea>
 80103d8:	08012058 	.word	0x08012058
 80103dc:	08012062 	.word	0x08012062
 80103e0:	00000000 	.word	0x00000000
 80103e4:	08010195 	.word	0x08010195
 80103e8:	0801205e 	.word	0x0801205e

080103ec <_printf_common>:
 80103ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103f0:	4616      	mov	r6, r2
 80103f2:	4699      	mov	r9, r3
 80103f4:	688a      	ldr	r2, [r1, #8]
 80103f6:	690b      	ldr	r3, [r1, #16]
 80103f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80103fc:	4293      	cmp	r3, r2
 80103fe:	bfb8      	it	lt
 8010400:	4613      	movlt	r3, r2
 8010402:	6033      	str	r3, [r6, #0]
 8010404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010408:	4607      	mov	r7, r0
 801040a:	460c      	mov	r4, r1
 801040c:	b10a      	cbz	r2, 8010412 <_printf_common+0x26>
 801040e:	3301      	adds	r3, #1
 8010410:	6033      	str	r3, [r6, #0]
 8010412:	6823      	ldr	r3, [r4, #0]
 8010414:	0699      	lsls	r1, r3, #26
 8010416:	bf42      	ittt	mi
 8010418:	6833      	ldrmi	r3, [r6, #0]
 801041a:	3302      	addmi	r3, #2
 801041c:	6033      	strmi	r3, [r6, #0]
 801041e:	6825      	ldr	r5, [r4, #0]
 8010420:	f015 0506 	ands.w	r5, r5, #6
 8010424:	d106      	bne.n	8010434 <_printf_common+0x48>
 8010426:	f104 0a19 	add.w	sl, r4, #25
 801042a:	68e3      	ldr	r3, [r4, #12]
 801042c:	6832      	ldr	r2, [r6, #0]
 801042e:	1a9b      	subs	r3, r3, r2
 8010430:	42ab      	cmp	r3, r5
 8010432:	dc26      	bgt.n	8010482 <_printf_common+0x96>
 8010434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010438:	1e13      	subs	r3, r2, #0
 801043a:	6822      	ldr	r2, [r4, #0]
 801043c:	bf18      	it	ne
 801043e:	2301      	movne	r3, #1
 8010440:	0692      	lsls	r2, r2, #26
 8010442:	d42b      	bmi.n	801049c <_printf_common+0xb0>
 8010444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010448:	4649      	mov	r1, r9
 801044a:	4638      	mov	r0, r7
 801044c:	47c0      	blx	r8
 801044e:	3001      	adds	r0, #1
 8010450:	d01e      	beq.n	8010490 <_printf_common+0xa4>
 8010452:	6823      	ldr	r3, [r4, #0]
 8010454:	6922      	ldr	r2, [r4, #16]
 8010456:	f003 0306 	and.w	r3, r3, #6
 801045a:	2b04      	cmp	r3, #4
 801045c:	bf02      	ittt	eq
 801045e:	68e5      	ldreq	r5, [r4, #12]
 8010460:	6833      	ldreq	r3, [r6, #0]
 8010462:	1aed      	subeq	r5, r5, r3
 8010464:	68a3      	ldr	r3, [r4, #8]
 8010466:	bf0c      	ite	eq
 8010468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801046c:	2500      	movne	r5, #0
 801046e:	4293      	cmp	r3, r2
 8010470:	bfc4      	itt	gt
 8010472:	1a9b      	subgt	r3, r3, r2
 8010474:	18ed      	addgt	r5, r5, r3
 8010476:	2600      	movs	r6, #0
 8010478:	341a      	adds	r4, #26
 801047a:	42b5      	cmp	r5, r6
 801047c:	d11a      	bne.n	80104b4 <_printf_common+0xc8>
 801047e:	2000      	movs	r0, #0
 8010480:	e008      	b.n	8010494 <_printf_common+0xa8>
 8010482:	2301      	movs	r3, #1
 8010484:	4652      	mov	r2, sl
 8010486:	4649      	mov	r1, r9
 8010488:	4638      	mov	r0, r7
 801048a:	47c0      	blx	r8
 801048c:	3001      	adds	r0, #1
 801048e:	d103      	bne.n	8010498 <_printf_common+0xac>
 8010490:	f04f 30ff 	mov.w	r0, #4294967295
 8010494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010498:	3501      	adds	r5, #1
 801049a:	e7c6      	b.n	801042a <_printf_common+0x3e>
 801049c:	18e1      	adds	r1, r4, r3
 801049e:	1c5a      	adds	r2, r3, #1
 80104a0:	2030      	movs	r0, #48	; 0x30
 80104a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104a6:	4422      	add	r2, r4
 80104a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104b0:	3302      	adds	r3, #2
 80104b2:	e7c7      	b.n	8010444 <_printf_common+0x58>
 80104b4:	2301      	movs	r3, #1
 80104b6:	4622      	mov	r2, r4
 80104b8:	4649      	mov	r1, r9
 80104ba:	4638      	mov	r0, r7
 80104bc:	47c0      	blx	r8
 80104be:	3001      	adds	r0, #1
 80104c0:	d0e6      	beq.n	8010490 <_printf_common+0xa4>
 80104c2:	3601      	adds	r6, #1
 80104c4:	e7d9      	b.n	801047a <_printf_common+0x8e>
	...

080104c8 <_printf_i>:
 80104c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104cc:	7e0f      	ldrb	r7, [r1, #24]
 80104ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104d0:	2f78      	cmp	r7, #120	; 0x78
 80104d2:	4691      	mov	r9, r2
 80104d4:	4680      	mov	r8, r0
 80104d6:	460c      	mov	r4, r1
 80104d8:	469a      	mov	sl, r3
 80104da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80104de:	d807      	bhi.n	80104f0 <_printf_i+0x28>
 80104e0:	2f62      	cmp	r7, #98	; 0x62
 80104e2:	d80a      	bhi.n	80104fa <_printf_i+0x32>
 80104e4:	2f00      	cmp	r7, #0
 80104e6:	f000 80d4 	beq.w	8010692 <_printf_i+0x1ca>
 80104ea:	2f58      	cmp	r7, #88	; 0x58
 80104ec:	f000 80c0 	beq.w	8010670 <_printf_i+0x1a8>
 80104f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80104f8:	e03a      	b.n	8010570 <_printf_i+0xa8>
 80104fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80104fe:	2b15      	cmp	r3, #21
 8010500:	d8f6      	bhi.n	80104f0 <_printf_i+0x28>
 8010502:	a101      	add	r1, pc, #4	; (adr r1, 8010508 <_printf_i+0x40>)
 8010504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010508:	08010561 	.word	0x08010561
 801050c:	08010575 	.word	0x08010575
 8010510:	080104f1 	.word	0x080104f1
 8010514:	080104f1 	.word	0x080104f1
 8010518:	080104f1 	.word	0x080104f1
 801051c:	080104f1 	.word	0x080104f1
 8010520:	08010575 	.word	0x08010575
 8010524:	080104f1 	.word	0x080104f1
 8010528:	080104f1 	.word	0x080104f1
 801052c:	080104f1 	.word	0x080104f1
 8010530:	080104f1 	.word	0x080104f1
 8010534:	08010679 	.word	0x08010679
 8010538:	080105a1 	.word	0x080105a1
 801053c:	08010633 	.word	0x08010633
 8010540:	080104f1 	.word	0x080104f1
 8010544:	080104f1 	.word	0x080104f1
 8010548:	0801069b 	.word	0x0801069b
 801054c:	080104f1 	.word	0x080104f1
 8010550:	080105a1 	.word	0x080105a1
 8010554:	080104f1 	.word	0x080104f1
 8010558:	080104f1 	.word	0x080104f1
 801055c:	0801063b 	.word	0x0801063b
 8010560:	682b      	ldr	r3, [r5, #0]
 8010562:	1d1a      	adds	r2, r3, #4
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	602a      	str	r2, [r5, #0]
 8010568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801056c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010570:	2301      	movs	r3, #1
 8010572:	e09f      	b.n	80106b4 <_printf_i+0x1ec>
 8010574:	6820      	ldr	r0, [r4, #0]
 8010576:	682b      	ldr	r3, [r5, #0]
 8010578:	0607      	lsls	r7, r0, #24
 801057a:	f103 0104 	add.w	r1, r3, #4
 801057e:	6029      	str	r1, [r5, #0]
 8010580:	d501      	bpl.n	8010586 <_printf_i+0xbe>
 8010582:	681e      	ldr	r6, [r3, #0]
 8010584:	e003      	b.n	801058e <_printf_i+0xc6>
 8010586:	0646      	lsls	r6, r0, #25
 8010588:	d5fb      	bpl.n	8010582 <_printf_i+0xba>
 801058a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801058e:	2e00      	cmp	r6, #0
 8010590:	da03      	bge.n	801059a <_printf_i+0xd2>
 8010592:	232d      	movs	r3, #45	; 0x2d
 8010594:	4276      	negs	r6, r6
 8010596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801059a:	485a      	ldr	r0, [pc, #360]	; (8010704 <_printf_i+0x23c>)
 801059c:	230a      	movs	r3, #10
 801059e:	e012      	b.n	80105c6 <_printf_i+0xfe>
 80105a0:	682b      	ldr	r3, [r5, #0]
 80105a2:	6820      	ldr	r0, [r4, #0]
 80105a4:	1d19      	adds	r1, r3, #4
 80105a6:	6029      	str	r1, [r5, #0]
 80105a8:	0605      	lsls	r5, r0, #24
 80105aa:	d501      	bpl.n	80105b0 <_printf_i+0xe8>
 80105ac:	681e      	ldr	r6, [r3, #0]
 80105ae:	e002      	b.n	80105b6 <_printf_i+0xee>
 80105b0:	0641      	lsls	r1, r0, #25
 80105b2:	d5fb      	bpl.n	80105ac <_printf_i+0xe4>
 80105b4:	881e      	ldrh	r6, [r3, #0]
 80105b6:	4853      	ldr	r0, [pc, #332]	; (8010704 <_printf_i+0x23c>)
 80105b8:	2f6f      	cmp	r7, #111	; 0x6f
 80105ba:	bf0c      	ite	eq
 80105bc:	2308      	moveq	r3, #8
 80105be:	230a      	movne	r3, #10
 80105c0:	2100      	movs	r1, #0
 80105c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105c6:	6865      	ldr	r5, [r4, #4]
 80105c8:	60a5      	str	r5, [r4, #8]
 80105ca:	2d00      	cmp	r5, #0
 80105cc:	bfa2      	ittt	ge
 80105ce:	6821      	ldrge	r1, [r4, #0]
 80105d0:	f021 0104 	bicge.w	r1, r1, #4
 80105d4:	6021      	strge	r1, [r4, #0]
 80105d6:	b90e      	cbnz	r6, 80105dc <_printf_i+0x114>
 80105d8:	2d00      	cmp	r5, #0
 80105da:	d04b      	beq.n	8010674 <_printf_i+0x1ac>
 80105dc:	4615      	mov	r5, r2
 80105de:	fbb6 f1f3 	udiv	r1, r6, r3
 80105e2:	fb03 6711 	mls	r7, r3, r1, r6
 80105e6:	5dc7      	ldrb	r7, [r0, r7]
 80105e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80105ec:	4637      	mov	r7, r6
 80105ee:	42bb      	cmp	r3, r7
 80105f0:	460e      	mov	r6, r1
 80105f2:	d9f4      	bls.n	80105de <_printf_i+0x116>
 80105f4:	2b08      	cmp	r3, #8
 80105f6:	d10b      	bne.n	8010610 <_printf_i+0x148>
 80105f8:	6823      	ldr	r3, [r4, #0]
 80105fa:	07de      	lsls	r6, r3, #31
 80105fc:	d508      	bpl.n	8010610 <_printf_i+0x148>
 80105fe:	6923      	ldr	r3, [r4, #16]
 8010600:	6861      	ldr	r1, [r4, #4]
 8010602:	4299      	cmp	r1, r3
 8010604:	bfde      	ittt	le
 8010606:	2330      	movle	r3, #48	; 0x30
 8010608:	f805 3c01 	strble.w	r3, [r5, #-1]
 801060c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010610:	1b52      	subs	r2, r2, r5
 8010612:	6122      	str	r2, [r4, #16]
 8010614:	f8cd a000 	str.w	sl, [sp]
 8010618:	464b      	mov	r3, r9
 801061a:	aa03      	add	r2, sp, #12
 801061c:	4621      	mov	r1, r4
 801061e:	4640      	mov	r0, r8
 8010620:	f7ff fee4 	bl	80103ec <_printf_common>
 8010624:	3001      	adds	r0, #1
 8010626:	d14a      	bne.n	80106be <_printf_i+0x1f6>
 8010628:	f04f 30ff 	mov.w	r0, #4294967295
 801062c:	b004      	add	sp, #16
 801062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010632:	6823      	ldr	r3, [r4, #0]
 8010634:	f043 0320 	orr.w	r3, r3, #32
 8010638:	6023      	str	r3, [r4, #0]
 801063a:	4833      	ldr	r0, [pc, #204]	; (8010708 <_printf_i+0x240>)
 801063c:	2778      	movs	r7, #120	; 0x78
 801063e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	6829      	ldr	r1, [r5, #0]
 8010646:	061f      	lsls	r7, r3, #24
 8010648:	f851 6b04 	ldr.w	r6, [r1], #4
 801064c:	d402      	bmi.n	8010654 <_printf_i+0x18c>
 801064e:	065f      	lsls	r7, r3, #25
 8010650:	bf48      	it	mi
 8010652:	b2b6      	uxthmi	r6, r6
 8010654:	07df      	lsls	r7, r3, #31
 8010656:	bf48      	it	mi
 8010658:	f043 0320 	orrmi.w	r3, r3, #32
 801065c:	6029      	str	r1, [r5, #0]
 801065e:	bf48      	it	mi
 8010660:	6023      	strmi	r3, [r4, #0]
 8010662:	b91e      	cbnz	r6, 801066c <_printf_i+0x1a4>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	f023 0320 	bic.w	r3, r3, #32
 801066a:	6023      	str	r3, [r4, #0]
 801066c:	2310      	movs	r3, #16
 801066e:	e7a7      	b.n	80105c0 <_printf_i+0xf8>
 8010670:	4824      	ldr	r0, [pc, #144]	; (8010704 <_printf_i+0x23c>)
 8010672:	e7e4      	b.n	801063e <_printf_i+0x176>
 8010674:	4615      	mov	r5, r2
 8010676:	e7bd      	b.n	80105f4 <_printf_i+0x12c>
 8010678:	682b      	ldr	r3, [r5, #0]
 801067a:	6826      	ldr	r6, [r4, #0]
 801067c:	6961      	ldr	r1, [r4, #20]
 801067e:	1d18      	adds	r0, r3, #4
 8010680:	6028      	str	r0, [r5, #0]
 8010682:	0635      	lsls	r5, r6, #24
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	d501      	bpl.n	801068c <_printf_i+0x1c4>
 8010688:	6019      	str	r1, [r3, #0]
 801068a:	e002      	b.n	8010692 <_printf_i+0x1ca>
 801068c:	0670      	lsls	r0, r6, #25
 801068e:	d5fb      	bpl.n	8010688 <_printf_i+0x1c0>
 8010690:	8019      	strh	r1, [r3, #0]
 8010692:	2300      	movs	r3, #0
 8010694:	6123      	str	r3, [r4, #16]
 8010696:	4615      	mov	r5, r2
 8010698:	e7bc      	b.n	8010614 <_printf_i+0x14c>
 801069a:	682b      	ldr	r3, [r5, #0]
 801069c:	1d1a      	adds	r2, r3, #4
 801069e:	602a      	str	r2, [r5, #0]
 80106a0:	681d      	ldr	r5, [r3, #0]
 80106a2:	6862      	ldr	r2, [r4, #4]
 80106a4:	2100      	movs	r1, #0
 80106a6:	4628      	mov	r0, r5
 80106a8:	f7ef fdba 	bl	8000220 <memchr>
 80106ac:	b108      	cbz	r0, 80106b2 <_printf_i+0x1ea>
 80106ae:	1b40      	subs	r0, r0, r5
 80106b0:	6060      	str	r0, [r4, #4]
 80106b2:	6863      	ldr	r3, [r4, #4]
 80106b4:	6123      	str	r3, [r4, #16]
 80106b6:	2300      	movs	r3, #0
 80106b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106bc:	e7aa      	b.n	8010614 <_printf_i+0x14c>
 80106be:	6923      	ldr	r3, [r4, #16]
 80106c0:	462a      	mov	r2, r5
 80106c2:	4649      	mov	r1, r9
 80106c4:	4640      	mov	r0, r8
 80106c6:	47d0      	blx	sl
 80106c8:	3001      	adds	r0, #1
 80106ca:	d0ad      	beq.n	8010628 <_printf_i+0x160>
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	079b      	lsls	r3, r3, #30
 80106d0:	d413      	bmi.n	80106fa <_printf_i+0x232>
 80106d2:	68e0      	ldr	r0, [r4, #12]
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	4298      	cmp	r0, r3
 80106d8:	bfb8      	it	lt
 80106da:	4618      	movlt	r0, r3
 80106dc:	e7a6      	b.n	801062c <_printf_i+0x164>
 80106de:	2301      	movs	r3, #1
 80106e0:	4632      	mov	r2, r6
 80106e2:	4649      	mov	r1, r9
 80106e4:	4640      	mov	r0, r8
 80106e6:	47d0      	blx	sl
 80106e8:	3001      	adds	r0, #1
 80106ea:	d09d      	beq.n	8010628 <_printf_i+0x160>
 80106ec:	3501      	adds	r5, #1
 80106ee:	68e3      	ldr	r3, [r4, #12]
 80106f0:	9903      	ldr	r1, [sp, #12]
 80106f2:	1a5b      	subs	r3, r3, r1
 80106f4:	42ab      	cmp	r3, r5
 80106f6:	dcf2      	bgt.n	80106de <_printf_i+0x216>
 80106f8:	e7eb      	b.n	80106d2 <_printf_i+0x20a>
 80106fa:	2500      	movs	r5, #0
 80106fc:	f104 0619 	add.w	r6, r4, #25
 8010700:	e7f5      	b.n	80106ee <_printf_i+0x226>
 8010702:	bf00      	nop
 8010704:	08012069 	.word	0x08012069
 8010708:	0801207a 	.word	0x0801207a

0801070c <__swbuf_r>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	460e      	mov	r6, r1
 8010710:	4614      	mov	r4, r2
 8010712:	4605      	mov	r5, r0
 8010714:	b118      	cbz	r0, 801071e <__swbuf_r+0x12>
 8010716:	6a03      	ldr	r3, [r0, #32]
 8010718:	b90b      	cbnz	r3, 801071e <__swbuf_r+0x12>
 801071a:	f7fd fec1 	bl	800e4a0 <__sinit>
 801071e:	69a3      	ldr	r3, [r4, #24]
 8010720:	60a3      	str	r3, [r4, #8]
 8010722:	89a3      	ldrh	r3, [r4, #12]
 8010724:	071a      	lsls	r2, r3, #28
 8010726:	d525      	bpl.n	8010774 <__swbuf_r+0x68>
 8010728:	6923      	ldr	r3, [r4, #16]
 801072a:	b31b      	cbz	r3, 8010774 <__swbuf_r+0x68>
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	6922      	ldr	r2, [r4, #16]
 8010730:	1a98      	subs	r0, r3, r2
 8010732:	6963      	ldr	r3, [r4, #20]
 8010734:	b2f6      	uxtb	r6, r6
 8010736:	4283      	cmp	r3, r0
 8010738:	4637      	mov	r7, r6
 801073a:	dc04      	bgt.n	8010746 <__swbuf_r+0x3a>
 801073c:	4621      	mov	r1, r4
 801073e:	4628      	mov	r0, r5
 8010740:	f7fe fa58 	bl	800ebf4 <_fflush_r>
 8010744:	b9e0      	cbnz	r0, 8010780 <__swbuf_r+0x74>
 8010746:	68a3      	ldr	r3, [r4, #8]
 8010748:	3b01      	subs	r3, #1
 801074a:	60a3      	str	r3, [r4, #8]
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	1c5a      	adds	r2, r3, #1
 8010750:	6022      	str	r2, [r4, #0]
 8010752:	701e      	strb	r6, [r3, #0]
 8010754:	6962      	ldr	r2, [r4, #20]
 8010756:	1c43      	adds	r3, r0, #1
 8010758:	429a      	cmp	r2, r3
 801075a:	d004      	beq.n	8010766 <__swbuf_r+0x5a>
 801075c:	89a3      	ldrh	r3, [r4, #12]
 801075e:	07db      	lsls	r3, r3, #31
 8010760:	d506      	bpl.n	8010770 <__swbuf_r+0x64>
 8010762:	2e0a      	cmp	r6, #10
 8010764:	d104      	bne.n	8010770 <__swbuf_r+0x64>
 8010766:	4621      	mov	r1, r4
 8010768:	4628      	mov	r0, r5
 801076a:	f7fe fa43 	bl	800ebf4 <_fflush_r>
 801076e:	b938      	cbnz	r0, 8010780 <__swbuf_r+0x74>
 8010770:	4638      	mov	r0, r7
 8010772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010774:	4621      	mov	r1, r4
 8010776:	4628      	mov	r0, r5
 8010778:	f000 f806 	bl	8010788 <__swsetup_r>
 801077c:	2800      	cmp	r0, #0
 801077e:	d0d5      	beq.n	801072c <__swbuf_r+0x20>
 8010780:	f04f 37ff 	mov.w	r7, #4294967295
 8010784:	e7f4      	b.n	8010770 <__swbuf_r+0x64>
	...

08010788 <__swsetup_r>:
 8010788:	b538      	push	{r3, r4, r5, lr}
 801078a:	4b2a      	ldr	r3, [pc, #168]	; (8010834 <__swsetup_r+0xac>)
 801078c:	4605      	mov	r5, r0
 801078e:	6818      	ldr	r0, [r3, #0]
 8010790:	460c      	mov	r4, r1
 8010792:	b118      	cbz	r0, 801079c <__swsetup_r+0x14>
 8010794:	6a03      	ldr	r3, [r0, #32]
 8010796:	b90b      	cbnz	r3, 801079c <__swsetup_r+0x14>
 8010798:	f7fd fe82 	bl	800e4a0 <__sinit>
 801079c:	89a3      	ldrh	r3, [r4, #12]
 801079e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107a2:	0718      	lsls	r0, r3, #28
 80107a4:	d422      	bmi.n	80107ec <__swsetup_r+0x64>
 80107a6:	06d9      	lsls	r1, r3, #27
 80107a8:	d407      	bmi.n	80107ba <__swsetup_r+0x32>
 80107aa:	2309      	movs	r3, #9
 80107ac:	602b      	str	r3, [r5, #0]
 80107ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107b2:	81a3      	strh	r3, [r4, #12]
 80107b4:	f04f 30ff 	mov.w	r0, #4294967295
 80107b8:	e034      	b.n	8010824 <__swsetup_r+0x9c>
 80107ba:	0758      	lsls	r0, r3, #29
 80107bc:	d512      	bpl.n	80107e4 <__swsetup_r+0x5c>
 80107be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107c0:	b141      	cbz	r1, 80107d4 <__swsetup_r+0x4c>
 80107c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107c6:	4299      	cmp	r1, r3
 80107c8:	d002      	beq.n	80107d0 <__swsetup_r+0x48>
 80107ca:	4628      	mov	r0, r5
 80107cc:	f7fd ff5c 	bl	800e688 <_free_r>
 80107d0:	2300      	movs	r3, #0
 80107d2:	6363      	str	r3, [r4, #52]	; 0x34
 80107d4:	89a3      	ldrh	r3, [r4, #12]
 80107d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107da:	81a3      	strh	r3, [r4, #12]
 80107dc:	2300      	movs	r3, #0
 80107de:	6063      	str	r3, [r4, #4]
 80107e0:	6923      	ldr	r3, [r4, #16]
 80107e2:	6023      	str	r3, [r4, #0]
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	f043 0308 	orr.w	r3, r3, #8
 80107ea:	81a3      	strh	r3, [r4, #12]
 80107ec:	6923      	ldr	r3, [r4, #16]
 80107ee:	b94b      	cbnz	r3, 8010804 <__swsetup_r+0x7c>
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107fa:	d003      	beq.n	8010804 <__swsetup_r+0x7c>
 80107fc:	4621      	mov	r1, r4
 80107fe:	4628      	mov	r0, r5
 8010800:	f000 f884 	bl	801090c <__smakebuf_r>
 8010804:	89a0      	ldrh	r0, [r4, #12]
 8010806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801080a:	f010 0301 	ands.w	r3, r0, #1
 801080e:	d00a      	beq.n	8010826 <__swsetup_r+0x9e>
 8010810:	2300      	movs	r3, #0
 8010812:	60a3      	str	r3, [r4, #8]
 8010814:	6963      	ldr	r3, [r4, #20]
 8010816:	425b      	negs	r3, r3
 8010818:	61a3      	str	r3, [r4, #24]
 801081a:	6923      	ldr	r3, [r4, #16]
 801081c:	b943      	cbnz	r3, 8010830 <__swsetup_r+0xa8>
 801081e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010822:	d1c4      	bne.n	80107ae <__swsetup_r+0x26>
 8010824:	bd38      	pop	{r3, r4, r5, pc}
 8010826:	0781      	lsls	r1, r0, #30
 8010828:	bf58      	it	pl
 801082a:	6963      	ldrpl	r3, [r4, #20]
 801082c:	60a3      	str	r3, [r4, #8]
 801082e:	e7f4      	b.n	801081a <__swsetup_r+0x92>
 8010830:	2000      	movs	r0, #0
 8010832:	e7f7      	b.n	8010824 <__swsetup_r+0x9c>
 8010834:	20000094 	.word	0x20000094

08010838 <_raise_r>:
 8010838:	291f      	cmp	r1, #31
 801083a:	b538      	push	{r3, r4, r5, lr}
 801083c:	4604      	mov	r4, r0
 801083e:	460d      	mov	r5, r1
 8010840:	d904      	bls.n	801084c <_raise_r+0x14>
 8010842:	2316      	movs	r3, #22
 8010844:	6003      	str	r3, [r0, #0]
 8010846:	f04f 30ff 	mov.w	r0, #4294967295
 801084a:	bd38      	pop	{r3, r4, r5, pc}
 801084c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801084e:	b112      	cbz	r2, 8010856 <_raise_r+0x1e>
 8010850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010854:	b94b      	cbnz	r3, 801086a <_raise_r+0x32>
 8010856:	4620      	mov	r0, r4
 8010858:	f000 f830 	bl	80108bc <_getpid_r>
 801085c:	462a      	mov	r2, r5
 801085e:	4601      	mov	r1, r0
 8010860:	4620      	mov	r0, r4
 8010862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010866:	f000 b817 	b.w	8010898 <_kill_r>
 801086a:	2b01      	cmp	r3, #1
 801086c:	d00a      	beq.n	8010884 <_raise_r+0x4c>
 801086e:	1c59      	adds	r1, r3, #1
 8010870:	d103      	bne.n	801087a <_raise_r+0x42>
 8010872:	2316      	movs	r3, #22
 8010874:	6003      	str	r3, [r0, #0]
 8010876:	2001      	movs	r0, #1
 8010878:	e7e7      	b.n	801084a <_raise_r+0x12>
 801087a:	2400      	movs	r4, #0
 801087c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010880:	4628      	mov	r0, r5
 8010882:	4798      	blx	r3
 8010884:	2000      	movs	r0, #0
 8010886:	e7e0      	b.n	801084a <_raise_r+0x12>

08010888 <raise>:
 8010888:	4b02      	ldr	r3, [pc, #8]	; (8010894 <raise+0xc>)
 801088a:	4601      	mov	r1, r0
 801088c:	6818      	ldr	r0, [r3, #0]
 801088e:	f7ff bfd3 	b.w	8010838 <_raise_r>
 8010892:	bf00      	nop
 8010894:	20000094 	.word	0x20000094

08010898 <_kill_r>:
 8010898:	b538      	push	{r3, r4, r5, lr}
 801089a:	4d07      	ldr	r5, [pc, #28]	; (80108b8 <_kill_r+0x20>)
 801089c:	2300      	movs	r3, #0
 801089e:	4604      	mov	r4, r0
 80108a0:	4608      	mov	r0, r1
 80108a2:	4611      	mov	r1, r2
 80108a4:	602b      	str	r3, [r5, #0]
 80108a6:	f7f4 fb89 	bl	8004fbc <_kill>
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	d102      	bne.n	80108b4 <_kill_r+0x1c>
 80108ae:	682b      	ldr	r3, [r5, #0]
 80108b0:	b103      	cbz	r3, 80108b4 <_kill_r+0x1c>
 80108b2:	6023      	str	r3, [r4, #0]
 80108b4:	bd38      	pop	{r3, r4, r5, pc}
 80108b6:	bf00      	nop
 80108b8:	20002ff0 	.word	0x20002ff0

080108bc <_getpid_r>:
 80108bc:	f7f4 bb76 	b.w	8004fac <_getpid>

080108c0 <__swhatbuf_r>:
 80108c0:	b570      	push	{r4, r5, r6, lr}
 80108c2:	460c      	mov	r4, r1
 80108c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c8:	2900      	cmp	r1, #0
 80108ca:	b096      	sub	sp, #88	; 0x58
 80108cc:	4615      	mov	r5, r2
 80108ce:	461e      	mov	r6, r3
 80108d0:	da0d      	bge.n	80108ee <__swhatbuf_r+0x2e>
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80108d8:	f04f 0100 	mov.w	r1, #0
 80108dc:	bf0c      	ite	eq
 80108de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80108e2:	2340      	movne	r3, #64	; 0x40
 80108e4:	2000      	movs	r0, #0
 80108e6:	6031      	str	r1, [r6, #0]
 80108e8:	602b      	str	r3, [r5, #0]
 80108ea:	b016      	add	sp, #88	; 0x58
 80108ec:	bd70      	pop	{r4, r5, r6, pc}
 80108ee:	466a      	mov	r2, sp
 80108f0:	f000 f848 	bl	8010984 <_fstat_r>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	dbec      	blt.n	80108d2 <__swhatbuf_r+0x12>
 80108f8:	9901      	ldr	r1, [sp, #4]
 80108fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80108fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010902:	4259      	negs	r1, r3
 8010904:	4159      	adcs	r1, r3
 8010906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801090a:	e7eb      	b.n	80108e4 <__swhatbuf_r+0x24>

0801090c <__smakebuf_r>:
 801090c:	898b      	ldrh	r3, [r1, #12]
 801090e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010910:	079d      	lsls	r5, r3, #30
 8010912:	4606      	mov	r6, r0
 8010914:	460c      	mov	r4, r1
 8010916:	d507      	bpl.n	8010928 <__smakebuf_r+0x1c>
 8010918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	6123      	str	r3, [r4, #16]
 8010920:	2301      	movs	r3, #1
 8010922:	6163      	str	r3, [r4, #20]
 8010924:	b002      	add	sp, #8
 8010926:	bd70      	pop	{r4, r5, r6, pc}
 8010928:	ab01      	add	r3, sp, #4
 801092a:	466a      	mov	r2, sp
 801092c:	f7ff ffc8 	bl	80108c0 <__swhatbuf_r>
 8010930:	9900      	ldr	r1, [sp, #0]
 8010932:	4605      	mov	r5, r0
 8010934:	4630      	mov	r0, r6
 8010936:	f7fd ff13 	bl	800e760 <_malloc_r>
 801093a:	b948      	cbnz	r0, 8010950 <__smakebuf_r+0x44>
 801093c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010940:	059a      	lsls	r2, r3, #22
 8010942:	d4ef      	bmi.n	8010924 <__smakebuf_r+0x18>
 8010944:	f023 0303 	bic.w	r3, r3, #3
 8010948:	f043 0302 	orr.w	r3, r3, #2
 801094c:	81a3      	strh	r3, [r4, #12]
 801094e:	e7e3      	b.n	8010918 <__smakebuf_r+0xc>
 8010950:	89a3      	ldrh	r3, [r4, #12]
 8010952:	6020      	str	r0, [r4, #0]
 8010954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010958:	81a3      	strh	r3, [r4, #12]
 801095a:	9b00      	ldr	r3, [sp, #0]
 801095c:	6163      	str	r3, [r4, #20]
 801095e:	9b01      	ldr	r3, [sp, #4]
 8010960:	6120      	str	r0, [r4, #16]
 8010962:	b15b      	cbz	r3, 801097c <__smakebuf_r+0x70>
 8010964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010968:	4630      	mov	r0, r6
 801096a:	f000 f81d 	bl	80109a8 <_isatty_r>
 801096e:	b128      	cbz	r0, 801097c <__smakebuf_r+0x70>
 8010970:	89a3      	ldrh	r3, [r4, #12]
 8010972:	f023 0303 	bic.w	r3, r3, #3
 8010976:	f043 0301 	orr.w	r3, r3, #1
 801097a:	81a3      	strh	r3, [r4, #12]
 801097c:	89a3      	ldrh	r3, [r4, #12]
 801097e:	431d      	orrs	r5, r3
 8010980:	81a5      	strh	r5, [r4, #12]
 8010982:	e7cf      	b.n	8010924 <__smakebuf_r+0x18>

08010984 <_fstat_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	4d07      	ldr	r5, [pc, #28]	; (80109a4 <_fstat_r+0x20>)
 8010988:	2300      	movs	r3, #0
 801098a:	4604      	mov	r4, r0
 801098c:	4608      	mov	r0, r1
 801098e:	4611      	mov	r1, r2
 8010990:	602b      	str	r3, [r5, #0]
 8010992:	f7f4 fb56 	bl	8005042 <_fstat>
 8010996:	1c43      	adds	r3, r0, #1
 8010998:	d102      	bne.n	80109a0 <_fstat_r+0x1c>
 801099a:	682b      	ldr	r3, [r5, #0]
 801099c:	b103      	cbz	r3, 80109a0 <_fstat_r+0x1c>
 801099e:	6023      	str	r3, [r4, #0]
 80109a0:	bd38      	pop	{r3, r4, r5, pc}
 80109a2:	bf00      	nop
 80109a4:	20002ff0 	.word	0x20002ff0

080109a8 <_isatty_r>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	4d06      	ldr	r5, [pc, #24]	; (80109c4 <_isatty_r+0x1c>)
 80109ac:	2300      	movs	r3, #0
 80109ae:	4604      	mov	r4, r0
 80109b0:	4608      	mov	r0, r1
 80109b2:	602b      	str	r3, [r5, #0]
 80109b4:	f7f4 fb55 	bl	8005062 <_isatty>
 80109b8:	1c43      	adds	r3, r0, #1
 80109ba:	d102      	bne.n	80109c2 <_isatty_r+0x1a>
 80109bc:	682b      	ldr	r3, [r5, #0]
 80109be:	b103      	cbz	r3, 80109c2 <_isatty_r+0x1a>
 80109c0:	6023      	str	r3, [r4, #0]
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	20002ff0 	.word	0x20002ff0

080109c8 <pow>:
 80109c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ca:	ed2d 8b02 	vpush	{d8}
 80109ce:	eeb0 8a40 	vmov.f32	s16, s0
 80109d2:	eef0 8a60 	vmov.f32	s17, s1
 80109d6:	ec55 4b11 	vmov	r4, r5, d1
 80109da:	f000 f871 	bl	8010ac0 <__ieee754_pow>
 80109de:	4622      	mov	r2, r4
 80109e0:	462b      	mov	r3, r5
 80109e2:	4620      	mov	r0, r4
 80109e4:	4629      	mov	r1, r5
 80109e6:	ec57 6b10 	vmov	r6, r7, d0
 80109ea:	f7f0 f8bf 	bl	8000b6c <__aeabi_dcmpun>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	d13b      	bne.n	8010a6a <pow+0xa2>
 80109f2:	ec51 0b18 	vmov	r0, r1, d8
 80109f6:	2200      	movs	r2, #0
 80109f8:	2300      	movs	r3, #0
 80109fa:	f7f0 f885 	bl	8000b08 <__aeabi_dcmpeq>
 80109fe:	b1b8      	cbz	r0, 8010a30 <pow+0x68>
 8010a00:	2200      	movs	r2, #0
 8010a02:	2300      	movs	r3, #0
 8010a04:	4620      	mov	r0, r4
 8010a06:	4629      	mov	r1, r5
 8010a08:	f7f0 f87e 	bl	8000b08 <__aeabi_dcmpeq>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d146      	bne.n	8010a9e <pow+0xd6>
 8010a10:	ec45 4b10 	vmov	d0, r4, r5
 8010a14:	f000 f848 	bl	8010aa8 <finite>
 8010a18:	b338      	cbz	r0, 8010a6a <pow+0xa2>
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	4620      	mov	r0, r4
 8010a20:	4629      	mov	r1, r5
 8010a22:	f7f0 f87b 	bl	8000b1c <__aeabi_dcmplt>
 8010a26:	b300      	cbz	r0, 8010a6a <pow+0xa2>
 8010a28:	f7fd fe02 	bl	800e630 <__errno>
 8010a2c:	2322      	movs	r3, #34	; 0x22
 8010a2e:	e01b      	b.n	8010a68 <pow+0xa0>
 8010a30:	ec47 6b10 	vmov	d0, r6, r7
 8010a34:	f000 f838 	bl	8010aa8 <finite>
 8010a38:	b9e0      	cbnz	r0, 8010a74 <pow+0xac>
 8010a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8010a3e:	eef0 0a68 	vmov.f32	s1, s17
 8010a42:	f000 f831 	bl	8010aa8 <finite>
 8010a46:	b1a8      	cbz	r0, 8010a74 <pow+0xac>
 8010a48:	ec45 4b10 	vmov	d0, r4, r5
 8010a4c:	f000 f82c 	bl	8010aa8 <finite>
 8010a50:	b180      	cbz	r0, 8010a74 <pow+0xac>
 8010a52:	4632      	mov	r2, r6
 8010a54:	463b      	mov	r3, r7
 8010a56:	4630      	mov	r0, r6
 8010a58:	4639      	mov	r1, r7
 8010a5a:	f7f0 f887 	bl	8000b6c <__aeabi_dcmpun>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d0e2      	beq.n	8010a28 <pow+0x60>
 8010a62:	f7fd fde5 	bl	800e630 <__errno>
 8010a66:	2321      	movs	r3, #33	; 0x21
 8010a68:	6003      	str	r3, [r0, #0]
 8010a6a:	ecbd 8b02 	vpop	{d8}
 8010a6e:	ec47 6b10 	vmov	d0, r6, r7
 8010a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a74:	2200      	movs	r2, #0
 8010a76:	2300      	movs	r3, #0
 8010a78:	4630      	mov	r0, r6
 8010a7a:	4639      	mov	r1, r7
 8010a7c:	f7f0 f844 	bl	8000b08 <__aeabi_dcmpeq>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d0f2      	beq.n	8010a6a <pow+0xa2>
 8010a84:	eeb0 0a48 	vmov.f32	s0, s16
 8010a88:	eef0 0a68 	vmov.f32	s1, s17
 8010a8c:	f000 f80c 	bl	8010aa8 <finite>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	d0ea      	beq.n	8010a6a <pow+0xa2>
 8010a94:	ec45 4b10 	vmov	d0, r4, r5
 8010a98:	f000 f806 	bl	8010aa8 <finite>
 8010a9c:	e7c3      	b.n	8010a26 <pow+0x5e>
 8010a9e:	4f01      	ldr	r7, [pc, #4]	; (8010aa4 <pow+0xdc>)
 8010aa0:	2600      	movs	r6, #0
 8010aa2:	e7e2      	b.n	8010a6a <pow+0xa2>
 8010aa4:	3ff00000 	.word	0x3ff00000

08010aa8 <finite>:
 8010aa8:	b082      	sub	sp, #8
 8010aaa:	ed8d 0b00 	vstr	d0, [sp]
 8010aae:	9801      	ldr	r0, [sp, #4]
 8010ab0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010ab4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010ab8:	0fc0      	lsrs	r0, r0, #31
 8010aba:	b002      	add	sp, #8
 8010abc:	4770      	bx	lr
	...

08010ac0 <__ieee754_pow>:
 8010ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac4:	ed2d 8b06 	vpush	{d8-d10}
 8010ac8:	b089      	sub	sp, #36	; 0x24
 8010aca:	ed8d 1b00 	vstr	d1, [sp]
 8010ace:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010ad2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010ad6:	ea58 0102 	orrs.w	r1, r8, r2
 8010ada:	ec57 6b10 	vmov	r6, r7, d0
 8010ade:	d115      	bne.n	8010b0c <__ieee754_pow+0x4c>
 8010ae0:	19b3      	adds	r3, r6, r6
 8010ae2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010ae6:	4152      	adcs	r2, r2
 8010ae8:	4299      	cmp	r1, r3
 8010aea:	4b89      	ldr	r3, [pc, #548]	; (8010d10 <__ieee754_pow+0x250>)
 8010aec:	4193      	sbcs	r3, r2
 8010aee:	f080 84d1 	bcs.w	8011494 <__ieee754_pow+0x9d4>
 8010af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010af6:	4630      	mov	r0, r6
 8010af8:	4639      	mov	r1, r7
 8010afa:	f7ef fbe7 	bl	80002cc <__adddf3>
 8010afe:	ec41 0b10 	vmov	d0, r0, r1
 8010b02:	b009      	add	sp, #36	; 0x24
 8010b04:	ecbd 8b06 	vpop	{d8-d10}
 8010b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b0c:	4b81      	ldr	r3, [pc, #516]	; (8010d14 <__ieee754_pow+0x254>)
 8010b0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010b12:	429c      	cmp	r4, r3
 8010b14:	ee10 aa10 	vmov	sl, s0
 8010b18:	463d      	mov	r5, r7
 8010b1a:	dc06      	bgt.n	8010b2a <__ieee754_pow+0x6a>
 8010b1c:	d101      	bne.n	8010b22 <__ieee754_pow+0x62>
 8010b1e:	2e00      	cmp	r6, #0
 8010b20:	d1e7      	bne.n	8010af2 <__ieee754_pow+0x32>
 8010b22:	4598      	cmp	r8, r3
 8010b24:	dc01      	bgt.n	8010b2a <__ieee754_pow+0x6a>
 8010b26:	d10f      	bne.n	8010b48 <__ieee754_pow+0x88>
 8010b28:	b172      	cbz	r2, 8010b48 <__ieee754_pow+0x88>
 8010b2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010b2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010b32:	ea55 050a 	orrs.w	r5, r5, sl
 8010b36:	d1dc      	bne.n	8010af2 <__ieee754_pow+0x32>
 8010b38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010b3c:	18db      	adds	r3, r3, r3
 8010b3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010b42:	4152      	adcs	r2, r2
 8010b44:	429d      	cmp	r5, r3
 8010b46:	e7d0      	b.n	8010aea <__ieee754_pow+0x2a>
 8010b48:	2d00      	cmp	r5, #0
 8010b4a:	da3b      	bge.n	8010bc4 <__ieee754_pow+0x104>
 8010b4c:	4b72      	ldr	r3, [pc, #456]	; (8010d18 <__ieee754_pow+0x258>)
 8010b4e:	4598      	cmp	r8, r3
 8010b50:	dc51      	bgt.n	8010bf6 <__ieee754_pow+0x136>
 8010b52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010b56:	4598      	cmp	r8, r3
 8010b58:	f340 84ab 	ble.w	80114b2 <__ieee754_pow+0x9f2>
 8010b5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b64:	2b14      	cmp	r3, #20
 8010b66:	dd0f      	ble.n	8010b88 <__ieee754_pow+0xc8>
 8010b68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010b6c:	fa22 f103 	lsr.w	r1, r2, r3
 8010b70:	fa01 f303 	lsl.w	r3, r1, r3
 8010b74:	4293      	cmp	r3, r2
 8010b76:	f040 849c 	bne.w	80114b2 <__ieee754_pow+0x9f2>
 8010b7a:	f001 0101 	and.w	r1, r1, #1
 8010b7e:	f1c1 0302 	rsb	r3, r1, #2
 8010b82:	9304      	str	r3, [sp, #16]
 8010b84:	b182      	cbz	r2, 8010ba8 <__ieee754_pow+0xe8>
 8010b86:	e05f      	b.n	8010c48 <__ieee754_pow+0x188>
 8010b88:	2a00      	cmp	r2, #0
 8010b8a:	d15b      	bne.n	8010c44 <__ieee754_pow+0x184>
 8010b8c:	f1c3 0314 	rsb	r3, r3, #20
 8010b90:	fa48 f103 	asr.w	r1, r8, r3
 8010b94:	fa01 f303 	lsl.w	r3, r1, r3
 8010b98:	4543      	cmp	r3, r8
 8010b9a:	f040 8487 	bne.w	80114ac <__ieee754_pow+0x9ec>
 8010b9e:	f001 0101 	and.w	r1, r1, #1
 8010ba2:	f1c1 0302 	rsb	r3, r1, #2
 8010ba6:	9304      	str	r3, [sp, #16]
 8010ba8:	4b5c      	ldr	r3, [pc, #368]	; (8010d1c <__ieee754_pow+0x25c>)
 8010baa:	4598      	cmp	r8, r3
 8010bac:	d132      	bne.n	8010c14 <__ieee754_pow+0x154>
 8010bae:	f1b9 0f00 	cmp.w	r9, #0
 8010bb2:	f280 8477 	bge.w	80114a4 <__ieee754_pow+0x9e4>
 8010bb6:	4959      	ldr	r1, [pc, #356]	; (8010d1c <__ieee754_pow+0x25c>)
 8010bb8:	4632      	mov	r2, r6
 8010bba:	463b      	mov	r3, r7
 8010bbc:	2000      	movs	r0, #0
 8010bbe:	f7ef fe65 	bl	800088c <__aeabi_ddiv>
 8010bc2:	e79c      	b.n	8010afe <__ieee754_pow+0x3e>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	9304      	str	r3, [sp, #16]
 8010bc8:	2a00      	cmp	r2, #0
 8010bca:	d13d      	bne.n	8010c48 <__ieee754_pow+0x188>
 8010bcc:	4b51      	ldr	r3, [pc, #324]	; (8010d14 <__ieee754_pow+0x254>)
 8010bce:	4598      	cmp	r8, r3
 8010bd0:	d1ea      	bne.n	8010ba8 <__ieee754_pow+0xe8>
 8010bd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010bd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010bda:	ea53 030a 	orrs.w	r3, r3, sl
 8010bde:	f000 8459 	beq.w	8011494 <__ieee754_pow+0x9d4>
 8010be2:	4b4f      	ldr	r3, [pc, #316]	; (8010d20 <__ieee754_pow+0x260>)
 8010be4:	429c      	cmp	r4, r3
 8010be6:	dd08      	ble.n	8010bfa <__ieee754_pow+0x13a>
 8010be8:	f1b9 0f00 	cmp.w	r9, #0
 8010bec:	f2c0 8456 	blt.w	801149c <__ieee754_pow+0x9dc>
 8010bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bf4:	e783      	b.n	8010afe <__ieee754_pow+0x3e>
 8010bf6:	2302      	movs	r3, #2
 8010bf8:	e7e5      	b.n	8010bc6 <__ieee754_pow+0x106>
 8010bfa:	f1b9 0f00 	cmp.w	r9, #0
 8010bfe:	f04f 0000 	mov.w	r0, #0
 8010c02:	f04f 0100 	mov.w	r1, #0
 8010c06:	f6bf af7a 	bge.w	8010afe <__ieee754_pow+0x3e>
 8010c0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010c0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010c12:	e774      	b.n	8010afe <__ieee754_pow+0x3e>
 8010c14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010c18:	d106      	bne.n	8010c28 <__ieee754_pow+0x168>
 8010c1a:	4632      	mov	r2, r6
 8010c1c:	463b      	mov	r3, r7
 8010c1e:	4630      	mov	r0, r6
 8010c20:	4639      	mov	r1, r7
 8010c22:	f7ef fd09 	bl	8000638 <__aeabi_dmul>
 8010c26:	e76a      	b.n	8010afe <__ieee754_pow+0x3e>
 8010c28:	4b3e      	ldr	r3, [pc, #248]	; (8010d24 <__ieee754_pow+0x264>)
 8010c2a:	4599      	cmp	r9, r3
 8010c2c:	d10c      	bne.n	8010c48 <__ieee754_pow+0x188>
 8010c2e:	2d00      	cmp	r5, #0
 8010c30:	db0a      	blt.n	8010c48 <__ieee754_pow+0x188>
 8010c32:	ec47 6b10 	vmov	d0, r6, r7
 8010c36:	b009      	add	sp, #36	; 0x24
 8010c38:	ecbd 8b06 	vpop	{d8-d10}
 8010c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	f000 bd20 	b.w	8011684 <__ieee754_sqrt>
 8010c44:	2300      	movs	r3, #0
 8010c46:	9304      	str	r3, [sp, #16]
 8010c48:	ec47 6b10 	vmov	d0, r6, r7
 8010c4c:	f000 fc62 	bl	8011514 <fabs>
 8010c50:	ec51 0b10 	vmov	r0, r1, d0
 8010c54:	f1ba 0f00 	cmp.w	sl, #0
 8010c58:	d129      	bne.n	8010cae <__ieee754_pow+0x1ee>
 8010c5a:	b124      	cbz	r4, 8010c66 <__ieee754_pow+0x1a6>
 8010c5c:	4b2f      	ldr	r3, [pc, #188]	; (8010d1c <__ieee754_pow+0x25c>)
 8010c5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d123      	bne.n	8010cae <__ieee754_pow+0x1ee>
 8010c66:	f1b9 0f00 	cmp.w	r9, #0
 8010c6a:	da05      	bge.n	8010c78 <__ieee754_pow+0x1b8>
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	460b      	mov	r3, r1
 8010c70:	2000      	movs	r0, #0
 8010c72:	492a      	ldr	r1, [pc, #168]	; (8010d1c <__ieee754_pow+0x25c>)
 8010c74:	f7ef fe0a 	bl	800088c <__aeabi_ddiv>
 8010c78:	2d00      	cmp	r5, #0
 8010c7a:	f6bf af40 	bge.w	8010afe <__ieee754_pow+0x3e>
 8010c7e:	9b04      	ldr	r3, [sp, #16]
 8010c80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010c84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c88:	431c      	orrs	r4, r3
 8010c8a:	d108      	bne.n	8010c9e <__ieee754_pow+0x1de>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	460b      	mov	r3, r1
 8010c90:	4610      	mov	r0, r2
 8010c92:	4619      	mov	r1, r3
 8010c94:	f7ef fb18 	bl	80002c8 <__aeabi_dsub>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	e78f      	b.n	8010bbe <__ieee754_pow+0xfe>
 8010c9e:	9b04      	ldr	r3, [sp, #16]
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	f47f af2c 	bne.w	8010afe <__ieee754_pow+0x3e>
 8010ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010caa:	4619      	mov	r1, r3
 8010cac:	e727      	b.n	8010afe <__ieee754_pow+0x3e>
 8010cae:	0feb      	lsrs	r3, r5, #31
 8010cb0:	3b01      	subs	r3, #1
 8010cb2:	9306      	str	r3, [sp, #24]
 8010cb4:	9a06      	ldr	r2, [sp, #24]
 8010cb6:	9b04      	ldr	r3, [sp, #16]
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	d102      	bne.n	8010cc2 <__ieee754_pow+0x202>
 8010cbc:	4632      	mov	r2, r6
 8010cbe:	463b      	mov	r3, r7
 8010cc0:	e7e6      	b.n	8010c90 <__ieee754_pow+0x1d0>
 8010cc2:	4b19      	ldr	r3, [pc, #100]	; (8010d28 <__ieee754_pow+0x268>)
 8010cc4:	4598      	cmp	r8, r3
 8010cc6:	f340 80fb 	ble.w	8010ec0 <__ieee754_pow+0x400>
 8010cca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010cce:	4598      	cmp	r8, r3
 8010cd0:	4b13      	ldr	r3, [pc, #76]	; (8010d20 <__ieee754_pow+0x260>)
 8010cd2:	dd0c      	ble.n	8010cee <__ieee754_pow+0x22e>
 8010cd4:	429c      	cmp	r4, r3
 8010cd6:	dc0f      	bgt.n	8010cf8 <__ieee754_pow+0x238>
 8010cd8:	f1b9 0f00 	cmp.w	r9, #0
 8010cdc:	da0f      	bge.n	8010cfe <__ieee754_pow+0x23e>
 8010cde:	2000      	movs	r0, #0
 8010ce0:	b009      	add	sp, #36	; 0x24
 8010ce2:	ecbd 8b06 	vpop	{d8-d10}
 8010ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cea:	f000 bcc2 	b.w	8011672 <__math_oflow>
 8010cee:	429c      	cmp	r4, r3
 8010cf0:	dbf2      	blt.n	8010cd8 <__ieee754_pow+0x218>
 8010cf2:	4b0a      	ldr	r3, [pc, #40]	; (8010d1c <__ieee754_pow+0x25c>)
 8010cf4:	429c      	cmp	r4, r3
 8010cf6:	dd19      	ble.n	8010d2c <__ieee754_pow+0x26c>
 8010cf8:	f1b9 0f00 	cmp.w	r9, #0
 8010cfc:	dcef      	bgt.n	8010cde <__ieee754_pow+0x21e>
 8010cfe:	2000      	movs	r0, #0
 8010d00:	b009      	add	sp, #36	; 0x24
 8010d02:	ecbd 8b06 	vpop	{d8-d10}
 8010d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d0a:	f000 bca9 	b.w	8011660 <__math_uflow>
 8010d0e:	bf00      	nop
 8010d10:	fff00000 	.word	0xfff00000
 8010d14:	7ff00000 	.word	0x7ff00000
 8010d18:	433fffff 	.word	0x433fffff
 8010d1c:	3ff00000 	.word	0x3ff00000
 8010d20:	3fefffff 	.word	0x3fefffff
 8010d24:	3fe00000 	.word	0x3fe00000
 8010d28:	41e00000 	.word	0x41e00000
 8010d2c:	4b60      	ldr	r3, [pc, #384]	; (8010eb0 <__ieee754_pow+0x3f0>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f7ef faca 	bl	80002c8 <__aeabi_dsub>
 8010d34:	a354      	add	r3, pc, #336	; (adr r3, 8010e88 <__ieee754_pow+0x3c8>)
 8010d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	460d      	mov	r5, r1
 8010d3e:	f7ef fc7b 	bl	8000638 <__aeabi_dmul>
 8010d42:	a353      	add	r3, pc, #332	; (adr r3, 8010e90 <__ieee754_pow+0x3d0>)
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	4606      	mov	r6, r0
 8010d4a:	460f      	mov	r7, r1
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	4629      	mov	r1, r5
 8010d50:	f7ef fc72 	bl	8000638 <__aeabi_dmul>
 8010d54:	4b57      	ldr	r3, [pc, #348]	; (8010eb4 <__ieee754_pow+0x3f4>)
 8010d56:	4682      	mov	sl, r0
 8010d58:	468b      	mov	fp, r1
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	4629      	mov	r1, r5
 8010d60:	f7ef fc6a 	bl	8000638 <__aeabi_dmul>
 8010d64:	4602      	mov	r2, r0
 8010d66:	460b      	mov	r3, r1
 8010d68:	a14b      	add	r1, pc, #300	; (adr r1, 8010e98 <__ieee754_pow+0x3d8>)
 8010d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d6e:	f7ef faab 	bl	80002c8 <__aeabi_dsub>
 8010d72:	4622      	mov	r2, r4
 8010d74:	462b      	mov	r3, r5
 8010d76:	f7ef fc5f 	bl	8000638 <__aeabi_dmul>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	2000      	movs	r0, #0
 8010d80:	494d      	ldr	r1, [pc, #308]	; (8010eb8 <__ieee754_pow+0x3f8>)
 8010d82:	f7ef faa1 	bl	80002c8 <__aeabi_dsub>
 8010d86:	4622      	mov	r2, r4
 8010d88:	4680      	mov	r8, r0
 8010d8a:	4689      	mov	r9, r1
 8010d8c:	462b      	mov	r3, r5
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7ef fc51 	bl	8000638 <__aeabi_dmul>
 8010d96:	4602      	mov	r2, r0
 8010d98:	460b      	mov	r3, r1
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	4649      	mov	r1, r9
 8010d9e:	f7ef fc4b 	bl	8000638 <__aeabi_dmul>
 8010da2:	a33f      	add	r3, pc, #252	; (adr r3, 8010ea0 <__ieee754_pow+0x3e0>)
 8010da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da8:	f7ef fc46 	bl	8000638 <__aeabi_dmul>
 8010dac:	4602      	mov	r2, r0
 8010dae:	460b      	mov	r3, r1
 8010db0:	4650      	mov	r0, sl
 8010db2:	4659      	mov	r1, fp
 8010db4:	f7ef fa88 	bl	80002c8 <__aeabi_dsub>
 8010db8:	4602      	mov	r2, r0
 8010dba:	460b      	mov	r3, r1
 8010dbc:	4680      	mov	r8, r0
 8010dbe:	4689      	mov	r9, r1
 8010dc0:	4630      	mov	r0, r6
 8010dc2:	4639      	mov	r1, r7
 8010dc4:	f7ef fa82 	bl	80002cc <__adddf3>
 8010dc8:	2000      	movs	r0, #0
 8010dca:	4632      	mov	r2, r6
 8010dcc:	463b      	mov	r3, r7
 8010dce:	4604      	mov	r4, r0
 8010dd0:	460d      	mov	r5, r1
 8010dd2:	f7ef fa79 	bl	80002c8 <__aeabi_dsub>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	4640      	mov	r0, r8
 8010ddc:	4649      	mov	r1, r9
 8010dde:	f7ef fa73 	bl	80002c8 <__aeabi_dsub>
 8010de2:	9b04      	ldr	r3, [sp, #16]
 8010de4:	9a06      	ldr	r2, [sp, #24]
 8010de6:	3b01      	subs	r3, #1
 8010de8:	4313      	orrs	r3, r2
 8010dea:	4682      	mov	sl, r0
 8010dec:	468b      	mov	fp, r1
 8010dee:	f040 81e7 	bne.w	80111c0 <__ieee754_pow+0x700>
 8010df2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010ea8 <__ieee754_pow+0x3e8>
 8010df6:	eeb0 8a47 	vmov.f32	s16, s14
 8010dfa:	eef0 8a67 	vmov.f32	s17, s15
 8010dfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010e02:	2600      	movs	r6, #0
 8010e04:	4632      	mov	r2, r6
 8010e06:	463b      	mov	r3, r7
 8010e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e0c:	f7ef fa5c 	bl	80002c8 <__aeabi_dsub>
 8010e10:	4622      	mov	r2, r4
 8010e12:	462b      	mov	r3, r5
 8010e14:	f7ef fc10 	bl	8000638 <__aeabi_dmul>
 8010e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e1c:	4680      	mov	r8, r0
 8010e1e:	4689      	mov	r9, r1
 8010e20:	4650      	mov	r0, sl
 8010e22:	4659      	mov	r1, fp
 8010e24:	f7ef fc08 	bl	8000638 <__aeabi_dmul>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	4640      	mov	r0, r8
 8010e2e:	4649      	mov	r1, r9
 8010e30:	f7ef fa4c 	bl	80002cc <__adddf3>
 8010e34:	4632      	mov	r2, r6
 8010e36:	463b      	mov	r3, r7
 8010e38:	4680      	mov	r8, r0
 8010e3a:	4689      	mov	r9, r1
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	4629      	mov	r1, r5
 8010e40:	f7ef fbfa 	bl	8000638 <__aeabi_dmul>
 8010e44:	460b      	mov	r3, r1
 8010e46:	4604      	mov	r4, r0
 8010e48:	460d      	mov	r5, r1
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	4649      	mov	r1, r9
 8010e4e:	4640      	mov	r0, r8
 8010e50:	f7ef fa3c 	bl	80002cc <__adddf3>
 8010e54:	4b19      	ldr	r3, [pc, #100]	; (8010ebc <__ieee754_pow+0x3fc>)
 8010e56:	4299      	cmp	r1, r3
 8010e58:	ec45 4b19 	vmov	d9, r4, r5
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	460f      	mov	r7, r1
 8010e60:	468b      	mov	fp, r1
 8010e62:	f340 82f0 	ble.w	8011446 <__ieee754_pow+0x986>
 8010e66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010e6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010e6e:	4303      	orrs	r3, r0
 8010e70:	f000 81e4 	beq.w	801123c <__ieee754_pow+0x77c>
 8010e74:	ec51 0b18 	vmov	r0, r1, d8
 8010e78:	2200      	movs	r2, #0
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	f7ef fe4e 	bl	8000b1c <__aeabi_dcmplt>
 8010e80:	3800      	subs	r0, #0
 8010e82:	bf18      	it	ne
 8010e84:	2001      	movne	r0, #1
 8010e86:	e72b      	b.n	8010ce0 <__ieee754_pow+0x220>
 8010e88:	60000000 	.word	0x60000000
 8010e8c:	3ff71547 	.word	0x3ff71547
 8010e90:	f85ddf44 	.word	0xf85ddf44
 8010e94:	3e54ae0b 	.word	0x3e54ae0b
 8010e98:	55555555 	.word	0x55555555
 8010e9c:	3fd55555 	.word	0x3fd55555
 8010ea0:	652b82fe 	.word	0x652b82fe
 8010ea4:	3ff71547 	.word	0x3ff71547
 8010ea8:	00000000 	.word	0x00000000
 8010eac:	bff00000 	.word	0xbff00000
 8010eb0:	3ff00000 	.word	0x3ff00000
 8010eb4:	3fd00000 	.word	0x3fd00000
 8010eb8:	3fe00000 	.word	0x3fe00000
 8010ebc:	408fffff 	.word	0x408fffff
 8010ec0:	4bd5      	ldr	r3, [pc, #852]	; (8011218 <__ieee754_pow+0x758>)
 8010ec2:	402b      	ands	r3, r5
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	b92b      	cbnz	r3, 8010ed4 <__ieee754_pow+0x414>
 8010ec8:	4bd4      	ldr	r3, [pc, #848]	; (801121c <__ieee754_pow+0x75c>)
 8010eca:	f7ef fbb5 	bl	8000638 <__aeabi_dmul>
 8010ece:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	1523      	asrs	r3, r4, #20
 8010ed6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010eda:	4413      	add	r3, r2
 8010edc:	9305      	str	r3, [sp, #20]
 8010ede:	4bd0      	ldr	r3, [pc, #832]	; (8011220 <__ieee754_pow+0x760>)
 8010ee0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010ee4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010ee8:	429c      	cmp	r4, r3
 8010eea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010eee:	dd08      	ble.n	8010f02 <__ieee754_pow+0x442>
 8010ef0:	4bcc      	ldr	r3, [pc, #816]	; (8011224 <__ieee754_pow+0x764>)
 8010ef2:	429c      	cmp	r4, r3
 8010ef4:	f340 8162 	ble.w	80111bc <__ieee754_pow+0x6fc>
 8010ef8:	9b05      	ldr	r3, [sp, #20]
 8010efa:	3301      	adds	r3, #1
 8010efc:	9305      	str	r3, [sp, #20]
 8010efe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010f02:	2400      	movs	r4, #0
 8010f04:	00e3      	lsls	r3, r4, #3
 8010f06:	9307      	str	r3, [sp, #28]
 8010f08:	4bc7      	ldr	r3, [pc, #796]	; (8011228 <__ieee754_pow+0x768>)
 8010f0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f0e:	ed93 7b00 	vldr	d7, [r3]
 8010f12:	4629      	mov	r1, r5
 8010f14:	ec53 2b17 	vmov	r2, r3, d7
 8010f18:	eeb0 9a47 	vmov.f32	s18, s14
 8010f1c:	eef0 9a67 	vmov.f32	s19, s15
 8010f20:	4682      	mov	sl, r0
 8010f22:	f7ef f9d1 	bl	80002c8 <__aeabi_dsub>
 8010f26:	4652      	mov	r2, sl
 8010f28:	4606      	mov	r6, r0
 8010f2a:	460f      	mov	r7, r1
 8010f2c:	462b      	mov	r3, r5
 8010f2e:	ec51 0b19 	vmov	r0, r1, d9
 8010f32:	f7ef f9cb 	bl	80002cc <__adddf3>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	49bb      	ldr	r1, [pc, #748]	; (801122c <__ieee754_pow+0x76c>)
 8010f3e:	f7ef fca5 	bl	800088c <__aeabi_ddiv>
 8010f42:	ec41 0b1a 	vmov	d10, r0, r1
 8010f46:	4602      	mov	r2, r0
 8010f48:	460b      	mov	r3, r1
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	f7ef fb73 	bl	8000638 <__aeabi_dmul>
 8010f52:	2300      	movs	r3, #0
 8010f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f58:	9302      	str	r3, [sp, #8]
 8010f5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010f5e:	46ab      	mov	fp, r5
 8010f60:	106d      	asrs	r5, r5, #1
 8010f62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010f66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010f6a:	ec41 0b18 	vmov	d8, r0, r1
 8010f6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010f72:	2200      	movs	r2, #0
 8010f74:	4640      	mov	r0, r8
 8010f76:	4649      	mov	r1, r9
 8010f78:	4614      	mov	r4, r2
 8010f7a:	461d      	mov	r5, r3
 8010f7c:	f7ef fb5c 	bl	8000638 <__aeabi_dmul>
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4630      	mov	r0, r6
 8010f86:	4639      	mov	r1, r7
 8010f88:	f7ef f99e 	bl	80002c8 <__aeabi_dsub>
 8010f8c:	ec53 2b19 	vmov	r2, r3, d9
 8010f90:	4606      	mov	r6, r0
 8010f92:	460f      	mov	r7, r1
 8010f94:	4620      	mov	r0, r4
 8010f96:	4629      	mov	r1, r5
 8010f98:	f7ef f996 	bl	80002c8 <__aeabi_dsub>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	4650      	mov	r0, sl
 8010fa2:	4659      	mov	r1, fp
 8010fa4:	f7ef f990 	bl	80002c8 <__aeabi_dsub>
 8010fa8:	4642      	mov	r2, r8
 8010faa:	464b      	mov	r3, r9
 8010fac:	f7ef fb44 	bl	8000638 <__aeabi_dmul>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	4639      	mov	r1, r7
 8010fb8:	f7ef f986 	bl	80002c8 <__aeabi_dsub>
 8010fbc:	ec53 2b1a 	vmov	r2, r3, d10
 8010fc0:	f7ef fb3a 	bl	8000638 <__aeabi_dmul>
 8010fc4:	ec53 2b18 	vmov	r2, r3, d8
 8010fc8:	ec41 0b19 	vmov	d9, r0, r1
 8010fcc:	ec51 0b18 	vmov	r0, r1, d8
 8010fd0:	f7ef fb32 	bl	8000638 <__aeabi_dmul>
 8010fd4:	a37c      	add	r3, pc, #496	; (adr r3, 80111c8 <__ieee754_pow+0x708>)
 8010fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fda:	4604      	mov	r4, r0
 8010fdc:	460d      	mov	r5, r1
 8010fde:	f7ef fb2b 	bl	8000638 <__aeabi_dmul>
 8010fe2:	a37b      	add	r3, pc, #492	; (adr r3, 80111d0 <__ieee754_pow+0x710>)
 8010fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe8:	f7ef f970 	bl	80002cc <__adddf3>
 8010fec:	4622      	mov	r2, r4
 8010fee:	462b      	mov	r3, r5
 8010ff0:	f7ef fb22 	bl	8000638 <__aeabi_dmul>
 8010ff4:	a378      	add	r3, pc, #480	; (adr r3, 80111d8 <__ieee754_pow+0x718>)
 8010ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffa:	f7ef f967 	bl	80002cc <__adddf3>
 8010ffe:	4622      	mov	r2, r4
 8011000:	462b      	mov	r3, r5
 8011002:	f7ef fb19 	bl	8000638 <__aeabi_dmul>
 8011006:	a376      	add	r3, pc, #472	; (adr r3, 80111e0 <__ieee754_pow+0x720>)
 8011008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100c:	f7ef f95e 	bl	80002cc <__adddf3>
 8011010:	4622      	mov	r2, r4
 8011012:	462b      	mov	r3, r5
 8011014:	f7ef fb10 	bl	8000638 <__aeabi_dmul>
 8011018:	a373      	add	r3, pc, #460	; (adr r3, 80111e8 <__ieee754_pow+0x728>)
 801101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101e:	f7ef f955 	bl	80002cc <__adddf3>
 8011022:	4622      	mov	r2, r4
 8011024:	462b      	mov	r3, r5
 8011026:	f7ef fb07 	bl	8000638 <__aeabi_dmul>
 801102a:	a371      	add	r3, pc, #452	; (adr r3, 80111f0 <__ieee754_pow+0x730>)
 801102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011030:	f7ef f94c 	bl	80002cc <__adddf3>
 8011034:	4622      	mov	r2, r4
 8011036:	4606      	mov	r6, r0
 8011038:	460f      	mov	r7, r1
 801103a:	462b      	mov	r3, r5
 801103c:	4620      	mov	r0, r4
 801103e:	4629      	mov	r1, r5
 8011040:	f7ef fafa 	bl	8000638 <__aeabi_dmul>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	4630      	mov	r0, r6
 801104a:	4639      	mov	r1, r7
 801104c:	f7ef faf4 	bl	8000638 <__aeabi_dmul>
 8011050:	4642      	mov	r2, r8
 8011052:	4604      	mov	r4, r0
 8011054:	460d      	mov	r5, r1
 8011056:	464b      	mov	r3, r9
 8011058:	ec51 0b18 	vmov	r0, r1, d8
 801105c:	f7ef f936 	bl	80002cc <__adddf3>
 8011060:	ec53 2b19 	vmov	r2, r3, d9
 8011064:	f7ef fae8 	bl	8000638 <__aeabi_dmul>
 8011068:	4622      	mov	r2, r4
 801106a:	462b      	mov	r3, r5
 801106c:	f7ef f92e 	bl	80002cc <__adddf3>
 8011070:	4642      	mov	r2, r8
 8011072:	4682      	mov	sl, r0
 8011074:	468b      	mov	fp, r1
 8011076:	464b      	mov	r3, r9
 8011078:	4640      	mov	r0, r8
 801107a:	4649      	mov	r1, r9
 801107c:	f7ef fadc 	bl	8000638 <__aeabi_dmul>
 8011080:	4b6b      	ldr	r3, [pc, #428]	; (8011230 <__ieee754_pow+0x770>)
 8011082:	2200      	movs	r2, #0
 8011084:	4606      	mov	r6, r0
 8011086:	460f      	mov	r7, r1
 8011088:	f7ef f920 	bl	80002cc <__adddf3>
 801108c:	4652      	mov	r2, sl
 801108e:	465b      	mov	r3, fp
 8011090:	f7ef f91c 	bl	80002cc <__adddf3>
 8011094:	2000      	movs	r0, #0
 8011096:	4604      	mov	r4, r0
 8011098:	460d      	mov	r5, r1
 801109a:	4602      	mov	r2, r0
 801109c:	460b      	mov	r3, r1
 801109e:	4640      	mov	r0, r8
 80110a0:	4649      	mov	r1, r9
 80110a2:	f7ef fac9 	bl	8000638 <__aeabi_dmul>
 80110a6:	4b62      	ldr	r3, [pc, #392]	; (8011230 <__ieee754_pow+0x770>)
 80110a8:	4680      	mov	r8, r0
 80110aa:	4689      	mov	r9, r1
 80110ac:	2200      	movs	r2, #0
 80110ae:	4620      	mov	r0, r4
 80110b0:	4629      	mov	r1, r5
 80110b2:	f7ef f909 	bl	80002c8 <__aeabi_dsub>
 80110b6:	4632      	mov	r2, r6
 80110b8:	463b      	mov	r3, r7
 80110ba:	f7ef f905 	bl	80002c8 <__aeabi_dsub>
 80110be:	4602      	mov	r2, r0
 80110c0:	460b      	mov	r3, r1
 80110c2:	4650      	mov	r0, sl
 80110c4:	4659      	mov	r1, fp
 80110c6:	f7ef f8ff 	bl	80002c8 <__aeabi_dsub>
 80110ca:	ec53 2b18 	vmov	r2, r3, d8
 80110ce:	f7ef fab3 	bl	8000638 <__aeabi_dmul>
 80110d2:	4622      	mov	r2, r4
 80110d4:	4606      	mov	r6, r0
 80110d6:	460f      	mov	r7, r1
 80110d8:	462b      	mov	r3, r5
 80110da:	ec51 0b19 	vmov	r0, r1, d9
 80110de:	f7ef faab 	bl	8000638 <__aeabi_dmul>
 80110e2:	4602      	mov	r2, r0
 80110e4:	460b      	mov	r3, r1
 80110e6:	4630      	mov	r0, r6
 80110e8:	4639      	mov	r1, r7
 80110ea:	f7ef f8ef 	bl	80002cc <__adddf3>
 80110ee:	4606      	mov	r6, r0
 80110f0:	460f      	mov	r7, r1
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	4640      	mov	r0, r8
 80110f8:	4649      	mov	r1, r9
 80110fa:	f7ef f8e7 	bl	80002cc <__adddf3>
 80110fe:	a33e      	add	r3, pc, #248	; (adr r3, 80111f8 <__ieee754_pow+0x738>)
 8011100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011104:	2000      	movs	r0, #0
 8011106:	4604      	mov	r4, r0
 8011108:	460d      	mov	r5, r1
 801110a:	f7ef fa95 	bl	8000638 <__aeabi_dmul>
 801110e:	4642      	mov	r2, r8
 8011110:	ec41 0b18 	vmov	d8, r0, r1
 8011114:	464b      	mov	r3, r9
 8011116:	4620      	mov	r0, r4
 8011118:	4629      	mov	r1, r5
 801111a:	f7ef f8d5 	bl	80002c8 <__aeabi_dsub>
 801111e:	4602      	mov	r2, r0
 8011120:	460b      	mov	r3, r1
 8011122:	4630      	mov	r0, r6
 8011124:	4639      	mov	r1, r7
 8011126:	f7ef f8cf 	bl	80002c8 <__aeabi_dsub>
 801112a:	a335      	add	r3, pc, #212	; (adr r3, 8011200 <__ieee754_pow+0x740>)
 801112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011130:	f7ef fa82 	bl	8000638 <__aeabi_dmul>
 8011134:	a334      	add	r3, pc, #208	; (adr r3, 8011208 <__ieee754_pow+0x748>)
 8011136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113a:	4606      	mov	r6, r0
 801113c:	460f      	mov	r7, r1
 801113e:	4620      	mov	r0, r4
 8011140:	4629      	mov	r1, r5
 8011142:	f7ef fa79 	bl	8000638 <__aeabi_dmul>
 8011146:	4602      	mov	r2, r0
 8011148:	460b      	mov	r3, r1
 801114a:	4630      	mov	r0, r6
 801114c:	4639      	mov	r1, r7
 801114e:	f7ef f8bd 	bl	80002cc <__adddf3>
 8011152:	9a07      	ldr	r2, [sp, #28]
 8011154:	4b37      	ldr	r3, [pc, #220]	; (8011234 <__ieee754_pow+0x774>)
 8011156:	4413      	add	r3, r2
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	f7ef f8b6 	bl	80002cc <__adddf3>
 8011160:	4682      	mov	sl, r0
 8011162:	9805      	ldr	r0, [sp, #20]
 8011164:	468b      	mov	fp, r1
 8011166:	f7ef f9fd 	bl	8000564 <__aeabi_i2d>
 801116a:	9a07      	ldr	r2, [sp, #28]
 801116c:	4b32      	ldr	r3, [pc, #200]	; (8011238 <__ieee754_pow+0x778>)
 801116e:	4413      	add	r3, r2
 8011170:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011174:	4606      	mov	r6, r0
 8011176:	460f      	mov	r7, r1
 8011178:	4652      	mov	r2, sl
 801117a:	465b      	mov	r3, fp
 801117c:	ec51 0b18 	vmov	r0, r1, d8
 8011180:	f7ef f8a4 	bl	80002cc <__adddf3>
 8011184:	4642      	mov	r2, r8
 8011186:	464b      	mov	r3, r9
 8011188:	f7ef f8a0 	bl	80002cc <__adddf3>
 801118c:	4632      	mov	r2, r6
 801118e:	463b      	mov	r3, r7
 8011190:	f7ef f89c 	bl	80002cc <__adddf3>
 8011194:	2000      	movs	r0, #0
 8011196:	4632      	mov	r2, r6
 8011198:	463b      	mov	r3, r7
 801119a:	4604      	mov	r4, r0
 801119c:	460d      	mov	r5, r1
 801119e:	f7ef f893 	bl	80002c8 <__aeabi_dsub>
 80111a2:	4642      	mov	r2, r8
 80111a4:	464b      	mov	r3, r9
 80111a6:	f7ef f88f 	bl	80002c8 <__aeabi_dsub>
 80111aa:	ec53 2b18 	vmov	r2, r3, d8
 80111ae:	f7ef f88b 	bl	80002c8 <__aeabi_dsub>
 80111b2:	4602      	mov	r2, r0
 80111b4:	460b      	mov	r3, r1
 80111b6:	4650      	mov	r0, sl
 80111b8:	4659      	mov	r1, fp
 80111ba:	e610      	b.n	8010dde <__ieee754_pow+0x31e>
 80111bc:	2401      	movs	r4, #1
 80111be:	e6a1      	b.n	8010f04 <__ieee754_pow+0x444>
 80111c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011210 <__ieee754_pow+0x750>
 80111c4:	e617      	b.n	8010df6 <__ieee754_pow+0x336>
 80111c6:	bf00      	nop
 80111c8:	4a454eef 	.word	0x4a454eef
 80111cc:	3fca7e28 	.word	0x3fca7e28
 80111d0:	93c9db65 	.word	0x93c9db65
 80111d4:	3fcd864a 	.word	0x3fcd864a
 80111d8:	a91d4101 	.word	0xa91d4101
 80111dc:	3fd17460 	.word	0x3fd17460
 80111e0:	518f264d 	.word	0x518f264d
 80111e4:	3fd55555 	.word	0x3fd55555
 80111e8:	db6fabff 	.word	0xdb6fabff
 80111ec:	3fdb6db6 	.word	0x3fdb6db6
 80111f0:	33333303 	.word	0x33333303
 80111f4:	3fe33333 	.word	0x3fe33333
 80111f8:	e0000000 	.word	0xe0000000
 80111fc:	3feec709 	.word	0x3feec709
 8011200:	dc3a03fd 	.word	0xdc3a03fd
 8011204:	3feec709 	.word	0x3feec709
 8011208:	145b01f5 	.word	0x145b01f5
 801120c:	be3e2fe0 	.word	0xbe3e2fe0
 8011210:	00000000 	.word	0x00000000
 8011214:	3ff00000 	.word	0x3ff00000
 8011218:	7ff00000 	.word	0x7ff00000
 801121c:	43400000 	.word	0x43400000
 8011220:	0003988e 	.word	0x0003988e
 8011224:	000bb679 	.word	0x000bb679
 8011228:	08012090 	.word	0x08012090
 801122c:	3ff00000 	.word	0x3ff00000
 8011230:	40080000 	.word	0x40080000
 8011234:	080120b0 	.word	0x080120b0
 8011238:	080120a0 	.word	0x080120a0
 801123c:	a3b3      	add	r3, pc, #716	; (adr r3, 801150c <__ieee754_pow+0xa4c>)
 801123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011242:	4640      	mov	r0, r8
 8011244:	4649      	mov	r1, r9
 8011246:	f7ef f841 	bl	80002cc <__adddf3>
 801124a:	4622      	mov	r2, r4
 801124c:	ec41 0b1a 	vmov	d10, r0, r1
 8011250:	462b      	mov	r3, r5
 8011252:	4630      	mov	r0, r6
 8011254:	4639      	mov	r1, r7
 8011256:	f7ef f837 	bl	80002c8 <__aeabi_dsub>
 801125a:	4602      	mov	r2, r0
 801125c:	460b      	mov	r3, r1
 801125e:	ec51 0b1a 	vmov	r0, r1, d10
 8011262:	f7ef fc79 	bl	8000b58 <__aeabi_dcmpgt>
 8011266:	2800      	cmp	r0, #0
 8011268:	f47f ae04 	bne.w	8010e74 <__ieee754_pow+0x3b4>
 801126c:	4aa2      	ldr	r2, [pc, #648]	; (80114f8 <__ieee754_pow+0xa38>)
 801126e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011272:	4293      	cmp	r3, r2
 8011274:	f340 8107 	ble.w	8011486 <__ieee754_pow+0x9c6>
 8011278:	151b      	asrs	r3, r3, #20
 801127a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801127e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011282:	fa4a fa03 	asr.w	sl, sl, r3
 8011286:	44da      	add	sl, fp
 8011288:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801128c:	489b      	ldr	r0, [pc, #620]	; (80114fc <__ieee754_pow+0xa3c>)
 801128e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011292:	4108      	asrs	r0, r1
 8011294:	ea00 030a 	and.w	r3, r0, sl
 8011298:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801129c:	f1c1 0114 	rsb	r1, r1, #20
 80112a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80112a4:	fa4a fa01 	asr.w	sl, sl, r1
 80112a8:	f1bb 0f00 	cmp.w	fp, #0
 80112ac:	f04f 0200 	mov.w	r2, #0
 80112b0:	4620      	mov	r0, r4
 80112b2:	4629      	mov	r1, r5
 80112b4:	bfb8      	it	lt
 80112b6:	f1ca 0a00 	rsblt	sl, sl, #0
 80112ba:	f7ef f805 	bl	80002c8 <__aeabi_dsub>
 80112be:	ec41 0b19 	vmov	d9, r0, r1
 80112c2:	4642      	mov	r2, r8
 80112c4:	464b      	mov	r3, r9
 80112c6:	ec51 0b19 	vmov	r0, r1, d9
 80112ca:	f7ee ffff 	bl	80002cc <__adddf3>
 80112ce:	a37a      	add	r3, pc, #488	; (adr r3, 80114b8 <__ieee754_pow+0x9f8>)
 80112d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d4:	2000      	movs	r0, #0
 80112d6:	4604      	mov	r4, r0
 80112d8:	460d      	mov	r5, r1
 80112da:	f7ef f9ad 	bl	8000638 <__aeabi_dmul>
 80112de:	ec53 2b19 	vmov	r2, r3, d9
 80112e2:	4606      	mov	r6, r0
 80112e4:	460f      	mov	r7, r1
 80112e6:	4620      	mov	r0, r4
 80112e8:	4629      	mov	r1, r5
 80112ea:	f7ee ffed 	bl	80002c8 <__aeabi_dsub>
 80112ee:	4602      	mov	r2, r0
 80112f0:	460b      	mov	r3, r1
 80112f2:	4640      	mov	r0, r8
 80112f4:	4649      	mov	r1, r9
 80112f6:	f7ee ffe7 	bl	80002c8 <__aeabi_dsub>
 80112fa:	a371      	add	r3, pc, #452	; (adr r3, 80114c0 <__ieee754_pow+0xa00>)
 80112fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011300:	f7ef f99a 	bl	8000638 <__aeabi_dmul>
 8011304:	a370      	add	r3, pc, #448	; (adr r3, 80114c8 <__ieee754_pow+0xa08>)
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	4680      	mov	r8, r0
 801130c:	4689      	mov	r9, r1
 801130e:	4620      	mov	r0, r4
 8011310:	4629      	mov	r1, r5
 8011312:	f7ef f991 	bl	8000638 <__aeabi_dmul>
 8011316:	4602      	mov	r2, r0
 8011318:	460b      	mov	r3, r1
 801131a:	4640      	mov	r0, r8
 801131c:	4649      	mov	r1, r9
 801131e:	f7ee ffd5 	bl	80002cc <__adddf3>
 8011322:	4604      	mov	r4, r0
 8011324:	460d      	mov	r5, r1
 8011326:	4602      	mov	r2, r0
 8011328:	460b      	mov	r3, r1
 801132a:	4630      	mov	r0, r6
 801132c:	4639      	mov	r1, r7
 801132e:	f7ee ffcd 	bl	80002cc <__adddf3>
 8011332:	4632      	mov	r2, r6
 8011334:	463b      	mov	r3, r7
 8011336:	4680      	mov	r8, r0
 8011338:	4689      	mov	r9, r1
 801133a:	f7ee ffc5 	bl	80002c8 <__aeabi_dsub>
 801133e:	4602      	mov	r2, r0
 8011340:	460b      	mov	r3, r1
 8011342:	4620      	mov	r0, r4
 8011344:	4629      	mov	r1, r5
 8011346:	f7ee ffbf 	bl	80002c8 <__aeabi_dsub>
 801134a:	4642      	mov	r2, r8
 801134c:	4606      	mov	r6, r0
 801134e:	460f      	mov	r7, r1
 8011350:	464b      	mov	r3, r9
 8011352:	4640      	mov	r0, r8
 8011354:	4649      	mov	r1, r9
 8011356:	f7ef f96f 	bl	8000638 <__aeabi_dmul>
 801135a:	a35d      	add	r3, pc, #372	; (adr r3, 80114d0 <__ieee754_pow+0xa10>)
 801135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011360:	4604      	mov	r4, r0
 8011362:	460d      	mov	r5, r1
 8011364:	f7ef f968 	bl	8000638 <__aeabi_dmul>
 8011368:	a35b      	add	r3, pc, #364	; (adr r3, 80114d8 <__ieee754_pow+0xa18>)
 801136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136e:	f7ee ffab 	bl	80002c8 <__aeabi_dsub>
 8011372:	4622      	mov	r2, r4
 8011374:	462b      	mov	r3, r5
 8011376:	f7ef f95f 	bl	8000638 <__aeabi_dmul>
 801137a:	a359      	add	r3, pc, #356	; (adr r3, 80114e0 <__ieee754_pow+0xa20>)
 801137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011380:	f7ee ffa4 	bl	80002cc <__adddf3>
 8011384:	4622      	mov	r2, r4
 8011386:	462b      	mov	r3, r5
 8011388:	f7ef f956 	bl	8000638 <__aeabi_dmul>
 801138c:	a356      	add	r3, pc, #344	; (adr r3, 80114e8 <__ieee754_pow+0xa28>)
 801138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011392:	f7ee ff99 	bl	80002c8 <__aeabi_dsub>
 8011396:	4622      	mov	r2, r4
 8011398:	462b      	mov	r3, r5
 801139a:	f7ef f94d 	bl	8000638 <__aeabi_dmul>
 801139e:	a354      	add	r3, pc, #336	; (adr r3, 80114f0 <__ieee754_pow+0xa30>)
 80113a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a4:	f7ee ff92 	bl	80002cc <__adddf3>
 80113a8:	4622      	mov	r2, r4
 80113aa:	462b      	mov	r3, r5
 80113ac:	f7ef f944 	bl	8000638 <__aeabi_dmul>
 80113b0:	4602      	mov	r2, r0
 80113b2:	460b      	mov	r3, r1
 80113b4:	4640      	mov	r0, r8
 80113b6:	4649      	mov	r1, r9
 80113b8:	f7ee ff86 	bl	80002c8 <__aeabi_dsub>
 80113bc:	4604      	mov	r4, r0
 80113be:	460d      	mov	r5, r1
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	4640      	mov	r0, r8
 80113c6:	4649      	mov	r1, r9
 80113c8:	f7ef f936 	bl	8000638 <__aeabi_dmul>
 80113cc:	2200      	movs	r2, #0
 80113ce:	ec41 0b19 	vmov	d9, r0, r1
 80113d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113d6:	4620      	mov	r0, r4
 80113d8:	4629      	mov	r1, r5
 80113da:	f7ee ff75 	bl	80002c8 <__aeabi_dsub>
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	ec51 0b19 	vmov	r0, r1, d9
 80113e6:	f7ef fa51 	bl	800088c <__aeabi_ddiv>
 80113ea:	4632      	mov	r2, r6
 80113ec:	4604      	mov	r4, r0
 80113ee:	460d      	mov	r5, r1
 80113f0:	463b      	mov	r3, r7
 80113f2:	4640      	mov	r0, r8
 80113f4:	4649      	mov	r1, r9
 80113f6:	f7ef f91f 	bl	8000638 <__aeabi_dmul>
 80113fa:	4632      	mov	r2, r6
 80113fc:	463b      	mov	r3, r7
 80113fe:	f7ee ff65 	bl	80002cc <__adddf3>
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	4620      	mov	r0, r4
 8011408:	4629      	mov	r1, r5
 801140a:	f7ee ff5d 	bl	80002c8 <__aeabi_dsub>
 801140e:	4642      	mov	r2, r8
 8011410:	464b      	mov	r3, r9
 8011412:	f7ee ff59 	bl	80002c8 <__aeabi_dsub>
 8011416:	460b      	mov	r3, r1
 8011418:	4602      	mov	r2, r0
 801141a:	4939      	ldr	r1, [pc, #228]	; (8011500 <__ieee754_pow+0xa40>)
 801141c:	2000      	movs	r0, #0
 801141e:	f7ee ff53 	bl	80002c8 <__aeabi_dsub>
 8011422:	ec41 0b10 	vmov	d0, r0, r1
 8011426:	ee10 3a90 	vmov	r3, s1
 801142a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801142e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011432:	da2b      	bge.n	801148c <__ieee754_pow+0x9cc>
 8011434:	4650      	mov	r0, sl
 8011436:	f000 f877 	bl	8011528 <scalbn>
 801143a:	ec51 0b10 	vmov	r0, r1, d0
 801143e:	ec53 2b18 	vmov	r2, r3, d8
 8011442:	f7ff bbee 	b.w	8010c22 <__ieee754_pow+0x162>
 8011446:	4b2f      	ldr	r3, [pc, #188]	; (8011504 <__ieee754_pow+0xa44>)
 8011448:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801144c:	429e      	cmp	r6, r3
 801144e:	f77f af0d 	ble.w	801126c <__ieee754_pow+0x7ac>
 8011452:	4b2d      	ldr	r3, [pc, #180]	; (8011508 <__ieee754_pow+0xa48>)
 8011454:	440b      	add	r3, r1
 8011456:	4303      	orrs	r3, r0
 8011458:	d009      	beq.n	801146e <__ieee754_pow+0x9ae>
 801145a:	ec51 0b18 	vmov	r0, r1, d8
 801145e:	2200      	movs	r2, #0
 8011460:	2300      	movs	r3, #0
 8011462:	f7ef fb5b 	bl	8000b1c <__aeabi_dcmplt>
 8011466:	3800      	subs	r0, #0
 8011468:	bf18      	it	ne
 801146a:	2001      	movne	r0, #1
 801146c:	e448      	b.n	8010d00 <__ieee754_pow+0x240>
 801146e:	4622      	mov	r2, r4
 8011470:	462b      	mov	r3, r5
 8011472:	f7ee ff29 	bl	80002c8 <__aeabi_dsub>
 8011476:	4642      	mov	r2, r8
 8011478:	464b      	mov	r3, r9
 801147a:	f7ef fb63 	bl	8000b44 <__aeabi_dcmpge>
 801147e:	2800      	cmp	r0, #0
 8011480:	f43f aef4 	beq.w	801126c <__ieee754_pow+0x7ac>
 8011484:	e7e9      	b.n	801145a <__ieee754_pow+0x99a>
 8011486:	f04f 0a00 	mov.w	sl, #0
 801148a:	e71a      	b.n	80112c2 <__ieee754_pow+0x802>
 801148c:	ec51 0b10 	vmov	r0, r1, d0
 8011490:	4619      	mov	r1, r3
 8011492:	e7d4      	b.n	801143e <__ieee754_pow+0x97e>
 8011494:	491a      	ldr	r1, [pc, #104]	; (8011500 <__ieee754_pow+0xa40>)
 8011496:	2000      	movs	r0, #0
 8011498:	f7ff bb31 	b.w	8010afe <__ieee754_pow+0x3e>
 801149c:	2000      	movs	r0, #0
 801149e:	2100      	movs	r1, #0
 80114a0:	f7ff bb2d 	b.w	8010afe <__ieee754_pow+0x3e>
 80114a4:	4630      	mov	r0, r6
 80114a6:	4639      	mov	r1, r7
 80114a8:	f7ff bb29 	b.w	8010afe <__ieee754_pow+0x3e>
 80114ac:	9204      	str	r2, [sp, #16]
 80114ae:	f7ff bb7b 	b.w	8010ba8 <__ieee754_pow+0xe8>
 80114b2:	2300      	movs	r3, #0
 80114b4:	f7ff bb65 	b.w	8010b82 <__ieee754_pow+0xc2>
 80114b8:	00000000 	.word	0x00000000
 80114bc:	3fe62e43 	.word	0x3fe62e43
 80114c0:	fefa39ef 	.word	0xfefa39ef
 80114c4:	3fe62e42 	.word	0x3fe62e42
 80114c8:	0ca86c39 	.word	0x0ca86c39
 80114cc:	be205c61 	.word	0xbe205c61
 80114d0:	72bea4d0 	.word	0x72bea4d0
 80114d4:	3e663769 	.word	0x3e663769
 80114d8:	c5d26bf1 	.word	0xc5d26bf1
 80114dc:	3ebbbd41 	.word	0x3ebbbd41
 80114e0:	af25de2c 	.word	0xaf25de2c
 80114e4:	3f11566a 	.word	0x3f11566a
 80114e8:	16bebd93 	.word	0x16bebd93
 80114ec:	3f66c16c 	.word	0x3f66c16c
 80114f0:	5555553e 	.word	0x5555553e
 80114f4:	3fc55555 	.word	0x3fc55555
 80114f8:	3fe00000 	.word	0x3fe00000
 80114fc:	fff00000 	.word	0xfff00000
 8011500:	3ff00000 	.word	0x3ff00000
 8011504:	4090cbff 	.word	0x4090cbff
 8011508:	3f6f3400 	.word	0x3f6f3400
 801150c:	652b82fe 	.word	0x652b82fe
 8011510:	3c971547 	.word	0x3c971547

08011514 <fabs>:
 8011514:	ec51 0b10 	vmov	r0, r1, d0
 8011518:	ee10 2a10 	vmov	r2, s0
 801151c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011520:	ec43 2b10 	vmov	d0, r2, r3
 8011524:	4770      	bx	lr
	...

08011528 <scalbn>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	ec55 4b10 	vmov	r4, r5, d0
 801152e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011532:	4606      	mov	r6, r0
 8011534:	462b      	mov	r3, r5
 8011536:	b999      	cbnz	r1, 8011560 <scalbn+0x38>
 8011538:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801153c:	4323      	orrs	r3, r4
 801153e:	d03f      	beq.n	80115c0 <scalbn+0x98>
 8011540:	4b35      	ldr	r3, [pc, #212]	; (8011618 <scalbn+0xf0>)
 8011542:	4629      	mov	r1, r5
 8011544:	ee10 0a10 	vmov	r0, s0
 8011548:	2200      	movs	r2, #0
 801154a:	f7ef f875 	bl	8000638 <__aeabi_dmul>
 801154e:	4b33      	ldr	r3, [pc, #204]	; (801161c <scalbn+0xf4>)
 8011550:	429e      	cmp	r6, r3
 8011552:	4604      	mov	r4, r0
 8011554:	460d      	mov	r5, r1
 8011556:	da10      	bge.n	801157a <scalbn+0x52>
 8011558:	a327      	add	r3, pc, #156	; (adr r3, 80115f8 <scalbn+0xd0>)
 801155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155e:	e01f      	b.n	80115a0 <scalbn+0x78>
 8011560:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011564:	4291      	cmp	r1, r2
 8011566:	d10c      	bne.n	8011582 <scalbn+0x5a>
 8011568:	ee10 2a10 	vmov	r2, s0
 801156c:	4620      	mov	r0, r4
 801156e:	4629      	mov	r1, r5
 8011570:	f7ee feac 	bl	80002cc <__adddf3>
 8011574:	4604      	mov	r4, r0
 8011576:	460d      	mov	r5, r1
 8011578:	e022      	b.n	80115c0 <scalbn+0x98>
 801157a:	460b      	mov	r3, r1
 801157c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011580:	3936      	subs	r1, #54	; 0x36
 8011582:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011586:	4296      	cmp	r6, r2
 8011588:	dd0d      	ble.n	80115a6 <scalbn+0x7e>
 801158a:	2d00      	cmp	r5, #0
 801158c:	a11c      	add	r1, pc, #112	; (adr r1, 8011600 <scalbn+0xd8>)
 801158e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011592:	da02      	bge.n	801159a <scalbn+0x72>
 8011594:	a11c      	add	r1, pc, #112	; (adr r1, 8011608 <scalbn+0xe0>)
 8011596:	e9d1 0100 	ldrd	r0, r1, [r1]
 801159a:	a319      	add	r3, pc, #100	; (adr r3, 8011600 <scalbn+0xd8>)
 801159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a0:	f7ef f84a 	bl	8000638 <__aeabi_dmul>
 80115a4:	e7e6      	b.n	8011574 <scalbn+0x4c>
 80115a6:	1872      	adds	r2, r6, r1
 80115a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80115ac:	428a      	cmp	r2, r1
 80115ae:	dcec      	bgt.n	801158a <scalbn+0x62>
 80115b0:	2a00      	cmp	r2, #0
 80115b2:	dd08      	ble.n	80115c6 <scalbn+0x9e>
 80115b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80115b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80115bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80115c0:	ec45 4b10 	vmov	d0, r4, r5
 80115c4:	bd70      	pop	{r4, r5, r6, pc}
 80115c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80115ca:	da08      	bge.n	80115de <scalbn+0xb6>
 80115cc:	2d00      	cmp	r5, #0
 80115ce:	a10a      	add	r1, pc, #40	; (adr r1, 80115f8 <scalbn+0xd0>)
 80115d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115d4:	dac0      	bge.n	8011558 <scalbn+0x30>
 80115d6:	a10e      	add	r1, pc, #56	; (adr r1, 8011610 <scalbn+0xe8>)
 80115d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115dc:	e7bc      	b.n	8011558 <scalbn+0x30>
 80115de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80115e2:	3236      	adds	r2, #54	; 0x36
 80115e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80115e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80115ec:	4620      	mov	r0, r4
 80115ee:	4b0c      	ldr	r3, [pc, #48]	; (8011620 <scalbn+0xf8>)
 80115f0:	2200      	movs	r2, #0
 80115f2:	e7d5      	b.n	80115a0 <scalbn+0x78>
 80115f4:	f3af 8000 	nop.w
 80115f8:	c2f8f359 	.word	0xc2f8f359
 80115fc:	01a56e1f 	.word	0x01a56e1f
 8011600:	8800759c 	.word	0x8800759c
 8011604:	7e37e43c 	.word	0x7e37e43c
 8011608:	8800759c 	.word	0x8800759c
 801160c:	fe37e43c 	.word	0xfe37e43c
 8011610:	c2f8f359 	.word	0xc2f8f359
 8011614:	81a56e1f 	.word	0x81a56e1f
 8011618:	43500000 	.word	0x43500000
 801161c:	ffff3cb0 	.word	0xffff3cb0
 8011620:	3c900000 	.word	0x3c900000

08011624 <with_errno>:
 8011624:	b570      	push	{r4, r5, r6, lr}
 8011626:	4604      	mov	r4, r0
 8011628:	460d      	mov	r5, r1
 801162a:	4616      	mov	r6, r2
 801162c:	f7fd f800 	bl	800e630 <__errno>
 8011630:	4629      	mov	r1, r5
 8011632:	6006      	str	r6, [r0, #0]
 8011634:	4620      	mov	r0, r4
 8011636:	bd70      	pop	{r4, r5, r6, pc}

08011638 <xflow>:
 8011638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801163a:	4614      	mov	r4, r2
 801163c:	461d      	mov	r5, r3
 801163e:	b108      	cbz	r0, 8011644 <xflow+0xc>
 8011640:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011644:	e9cd 2300 	strd	r2, r3, [sp]
 8011648:	e9dd 2300 	ldrd	r2, r3, [sp]
 801164c:	4620      	mov	r0, r4
 801164e:	4629      	mov	r1, r5
 8011650:	f7ee fff2 	bl	8000638 <__aeabi_dmul>
 8011654:	2222      	movs	r2, #34	; 0x22
 8011656:	b003      	add	sp, #12
 8011658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801165c:	f7ff bfe2 	b.w	8011624 <with_errno>

08011660 <__math_uflow>:
 8011660:	b508      	push	{r3, lr}
 8011662:	2200      	movs	r2, #0
 8011664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011668:	f7ff ffe6 	bl	8011638 <xflow>
 801166c:	ec41 0b10 	vmov	d0, r0, r1
 8011670:	bd08      	pop	{r3, pc}

08011672 <__math_oflow>:
 8011672:	b508      	push	{r3, lr}
 8011674:	2200      	movs	r2, #0
 8011676:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801167a:	f7ff ffdd 	bl	8011638 <xflow>
 801167e:	ec41 0b10 	vmov	d0, r0, r1
 8011682:	bd08      	pop	{r3, pc}

08011684 <__ieee754_sqrt>:
 8011684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011688:	ec55 4b10 	vmov	r4, r5, d0
 801168c:	4e67      	ldr	r6, [pc, #412]	; (801182c <__ieee754_sqrt+0x1a8>)
 801168e:	43ae      	bics	r6, r5
 8011690:	ee10 0a10 	vmov	r0, s0
 8011694:	ee10 2a10 	vmov	r2, s0
 8011698:	4629      	mov	r1, r5
 801169a:	462b      	mov	r3, r5
 801169c:	d10d      	bne.n	80116ba <__ieee754_sqrt+0x36>
 801169e:	f7ee ffcb 	bl	8000638 <__aeabi_dmul>
 80116a2:	4602      	mov	r2, r0
 80116a4:	460b      	mov	r3, r1
 80116a6:	4620      	mov	r0, r4
 80116a8:	4629      	mov	r1, r5
 80116aa:	f7ee fe0f 	bl	80002cc <__adddf3>
 80116ae:	4604      	mov	r4, r0
 80116b0:	460d      	mov	r5, r1
 80116b2:	ec45 4b10 	vmov	d0, r4, r5
 80116b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ba:	2d00      	cmp	r5, #0
 80116bc:	dc0b      	bgt.n	80116d6 <__ieee754_sqrt+0x52>
 80116be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80116c2:	4326      	orrs	r6, r4
 80116c4:	d0f5      	beq.n	80116b2 <__ieee754_sqrt+0x2e>
 80116c6:	b135      	cbz	r5, 80116d6 <__ieee754_sqrt+0x52>
 80116c8:	f7ee fdfe 	bl	80002c8 <__aeabi_dsub>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	f7ef f8dc 	bl	800088c <__aeabi_ddiv>
 80116d4:	e7eb      	b.n	80116ae <__ieee754_sqrt+0x2a>
 80116d6:	1509      	asrs	r1, r1, #20
 80116d8:	f000 808d 	beq.w	80117f6 <__ieee754_sqrt+0x172>
 80116dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80116e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80116e8:	07c9      	lsls	r1, r1, #31
 80116ea:	bf5c      	itt	pl
 80116ec:	005b      	lslpl	r3, r3, #1
 80116ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80116f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80116f6:	bf58      	it	pl
 80116f8:	0052      	lslpl	r2, r2, #1
 80116fa:	2500      	movs	r5, #0
 80116fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011700:	1076      	asrs	r6, r6, #1
 8011702:	0052      	lsls	r2, r2, #1
 8011704:	f04f 0e16 	mov.w	lr, #22
 8011708:	46ac      	mov	ip, r5
 801170a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801170e:	eb0c 0001 	add.w	r0, ip, r1
 8011712:	4298      	cmp	r0, r3
 8011714:	bfde      	ittt	le
 8011716:	1a1b      	suble	r3, r3, r0
 8011718:	eb00 0c01 	addle.w	ip, r0, r1
 801171c:	186d      	addle	r5, r5, r1
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	f1be 0e01 	subs.w	lr, lr, #1
 8011724:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011728:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801172c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011730:	d1ed      	bne.n	801170e <__ieee754_sqrt+0x8a>
 8011732:	4674      	mov	r4, lr
 8011734:	2720      	movs	r7, #32
 8011736:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801173a:	4563      	cmp	r3, ip
 801173c:	eb01 000e 	add.w	r0, r1, lr
 8011740:	dc02      	bgt.n	8011748 <__ieee754_sqrt+0xc4>
 8011742:	d113      	bne.n	801176c <__ieee754_sqrt+0xe8>
 8011744:	4290      	cmp	r0, r2
 8011746:	d811      	bhi.n	801176c <__ieee754_sqrt+0xe8>
 8011748:	2800      	cmp	r0, #0
 801174a:	eb00 0e01 	add.w	lr, r0, r1
 801174e:	da57      	bge.n	8011800 <__ieee754_sqrt+0x17c>
 8011750:	f1be 0f00 	cmp.w	lr, #0
 8011754:	db54      	blt.n	8011800 <__ieee754_sqrt+0x17c>
 8011756:	f10c 0801 	add.w	r8, ip, #1
 801175a:	eba3 030c 	sub.w	r3, r3, ip
 801175e:	4290      	cmp	r0, r2
 8011760:	bf88      	it	hi
 8011762:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011766:	1a12      	subs	r2, r2, r0
 8011768:	440c      	add	r4, r1
 801176a:	46c4      	mov	ip, r8
 801176c:	005b      	lsls	r3, r3, #1
 801176e:	3f01      	subs	r7, #1
 8011770:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011774:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011778:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801177c:	d1dd      	bne.n	801173a <__ieee754_sqrt+0xb6>
 801177e:	4313      	orrs	r3, r2
 8011780:	d01b      	beq.n	80117ba <__ieee754_sqrt+0x136>
 8011782:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011830 <__ieee754_sqrt+0x1ac>
 8011786:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011834 <__ieee754_sqrt+0x1b0>
 801178a:	e9da 0100 	ldrd	r0, r1, [sl]
 801178e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011792:	f7ee fd99 	bl	80002c8 <__aeabi_dsub>
 8011796:	e9da 8900 	ldrd	r8, r9, [sl]
 801179a:	4602      	mov	r2, r0
 801179c:	460b      	mov	r3, r1
 801179e:	4640      	mov	r0, r8
 80117a0:	4649      	mov	r1, r9
 80117a2:	f7ef f9c5 	bl	8000b30 <__aeabi_dcmple>
 80117a6:	b140      	cbz	r0, 80117ba <__ieee754_sqrt+0x136>
 80117a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80117ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80117b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80117b4:	d126      	bne.n	8011804 <__ieee754_sqrt+0x180>
 80117b6:	3501      	adds	r5, #1
 80117b8:	463c      	mov	r4, r7
 80117ba:	106a      	asrs	r2, r5, #1
 80117bc:	0863      	lsrs	r3, r4, #1
 80117be:	07e9      	lsls	r1, r5, #31
 80117c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80117c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80117c8:	bf48      	it	mi
 80117ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80117ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80117d2:	461c      	mov	r4, r3
 80117d4:	e76d      	b.n	80116b2 <__ieee754_sqrt+0x2e>
 80117d6:	0ad3      	lsrs	r3, r2, #11
 80117d8:	3815      	subs	r0, #21
 80117da:	0552      	lsls	r2, r2, #21
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d0fa      	beq.n	80117d6 <__ieee754_sqrt+0x152>
 80117e0:	02dc      	lsls	r4, r3, #11
 80117e2:	d50a      	bpl.n	80117fa <__ieee754_sqrt+0x176>
 80117e4:	f1c1 0420 	rsb	r4, r1, #32
 80117e8:	fa22 f404 	lsr.w	r4, r2, r4
 80117ec:	1e4d      	subs	r5, r1, #1
 80117ee:	408a      	lsls	r2, r1
 80117f0:	4323      	orrs	r3, r4
 80117f2:	1b41      	subs	r1, r0, r5
 80117f4:	e772      	b.n	80116dc <__ieee754_sqrt+0x58>
 80117f6:	4608      	mov	r0, r1
 80117f8:	e7f0      	b.n	80117dc <__ieee754_sqrt+0x158>
 80117fa:	005b      	lsls	r3, r3, #1
 80117fc:	3101      	adds	r1, #1
 80117fe:	e7ef      	b.n	80117e0 <__ieee754_sqrt+0x15c>
 8011800:	46e0      	mov	r8, ip
 8011802:	e7aa      	b.n	801175a <__ieee754_sqrt+0xd6>
 8011804:	f7ee fd62 	bl	80002cc <__adddf3>
 8011808:	e9da 8900 	ldrd	r8, r9, [sl]
 801180c:	4602      	mov	r2, r0
 801180e:	460b      	mov	r3, r1
 8011810:	4640      	mov	r0, r8
 8011812:	4649      	mov	r1, r9
 8011814:	f7ef f982 	bl	8000b1c <__aeabi_dcmplt>
 8011818:	b120      	cbz	r0, 8011824 <__ieee754_sqrt+0x1a0>
 801181a:	1ca0      	adds	r0, r4, #2
 801181c:	bf08      	it	eq
 801181e:	3501      	addeq	r5, #1
 8011820:	3402      	adds	r4, #2
 8011822:	e7ca      	b.n	80117ba <__ieee754_sqrt+0x136>
 8011824:	3401      	adds	r4, #1
 8011826:	f024 0401 	bic.w	r4, r4, #1
 801182a:	e7c6      	b.n	80117ba <__ieee754_sqrt+0x136>
 801182c:	7ff00000 	.word	0x7ff00000
 8011830:	20000098 	.word	0x20000098
 8011834:	200000a0 	.word	0x200000a0

08011838 <_init>:
 8011838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801183a:	bf00      	nop
 801183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801183e:	bc08      	pop	{r3}
 8011840:	469e      	mov	lr, r3
 8011842:	4770      	bx	lr

08011844 <_fini>:
 8011844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011846:	bf00      	nop
 8011848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801184a:	bc08      	pop	{r3}
 801184c:	469e      	mov	lr, r3
 801184e:	4770      	bx	lr
