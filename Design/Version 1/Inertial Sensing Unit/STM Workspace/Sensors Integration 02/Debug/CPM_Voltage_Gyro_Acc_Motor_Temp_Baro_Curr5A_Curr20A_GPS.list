
CPM_Voltage_Gyro_Acc_Motor_Temp_Baro_Curr5A_Curr20A_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000979c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009968  08009968  00019968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac8  08009ac8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad0  08009ad0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  2000008c  08009b64  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200008f0  08009b64  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017adf  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003197  00000000  00000000  00037b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a96  00000000  00000000  0003d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c99  00000000  00000000  00061ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1959  00000000  00000000  0007bb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d4b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a98  00000000  00000000  0015d508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800994c 	.word	0x0800994c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000090 	.word	0x20000090
 8000204:	0800994c 	.word	0x0800994c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b974 	b.w	8000f20 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	468e      	mov	lr, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d14d      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	4694      	mov	ip, r2
 8000c62:	d969      	bls.n	8000d38 <__udivmoddi4+0xe8>
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	b152      	cbz	r2, 8000c80 <__udivmoddi4+0x30>
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	f1c2 0120 	rsb	r1, r2, #32
 8000c72:	fa20 f101 	lsr.w	r1, r0, r1
 8000c76:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7e:	4094      	lsls	r4, r2
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	0c21      	lsrs	r1, r4, #16
 8000c86:	fbbe f6f8 	udiv	r6, lr, r8
 8000c8a:	fa1f f78c 	uxth.w	r7, ip
 8000c8e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c96:	fb06 f107 	mul.w	r1, r6, r7
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca6:	f080 811f 	bcs.w	8000ee8 <__udivmoddi4+0x298>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 811c 	bls.w	8000ee8 <__udivmoddi4+0x298>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb00 f707 	mul.w	r7, r0, r7
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x92>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd4:	f080 810a 	bcs.w	8000eec <__udivmoddi4+0x29c>
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	f240 8107 	bls.w	8000eec <__udivmoddi4+0x29c>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce6:	1be4      	subs	r4, r4, r7
 8000ce8:	2600      	movs	r6, #0
 8000cea:	b11d      	cbz	r5, 8000cf4 <__udivmoddi4+0xa4>
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0xc2>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80ef 	beq.w	8000ee2 <__udivmoddi4+0x292>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x160>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xd4>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80f9 	bhi.w	8000f16 <__udivmoddi4+0x2c6>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0e0      	beq.n	8000cf4 <__udivmoddi4+0xa4>
 8000d32:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d36:	e7dd      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000d38:	b902      	cbnz	r2, 8000d3c <__udivmoddi4+0xec>
 8000d3a:	deff      	udf	#255	; 0xff
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	f040 8092 	bne.w	8000e6a <__udivmoddi4+0x21a>
 8000d46:	eba1 010c 	sub.w	r1, r1, ip
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2601      	movs	r6, #1
 8000d54:	0c20      	lsrs	r0, r4, #16
 8000d56:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d5a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d62:	fb0e f003 	mul.w	r0, lr, r3
 8000d66:	4288      	cmp	r0, r1
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x12c>
 8000d6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x12a>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2c0>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	1a09      	subs	r1, r1, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d84:	fb07 1110 	mls	r1, r7, r0, r1
 8000d88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x156>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x154>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2ca>
 8000da4:	4608      	mov	r0, r1
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dae:	e79c      	b.n	8000cea <__udivmoddi4+0x9a>
 8000db0:	f1c6 0720 	rsb	r7, r6, #32
 8000db4:	40b3      	lsls	r3, r6
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa20 f407 	lsr.w	r4, r0, r7
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	40f9      	lsrs	r1, r7
 8000dca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dce:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd6:	0c20      	lsrs	r0, r4, #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fb09 1118 	mls	r1, r9, r8, r1
 8000de0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de4:	fb08 f00e 	mul.w	r0, r8, lr
 8000de8:	4288      	cmp	r0, r1
 8000dea:	fa02 f206 	lsl.w	r2, r2, r6
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b8>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2bc>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2bc>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	1a09      	subs	r1, r1, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e10:	fb09 1110 	mls	r1, r9, r0, r1
 8000e14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e1c:	458e      	cmp	lr, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1e2>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2a:	458e      	cmp	lr, r1
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e36:	fba0 9402 	umull	r9, r4, r0, r2
 8000e3a:	eba1 010e 	sub.w	r1, r1, lr
 8000e3e:	42a1      	cmp	r1, r4
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46a6      	mov	lr, r4
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x212>
 8000e4a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e52:	fa01 f707 	lsl.w	r7, r1, r7
 8000e56:	fa22 f306 	lsr.w	r3, r2, r6
 8000e5a:	40f1      	lsrs	r1, r6
 8000e5c:	431f      	orrs	r7, r3
 8000e5e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	f1c2 0320 	rsb	r3, r2, #32
 8000e6e:	40d8      	lsrs	r0, r3
 8000e70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e74:	fa21 f303 	lsr.w	r3, r1, r3
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	4301      	orrs	r1, r0
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e88:	fb07 3610 	mls	r6, r7, r0, r3
 8000e8c:	0c0b      	lsrs	r3, r1, #16
 8000e8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e92:	fb00 f60e 	mul.w	r6, r0, lr
 8000e96:	429e      	cmp	r6, r3
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x260>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b8>
 8000ea8:	429e      	cmp	r6, r3
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b8>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	b289      	uxth	r1, r1
 8000eb4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x28a>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed6:	3e02      	subs	r6, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0x104>
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e705      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e3      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6f8      	b.n	8000ce2 <__udivmoddi4+0x92>
 8000ef0:	454b      	cmp	r3, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f8>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f8>
 8000f00:	4646      	mov	r6, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x28a>
 8000f04:	4620      	mov	r0, r4
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1e2>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x260>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b8>
 8000f10:	3b02      	subs	r3, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x12c>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e709      	b.n	8000d2e <__udivmoddi4+0xde>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x156>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000f2a:	23aa      	movs	r3, #170	; 0xaa
 8000f2c:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2316      	movs	r3, #22
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	4b43      	ldr	r3, [pc, #268]	; (8001048 <read_calliberation_data+0x124>)
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	21ee      	movs	r1, #238	; 0xee
 8000f42:	4842      	ldr	r0, [pc, #264]	; (800104c <read_calliberation_data+0x128>)
 8000f44:	f004 fab4 	bl	80054b0 <HAL_I2C_Mem_Read>
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <read_calliberation_data+0x124>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <read_calliberation_data+0x124>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <read_calliberation_data+0x12c>)
 8000f5c:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <read_calliberation_data+0x124>)
 8000f60:	789b      	ldrb	r3, [r3, #2]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <read_calliberation_data+0x124>)
 8000f68:	78db      	ldrb	r3, [r3, #3]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <read_calliberation_data+0x130>)
 8000f72:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <read_calliberation_data+0x124>)
 8000f76:	791b      	ldrb	r3, [r3, #4]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <read_calliberation_data+0x124>)
 8000f7e:	795b      	ldrb	r3, [r3, #5]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <read_calliberation_data+0x134>)
 8000f88:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <read_calliberation_data+0x124>)
 8000f8c:	799b      	ldrb	r3, [r3, #6]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <read_calliberation_data+0x124>)
 8000f94:	79db      	ldrb	r3, [r3, #7]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <read_calliberation_data+0x138>)
 8000fa0:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <read_calliberation_data+0x124>)
 8000fa4:	7a1b      	ldrb	r3, [r3, #8]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <read_calliberation_data+0x124>)
 8000fac:	7a5b      	ldrb	r3, [r3, #9]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <read_calliberation_data+0x13c>)
 8000fb8:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <read_calliberation_data+0x124>)
 8000fbc:	7a9b      	ldrb	r3, [r3, #10]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <read_calliberation_data+0x124>)
 8000fc4:	7adb      	ldrb	r3, [r3, #11]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <read_calliberation_data+0x140>)
 8000fd0:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <read_calliberation_data+0x124>)
 8000fd4:	7b1b      	ldrb	r3, [r3, #12]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <read_calliberation_data+0x124>)
 8000fdc:	7b5b      	ldrb	r3, [r3, #13]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <read_calliberation_data+0x144>)
 8000fe6:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <read_calliberation_data+0x124>)
 8000fea:	7b9b      	ldrb	r3, [r3, #14]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <read_calliberation_data+0x124>)
 8000ff2:	7bdb      	ldrb	r3, [r3, #15]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <read_calliberation_data+0x148>)
 8000ffc:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <read_calliberation_data+0x124>)
 8001000:	7c1b      	ldrb	r3, [r3, #16]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <read_calliberation_data+0x124>)
 8001008:	7c5b      	ldrb	r3, [r3, #17]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21a      	sxth	r2, r3
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <read_calliberation_data+0x14c>)
 8001012:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <read_calliberation_data+0x124>)
 8001016:	7c9b      	ldrb	r3, [r3, #18]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <read_calliberation_data+0x124>)
 800101e:	7cdb      	ldrb	r3, [r3, #19]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <read_calliberation_data+0x150>)
 8001028:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <read_calliberation_data+0x124>)
 800102c:	7d1b      	ldrb	r3, [r3, #20]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <read_calliberation_data+0x124>)
 8001034:	7d5b      	ldrb	r3, [r3, #21]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <read_calliberation_data+0x154>)
 800103e:	801a      	strh	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000f0 	.word	0x200000f0
 800104c:	2000022c 	.word	0x2000022c
 8001050:	200000a8 	.word	0x200000a8
 8001054:	200000aa 	.word	0x200000aa
 8001058:	200000ac 	.word	0x200000ac
 800105c:	200000ae 	.word	0x200000ae
 8001060:	200000b0 	.word	0x200000b0
 8001064:	200000b2 	.word	0x200000b2
 8001068:	200000b4 	.word	0x200000b4
 800106c:	200000b6 	.word	0x200000b6
 8001070:	200000b8 	.word	0x200000b8
 8001074:	200000ba 	.word	0x200000ba
 8001078:	200000bc 	.word	0x200000bc

0800107c <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8001082:	232e      	movs	r3, #46	; 0x2e
 8001084:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	22f4      	movs	r2, #244	; 0xf4
 8001098:	21ee      	movs	r1, #238	; 0xee
 800109a:	4810      	ldr	r0, [pc, #64]	; (80010dc <Get_UTemp+0x60>)
 800109c:	f004 f90e 	bl	80052bc <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010a0:	2005      	movs	r0, #5
 80010a2:	f002 fcbf 	bl	8003a24 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2302      	movs	r3, #2
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <Get_UTemp+0x64>)
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	22f6      	movs	r2, #246	; 0xf6
 80010b8:	21ee      	movs	r1, #238	; 0xee
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <Get_UTemp+0x60>)
 80010bc:	f004 f9f8 	bl	80054b0 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <Get_UTemp+0x64>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <Get_UTemp+0x64>)
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000022c 	.word	0x2000022c
 80010e0:	2000010c 	.word	0x2000010c

080010e4 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80010e8:	f7ff ffc8 	bl	800107c <Get_UTemp>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <BMP180_GetTemp+0x108>)
 80010f2:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80010f4:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <BMP180_GetTemp+0x108>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a3d      	ldr	r2, [pc, #244]	; (80011f0 <BMP180_GetTemp+0x10c>)
 80010fa:	8812      	ldrh	r2, [r2, #0]
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f9dc 	bl	80004bc <__aeabi_i2d>
 8001104:	4604      	mov	r4, r0
 8001106:	460d      	mov	r5, r1
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <BMP180_GetTemp+0x110>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f9d5 	bl	80004bc <__aeabi_i2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <BMP180_GetTemp+0x114>)
 8001118:	f7ff fb64 	bl	80007e4 <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff fa34 	bl	8000590 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fcde 	bl	8000af0 <__aeabi_d2iz>
 8001134:	4603      	mov	r3, r0
 8001136:	4a31      	ldr	r2, [pc, #196]	; (80011fc <BMP180_GetTemp+0x118>)
 8001138:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <BMP180_GetTemp+0x11c>)
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9bb 	bl	80004bc <__aeabi_i2d>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <BMP180_GetTemp+0x120>)
 800114c:	f7ff fa20 	bl	8000590 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4614      	mov	r4, r2
 8001156:	461d      	mov	r5, r3
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <BMP180_GetTemp+0x124>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	461a      	mov	r2, r3
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <BMP180_GetTemp+0x118>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9a8 	bl	80004bc <__aeabi_i2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff fb36 	bl	80007e4 <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fcb6 	bl	8000af0 <__aeabi_d2iz>
 8001184:	4603      	mov	r3, r0
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <BMP180_GetTemp+0x128>)
 8001188:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <BMP180_GetTemp+0x118>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <BMP180_GetTemp+0x128>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <BMP180_GetTemp+0x12c>)
 8001196:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <BMP180_GetTemp+0x12c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3308      	adds	r3, #8
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f98c 	bl	80004bc <__aeabi_i2d>
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <BMP180_GetTemp+0x130>)
 80011aa:	f7ff fb1b 	bl	80007e4 <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fc9b 	bl	8000af0 <__aeabi_d2iz>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a16      	ldr	r2, [pc, #88]	; (8001218 <BMP180_GetTemp+0x134>)
 80011be:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <BMP180_GetTemp+0x134>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f979 	bl	80004bc <__aeabi_i2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <BMP180_GetTemp+0x138>)
 80011d0:	f7ff fb08 	bl	80007e4 <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fcd0 	bl	8000b80 <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	ee07 3a90 	vmov	s15, r3
}
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	200000c0 	.word	0x200000c0
 80011f0:	200000b2 	.word	0x200000b2
 80011f4:	200000b0 	.word	0x200000b0
 80011f8:	40e00000 	.word	0x40e00000
 80011fc:	200000c8 	.word	0x200000c8
 8001200:	200000ba 	.word	0x200000ba
 8001204:	40a00000 	.word	0x40a00000
 8001208:	200000bc 	.word	0x200000bc
 800120c:	200000cc 	.word	0x200000cc
 8001210:	200000d8 	.word	0x200000d8
 8001214:	40300000 	.word	0x40300000
 8001218:	200000ec 	.word	0x200000ec
 800121c:	40240000 	.word	0x40240000

08001220 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af04      	add	r7, sp, #16
 8001226:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	3334      	adds	r3, #52	; 0x34
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030f 	add.w	r3, r7, #15
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	22f4      	movs	r2, #244	; 0xf4
 800124a:	21ee      	movs	r1, #238	; 0xee
 800124c:	4820      	ldr	r0, [pc, #128]	; (80012d0 <Get_UPress+0xb0>)
 800124e:	f004 f835 	bl	80052bc <HAL_I2C_Mem_Write>

	switch (oss)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d81b      	bhi.n	8001290 <Get_UPress+0x70>
 8001258:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <Get_UPress+0x40>)
 800125a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125e:	bf00      	nop
 8001260:	08001271 	.word	0x08001271
 8001264:	08001279 	.word	0x08001279
 8001268:	08001281 	.word	0x08001281
 800126c:	08001289 	.word	0x08001289
	{
		case (0):
			HAL_Delay (5);
 8001270:	2005      	movs	r0, #5
 8001272:	f002 fbd7 	bl	8003a24 <HAL_Delay>
			break;
 8001276:	e00b      	b.n	8001290 <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001278:	2008      	movs	r0, #8
 800127a:	f002 fbd3 	bl	8003a24 <HAL_Delay>
			break;
 800127e:	e007      	b.n	8001290 <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 8001280:	200e      	movs	r0, #14
 8001282:	f002 fbcf 	bl	8003a24 <HAL_Delay>
			break;
 8001286:	e003      	b.n	8001290 <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001288:	201a      	movs	r0, #26
 800128a:	f002 fbcb 	bl	8003a24 <HAL_Delay>
			break;
 800128e:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2303      	movs	r3, #3
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <Get_UPress+0xb4>)
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	22f6      	movs	r2, #246	; 0xf6
 80012a2:	21ee      	movs	r1, #238	; 0xee
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <Get_UPress+0xb0>)
 80012a6:	f004 f903 	bl	80054b0 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <Get_UPress+0xb4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <Get_UPress+0xb4>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	4413      	add	r3, r2
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <Get_UPress+0xb4>)
 80012ba:	7892      	ldrb	r2, [r2, #2]
 80012bc:	441a      	add	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f1c3 0308 	rsb	r3, r3, #8
 80012c4:	fa42 f303 	asr.w	r3, r2, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000022c 	.word	0x2000022c
 80012d4:	20000108 	.word	0x20000108

080012d8 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff9d 	bl	8001220 <Get_UPress>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4ba8      	ldr	r3, [pc, #672]	; (800158c <BMP180_GetPress+0x2b4>)
 80012ec:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80012ee:	4ba8      	ldr	r3, [pc, #672]	; (8001590 <BMP180_GetPress+0x2b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4aa8      	ldr	r2, [pc, #672]	; (8001594 <BMP180_GetPress+0x2bc>)
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8df 	bl	80004bc <__aeabi_i2d>
 80012fe:	4604      	mov	r4, r0
 8001300:	460d      	mov	r5, r1
 8001302:	4ba5      	ldr	r3, [pc, #660]	; (8001598 <BMP180_GetPress+0x2c0>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8d8 	bl	80004bc <__aeabi_i2d>
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4ba2      	ldr	r3, [pc, #648]	; (800159c <BMP180_GetPress+0x2c4>)
 8001312:	f7ff fa67 	bl	80007e4 <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff f937 	bl	8000590 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbe1 	bl	8000af0 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	4a9b      	ldr	r2, [pc, #620]	; (80015a0 <BMP180_GetPress+0x2c8>)
 8001332:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001334:	4b9b      	ldr	r3, [pc, #620]	; (80015a4 <BMP180_GetPress+0x2cc>)
 8001336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8be 	bl	80004bc <__aeabi_i2d>
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b98      	ldr	r3, [pc, #608]	; (80015a8 <BMP180_GetPress+0x2d0>)
 8001346:	f7ff f923 	bl	8000590 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4614      	mov	r4, r2
 8001350:	461d      	mov	r5, r3
 8001352:	4b96      	ldr	r3, [pc, #600]	; (80015ac <BMP180_GetPress+0x2d4>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	461a      	mov	r2, r3
 800135a:	4b91      	ldr	r3, [pc, #580]	; (80015a0 <BMP180_GetPress+0x2c8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8ab 	bl	80004bc <__aeabi_i2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff fa39 	bl	80007e4 <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fbb9 	bl	8000af0 <__aeabi_d2iz>
 800137e:	4603      	mov	r3, r0
 8001380:	4a8b      	ldr	r2, [pc, #556]	; (80015b0 <BMP180_GetPress+0x2d8>)
 8001382:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001384:	4b86      	ldr	r3, [pc, #536]	; (80015a0 <BMP180_GetPress+0x2c8>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b89      	ldr	r3, [pc, #548]	; (80015b0 <BMP180_GetPress+0x2d8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4413      	add	r3, r2
 800138e:	4a89      	ldr	r2, [pc, #548]	; (80015b4 <BMP180_GetPress+0x2dc>)
 8001390:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <BMP180_GetPress+0x2dc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800139a:	4a87      	ldr	r2, [pc, #540]	; (80015b8 <BMP180_GetPress+0x2e0>)
 800139c:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800139e:	4b87      	ldr	r3, [pc, #540]	; (80015bc <BMP180_GetPress+0x2e4>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f889 	bl	80004bc <__aeabi_i2d>
 80013aa:	4604      	mov	r4, r0
 80013ac:	460d      	mov	r5, r1
 80013ae:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <BMP180_GetPress+0x2e0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a81      	ldr	r2, [pc, #516]	; (80015b8 <BMP180_GetPress+0x2e0>)
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f87e 	bl	80004bc <__aeabi_i2d>
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <BMP180_GetPress+0x2e8>)
 80013c6:	f7ff fa0d 	bl	80007e4 <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff f8dd 	bl	8000590 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <BMP180_GetPress+0x2d0>)
 80013e4:	f7ff f9fe 	bl	80007e4 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fb7e 	bl	8000af0 <__aeabi_d2iz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a6a      	ldr	r2, [pc, #424]	; (80015a0 <BMP180_GetPress+0x2c8>)
 80013f8:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <BMP180_GetPress+0x2ec>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	461a      	mov	r2, r3
 8001402:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <BMP180_GetPress+0x2e0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f856 	bl	80004bc <__aeabi_i2d>
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <BMP180_GetPress+0x2d0>)
 8001416:	f7ff f9e5 	bl	80007e4 <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb65 	bl	8000af0 <__aeabi_d2iz>
 8001426:	4603      	mov	r3, r0
 8001428:	4a61      	ldr	r2, [pc, #388]	; (80015b0 <BMP180_GetPress+0x2d8>)
 800142a:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 800142c:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <BMP180_GetPress+0x2c8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <BMP180_GetPress+0x2d8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a64      	ldr	r2, [pc, #400]	; (80015c8 <BMP180_GetPress+0x2f0>)
 8001438:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <BMP180_GetPress+0x2f4>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	009a      	lsls	r2, r3, #2
 8001442:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <BMP180_GetPress+0x2f0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	441a      	add	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	3302      	adds	r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	da00      	bge.n	8001456 <BMP180_GetPress+0x17e>
 8001454:	3303      	adds	r3, #3
 8001456:	109b      	asrs	r3, r3, #2
 8001458:	461a      	mov	r2, r3
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <BMP180_GetPress+0x2f8>)
 800145c:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <BMP180_GetPress+0x2fc>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	461a      	mov	r2, r3
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <BMP180_GetPress+0x2e0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f824 	bl	80004bc <__aeabi_i2d>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <BMP180_GetPress+0x300>)
 800147a:	f7ff f9b3 	bl	80007e4 <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb33 	bl	8000af0 <__aeabi_d2iz>
 800148a:	4603      	mov	r3, r0
 800148c:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <BMP180_GetPress+0x2c8>)
 800148e:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001490:	4b52      	ldr	r3, [pc, #328]	; (80015dc <BMP180_GetPress+0x304>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f810 	bl	80004bc <__aeabi_i2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <BMP180_GetPress+0x2e0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a44      	ldr	r2, [pc, #272]	; (80015b8 <BMP180_GetPress+0x2e0>)
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f805 	bl	80004bc <__aeabi_i2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <BMP180_GetPress+0x2e8>)
 80014b8:	f7ff f994 	bl	80007e4 <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4620      	mov	r0, r4
 80014c2:	4629      	mov	r1, r5
 80014c4:	f7ff f864 	bl	8000590 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <BMP180_GetPress+0x308>)
 80014d6:	f7ff f985 	bl	80007e4 <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fb05 	bl	8000af0 <__aeabi_d2iz>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <BMP180_GetPress+0x2d8>)
 80014ea:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <BMP180_GetPress+0x2c8>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <BMP180_GetPress+0x2d8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	3302      	adds	r3, #2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffdf 	bl	80004bc <__aeabi_i2d>
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <BMP180_GetPress+0x30c>)
 8001504:	f7ff f96e 	bl	80007e4 <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff faee 	bl	8000af0 <__aeabi_d2iz>
 8001514:	4603      	mov	r3, r0
 8001516:	4a2c      	ldr	r2, [pc, #176]	; (80015c8 <BMP180_GetPress+0x2f0>)
 8001518:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <BMP180_GetPress+0x310>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <BMP180_GetPress+0x2f0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffb5 	bl	800049c <__aeabi_ui2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <BMP180_GetPress+0x2c4>)
 8001538:	f7ff f954 	bl	80007e4 <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fafc 	bl	8000b40 <__aeabi_d2uiz>
 8001548:	4603      	mov	r3, r0
 800154a:	4a28      	ldr	r2, [pc, #160]	; (80015ec <BMP180_GetPress+0x314>)
 800154c:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <BMP180_GetPress+0x2b4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <BMP180_GetPress+0x2f8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	fa41 f202 	asr.w	r2, r1, r2
 8001564:	fb02 f303 	mul.w	r3, r2, r3
 8001568:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <BMP180_GetPress+0x318>)
 800156a:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <BMP180_GetPress+0x318>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db41      	blt.n	80015f8 <BMP180_GetPress+0x320>
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <BMP180_GetPress+0x318>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	005a      	lsls	r2, r3, #1
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <BMP180_GetPress+0x314>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	461a      	mov	r2, r3
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <BMP180_GetPress+0x31c>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e040      	b.n	800160c <BMP180_GetPress+0x334>
 800158a:	bf00      	nop
 800158c:	200000c4 	.word	0x200000c4
 8001590:	200000c0 	.word	0x200000c0
 8001594:	200000b2 	.word	0x200000b2
 8001598:	200000b0 	.word	0x200000b0
 800159c:	40e00000 	.word	0x40e00000
 80015a0:	200000c8 	.word	0x200000c8
 80015a4:	200000ba 	.word	0x200000ba
 80015a8:	40a00000 	.word	0x40a00000
 80015ac:	200000bc 	.word	0x200000bc
 80015b0:	200000cc 	.word	0x200000cc
 80015b4:	200000d8 	.word	0x200000d8
 80015b8:	200000e0 	.word	0x200000e0
 80015bc:	200000b6 	.word	0x200000b6
 80015c0:	40b00000 	.word	0x40b00000
 80015c4:	200000aa 	.word	0x200000aa
 80015c8:	200000d0 	.word	0x200000d0
 80015cc:	200000a8 	.word	0x200000a8
 80015d0:	200000d4 	.word	0x200000d4
 80015d4:	200000ac 	.word	0x200000ac
 80015d8:	40c00000 	.word	0x40c00000
 80015dc:	200000b4 	.word	0x200000b4
 80015e0:	40f00000 	.word	0x40f00000
 80015e4:	40100000 	.word	0x40100000
 80015e8:	200000ae 	.word	0x200000ae
 80015ec:	200000dc 	.word	0x200000dc
 80015f0:	200000e4 	.word	0x200000e4
 80015f4:	200000e8 	.word	0x200000e8
	else Press = (B7/B4)*2;
 80015f8:	4b46      	ldr	r3, [pc, #280]	; (8001714 <BMP180_GetPress+0x43c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b46      	ldr	r3, [pc, #280]	; (8001718 <BMP180_GetPress+0x440>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	461a      	mov	r2, r3
 8001608:	4b44      	ldr	r3, [pc, #272]	; (800171c <BMP180_GetPress+0x444>)
 800160a:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <BMP180_GetPress+0x444>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff53 	bl	80004bc <__aeabi_i2d>
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <BMP180_GetPress+0x448>)
 800161c:	f7ff f8e2 	bl	80007e4 <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4614      	mov	r4, r2
 8001626:	461d      	mov	r5, r3
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <BMP180_GetPress+0x444>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff45 	bl	80004bc <__aeabi_i2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <BMP180_GetPress+0x448>)
 8001638:	f7ff f8d4 	bl	80007e4 <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe ffa4 	bl	8000590 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa4e 	bl	8000af0 <__aeabi_d2iz>
 8001654:	4603      	mov	r3, r0
 8001656:	4a33      	ldr	r2, [pc, #204]	; (8001724 <BMP180_GetPress+0x44c>)
 8001658:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <BMP180_GetPress+0x44c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f640 32de 	movw	r2, #3038	; 0xbde
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff28 	bl	80004bc <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <BMP180_GetPress+0x450>)
 8001672:	f7ff f8b7 	bl	80007e4 <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff fa37 	bl	8000af0 <__aeabi_d2iz>
 8001682:	4603      	mov	r3, r0
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <BMP180_GetPress+0x44c>)
 8001686:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <BMP180_GetPress+0x444>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <BMP180_GetPress+0x454>)
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff12 	bl	80004bc <__aeabi_i2d>
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <BMP180_GetPress+0x450>)
 800169e:	f7ff f8a1 	bl	80007e4 <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fa21 	bl	8000af0 <__aeabi_d2iz>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <BMP180_GetPress+0x458>)
 80016b2:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <BMP180_GetPress+0x444>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe feff 	bl	80004bc <__aeabi_i2d>
 80016be:	4604      	mov	r4, r0
 80016c0:	460d      	mov	r5, r1
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <BMP180_GetPress+0x44c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <BMP180_GetPress+0x458>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fef3 	bl	80004bc <__aeabi_i2d>
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <BMP180_GetPress+0x45c>)
 80016dc:	f7ff f882 	bl	80007e4 <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe fd9c 	bl	8000224 <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f9fc 	bl	8000af0 <__aeabi_d2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <BMP180_GetPress+0x444>)
 80016fc:	6013      	str	r3, [r2, #0]
	return Press;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <BMP180_GetPress+0x444>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	200000e4 	.word	0x200000e4
 8001718:	200000dc 	.word	0x200000dc
 800171c:	200000e8 	.word	0x200000e8
 8001720:	40700000 	.word	0x40700000
 8001724:	200000c8 	.word	0x200000c8
 8001728:	40f00000 	.word	0x40f00000
 800172c:	ffffe343 	.word	0xffffe343
 8001730:	200000cc 	.word	0x200000cc
 8001734:	40300000 	.word	0x40300000

08001738 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fdc9 	bl	80012d8 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <BMP180_GetAlt+0x88>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80017c4 <BMP180_GetAlt+0x8c>
 8001756:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800175a:	ee16 0a90 	vmov	r0, s13
 800175e:	f7fe febf 	bl	80004e0 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80017b0 <BMP180_GetAlt+0x78>
 800176a:	ec43 2b10 	vmov	d0, r2, r3
 800176e:	f007 f9d1 	bl	8008b14 <pow>
 8001772:	ec53 2b10 	vmov	r2, r3, d0
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	4913      	ldr	r1, [pc, #76]	; (80017c8 <BMP180_GetAlt+0x90>)
 800177c:	f7fe fd50 	bl	8000220 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a30b      	add	r3, pc, #44	; (adr r3, 80017b8 <BMP180_GetAlt+0x80>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe feff 	bl	8000590 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f9f1 	bl	8000b80 <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	ee07 3a90 	vmov	s15, r3
}
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	cc745124 	.word	0xcc745124
 80017b4:	3fc85b95 	.word	0x3fc85b95
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40e5a540 	.word	0x40e5a540
 80017c0:	200000e8 	.word	0x200000e8
 80017c4:	47c5e680 	.word	0x47c5e680
 80017c8:	3ff00000 	.word	0x3ff00000

080017cc <BMP180_Start>:

void BMP180_Start (void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80017d0:	f7ff fba8 	bl	8000f24 <read_calliberation_data>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	4834      	ldr	r0, [pc, #208]	; (80018bc <Max6675_Read_Temp+0xe4>)
 80017ea:	f003 fc09 	bl	8005000 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80017ee:	2332      	movs	r3, #50	; 0x32
 80017f0:	2201      	movs	r2, #1
 80017f2:	4933      	ldr	r1, [pc, #204]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 80017f4:	4833      	ldr	r0, [pc, #204]	; (80018c4 <Max6675_Read_Temp+0xec>)
 80017f6:	f005 fa9e 	bl	8006d36 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 80017fa:	2201      	movs	r2, #1
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	482f      	ldr	r0, [pc, #188]	; (80018bc <Max6675_Read_Temp+0xe4>)
 8001800:	f003 fbfe 	bl	8005000 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 8001804:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 8001810:	701a      	strb	r2, [r3, #0]
Error=0;
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <Max6675_Read_Temp+0xf4>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d02b      	beq.n	8001878 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d120      	bne.n	800186a <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001828:	4829      	ldr	r0, [pc, #164]	; (80018d0 <Max6675_Read_Temp+0xf8>)
 800182a:	f005 feb7 	bl	800759c <HAL_TIM_Base_Start>
		while(timer_val<1)
 800182e:	e011      	b.n	8001854 <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d103      	bne.n	8001840 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <Max6675_Read_Temp+0xf4>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
				break;
 800183e:	e00d      	b.n	800185c <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <Max6675_Read_Temp+0xf8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <Max6675_Read_Temp+0xfc>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0b5b      	lsrs	r3, r3, #13
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <Max6675_Read_Temp+0x100>)
 8001852:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <Max6675_Read_Temp+0x100>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0e9      	beq.n	8001830 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <Max6675_Read_Temp+0x100>)
 800185e:	2200      	movs	r2, #0
 8001860:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <Max6675_Read_Temp+0xf4>)
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e006      	b.n	8001878 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d102      	bne.n	8001878 <Max6675_Read_Temp+0xa0>
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <Max6675_Read_Temp+0xf4>)
 8001874:	2203      	movs	r2, #3
 8001876:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4313      	orrs	r3, r2
 8001886:	10db      	asrs	r3, r3, #3
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8001894:	edd7 7a01 	vldr	s15, [r7, #4]
 8001898:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a0:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 80018a4:	20fa      	movs	r0, #250	; 0xfa
 80018a6:	f002 f8bd 	bl	8003a24 <HAL_Delay>
return Temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	ee07 3a90 	vmov	s15, r3
}
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40020000 	.word	0x40020000
 80018c0:	20000110 	.word	0x20000110
 80018c4:	20000280 	.word	0x20000280
 80018c8:	20000112 	.word	0x20000112
 80018cc:	20000113 	.word	0x20000113
 80018d0:	200002d8 	.word	0x200002d8
 80018d4:	d1b71759 	.word	0xd1b71759
 80018d8:	20000340 	.word	0x20000340
 80018dc:	00000000 	.word	0x00000000

080018e0 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 80018e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018e4:	b08c      	sub	sp, #48	; 0x30
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
	inx = 0;
 80018ec:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <decodeGGA+0x17c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80018f6:	e004      	b.n	8001902 <decodeGGA+0x22>
 80018f8:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <decodeGGA+0x17c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	4a57      	ldr	r2, [pc, #348]	; (8001a5c <decodeGGA+0x17c>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <decodeGGA+0x17c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b2c      	cmp	r3, #44	; 0x2c
 8001910:	d1f2      	bne.n	80018f8 <decodeGGA+0x18>
	inx++;
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <decodeGGA+0x17c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <decodeGGA+0x17c>)
 800191a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 800191c:	e004      	b.n	8001928 <decodeGGA+0x48>
 800191e:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <decodeGGA+0x17c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a4d      	ldr	r2, [pc, #308]	; (8001a5c <decodeGGA+0x17c>)
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <decodeGGA+0x17c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b2c      	cmp	r3, #44	; 0x2c
 8001936:	d1f2      	bne.n	800191e <decodeGGA+0x3e>
	inx++;
 8001938:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <decodeGGA+0x17c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <decodeGGA+0x17c>)
 8001940:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001942:	e004      	b.n	800194e <decodeGGA+0x6e>
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <decodeGGA+0x17c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <decodeGGA+0x17c>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <decodeGGA+0x17c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b2c      	cmp	r3, #44	; 0x2c
 800195c:	d1f2      	bne.n	8001944 <decodeGGA+0x64>
	inx++;
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <decodeGGA+0x17c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <decodeGGA+0x17c>)
 8001966:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001968:	e004      	b.n	8001974 <decodeGGA+0x94>
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <decodeGGA+0x17c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	4a3a      	ldr	r2, [pc, #232]	; (8001a5c <decodeGGA+0x17c>)
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <decodeGGA+0x17c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b2c      	cmp	r3, #44	; 0x2c
 8001982:	d1f2      	bne.n	800196a <decodeGGA+0x8a>
	inx++;
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <decodeGGA+0x17c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	4a34      	ldr	r2, [pc, #208]	; (8001a5c <decodeGGA+0x17c>)
 800198c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 800198e:	e004      	b.n	800199a <decodeGGA+0xba>
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <decodeGGA+0x17c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <decodeGGA+0x17c>)
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <decodeGGA+0x17c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b2c      	cmp	r3, #44	; 0x2c
 80019a8:	d1f2      	bne.n	8001990 <decodeGGA+0xb0>
	inx++;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <decodeGGA+0x17c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <decodeGGA+0x17c>)
 80019b2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 80019b4:	e004      	b.n	80019c0 <decodeGGA+0xe0>
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <decodeGGA+0x17c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <decodeGGA+0x17c>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <decodeGGA+0x17c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b2c      	cmp	r3, #44	; 0x2c
 80019ce:	d1f2      	bne.n	80019b6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <decodeGGA+0x17c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <decodeGGA+0x17c>)
 80019d8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <decodeGGA+0x17c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b31      	cmp	r3, #49	; 0x31
 80019e8:	d00f      	beq.n	8001a0a <decodeGGA+0x12a>
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <decodeGGA+0x17c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b32      	cmp	r3, #50	; 0x32
 80019f8:	d007      	beq.n	8001a0a <decodeGGA+0x12a>
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <decodeGGA+0x17c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b36      	cmp	r3, #54	; 0x36
 8001a08:	d106      	bne.n	8001a18 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <decodeGGA+0x17c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001a16:	e009      	b.n	8001a2c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e2fd      	b.n	800201e <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <decodeGGA+0x17c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <decodeGGA+0x17c>)
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <decodeGGA+0x17c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b2c      	cmp	r3, #44	; 0x2c
 8001a3a:	d1f2      	bne.n	8001a22 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <decodeGGA+0x17c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <decodeGGA+0x17c>)
 8001a44:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f006 ffcc 	bl	80089ec <memset>
	i=0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001a58:	e016      	b.n	8001a88 <decodeGGA+0x1a8>
 8001a5a:	bf00      	nop
 8001a5c:	20000114 	.word	0x20000114
	{
		buffer[i] = GGAbuffer[inx];
 8001a60:	4bab      	ldr	r3, [pc, #684]	; (8001d10 <decodeGGA+0x430>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	7819      	ldrb	r1, [r3, #0]
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	4413      	add	r3, r2
 8001a74:	460a      	mov	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]
		i++;
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001a7e:	4ba4      	ldr	r3, [pc, #656]	; (8001d10 <decodeGGA+0x430>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4aa2      	ldr	r2, [pc, #648]	; (8001d10 <decodeGGA+0x430>)
 8001a86:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001a88:	4ba1      	ldr	r3, [pc, #644]	; (8001d10 <decodeGGA+0x430>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b2c      	cmp	r3, #44	; 0x2c
 8001a96:	d1e3      	bne.n	8001a60 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f006 ff77 	bl	8008990 <atoi>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a9b      	ldr	r2, [pc, #620]	; (8001d14 <decodeGGA+0x434>)
 8001aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aaa:	1312      	asrs	r2, r2, #12
 8001aac:	17db      	asrs	r3, r3, #31
 8001aae:	1ad2      	subs	r2, r2, r3
 8001ab0:	4b99      	ldr	r3, [pc, #612]	; (8001d18 <decodeGGA+0x438>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4999      	ldr	r1, [pc, #612]	; (8001d1c <decodeGGA+0x43c>)
 8001ab6:	fb81 0103 	smull	r0, r1, r1, r3
 8001aba:	1149      	asrs	r1, r1, #5
 8001abc:	17db      	asrs	r3, r3, #31
 8001abe:	1acb      	subs	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a97      	ldr	r2, [pc, #604]	; (8001d20 <decodeGGA+0x440>)
 8001ac4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 ff60 	bl	8008990 <atoi>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a92      	ldr	r2, [pc, #584]	; (8001d1c <decodeGGA+0x43c>)
 8001ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad8:	1152      	asrs	r2, r2, #5
 8001ada:	17db      	asrs	r3, r3, #31
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	4a8f      	ldr	r2, [pc, #572]	; (8001d1c <decodeGGA+0x43c>)
 8001ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae4:	1151      	asrs	r1, r2, #5
 8001ae6:	17da      	asrs	r2, r3, #31
 8001ae8:	1a8a      	subs	r2, r1, r2
 8001aea:	2164      	movs	r1, #100	; 0x64
 8001aec:	fb01 f202 	mul.w	r2, r1, r2
 8001af0:	1a9a      	subs	r2, r3, r2
 8001af2:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <decodeGGA+0x438>)
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <decodeGGA+0x43c>)
 8001af8:	fb83 0301 	smull	r0, r3, r3, r1
 8001afc:	1158      	asrs	r0, r3, #5
 8001afe:	17cb      	asrs	r3, r1, #31
 8001b00:	1ac3      	subs	r3, r0, r3
 8001b02:	2064      	movs	r0, #100	; 0x64
 8001b04:	fb00 f303 	mul.w	r3, r0, r3
 8001b08:	1acb      	subs	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a85      	ldr	r2, [pc, #532]	; (8001d24 <decodeGGA+0x444>)
 8001b0e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001b10:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <decodeGGA+0x444>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b3b      	cmp	r3, #59	; 0x3b
 8001b16:	dd09      	ble.n	8001b2c <decodeGGA+0x24c>
	{
		min = min-60;
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <decodeGGA+0x444>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3b3c      	subs	r3, #60	; 0x3c
 8001b1e:	4a81      	ldr	r2, [pc, #516]	; (8001d24 <decodeGGA+0x444>)
 8001b20:	6013      	str	r3, [r2, #0]
		hr++;
 8001b22:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <decodeGGA+0x440>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	4a7d      	ldr	r2, [pc, #500]	; (8001d20 <decodeGGA+0x440>)
 8001b2a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001b2c:	4b7c      	ldr	r3, [pc, #496]	; (8001d20 <decodeGGA+0x440>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da09      	bge.n	8001b48 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001b34:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <decodeGGA+0x440>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	4a79      	ldr	r2, [pc, #484]	; (8001d20 <decodeGGA+0x440>)
 8001b3c:	6013      	str	r3, [r2, #0]
		daychange--;
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <decodeGGA+0x448>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <decodeGGA+0x448>)
 8001b46:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <decodeGGA+0x440>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b17      	cmp	r3, #23
 8001b4e:	dd09      	ble.n	8001b64 <decodeGGA+0x284>
	{
		hr=hr-24;
 8001b50:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <decodeGGA+0x440>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3b18      	subs	r3, #24
 8001b56:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <decodeGGA+0x440>)
 8001b58:	6013      	str	r3, [r2, #0]
		daychange++;
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <decodeGGA+0x448>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a71      	ldr	r2, [pc, #452]	; (8001d28 <decodeGGA+0x448>)
 8001b62:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001b64:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <decodeGGA+0x440>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001b6c:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <decodeGGA+0x444>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 ff09 	bl	8008990 <atoi>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <decodeGGA+0x43c>)
 8001b82:	fb83 1302 	smull	r1, r3, r3, r2
 8001b86:	1159      	asrs	r1, r3, #5
 8001b88:	17d3      	asrs	r3, r2, #31
 8001b8a:	1acb      	subs	r3, r1, r3
 8001b8c:	2164      	movs	r1, #100	; 0x64
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001b98:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <decodeGGA+0x430>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	; (8001d10 <decodeGGA+0x430>)
 8001ba0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 ff1e 	bl	80089ec <memset>
	i=0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001bb4:	e013      	b.n	8001bde <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001bb6:	4b56      	ldr	r3, [pc, #344]	; (8001d10 <decodeGGA+0x430>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	7819      	ldrb	r1, [r3, #0]
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	4413      	add	r3, r2
 8001bca:	460a      	mov	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
		i++;
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001bd4:	4b4e      	ldr	r3, [pc, #312]	; (8001d10 <decodeGGA+0x430>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4a4d      	ldr	r2, [pc, #308]	; (8001d10 <decodeGGA+0x430>)
 8001bdc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001bde:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <decodeGGA+0x430>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b2c      	cmp	r3, #44	; 0x2c
 8001bec:	d1e3      	bne.n	8001bb6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fb08 	bl	8000208 <strlen>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d801      	bhi.n	8001c02 <decodeGGA+0x322>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e20d      	b.n	800201e <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4618      	mov	r0, r3
 8001c08:	f006 fec2 	bl	8008990 <atoi>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001c14:	e002      	b.n	8001c1c <decodeGGA+0x33c>
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	3301      	adds	r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c1c:	f107 020c 	add.w	r2, r7, #12
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b2e      	cmp	r3, #46	; 0x2e
 8001c28:	d1f5      	bne.n	8001c16 <decodeGGA+0x336>
	j++;
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fae7 	bl	8000208 <strlen>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	f107 020c 	add.w	r2, r7, #12
 8001c48:	4413      	add	r3, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f006 fea0 	bl	8008990 <atoi>
 8001c50:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001c52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc30 	bl	80004bc <__aeabi_i2d>
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <decodeGGA+0x44c>)
 8001c62:	f7fe fdbf 	bl	80007e4 <__aeabi_ddiv>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	69f8      	ldr	r0, [r7, #28]
 8001c70:	f7fe fc24 	bl	80004bc <__aeabi_i2d>
 8001c74:	4604      	mov	r4, r0
 8001c76:	460d      	mov	r5, r1
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc1d 	bl	80004bc <__aeabi_i2d>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	ec43 2b11 	vmov	d1, r2, r3
 8001c8a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001d08 <decodeGGA+0x428>
 8001c8e:	f006 ff41 	bl	8008b14 <pow>
 8001c92:	ec53 2b10 	vmov	r2, r3, d0
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fda3 	bl	80007e4 <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	f7fe fabd 	bl	8000224 <__adddf3>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff65 	bl	8000b80 <__aeabi_d2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	601a      	str	r2, [r3, #0]
	inx++;  
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <decodeGGA+0x430>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <decodeGGA+0x430>)
 8001cc8:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <decodeGGA+0x430>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <decodeGGA+0x430>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <decodeGGA+0x430>)
 8001ce2:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <decodeGGA+0x430>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <decodeGGA+0x430>)
 8001cec:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f006 fe78 	bl	80089ec <memset>
	i=0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001d00:	e02a      	b.n	8001d58 <decodeGGA+0x478>
 8001d02:	bf00      	nop
 8001d04:	f3af 8000 	nop.w
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40240000 	.word	0x40240000
 8001d10:	20000114 	.word	0x20000114
 8001d14:	68db8bad 	.word	0x68db8bad
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	51eb851f 	.word	0x51eb851f
 8001d20:	20000118 	.word	0x20000118
 8001d24:	2000011c 	.word	0x2000011c
 8001d28:	2000012c 	.word	0x2000012c
 8001d2c:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001d30:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <decodeGGA+0x680>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	7819      	ldrb	r1, [r3, #0]
 8001d3c:	f107 020c 	add.w	r2, r7, #12
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	4413      	add	r3, r2
 8001d44:	460a      	mov	r2, r1
 8001d46:	701a      	strb	r2, [r3, #0]
		i++;
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001d4e:	4b84      	ldr	r3, [pc, #528]	; (8001f60 <decodeGGA+0x680>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	4a82      	ldr	r2, [pc, #520]	; (8001f60 <decodeGGA+0x680>)
 8001d56:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <decodeGGA+0x680>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b2c      	cmp	r3, #44	; 0x2c
 8001d66:	d1e3      	bne.n	8001d30 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f006 fe0f 	bl	8008990 <atoi>
 8001d72:	4603      	mov	r3, r0
 8001d74:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001d7a:	e002      	b.n	8001d82 <decodeGGA+0x4a2>
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	3301      	adds	r3, #1
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d82:	f107 020c 	add.w	r2, r7, #12
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d8e:	d1f5      	bne.n	8001d7c <decodeGGA+0x49c>
	j++;
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	3301      	adds	r3, #1
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fa34 	bl	8000208 <strlen>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	f107 020c 	add.w	r2, r7, #12
 8001dae:	4413      	add	r3, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 fded 	bl	8008990 <atoi>
 8001db6:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001db8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fb7d 	bl	80004bc <__aeabi_i2d>
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <decodeGGA+0x684>)
 8001dc8:	f7fe fd0c 	bl	80007e4 <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4690      	mov	r8, r2
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	69f8      	ldr	r0, [r7, #28]
 8001dd6:	f7fe fb71 	bl	80004bc <__aeabi_i2d>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	3302      	adds	r3, #2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb6a 	bl	80004bc <__aeabi_i2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	ec43 2b11 	vmov	d1, r2, r3
 8001df0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001f58 <decodeGGA+0x678>
 8001df4:	f006 fe8e 	bl	8008b14 <pow>
 8001df8:	ec53 2b10 	vmov	r2, r3, d0
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	4629      	mov	r1, r5
 8001e00:	f7fe fcf0 	bl	80007e4 <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4640      	mov	r0, r8
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	f7fe fa0a 	bl	8000224 <__adddf3>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe feb2 	bl	8000b80 <__aeabi_d2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	609a      	str	r2, [r3, #8]
	inx++;
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <decodeGGA+0x680>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	4a4c      	ldr	r2, [pc, #304]	; (8001f60 <decodeGGA+0x680>)
 8001e2e:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001e30:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <decodeGGA+0x680>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001e40:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <decodeGGA+0x680>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <decodeGGA+0x680>)
 8001e48:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001e4a:	4b45      	ldr	r3, [pc, #276]	; (8001f60 <decodeGGA+0x680>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a43      	ldr	r2, [pc, #268]	; (8001f60 <decodeGGA+0x680>)
 8001e52:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <decodeGGA+0x680>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a41      	ldr	r2, [pc, #260]	; (8001f60 <decodeGGA+0x680>)
 8001e5c:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <decodeGGA+0x680>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4a3e      	ldr	r2, [pc, #248]	; (8001f60 <decodeGGA+0x680>)
 8001e66:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f006 fdbb 	bl	80089ec <memset>
	i=0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001e7a:	e013      	b.n	8001ea4 <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 8001e7c:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <decodeGGA+0x680>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	7819      	ldrb	r1, [r3, #0]
 8001e88:	f107 020c 	add.w	r2, r7, #12
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	4413      	add	r3, r2
 8001e90:	460a      	mov	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
		i++;
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	3301      	adds	r3, #1
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <decodeGGA+0x680>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4a2f      	ldr	r2, [pc, #188]	; (8001f60 <decodeGGA+0x680>)
 8001ea2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <decodeGGA+0x680>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b2c      	cmp	r3, #44	; 0x2c
 8001eb2:	d1e3      	bne.n	8001e7c <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f006 fd69 	bl	8008990 <atoi>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <decodeGGA+0x680>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <decodeGGA+0x680>)
 8001ecc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001ece:	e004      	b.n	8001eda <decodeGGA+0x5fa>
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <decodeGGA+0x680>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <decodeGGA+0x680>)
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <decodeGGA+0x680>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ee8:	d1f2      	bne.n	8001ed0 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <decodeGGA+0x680>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <decodeGGA+0x680>)
 8001ef2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	220c      	movs	r2, #12
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 fd75 	bl	80089ec <memset>
	i=0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001f06:	e013      	b.n	8001f30 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <decodeGGA+0x680>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	7819      	ldrb	r1, [r3, #0]
 8001f14:	f107 020c 	add.w	r2, r7, #12
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	4413      	add	r3, r2
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
		i++;
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	3301      	adds	r3, #1
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <decodeGGA+0x680>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <decodeGGA+0x680>)
 8001f2e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <decodeGGA+0x680>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f3e:	d1e3      	bne.n	8001f08 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4618      	mov	r0, r3
 8001f46:	f006 fd23 	bl	8008990 <atoi>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001f52:	e00c      	b.n	8001f6e <decodeGGA+0x68e>
 8001f54:	f3af 8000 	nop.w
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40240000 	.word	0x40240000
 8001f60:	20000114 	.word	0x20000114
 8001f64:	40590000 	.word	0x40590000
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6e:	f107 020c 	add.w	r2, r7, #12
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b2e      	cmp	r3, #46	; 0x2e
 8001f7a:	d1f5      	bne.n	8001f68 <decodeGGA+0x688>
	j++;
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	3301      	adds	r3, #1
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe f93e 	bl	8000208 <strlen>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	f107 020c 	add.w	r2, r7, #12
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f006 fcf7 	bl	8008990 <atoi>
 8001fa2:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001fa4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa87 	bl	80004bc <__aeabi_i2d>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	460d      	mov	r5, r1
 8001fb2:	69f8      	ldr	r0, [r7, #28]
 8001fb4:	f7fe fa82 	bl	80004bc <__aeabi_i2d>
 8001fb8:	4680      	mov	r8, r0
 8001fba:	4689      	mov	r9, r1
 8001fbc:	6a38      	ldr	r0, [r7, #32]
 8001fbe:	f7fe fa7d 	bl	80004bc <__aeabi_i2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	ec43 2b11 	vmov	d1, r2, r3
 8001fca:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002028 <decodeGGA+0x748>
 8001fce:	f006 fda1 	bl	8008b14 <pow>
 8001fd2:	ec53 2b10 	vmov	r2, r3, d0
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	4649      	mov	r1, r9
 8001fda:	f7fe fc03 	bl	80007e4 <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	f7fe f91d 	bl	8000224 <__adddf3>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fdc5 	bl	8000b80 <__aeabi_d2f>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	621a      	str	r2, [r3, #32]

	inx++;
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <decodeGGA+0x750>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <decodeGGA+0x750>)
 8002008:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <decodeGGA+0x750>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800201c:	2300      	movs	r3, #0

}
 800201e:	4618      	mov	r0, r3
 8002020:	3730      	adds	r7, #48	; 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002028:	00000000 	.word	0x00000000
 800202c:	40240000 	.word	0x40240000
 8002030:	20000114 	.word	0x20000114
 8002034:	00000000 	.word	0x00000000

08002038 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800203c:	b090      	sub	sp, #64	; 0x40
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
	inx = 0;
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <decodeRMC+0x260>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800204e:	e004      	b.n	800205a <decodeRMC+0x22>
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <decodeRMC+0x260>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a90      	ldr	r2, [pc, #576]	; (8002298 <decodeRMC+0x260>)
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <decodeRMC+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b2c      	cmp	r3, #44	; 0x2c
 8002068:	d1f2      	bne.n	8002050 <decodeRMC+0x18>
	inx++;
 800206a:	4b8b      	ldr	r3, [pc, #556]	; (8002298 <decodeRMC+0x260>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a89      	ldr	r2, [pc, #548]	; (8002298 <decodeRMC+0x260>)
 8002072:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8002074:	e004      	b.n	8002080 <decodeRMC+0x48>
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <decodeRMC+0x260>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	4a86      	ldr	r2, [pc, #536]	; (8002298 <decodeRMC+0x260>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b85      	ldr	r3, [pc, #532]	; (8002298 <decodeRMC+0x260>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b2c      	cmp	r3, #44	; 0x2c
 800208e:	d1f2      	bne.n	8002076 <decodeRMC+0x3e>
	inx++;
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <decodeRMC+0x260>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	4a80      	ldr	r2, [pc, #512]	; (8002298 <decodeRMC+0x260>)
 8002098:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 800209a:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <decodeRMC+0x260>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b41      	cmp	r3, #65	; 0x41
 80020a8:	d10d      	bne.n	80020c6 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2201      	movs	r2, #1
 80020ae:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80020b0:	4b79      	ldr	r3, [pc, #484]	; (8002298 <decodeRMC+0x260>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a78      	ldr	r2, [pc, #480]	; (8002298 <decodeRMC+0x260>)
 80020b8:	6013      	str	r3, [r2, #0]
	inx++;
 80020ba:	4b77      	ldr	r3, [pc, #476]	; (8002298 <decodeRMC+0x260>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a75      	ldr	r2, [pc, #468]	; (8002298 <decodeRMC+0x260>)
 80020c2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80020c4:	e009      	b.n	80020da <decodeRMC+0xa2>
		rmc->isValid =0;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
		return 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e1d8      	b.n	8002482 <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80020d0:	4b71      	ldr	r3, [pc, #452]	; (8002298 <decodeRMC+0x260>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a70      	ldr	r2, [pc, #448]	; (8002298 <decodeRMC+0x260>)
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <decodeRMC+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b2c      	cmp	r3, #44	; 0x2c
 80020e8:	d1f2      	bne.n	80020d0 <decodeRMC+0x98>
	inx++;
 80020ea:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <decodeRMC+0x260>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a69      	ldr	r2, [pc, #420]	; (8002298 <decodeRMC+0x260>)
 80020f2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80020f4:	e004      	b.n	8002100 <decodeRMC+0xc8>
 80020f6:	4b68      	ldr	r3, [pc, #416]	; (8002298 <decodeRMC+0x260>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a66      	ldr	r2, [pc, #408]	; (8002298 <decodeRMC+0x260>)
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b65      	ldr	r3, [pc, #404]	; (8002298 <decodeRMC+0x260>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b2c      	cmp	r3, #44	; 0x2c
 800210e:	d1f2      	bne.n	80020f6 <decodeRMC+0xbe>
	inx++;
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <decodeRMC+0x260>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a60      	ldr	r2, [pc, #384]	; (8002298 <decodeRMC+0x260>)
 8002118:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800211a:	e004      	b.n	8002126 <decodeRMC+0xee>
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <decodeRMC+0x260>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <decodeRMC+0x260>)
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <decodeRMC+0x260>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b2c      	cmp	r3, #44	; 0x2c
 8002134:	d1f2      	bne.n	800211c <decodeRMC+0xe4>
	inx++;
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <decodeRMC+0x260>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a56      	ldr	r2, [pc, #344]	; (8002298 <decodeRMC+0x260>)
 800213e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8002140:	e004      	b.n	800214c <decodeRMC+0x114>
 8002142:	4b55      	ldr	r3, [pc, #340]	; (8002298 <decodeRMC+0x260>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	4a53      	ldr	r2, [pc, #332]	; (8002298 <decodeRMC+0x260>)
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b52      	ldr	r3, [pc, #328]	; (8002298 <decodeRMC+0x260>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b2c      	cmp	r3, #44	; 0x2c
 800215a:	d1f2      	bne.n	8002142 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800215c:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <decodeRMC+0x260>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <decodeRMC+0x260>)
 8002164:	6013      	str	r3, [r2, #0]
	i=0;
 8002166:	2300      	movs	r3, #0
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	220c      	movs	r2, #12
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f006 fc3a 	bl	80089ec <memset>
	while (RMCbuffer[inx] != ',')
 8002178:	e013      	b.n	80021a2 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <decodeRMC+0x260>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	7819      	ldrb	r1, [r3, #0]
 8002186:	f107 0208 	add.w	r2, r7, #8
 800218a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218c:	4413      	add	r3, r2
 800218e:	460a      	mov	r2, r1
 8002190:	701a      	strb	r2, [r3, #0]
		i++;
 8002192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002194:	3301      	adds	r3, #1
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <decodeRMC+0x260>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <decodeRMC+0x260>)
 80021a0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <decodeRMC+0x260>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b2c      	cmp	r3, #44	; 0x2c
 80021b0:	d1e3      	bne.n	800217a <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d056      	beq.n	800226a <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	4618      	mov	r0, r3
 80021c2:	f006 fbe5 	bl	8008990 <atoi>
 80021c6:	4603      	mov	r3, r0
 80021c8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80021ce:	e002      	b.n	80021d6 <decodeRMC+0x19e>
 80021d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d2:	3301      	adds	r3, #1
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021d6:	f107 0208 	add.w	r2, r7, #8
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b2e      	cmp	r3, #46	; 0x2e
 80021e2:	d1f5      	bne.n	80021d0 <decodeRMC+0x198>
		j++;
 80021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e6:	3301      	adds	r3, #1
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f80a 	bl	8000208 <strlen>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	f107 0208 	add.w	r2, r7, #8
 8002202:	4413      	add	r3, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f006 fbc3 	bl	8008990 <atoi>
 800220a:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 800220c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f953 	bl	80004bc <__aeabi_i2d>
 8002216:	4604      	mov	r4, r0
 8002218:	460d      	mov	r5, r1
 800221a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800221c:	f7fe f94e 	bl	80004bc <__aeabi_i2d>
 8002220:	4680      	mov	r8, r0
 8002222:	4689      	mov	r9, r1
 8002224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002226:	f7fe f949 	bl	80004bc <__aeabi_i2d>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	ec43 2b11 	vmov	d1, r2, r3
 8002232:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002290 <decodeRMC+0x258>
 8002236:	f006 fc6d 	bl	8008b14 <pow>
 800223a:	ec53 2b10 	vmov	r2, r3, d0
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fe facf 	bl	80007e4 <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4620      	mov	r0, r4
 800224c:	4629      	mov	r1, r5
 800224e:	f7fd ffe9 	bl	8000224 <__adddf3>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	f7fe fc91 	bl	8000b80 <__aeabi_d2f>
 800225e:	4603      	mov	r3, r0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	e003      	b.n	8002272 <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <decodeRMC+0x260>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a07      	ldr	r2, [pc, #28]	; (8002298 <decodeRMC+0x260>)
 800227a:	6013      	str	r3, [r2, #0]
	i=0;
 800227c:	2300      	movs	r3, #0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	220c      	movs	r2, #12
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f006 fbaf 	bl	80089ec <memset>
	while (RMCbuffer[inx] != ',')
 800228e:	e019      	b.n	80022c4 <decodeRMC+0x28c>
 8002290:	00000000 	.word	0x00000000
 8002294:	40240000 	.word	0x40240000
 8002298:	20000114 	.word	0x20000114
	{
		buffer[i] = RMCbuffer[inx];
 800229c:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <decodeRMC+0x460>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	7819      	ldrb	r1, [r3, #0]
 80022a8:	f107 0208 	add.w	r2, r7, #8
 80022ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ae:	4413      	add	r3, r2
 80022b0:	460a      	mov	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
		i++;
 80022b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b6:	3301      	adds	r3, #1
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80022ba:	4b77      	ldr	r3, [pc, #476]	; (8002498 <decodeRMC+0x460>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	4a75      	ldr	r2, [pc, #468]	; (8002498 <decodeRMC+0x460>)
 80022c2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80022c4:	4b74      	ldr	r3, [pc, #464]	; (8002498 <decodeRMC+0x460>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b2c      	cmp	r3, #44	; 0x2c
 80022d2:	d1e3      	bne.n	800229c <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80022d4:	f107 0308 	add.w	r3, r7, #8
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d056      	beq.n	800238c <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	4618      	mov	r0, r3
 80022e4:	f006 fb54 	bl	8008990 <atoi>
 80022e8:	4603      	mov	r3, r0
 80022ea:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80022f0:	e002      	b.n	80022f8 <decodeRMC+0x2c0>
 80022f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f4:	3301      	adds	r3, #1
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
 80022f8:	f107 0208 	add.w	r2, r7, #8
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b2e      	cmp	r3, #46	; 0x2e
 8002304:	d1f5      	bne.n	80022f2 <decodeRMC+0x2ba>
		j++;
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002308:	3301      	adds	r3, #1
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 800230c:	f107 0308 	add.w	r3, r7, #8
 8002310:	4618      	mov	r0, r3
 8002312:	f7fd ff79 	bl	8000208 <strlen>
 8002316:	4602      	mov	r2, r0
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	f107 0208 	add.w	r2, r7, #8
 8002324:	4413      	add	r3, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f006 fb32 	bl	8008990 <atoi>
 800232c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800232e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f8c2 	bl	80004bc <__aeabi_i2d>
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	69b8      	ldr	r0, [r7, #24]
 800233e:	f7fe f8bd 	bl	80004bc <__aeabi_i2d>
 8002342:	4680      	mov	r8, r0
 8002344:	4689      	mov	r9, r1
 8002346:	69f8      	ldr	r0, [r7, #28]
 8002348:	f7fe f8b8 	bl	80004bc <__aeabi_i2d>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	ec43 2b11 	vmov	d1, r2, r3
 8002354:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002490 <decodeRMC+0x458>
 8002358:	f006 fbdc 	bl	8008b14 <pow>
 800235c:	ec53 2b10 	vmov	r2, r3, d0
 8002360:	4640      	mov	r0, r8
 8002362:	4649      	mov	r1, r9
 8002364:	f7fe fa3e 	bl	80007e4 <__aeabi_ddiv>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fd ff58 	bl	8000224 <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fc00 	bl	8000b80 <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e003      	b.n	8002394 <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8002394:	4b40      	ldr	r3, [pc, #256]	; (8002498 <decodeRMC+0x460>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	4a3f      	ldr	r2, [pc, #252]	; (8002498 <decodeRMC+0x460>)
 800239c:	6013      	str	r3, [r2, #0]
	i=0;
 800239e:	2300      	movs	r3, #0
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	220c      	movs	r2, #12
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f006 fb1e 	bl	80089ec <memset>
	while (RMCbuffer[inx] != ',')
 80023b0:	e013      	b.n	80023da <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <decodeRMC+0x460>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	7819      	ldrb	r1, [r3, #0]
 80023be:	f107 0208 	add.w	r2, r7, #8
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	4413      	add	r3, r2
 80023c6:	460a      	mov	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
		i++;
 80023ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023cc:	3301      	adds	r3, #1
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <decodeRMC+0x460>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a30      	ldr	r2, [pc, #192]	; (8002498 <decodeRMC+0x460>)
 80023d8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80023da:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <decodeRMC+0x460>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b2c      	cmp	r3, #44	; 0x2c
 80023e8:	d1e3      	bne.n	80023b2 <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	4618      	mov	r0, r3
 80023f0:	f006 face 	bl	8008990 <atoi>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a29      	ldr	r2, [pc, #164]	; (800249c <decodeRMC+0x464>)
 80023f8:	fb82 1203 	smull	r1, r2, r2, r3
 80023fc:	1312      	asrs	r2, r2, #12
 80023fe:	17db      	asrs	r3, r3, #31
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <decodeRMC+0x468>)
 8002404:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	4618      	mov	r0, r3
 800240c:	f006 fac0 	bl	8008990 <atoi>
 8002410:	4603      	mov	r3, r0
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <decodeRMC+0x46c>)
 8002414:	fb82 1203 	smull	r1, r2, r2, r3
 8002418:	1152      	asrs	r2, r2, #5
 800241a:	17db      	asrs	r3, r3, #31
 800241c:	1ad2      	subs	r2, r2, r3
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <decodeRMC+0x46c>)
 8002420:	fb83 1302 	smull	r1, r3, r3, r2
 8002424:	1159      	asrs	r1, r3, #5
 8002426:	17d3      	asrs	r3, r2, #31
 8002428:	1acb      	subs	r3, r1, r3
 800242a:	2164      	movs	r1, #100	; 0x64
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <decodeRMC+0x470>)
 8002434:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	4618      	mov	r0, r3
 800243c:	f006 faa8 	bl	8008990 <atoi>
 8002440:	4602      	mov	r2, r0
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <decodeRMC+0x46c>)
 8002444:	fb83 1302 	smull	r1, r3, r3, r2
 8002448:	1159      	asrs	r1, r3, #5
 800244a:	17d3      	asrs	r3, r2, #31
 800244c:	1acb      	subs	r3, r1, r3
 800244e:	2164      	movs	r1, #100	; 0x64
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <decodeRMC+0x474>)
 8002458:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <decodeRMC+0x468>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <decodeRMC+0x478>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <decodeRMC+0x468>)
 8002466:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <decodeRMC+0x468>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <decodeRMC+0x470>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <decodeRMC+0x474>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	609a      	str	r2, [r3, #8]

	return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3740      	adds	r7, #64	; 0x40
 8002486:	46bd      	mov	sp, r7
 8002488:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	00000000 	.word	0x00000000
 8002494:	40240000 	.word	0x40240000
 8002498:	20000114 	.word	0x20000114
 800249c:	68db8bad 	.word	0x68db8bad
 80024a0:	20000120 	.word	0x20000120
 80024a4:	51eb851f 	.word	0x51eb851f
 80024a8:	20000124 	.word	0x20000124
 80024ac:	20000128 	.word	0x20000128
 80024b0:	2000012c 	.word	0x2000012c
 80024b4:	00000000 	.word	0x00000000

080024b8 <current_sensor5.1>:
  Ringbuf_init();
  HAL_Delay(500);


  void current_sensor5()
  {
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue5 = dmaOut[1];
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <current_sensor5.1+0xa8>)
 80024c4:	885a      	ldrh	r2, [r3, #2]
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <current_sensor5.1+0xac>)
 80024c8:	801a      	strh	r2, [r3, #0]
  	  rawVoltage5 = ((float) readValue5 * 3.3) / 4095 *adc_err5;
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <current_sensor5.1+0xac>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	ee17 0a90 	vmov	r0, s15
 80024da:	f7fe f801 	bl	80004e0 <__aeabi_f2d>
 80024de:	a31c      	add	r3, pc, #112	; (adr r3, 8002550 <current_sensor5.1+0x98>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe f854 	bl	8000590 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	a319      	add	r3, pc, #100	; (adr r3, 8002558 <current_sensor5.1+0xa0>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f975 	bl	80007e4 <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4614      	mov	r4, r2
 8002500:	461d      	mov	r5, r3
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <current_sensor5.1+0xb0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ffea 	bl	80004e0 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fe f83c 	bl	8000590 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe fb2e 	bl	8000b80 <__aeabi_d2f>
 8002524:	4603      	mov	r3, r0
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <current_sensor5.1+0xb4>)
 8002528:	6013      	str	r3, [r2, #0]
  	  current5 =(1 - rawVoltage5)/sensitivity5;
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <current_sensor5.1+0xb4>)
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002534:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <current_sensor5.1+0xb8>)
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <current_sensor5.1+0xbc>)
 8002544:	edc3 7a00 	vstr	s15, [r3]
  }
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bdb0      	pop	{r4, r5, r7, pc}
 8002550:	66666666 	.word	0x66666666
 8002554:	400a6666 	.word	0x400a6666
 8002558:	00000000 	.word	0x00000000
 800255c:	40affe00 	.word	0x40affe00
 8002560:	20000344 	.word	0x20000344
 8002564:	20000358 	.word	0x20000358
 8002568:	2000000c 	.word	0x2000000c
 800256c:	2000035c 	.word	0x2000035c
 8002570:	20000008 	.word	0x20000008
 8002574:	20000360 	.word	0x20000360

08002578 <main>:
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
int main(void)
 800257e:	f107 0310 	add.w	r3, r7, #16
 8002582:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8002584:	f001 f9dc 	bl	8003940 <HAL_Init>
  SystemClock_Config();
 8002588:	f000 f92c 	bl	80027e4 <SystemClock_Config>
  MX_GPIO_Init();
 800258c:	f000 fb3a 	bl	8002c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8002590:	f000 fb18 	bl	8002bc4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002594:	f000 f998 	bl	80028c8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002598:	f000 fa60 	bl	8002a5c <MX_SPI1_Init>
  MX_TIM1_Init();
 800259c:	f000 fa96 	bl	8002acc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80025a0:	f000 fae6 	bl	8002b70 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80025a4:	f000 f9fe 	bl	80029a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80025a8:	f000 fa2a 	bl	8002a00 <MX_I2C2_Init>
  HAL_ADC_Init(&hadc1);
 80025ac:	4835      	ldr	r0, [pc, #212]	; (8002684 <main+0x10c>)
 80025ae:	f001 fa5d 	bl	8003a6c <HAL_ADC_Init>
  MPU6050_Init();
 80025b2:	f000 fb99 	bl	8002ce8 <MPU6050_Init>
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 3);
 80025b6:	2203      	movs	r2, #3
 80025b8:	4933      	ldr	r1, [pc, #204]	; (8002688 <main+0x110>)
 80025ba:	4832      	ldr	r0, [pc, #200]	; (8002684 <main+0x10c>)
 80025bc:	f001 fa9a 	bl	8003af4 <HAL_ADC_Start_DMA>
  BMP180_Start();
 80025c0:	f7ff f904 	bl	80017cc <BMP180_Start>
  Ringbuf_init();
 80025c4:	f000 ff7c 	bl	80034c0 <Ringbuf_init>
  HAL_Delay(500);
 80025c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025cc:	f001 fa2a 	bl	8003a24 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   HAL_Delay(5);
 80025d0:	2005      	movs	r0, #5
 80025d2:	f001 fa27 	bl	8003a24 <HAL_Delay>
	  if(Wait_for("GGA")==1)
 80025d6:	482d      	ldr	r0, [pc, #180]	; (800268c <main+0x114>)
 80025d8:	f001 f8a2 	bl	8003720 <Wait_for>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <main+0x7a>
	  {
		  Copy_upto("*", GGA);
 80025e2:	492b      	ldr	r1, [pc, #172]	; (8002690 <main+0x118>)
 80025e4:	482b      	ldr	r0, [pc, #172]	; (8002694 <main+0x11c>)
 80025e6:	f001 f81b 	bl	8003620 <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 80025ea:	492b      	ldr	r1, [pc, #172]	; (8002698 <main+0x120>)
 80025ec:	4828      	ldr	r0, [pc, #160]	; (8002690 <main+0x118>)
 80025ee:	f7ff f977 	bl	80018e0 <decodeGGA>
	  }
	  if (Wait_for("RMC")==1)
 80025f2:	482a      	ldr	r0, [pc, #168]	; (800269c <main+0x124>)
 80025f4:	f001 f894 	bl	8003720 <Wait_for>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <main+0x96>
	  {
		  Copy_upto("*",RMC);
 80025fe:	4928      	ldr	r1, [pc, #160]	; (80026a0 <main+0x128>)
 8002600:	4824      	ldr	r0, [pc, #144]	; (8002694 <main+0x11c>)
 8002602:	f001 f80d 	bl	8003620 <Copy_upto>
		  decodeRMC(RMC, &gpsData.rmcstruct);
 8002606:	4927      	ldr	r1, [pc, #156]	; (80026a4 <main+0x12c>)
 8002608:	4825      	ldr	r0, [pc, #148]	; (80026a0 <main+0x128>)
 800260a:	f7ff fd15 	bl	8002038 <decodeRMC>
	  }
	  
	  temperature=Max6675_Read_Temp();
 800260e:	f7ff f8e3 	bl	80017d8 <Max6675_Read_Temp>
 8002612:	eef0 7a40 	vmov.f32	s15, s0
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <main+0x130>)
 8002618:	edc3 7a00 	vstr	s15, [r3]
	  barometer_sensor();
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	469c      	mov	ip, r3
 8002620:	f000 f8ba 	bl	8002798 <barometer_sensor.0>

	  current_sensor5();
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	469c      	mov	ip, r3
 8002628:	f7ff ff46 	bl	80024b8 <current_sensor5.1>
	  current_sensor20();
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	469c      	mov	ip, r3
 8002630:	f000 f852 	bl	80026d8 <current_sensor20.2>

	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <main+0x134>)
 8002636:	491e      	ldr	r1, [pc, #120]	; (80026b0 <main+0x138>)
 8002638:	481e      	ldr	r0, [pc, #120]	; (80026b4 <main+0x13c>)
 800263a:	f000 fbbd 	bl	8002db8 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 800263e:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <main+0x140>)
 8002640:	491e      	ldr	r1, [pc, #120]	; (80026bc <main+0x144>)
 8002642:	481f      	ldr	r0, [pc, #124]	; (80026c0 <main+0x148>)
 8002644:	f000 fc3c 	bl	8002ec0 <MPU6050_Read_Gyro>
	  //HAL_Delay(250);

	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, CV_Voltage_ui);
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <main+0x14c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	2140      	movs	r1, #64	; 0x40
 8002650:	481d      	ldr	r0, [pc, #116]	; (80026c8 <main+0x150>)
 8002652:	f002 fcd5 	bl	8005000 <HAL_GPIO_WritePin>
	  CpmVoltage = dmaOut[0]*(5.0/4096.0);
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <main+0x110>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff2e 	bl	80004bc <__aeabi_i2d>
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <main+0x154>)
 8002666:	f7fd ff93 	bl	8000590 <__aeabi_dmul>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fa85 	bl	8000b80 <__aeabi_d2f>
 8002676:	4603      	mov	r3, r0
 8002678:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <main+0x158>)
 800267a:	6013      	str	r3, [r2, #0]

	  HAL_Delay(100);
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	f001 f9d1 	bl	8003a24 <HAL_Delay>
   HAL_Delay(5);
 8002682:	e7a5      	b.n	80025d0 <main+0x58>
 8002684:	20000130 	.word	0x20000130
 8002688:	20000344 	.word	0x20000344
 800268c:	08009968 	.word	0x08009968
 8002690:	20000370 	.word	0x20000370
 8002694:	0800996c 	.word	0x0800996c
 8002698:	20000438 	.word	0x20000438
 800269c:	08009970 	.word	0x08009970
 80026a0:	200003d4 	.word	0x200003d4
 80026a4:	20000464 	.word	0x20000464
 80026a8:	2000033c 	.word	0x2000033c
 80026ac:	20000328 	.word	0x20000328
 80026b0:	20000324 	.word	0x20000324
 80026b4:	20000320 	.word	0x20000320
 80026b8:	20000334 	.word	0x20000334
 80026bc:	20000330 	.word	0x20000330
 80026c0:	2000032c 	.word	0x2000032c
 80026c4:	20000338 	.word	0x20000338
 80026c8:	40020000 	.word	0x40020000
 80026cc:	3f540000 	.word	0x3f540000
 80026d0:	20000004 	.word	0x20000004
 80026d4:	00000000 	.word	0x00000000

080026d8 <current_sensor20.2>:
  {
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue20 = dmaOut[2];
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <current_sensor20.2+0xa8>)
 80026e4:	889a      	ldrh	r2, [r3, #4]
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <current_sensor20.2+0xac>)
 80026e8:	801a      	strh	r2, [r3, #0]
  	  rawVoltage20 = ((float) readValue20 * 3.3) / 4095 *adc_err20;
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <current_sensor20.2+0xac>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f6:	ee17 0a90 	vmov	r0, s15
 80026fa:	f7fd fef1 	bl	80004e0 <__aeabi_f2d>
 80026fe:	a31c      	add	r3, pc, #112	; (adr r3, 8002770 <current_sensor20.2+0x98>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd ff44 	bl	8000590 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	a319      	add	r3, pc, #100	; (adr r3, 8002778 <current_sensor20.2+0xa0>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fe f865 	bl	80007e4 <__aeabi_ddiv>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4614      	mov	r4, r2
 8002720:	461d      	mov	r5, r3
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <current_sensor20.2+0xb0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd feda 	bl	80004e0 <__aeabi_f2d>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4620      	mov	r0, r4
 8002732:	4629      	mov	r1, r5
 8002734:	f7fd ff2c 	bl	8000590 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe fa1e 	bl	8000b80 <__aeabi_d2f>
 8002744:	4603      	mov	r3, r0
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <current_sensor20.2+0xb4>)
 8002748:	6013      	str	r3, [r2, #0]
  	  current20 =(1 - rawVoltage20)/sensitivity20;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <current_sensor20.2+0xb4>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002754:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <current_sensor20.2+0xb8>)
 800275a:	ed93 7a00 	vldr	s14, [r3]
 800275e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <current_sensor20.2+0xbc>)
 8002764:	edc3 7a00 	vstr	s15, [r3]
  }
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bdb0      	pop	{r4, r5, r7, pc}
 8002770:	66666666 	.word	0x66666666
 8002774:	400a6666 	.word	0x400a6666
 8002778:	00000000 	.word	0x00000000
 800277c:	40affe00 	.word	0x40affe00
 8002780:	20000344 	.word	0x20000344
 8002784:	20000364 	.word	0x20000364
 8002788:	20000014 	.word	0x20000014
 800278c:	20000368 	.word	0x20000368
 8002790:	20000010 	.word	0x20000010
 8002794:	2000036c 	.word	0x2000036c

08002798 <barometer_sensor.0>:
  {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 80027a2:	f7fe fc9f 	bl	80010e4 <BMP180_GetTemp>
 80027a6:	eef0 7a40 	vmov.f32	s15, s0
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <barometer_sensor.0+0x40>)
 80027ac:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fd91 	bl	80012d8 <BMP180_GetPress>
 80027b6:	eef0 7a40 	vmov.f32	s15, s0
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <barometer_sensor.0+0x44>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
  	  Altitude = BMP180_GetAlt(0);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe ffb9 	bl	8001738 <BMP180_GetAlt>
 80027c6:	eef0 7a40 	vmov.f32	s15, s0
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <barometer_sensor.0+0x48>)
 80027cc:	edc3 7a00 	vstr	s15, [r3]
  }
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000034c 	.word	0x2000034c
 80027dc:	20000350 	.word	0x20000350
 80027e0:	20000354 	.word	0x20000354

080027e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b094      	sub	sp, #80	; 0x50
 80027e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	2234      	movs	r2, #52	; 0x34
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f006 f8fa 	bl	80089ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f8:	f107 0308 	add.w	r3, r7, #8
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <SystemClock_Config+0xdc>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	4a2b      	ldr	r2, [pc, #172]	; (80028c0 <SystemClock_Config+0xdc>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	; 0x40
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <SystemClock_Config+0xdc>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002824:	2300      	movs	r3, #0
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <SystemClock_Config+0xe0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a25      	ldr	r2, [pc, #148]	; (80028c4 <SystemClock_Config+0xe0>)
 800282e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <SystemClock_Config+0xe0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002840:	2302      	movs	r3, #2
 8002842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002844:	2301      	movs	r3, #1
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002848:	2310      	movs	r3, #16
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284c:	2302      	movs	r3, #2
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002850:	2300      	movs	r3, #0
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002854:	2308      	movs	r3, #8
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002858:	23b4      	movs	r3, #180	; 0xb4
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800285c:	2302      	movs	r3, #2
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002860:	2302      	movs	r3, #2
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002864:	2302      	movs	r3, #2
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4618      	mov	r0, r3
 800286e:	f003 ff3b 	bl	80066e8 <HAL_RCC_OscConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002878:	f000 fa30 	bl	8002cdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800287c:	f003 fb9a 	bl	8005fb4 <HAL_PWREx_EnableOverDrive>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002886:	f000 fa29 	bl	8002cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800288a:	230f      	movs	r3, #15
 800288c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288e:	2302      	movs	r3, #2
 8002890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800289a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800289c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028a2:	f107 0308 	add.w	r3, r7, #8
 80028a6:	2105      	movs	r1, #5
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fbd3 	bl	8006054 <HAL_RCC_ClockConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80028b4:	f000 fa12 	bl	8002cdc <Error_Handler>
  }
}
 80028b8:	bf00      	nop
 80028ba:	3750      	adds	r7, #80	; 0x50
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000

080028c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ce:	463b      	mov	r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <MX_ADC1_Init+0xd0>)
 80028dc:	4a2f      	ldr	r2, [pc, #188]	; (800299c <MX_ADC1_Init+0xd4>)
 80028de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <MX_ADC1_Init+0xd0>)
 80028e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <MX_ADC1_Init+0xd0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <MX_ADC1_Init+0xd0>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <MX_ADC1_Init+0xd0>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <MX_ADC1_Init+0xd0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <MX_ADC1_Init+0xd0>)
 8002904:	2200      	movs	r2, #0
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <MX_ADC1_Init+0xd0>)
 800290a:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <MX_ADC1_Init+0xd8>)
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <MX_ADC1_Init+0xd0>)
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002914:	4b20      	ldr	r3, [pc, #128]	; (8002998 <MX_ADC1_Init+0xd0>)
 8002916:	2203      	movs	r2, #3
 8002918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <MX_ADC1_Init+0xd0>)
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <MX_ADC1_Init+0xd0>)
 8002924:	2201      	movs	r2, #1
 8002926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002928:	481b      	ldr	r0, [pc, #108]	; (8002998 <MX_ADC1_Init+0xd0>)
 800292a:	f001 f89f 	bl	8003a6c <HAL_ADC_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002934:	f000 f9d2 	bl	8002cdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800293c:	2301      	movs	r3, #1
 800293e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002944:	463b      	mov	r3, r7
 8002946:	4619      	mov	r1, r3
 8002948:	4813      	ldr	r0, [pc, #76]	; (8002998 <MX_ADC1_Init+0xd0>)
 800294a:	f001 fa01 	bl	8003d50 <HAL_ADC_ConfigChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002954:	f000 f9c2 	bl	8002cdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002958:	2301      	movs	r3, #1
 800295a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800295c:	2302      	movs	r3, #2
 800295e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002960:	463b      	mov	r3, r7
 8002962:	4619      	mov	r1, r3
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <MX_ADC1_Init+0xd0>)
 8002966:	f001 f9f3 	bl	8003d50 <HAL_ADC_ConfigChannel>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002970:	f000 f9b4 	bl	8002cdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002974:	2304      	movs	r3, #4
 8002976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002978:	2303      	movs	r3, #3
 800297a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800297c:	463b      	mov	r3, r7
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_ADC1_Init+0xd0>)
 8002982:	f001 f9e5 	bl	8003d50 <HAL_ADC_ConfigChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800298c:	f000 f9a6 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000130 	.word	0x20000130
 800299c:	40012000 	.word	0x40012000
 80029a0:	0f000001 	.word	0x0f000001

080029a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <MX_I2C1_Init+0x54>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <MX_I2C1_Init+0x58>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029e2:	f002 fb27 	bl	8005034 <HAL_I2C_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029ec:	f000 f976 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200001d8 	.word	0x200001d8
 80029f8:	40005400 	.word	0x40005400
 80029fc:	000186a0 	.word	0x000186a0

08002a00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <MX_I2C2_Init+0x54>)
 8002a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <MX_I2C2_Init+0x58>)
 8002a0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a3c:	4804      	ldr	r0, [pc, #16]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a3e:	f002 faf9 	bl	8005034 <HAL_I2C_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a48:	f000 f948 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	2000022c 	.word	0x2000022c
 8002a54:	40005800 	.word	0x40005800
 8002a58:	000186a0 	.word	0x000186a0

08002a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <MX_SPI1_Init+0x6c>)
 8002a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a74:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002aaa:	220a      	movs	r2, #10
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002ab0:	f004 f8b8 	bl	8006c24 <HAL_SPI_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002aba:	f000 f90f 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000280 	.word	0x20000280
 8002ac8:	40013000 	.word	0x40013000

08002acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002aea:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <MX_TIM1_Init+0xa0>)
 8002aec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002af0:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8002af4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b16:	4814      	ldr	r0, [pc, #80]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002b18:	f004 fcf0 	bl	80074fc <HAL_TIM_Base_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002b22:	f000 f8db 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	4619      	mov	r1, r3
 8002b32:	480d      	ldr	r0, [pc, #52]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002b34:	f004 fd9a 	bl	800766c <HAL_TIM_ConfigClockSource>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002b3e:	f000 f8cd 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4806      	ldr	r0, [pc, #24]	; (8002b68 <MX_TIM1_Init+0x9c>)
 8002b50:	f004 ff8e 	bl	8007a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002b5a:	f000 f8bf 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200002d8 	.word	0x200002d8
 8002b6c:	40010000 	.word	0x40010000

08002b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <MX_USART1_UART_Init+0x50>)
 8002b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b96:	220c      	movs	r2, #12
 8002b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002ba8:	f004 ffde 	bl	8007b68 <HAL_UART_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bb2:	f000 f893 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000048c 	.word	0x2000048c
 8002bc0:	40011000 	.word	0x40011000

08002bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_DMA_Init+0x3c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <MX_DMA_Init+0x3c>)
 8002bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_DMA_Init+0x3c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2038      	movs	r0, #56	; 0x38
 8002bec:	f001 fc3b 	bl	8004466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002bf0:	2038      	movs	r0, #56	; 0x38
 8002bf2:	f001 fc54 	bl	800449e <HAL_NVIC_EnableIRQ>

}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <MX_GPIO_Init+0xd0>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CV_Enable_Pin|MT_CS_Pin, GPIO_PIN_RESET);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	21c0      	movs	r1, #192	; 0xc0
 8002c8e:	4812      	ldr	r0, [pc, #72]	; (8002cd8 <MX_GPIO_Init+0xd4>)
 8002c90:	f002 f9b6 	bl	8005000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 8002c94:	2340      	movs	r3, #64	; 0x40
 8002c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <MX_GPIO_Init+0xd4>)
 8002cac:	f002 f814 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MT_CS_Pin */
  GPIO_InitStruct.Pin = MT_CS_Pin;
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MT_CS_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <MX_GPIO_Init+0xd4>)
 8002cc8:	f002 f806 	bl	8004cd8 <HAL_GPIO_Init>

}
 8002ccc:	bf00      	nop
 8002cce:	3728      	adds	r7, #40	; 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020000 	.word	0x40020000

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <Error_Handler+0x8>
	...

08002ce8 <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf2:	9302      	str	r3, [sp, #8]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <MPU6050_Init+0xc0>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	2275      	movs	r2, #117	; 0x75
 8002d00:	21d0      	movs	r1, #208	; 0xd0
 8002d02:	482a      	ldr	r0, [pc, #168]	; (8002dac <MPU6050_Init+0xc4>)
 8002d04:	f002 fbd4 	bl	80054b0 <HAL_I2C_Mem_Read>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <MPU6050_Init+0xc8>)
 8002d0e:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002d10:	4b25      	ldr	r3, [pc, #148]	; (8002da8 <MPU6050_Init+0xc0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b68      	cmp	r3, #104	; 0x68
 8002d16:	d140      	bne.n	8002d9a <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	9302      	str	r3, [sp, #8]
 8002d24:	2301      	movs	r3, #1
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	226b      	movs	r2, #107	; 0x6b
 8002d30:	21d0      	movs	r1, #208	; 0xd0
 8002d32:	481e      	ldr	r0, [pc, #120]	; (8002dac <MPU6050_Init+0xc4>)
 8002d34:	f002 fac2 	bl	80052bc <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	2301      	movs	r3, #1
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	2219      	movs	r2, #25
 8002d50:	21d0      	movs	r1, #208	; 0xd0
 8002d52:	4816      	ldr	r0, [pc, #88]	; (8002dac <MPU6050_Init+0xc4>)
 8002d54:	f002 fab2 	bl	80052bc <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	2301      	movs	r3, #1
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	221c      	movs	r2, #28
 8002d70:	21d0      	movs	r1, #208	; 0xd0
 8002d72:	480e      	ldr	r0, [pc, #56]	; (8002dac <MPU6050_Init+0xc4>)
 8002d74:	f002 faa2 	bl	80052bc <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	2301      	movs	r3, #1
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <MPU6050_Init+0xcc>)
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	221b      	movs	r2, #27
 8002d90:	21d0      	movs	r1, #208	; 0xd0
 8002d92:	4806      	ldr	r0, [pc, #24]	; (8002dac <MPU6050_Init+0xc4>)
 8002d94:	f002 fa92 	bl	80052bc <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 8002d98:	e002      	b.n	8002da0 <MPU6050_Init+0xb8>
	else check=-1;
 8002d9a:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <MPU6050_Init+0xc0>)
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	701a      	strb	r2, [r3, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000488 	.word	0x20000488
 8002dac:	200001d8 	.word	0x200001d8
 8002db0:	20000018 	.word	0x20000018
 8002db4:	20000489 	.word	0x20000489

08002db8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	2306      	movs	r3, #6
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	f107 0310 	add.w	r3, r7, #16
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	223b      	movs	r2, #59	; 0x3b
 8002dd8:	21d0      	movs	r1, #208	; 0xd0
 8002dda:	4832      	ldr	r0, [pc, #200]	; (8002ea4 <MPU6050_Read_Accel+0xec>)
 8002ddc:	f002 fb68 	bl	80054b0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002de0:	7c3b      	ldrb	r3, [r7, #16]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	7c7b      	ldrb	r3, [r7, #17]
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <MPU6050_Read_Accel+0xf0>)
 8002df0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002df2:	7cbb      	ldrb	r3, [r7, #18]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	b21a      	sxth	r2, r3
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	b21a      	sxth	r2, r3
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <MPU6050_Read_Accel+0xf4>)
 8002e02:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002e04:	7d3b      	ldrb	r3, [r7, #20]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	7d7b      	ldrb	r3, [r7, #21]
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <MPU6050_Read_Accel+0xf8>)
 8002e14:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 8002e16:	7c7b      	ldrb	r3, [r7, #17]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <MPU6050_Read_Accel+0xfc>)
 8002e22:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <MPU6050_Read_Accel+0xf0>)
 8002e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb46 	bl	80004bc <__aeabi_i2d>
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <MPU6050_Read_Accel+0x100>)
 8002e36:	f7fd fcd5 	bl	80007e4 <__aeabi_ddiv>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fd fe9d 	bl	8000b80 <__aeabi_d2f>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <MPU6050_Read_Accel+0xf4>)
 8002e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb32 	bl	80004bc <__aeabi_i2d>
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <MPU6050_Read_Accel+0x100>)
 8002e5e:	f7fd fcc1 	bl	80007e4 <__aeabi_ddiv>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fe89 	bl	8000b80 <__aeabi_d2f>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MPU6050_Read_Accel+0xf8>)
 8002e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fb1e 	bl	80004bc <__aeabi_i2d>
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MPU6050_Read_Accel+0x100>)
 8002e86:	f7fd fcad 	bl	80007e4 <__aeabi_ddiv>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	f7fd fe75 	bl	8000b80 <__aeabi_d2f>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	601a      	str	r2, [r3, #0]

}
 8002e9c:	bf00      	nop
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200001d8 	.word	0x200001d8
 8002ea8:	2000047c 	.word	0x2000047c
 8002eac:	2000047e 	.word	0x2000047e
 8002eb0:	20000480 	.word	0x20000480
 8002eb4:	20000018 	.word	0x20000018
 8002eb8:	40d00000 	.word	0x40d00000
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af04      	add	r7, sp, #16
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2301      	movs	r3, #1
 8002ede:	2243      	movs	r2, #67	; 0x43
 8002ee0:	21d0      	movs	r1, #208	; 0xd0
 8002ee2:	4831      	ldr	r0, [pc, #196]	; (8002fa8 <MPU6050_Read_Gyro+0xe8>)
 8002ee4:	f002 fae4 	bl	80054b0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002ee8:	7c3b      	ldrb	r3, [r7, #16]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	b21a      	sxth	r2, r3
 8002eee:	7c7b      	ldrb	r3, [r7, #17]
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <MPU6050_Read_Gyro+0xec>)
 8002ef8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002efa:	7cbb      	ldrb	r3, [r7, #18]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	b21a      	sxth	r2, r3
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <MPU6050_Read_Gyro+0xf0>)
 8002f0a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002f0c:	7d3b      	ldrb	r3, [r7, #20]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	b21a      	sxth	r2, r3
 8002f12:	7d7b      	ldrb	r3, [r7, #21]
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <MPU6050_Read_Gyro+0xf4>)
 8002f1c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <MPU6050_Read_Gyro+0xec>)
 8002f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fac9 	bl	80004bc <__aeabi_i2d>
 8002f2a:	a31d      	add	r3, pc, #116	; (adr r3, 8002fa0 <MPU6050_Read_Gyro+0xe0>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd fc58 	bl	80007e4 <__aeabi_ddiv>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fe20 	bl	8000b80 <__aeabi_d2f>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <MPU6050_Read_Gyro+0xf0>)
 8002f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fab5 	bl	80004bc <__aeabi_i2d>
 8002f52:	a313      	add	r3, pc, #76	; (adr r3, 8002fa0 <MPU6050_Read_Gyro+0xe0>)
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f7fd fc44 	bl	80007e4 <__aeabi_ddiv>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fe0c 	bl	8000b80 <__aeabi_d2f>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <MPU6050_Read_Gyro+0xf4>)
 8002f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd faa1 	bl	80004bc <__aeabi_i2d>
 8002f7a:	a309      	add	r3, pc, #36	; (adr r3, 8002fa0 <MPU6050_Read_Gyro+0xe0>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f7fd fc30 	bl	80007e4 <__aeabi_ddiv>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fd fdf8 	bl	8000b80 <__aeabi_d2f>
 8002f90:	4602      	mov	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	40606000 	.word	0x40606000
 8002fa8:	200001d8 	.word	0x200001d8
 8002fac:	20000482 	.word	0x20000482
 8002fb0:	20000484 	.word	0x20000484
 8002fb4:	20000486 	.word	0x20000486

08002fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_MspInit+0x58>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_MspInit+0x58>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_MspInit+0x58>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_MspInit+0x58>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <HAL_MspInit+0x58>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_MspInit+0x58>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	f001 fa33 	bl	8004466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003000:	2005      	movs	r0, #5
 8003002:	f001 fa4c 	bl	800449e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <HAL_ADC_MspInit+0xdc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d157      	bne.n	80030e6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_ADC_MspInit+0xe0>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_ADC_MspInit+0xe0>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_ADC_MspInit+0xe0>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_ADC_MspInit+0xe0>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_ADC_MspInit+0xe0>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_ADC_MspInit+0xe0>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800306e:	2313      	movs	r3, #19
 8003070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003072:	2303      	movs	r3, #3
 8003074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	481d      	ldr	r0, [pc, #116]	; (80030f8 <HAL_ADC_MspInit+0xe4>)
 8003082:	f001 fe29 	bl	8004cd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_ADC_MspInit+0xec>)
 800308a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 800308e:	2200      	movs	r2, #0
 8003090:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030c4:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030ca:	480c      	ldr	r0, [pc, #48]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030cc:	f001 fa02 	bl	80044d4 <HAL_DMA_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80030d6:	f7ff fe01 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
 80030e0:	4a06      	ldr	r2, [pc, #24]	; (80030fc <HAL_ADC_MspInit+0xe8>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40012000 	.word	0x40012000
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020000 	.word	0x40020000
 80030fc:	20000178 	.word	0x20000178
 8003100:	40026410 	.word	0x40026410

08003104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a42      	ldr	r2, [pc, #264]	; (800322c <HAL_I2C_MspInit+0x128>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d12c      	bne.n	8003180 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003142:	23c0      	movs	r3, #192	; 0xc0
 8003144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003146:	2312      	movs	r3, #18
 8003148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003152:	2304      	movs	r3, #4
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	4619      	mov	r1, r3
 800315c:	4835      	ldr	r0, [pc, #212]	; (8003234 <HAL_I2C_MspInit+0x130>)
 800315e:	f001 fdbb 	bl	8004cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	4b32      	ldr	r3, [pc, #200]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 800316c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800317e:	e050      	b.n	8003222 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <HAL_I2C_MspInit+0x134>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d14b      	bne.n	8003222 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a20      	ldr	r2, [pc, #128]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c8:	2312      	movs	r3, #18
 80031ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031d4:	2304      	movs	r3, #4
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	4619      	mov	r1, r3
 80031de:	4815      	ldr	r0, [pc, #84]	; (8003234 <HAL_I2C_MspInit+0x130>)
 80031e0:	f001 fd7a 	bl	8004cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ea:	2312      	movs	r3, #18
 80031ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031f6:	2304      	movs	r3, #4
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	480e      	ldr	r0, [pc, #56]	; (800323c <HAL_I2C_MspInit+0x138>)
 8003202:	f001 fd69 	bl	8004cd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_I2C_MspInit+0x12c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
}
 8003222:	bf00      	nop
 8003224:	3730      	adds	r7, #48	; 0x30
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40005400 	.word	0x40005400
 8003230:	40023800 	.word	0x40023800
 8003234:	40020400 	.word	0x40020400
 8003238:	40005800 	.word	0x40005800
 800323c:	40020800 	.word	0x40020800

08003240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a28      	ldr	r2, [pc, #160]	; (8003300 <HAL_SPI_MspInit+0xc0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d149      	bne.n	80032f6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 800326c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_SPI_MspInit+0xc4>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032b6:	2320      	movs	r3, #32
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032c6:	2305      	movs	r3, #5
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <HAL_SPI_MspInit+0xc8>)
 80032d2:	f001 fd01 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032d6:	2310      	movs	r3, #16
 80032d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032e6:	2305      	movs	r3, #5
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	4806      	ldr	r0, [pc, #24]	; (800330c <HAL_SPI_MspInit+0xcc>)
 80032f2:	f001 fcf1 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032f6:	bf00      	nop
 80032f8:	3728      	adds	r7, #40	; 0x28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40013000 	.word	0x40013000
 8003304:	40023800 	.word	0x40023800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400

08003310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0b      	ldr	r2, [pc, #44]	; (800334c <HAL_TIM_Base_MspInit+0x3c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10d      	bne.n	800333e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_TIM_Base_MspInit+0x40>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_TIM_Base_MspInit+0x40>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_TIM_Base_MspInit+0x40>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_UART_MspInit+0x94>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d134      	bne.n	80033e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_UART_MspInit+0x98>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_UART_MspInit+0x98>)
 8003380:	f043 0310 	orr.w	r3, r3, #16
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_UART_MspInit+0x98>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_UART_MspInit+0x98>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_UART_MspInit+0x98>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_UART_MspInit+0x98>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033c0:	2307      	movs	r3, #7
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	4619      	mov	r1, r3
 80033ca:	4809      	ldr	r0, [pc, #36]	; (80033f0 <HAL_UART_MspInit+0x9c>)
 80033cc:	f001 fc84 	bl	8004cd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	2025      	movs	r0, #37	; 0x25
 80033d6:	f001 f846 	bl	8004466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033da:	2025      	movs	r0, #37	; 0x25
 80033dc:	f001 f85f 	bl	800449e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40011000 	.word	0x40011000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020000 	.word	0x40020000

080033f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <NMI_Handler+0x4>

080033fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <HardFault_Handler+0x4>

08003400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <MemManage_Handler+0x4>

08003406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340a:	e7fe      	b.n	800340a <BusFault_Handler+0x4>

0800340c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <UsageFault_Handler+0x4>

08003412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(timeout >0) timeout--;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <SysTick_Handler+0x20>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <SysTick_Handler+0x18>
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Handler+0x20>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	4b02      	ldr	r3, [pc, #8]	; (800345c <SysTick_Handler+0x20>)
 8003452:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003454:	f000 fac6 	bl	80039e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200004d0 	.word	0x200004d0

08003460 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003474:	4803      	ldr	r0, [pc, #12]	; (8003484 <USART1_IRQHandler+0x14>)
 8003476:	f000 f9db 	bl	8003830 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800347a:	4802      	ldr	r0, [pc, #8]	; (8003484 <USART1_IRQHandler+0x14>)
 800347c:	f004 fbc2 	bl	8007c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	2000048c 	.word	0x2000048c

08003488 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <DMA2_Stream0_IRQHandler+0x10>)
 800348e:	f001 f9b9 	bl	8004804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000178 	.word	0x20000178

0800349c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <SystemInit+0x20>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <SystemInit+0x20>)
 80034a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <Ringbuf_init+0x3c>)
 80034c6:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <Ringbuf_init+0x40>)
 80034c8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <Ringbuf_init+0x44>)
 80034cc:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <Ringbuf_init+0x48>)
 80034ce:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <Ringbuf_init+0x4c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <Ringbuf_init+0x4c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <Ringbuf_init+0x4c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <Ringbuf_init+0x4c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0220 	orr.w	r2, r2, #32
 80034ee:	60da      	str	r2, [r3, #12]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	200008e4 	.word	0x200008e4
 8003500:	200004d4 	.word	0x200004d4
 8003504:	200008e8 	.word	0x200008e8
 8003508:	200006dc 	.word	0x200006dc
 800350c:	2000048c 	.word	0x2000048c

08003510 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003522:	3301      	adds	r3, #1
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	429a      	cmp	r2, r3
 8003534:	d009      	beq.n	800354a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	79f9      	ldrb	r1, [r7, #7]
 8003540:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <Uart_read+0x54>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <Uart_read+0x54>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800356e:	429a      	cmp	r2, r3
 8003570:	d102      	bne.n	8003578 <Uart_read+0x20>
  {
    return -1;
 8003572:	f04f 33ff 	mov.w	r3, #4294967295
 8003576:	e013      	b.n	80035a0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <Uart_read+0x54>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <Uart_read+0x54>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <Uart_read+0x54>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <Uart_read+0x54>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 800359e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	200008e4 	.word	0x200008e4

080035b0 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <IsDataAvailable+0x30>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035bc:	b29a      	uxth	r2, r3
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <IsDataAvailable+0x30>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	200008e4 	.word	0x200008e4

080035e4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <Uart_peek+0x38>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <Uart_peek+0x38>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d102      	bne.n	8003602 <Uart_peek+0x1e>
  {
    return -1;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	e006      	b.n	8003610 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <Uart_peek+0x38>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <Uart_peek+0x38>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800360e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	200008e4 	.word	0x200008e4

08003620 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fc fdea 	bl	8000208 <strlen>
 8003634:	4603      	mov	r3, r0
 8003636:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 800363c:	e01e      	b.n	800367c <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <Copy_upto+0xf8>)
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	4b35      	ldr	r3, [pc, #212]	; (8003718 <Copy_upto+0xf8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6838      	ldr	r0, [r7, #0]
 800364e:	4403      	add	r3, r0
 8003650:	5c8a      	ldrb	r2, [r1, r2]
 8003652:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <Copy_upto+0xf8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <Copy_upto+0xf8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003666:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3301      	adds	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8003670:	bf00      	nop
 8003672:	f7ff ff9d 	bl	80035b0 <IsDataAvailable>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0fa      	beq.n	8003672 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 800367c:	f7ff ffb2 	bl	80035e4 <Uart_peek>
 8003680:	4601      	mov	r1, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4299      	cmp	r1, r3
 800368c:	d1d7      	bne.n	800363e <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 800368e:	e027      	b.n	80036e0 <Copy_upto+0xc0>
	{
		so_far++;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3301      	adds	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8003696:	f7ff ff5f 	bl	8003558 <Uart_read>
 800369a:	4601      	mov	r1, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	613a      	str	r2, [r7, #16]
 80036a2:	461a      	mov	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	b2ca      	uxtb	r2, r1
 80036aa:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d101      	bne.n	80036b8 <Copy_upto+0x98>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e02a      	b.n	800370e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <Copy_upto+0xfc>)
 80036ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036be:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80036c0:	bf00      	nop
 80036c2:	f7ff ff75 	bl	80035b0 <IsDataAvailable>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <Copy_upto+0xb4>
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <Copy_upto+0xfc>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f6      	bne.n	80036c2 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <Copy_upto+0xfc>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <Copy_upto+0xc0>
 80036dc:	2300      	movs	r3, #0
 80036de:	e016      	b.n	800370e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80036e0:	f7ff ff80 	bl	80035e4 <Uart_peek>
 80036e4:	4601      	mov	r1, r0
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4299      	cmp	r1, r3
 80036f0:	d0ce      	beq.n	8003690 <Copy_upto+0x70>
	}

	if (so_far != len)
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d002      	beq.n	8003700 <Copy_upto+0xe0>
	{
		so_far = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
		goto again;
 80036fe:	e79d      	b.n	800363c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d101      	bne.n	800370c <Copy_upto+0xec>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <Copy_upto+0xee>
	else return 0;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200008e4 	.word	0x200008e4
 800371c:	200004d0 	.word	0x200004d0

08003720 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7fc fd6b 	bl	8000208 <strlen>
 8003732:	4603      	mov	r3, r0
 8003734:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8003736:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <Wait_for+0x108>)
 8003738:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800373c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800373e:	bf00      	nop
 8003740:	f7ff ff36 	bl	80035b0 <IsDataAvailable>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <Wait_for+0x32>
 800374a:	4b37      	ldr	r3, [pc, #220]	; (8003828 <Wait_for+0x108>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f6      	bne.n	8003740 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8003752:	4b35      	ldr	r3, [pc, #212]	; (8003828 <Wait_for+0x108>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d119      	bne.n	800378e <Wait_for+0x6e>
 800375a:	2300      	movs	r3, #0
 800375c:	e060      	b.n	8003820 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800375e:	4b33      	ldr	r3, [pc, #204]	; (800382c <Wait_for+0x10c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <Wait_for+0x10c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800376e:	429a      	cmp	r2, r3
 8003770:	d00b      	beq.n	800378a <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <Wait_for+0x10c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <Wait_for+0x10c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003788:	e001      	b.n	800378e <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800378a:	2300      	movs	r3, #0
 800378c:	e048      	b.n	8003820 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800378e:	f7ff ff29 	bl	80035e4 <Uart_peek>
 8003792:	4601      	mov	r1, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4299      	cmp	r1, r3
 800379e:	d1de      	bne.n	800375e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80037a0:	e027      	b.n	80037f2 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3301      	adds	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <Wait_for+0x10c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <Wait_for+0x10c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d101      	bne.n	80037ca <Wait_for+0xaa>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e02a      	b.n	8003820 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <Wait_for+0x108>)
 80037cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037d0:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80037d2:	bf00      	nop
 80037d4:	f7ff feec 	bl	80035b0 <IsDataAvailable>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <Wait_for+0xc6>
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <Wait_for+0x108>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f6      	bne.n	80037d4 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <Wait_for+0x108>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <Wait_for+0xd2>
 80037ee:	2300      	movs	r3, #0
 80037f0:	e016      	b.n	8003820 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80037f2:	f7ff fef7 	bl	80035e4 <Uart_peek>
 80037f6:	4601      	mov	r1, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4299      	cmp	r1, r3
 8003802:	d0ce      	beq.n	80037a2 <Wait_for+0x82>
	}

	if (so_far != len)
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d002      	beq.n	8003812 <Wait_for+0xf2>
	{
		so_far = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
		goto again;
 8003810:	e791      	b.n	8003736 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d101      	bne.n	800381e <Wait_for+0xfe>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <Wait_for+0x100>
	else return 0;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200004d0 	.word	0x200004d0
 800382c:	200008e4 	.word	0x200008e4

08003830 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d013      	beq.n	800387a <Uart_isr+0x4a>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <Uart_isr+0xb4>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fe4c 	bl	8003510 <store_char>
        return;
 8003878:	e031      	b.n	80038de <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d02c      	beq.n	80038de <Uart_isr+0xae>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d027      	beq.n	80038de <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <Uart_isr+0xb8>)
 8003890:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <Uart_isr+0xb8>)
 8003896:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800389a:	429a      	cmp	r2, r3
 800389c:	d108      	bne.n	80038b0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ac:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80038ae:	e015      	b.n	80038dc <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <Uart_isr+0xb8>)
 80038b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <Uart_isr+0xb8>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <Uart_isr+0xb8>)
 80038be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <Uart_isr+0xb8>)
 80038ca:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	7bba      	ldrb	r2, [r7, #14]
 80038da:	605a      	str	r2, [r3, #4]
    	return;
 80038dc:	bf00      	nop
    }
}
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200008e4 	.word	0x200008e4
 80038e8:	200006dc 	.word	0x200006dc

080038ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038f0:	480d      	ldr	r0, [pc, #52]	; (8003928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038f2:	490e      	ldr	r1, [pc, #56]	; (800392c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f8:	e002      	b.n	8003900 <LoopCopyDataInit>

080038fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fe:	3304      	adds	r3, #4

08003900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003904:	d3f9      	bcc.n	80038fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003908:	4c0b      	ldr	r4, [pc, #44]	; (8003938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800390c:	e001      	b.n	8003912 <LoopFillZerobss>

0800390e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003910:	3204      	adds	r2, #4

08003912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003914:	d3fb      	bcc.n	800390e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003916:	f7ff fdc1 	bl	800349c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800391a:	f005 f843 	bl	80089a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391e:	f7fe fe2b 	bl	8002578 <main>
  bx  lr    
 8003922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800392c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003930:	08009ad8 	.word	0x08009ad8
  ldr r2, =_sbss
 8003934:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003938:	200008f0 	.word	0x200008f0

0800393c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800393c:	e7fe      	b.n	800393c <ADC_IRQHandler>
	...

08003940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <HAL_Init+0x40>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <HAL_Init+0x40>)
 800394a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800394e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_Init+0x40>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_Init+0x40>)
 8003956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800395a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_Init+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a07      	ldr	r2, [pc, #28]	; (8003980 <HAL_Init+0x40>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003968:	2003      	movs	r0, #3
 800396a:	f000 fd71 	bl	8004450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800396e:	200f      	movs	r0, #15
 8003970:	f000 f808 	bl	8003984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003974:	f7ff fb20 	bl	8002fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00

08003984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_InitTick+0x54>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_InitTick+0x58>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800399a:	fbb3 f3f1 	udiv	r3, r3, r1
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fd89 	bl	80044ba <HAL_SYSTICK_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00e      	b.n	80039d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d80a      	bhi.n	80039ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039b8:	2200      	movs	r2, #0
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	f000 fd51 	bl	8004466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <HAL_InitTick+0x5c>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	e000      	b.n	80039d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	2000001c 	.word	0x2000001c
 80039dc:	20000024 	.word	0x20000024
 80039e0:	20000020 	.word	0x20000020

080039e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_IncTick+0x20>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_IncTick+0x24>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_IncTick+0x24>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000024 	.word	0x20000024
 8003a08:	200008ec 	.word	0x200008ec

08003a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_GetTick+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	200008ec 	.word	0x200008ec

08003a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff ffee 	bl	8003a0c <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d005      	beq.n	8003a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_Delay+0x44>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a4a:	bf00      	nop
 8003a4c:	f7ff ffde 	bl	8003a0c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d8f7      	bhi.n	8003a4c <HAL_Delay+0x28>
  {
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000024 	.word	0x20000024

08003a6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e033      	b.n	8003aea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff fac2 	bl	8003014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ab2:	f023 0302 	bic.w	r3, r3, #2
 8003ab6:	f043 0202 	orr.w	r2, r3, #2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa78 	bl	8003fb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8003ada:	e001      	b.n	8003ae0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_Start_DMA+0x1e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0e9      	b.n	8003ce6 <HAL_ADC_Start_DMA+0x1f2>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d018      	beq.n	8003b5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b38:	4b6d      	ldr	r3, [pc, #436]	; (8003cf0 <HAL_ADC_Start_DMA+0x1fc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6d      	ldr	r2, [pc, #436]	; (8003cf4 <HAL_ADC_Start_DMA+0x200>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0c9a      	lsrs	r2, r3, #18
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b4c:	e002      	b.n	8003b54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f9      	bne.n	8003b4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b68:	d107      	bne.n	8003b7a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b78:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f040 80a1 	bne.w	8003ccc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d106      	bne.n	8003bd8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f023 0206 	bic.w	r2, r3, #6
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8003bd6:	e002      	b.n	8003bde <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be6:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <HAL_ADC_Start_DMA+0x204>)
 8003be8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	4a43      	ldr	r2, [pc, #268]	; (8003cfc <HAL_ADC_Start_DMA+0x208>)
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	4a42      	ldr	r2, [pc, #264]	; (8003d00 <HAL_ADC_Start_DMA+0x20c>)
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	4a41      	ldr	r2, [pc, #260]	; (8003d04 <HAL_ADC_Start_DMA+0x210>)
 8003c00:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c0a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c1a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	334c      	adds	r3, #76	; 0x4c
 8003c36:	4619      	mov	r1, r3
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f000 fcf8 	bl	8004630 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d12a      	bne.n	8003ca2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_ADC_Start_DMA+0x214>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d015      	beq.n	8003c82 <HAL_ADC_Start_DMA+0x18e>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2c      	ldr	r2, [pc, #176]	; (8003d0c <HAL_ADC_Start_DMA+0x218>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d105      	bne.n	8003c6c <HAL_ADC_Start_DMA+0x178>
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_ADC_Start_DMA+0x204>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <HAL_ADC_Start_DMA+0x21c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d136      	bne.n	8003ce4 <HAL_ADC_Start_DMA+0x1f0>
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_ADC_Start_DMA+0x204>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d130      	bne.n	8003ce4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d129      	bne.n	8003ce4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	e020      	b.n	8003ce4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_ADC_Start_DMA+0x214>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d11b      	bne.n	8003ce4 <HAL_ADC_Start_DMA+0x1f0>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d114      	bne.n	8003ce4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cc8:	609a      	str	r2, [r3, #8]
 8003cca:	e00b      	b.n	8003ce4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000001c 	.word	0x2000001c
 8003cf4:	431bde83 	.word	0x431bde83
 8003cf8:	40012300 	.word	0x40012300
 8003cfc:	080041ad 	.word	0x080041ad
 8003d00:	08004267 	.word	0x08004267
 8003d04:	08004283 	.word	0x08004283
 8003d08:	40012000 	.word	0x40012000
 8003d0c:	40012100 	.word	0x40012100
 8003d10:	40012200 	.word	0x40012200

08003d14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e113      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x244>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b09      	cmp	r3, #9
 8003d7a:	d925      	bls.n	8003dc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68d9      	ldr	r1, [r3, #12]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	3b1e      	subs	r3, #30
 8003d92:	2207      	movs	r2, #7
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43da      	mvns	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	400a      	ands	r2, r1
 8003da0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68d9      	ldr	r1, [r3, #12]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	4603      	mov	r3, r0
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4403      	add	r3, r0
 8003dba:	3b1e      	subs	r3, #30
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	e022      	b.n	8003e0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6919      	ldr	r1, [r3, #16]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	2207      	movs	r2, #7
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43da      	mvns	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	400a      	ands	r2, r1
 8003dea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6919      	ldr	r1, [r3, #16]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4403      	add	r3, r0
 8003e04:	409a      	lsls	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d824      	bhi.n	8003e60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	3b05      	subs	r3, #5
 8003e28:	221f      	movs	r2, #31
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	400a      	ands	r2, r1
 8003e36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4618      	mov	r0, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	3b05      	subs	r3, #5
 8003e52:	fa00 f203 	lsl.w	r2, r0, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e5e:	e04c      	b.n	8003efa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b0c      	cmp	r3, #12
 8003e66:	d824      	bhi.n	8003eb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	3b23      	subs	r3, #35	; 0x23
 8003e7a:	221f      	movs	r2, #31
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43da      	mvns	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	400a      	ands	r2, r1
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3b23      	subs	r3, #35	; 0x23
 8003ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb0:	e023      	b.n	8003efa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b41      	subs	r3, #65	; 0x41
 8003ec4:	221f      	movs	r2, #31
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	3b41      	subs	r3, #65	; 0x41
 8003eee:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_ADC_ConfigChannel+0x250>)
 8003efc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <HAL_ADC_ConfigChannel+0x254>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d10f      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x1d8>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b12      	cmp	r3, #18
 8003f0e:	d10b      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <HAL_ADC_ConfigChannel+0x254>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d12b      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x23a>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <HAL_ADC_ConfigChannel+0x258>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x1f4>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b11      	cmp	r3, #17
 8003f42:	d122      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <HAL_ADC_ConfigChannel+0x258>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d111      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_ADC_ConfigChannel+0x25c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_ADC_ConfigChannel+0x260>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	0c9a      	lsrs	r2, r3, #18
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f7c:	e002      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f9      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40012300 	.word	0x40012300
 8003fa4:	40012000 	.word	0x40012000
 8003fa8:	10000012 	.word	0x10000012
 8003fac:	2000001c 	.word	0x2000001c
 8003fb0:	431bde83 	.word	0x431bde83

08003fb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fbc:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <ADC_Init+0x1f0>)
 8003fbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	021a      	lsls	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800400c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <ADC_Init+0x1f4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800405a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800407c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6899      	ldr	r1, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	e00f      	b.n	80040b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0202 	bic.w	r2, r2, #2
 80040c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7e1b      	ldrb	r3, [r3, #24]
 80040cc:	005a      	lsls	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01b      	beq.n	8004118 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	3b01      	subs	r3, #1
 800410c:	035a      	lsls	r2, r3, #13
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	e007      	b.n	8004128 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004126:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	3b01      	subs	r3, #1
 8004144:	051a      	lsls	r2, r3, #20
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800415c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800416a:	025a      	lsls	r2, r3, #9
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6899      	ldr	r1, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	029a      	lsls	r2, r3, #10
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40012300 	.word	0x40012300
 80041a8:	0f000001 	.word	0x0f000001

080041ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d13c      	bne.n	8004240 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d12b      	bne.n	8004238 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d127      	bne.n	8004238 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004200:	2b00      	cmp	r3, #0
 8004202:	d119      	bne.n	8004238 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0220 	bic.w	r2, r2, #32
 8004212:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff fd6b 	bl	8003d14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800423e:	e00e      	b.n	800425e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fd75 	bl	8003d3c <HAL_ADC_ErrorCallback>
}
 8004252:	e004      	b.n	800425e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7ff fd57 	bl	8003d28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2240      	movs	r2, #64	; 0x40
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fd4a 	bl	8003d3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e2:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	60d3      	str	r3, [r2, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <__NVIC_GetPriorityGrouping+0x18>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f003 0307 	and.w	r3, r3, #7
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	2b00      	cmp	r3, #0
 8004324:	db0b      	blt.n	800433e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	4907      	ldr	r1, [pc, #28]	; (800434c <__NVIC_EnableIRQ+0x38>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2001      	movs	r0, #1
 8004336:	fa00 f202 	lsl.w	r2, r0, r2
 800433a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000e100 	.word	0xe000e100

08004350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	db0a      	blt.n	800437a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	490c      	ldr	r1, [pc, #48]	; (800439c <__NVIC_SetPriority+0x4c>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	440b      	add	r3, r1
 8004374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004378:	e00a      	b.n	8004390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4908      	ldr	r1, [pc, #32]	; (80043a0 <__NVIC_SetPriority+0x50>)
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	3b04      	subs	r3, #4
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	440b      	add	r3, r1
 800438e:	761a      	strb	r2, [r3, #24]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000e100 	.word	0xe000e100
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	; 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f1c3 0307 	rsb	r3, r3, #7
 80043be:	2b04      	cmp	r3, #4
 80043c0:	bf28      	it	cs
 80043c2:	2304      	movcs	r3, #4
 80043c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d902      	bls.n	80043d4 <NVIC_EncodePriority+0x30>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3b03      	subs	r3, #3
 80043d2:	e000      	b.n	80043d6 <NVIC_EncodePriority+0x32>
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	401a      	ands	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043ec:	f04f 31ff 	mov.w	r1, #4294967295
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	43d9      	mvns	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	4313      	orrs	r3, r2
         );
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3724      	adds	r7, #36	; 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3b01      	subs	r3, #1
 8004418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800441c:	d301      	bcc.n	8004422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800441e:	2301      	movs	r3, #1
 8004420:	e00f      	b.n	8004442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <SysTick_Config+0x40>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800442a:	210f      	movs	r1, #15
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	f7ff ff8e 	bl	8004350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <SysTick_Config+0x40>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800443a:	4b04      	ldr	r3, [pc, #16]	; (800444c <SysTick_Config+0x40>)
 800443c:	2207      	movs	r2, #7
 800443e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	e000e010 	.word	0xe000e010

08004450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff ff29 	bl	80042b0 <__NVIC_SetPriorityGrouping>
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004466:	b580      	push	{r7, lr}
 8004468:	b086      	sub	sp, #24
 800446a:	af00      	add	r7, sp, #0
 800446c:	4603      	mov	r3, r0
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004478:	f7ff ff3e 	bl	80042f8 <__NVIC_GetPriorityGrouping>
 800447c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff8e 	bl	80043a4 <NVIC_EncodePriority>
 8004488:	4602      	mov	r2, r0
 800448a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff5d 	bl	8004350 <__NVIC_SetPriority>
}
 8004496:	bf00      	nop
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff31 	bl	8004314 <__NVIC_EnableIRQ>
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ffa2 	bl	800440c <SysTick_Config>
 80044c8:	4603      	mov	r3, r0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044e0:	f7ff fa94 	bl	8003a0c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e099      	b.n	8004624 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004510:	e00f      	b.n	8004532 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004512:	f7ff fa7b 	bl	8003a0c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b05      	cmp	r3, #5
 800451e:	d908      	bls.n	8004532 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2203      	movs	r2, #3
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e078      	b.n	8004624 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e8      	bne.n	8004512 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4b38      	ldr	r3, [pc, #224]	; (800462c <HAL_DMA_Init+0x158>)
 800454c:	4013      	ands	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800455e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	2b04      	cmp	r3, #4
 800458a:	d107      	bne.n	800459c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	4313      	orrs	r3, r2
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0307 	bic.w	r3, r3, #7
 80045b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d117      	bne.n	80045f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00e      	beq.n	80045f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb01 	bl	8004be0 <DMA_CheckFifoParam>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2240      	movs	r2, #64	; 0x40
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045f2:	2301      	movs	r3, #1
 80045f4:	e016      	b.n	8004624 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fab8 	bl	8004b74 <DMA_CalcBaseAndBitshift>
 8004604:	4603      	mov	r3, r0
 8004606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	223f      	movs	r2, #63	; 0x3f
 800460e:	409a      	lsls	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	f010803f 	.word	0xf010803f

08004630 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_DMA_Start_IT+0x26>
 8004652:	2302      	movs	r3, #2
 8004654:	e040      	b.n	80046d8 <HAL_DMA_Start_IT+0xa8>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d12f      	bne.n	80046ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fa4a 	bl	8004b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	223f      	movs	r2, #63	; 0x3f
 800468a:	409a      	lsls	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0216 	orr.w	r2, r2, #22
 800469e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e005      	b.n	80046d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
 80046d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046ee:	f7ff f98d 	bl	8003a0c <HAL_GetTick>
 80046f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d008      	beq.n	8004712 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e052      	b.n	80047b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0216 	bic.w	r2, r2, #22
 8004720:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004730:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_DMA_Abort+0x62>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0208 	bic.w	r2, r2, #8
 8004750:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004762:	e013      	b.n	800478c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004764:	f7ff f952 	bl	8003a0c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b05      	cmp	r3, #5
 8004770:	d90c      	bls.n	800478c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2203      	movs	r2, #3
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e015      	b.n	80047b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e4      	bne.n	8004764 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	223f      	movs	r2, #63	; 0x3f
 80047a0:	409a      	lsls	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d004      	beq.n	80047de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e00c      	b.n	80047f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2205      	movs	r2, #5
 80047e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004810:	4b8e      	ldr	r3, [pc, #568]	; (8004a4c <HAL_DMA_IRQHandler+0x248>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a8e      	ldr	r2, [pc, #568]	; (8004a50 <HAL_DMA_IRQHandler+0x24c>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	0a9b      	lsrs	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	2208      	movs	r2, #8
 8004830:	409a      	lsls	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01a      	beq.n	8004870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0204 	bic.w	r2, r2, #4
 8004856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	2208      	movs	r2, #8
 800485e:	409a      	lsls	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	2201      	movs	r2, #1
 8004894:	409a      	lsls	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	2204      	movs	r2, #4
 80048ac:	409a      	lsls	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d012      	beq.n	80048dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	2204      	movs	r2, #4
 80048ca:	409a      	lsls	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d4:	f043 0204 	orr.w	r2, r3, #4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	2210      	movs	r2, #16
 80048e2:	409a      	lsls	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d043      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03c      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2210      	movs	r2, #16
 8004900:	409a      	lsls	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d018      	beq.n	8004946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d024      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
 8004932:	e01f      	b.n	8004974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4798      	blx	r3
 8004944:	e016      	b.n	8004974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0208 	bic.w	r2, r2, #8
 8004962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	2220      	movs	r2, #32
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 808f 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8087 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	2220      	movs	r2, #32
 800499c:	409a      	lsls	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d136      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0216 	bic.w	r2, r2, #22
 80049bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_DMA_IRQHandler+0x1da>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0208 	bic.w	r2, r2, #8
 80049ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	223f      	movs	r2, #63	; 0x3f
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d07e      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
        }
        return;
 8004a1a:	e079      	b.n	8004b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10d      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d031      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e02c      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
 8004a4a:	bf00      	nop
 8004a4c:	2000001c 	.word	0x2000001c
 8004a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d023      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
 8004a64:	e01e      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0210 	bic.w	r2, r2, #16
 8004a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d032      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d022      	beq.n	8004afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2205      	movs	r2, #5
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d307      	bcc.n	8004aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f2      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x2cc>
 8004aea:	e000      	b.n	8004aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
 8004b0e:	e000      	b.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b10:	bf00      	nop
    }
  }
}
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d108      	bne.n	8004b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b56:	e007      	b.n	8004b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	3b10      	subs	r3, #16
 8004b84:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b8e:	4a13      	ldr	r2, [pc, #76]	; (8004bdc <DMA_CalcBaseAndBitshift+0x68>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d909      	bls.n	8004bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8004bb4:	e007      	b.n	8004bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bbe:	f023 0303 	bic.w	r3, r3, #3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	aaaaaaab 	.word	0xaaaaaaab
 8004bdc:	0800998c 	.word	0x0800998c

08004be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d11f      	bne.n	8004c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d856      	bhi.n	8004cae <DMA_CheckFifoParam+0xce>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <DMA_CheckFifoParam+0x28>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c2b 	.word	0x08004c2b
 8004c10:	08004c19 	.word	0x08004c19
 8004c14:	08004caf 	.word	0x08004caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d046      	beq.n	8004cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c28:	e043      	b.n	8004cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c32:	d140      	bne.n	8004cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c38:	e03d      	b.n	8004cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	d121      	bne.n	8004c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d837      	bhi.n	8004cba <DMA_CheckFifoParam+0xda>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <DMA_CheckFifoParam+0x70>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004c67 	.word	0x08004c67
 8004c58:	08004c61 	.word	0x08004c61
 8004c5c:	08004c79 	.word	0x08004c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      break;
 8004c64:	e030      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d025      	beq.n	8004cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c76:	e022      	b.n	8004cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c80:	d11f      	bne.n	8004cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c86:	e01c      	b.n	8004cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d903      	bls.n	8004c96 <DMA_CheckFifoParam+0xb6>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d003      	beq.n	8004c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c94:	e018      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9a:	e015      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e00b      	b.n	8004cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e00a      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e008      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e006      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e004      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	; 0x24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e165      	b.n	8004fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	f040 8154 	bne.w	8004fba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d005      	beq.n	8004d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d130      	bne.n	8004d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	2203      	movs	r2, #3
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d60:	2201      	movs	r2, #1
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 0201 	and.w	r2, r3, #1
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d017      	beq.n	8004dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	2203      	movs	r2, #3
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	4013      	ands	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d123      	bne.n	8004e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	08da      	lsrs	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3208      	adds	r2, #8
 8004ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	220f      	movs	r2, #15
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	08da      	lsrs	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3208      	adds	r2, #8
 8004e16:	69b9      	ldr	r1, [r7, #24]
 8004e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	2203      	movs	r2, #3
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0203 	and.w	r2, r3, #3
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80ae 	beq.w	8004fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	4b5d      	ldr	r3, [pc, #372]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	4a5c      	ldr	r2, [pc, #368]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e6e:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <HAL_GPIO_Init+0x300>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e7a:	4a58      	ldr	r2, [pc, #352]	; (8004fdc <HAL_GPIO_Init+0x304>)
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	3302      	adds	r3, #2
 8004e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	220f      	movs	r2, #15
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a4f      	ldr	r2, [pc, #316]	; (8004fe0 <HAL_GPIO_Init+0x308>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d025      	beq.n	8004ef2 <HAL_GPIO_Init+0x21a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a4e      	ldr	r2, [pc, #312]	; (8004fe4 <HAL_GPIO_Init+0x30c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01f      	beq.n	8004eee <HAL_GPIO_Init+0x216>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a4d      	ldr	r2, [pc, #308]	; (8004fe8 <HAL_GPIO_Init+0x310>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d019      	beq.n	8004eea <HAL_GPIO_Init+0x212>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a4c      	ldr	r2, [pc, #304]	; (8004fec <HAL_GPIO_Init+0x314>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_GPIO_Init+0x20e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a4b      	ldr	r2, [pc, #300]	; (8004ff0 <HAL_GPIO_Init+0x318>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_GPIO_Init+0x20a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a4a      	ldr	r2, [pc, #296]	; (8004ff4 <HAL_GPIO_Init+0x31c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <HAL_GPIO_Init+0x206>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a49      	ldr	r2, [pc, #292]	; (8004ff8 <HAL_GPIO_Init+0x320>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_GPIO_Init+0x202>
 8004ed6:	2306      	movs	r3, #6
 8004ed8:	e00c      	b.n	8004ef4 <HAL_GPIO_Init+0x21c>
 8004eda:	2307      	movs	r3, #7
 8004edc:	e00a      	b.n	8004ef4 <HAL_GPIO_Init+0x21c>
 8004ede:	2305      	movs	r3, #5
 8004ee0:	e008      	b.n	8004ef4 <HAL_GPIO_Init+0x21c>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	e006      	b.n	8004ef4 <HAL_GPIO_Init+0x21c>
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e004      	b.n	8004ef4 <HAL_GPIO_Init+0x21c>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e002      	b.n	8004ef4 <HAL_GPIO_Init+0x21c>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <HAL_GPIO_Init+0x21c>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	f002 0203 	and.w	r2, r2, #3
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	4093      	lsls	r3, r2
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f04:	4935      	ldr	r1, [pc, #212]	; (8004fdc <HAL_GPIO_Init+0x304>)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f12:	4b3a      	ldr	r3, [pc, #232]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f36:	4a31      	ldr	r2, [pc, #196]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f60:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f66:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f90:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fb4:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <HAL_GPIO_Init+0x324>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	f67f ae96 	bls.w	8004cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3724      	adds	r7, #36	; 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	40020000 	.word	0x40020000
 8004fe4:	40020400 	.word	0x40020400
 8004fe8:	40020800 	.word	0x40020800
 8004fec:	40020c00 	.word	0x40020c00
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40021400 	.word	0x40021400
 8004ff8:	40021800 	.word	0x40021800
 8004ffc:	40013c00 	.word	0x40013c00

08005000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
 800500c:	4613      	mov	r3, r2
 800500e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005010:	787b      	ldrb	r3, [r7, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800501c:	e003      	b.n	8005026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800501e:	887b      	ldrh	r3, [r7, #2]
 8005020:	041a      	lsls	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	619a      	str	r2, [r3, #24]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e12b      	b.n	800529e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe f852 	bl	8003104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005098:	f001 f8ce 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 800509c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a81      	ldr	r2, [pc, #516]	; (80052a8 <HAL_I2C_Init+0x274>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d807      	bhi.n	80050b8 <HAL_I2C_Init+0x84>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a80      	ldr	r2, [pc, #512]	; (80052ac <HAL_I2C_Init+0x278>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bf94      	ite	ls
 80050b0:	2301      	movls	r3, #1
 80050b2:	2300      	movhi	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	e006      	b.n	80050c6 <HAL_I2C_Init+0x92>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a7d      	ldr	r2, [pc, #500]	; (80052b0 <HAL_I2C_Init+0x27c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	bf94      	ite	ls
 80050c0:	2301      	movls	r3, #1
 80050c2:	2300      	movhi	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0e7      	b.n	800529e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a78      	ldr	r2, [pc, #480]	; (80052b4 <HAL_I2C_Init+0x280>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	0c9b      	lsrs	r3, r3, #18
 80050d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a6a      	ldr	r2, [pc, #424]	; (80052a8 <HAL_I2C_Init+0x274>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d802      	bhi.n	8005108 <HAL_I2C_Init+0xd4>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3301      	adds	r3, #1
 8005106:	e009      	b.n	800511c <HAL_I2C_Init+0xe8>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	4a69      	ldr	r2, [pc, #420]	; (80052b8 <HAL_I2C_Init+0x284>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	099b      	lsrs	r3, r3, #6
 800511a:	3301      	adds	r3, #1
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	430b      	orrs	r3, r1
 8005122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800512e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	495c      	ldr	r1, [pc, #368]	; (80052a8 <HAL_I2C_Init+0x274>)
 8005138:	428b      	cmp	r3, r1
 800513a:	d819      	bhi.n	8005170 <HAL_I2C_Init+0x13c>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1e59      	subs	r1, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fbb1 f3f3 	udiv	r3, r1, r3
 800514a:	1c59      	adds	r1, r3, #1
 800514c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005150:	400b      	ands	r3, r1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_I2C_Init+0x138>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1e59      	subs	r1, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fbb1 f3f3 	udiv	r3, r1, r3
 8005164:	3301      	adds	r3, #1
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	e051      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 800516c:	2304      	movs	r3, #4
 800516e:	e04f      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d111      	bne.n	800519c <HAL_I2C_Init+0x168>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1e58      	subs	r0, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	440b      	add	r3, r1
 8005186:	fbb0 f3f3 	udiv	r3, r0, r3
 800518a:	3301      	adds	r3, #1
 800518c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e012      	b.n	80051c2 <HAL_I2C_Init+0x18e>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e58      	subs	r0, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	0099      	lsls	r1, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b2:	3301      	adds	r3, #1
 80051b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_I2C_Init+0x196>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e022      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10e      	bne.n	80051f0 <HAL_I2C_Init+0x1bc>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1e58      	subs	r0, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6859      	ldr	r1, [r3, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	440b      	add	r3, r1
 80051e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e4:	3301      	adds	r3, #1
 80051e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ee:	e00f      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1e58      	subs	r0, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6859      	ldr	r1, [r3, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	0099      	lsls	r1, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	fbb0 f3f3 	udiv	r3, r0, r3
 8005206:	3301      	adds	r3, #1
 8005208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	6809      	ldr	r1, [r1, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800523e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6911      	ldr	r1, [r2, #16]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68d2      	ldr	r2, [r2, #12]
 800524a:	4311      	orrs	r1, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	430b      	orrs	r3, r1
 8005252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	000186a0 	.word	0x000186a0
 80052ac:	001e847f 	.word	0x001e847f
 80052b0:	003d08ff 	.word	0x003d08ff
 80052b4:	431bde83 	.word	0x431bde83
 80052b8:	10624dd3 	.word	0x10624dd3

080052bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	4608      	mov	r0, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	817b      	strh	r3, [r7, #10]
 80052ce:	460b      	mov	r3, r1
 80052d0:	813b      	strh	r3, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052d6:	f7fe fb99 	bl	8003a0c <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	f040 80d9 	bne.w	800549c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2319      	movs	r3, #25
 80052f0:	2201      	movs	r2, #1
 80052f2:	496d      	ldr	r1, [pc, #436]	; (80054a8 <HAL_I2C_Mem_Write+0x1ec>)
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fc7f 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005300:	2302      	movs	r3, #2
 8005302:	e0cc      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_I2C_Mem_Write+0x56>
 800530e:	2302      	movs	r3, #2
 8005310:	e0c5      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d007      	beq.n	8005338 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005346:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2221      	movs	r2, #33	; 0x21
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2240      	movs	r2, #64	; 0x40
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a4d      	ldr	r2, [pc, #308]	; (80054ac <HAL_I2C_Mem_Write+0x1f0>)
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800537a:	88f8      	ldrh	r0, [r7, #6]
 800537c:	893a      	ldrh	r2, [r7, #8]
 800537e:	8979      	ldrh	r1, [r7, #10]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	4603      	mov	r3, r0
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fab6 	bl	80058fc <I2C_RequestMemoryWrite>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d052      	beq.n	800543c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e081      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fd00 	bl	8005da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d107      	bne.n	80053c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06b      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	781a      	ldrb	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d11b      	bne.n	800543c <HAL_I2C_Mem_Write+0x180>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1aa      	bne.n	800539a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fcec 	bl	8005e26 <I2C_WaitOnBTFFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	2b04      	cmp	r3, #4
 800545a:	d107      	bne.n	800546c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e016      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e000      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	00100002 	.word	0x00100002
 80054ac:	ffff0000 	.word	0xffff0000

080054b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	817b      	strh	r3, [r7, #10]
 80054c2:	460b      	mov	r3, r1
 80054c4:	813b      	strh	r3, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ca:	f7fe fa9f 	bl	8003a0c <HAL_GetTick>
 80054ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b20      	cmp	r3, #32
 80054da:	f040 8208 	bne.w	80058ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	2319      	movs	r3, #25
 80054e4:	2201      	movs	r2, #1
 80054e6:	497b      	ldr	r1, [pc, #492]	; (80056d4 <HAL_I2C_Mem_Read+0x224>)
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fb85 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
 80054f6:	e1fb      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_I2C_Mem_Read+0x56>
 8005502:	2302      	movs	r3, #2
 8005504:	e1f4      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d007      	beq.n	800552c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2222      	movs	r2, #34	; 0x22
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2240      	movs	r2, #64	; 0x40
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800555c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a5b      	ldr	r2, [pc, #364]	; (80056d8 <HAL_I2C_Mem_Read+0x228>)
 800556c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800556e:	88f8      	ldrh	r0, [r7, #6]
 8005570:	893a      	ldrh	r2, [r7, #8]
 8005572:	8979      	ldrh	r1, [r7, #10]
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	4603      	mov	r3, r0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fa52 	bl	8005a28 <I2C_RequestMemoryRead>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1b0      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d113      	bne.n	80055be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005596:	2300      	movs	r3, #0
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	623b      	str	r3, [r7, #32]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	623b      	str	r3, [r7, #32]
 80055aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	e184      	b.n	80058c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d11b      	bne.n	80055fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e164      	b.n	80058c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	2b02      	cmp	r3, #2
 8005604:	d11b      	bne.n	800563e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	e144      	b.n	80058c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005654:	e138      	b.n	80058c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565a:	2b03      	cmp	r3, #3
 800565c:	f200 80f1 	bhi.w	8005842 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005664:	2b01      	cmp	r3, #1
 8005666:	d123      	bne.n	80056b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fc1b 	bl	8005ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e139      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ae:	e10b      	b.n	80058c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d14e      	bne.n	8005756 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	2200      	movs	r2, #0
 80056c0:	4906      	ldr	r1, [pc, #24]	; (80056dc <HAL_I2C_Mem_Read+0x22c>)
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fa98 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e10e      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
 80056d2:	bf00      	nop
 80056d4:	00100002 	.word	0x00100002
 80056d8:	ffff0000 	.word	0xffff0000
 80056dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005754:	e0b8      	b.n	80058c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	2200      	movs	r2, #0
 800575e:	4966      	ldr	r1, [pc, #408]	; (80058f8 <HAL_I2C_Mem_Read+0x448>)
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fa49 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0bf      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	2200      	movs	r2, #0
 80057ba:	494f      	ldr	r1, [pc, #316]	; (80058f8 <HAL_I2C_Mem_Read+0x448>)
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fa1b 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e091      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005840:	e042      	b.n	80058c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fb2e 	bl	8005ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e04c      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b04      	cmp	r3, #4
 8005894:	d118      	bne.n	80058c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f aec2 	bne.w	8005656 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e000      	b.n	80058f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058ee:	2302      	movs	r3, #2
  }
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3728      	adds	r7, #40	; 0x28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	00010004 	.word	0x00010004

080058fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	4603      	mov	r3, r0
 800590c:	817b      	strh	r3, [r7, #10]
 800590e:	460b      	mov	r3, r1
 8005910:	813b      	strh	r3, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	2200      	movs	r2, #0
 800592e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f960 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594c:	d103      	bne.n	8005956 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e05f      	b.n	8005a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800595a:	897b      	ldrh	r3, [r7, #10]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	492d      	ldr	r1, [pc, #180]	; (8005a24 <I2C_RequestMemoryWrite+0x128>)
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f998 	bl	8005ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e04c      	b.n	8005a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	6a39      	ldr	r1, [r7, #32]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fa02 	bl	8005da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d107      	bne.n	80059be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e02b      	b.n	8005a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d105      	bne.n	80059d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c8:	893b      	ldrh	r3, [r7, #8]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	e021      	b.n	8005a18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059d4:	893b      	ldrh	r3, [r7, #8]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	6a39      	ldr	r1, [r7, #32]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f9dc 	bl	8005da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d107      	bne.n	8005a0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e005      	b.n	8005a1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0e:	893b      	ldrh	r3, [r7, #8]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	00010002 	.word	0x00010002

08005a28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	4608      	mov	r0, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	817b      	strh	r3, [r7, #10]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	813b      	strh	r3, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f8c2 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00d      	beq.n	8005a96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a88:	d103      	bne.n	8005a92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e0aa      	b.n	8005bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	4952      	ldr	r1, [pc, #328]	; (8005bf4 <I2C_RequestMemoryRead+0x1cc>)
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f8fa 	bl	8005ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e097      	b.n	8005bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad4:	6a39      	ldr	r1, [r7, #32]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f964 	bl	8005da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00d      	beq.n	8005afe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d107      	bne.n	8005afa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e076      	b.n	8005bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d105      	bne.n	8005b10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b04:	893b      	ldrh	r3, [r7, #8]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	611a      	str	r2, [r3, #16]
 8005b0e:	e021      	b.n	8005b54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b10:	893b      	ldrh	r3, [r7, #8]
 8005b12:	0a1b      	lsrs	r3, r3, #8
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b20:	6a39      	ldr	r1, [r7, #32]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 f93e 	bl	8005da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00d      	beq.n	8005b4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d107      	bne.n	8005b46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e050      	b.n	8005bec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b4a:	893b      	ldrh	r3, [r7, #8]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b56:	6a39      	ldr	r1, [r7, #32]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f923 	bl	8005da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d107      	bne.n	8005b7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e035      	b.n	8005bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f82b 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d103      	bne.n	8005bc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e013      	b.n	8005bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bc4:	897b      	ldrh	r3, [r7, #10]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	4906      	ldr	r1, [pc, #24]	; (8005bf4 <I2C_RequestMemoryRead+0x1cc>)
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f863 	bl	8005ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	00010002 	.word	0x00010002

08005bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c08:	e025      	b.n	8005c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d021      	beq.n	8005c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fd fefb 	bl	8003a0c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d116      	bne.n	8005c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e023      	b.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d10d      	bne.n	8005c7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	43da      	mvns	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	e00c      	b.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	43da      	mvns	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf0c      	ite	eq
 8005c8e:	2301      	moveq	r3, #1
 8005c90:	2300      	movne	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d0b6      	beq.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
 8005cb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cb4:	e051      	b.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d123      	bne.n	8005d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f043 0204 	orr.w	r2, r3, #4
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e046      	b.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d021      	beq.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d16:	f7fd fe79 	bl	8003a0c <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d302      	bcc.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d116      	bne.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e020      	b.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d10c      	bne.n	8005d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	43da      	mvns	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bf14      	ite	ne
 8005d76:	2301      	movne	r3, #1
 8005d78:	2300      	moveq	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	e00b      	b.n	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	43da      	mvns	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bf14      	ite	ne
 8005d90:	2301      	movne	r3, #1
 8005d92:	2300      	moveq	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d18d      	bne.n	8005cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005db0:	e02d      	b.n	8005e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f8ce 	bl	8005f54 <I2C_IsAcknowledgeFailed>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e02d      	b.n	8005e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d021      	beq.n	8005e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dca:	f7fd fe1f 	bl	8003a0c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d302      	bcc.n	8005de0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d116      	bne.n	8005e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f043 0220 	orr.w	r2, r3, #32
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e007      	b.n	8005e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e18:	2b80      	cmp	r3, #128	; 0x80
 8005e1a:	d1ca      	bne.n	8005db2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e32:	e02d      	b.n	8005e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f88d 	bl	8005f54 <I2C_IsAcknowledgeFailed>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e02d      	b.n	8005ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d021      	beq.n	8005e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7fd fdde 	bl	8003a0c <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d116      	bne.n	8005e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e007      	b.n	8005ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d1ca      	bne.n	8005e34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eb4:	e042      	b.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d119      	bne.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0210 	mvn.w	r2, #16
 8005ecc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e029      	b.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7fd fd88 	bl	8003a0c <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d116      	bne.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e007      	b.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d1b5      	bne.n	8005eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6a:	d11b      	bne.n	8005fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	f043 0204 	orr.w	r2, r3, #4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4b20      	ldr	r3, [pc, #128]	; (8006044 <HAL_PWREx_EnableOverDrive+0x90>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <HAL_PWREx_EnableOverDrive+0x90>)
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fce:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <HAL_PWREx_EnableOverDrive+0x90>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005fda:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <HAL_PWREx_EnableOverDrive+0x94>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fe0:	f7fd fd14 	bl	8003a0c <HAL_GetTick>
 8005fe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fe6:	e009      	b.n	8005ffc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fe8:	f7fd fd10 	bl	8003a0c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ff6:	d901      	bls.n	8005ffc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e01f      	b.n	800603c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_PWREx_EnableOverDrive+0x98>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d1ee      	bne.n	8005fe8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_PWREx_EnableOverDrive+0x9c>)
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006010:	f7fd fcfc 	bl	8003a0c <HAL_GetTick>
 8006014:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006016:	e009      	b.n	800602c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006018:	f7fd fcf8 	bl	8003a0c <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006026:	d901      	bls.n	800602c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e007      	b.n	800603c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <HAL_PWREx_EnableOverDrive+0x98>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006038:	d1ee      	bne.n	8006018 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40023800 	.word	0x40023800
 8006048:	420e0040 	.word	0x420e0040
 800604c:	40007000 	.word	0x40007000
 8006050:	420e0044 	.word	0x420e0044

08006054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0cc      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006068:	4b68      	ldr	r3, [pc, #416]	; (800620c <HAL_RCC_ClockConfig+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d90c      	bls.n	8006090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006076:	4b65      	ldr	r3, [pc, #404]	; (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	4b63      	ldr	r3, [pc, #396]	; (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d001      	beq.n	8006090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0b8      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d020      	beq.n	80060de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a8:	4b59      	ldr	r3, [pc, #356]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	4a58      	ldr	r2, [pc, #352]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060c0:	4b53      	ldr	r3, [pc, #332]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4a52      	ldr	r2, [pc, #328]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060cc:	4b50      	ldr	r3, [pc, #320]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	494d      	ldr	r1, [pc, #308]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d044      	beq.n	8006174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d107      	bne.n	8006102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	4b47      	ldr	r3, [pc, #284]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d119      	bne.n	8006132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e07f      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d003      	beq.n	8006112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800610e:	2b03      	cmp	r3, #3
 8006110:	d107      	bne.n	8006122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006112:	4b3f      	ldr	r3, [pc, #252]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d109      	bne.n	8006132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e06f      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006122:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e067      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006132:	4b37      	ldr	r3, [pc, #220]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f023 0203 	bic.w	r2, r3, #3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4934      	ldr	r1, [pc, #208]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006140:	4313      	orrs	r3, r2
 8006142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006144:	f7fd fc62 	bl	8003a0c <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614a:	e00a      	b.n	8006162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800614c:	f7fd fc5e 	bl	8003a0c <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f241 3288 	movw	r2, #5000	; 0x1388
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e04f      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006162:	4b2b      	ldr	r3, [pc, #172]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 020c 	and.w	r2, r3, #12
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	429a      	cmp	r2, r3
 8006172:	d1eb      	bne.n	800614c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006174:	4b25      	ldr	r3, [pc, #148]	; (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d20c      	bcs.n	800619c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006182:	4b22      	ldr	r3, [pc, #136]	; (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800618a:	4b20      	ldr	r3, [pc, #128]	; (800620c <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d001      	beq.n	800619c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e032      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a8:	4b19      	ldr	r3, [pc, #100]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4916      	ldr	r1, [pc, #88]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0308 	and.w	r3, r3, #8
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061c6:	4b12      	ldr	r3, [pc, #72]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	490e      	ldr	r1, [pc, #56]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061da:	f000 f855 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 80061de:	4602      	mov	r2, r0
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	490a      	ldr	r1, [pc, #40]	; (8006214 <HAL_RCC_ClockConfig+0x1c0>)
 80061ec:	5ccb      	ldrb	r3, [r1, r3]
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	4a09      	ldr	r2, [pc, #36]	; (8006218 <HAL_RCC_ClockConfig+0x1c4>)
 80061f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <HAL_RCC_ClockConfig+0x1c8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fd fbc2 	bl	8003984 <HAL_InitTick>

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40023c00 	.word	0x40023c00
 8006210:	40023800 	.word	0x40023800
 8006214:	08009974 	.word	0x08009974
 8006218:	2000001c 	.word	0x2000001c
 800621c:	20000020 	.word	0x20000020

08006220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <HAL_RCC_GetHCLKFreq+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000001c 	.word	0x2000001c

08006238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800623c:	f7ff fff0 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0a9b      	lsrs	r3, r3, #10
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	; (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	08009984 	.word	0x08009984

08006260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006264:	f7ff ffdc 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006268:	4602      	mov	r2, r0
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0b5b      	lsrs	r3, r3, #13
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	4903      	ldr	r1, [pc, #12]	; (8006284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006276:	5ccb      	ldrb	r3, [r1, r3]
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40023800 	.word	0x40023800
 8006284:	08009984 	.word	0x08009984

08006288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800628c:	b0ae      	sub	sp, #184	; 0xb8
 800628e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ae:	4bcb      	ldr	r3, [pc, #812]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	f200 8206 	bhi.w	80066c8 <HAL_RCC_GetSysClockFreq+0x440>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062f9 	.word	0x080062f9
 80062c8:	080066c9 	.word	0x080066c9
 80062cc:	080066c9 	.word	0x080066c9
 80062d0:	080066c9 	.word	0x080066c9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	080066c9 	.word	0x080066c9
 80062dc:	080066c9 	.word	0x080066c9
 80062e0:	080066c9 	.word	0x080066c9
 80062e4:	08006309 	.word	0x08006309
 80062e8:	080066c9 	.word	0x080066c9
 80062ec:	080066c9 	.word	0x080066c9
 80062f0:	080066c9 	.word	0x080066c9
 80062f4:	080064f9 	.word	0x080064f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062f8:	4bb9      	ldr	r3, [pc, #740]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80062fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80062fe:	e1e7      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006300:	4bb8      	ldr	r3, [pc, #736]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006306:	e1e3      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006308:	4bb4      	ldr	r3, [pc, #720]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006314:	4bb1      	ldr	r3, [pc, #708]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d071      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006320:	4bae      	ldr	r3, [pc, #696]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	099b      	lsrs	r3, r3, #6
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800632c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006342:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006346:	4622      	mov	r2, r4
 8006348:	462b      	mov	r3, r5
 800634a:	f04f 0000 	mov.w	r0, #0
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	0159      	lsls	r1, r3, #5
 8006354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006358:	0150      	lsls	r0, r2, #5
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4621      	mov	r1, r4
 8006360:	1a51      	subs	r1, r2, r1
 8006362:	6439      	str	r1, [r7, #64]	; 0x40
 8006364:	4629      	mov	r1, r5
 8006366:	eb63 0301 	sbc.w	r3, r3, r1
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006378:	4649      	mov	r1, r9
 800637a:	018b      	lsls	r3, r1, #6
 800637c:	4641      	mov	r1, r8
 800637e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006382:	4641      	mov	r1, r8
 8006384:	018a      	lsls	r2, r1, #6
 8006386:	4641      	mov	r1, r8
 8006388:	1a51      	subs	r1, r2, r1
 800638a:	63b9      	str	r1, [r7, #56]	; 0x38
 800638c:	4649      	mov	r1, r9
 800638e:	eb63 0301 	sbc.w	r3, r3, r1
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80063a0:	4649      	mov	r1, r9
 80063a2:	00cb      	lsls	r3, r1, #3
 80063a4:	4641      	mov	r1, r8
 80063a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063aa:	4641      	mov	r1, r8
 80063ac:	00ca      	lsls	r2, r1, #3
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	4622      	mov	r2, r4
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ba:	462b      	mov	r3, r5
 80063bc:	460a      	mov	r2, r1
 80063be:	eb42 0303 	adc.w	r3, r2, r3
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063d0:	4629      	mov	r1, r5
 80063d2:	024b      	lsls	r3, r1, #9
 80063d4:	4621      	mov	r1, r4
 80063d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063da:	4621      	mov	r1, r4
 80063dc:	024a      	lsls	r2, r1, #9
 80063de:	4610      	mov	r0, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80063f4:	f7fa fc14 	bl	8000c20 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4613      	mov	r3, r2
 80063fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006402:	e067      	b.n	80064d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006404:	4b75      	ldr	r3, [pc, #468]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	099b      	lsrs	r3, r3, #6
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006410:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641c:	67bb      	str	r3, [r7, #120]	; 0x78
 800641e:	2300      	movs	r3, #0
 8006420:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006422:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006426:	4622      	mov	r2, r4
 8006428:	462b      	mov	r3, r5
 800642a:	f04f 0000 	mov.w	r0, #0
 800642e:	f04f 0100 	mov.w	r1, #0
 8006432:	0159      	lsls	r1, r3, #5
 8006434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006438:	0150      	lsls	r0, r2, #5
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4621      	mov	r1, r4
 8006440:	1a51      	subs	r1, r2, r1
 8006442:	62b9      	str	r1, [r7, #40]	; 0x28
 8006444:	4629      	mov	r1, r5
 8006446:	eb63 0301 	sbc.w	r3, r3, r1
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006458:	4649      	mov	r1, r9
 800645a:	018b      	lsls	r3, r1, #6
 800645c:	4641      	mov	r1, r8
 800645e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006462:	4641      	mov	r1, r8
 8006464:	018a      	lsls	r2, r1, #6
 8006466:	4641      	mov	r1, r8
 8006468:	ebb2 0a01 	subs.w	sl, r2, r1
 800646c:	4649      	mov	r1, r9
 800646e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800647e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006486:	4692      	mov	sl, r2
 8006488:	469b      	mov	fp, r3
 800648a:	4623      	mov	r3, r4
 800648c:	eb1a 0303 	adds.w	r3, sl, r3
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	462b      	mov	r3, r5
 8006494:	eb4b 0303 	adc.w	r3, fp, r3
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80064a6:	4629      	mov	r1, r5
 80064a8:	028b      	lsls	r3, r1, #10
 80064aa:	4621      	mov	r1, r4
 80064ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064b0:	4621      	mov	r1, r4
 80064b2:	028a      	lsls	r2, r1, #10
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064bc:	2200      	movs	r2, #0
 80064be:	673b      	str	r3, [r7, #112]	; 0x70
 80064c0:	677a      	str	r2, [r7, #116]	; 0x74
 80064c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80064c6:	f7fa fbab 	bl	8000c20 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4613      	mov	r3, r2
 80064d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064d4:	4b41      	ldr	r3, [pc, #260]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	0c1b      	lsrs	r3, r3, #16
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	3301      	adds	r3, #1
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80064e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80064f6:	e0eb      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064f8:	4b38      	ldr	r3, [pc, #224]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006504:	4b35      	ldr	r3, [pc, #212]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d06b      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006510:	4b32      	ldr	r3, [pc, #200]	; (80065dc <HAL_RCC_GetSysClockFreq+0x354>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	099b      	lsrs	r3, r3, #6
 8006516:	2200      	movs	r2, #0
 8006518:	66bb      	str	r3, [r7, #104]	; 0x68
 800651a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800651c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	663b      	str	r3, [r7, #96]	; 0x60
 8006524:	2300      	movs	r3, #0
 8006526:	667b      	str	r3, [r7, #100]	; 0x64
 8006528:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800652c:	4622      	mov	r2, r4
 800652e:	462b      	mov	r3, r5
 8006530:	f04f 0000 	mov.w	r0, #0
 8006534:	f04f 0100 	mov.w	r1, #0
 8006538:	0159      	lsls	r1, r3, #5
 800653a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800653e:	0150      	lsls	r0, r2, #5
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4621      	mov	r1, r4
 8006546:	1a51      	subs	r1, r2, r1
 8006548:	61b9      	str	r1, [r7, #24]
 800654a:	4629      	mov	r1, r5
 800654c:	eb63 0301 	sbc.w	r3, r3, r1
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800655e:	4659      	mov	r1, fp
 8006560:	018b      	lsls	r3, r1, #6
 8006562:	4651      	mov	r1, sl
 8006564:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006568:	4651      	mov	r1, sl
 800656a:	018a      	lsls	r2, r1, #6
 800656c:	4651      	mov	r1, sl
 800656e:	ebb2 0801 	subs.w	r8, r2, r1
 8006572:	4659      	mov	r1, fp
 8006574:	eb63 0901 	sbc.w	r9, r3, r1
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006584:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006588:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800658c:	4690      	mov	r8, r2
 800658e:	4699      	mov	r9, r3
 8006590:	4623      	mov	r3, r4
 8006592:	eb18 0303 	adds.w	r3, r8, r3
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	462b      	mov	r3, r5
 800659a:	eb49 0303 	adc.w	r3, r9, r3
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80065ac:	4629      	mov	r1, r5
 80065ae:	024b      	lsls	r3, r1, #9
 80065b0:	4621      	mov	r1, r4
 80065b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065b6:	4621      	mov	r1, r4
 80065b8:	024a      	lsls	r2, r1, #9
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065c2:	2200      	movs	r2, #0
 80065c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80065c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065cc:	f7fa fb28 	bl	8000c20 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4613      	mov	r3, r2
 80065d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065da:	e065      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x420>
 80065dc:	40023800 	.word	0x40023800
 80065e0:	00f42400 	.word	0x00f42400
 80065e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065e8:	4b3d      	ldr	r3, [pc, #244]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	099b      	lsrs	r3, r3, #6
 80065ee:	2200      	movs	r2, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	4611      	mov	r1, r2
 80065f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065f8:	653b      	str	r3, [r7, #80]	; 0x50
 80065fa:	2300      	movs	r3, #0
 80065fc:	657b      	str	r3, [r7, #84]	; 0x54
 80065fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006602:	4642      	mov	r2, r8
 8006604:	464b      	mov	r3, r9
 8006606:	f04f 0000 	mov.w	r0, #0
 800660a:	f04f 0100 	mov.w	r1, #0
 800660e:	0159      	lsls	r1, r3, #5
 8006610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006614:	0150      	lsls	r0, r2, #5
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4641      	mov	r1, r8
 800661c:	1a51      	subs	r1, r2, r1
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	4649      	mov	r1, r9
 8006622:	eb63 0301 	sbc.w	r3, r3, r1
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006634:	4659      	mov	r1, fp
 8006636:	018b      	lsls	r3, r1, #6
 8006638:	4651      	mov	r1, sl
 800663a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800663e:	4651      	mov	r1, sl
 8006640:	018a      	lsls	r2, r1, #6
 8006642:	4651      	mov	r1, sl
 8006644:	1a54      	subs	r4, r2, r1
 8006646:	4659      	mov	r1, fp
 8006648:	eb63 0501 	sbc.w	r5, r3, r1
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	00eb      	lsls	r3, r5, #3
 8006656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800665a:	00e2      	lsls	r2, r4, #3
 800665c:	4614      	mov	r4, r2
 800665e:	461d      	mov	r5, r3
 8006660:	4643      	mov	r3, r8
 8006662:	18e3      	adds	r3, r4, r3
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	464b      	mov	r3, r9
 8006668:	eb45 0303 	adc.w	r3, r5, r3
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800667a:	4629      	mov	r1, r5
 800667c:	028b      	lsls	r3, r1, #10
 800667e:	4621      	mov	r1, r4
 8006680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006684:	4621      	mov	r1, r4
 8006686:	028a      	lsls	r2, r1, #10
 8006688:	4610      	mov	r0, r2
 800668a:	4619      	mov	r1, r3
 800668c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006690:	2200      	movs	r2, #0
 8006692:	64bb      	str	r3, [r7, #72]	; 0x48
 8006694:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800669a:	f7fa fac1 	bl	8000c20 <__aeabi_uldivmod>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4613      	mov	r3, r2
 80066a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	0f1b      	lsrs	r3, r3, #28
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80066b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066be:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066c6:	e003      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80066ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	37b8      	adds	r7, #184	; 0xb8
 80066d8:	46bd      	mov	sp, r7
 80066da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00f42400 	.word	0x00f42400

080066e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e28d      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8083 	beq.w	800680e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006708:	4b94      	ldr	r3, [pc, #592]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 030c 	and.w	r3, r3, #12
 8006710:	2b04      	cmp	r3, #4
 8006712:	d019      	beq.n	8006748 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006714:	4b91      	ldr	r3, [pc, #580]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800671c:	2b08      	cmp	r3, #8
 800671e:	d106      	bne.n	800672e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006720:	4b8e      	ldr	r3, [pc, #568]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800672c:	d00c      	beq.n	8006748 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800672e:	4b8b      	ldr	r3, [pc, #556]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006736:	2b0c      	cmp	r3, #12
 8006738:	d112      	bne.n	8006760 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800673a:	4b88      	ldr	r3, [pc, #544]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006746:	d10b      	bne.n	8006760 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006748:	4b84      	ldr	r3, [pc, #528]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d05b      	beq.n	800680c <HAL_RCC_OscConfig+0x124>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d157      	bne.n	800680c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e25a      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006768:	d106      	bne.n	8006778 <HAL_RCC_OscConfig+0x90>
 800676a:	4b7c      	ldr	r3, [pc, #496]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a7b      	ldr	r2, [pc, #492]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	e01d      	b.n	80067b4 <HAL_RCC_OscConfig+0xcc>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006780:	d10c      	bne.n	800679c <HAL_RCC_OscConfig+0xb4>
 8006782:	4b76      	ldr	r3, [pc, #472]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a75      	ldr	r2, [pc, #468]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4b73      	ldr	r3, [pc, #460]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a72      	ldr	r2, [pc, #456]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e00b      	b.n	80067b4 <HAL_RCC_OscConfig+0xcc>
 800679c:	4b6f      	ldr	r3, [pc, #444]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a6e      	ldr	r2, [pc, #440]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80067a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	4b6c      	ldr	r3, [pc, #432]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a6b      	ldr	r2, [pc, #428]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80067ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d013      	beq.n	80067e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067bc:	f7fd f926 	bl	8003a0c <HAL_GetTick>
 80067c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c4:	f7fd f922 	bl	8003a0c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b64      	cmp	r3, #100	; 0x64
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e21f      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d6:	4b61      	ldr	r3, [pc, #388]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f0      	beq.n	80067c4 <HAL_RCC_OscConfig+0xdc>
 80067e2:	e014      	b.n	800680e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fd f912 	bl	8003a0c <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ec:	f7fd f90e 	bl	8003a0c <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b64      	cmp	r3, #100	; 0x64
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e20b      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067fe:	4b57      	ldr	r3, [pc, #348]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x104>
 800680a:	e000      	b.n	800680e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800680c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d06f      	beq.n	80068fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800681a:	4b50      	ldr	r3, [pc, #320]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 030c 	and.w	r3, r3, #12
 8006822:	2b00      	cmp	r3, #0
 8006824:	d017      	beq.n	8006856 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006826:	4b4d      	ldr	r3, [pc, #308]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800682e:	2b08      	cmp	r3, #8
 8006830:	d105      	bne.n	800683e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006832:	4b4a      	ldr	r3, [pc, #296]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800683e:	4b47      	ldr	r3, [pc, #284]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006846:	2b0c      	cmp	r3, #12
 8006848:	d11c      	bne.n	8006884 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684a:	4b44      	ldr	r3, [pc, #272]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d116      	bne.n	8006884 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006856:	4b41      	ldr	r3, [pc, #260]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_RCC_OscConfig+0x186>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d001      	beq.n	800686e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e1d3      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686e:	4b3b      	ldr	r3, [pc, #236]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4937      	ldr	r1, [pc, #220]	; (800695c <HAL_RCC_OscConfig+0x274>)
 800687e:	4313      	orrs	r3, r2
 8006880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006882:	e03a      	b.n	80068fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d020      	beq.n	80068ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800688c:	4b34      	ldr	r3, [pc, #208]	; (8006960 <HAL_RCC_OscConfig+0x278>)
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006892:	f7fd f8bb 	bl	8003a0c <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800689a:	f7fd f8b7 	bl	8003a0c <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e1b4      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ac:	4b2b      	ldr	r3, [pc, #172]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f0      	beq.n	800689a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b8:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4925      	ldr	r1, [pc, #148]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	600b      	str	r3, [r1, #0]
 80068cc:	e015      	b.n	80068fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <HAL_RCC_OscConfig+0x278>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fd f89a 	bl	8003a0c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068dc:	f7fd f896 	bl	8003a0c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e193      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ee:	4b1b      	ldr	r3, [pc, #108]	; (800695c <HAL_RCC_OscConfig+0x274>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d036      	beq.n	8006974 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d016      	beq.n	800693c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800690e:	4b15      	ldr	r3, [pc, #84]	; (8006964 <HAL_RCC_OscConfig+0x27c>)
 8006910:	2201      	movs	r2, #1
 8006912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006914:	f7fd f87a 	bl	8003a0c <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800691c:	f7fd f876 	bl	8003a0c <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e173      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <HAL_RCC_OscConfig+0x274>)
 8006930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0f0      	beq.n	800691c <HAL_RCC_OscConfig+0x234>
 800693a:	e01b      	b.n	8006974 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <HAL_RCC_OscConfig+0x27c>)
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006942:	f7fd f863 	bl	8003a0c <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006948:	e00e      	b.n	8006968 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694a:	f7fd f85f 	bl	8003a0c <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d907      	bls.n	8006968 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e15c      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
 800695c:	40023800 	.word	0x40023800
 8006960:	42470000 	.word	0x42470000
 8006964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006968:	4b8a      	ldr	r3, [pc, #552]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 800696a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1ea      	bne.n	800694a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8097 	beq.w	8006ab0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006982:	2300      	movs	r3, #0
 8006984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006986:	4b83      	ldr	r3, [pc, #524]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	4b7f      	ldr	r3, [pc, #508]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	4a7e      	ldr	r2, [pc, #504]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 800699c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a0:	6413      	str	r3, [r2, #64]	; 0x40
 80069a2:	4b7c      	ldr	r3, [pc, #496]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069aa:	60bb      	str	r3, [r7, #8]
 80069ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ae:	2301      	movs	r3, #1
 80069b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b2:	4b79      	ldr	r3, [pc, #484]	; (8006b98 <HAL_RCC_OscConfig+0x4b0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d118      	bne.n	80069f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069be:	4b76      	ldr	r3, [pc, #472]	; (8006b98 <HAL_RCC_OscConfig+0x4b0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a75      	ldr	r2, [pc, #468]	; (8006b98 <HAL_RCC_OscConfig+0x4b0>)
 80069c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ca:	f7fd f81f 	bl	8003a0c <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d2:	f7fd f81b 	bl	8003a0c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e118      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e4:	4b6c      	ldr	r3, [pc, #432]	; (8006b98 <HAL_RCC_OscConfig+0x4b0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f0      	beq.n	80069d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d106      	bne.n	8006a06 <HAL_RCC_OscConfig+0x31e>
 80069f8:	4b66      	ldr	r3, [pc, #408]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fc:	4a65      	ldr	r2, [pc, #404]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	6713      	str	r3, [r2, #112]	; 0x70
 8006a04:	e01c      	b.n	8006a40 <HAL_RCC_OscConfig+0x358>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	d10c      	bne.n	8006a28 <HAL_RCC_OscConfig+0x340>
 8006a0e:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a60      	ldr	r2, [pc, #384]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a14:	f043 0304 	orr.w	r3, r3, #4
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1a:	4b5e      	ldr	r3, [pc, #376]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a5d      	ldr	r2, [pc, #372]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
 8006a26:	e00b      	b.n	8006a40 <HAL_RCC_OscConfig+0x358>
 8006a28:	4b5a      	ldr	r3, [pc, #360]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	4a59      	ldr	r2, [pc, #356]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	6713      	str	r3, [r2, #112]	; 0x70
 8006a34:	4b57      	ldr	r3, [pc, #348]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a38:	4a56      	ldr	r2, [pc, #344]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a3a:	f023 0304 	bic.w	r3, r3, #4
 8006a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d015      	beq.n	8006a74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a48:	f7fc ffe0 	bl	8003a0c <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a4e:	e00a      	b.n	8006a66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a50:	f7fc ffdc 	bl	8003a0c <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e0d7      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a66:	4b4b      	ldr	r3, [pc, #300]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0ee      	beq.n	8006a50 <HAL_RCC_OscConfig+0x368>
 8006a72:	e014      	b.n	8006a9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a74:	f7fc ffca 	bl	8003a0c <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a7a:	e00a      	b.n	8006a92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a7c:	f7fc ffc6 	bl	8003a0c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e0c1      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a92:	4b40      	ldr	r3, [pc, #256]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1ee      	bne.n	8006a7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aa4:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	4a3a      	ldr	r2, [pc, #232]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80ad 	beq.w	8006c14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aba:	4b36      	ldr	r3, [pc, #216]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d060      	beq.n	8006b88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d145      	bne.n	8006b5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ace:	4b33      	ldr	r3, [pc, #204]	; (8006b9c <HAL_RCC_OscConfig+0x4b4>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fc ff9a 	bl	8003a0c <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006adc:	f7fc ff96 	bl	8003a0c <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e093      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aee:	4b29      	ldr	r3, [pc, #164]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	019b      	lsls	r3, r3, #6
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	3b01      	subs	r3, #1
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	061b      	lsls	r3, r3, #24
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	071b      	lsls	r3, r3, #28
 8006b26:	491b      	ldr	r1, [pc, #108]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <HAL_RCC_OscConfig+0x4b4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fc ff6b 	bl	8003a0c <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3a:	f7fc ff67 	bl	8003a0c <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e064      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b4c:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0f0      	beq.n	8006b3a <HAL_RCC_OscConfig+0x452>
 8006b58:	e05c      	b.n	8006c14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5a:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <HAL_RCC_OscConfig+0x4b4>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b60:	f7fc ff54 	bl	8003a0c <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b68:	f7fc ff50 	bl	8003a0c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e04d      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7a:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <HAL_RCC_OscConfig+0x4ac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1f0      	bne.n	8006b68 <HAL_RCC_OscConfig+0x480>
 8006b86:	e045      	b.n	8006c14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d107      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e040      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
 8006b94:	40023800 	.word	0x40023800
 8006b98:	40007000 	.word	0x40007000
 8006b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ba0:	4b1f      	ldr	r3, [pc, #124]	; (8006c20 <HAL_RCC_OscConfig+0x538>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d030      	beq.n	8006c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d129      	bne.n	8006c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d122      	bne.n	8006c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d119      	bne.n	8006c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	3b01      	subs	r3, #1
 8006bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d10f      	bne.n	8006c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d107      	bne.n	8006c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800

08006c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e07b      	b.n	8006d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d108      	bne.n	8006c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c46:	d009      	beq.n	8006c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	61da      	str	r2, [r3, #28]
 8006c4e:	e005      	b.n	8006c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fc fae2 	bl	8003240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	ea42 0103 	orr.w	r1, r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	f003 0104 	and.w	r1, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	f003 0210 	and.w	r2, r3, #16
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b088      	sub	sp, #32
 8006d3a:	af02      	add	r7, sp, #8
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d52:	d112      	bne.n	8006d7a <HAL_SPI_Receive+0x44>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10e      	bne.n	8006d7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d64:	88fa      	ldrh	r2, [r7, #6]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f8f1 	bl	8006f58 <HAL_SPI_TransmitReceive>
 8006d76:	4603      	mov	r3, r0
 8006d78:	e0ea      	b.n	8006f50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_SPI_Receive+0x52>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e0e3      	b.n	8006f50 <HAL_SPI_Receive+0x21a>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d90:	f7fc fe3c 	bl	8003a0c <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d002      	beq.n	8006da8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
 8006da4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006da6:	e0ca      	b.n	8006f3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_SPI_Receive+0x7e>
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006db8:	e0c1      	b.n	8006f3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	88fa      	ldrh	r2, [r7, #6]
 8006dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e00:	d10f      	bne.n	8006e22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d007      	beq.n	8006e40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d162      	bne.n	8006f0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e48:	e02e      	b.n	8006ea8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d115      	bne.n	8006e84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f103 020c 	add.w	r2, r3, #12
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	7812      	ldrb	r2, [r2, #0]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e82:	e011      	b.n	8006ea8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e84:	f7fc fdc2 	bl	8003a0c <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d803      	bhi.n	8006e9c <HAL_SPI_Receive+0x166>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d102      	bne.n	8006ea2 <HAL_SPI_Receive+0x16c>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ea6:	e04a      	b.n	8006f3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1cb      	bne.n	8006e4a <HAL_SPI_Receive+0x114>
 8006eb2:	e031      	b.n	8006f18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d113      	bne.n	8006eea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	1c9a      	adds	r2, r3, #2
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ee8:	e011      	b.n	8006f0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eea:	f7fc fd8f 	bl	8003a0c <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d803      	bhi.n	8006f02 <HAL_SPI_Receive+0x1cc>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d102      	bne.n	8006f08 <HAL_SPI_Receive+0x1d2>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f0c:	e017      	b.n	8006f3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1cd      	bne.n	8006eb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fa45 	bl	80073ac <SPI_EndRxTransaction>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	75fb      	strb	r3, [r7, #23]
 8006f3a:	e000      	b.n	8006f3e <HAL_SPI_Receive+0x208>
  }

error :
 8006f3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	; 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f66:	2301      	movs	r3, #1
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_SPI_TransmitReceive+0x26>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e18a      	b.n	8007294 <HAL_SPI_TransmitReceive+0x33c>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f86:	f7fc fd41 	bl	8003a0c <HAL_GetTick>
 8006f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f9c:	887b      	ldrh	r3, [r7, #2]
 8006f9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d00f      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x70>
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fae:	d107      	bne.n	8006fc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <HAL_SPI_TransmitReceive+0x68>
 8006fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d003      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fc6:	e15b      	b.n	8007280 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x82>
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fe0:	e14e      	b.n	8007280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d003      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2205      	movs	r2, #5
 8006ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	887a      	ldrh	r2, [r7, #2]
 8007006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	887a      	ldrh	r2, [r7, #2]
 800701e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d007      	beq.n	800704a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007052:	d178      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_TransmitReceive+0x10a>
 800705c:	8b7b      	ldrh	r3, [r7, #26]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d166      	bne.n	8007130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	881a      	ldrh	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	1c9a      	adds	r2, r3, #2
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007086:	e053      	b.n	8007130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b02      	cmp	r3, #2
 8007094:	d11b      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x176>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d016      	beq.n	80070ce <HAL_SPI_TransmitReceive+0x176>
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d113      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	881a      	ldrh	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d119      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x1b8>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d014      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	b292      	uxth	r2, r2
 80070f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	1c9a      	adds	r2, r3, #2
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710c:	2301      	movs	r3, #1
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007110:	f7fc fc7c 	bl	8003a0c <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711c:	429a      	cmp	r2, r3
 800711e:	d807      	bhi.n	8007130 <HAL_SPI_TransmitReceive+0x1d8>
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d003      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800712e:	e0a7      	b.n	8007280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1a6      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x130>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1a1      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x130>
 8007144:	e07c      	b.n	8007240 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HAL_SPI_TransmitReceive+0x1fc>
 800714e:	8b7b      	ldrh	r3, [r7, #26]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d16b      	bne.n	800722c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	330c      	adds	r3, #12
 800715e:	7812      	ldrb	r2, [r2, #0]
 8007160:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800717a:	e057      	b.n	800722c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b02      	cmp	r3, #2
 8007188:	d11c      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x26c>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d017      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x26c>
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	2b01      	cmp	r3, #1
 8007198:	d114      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d119      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x2ae>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d014      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007202:	2301      	movs	r3, #1
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007206:	f7fc fc01 	bl	8003a0c <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007212:	429a      	cmp	r2, r3
 8007214:	d803      	bhi.n	800721e <HAL_SPI_TransmitReceive+0x2c6>
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d102      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x2cc>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d103      	bne.n	800722c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800722a:	e029      	b.n	8007280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1a2      	bne.n	800717c <HAL_SPI_TransmitReceive+0x224>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d19d      	bne.n	800717c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f917 	bl	8007478 <SPI_EndRxTxTransaction>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d006      	beq.n	800725e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800725c:	e010      	b.n	8007280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	e000      	b.n	8007280 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800727e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007290:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007294:	4618      	mov	r0, r3
 8007296:	3730      	adds	r7, #48	; 0x30
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072ac:	f7fc fbae 	bl	8003a0c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	4413      	add	r3, r2
 80072ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072bc:	f7fc fba6 	bl	8003a0c <HAL_GetTick>
 80072c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072c2:	4b39      	ldr	r3, [pc, #228]	; (80073a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	015b      	lsls	r3, r3, #5
 80072c8:	0d1b      	lsrs	r3, r3, #20
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
 80072d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072d2:	e054      	b.n	800737e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072da:	d050      	beq.n	800737e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072dc:	f7fc fb96 	bl	8003a0c <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d902      	bls.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d13d      	bne.n	800736e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800730a:	d111      	bne.n	8007330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007314:	d004      	beq.n	8007320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731e:	d107      	bne.n	8007330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800732e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007338:	d10f      	bne.n	800735a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e017      	b.n	800739e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3b01      	subs	r3, #1
 800737c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4013      	ands	r3, r2
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	429a      	cmp	r2, r3
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	429a      	cmp	r2, r3
 800739a:	d19b      	bne.n	80072d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3720      	adds	r7, #32
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	2000001c 	.word	0x2000001c

080073ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073c0:	d111      	bne.n	80073e6 <SPI_EndRxTransaction+0x3a>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ca:	d004      	beq.n	80073d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	d107      	bne.n	80073e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ee:	d12a      	bne.n	8007446 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f8:	d012      	beq.n	8007420 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2200      	movs	r2, #0
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff ff49 	bl	800729c <SPI_WaitFlagStateUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d02d      	beq.n	800746c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e026      	b.n	800746e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	2101      	movs	r1, #1
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff ff36 	bl	800729c <SPI_WaitFlagStateUntilTimeout>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01a      	beq.n	800746c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	f043 0220 	orr.w	r2, r3, #32
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e013      	b.n	800746e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	2101      	movs	r1, #1
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff ff23 	bl	800729c <SPI_WaitFlagStateUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	f043 0220 	orr.w	r2, r3, #32
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e000      	b.n	800746e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007484:	4b1b      	ldr	r3, [pc, #108]	; (80074f4 <SPI_EndRxTxTransaction+0x7c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1b      	ldr	r2, [pc, #108]	; (80074f8 <SPI_EndRxTxTransaction+0x80>)
 800748a:	fba2 2303 	umull	r2, r3, r2, r3
 800748e:	0d5b      	lsrs	r3, r3, #21
 8007490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007494:	fb02 f303 	mul.w	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a2:	d112      	bne.n	80074ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff fef4 	bl	800729c <SPI_WaitFlagStateUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d016      	beq.n	80074e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e00f      	b.n	80074ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e0:	2b80      	cmp	r3, #128	; 0x80
 80074e2:	d0f2      	beq.n	80074ca <SPI_EndRxTxTransaction+0x52>
 80074e4:	e000      	b.n	80074e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80074e6:	bf00      	nop
  }

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	2000001c 	.word	0x2000001c
 80074f8:	165e9f81 	.word	0x165e9f81

080074fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e041      	b.n	8007592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fb fef4 	bl	8003310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f000 f95e 	bl	80077fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d001      	beq.n	80075b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e046      	b.n	8007642 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a23      	ldr	r2, [pc, #140]	; (8007650 <HAL_TIM_Base_Start+0xb4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d022      	beq.n	800760c <HAL_TIM_Base_Start+0x70>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ce:	d01d      	beq.n	800760c <HAL_TIM_Base_Start+0x70>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <HAL_TIM_Base_Start+0xb8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d018      	beq.n	800760c <HAL_TIM_Base_Start+0x70>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <HAL_TIM_Base_Start+0xbc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <HAL_TIM_Base_Start+0x70>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <HAL_TIM_Base_Start+0xc0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00e      	beq.n	800760c <HAL_TIM_Base_Start+0x70>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <HAL_TIM_Base_Start+0xc4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_TIM_Base_Start+0x70>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a19      	ldr	r2, [pc, #100]	; (8007664 <HAL_TIM_Base_Start+0xc8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIM_Base_Start+0x70>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a18      	ldr	r2, [pc, #96]	; (8007668 <HAL_TIM_Base_Start+0xcc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d111      	bne.n	8007630 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b06      	cmp	r3, #6
 800761c:	d010      	beq.n	8007640 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0201 	orr.w	r2, r2, #1
 800762c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800762e:	e007      	b.n	8007640 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0201 	orr.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40010000 	.word	0x40010000
 8007654:	40000400 	.word	0x40000400
 8007658:	40000800 	.word	0x40000800
 800765c:	40000c00 	.word	0x40000c00
 8007660:	40010400 	.word	0x40010400
 8007664:	40014000 	.word	0x40014000
 8007668:	40001800 	.word	0x40001800

0800766c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_TIM_ConfigClockSource+0x1c>
 8007684:	2302      	movs	r3, #2
 8007686:	e0b4      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x186>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c0:	d03e      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0xd4>
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c6:	f200 8087 	bhi.w	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ce:	f000 8086 	beq.w	80077de <HAL_TIM_ConfigClockSource+0x172>
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d6:	d87f      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b70      	cmp	r3, #112	; 0x70
 80076da:	d01a      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0xa6>
 80076dc:	2b70      	cmp	r3, #112	; 0x70
 80076de:	d87b      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e0:	2b60      	cmp	r3, #96	; 0x60
 80076e2:	d050      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x11a>
 80076e4:	2b60      	cmp	r3, #96	; 0x60
 80076e6:	d877      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b50      	cmp	r3, #80	; 0x50
 80076ea:	d03c      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0xfa>
 80076ec:	2b50      	cmp	r3, #80	; 0x50
 80076ee:	d873      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d058      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x13a>
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	d86f      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b30      	cmp	r3, #48	; 0x30
 80076fa:	d064      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 80076fc:	2b30      	cmp	r3, #48	; 0x30
 80076fe:	d86b      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b20      	cmp	r3, #32
 8007702:	d060      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d867      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d05c      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 800770c:	2b10      	cmp	r3, #16
 800770e:	d05a      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007710:	e062      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6899      	ldr	r1, [r3, #8]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f000 f985 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	609a      	str	r2, [r3, #8]
      break;
 800773e:	e04f      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	6899      	ldr	r1, [r3, #8]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f000 f96e 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007762:	609a      	str	r2, [r3, #8]
      break;
 8007764:	e03c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6859      	ldr	r1, [r3, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	461a      	mov	r2, r3
 8007774:	f000 f8e2 	bl	800793c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2150      	movs	r1, #80	; 0x50
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f93b 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 8007784:	e02c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6859      	ldr	r1, [r3, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	461a      	mov	r2, r3
 8007794:	f000 f901 	bl	800799a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2160      	movs	r1, #96	; 0x60
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 f92b 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 80077a4:	e01c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f000 f8c2 	bl	800793c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2140      	movs	r1, #64	; 0x40
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f91b 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 80077c4:	e00c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f000 f912 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 80077d6:	e003      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e000      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a40      	ldr	r2, [pc, #256]	; (8007910 <TIM_Base_SetConfig+0x114>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d013      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781a:	d00f      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a3d      	ldr	r2, [pc, #244]	; (8007914 <TIM_Base_SetConfig+0x118>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00b      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a3c      	ldr	r2, [pc, #240]	; (8007918 <TIM_Base_SetConfig+0x11c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a3b      	ldr	r2, [pc, #236]	; (800791c <TIM_Base_SetConfig+0x120>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a3a      	ldr	r2, [pc, #232]	; (8007920 <TIM_Base_SetConfig+0x124>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d108      	bne.n	800784e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <TIM_Base_SetConfig+0x114>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d027      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2c      	ldr	r2, [pc, #176]	; (8007914 <TIM_Base_SetConfig+0x118>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d023      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2b      	ldr	r2, [pc, #172]	; (8007918 <TIM_Base_SetConfig+0x11c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01f      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2a      	ldr	r2, [pc, #168]	; (800791c <TIM_Base_SetConfig+0x120>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a29      	ldr	r2, [pc, #164]	; (8007920 <TIM_Base_SetConfig+0x124>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d017      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a28      	ldr	r2, [pc, #160]	; (8007924 <TIM_Base_SetConfig+0x128>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a27      	ldr	r2, [pc, #156]	; (8007928 <TIM_Base_SetConfig+0x12c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00f      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a26      	ldr	r2, [pc, #152]	; (800792c <TIM_Base_SetConfig+0x130>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a25      	ldr	r2, [pc, #148]	; (8007930 <TIM_Base_SetConfig+0x134>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d007      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a24      	ldr	r2, [pc, #144]	; (8007934 <TIM_Base_SetConfig+0x138>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d003      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a23      	ldr	r2, [pc, #140]	; (8007938 <TIM_Base_SetConfig+0x13c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d108      	bne.n	80078c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a0a      	ldr	r2, [pc, #40]	; (8007910 <TIM_Base_SetConfig+0x114>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_Base_SetConfig+0xf8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <TIM_Base_SetConfig+0x124>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d103      	bne.n	80078fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	615a      	str	r2, [r3, #20]
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40010400 	.word	0x40010400
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800
 8007930:	40001800 	.word	0x40001800
 8007934:	40001c00 	.word	0x40001c00
 8007938:	40002000 	.word	0x40002000

0800793c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	f023 0201 	bic.w	r2, r3, #1
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f023 030a 	bic.w	r3, r3, #10
 8007978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800799a:	b480      	push	{r7}
 800799c:	b087      	sub	sp, #28
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f023 0210 	bic.w	r2, r3, #16
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	031b      	lsls	r3, r3, #12
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f043 0307 	orr.w	r3, r3, #7
 8007a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	609a      	str	r2, [r3, #8]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	021a      	lsls	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	609a      	str	r2, [r3, #8]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d101      	bne.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a84:	2302      	movs	r3, #2
 8007a86:	e05a      	b.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d022      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d01d      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d018      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1a      	ldr	r2, [pc, #104]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d004      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10c      	bne.n	8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40001800 	.word	0x40001800

08007b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e03f      	b.n	8007bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fb fbe0 	bl	8003354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2224      	movs	r2, #36	; 0x24
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fc7b 	bl	80084a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691a      	ldr	r2, [r3, #16]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695a      	ldr	r2, [r3, #20]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b0ba      	sub	sp, #232	; 0xe8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10f      	bne.n	8007c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <HAL_UART_IRQHandler+0x66>
 8007c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb65 	bl	8008332 <UART_Receive_IT>
      return;
 8007c68:	e256      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80de 	beq.w	8007e30 <HAL_UART_IRQHandler+0x22c>
 8007c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d106      	bne.n	8007c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80d1 	beq.w	8007e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00b      	beq.n	8007cb2 <HAL_UART_IRQHandler+0xae>
 8007c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	f043 0201 	orr.w	r2, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <HAL_UART_IRQHandler+0xd2>
 8007cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	f043 0202 	orr.w	r2, r3, #2
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <HAL_UART_IRQHandler+0xf6>
 8007ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	f043 0204 	orr.w	r2, r3, #4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d011      	beq.n	8007d2a <HAL_UART_IRQHandler+0x126>
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0208 	orr.w	r2, r3, #8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 81ed 	beq.w	800810e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <HAL_UART_IRQHandler+0x14e>
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 faf0 	bl	8008332 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	f003 0308 	and.w	r3, r3, #8
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <HAL_UART_IRQHandler+0x17a>
 8007d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d04f      	beq.n	8007e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f9f8 	bl	8008174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d141      	bne.n	8007e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3314      	adds	r3, #20
 8007d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3314      	adds	r3, #20
 8007dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1d9      	bne.n	8007d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d013      	beq.n	8007e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	4a7d      	ldr	r2, [pc, #500]	; (8007fe0 <HAL_UART_IRQHandler+0x3dc>)
 8007dec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fc fce4 	bl	80047c0 <HAL_DMA_Abort_IT>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d016      	beq.n	8007e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	e00e      	b.n	8007e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f99a 	bl	8008148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e14:	e00a      	b.n	8007e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f996 	bl	8008148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1c:	e006      	b.n	8007e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f992 	bl	8008148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e2a:	e170      	b.n	800810e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	bf00      	nop
    return;
 8007e2e:	e16e      	b.n	800810e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	f040 814a 	bne.w	80080ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8143 	beq.w	80080ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 813c 	beq.w	80080ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e56:	2300      	movs	r3, #0
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	60bb      	str	r3, [r7, #8]
 8007e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	f040 80b4 	bne.w	8007fe4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 8140 	beq.w	8008112 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	f080 8139 	bcs.w	8008112 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb2:	f000 8088 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	330c      	adds	r3, #12
 8007ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1d9      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3314      	adds	r3, #20
 8007f08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3314      	adds	r3, #20
 8007f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e1      	bne.n	8007f02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3314      	adds	r3, #20
 8007f44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3314      	adds	r3, #20
 8007f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e3      	bne.n	8007f3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f96:	f023 0310 	bic.w	r3, r3, #16
 8007f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	330c      	adds	r3, #12
 8007fa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007faa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e3      	bne.n	8007f84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fc fb8d 	bl	80046e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8c0 	bl	800815c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fdc:	e099      	b.n	8008112 <HAL_UART_IRQHandler+0x50e>
 8007fde:	bf00      	nop
 8007fe0:	0800823b 	.word	0x0800823b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 808b 	beq.w	8008116 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8086 	beq.w	8008116 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	330c      	adds	r3, #12
 800802a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800802e:	647a      	str	r2, [r7, #68]	; 0x44
 8008030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800803c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e3      	bne.n	800800a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3314      	adds	r3, #20
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	623b      	str	r3, [r7, #32]
   return(result);
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	f023 0301 	bic.w	r3, r3, #1
 8008058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3314      	adds	r3, #20
 8008062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008066:	633a      	str	r2, [r7, #48]	; 0x30
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800806c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e3      	bne.n	8008042 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	60fb      	str	r3, [r7, #12]
   return(result);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0310 	bic.w	r3, r3, #16
 800809e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	330c      	adds	r3, #12
 80080a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80080ac:	61fa      	str	r2, [r7, #28]
 80080ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	69b9      	ldr	r1, [r7, #24]
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e3      	bne.n	8008088 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f848 	bl	800815c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080cc:	e023      	b.n	8008116 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <HAL_UART_IRQHandler+0x4ea>
 80080da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f8bb 	bl	8008262 <UART_Transmit_IT>
    return;
 80080ec:	e014      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <HAL_UART_IRQHandler+0x514>
 80080fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d008      	beq.n	8008118 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f8fb 	bl	8008302 <UART_EndTransmit_IT>
    return;
 800810c:	e004      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
    return;
 800810e:	bf00      	nop
 8008110:	e002      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
      return;
 8008112:	bf00      	nop
 8008114:	e000      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
      return;
 8008116:	bf00      	nop
  }
}
 8008118:	37e8      	adds	r7, #232	; 0xe8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop

08008120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b095      	sub	sp, #84	; 0x54
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	330c      	adds	r3, #12
 800819a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800819c:	643a      	str	r2, [r7, #64]	; 0x40
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e5      	bne.n	800817c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3314      	adds	r3, #20
 80081b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	61fb      	str	r3, [r7, #28]
   return(result);
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	f023 0301 	bic.w	r3, r3, #1
 80081c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3314      	adds	r3, #20
 80081ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e5      	bne.n	80081b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d119      	bne.n	8008220 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	330c      	adds	r3, #12
 80081f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f023 0310 	bic.w	r3, r3, #16
 8008202:	647b      	str	r3, [r7, #68]	; 0x44
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	330c      	adds	r3, #12
 800820a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800820c:	61ba      	str	r2, [r7, #24]
 800820e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6979      	ldr	r1, [r7, #20]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	613b      	str	r3, [r7, #16]
   return(result);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e5      	bne.n	80081ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800822e:	bf00      	nop
 8008230:	3754      	adds	r7, #84	; 0x54
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7ff ff77 	bl	8008148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b21      	cmp	r3, #33	; 0x21
 8008274:	d13e      	bne.n	80082f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827e:	d114      	bne.n	80082aa <UART_Transmit_IT+0x48>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d110      	bne.n	80082aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800829c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	1c9a      	adds	r2, r3, #2
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	621a      	str	r2, [r3, #32]
 80082a8:	e008      	b.n	80082bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	1c59      	adds	r1, r3, #1
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6211      	str	r1, [r2, #32]
 80082b4:	781a      	ldrb	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	4619      	mov	r1, r3
 80082ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10f      	bne.n	80082f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	e000      	b.n	80082f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082f4:	2302      	movs	r3, #2
  }
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008318:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fefc 	bl	8008120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b08c      	sub	sp, #48	; 0x30
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b22      	cmp	r3, #34	; 0x22
 8008344:	f040 80ab 	bne.w	800849e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008350:	d117      	bne.n	8008382 <UART_Receive_IT+0x50>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d113      	bne.n	8008382 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008370:	b29a      	uxth	r2, r3
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837a:	1c9a      	adds	r2, r3, #2
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	629a      	str	r2, [r3, #40]	; 0x28
 8008380:	e026      	b.n	80083d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008394:	d007      	beq.n	80083a6 <UART_Receive_IT+0x74>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <UART_Receive_IT+0x82>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	701a      	strb	r2, [r3, #0]
 80083b2:	e008      	b.n	80083c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29b      	uxth	r3, r3
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	4619      	mov	r1, r3
 80083de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d15a      	bne.n	800849a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0220 	bic.w	r2, r2, #32
 80083f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0201 	bic.w	r2, r2, #1
 8008412:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	2b01      	cmp	r3, #1
 8008422:	d135      	bne.n	8008490 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	330c      	adds	r3, #12
 8008430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	613b      	str	r3, [r7, #16]
   return(result);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f023 0310 	bic.w	r3, r3, #16
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	330c      	adds	r3, #12
 8008448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844a:	623a      	str	r2, [r7, #32]
 800844c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	69f9      	ldr	r1, [r7, #28]
 8008450:	6a3a      	ldr	r2, [r7, #32]
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	61bb      	str	r3, [r7, #24]
   return(result);
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e5      	bne.n	800842a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b10      	cmp	r3, #16
 800846a:	d10a      	bne.n	8008482 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff fe67 	bl	800815c <HAL_UARTEx_RxEventCallback>
 800848e:	e002      	b.n	8008496 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff fe4f 	bl	8008134 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e002      	b.n	80084a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	e000      	b.n	80084a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800849e:	2302      	movs	r3, #2
  }
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3730      	adds	r7, #48	; 0x30
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084ac:	b0c0      	sub	sp, #256	; 0x100
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c4:	68d9      	ldr	r1, [r3, #12]
 80084c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	ea40 0301 	orr.w	r3, r0, r1
 80084d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	431a      	orrs	r2, r3
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	431a      	orrs	r2, r3
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008500:	f021 010c 	bic.w	r1, r1, #12
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800850e:	430b      	orrs	r3, r1
 8008510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800851e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008522:	6999      	ldr	r1, [r3, #24]
 8008524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	ea40 0301 	orr.w	r3, r0, r1
 800852e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	4b8f      	ldr	r3, [pc, #572]	; (8008774 <UART_SetConfig+0x2cc>)
 8008538:	429a      	cmp	r2, r3
 800853a:	d005      	beq.n	8008548 <UART_SetConfig+0xa0>
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4b8d      	ldr	r3, [pc, #564]	; (8008778 <UART_SetConfig+0x2d0>)
 8008544:	429a      	cmp	r2, r3
 8008546:	d104      	bne.n	8008552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008548:	f7fd fe8a 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
 800854c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008550:	e003      	b.n	800855a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008552:	f7fd fe71 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8008556:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800855a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008564:	f040 810c 	bne.w	8008780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800856c:	2200      	movs	r2, #0
 800856e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008572:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800857a:	4622      	mov	r2, r4
 800857c:	462b      	mov	r3, r5
 800857e:	1891      	adds	r1, r2, r2
 8008580:	65b9      	str	r1, [r7, #88]	; 0x58
 8008582:	415b      	adcs	r3, r3
 8008584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800858a:	4621      	mov	r1, r4
 800858c:	eb12 0801 	adds.w	r8, r2, r1
 8008590:	4629      	mov	r1, r5
 8008592:	eb43 0901 	adc.w	r9, r3, r1
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085aa:	4690      	mov	r8, r2
 80085ac:	4699      	mov	r9, r3
 80085ae:	4623      	mov	r3, r4
 80085b0:	eb18 0303 	adds.w	r3, r8, r3
 80085b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085b8:	462b      	mov	r3, r5
 80085ba:	eb49 0303 	adc.w	r3, r9, r3
 80085be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085d6:	460b      	mov	r3, r1
 80085d8:	18db      	adds	r3, r3, r3
 80085da:	653b      	str	r3, [r7, #80]	; 0x50
 80085dc:	4613      	mov	r3, r2
 80085de:	eb42 0303 	adc.w	r3, r2, r3
 80085e2:	657b      	str	r3, [r7, #84]	; 0x54
 80085e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085ec:	f7f8 fb18 	bl	8000c20 <__aeabi_uldivmod>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4b61      	ldr	r3, [pc, #388]	; (800877c <UART_SetConfig+0x2d4>)
 80085f6:	fba3 2302 	umull	r2, r3, r3, r2
 80085fa:	095b      	lsrs	r3, r3, #5
 80085fc:	011c      	lsls	r4, r3, #4
 80085fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008602:	2200      	movs	r2, #0
 8008604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008608:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800860c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008610:	4642      	mov	r2, r8
 8008612:	464b      	mov	r3, r9
 8008614:	1891      	adds	r1, r2, r2
 8008616:	64b9      	str	r1, [r7, #72]	; 0x48
 8008618:	415b      	adcs	r3, r3
 800861a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800861c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008620:	4641      	mov	r1, r8
 8008622:	eb12 0a01 	adds.w	sl, r2, r1
 8008626:	4649      	mov	r1, r9
 8008628:	eb43 0b01 	adc.w	fp, r3, r1
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800863c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008640:	4692      	mov	sl, r2
 8008642:	469b      	mov	fp, r3
 8008644:	4643      	mov	r3, r8
 8008646:	eb1a 0303 	adds.w	r3, sl, r3
 800864a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800864e:	464b      	mov	r3, r9
 8008650:	eb4b 0303 	adc.w	r3, fp, r3
 8008654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008664:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800866c:	460b      	mov	r3, r1
 800866e:	18db      	adds	r3, r3, r3
 8008670:	643b      	str	r3, [r7, #64]	; 0x40
 8008672:	4613      	mov	r3, r2
 8008674:	eb42 0303 	adc.w	r3, r2, r3
 8008678:	647b      	str	r3, [r7, #68]	; 0x44
 800867a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800867e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008682:	f7f8 facd 	bl	8000c20 <__aeabi_uldivmod>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4611      	mov	r1, r2
 800868c:	4b3b      	ldr	r3, [pc, #236]	; (800877c <UART_SetConfig+0x2d4>)
 800868e:	fba3 2301 	umull	r2, r3, r3, r1
 8008692:	095b      	lsrs	r3, r3, #5
 8008694:	2264      	movs	r2, #100	; 0x64
 8008696:	fb02 f303 	mul.w	r3, r2, r3
 800869a:	1acb      	subs	r3, r1, r3
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086a2:	4b36      	ldr	r3, [pc, #216]	; (800877c <UART_SetConfig+0x2d4>)
 80086a4:	fba3 2302 	umull	r2, r3, r3, r2
 80086a8:	095b      	lsrs	r3, r3, #5
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086b0:	441c      	add	r4, r3
 80086b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086c4:	4642      	mov	r2, r8
 80086c6:	464b      	mov	r3, r9
 80086c8:	1891      	adds	r1, r2, r2
 80086ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80086cc:	415b      	adcs	r3, r3
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086d4:	4641      	mov	r1, r8
 80086d6:	1851      	adds	r1, r2, r1
 80086d8:	6339      	str	r1, [r7, #48]	; 0x30
 80086da:	4649      	mov	r1, r9
 80086dc:	414b      	adcs	r3, r1
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
 80086e0:	f04f 0200 	mov.w	r2, #0
 80086e4:	f04f 0300 	mov.w	r3, #0
 80086e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086ec:	4659      	mov	r1, fp
 80086ee:	00cb      	lsls	r3, r1, #3
 80086f0:	4651      	mov	r1, sl
 80086f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086f6:	4651      	mov	r1, sl
 80086f8:	00ca      	lsls	r2, r1, #3
 80086fa:	4610      	mov	r0, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	4603      	mov	r3, r0
 8008700:	4642      	mov	r2, r8
 8008702:	189b      	adds	r3, r3, r2
 8008704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008708:	464b      	mov	r3, r9
 800870a:	460a      	mov	r2, r1
 800870c:	eb42 0303 	adc.w	r3, r2, r3
 8008710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008720:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008728:	460b      	mov	r3, r1
 800872a:	18db      	adds	r3, r3, r3
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
 800872e:	4613      	mov	r3, r2
 8008730:	eb42 0303 	adc.w	r3, r2, r3
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800873a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800873e:	f7f8 fa6f 	bl	8000c20 <__aeabi_uldivmod>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4b0d      	ldr	r3, [pc, #52]	; (800877c <UART_SetConfig+0x2d4>)
 8008748:	fba3 1302 	umull	r1, r3, r3, r2
 800874c:	095b      	lsrs	r3, r3, #5
 800874e:	2164      	movs	r1, #100	; 0x64
 8008750:	fb01 f303 	mul.w	r3, r1, r3
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	3332      	adds	r3, #50	; 0x32
 800875a:	4a08      	ldr	r2, [pc, #32]	; (800877c <UART_SetConfig+0x2d4>)
 800875c:	fba2 2303 	umull	r2, r3, r2, r3
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	f003 0207 	and.w	r2, r3, #7
 8008766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4422      	add	r2, r4
 800876e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008770:	e105      	b.n	800897e <UART_SetConfig+0x4d6>
 8008772:	bf00      	nop
 8008774:	40011000 	.word	0x40011000
 8008778:	40011400 	.word	0x40011400
 800877c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008784:	2200      	movs	r2, #0
 8008786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800878a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800878e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008792:	4642      	mov	r2, r8
 8008794:	464b      	mov	r3, r9
 8008796:	1891      	adds	r1, r2, r2
 8008798:	6239      	str	r1, [r7, #32]
 800879a:	415b      	adcs	r3, r3
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
 800879e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087a2:	4641      	mov	r1, r8
 80087a4:	1854      	adds	r4, r2, r1
 80087a6:	4649      	mov	r1, r9
 80087a8:	eb43 0501 	adc.w	r5, r3, r1
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	00eb      	lsls	r3, r5, #3
 80087b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087ba:	00e2      	lsls	r2, r4, #3
 80087bc:	4614      	mov	r4, r2
 80087be:	461d      	mov	r5, r3
 80087c0:	4643      	mov	r3, r8
 80087c2:	18e3      	adds	r3, r4, r3
 80087c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087c8:	464b      	mov	r3, r9
 80087ca:	eb45 0303 	adc.w	r3, r5, r3
 80087ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087ee:	4629      	mov	r1, r5
 80087f0:	008b      	lsls	r3, r1, #2
 80087f2:	4621      	mov	r1, r4
 80087f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087f8:	4621      	mov	r1, r4
 80087fa:	008a      	lsls	r2, r1, #2
 80087fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008800:	f7f8 fa0e 	bl	8000c20 <__aeabi_uldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4b60      	ldr	r3, [pc, #384]	; (800898c <UART_SetConfig+0x4e4>)
 800880a:	fba3 2302 	umull	r2, r3, r3, r2
 800880e:	095b      	lsrs	r3, r3, #5
 8008810:	011c      	lsls	r4, r3, #4
 8008812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008816:	2200      	movs	r2, #0
 8008818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800881c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008824:	4642      	mov	r2, r8
 8008826:	464b      	mov	r3, r9
 8008828:	1891      	adds	r1, r2, r2
 800882a:	61b9      	str	r1, [r7, #24]
 800882c:	415b      	adcs	r3, r3
 800882e:	61fb      	str	r3, [r7, #28]
 8008830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008834:	4641      	mov	r1, r8
 8008836:	1851      	adds	r1, r2, r1
 8008838:	6139      	str	r1, [r7, #16]
 800883a:	4649      	mov	r1, r9
 800883c:	414b      	adcs	r3, r1
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	f04f 0200 	mov.w	r2, #0
 8008844:	f04f 0300 	mov.w	r3, #0
 8008848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800884c:	4659      	mov	r1, fp
 800884e:	00cb      	lsls	r3, r1, #3
 8008850:	4651      	mov	r1, sl
 8008852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008856:	4651      	mov	r1, sl
 8008858:	00ca      	lsls	r2, r1, #3
 800885a:	4610      	mov	r0, r2
 800885c:	4619      	mov	r1, r3
 800885e:	4603      	mov	r3, r0
 8008860:	4642      	mov	r2, r8
 8008862:	189b      	adds	r3, r3, r2
 8008864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008868:	464b      	mov	r3, r9
 800886a:	460a      	mov	r2, r1
 800886c:	eb42 0303 	adc.w	r3, r2, r3
 8008870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	67bb      	str	r3, [r7, #120]	; 0x78
 800887e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008880:	f04f 0200 	mov.w	r2, #0
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800888c:	4649      	mov	r1, r9
 800888e:	008b      	lsls	r3, r1, #2
 8008890:	4641      	mov	r1, r8
 8008892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008896:	4641      	mov	r1, r8
 8008898:	008a      	lsls	r2, r1, #2
 800889a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800889e:	f7f8 f9bf 	bl	8000c20 <__aeabi_uldivmod>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4b39      	ldr	r3, [pc, #228]	; (800898c <UART_SetConfig+0x4e4>)
 80088a8:	fba3 1302 	umull	r1, r3, r3, r2
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	2164      	movs	r1, #100	; 0x64
 80088b0:	fb01 f303 	mul.w	r3, r1, r3
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	3332      	adds	r3, #50	; 0x32
 80088ba:	4a34      	ldr	r2, [pc, #208]	; (800898c <UART_SetConfig+0x4e4>)
 80088bc:	fba2 2303 	umull	r2, r3, r2, r3
 80088c0:	095b      	lsrs	r3, r3, #5
 80088c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088c6:	441c      	add	r4, r3
 80088c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088cc:	2200      	movs	r2, #0
 80088ce:	673b      	str	r3, [r7, #112]	; 0x70
 80088d0:	677a      	str	r2, [r7, #116]	; 0x74
 80088d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088d6:	4642      	mov	r2, r8
 80088d8:	464b      	mov	r3, r9
 80088da:	1891      	adds	r1, r2, r2
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	415b      	adcs	r3, r3
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088e6:	4641      	mov	r1, r8
 80088e8:	1851      	adds	r1, r2, r1
 80088ea:	6039      	str	r1, [r7, #0]
 80088ec:	4649      	mov	r1, r9
 80088ee:	414b      	adcs	r3, r1
 80088f0:	607b      	str	r3, [r7, #4]
 80088f2:	f04f 0200 	mov.w	r2, #0
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088fe:	4659      	mov	r1, fp
 8008900:	00cb      	lsls	r3, r1, #3
 8008902:	4651      	mov	r1, sl
 8008904:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008908:	4651      	mov	r1, sl
 800890a:	00ca      	lsls	r2, r1, #3
 800890c:	4610      	mov	r0, r2
 800890e:	4619      	mov	r1, r3
 8008910:	4603      	mov	r3, r0
 8008912:	4642      	mov	r2, r8
 8008914:	189b      	adds	r3, r3, r2
 8008916:	66bb      	str	r3, [r7, #104]	; 0x68
 8008918:	464b      	mov	r3, r9
 800891a:	460a      	mov	r2, r1
 800891c:	eb42 0303 	adc.w	r3, r2, r3
 8008920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	663b      	str	r3, [r7, #96]	; 0x60
 800892c:	667a      	str	r2, [r7, #100]	; 0x64
 800892e:	f04f 0200 	mov.w	r2, #0
 8008932:	f04f 0300 	mov.w	r3, #0
 8008936:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800893a:	4649      	mov	r1, r9
 800893c:	008b      	lsls	r3, r1, #2
 800893e:	4641      	mov	r1, r8
 8008940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008944:	4641      	mov	r1, r8
 8008946:	008a      	lsls	r2, r1, #2
 8008948:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800894c:	f7f8 f968 	bl	8000c20 <__aeabi_uldivmod>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4b0d      	ldr	r3, [pc, #52]	; (800898c <UART_SetConfig+0x4e4>)
 8008956:	fba3 1302 	umull	r1, r3, r3, r2
 800895a:	095b      	lsrs	r3, r3, #5
 800895c:	2164      	movs	r1, #100	; 0x64
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	3332      	adds	r3, #50	; 0x32
 8008968:	4a08      	ldr	r2, [pc, #32]	; (800898c <UART_SetConfig+0x4e4>)
 800896a:	fba2 2303 	umull	r2, r3, r2, r3
 800896e:	095b      	lsrs	r3, r3, #5
 8008970:	f003 020f 	and.w	r2, r3, #15
 8008974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4422      	add	r2, r4
 800897c:	609a      	str	r2, [r3, #8]
}
 800897e:	bf00      	nop
 8008980:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008984:	46bd      	mov	sp, r7
 8008986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800898a:	bf00      	nop
 800898c:	51eb851f 	.word	0x51eb851f

08008990 <atoi>:
 8008990:	220a      	movs	r2, #10
 8008992:	2100      	movs	r1, #0
 8008994:	f000 b8b4 	b.w	8008b00 <strtol>

08008998 <__errno>:
 8008998:	4b01      	ldr	r3, [pc, #4]	; (80089a0 <__errno+0x8>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000028 	.word	0x20000028

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4d0d      	ldr	r5, [pc, #52]	; (80089dc <__libc_init_array+0x38>)
 80089a8:	4c0d      	ldr	r4, [pc, #52]	; (80089e0 <__libc_init_array+0x3c>)
 80089aa:	1b64      	subs	r4, r4, r5
 80089ac:	10a4      	asrs	r4, r4, #2
 80089ae:	2600      	movs	r6, #0
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	4d0b      	ldr	r5, [pc, #44]	; (80089e4 <__libc_init_array+0x40>)
 80089b6:	4c0c      	ldr	r4, [pc, #48]	; (80089e8 <__libc_init_array+0x44>)
 80089b8:	f000 ffc8 	bl	800994c <_init>
 80089bc:	1b64      	subs	r4, r4, r5
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2600      	movs	r6, #0
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089cc:	4798      	blx	r3
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d6:	4798      	blx	r3
 80089d8:	3601      	adds	r6, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	08009ad0 	.word	0x08009ad0
 80089e0:	08009ad0 	.word	0x08009ad0
 80089e4:	08009ad0 	.word	0x08009ad0
 80089e8:	08009ad4 	.word	0x08009ad4

080089ec <memset>:
 80089ec:	4402      	add	r2, r0
 80089ee:	4603      	mov	r3, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <_strtol_l.constprop.0>:
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a02:	d001      	beq.n	8008a08 <_strtol_l.constprop.0+0xc>
 8008a04:	2b24      	cmp	r3, #36	; 0x24
 8008a06:	d906      	bls.n	8008a16 <_strtol_l.constprop.0+0x1a>
 8008a08:	f7ff ffc6 	bl	8008998 <__errno>
 8008a0c:	2316      	movs	r3, #22
 8008a0e:	6003      	str	r3, [r0, #0]
 8008a10:	2000      	movs	r0, #0
 8008a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008afc <_strtol_l.constprop.0+0x100>
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	462e      	mov	r6, r5
 8008a1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a22:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008a26:	f017 0708 	ands.w	r7, r7, #8
 8008a2a:	d1f7      	bne.n	8008a1c <_strtol_l.constprop.0+0x20>
 8008a2c:	2c2d      	cmp	r4, #45	; 0x2d
 8008a2e:	d132      	bne.n	8008a96 <_strtol_l.constprop.0+0x9a>
 8008a30:	782c      	ldrb	r4, [r5, #0]
 8008a32:	2701      	movs	r7, #1
 8008a34:	1cb5      	adds	r5, r6, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d05b      	beq.n	8008af2 <_strtol_l.constprop.0+0xf6>
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	d109      	bne.n	8008a52 <_strtol_l.constprop.0+0x56>
 8008a3e:	2c30      	cmp	r4, #48	; 0x30
 8008a40:	d107      	bne.n	8008a52 <_strtol_l.constprop.0+0x56>
 8008a42:	782c      	ldrb	r4, [r5, #0]
 8008a44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a48:	2c58      	cmp	r4, #88	; 0x58
 8008a4a:	d14d      	bne.n	8008ae8 <_strtol_l.constprop.0+0xec>
 8008a4c:	786c      	ldrb	r4, [r5, #1]
 8008a4e:	2310      	movs	r3, #16
 8008a50:	3502      	adds	r5, #2
 8008a52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a56:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a5a:	f04f 0c00 	mov.w	ip, #0
 8008a5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a62:	4666      	mov	r6, ip
 8008a64:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008a6c:	f1be 0f09 	cmp.w	lr, #9
 8008a70:	d816      	bhi.n	8008aa0 <_strtol_l.constprop.0+0xa4>
 8008a72:	4674      	mov	r4, lr
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	dd24      	ble.n	8008ac2 <_strtol_l.constprop.0+0xc6>
 8008a78:	f1bc 0f00 	cmp.w	ip, #0
 8008a7c:	db1e      	blt.n	8008abc <_strtol_l.constprop.0+0xc0>
 8008a7e:	45b1      	cmp	r9, r6
 8008a80:	d31c      	bcc.n	8008abc <_strtol_l.constprop.0+0xc0>
 8008a82:	d101      	bne.n	8008a88 <_strtol_l.constprop.0+0x8c>
 8008a84:	45a2      	cmp	sl, r4
 8008a86:	db19      	blt.n	8008abc <_strtol_l.constprop.0+0xc0>
 8008a88:	fb06 4603 	mla	r6, r6, r3, r4
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a94:	e7e8      	b.n	8008a68 <_strtol_l.constprop.0+0x6c>
 8008a96:	2c2b      	cmp	r4, #43	; 0x2b
 8008a98:	bf04      	itt	eq
 8008a9a:	782c      	ldrbeq	r4, [r5, #0]
 8008a9c:	1cb5      	addeq	r5, r6, #2
 8008a9e:	e7ca      	b.n	8008a36 <_strtol_l.constprop.0+0x3a>
 8008aa0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008aa4:	f1be 0f19 	cmp.w	lr, #25
 8008aa8:	d801      	bhi.n	8008aae <_strtol_l.constprop.0+0xb2>
 8008aaa:	3c37      	subs	r4, #55	; 0x37
 8008aac:	e7e2      	b.n	8008a74 <_strtol_l.constprop.0+0x78>
 8008aae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008ab2:	f1be 0f19 	cmp.w	lr, #25
 8008ab6:	d804      	bhi.n	8008ac2 <_strtol_l.constprop.0+0xc6>
 8008ab8:	3c57      	subs	r4, #87	; 0x57
 8008aba:	e7db      	b.n	8008a74 <_strtol_l.constprop.0+0x78>
 8008abc:	f04f 3cff 	mov.w	ip, #4294967295
 8008ac0:	e7e6      	b.n	8008a90 <_strtol_l.constprop.0+0x94>
 8008ac2:	f1bc 0f00 	cmp.w	ip, #0
 8008ac6:	da05      	bge.n	8008ad4 <_strtol_l.constprop.0+0xd8>
 8008ac8:	2322      	movs	r3, #34	; 0x22
 8008aca:	6003      	str	r3, [r0, #0]
 8008acc:	4646      	mov	r6, r8
 8008ace:	b942      	cbnz	r2, 8008ae2 <_strtol_l.constprop.0+0xe6>
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	e79e      	b.n	8008a12 <_strtol_l.constprop.0+0x16>
 8008ad4:	b107      	cbz	r7, 8008ad8 <_strtol_l.constprop.0+0xdc>
 8008ad6:	4276      	negs	r6, r6
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	d0f9      	beq.n	8008ad0 <_strtol_l.constprop.0+0xd4>
 8008adc:	f1bc 0f00 	cmp.w	ip, #0
 8008ae0:	d000      	beq.n	8008ae4 <_strtol_l.constprop.0+0xe8>
 8008ae2:	1e69      	subs	r1, r5, #1
 8008ae4:	6011      	str	r1, [r2, #0]
 8008ae6:	e7f3      	b.n	8008ad0 <_strtol_l.constprop.0+0xd4>
 8008ae8:	2430      	movs	r4, #48	; 0x30
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1b1      	bne.n	8008a52 <_strtol_l.constprop.0+0x56>
 8008aee:	2308      	movs	r3, #8
 8008af0:	e7af      	b.n	8008a52 <_strtol_l.constprop.0+0x56>
 8008af2:	2c30      	cmp	r4, #48	; 0x30
 8008af4:	d0a5      	beq.n	8008a42 <_strtol_l.constprop.0+0x46>
 8008af6:	230a      	movs	r3, #10
 8008af8:	e7ab      	b.n	8008a52 <_strtol_l.constprop.0+0x56>
 8008afa:	bf00      	nop
 8008afc:	08009995 	.word	0x08009995

08008b00 <strtol>:
 8008b00:	4613      	mov	r3, r2
 8008b02:	460a      	mov	r2, r1
 8008b04:	4601      	mov	r1, r0
 8008b06:	4802      	ldr	r0, [pc, #8]	; (8008b10 <strtol+0x10>)
 8008b08:	6800      	ldr	r0, [r0, #0]
 8008b0a:	f7ff bf77 	b.w	80089fc <_strtol_l.constprop.0>
 8008b0e:	bf00      	nop
 8008b10:	20000028 	.word	0x20000028

08008b14 <pow>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	ed2d 8b02 	vpush	{d8}
 8008b1a:	eeb0 8a40 	vmov.f32	s16, s0
 8008b1e:	eef0 8a60 	vmov.f32	s17, s1
 8008b22:	ec55 4b11 	vmov	r4, r5, d1
 8008b26:	f000 f867 	bl	8008bf8 <__ieee754_pow>
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	ec57 6b10 	vmov	r6, r7, d0
 8008b36:	f7f7 ffc5 	bl	8000ac4 <__aeabi_dcmpun>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d13b      	bne.n	8008bb6 <pow+0xa2>
 8008b3e:	ec51 0b18 	vmov	r0, r1, d8
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	f7f7 ff8b 	bl	8000a60 <__aeabi_dcmpeq>
 8008b4a:	b1b8      	cbz	r0, 8008b7c <pow+0x68>
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4620      	mov	r0, r4
 8008b52:	4629      	mov	r1, r5
 8008b54:	f7f7 ff84 	bl	8000a60 <__aeabi_dcmpeq>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d146      	bne.n	8008bea <pow+0xd6>
 8008b5c:	ec45 4b10 	vmov	d0, r4, r5
 8008b60:	f000 fe63 	bl	800982a <finite>
 8008b64:	b338      	cbz	r0, 8008bb6 <pow+0xa2>
 8008b66:	2200      	movs	r2, #0
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f7f7 ff81 	bl	8000a74 <__aeabi_dcmplt>
 8008b72:	b300      	cbz	r0, 8008bb6 <pow+0xa2>
 8008b74:	f7ff ff10 	bl	8008998 <__errno>
 8008b78:	2322      	movs	r3, #34	; 0x22
 8008b7a:	e01b      	b.n	8008bb4 <pow+0xa0>
 8008b7c:	ec47 6b10 	vmov	d0, r6, r7
 8008b80:	f000 fe53 	bl	800982a <finite>
 8008b84:	b9e0      	cbnz	r0, 8008bc0 <pow+0xac>
 8008b86:	eeb0 0a48 	vmov.f32	s0, s16
 8008b8a:	eef0 0a68 	vmov.f32	s1, s17
 8008b8e:	f000 fe4c 	bl	800982a <finite>
 8008b92:	b1a8      	cbz	r0, 8008bc0 <pow+0xac>
 8008b94:	ec45 4b10 	vmov	d0, r4, r5
 8008b98:	f000 fe47 	bl	800982a <finite>
 8008b9c:	b180      	cbz	r0, 8008bc0 <pow+0xac>
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	f7f7 ff8d 	bl	8000ac4 <__aeabi_dcmpun>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d0e2      	beq.n	8008b74 <pow+0x60>
 8008bae:	f7ff fef3 	bl	8008998 <__errno>
 8008bb2:	2321      	movs	r3, #33	; 0x21
 8008bb4:	6003      	str	r3, [r0, #0]
 8008bb6:	ecbd 8b02 	vpop	{d8}
 8008bba:	ec47 6b10 	vmov	d0, r6, r7
 8008bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	f7f7 ff4a 	bl	8000a60 <__aeabi_dcmpeq>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d0f2      	beq.n	8008bb6 <pow+0xa2>
 8008bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8008bd4:	eef0 0a68 	vmov.f32	s1, s17
 8008bd8:	f000 fe27 	bl	800982a <finite>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d0ea      	beq.n	8008bb6 <pow+0xa2>
 8008be0:	ec45 4b10 	vmov	d0, r4, r5
 8008be4:	f000 fe21 	bl	800982a <finite>
 8008be8:	e7c3      	b.n	8008b72 <pow+0x5e>
 8008bea:	4f01      	ldr	r7, [pc, #4]	; (8008bf0 <pow+0xdc>)
 8008bec:	2600      	movs	r6, #0
 8008bee:	e7e2      	b.n	8008bb6 <pow+0xa2>
 8008bf0:	3ff00000 	.word	0x3ff00000
 8008bf4:	00000000 	.word	0x00000000

08008bf8 <__ieee754_pow>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	ed2d 8b06 	vpush	{d8-d10}
 8008c00:	b089      	sub	sp, #36	; 0x24
 8008c02:	ed8d 1b00 	vstr	d1, [sp]
 8008c06:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008c0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008c0e:	ea58 0102 	orrs.w	r1, r8, r2
 8008c12:	ec57 6b10 	vmov	r6, r7, d0
 8008c16:	d115      	bne.n	8008c44 <__ieee754_pow+0x4c>
 8008c18:	19b3      	adds	r3, r6, r6
 8008c1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008c1e:	4152      	adcs	r2, r2
 8008c20:	4299      	cmp	r1, r3
 8008c22:	4b89      	ldr	r3, [pc, #548]	; (8008e48 <__ieee754_pow+0x250>)
 8008c24:	4193      	sbcs	r3, r2
 8008c26:	f080 84d2 	bcs.w	80095ce <__ieee754_pow+0x9d6>
 8008c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7f7 faf7 	bl	8000224 <__adddf3>
 8008c36:	ec41 0b10 	vmov	d0, r0, r1
 8008c3a:	b009      	add	sp, #36	; 0x24
 8008c3c:	ecbd 8b06 	vpop	{d8-d10}
 8008c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	4b81      	ldr	r3, [pc, #516]	; (8008e4c <__ieee754_pow+0x254>)
 8008c46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008c4a:	429c      	cmp	r4, r3
 8008c4c:	ee10 aa10 	vmov	sl, s0
 8008c50:	463d      	mov	r5, r7
 8008c52:	dc06      	bgt.n	8008c62 <__ieee754_pow+0x6a>
 8008c54:	d101      	bne.n	8008c5a <__ieee754_pow+0x62>
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	d1e7      	bne.n	8008c2a <__ieee754_pow+0x32>
 8008c5a:	4598      	cmp	r8, r3
 8008c5c:	dc01      	bgt.n	8008c62 <__ieee754_pow+0x6a>
 8008c5e:	d10f      	bne.n	8008c80 <__ieee754_pow+0x88>
 8008c60:	b172      	cbz	r2, 8008c80 <__ieee754_pow+0x88>
 8008c62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008c66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008c6a:	ea55 050a 	orrs.w	r5, r5, sl
 8008c6e:	d1dc      	bne.n	8008c2a <__ieee754_pow+0x32>
 8008c70:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c74:	18db      	adds	r3, r3, r3
 8008c76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008c7a:	4152      	adcs	r2, r2
 8008c7c:	429d      	cmp	r5, r3
 8008c7e:	e7d0      	b.n	8008c22 <__ieee754_pow+0x2a>
 8008c80:	2d00      	cmp	r5, #0
 8008c82:	da3b      	bge.n	8008cfc <__ieee754_pow+0x104>
 8008c84:	4b72      	ldr	r3, [pc, #456]	; (8008e50 <__ieee754_pow+0x258>)
 8008c86:	4598      	cmp	r8, r3
 8008c88:	dc51      	bgt.n	8008d2e <__ieee754_pow+0x136>
 8008c8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c8e:	4598      	cmp	r8, r3
 8008c90:	f340 84ac 	ble.w	80095ec <__ieee754_pow+0x9f4>
 8008c94:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c9c:	2b14      	cmp	r3, #20
 8008c9e:	dd0f      	ble.n	8008cc0 <__ieee754_pow+0xc8>
 8008ca0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008ca4:	fa22 f103 	lsr.w	r1, r2, r3
 8008ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cac:	4293      	cmp	r3, r2
 8008cae:	f040 849d 	bne.w	80095ec <__ieee754_pow+0x9f4>
 8008cb2:	f001 0101 	and.w	r1, r1, #1
 8008cb6:	f1c1 0302 	rsb	r3, r1, #2
 8008cba:	9304      	str	r3, [sp, #16]
 8008cbc:	b182      	cbz	r2, 8008ce0 <__ieee754_pow+0xe8>
 8008cbe:	e05f      	b.n	8008d80 <__ieee754_pow+0x188>
 8008cc0:	2a00      	cmp	r2, #0
 8008cc2:	d15b      	bne.n	8008d7c <__ieee754_pow+0x184>
 8008cc4:	f1c3 0314 	rsb	r3, r3, #20
 8008cc8:	fa48 f103 	asr.w	r1, r8, r3
 8008ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd0:	4543      	cmp	r3, r8
 8008cd2:	f040 8488 	bne.w	80095e6 <__ieee754_pow+0x9ee>
 8008cd6:	f001 0101 	and.w	r1, r1, #1
 8008cda:	f1c1 0302 	rsb	r3, r1, #2
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	4b5c      	ldr	r3, [pc, #368]	; (8008e54 <__ieee754_pow+0x25c>)
 8008ce2:	4598      	cmp	r8, r3
 8008ce4:	d132      	bne.n	8008d4c <__ieee754_pow+0x154>
 8008ce6:	f1b9 0f00 	cmp.w	r9, #0
 8008cea:	f280 8478 	bge.w	80095de <__ieee754_pow+0x9e6>
 8008cee:	4959      	ldr	r1, [pc, #356]	; (8008e54 <__ieee754_pow+0x25c>)
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f7f7 fd75 	bl	80007e4 <__aeabi_ddiv>
 8008cfa:	e79c      	b.n	8008c36 <__ieee754_pow+0x3e>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	d13d      	bne.n	8008d80 <__ieee754_pow+0x188>
 8008d04:	4b51      	ldr	r3, [pc, #324]	; (8008e4c <__ieee754_pow+0x254>)
 8008d06:	4598      	cmp	r8, r3
 8008d08:	d1ea      	bne.n	8008ce0 <__ieee754_pow+0xe8>
 8008d0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008d0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008d12:	ea53 030a 	orrs.w	r3, r3, sl
 8008d16:	f000 845a 	beq.w	80095ce <__ieee754_pow+0x9d6>
 8008d1a:	4b4f      	ldr	r3, [pc, #316]	; (8008e58 <__ieee754_pow+0x260>)
 8008d1c:	429c      	cmp	r4, r3
 8008d1e:	dd08      	ble.n	8008d32 <__ieee754_pow+0x13a>
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	f2c0 8457 	blt.w	80095d6 <__ieee754_pow+0x9de>
 8008d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d2c:	e783      	b.n	8008c36 <__ieee754_pow+0x3e>
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e7e5      	b.n	8008cfe <__ieee754_pow+0x106>
 8008d32:	f1b9 0f00 	cmp.w	r9, #0
 8008d36:	f04f 0000 	mov.w	r0, #0
 8008d3a:	f04f 0100 	mov.w	r1, #0
 8008d3e:	f6bf af7a 	bge.w	8008c36 <__ieee754_pow+0x3e>
 8008d42:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008d46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008d4a:	e774      	b.n	8008c36 <__ieee754_pow+0x3e>
 8008d4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008d50:	d106      	bne.n	8008d60 <__ieee754_pow+0x168>
 8008d52:	4632      	mov	r2, r6
 8008d54:	463b      	mov	r3, r7
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	f7f7 fc19 	bl	8000590 <__aeabi_dmul>
 8008d5e:	e76a      	b.n	8008c36 <__ieee754_pow+0x3e>
 8008d60:	4b3e      	ldr	r3, [pc, #248]	; (8008e5c <__ieee754_pow+0x264>)
 8008d62:	4599      	cmp	r9, r3
 8008d64:	d10c      	bne.n	8008d80 <__ieee754_pow+0x188>
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	db0a      	blt.n	8008d80 <__ieee754_pow+0x188>
 8008d6a:	ec47 6b10 	vmov	d0, r6, r7
 8008d6e:	b009      	add	sp, #36	; 0x24
 8008d70:	ecbd 8b06 	vpop	{d8-d10}
 8008d74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	f000 bc6c 	b.w	8009654 <__ieee754_sqrt>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	ec47 6b10 	vmov	d0, r6, r7
 8008d84:	f000 fd48 	bl	8009818 <fabs>
 8008d88:	ec51 0b10 	vmov	r0, r1, d0
 8008d8c:	f1ba 0f00 	cmp.w	sl, #0
 8008d90:	d129      	bne.n	8008de6 <__ieee754_pow+0x1ee>
 8008d92:	b124      	cbz	r4, 8008d9e <__ieee754_pow+0x1a6>
 8008d94:	4b2f      	ldr	r3, [pc, #188]	; (8008e54 <__ieee754_pow+0x25c>)
 8008d96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d123      	bne.n	8008de6 <__ieee754_pow+0x1ee>
 8008d9e:	f1b9 0f00 	cmp.w	r9, #0
 8008da2:	da05      	bge.n	8008db0 <__ieee754_pow+0x1b8>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	2000      	movs	r0, #0
 8008daa:	492a      	ldr	r1, [pc, #168]	; (8008e54 <__ieee754_pow+0x25c>)
 8008dac:	f7f7 fd1a 	bl	80007e4 <__aeabi_ddiv>
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	f6bf af40 	bge.w	8008c36 <__ieee754_pow+0x3e>
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008dbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008dc0:	4323      	orrs	r3, r4
 8008dc2:	d108      	bne.n	8008dd6 <__ieee754_pow+0x1de>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4619      	mov	r1, r3
 8008dcc:	f7f7 fa28 	bl	8000220 <__aeabi_dsub>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	e78f      	b.n	8008cf6 <__ieee754_pow+0xfe>
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	f47f af2c 	bne.w	8008c36 <__ieee754_pow+0x3e>
 8008dde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008de2:	4619      	mov	r1, r3
 8008de4:	e727      	b.n	8008c36 <__ieee754_pow+0x3e>
 8008de6:	0feb      	lsrs	r3, r5, #31
 8008de8:	3b01      	subs	r3, #1
 8008dea:	9306      	str	r3, [sp, #24]
 8008dec:	9a06      	ldr	r2, [sp, #24]
 8008dee:	9b04      	ldr	r3, [sp, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	d102      	bne.n	8008dfa <__ieee754_pow+0x202>
 8008df4:	4632      	mov	r2, r6
 8008df6:	463b      	mov	r3, r7
 8008df8:	e7e6      	b.n	8008dc8 <__ieee754_pow+0x1d0>
 8008dfa:	4b19      	ldr	r3, [pc, #100]	; (8008e60 <__ieee754_pow+0x268>)
 8008dfc:	4598      	cmp	r8, r3
 8008dfe:	f340 80fb 	ble.w	8008ff8 <__ieee754_pow+0x400>
 8008e02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008e06:	4598      	cmp	r8, r3
 8008e08:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <__ieee754_pow+0x260>)
 8008e0a:	dd0c      	ble.n	8008e26 <__ieee754_pow+0x22e>
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	dc0f      	bgt.n	8008e30 <__ieee754_pow+0x238>
 8008e10:	f1b9 0f00 	cmp.w	r9, #0
 8008e14:	da0f      	bge.n	8008e36 <__ieee754_pow+0x23e>
 8008e16:	2000      	movs	r0, #0
 8008e18:	b009      	add	sp, #36	; 0x24
 8008e1a:	ecbd 8b06 	vpop	{d8-d10}
 8008e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e22:	f000 bcf0 	b.w	8009806 <__math_oflow>
 8008e26:	429c      	cmp	r4, r3
 8008e28:	dbf2      	blt.n	8008e10 <__ieee754_pow+0x218>
 8008e2a:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <__ieee754_pow+0x25c>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	dd19      	ble.n	8008e64 <__ieee754_pow+0x26c>
 8008e30:	f1b9 0f00 	cmp.w	r9, #0
 8008e34:	dcef      	bgt.n	8008e16 <__ieee754_pow+0x21e>
 8008e36:	2000      	movs	r0, #0
 8008e38:	b009      	add	sp, #36	; 0x24
 8008e3a:	ecbd 8b06 	vpop	{d8-d10}
 8008e3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e42:	f000 bcd7 	b.w	80097f4 <__math_uflow>
 8008e46:	bf00      	nop
 8008e48:	fff00000 	.word	0xfff00000
 8008e4c:	7ff00000 	.word	0x7ff00000
 8008e50:	433fffff 	.word	0x433fffff
 8008e54:	3ff00000 	.word	0x3ff00000
 8008e58:	3fefffff 	.word	0x3fefffff
 8008e5c:	3fe00000 	.word	0x3fe00000
 8008e60:	41e00000 	.word	0x41e00000
 8008e64:	4b60      	ldr	r3, [pc, #384]	; (8008fe8 <__ieee754_pow+0x3f0>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	f7f7 f9da 	bl	8000220 <__aeabi_dsub>
 8008e6c:	a354      	add	r3, pc, #336	; (adr r3, 8008fc0 <__ieee754_pow+0x3c8>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	4604      	mov	r4, r0
 8008e74:	460d      	mov	r5, r1
 8008e76:	f7f7 fb8b 	bl	8000590 <__aeabi_dmul>
 8008e7a:	a353      	add	r3, pc, #332	; (adr r3, 8008fc8 <__ieee754_pow+0x3d0>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	4606      	mov	r6, r0
 8008e82:	460f      	mov	r7, r1
 8008e84:	4620      	mov	r0, r4
 8008e86:	4629      	mov	r1, r5
 8008e88:	f7f7 fb82 	bl	8000590 <__aeabi_dmul>
 8008e8c:	4b57      	ldr	r3, [pc, #348]	; (8008fec <__ieee754_pow+0x3f4>)
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	2200      	movs	r2, #0
 8008e94:	4620      	mov	r0, r4
 8008e96:	4629      	mov	r1, r5
 8008e98:	f7f7 fb7a 	bl	8000590 <__aeabi_dmul>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	a14b      	add	r1, pc, #300	; (adr r1, 8008fd0 <__ieee754_pow+0x3d8>)
 8008ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea6:	f7f7 f9bb 	bl	8000220 <__aeabi_dsub>
 8008eaa:	4622      	mov	r2, r4
 8008eac:	462b      	mov	r3, r5
 8008eae:	f7f7 fb6f 	bl	8000590 <__aeabi_dmul>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	494d      	ldr	r1, [pc, #308]	; (8008ff0 <__ieee754_pow+0x3f8>)
 8008eba:	f7f7 f9b1 	bl	8000220 <__aeabi_dsub>
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7f7 fb61 	bl	8000590 <__aeabi_dmul>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 fb5b 	bl	8000590 <__aeabi_dmul>
 8008eda:	a33f      	add	r3, pc, #252	; (adr r3, 8008fd8 <__ieee754_pow+0x3e0>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	f7f7 fb56 	bl	8000590 <__aeabi_dmul>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4650      	mov	r0, sl
 8008eea:	4659      	mov	r1, fp
 8008eec:	f7f7 f998 	bl	8000220 <__aeabi_dsub>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4680      	mov	r8, r0
 8008ef6:	4689      	mov	r9, r1
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 f992 	bl	8000224 <__adddf3>
 8008f00:	2000      	movs	r0, #0
 8008f02:	4632      	mov	r2, r6
 8008f04:	463b      	mov	r3, r7
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	f7f7 f989 	bl	8000220 <__aeabi_dsub>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4640      	mov	r0, r8
 8008f14:	4649      	mov	r1, r9
 8008f16:	f7f7 f983 	bl	8000220 <__aeabi_dsub>
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	9a06      	ldr	r2, [sp, #24]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4313      	orrs	r3, r2
 8008f22:	4682      	mov	sl, r0
 8008f24:	468b      	mov	fp, r1
 8008f26:	f040 81e7 	bne.w	80092f8 <__ieee754_pow+0x700>
 8008f2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008fe0 <__ieee754_pow+0x3e8>
 8008f2e:	eeb0 8a47 	vmov.f32	s16, s14
 8008f32:	eef0 8a67 	vmov.f32	s17, s15
 8008f36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	463b      	mov	r3, r7
 8008f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f44:	f7f7 f96c 	bl	8000220 <__aeabi_dsub>
 8008f48:	4622      	mov	r2, r4
 8008f4a:	462b      	mov	r3, r5
 8008f4c:	f7f7 fb20 	bl	8000590 <__aeabi_dmul>
 8008f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	f7f7 fb18 	bl	8000590 <__aeabi_dmul>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4640      	mov	r0, r8
 8008f66:	4649      	mov	r1, r9
 8008f68:	f7f7 f95c 	bl	8000224 <__adddf3>
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	463b      	mov	r3, r7
 8008f70:	4680      	mov	r8, r0
 8008f72:	4689      	mov	r9, r1
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 fb0a 	bl	8000590 <__aeabi_dmul>
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4604      	mov	r4, r0
 8008f80:	460d      	mov	r5, r1
 8008f82:	4602      	mov	r2, r0
 8008f84:	4649      	mov	r1, r9
 8008f86:	4640      	mov	r0, r8
 8008f88:	f7f7 f94c 	bl	8000224 <__adddf3>
 8008f8c:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <__ieee754_pow+0x3fc>)
 8008f8e:	4299      	cmp	r1, r3
 8008f90:	ec45 4b19 	vmov	d9, r4, r5
 8008f94:	4606      	mov	r6, r0
 8008f96:	460f      	mov	r7, r1
 8008f98:	468b      	mov	fp, r1
 8008f9a:	f340 82f1 	ble.w	8009580 <__ieee754_pow+0x988>
 8008f9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008fa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008fa6:	4303      	orrs	r3, r0
 8008fa8:	f000 81e4 	beq.w	8009374 <__ieee754_pow+0x77c>
 8008fac:	ec51 0b18 	vmov	r0, r1, d8
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f7f7 fd5e 	bl	8000a74 <__aeabi_dcmplt>
 8008fb8:	3800      	subs	r0, #0
 8008fba:	bf18      	it	ne
 8008fbc:	2001      	movne	r0, #1
 8008fbe:	e72b      	b.n	8008e18 <__ieee754_pow+0x220>
 8008fc0:	60000000 	.word	0x60000000
 8008fc4:	3ff71547 	.word	0x3ff71547
 8008fc8:	f85ddf44 	.word	0xf85ddf44
 8008fcc:	3e54ae0b 	.word	0x3e54ae0b
 8008fd0:	55555555 	.word	0x55555555
 8008fd4:	3fd55555 	.word	0x3fd55555
 8008fd8:	652b82fe 	.word	0x652b82fe
 8008fdc:	3ff71547 	.word	0x3ff71547
 8008fe0:	00000000 	.word	0x00000000
 8008fe4:	bff00000 	.word	0xbff00000
 8008fe8:	3ff00000 	.word	0x3ff00000
 8008fec:	3fd00000 	.word	0x3fd00000
 8008ff0:	3fe00000 	.word	0x3fe00000
 8008ff4:	408fffff 	.word	0x408fffff
 8008ff8:	4bd5      	ldr	r3, [pc, #852]	; (8009350 <__ieee754_pow+0x758>)
 8008ffa:	402b      	ands	r3, r5
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	b92b      	cbnz	r3, 800900c <__ieee754_pow+0x414>
 8009000:	4bd4      	ldr	r3, [pc, #848]	; (8009354 <__ieee754_pow+0x75c>)
 8009002:	f7f7 fac5 	bl	8000590 <__aeabi_dmul>
 8009006:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800900a:	460c      	mov	r4, r1
 800900c:	1523      	asrs	r3, r4, #20
 800900e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009012:	4413      	add	r3, r2
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	4bd0      	ldr	r3, [pc, #832]	; (8009358 <__ieee754_pow+0x760>)
 8009018:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800901c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009020:	429c      	cmp	r4, r3
 8009022:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009026:	dd08      	ble.n	800903a <__ieee754_pow+0x442>
 8009028:	4bcc      	ldr	r3, [pc, #816]	; (800935c <__ieee754_pow+0x764>)
 800902a:	429c      	cmp	r4, r3
 800902c:	f340 8162 	ble.w	80092f4 <__ieee754_pow+0x6fc>
 8009030:	9b05      	ldr	r3, [sp, #20]
 8009032:	3301      	adds	r3, #1
 8009034:	9305      	str	r3, [sp, #20]
 8009036:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800903a:	2400      	movs	r4, #0
 800903c:	00e3      	lsls	r3, r4, #3
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	4bc7      	ldr	r3, [pc, #796]	; (8009360 <__ieee754_pow+0x768>)
 8009042:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009046:	ed93 7b00 	vldr	d7, [r3]
 800904a:	4629      	mov	r1, r5
 800904c:	ec53 2b17 	vmov	r2, r3, d7
 8009050:	eeb0 9a47 	vmov.f32	s18, s14
 8009054:	eef0 9a67 	vmov.f32	s19, s15
 8009058:	4682      	mov	sl, r0
 800905a:	f7f7 f8e1 	bl	8000220 <__aeabi_dsub>
 800905e:	4652      	mov	r2, sl
 8009060:	4606      	mov	r6, r0
 8009062:	460f      	mov	r7, r1
 8009064:	462b      	mov	r3, r5
 8009066:	ec51 0b19 	vmov	r0, r1, d9
 800906a:	f7f7 f8db 	bl	8000224 <__adddf3>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	2000      	movs	r0, #0
 8009074:	49bb      	ldr	r1, [pc, #748]	; (8009364 <__ieee754_pow+0x76c>)
 8009076:	f7f7 fbb5 	bl	80007e4 <__aeabi_ddiv>
 800907a:	ec41 0b1a 	vmov	d10, r0, r1
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4630      	mov	r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	f7f7 fa83 	bl	8000590 <__aeabi_dmul>
 800908a:	2300      	movs	r3, #0
 800908c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009090:	9302      	str	r3, [sp, #8]
 8009092:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009096:	46ab      	mov	fp, r5
 8009098:	106d      	asrs	r5, r5, #1
 800909a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800909e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80090a2:	ec41 0b18 	vmov	d8, r0, r1
 80090a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80090aa:	2200      	movs	r2, #0
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	4614      	mov	r4, r2
 80090b2:	461d      	mov	r5, r3
 80090b4:	f7f7 fa6c 	bl	8000590 <__aeabi_dmul>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 f8ae 	bl	8000220 <__aeabi_dsub>
 80090c4:	ec53 2b19 	vmov	r2, r3, d9
 80090c8:	4606      	mov	r6, r0
 80090ca:	460f      	mov	r7, r1
 80090cc:	4620      	mov	r0, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	f7f7 f8a6 	bl	8000220 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4650      	mov	r0, sl
 80090da:	4659      	mov	r1, fp
 80090dc:	f7f7 f8a0 	bl	8000220 <__aeabi_dsub>
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	f7f7 fa54 	bl	8000590 <__aeabi_dmul>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4630      	mov	r0, r6
 80090ee:	4639      	mov	r1, r7
 80090f0:	f7f7 f896 	bl	8000220 <__aeabi_dsub>
 80090f4:	ec53 2b1a 	vmov	r2, r3, d10
 80090f8:	f7f7 fa4a 	bl	8000590 <__aeabi_dmul>
 80090fc:	ec53 2b18 	vmov	r2, r3, d8
 8009100:	ec41 0b19 	vmov	d9, r0, r1
 8009104:	ec51 0b18 	vmov	r0, r1, d8
 8009108:	f7f7 fa42 	bl	8000590 <__aeabi_dmul>
 800910c:	a37c      	add	r3, pc, #496	; (adr r3, 8009300 <__ieee754_pow+0x708>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	4604      	mov	r4, r0
 8009114:	460d      	mov	r5, r1
 8009116:	f7f7 fa3b 	bl	8000590 <__aeabi_dmul>
 800911a:	a37b      	add	r3, pc, #492	; (adr r3, 8009308 <__ieee754_pow+0x710>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 f880 	bl	8000224 <__adddf3>
 8009124:	4622      	mov	r2, r4
 8009126:	462b      	mov	r3, r5
 8009128:	f7f7 fa32 	bl	8000590 <__aeabi_dmul>
 800912c:	a378      	add	r3, pc, #480	; (adr r3, 8009310 <__ieee754_pow+0x718>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 f877 	bl	8000224 <__adddf3>
 8009136:	4622      	mov	r2, r4
 8009138:	462b      	mov	r3, r5
 800913a:	f7f7 fa29 	bl	8000590 <__aeabi_dmul>
 800913e:	a376      	add	r3, pc, #472	; (adr r3, 8009318 <__ieee754_pow+0x720>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 f86e 	bl	8000224 <__adddf3>
 8009148:	4622      	mov	r2, r4
 800914a:	462b      	mov	r3, r5
 800914c:	f7f7 fa20 	bl	8000590 <__aeabi_dmul>
 8009150:	a373      	add	r3, pc, #460	; (adr r3, 8009320 <__ieee754_pow+0x728>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 f865 	bl	8000224 <__adddf3>
 800915a:	4622      	mov	r2, r4
 800915c:	462b      	mov	r3, r5
 800915e:	f7f7 fa17 	bl	8000590 <__aeabi_dmul>
 8009162:	a371      	add	r3, pc, #452	; (adr r3, 8009328 <__ieee754_pow+0x730>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 f85c 	bl	8000224 <__adddf3>
 800916c:	4622      	mov	r2, r4
 800916e:	4606      	mov	r6, r0
 8009170:	460f      	mov	r7, r1
 8009172:	462b      	mov	r3, r5
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7f7 fa0a 	bl	8000590 <__aeabi_dmul>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4630      	mov	r0, r6
 8009182:	4639      	mov	r1, r7
 8009184:	f7f7 fa04 	bl	8000590 <__aeabi_dmul>
 8009188:	4642      	mov	r2, r8
 800918a:	4604      	mov	r4, r0
 800918c:	460d      	mov	r5, r1
 800918e:	464b      	mov	r3, r9
 8009190:	ec51 0b18 	vmov	r0, r1, d8
 8009194:	f7f7 f846 	bl	8000224 <__adddf3>
 8009198:	ec53 2b19 	vmov	r2, r3, d9
 800919c:	f7f7 f9f8 	bl	8000590 <__aeabi_dmul>
 80091a0:	4622      	mov	r2, r4
 80091a2:	462b      	mov	r3, r5
 80091a4:	f7f7 f83e 	bl	8000224 <__adddf3>
 80091a8:	4642      	mov	r2, r8
 80091aa:	4682      	mov	sl, r0
 80091ac:	468b      	mov	fp, r1
 80091ae:	464b      	mov	r3, r9
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 f9ec 	bl	8000590 <__aeabi_dmul>
 80091b8:	4b6b      	ldr	r3, [pc, #428]	; (8009368 <__ieee754_pow+0x770>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	f7f7 f830 	bl	8000224 <__adddf3>
 80091c4:	4652      	mov	r2, sl
 80091c6:	465b      	mov	r3, fp
 80091c8:	f7f7 f82c 	bl	8000224 <__adddf3>
 80091cc:	2000      	movs	r0, #0
 80091ce:	4604      	mov	r4, r0
 80091d0:	460d      	mov	r5, r1
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4640      	mov	r0, r8
 80091d8:	4649      	mov	r1, r9
 80091da:	f7f7 f9d9 	bl	8000590 <__aeabi_dmul>
 80091de:	4b62      	ldr	r3, [pc, #392]	; (8009368 <__ieee754_pow+0x770>)
 80091e0:	4680      	mov	r8, r0
 80091e2:	4689      	mov	r9, r1
 80091e4:	2200      	movs	r2, #0
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 f819 	bl	8000220 <__aeabi_dsub>
 80091ee:	4632      	mov	r2, r6
 80091f0:	463b      	mov	r3, r7
 80091f2:	f7f7 f815 	bl	8000220 <__aeabi_dsub>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4650      	mov	r0, sl
 80091fc:	4659      	mov	r1, fp
 80091fe:	f7f7 f80f 	bl	8000220 <__aeabi_dsub>
 8009202:	ec53 2b18 	vmov	r2, r3, d8
 8009206:	f7f7 f9c3 	bl	8000590 <__aeabi_dmul>
 800920a:	4622      	mov	r2, r4
 800920c:	4606      	mov	r6, r0
 800920e:	460f      	mov	r7, r1
 8009210:	462b      	mov	r3, r5
 8009212:	ec51 0b19 	vmov	r0, r1, d9
 8009216:	f7f7 f9bb 	bl	8000590 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4630      	mov	r0, r6
 8009220:	4639      	mov	r1, r7
 8009222:	f7f6 ffff 	bl	8000224 <__adddf3>
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f6 fff7 	bl	8000224 <__adddf3>
 8009236:	a33e      	add	r3, pc, #248	; (adr r3, 8009330 <__ieee754_pow+0x738>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	2000      	movs	r0, #0
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	f7f7 f9a5 	bl	8000590 <__aeabi_dmul>
 8009246:	4642      	mov	r2, r8
 8009248:	ec41 0b18 	vmov	d8, r0, r1
 800924c:	464b      	mov	r3, r9
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f6 ffe5 	bl	8000220 <__aeabi_dsub>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4630      	mov	r0, r6
 800925c:	4639      	mov	r1, r7
 800925e:	f7f6 ffdf 	bl	8000220 <__aeabi_dsub>
 8009262:	a335      	add	r3, pc, #212	; (adr r3, 8009338 <__ieee754_pow+0x740>)
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f7f7 f992 	bl	8000590 <__aeabi_dmul>
 800926c:	a334      	add	r3, pc, #208	; (adr r3, 8009340 <__ieee754_pow+0x748>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	4606      	mov	r6, r0
 8009274:	460f      	mov	r7, r1
 8009276:	4620      	mov	r0, r4
 8009278:	4629      	mov	r1, r5
 800927a:	f7f7 f989 	bl	8000590 <__aeabi_dmul>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4630      	mov	r0, r6
 8009284:	4639      	mov	r1, r7
 8009286:	f7f6 ffcd 	bl	8000224 <__adddf3>
 800928a:	9a07      	ldr	r2, [sp, #28]
 800928c:	4b37      	ldr	r3, [pc, #220]	; (800936c <__ieee754_pow+0x774>)
 800928e:	4413      	add	r3, r2
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f6 ffc6 	bl	8000224 <__adddf3>
 8009298:	4682      	mov	sl, r0
 800929a:	9805      	ldr	r0, [sp, #20]
 800929c:	468b      	mov	fp, r1
 800929e:	f7f7 f90d 	bl	80004bc <__aeabi_i2d>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	4b32      	ldr	r3, [pc, #200]	; (8009370 <__ieee754_pow+0x778>)
 80092a6:	4413      	add	r3, r2
 80092a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092ac:	4606      	mov	r6, r0
 80092ae:	460f      	mov	r7, r1
 80092b0:	4652      	mov	r2, sl
 80092b2:	465b      	mov	r3, fp
 80092b4:	ec51 0b18 	vmov	r0, r1, d8
 80092b8:	f7f6 ffb4 	bl	8000224 <__adddf3>
 80092bc:	4642      	mov	r2, r8
 80092be:	464b      	mov	r3, r9
 80092c0:	f7f6 ffb0 	bl	8000224 <__adddf3>
 80092c4:	4632      	mov	r2, r6
 80092c6:	463b      	mov	r3, r7
 80092c8:	f7f6 ffac 	bl	8000224 <__adddf3>
 80092cc:	2000      	movs	r0, #0
 80092ce:	4632      	mov	r2, r6
 80092d0:	463b      	mov	r3, r7
 80092d2:	4604      	mov	r4, r0
 80092d4:	460d      	mov	r5, r1
 80092d6:	f7f6 ffa3 	bl	8000220 <__aeabi_dsub>
 80092da:	4642      	mov	r2, r8
 80092dc:	464b      	mov	r3, r9
 80092de:	f7f6 ff9f 	bl	8000220 <__aeabi_dsub>
 80092e2:	ec53 2b18 	vmov	r2, r3, d8
 80092e6:	f7f6 ff9b 	bl	8000220 <__aeabi_dsub>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4650      	mov	r0, sl
 80092f0:	4659      	mov	r1, fp
 80092f2:	e610      	b.n	8008f16 <__ieee754_pow+0x31e>
 80092f4:	2401      	movs	r4, #1
 80092f6:	e6a1      	b.n	800903c <__ieee754_pow+0x444>
 80092f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009348 <__ieee754_pow+0x750>
 80092fc:	e617      	b.n	8008f2e <__ieee754_pow+0x336>
 80092fe:	bf00      	nop
 8009300:	4a454eef 	.word	0x4a454eef
 8009304:	3fca7e28 	.word	0x3fca7e28
 8009308:	93c9db65 	.word	0x93c9db65
 800930c:	3fcd864a 	.word	0x3fcd864a
 8009310:	a91d4101 	.word	0xa91d4101
 8009314:	3fd17460 	.word	0x3fd17460
 8009318:	518f264d 	.word	0x518f264d
 800931c:	3fd55555 	.word	0x3fd55555
 8009320:	db6fabff 	.word	0xdb6fabff
 8009324:	3fdb6db6 	.word	0x3fdb6db6
 8009328:	33333303 	.word	0x33333303
 800932c:	3fe33333 	.word	0x3fe33333
 8009330:	e0000000 	.word	0xe0000000
 8009334:	3feec709 	.word	0x3feec709
 8009338:	dc3a03fd 	.word	0xdc3a03fd
 800933c:	3feec709 	.word	0x3feec709
 8009340:	145b01f5 	.word	0x145b01f5
 8009344:	be3e2fe0 	.word	0xbe3e2fe0
 8009348:	00000000 	.word	0x00000000
 800934c:	3ff00000 	.word	0x3ff00000
 8009350:	7ff00000 	.word	0x7ff00000
 8009354:	43400000 	.word	0x43400000
 8009358:	0003988e 	.word	0x0003988e
 800935c:	000bb679 	.word	0x000bb679
 8009360:	08009a98 	.word	0x08009a98
 8009364:	3ff00000 	.word	0x3ff00000
 8009368:	40080000 	.word	0x40080000
 800936c:	08009ab8 	.word	0x08009ab8
 8009370:	08009aa8 	.word	0x08009aa8
 8009374:	a3b5      	add	r3, pc, #724	; (adr r3, 800964c <__ieee754_pow+0xa54>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	4640      	mov	r0, r8
 800937c:	4649      	mov	r1, r9
 800937e:	f7f6 ff51 	bl	8000224 <__adddf3>
 8009382:	4622      	mov	r2, r4
 8009384:	ec41 0b1a 	vmov	d10, r0, r1
 8009388:	462b      	mov	r3, r5
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	f7f6 ff47 	bl	8000220 <__aeabi_dsub>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	ec51 0b1a 	vmov	r0, r1, d10
 800939a:	f7f7 fb89 	bl	8000ab0 <__aeabi_dcmpgt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	f47f ae04 	bne.w	8008fac <__ieee754_pow+0x3b4>
 80093a4:	4aa4      	ldr	r2, [pc, #656]	; (8009638 <__ieee754_pow+0xa40>)
 80093a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093aa:	4293      	cmp	r3, r2
 80093ac:	f340 8108 	ble.w	80095c0 <__ieee754_pow+0x9c8>
 80093b0:	151b      	asrs	r3, r3, #20
 80093b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80093b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80093ba:	fa4a f303 	asr.w	r3, sl, r3
 80093be:	445b      	add	r3, fp
 80093c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80093c4:	4e9d      	ldr	r6, [pc, #628]	; (800963c <__ieee754_pow+0xa44>)
 80093c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80093ca:	4116      	asrs	r6, r2
 80093cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80093d0:	2000      	movs	r0, #0
 80093d2:	ea23 0106 	bic.w	r1, r3, r6
 80093d6:	f1c2 0214 	rsb	r2, r2, #20
 80093da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80093de:	fa4a fa02 	asr.w	sl, sl, r2
 80093e2:	f1bb 0f00 	cmp.w	fp, #0
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	4620      	mov	r0, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	bfb8      	it	lt
 80093f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80093f4:	f7f6 ff14 	bl	8000220 <__aeabi_dsub>
 80093f8:	ec41 0b19 	vmov	d9, r0, r1
 80093fc:	4642      	mov	r2, r8
 80093fe:	464b      	mov	r3, r9
 8009400:	ec51 0b19 	vmov	r0, r1, d9
 8009404:	f7f6 ff0e 	bl	8000224 <__adddf3>
 8009408:	a37b      	add	r3, pc, #492	; (adr r3, 80095f8 <__ieee754_pow+0xa00>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	2000      	movs	r0, #0
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	f7f7 f8bc 	bl	8000590 <__aeabi_dmul>
 8009418:	ec53 2b19 	vmov	r2, r3, d9
 800941c:	4606      	mov	r6, r0
 800941e:	460f      	mov	r7, r1
 8009420:	4620      	mov	r0, r4
 8009422:	4629      	mov	r1, r5
 8009424:	f7f6 fefc 	bl	8000220 <__aeabi_dsub>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f6 fef6 	bl	8000220 <__aeabi_dsub>
 8009434:	a372      	add	r3, pc, #456	; (adr r3, 8009600 <__ieee754_pow+0xa08>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f7 f8a9 	bl	8000590 <__aeabi_dmul>
 800943e:	a372      	add	r3, pc, #456	; (adr r3, 8009608 <__ieee754_pow+0xa10>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	4680      	mov	r8, r0
 8009446:	4689      	mov	r9, r1
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	f7f7 f8a0 	bl	8000590 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4640      	mov	r0, r8
 8009456:	4649      	mov	r1, r9
 8009458:	f7f6 fee4 	bl	8000224 <__adddf3>
 800945c:	4604      	mov	r4, r0
 800945e:	460d      	mov	r5, r1
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	f7f6 fedc 	bl	8000224 <__adddf3>
 800946c:	4632      	mov	r2, r6
 800946e:	463b      	mov	r3, r7
 8009470:	4680      	mov	r8, r0
 8009472:	4689      	mov	r9, r1
 8009474:	f7f6 fed4 	bl	8000220 <__aeabi_dsub>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4620      	mov	r0, r4
 800947e:	4629      	mov	r1, r5
 8009480:	f7f6 fece 	bl	8000220 <__aeabi_dsub>
 8009484:	4642      	mov	r2, r8
 8009486:	4606      	mov	r6, r0
 8009488:	460f      	mov	r7, r1
 800948a:	464b      	mov	r3, r9
 800948c:	4640      	mov	r0, r8
 800948e:	4649      	mov	r1, r9
 8009490:	f7f7 f87e 	bl	8000590 <__aeabi_dmul>
 8009494:	a35e      	add	r3, pc, #376	; (adr r3, 8009610 <__ieee754_pow+0xa18>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	4604      	mov	r4, r0
 800949c:	460d      	mov	r5, r1
 800949e:	f7f7 f877 	bl	8000590 <__aeabi_dmul>
 80094a2:	a35d      	add	r3, pc, #372	; (adr r3, 8009618 <__ieee754_pow+0xa20>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f6 feba 	bl	8000220 <__aeabi_dsub>
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	f7f7 f86e 	bl	8000590 <__aeabi_dmul>
 80094b4:	a35a      	add	r3, pc, #360	; (adr r3, 8009620 <__ieee754_pow+0xa28>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f7f6 feb3 	bl	8000224 <__adddf3>
 80094be:	4622      	mov	r2, r4
 80094c0:	462b      	mov	r3, r5
 80094c2:	f7f7 f865 	bl	8000590 <__aeabi_dmul>
 80094c6:	a358      	add	r3, pc, #352	; (adr r3, 8009628 <__ieee754_pow+0xa30>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f7f6 fea8 	bl	8000220 <__aeabi_dsub>
 80094d0:	4622      	mov	r2, r4
 80094d2:	462b      	mov	r3, r5
 80094d4:	f7f7 f85c 	bl	8000590 <__aeabi_dmul>
 80094d8:	a355      	add	r3, pc, #340	; (adr r3, 8009630 <__ieee754_pow+0xa38>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f7f6 fea1 	bl	8000224 <__adddf3>
 80094e2:	4622      	mov	r2, r4
 80094e4:	462b      	mov	r3, r5
 80094e6:	f7f7 f853 	bl	8000590 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f6 fe95 	bl	8000220 <__aeabi_dsub>
 80094f6:	4604      	mov	r4, r0
 80094f8:	460d      	mov	r5, r1
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	f7f7 f845 	bl	8000590 <__aeabi_dmul>
 8009506:	2200      	movs	r2, #0
 8009508:	ec41 0b19 	vmov	d9, r0, r1
 800950c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009510:	4620      	mov	r0, r4
 8009512:	4629      	mov	r1, r5
 8009514:	f7f6 fe84 	bl	8000220 <__aeabi_dsub>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	ec51 0b19 	vmov	r0, r1, d9
 8009520:	f7f7 f960 	bl	80007e4 <__aeabi_ddiv>
 8009524:	4632      	mov	r2, r6
 8009526:	4604      	mov	r4, r0
 8009528:	460d      	mov	r5, r1
 800952a:	463b      	mov	r3, r7
 800952c:	4640      	mov	r0, r8
 800952e:	4649      	mov	r1, r9
 8009530:	f7f7 f82e 	bl	8000590 <__aeabi_dmul>
 8009534:	4632      	mov	r2, r6
 8009536:	463b      	mov	r3, r7
 8009538:	f7f6 fe74 	bl	8000224 <__adddf3>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4620      	mov	r0, r4
 8009542:	4629      	mov	r1, r5
 8009544:	f7f6 fe6c 	bl	8000220 <__aeabi_dsub>
 8009548:	4642      	mov	r2, r8
 800954a:	464b      	mov	r3, r9
 800954c:	f7f6 fe68 	bl	8000220 <__aeabi_dsub>
 8009550:	460b      	mov	r3, r1
 8009552:	4602      	mov	r2, r0
 8009554:	493a      	ldr	r1, [pc, #232]	; (8009640 <__ieee754_pow+0xa48>)
 8009556:	2000      	movs	r0, #0
 8009558:	f7f6 fe62 	bl	8000220 <__aeabi_dsub>
 800955c:	ec41 0b10 	vmov	d0, r0, r1
 8009560:	ee10 3a90 	vmov	r3, s1
 8009564:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800956c:	da2b      	bge.n	80095c6 <__ieee754_pow+0x9ce>
 800956e:	4650      	mov	r0, sl
 8009570:	f000 f966 	bl	8009840 <scalbn>
 8009574:	ec51 0b10 	vmov	r0, r1, d0
 8009578:	ec53 2b18 	vmov	r2, r3, d8
 800957c:	f7ff bbed 	b.w	8008d5a <__ieee754_pow+0x162>
 8009580:	4b30      	ldr	r3, [pc, #192]	; (8009644 <__ieee754_pow+0xa4c>)
 8009582:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009586:	429e      	cmp	r6, r3
 8009588:	f77f af0c 	ble.w	80093a4 <__ieee754_pow+0x7ac>
 800958c:	4b2e      	ldr	r3, [pc, #184]	; (8009648 <__ieee754_pow+0xa50>)
 800958e:	440b      	add	r3, r1
 8009590:	4303      	orrs	r3, r0
 8009592:	d009      	beq.n	80095a8 <__ieee754_pow+0x9b0>
 8009594:	ec51 0b18 	vmov	r0, r1, d8
 8009598:	2200      	movs	r2, #0
 800959a:	2300      	movs	r3, #0
 800959c:	f7f7 fa6a 	bl	8000a74 <__aeabi_dcmplt>
 80095a0:	3800      	subs	r0, #0
 80095a2:	bf18      	it	ne
 80095a4:	2001      	movne	r0, #1
 80095a6:	e447      	b.n	8008e38 <__ieee754_pow+0x240>
 80095a8:	4622      	mov	r2, r4
 80095aa:	462b      	mov	r3, r5
 80095ac:	f7f6 fe38 	bl	8000220 <__aeabi_dsub>
 80095b0:	4642      	mov	r2, r8
 80095b2:	464b      	mov	r3, r9
 80095b4:	f7f7 fa72 	bl	8000a9c <__aeabi_dcmpge>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f43f aef3 	beq.w	80093a4 <__ieee754_pow+0x7ac>
 80095be:	e7e9      	b.n	8009594 <__ieee754_pow+0x99c>
 80095c0:	f04f 0a00 	mov.w	sl, #0
 80095c4:	e71a      	b.n	80093fc <__ieee754_pow+0x804>
 80095c6:	ec51 0b10 	vmov	r0, r1, d0
 80095ca:	4619      	mov	r1, r3
 80095cc:	e7d4      	b.n	8009578 <__ieee754_pow+0x980>
 80095ce:	491c      	ldr	r1, [pc, #112]	; (8009640 <__ieee754_pow+0xa48>)
 80095d0:	2000      	movs	r0, #0
 80095d2:	f7ff bb30 	b.w	8008c36 <__ieee754_pow+0x3e>
 80095d6:	2000      	movs	r0, #0
 80095d8:	2100      	movs	r1, #0
 80095da:	f7ff bb2c 	b.w	8008c36 <__ieee754_pow+0x3e>
 80095de:	4630      	mov	r0, r6
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7ff bb28 	b.w	8008c36 <__ieee754_pow+0x3e>
 80095e6:	9204      	str	r2, [sp, #16]
 80095e8:	f7ff bb7a 	b.w	8008ce0 <__ieee754_pow+0xe8>
 80095ec:	2300      	movs	r3, #0
 80095ee:	f7ff bb64 	b.w	8008cba <__ieee754_pow+0xc2>
 80095f2:	bf00      	nop
 80095f4:	f3af 8000 	nop.w
 80095f8:	00000000 	.word	0x00000000
 80095fc:	3fe62e43 	.word	0x3fe62e43
 8009600:	fefa39ef 	.word	0xfefa39ef
 8009604:	3fe62e42 	.word	0x3fe62e42
 8009608:	0ca86c39 	.word	0x0ca86c39
 800960c:	be205c61 	.word	0xbe205c61
 8009610:	72bea4d0 	.word	0x72bea4d0
 8009614:	3e663769 	.word	0x3e663769
 8009618:	c5d26bf1 	.word	0xc5d26bf1
 800961c:	3ebbbd41 	.word	0x3ebbbd41
 8009620:	af25de2c 	.word	0xaf25de2c
 8009624:	3f11566a 	.word	0x3f11566a
 8009628:	16bebd93 	.word	0x16bebd93
 800962c:	3f66c16c 	.word	0x3f66c16c
 8009630:	5555553e 	.word	0x5555553e
 8009634:	3fc55555 	.word	0x3fc55555
 8009638:	3fe00000 	.word	0x3fe00000
 800963c:	000fffff 	.word	0x000fffff
 8009640:	3ff00000 	.word	0x3ff00000
 8009644:	4090cbff 	.word	0x4090cbff
 8009648:	3f6f3400 	.word	0x3f6f3400
 800964c:	652b82fe 	.word	0x652b82fe
 8009650:	3c971547 	.word	0x3c971547

08009654 <__ieee754_sqrt>:
 8009654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	ec55 4b10 	vmov	r4, r5, d0
 800965c:	4e55      	ldr	r6, [pc, #340]	; (80097b4 <__ieee754_sqrt+0x160>)
 800965e:	43ae      	bics	r6, r5
 8009660:	ee10 0a10 	vmov	r0, s0
 8009664:	ee10 3a10 	vmov	r3, s0
 8009668:	462a      	mov	r2, r5
 800966a:	4629      	mov	r1, r5
 800966c:	d110      	bne.n	8009690 <__ieee754_sqrt+0x3c>
 800966e:	ee10 2a10 	vmov	r2, s0
 8009672:	462b      	mov	r3, r5
 8009674:	f7f6 ff8c 	bl	8000590 <__aeabi_dmul>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f7f6 fdd0 	bl	8000224 <__adddf3>
 8009684:	4604      	mov	r4, r0
 8009686:	460d      	mov	r5, r1
 8009688:	ec45 4b10 	vmov	d0, r4, r5
 800968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009690:	2d00      	cmp	r5, #0
 8009692:	dc10      	bgt.n	80096b6 <__ieee754_sqrt+0x62>
 8009694:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009698:	4330      	orrs	r0, r6
 800969a:	d0f5      	beq.n	8009688 <__ieee754_sqrt+0x34>
 800969c:	b15d      	cbz	r5, 80096b6 <__ieee754_sqrt+0x62>
 800969e:	ee10 2a10 	vmov	r2, s0
 80096a2:	462b      	mov	r3, r5
 80096a4:	ee10 0a10 	vmov	r0, s0
 80096a8:	f7f6 fdba 	bl	8000220 <__aeabi_dsub>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	f7f7 f898 	bl	80007e4 <__aeabi_ddiv>
 80096b4:	e7e6      	b.n	8009684 <__ieee754_sqrt+0x30>
 80096b6:	1512      	asrs	r2, r2, #20
 80096b8:	d074      	beq.n	80097a4 <__ieee754_sqrt+0x150>
 80096ba:	07d4      	lsls	r4, r2, #31
 80096bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80096c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80096c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80096c8:	bf5e      	ittt	pl
 80096ca:	0fda      	lsrpl	r2, r3, #31
 80096cc:	005b      	lslpl	r3, r3, #1
 80096ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80096d2:	2400      	movs	r4, #0
 80096d4:	0fda      	lsrs	r2, r3, #31
 80096d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80096da:	107f      	asrs	r7, r7, #1
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	2516      	movs	r5, #22
 80096e0:	4620      	mov	r0, r4
 80096e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80096e6:	1886      	adds	r6, r0, r2
 80096e8:	428e      	cmp	r6, r1
 80096ea:	bfde      	ittt	le
 80096ec:	1b89      	suble	r1, r1, r6
 80096ee:	18b0      	addle	r0, r6, r2
 80096f0:	18a4      	addle	r4, r4, r2
 80096f2:	0049      	lsls	r1, r1, #1
 80096f4:	3d01      	subs	r5, #1
 80096f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80096fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80096fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009702:	d1f0      	bne.n	80096e6 <__ieee754_sqrt+0x92>
 8009704:	462a      	mov	r2, r5
 8009706:	f04f 0e20 	mov.w	lr, #32
 800970a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800970e:	4281      	cmp	r1, r0
 8009710:	eb06 0c05 	add.w	ip, r6, r5
 8009714:	dc02      	bgt.n	800971c <__ieee754_sqrt+0xc8>
 8009716:	d113      	bne.n	8009740 <__ieee754_sqrt+0xec>
 8009718:	459c      	cmp	ip, r3
 800971a:	d811      	bhi.n	8009740 <__ieee754_sqrt+0xec>
 800971c:	f1bc 0f00 	cmp.w	ip, #0
 8009720:	eb0c 0506 	add.w	r5, ip, r6
 8009724:	da43      	bge.n	80097ae <__ieee754_sqrt+0x15a>
 8009726:	2d00      	cmp	r5, #0
 8009728:	db41      	blt.n	80097ae <__ieee754_sqrt+0x15a>
 800972a:	f100 0801 	add.w	r8, r0, #1
 800972e:	1a09      	subs	r1, r1, r0
 8009730:	459c      	cmp	ip, r3
 8009732:	bf88      	it	hi
 8009734:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009738:	eba3 030c 	sub.w	r3, r3, ip
 800973c:	4432      	add	r2, r6
 800973e:	4640      	mov	r0, r8
 8009740:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009744:	f1be 0e01 	subs.w	lr, lr, #1
 8009748:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800974c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009750:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009754:	d1db      	bne.n	800970e <__ieee754_sqrt+0xba>
 8009756:	430b      	orrs	r3, r1
 8009758:	d006      	beq.n	8009768 <__ieee754_sqrt+0x114>
 800975a:	1c50      	adds	r0, r2, #1
 800975c:	bf13      	iteet	ne
 800975e:	3201      	addne	r2, #1
 8009760:	3401      	addeq	r4, #1
 8009762:	4672      	moveq	r2, lr
 8009764:	f022 0201 	bicne.w	r2, r2, #1
 8009768:	1063      	asrs	r3, r4, #1
 800976a:	0852      	lsrs	r2, r2, #1
 800976c:	07e1      	lsls	r1, r4, #31
 800976e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009772:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009776:	bf48      	it	mi
 8009778:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800977c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009780:	4614      	mov	r4, r2
 8009782:	e781      	b.n	8009688 <__ieee754_sqrt+0x34>
 8009784:	0ad9      	lsrs	r1, r3, #11
 8009786:	3815      	subs	r0, #21
 8009788:	055b      	lsls	r3, r3, #21
 800978a:	2900      	cmp	r1, #0
 800978c:	d0fa      	beq.n	8009784 <__ieee754_sqrt+0x130>
 800978e:	02cd      	lsls	r5, r1, #11
 8009790:	d50a      	bpl.n	80097a8 <__ieee754_sqrt+0x154>
 8009792:	f1c2 0420 	rsb	r4, r2, #32
 8009796:	fa23 f404 	lsr.w	r4, r3, r4
 800979a:	1e55      	subs	r5, r2, #1
 800979c:	4093      	lsls	r3, r2
 800979e:	4321      	orrs	r1, r4
 80097a0:	1b42      	subs	r2, r0, r5
 80097a2:	e78a      	b.n	80096ba <__ieee754_sqrt+0x66>
 80097a4:	4610      	mov	r0, r2
 80097a6:	e7f0      	b.n	800978a <__ieee754_sqrt+0x136>
 80097a8:	0049      	lsls	r1, r1, #1
 80097aa:	3201      	adds	r2, #1
 80097ac:	e7ef      	b.n	800978e <__ieee754_sqrt+0x13a>
 80097ae:	4680      	mov	r8, r0
 80097b0:	e7bd      	b.n	800972e <__ieee754_sqrt+0xda>
 80097b2:	bf00      	nop
 80097b4:	7ff00000 	.word	0x7ff00000

080097b8 <with_errno>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	4604      	mov	r4, r0
 80097bc:	460d      	mov	r5, r1
 80097be:	4616      	mov	r6, r2
 80097c0:	f7ff f8ea 	bl	8008998 <__errno>
 80097c4:	4629      	mov	r1, r5
 80097c6:	6006      	str	r6, [r0, #0]
 80097c8:	4620      	mov	r0, r4
 80097ca:	bd70      	pop	{r4, r5, r6, pc}

080097cc <xflow>:
 80097cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ce:	4614      	mov	r4, r2
 80097d0:	461d      	mov	r5, r3
 80097d2:	b108      	cbz	r0, 80097d8 <xflow+0xc>
 80097d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80097d8:	e9cd 2300 	strd	r2, r3, [sp]
 80097dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097e0:	4620      	mov	r0, r4
 80097e2:	4629      	mov	r1, r5
 80097e4:	f7f6 fed4 	bl	8000590 <__aeabi_dmul>
 80097e8:	2222      	movs	r2, #34	; 0x22
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097f0:	f7ff bfe2 	b.w	80097b8 <with_errno>

080097f4 <__math_uflow>:
 80097f4:	b508      	push	{r3, lr}
 80097f6:	2200      	movs	r2, #0
 80097f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097fc:	f7ff ffe6 	bl	80097cc <xflow>
 8009800:	ec41 0b10 	vmov	d0, r0, r1
 8009804:	bd08      	pop	{r3, pc}

08009806 <__math_oflow>:
 8009806:	b508      	push	{r3, lr}
 8009808:	2200      	movs	r2, #0
 800980a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800980e:	f7ff ffdd 	bl	80097cc <xflow>
 8009812:	ec41 0b10 	vmov	d0, r0, r1
 8009816:	bd08      	pop	{r3, pc}

08009818 <fabs>:
 8009818:	ec51 0b10 	vmov	r0, r1, d0
 800981c:	ee10 2a10 	vmov	r2, s0
 8009820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009824:	ec43 2b10 	vmov	d0, r2, r3
 8009828:	4770      	bx	lr

0800982a <finite>:
 800982a:	b082      	sub	sp, #8
 800982c:	ed8d 0b00 	vstr	d0, [sp]
 8009830:	9801      	ldr	r0, [sp, #4]
 8009832:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009836:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800983a:	0fc0      	lsrs	r0, r0, #31
 800983c:	b002      	add	sp, #8
 800983e:	4770      	bx	lr

08009840 <scalbn>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	ec55 4b10 	vmov	r4, r5, d0
 8009846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800984a:	4606      	mov	r6, r0
 800984c:	462b      	mov	r3, r5
 800984e:	b99a      	cbnz	r2, 8009878 <scalbn+0x38>
 8009850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009854:	4323      	orrs	r3, r4
 8009856:	d036      	beq.n	80098c6 <scalbn+0x86>
 8009858:	4b39      	ldr	r3, [pc, #228]	; (8009940 <scalbn+0x100>)
 800985a:	4629      	mov	r1, r5
 800985c:	ee10 0a10 	vmov	r0, s0
 8009860:	2200      	movs	r2, #0
 8009862:	f7f6 fe95 	bl	8000590 <__aeabi_dmul>
 8009866:	4b37      	ldr	r3, [pc, #220]	; (8009944 <scalbn+0x104>)
 8009868:	429e      	cmp	r6, r3
 800986a:	4604      	mov	r4, r0
 800986c:	460d      	mov	r5, r1
 800986e:	da10      	bge.n	8009892 <scalbn+0x52>
 8009870:	a32b      	add	r3, pc, #172	; (adr r3, 8009920 <scalbn+0xe0>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	e03a      	b.n	80098ee <scalbn+0xae>
 8009878:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800987c:	428a      	cmp	r2, r1
 800987e:	d10c      	bne.n	800989a <scalbn+0x5a>
 8009880:	ee10 2a10 	vmov	r2, s0
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f7f6 fccc 	bl	8000224 <__adddf3>
 800988c:	4604      	mov	r4, r0
 800988e:	460d      	mov	r5, r1
 8009890:	e019      	b.n	80098c6 <scalbn+0x86>
 8009892:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009896:	460b      	mov	r3, r1
 8009898:	3a36      	subs	r2, #54	; 0x36
 800989a:	4432      	add	r2, r6
 800989c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098a0:	428a      	cmp	r2, r1
 80098a2:	dd08      	ble.n	80098b6 <scalbn+0x76>
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	a120      	add	r1, pc, #128	; (adr r1, 8009928 <scalbn+0xe8>)
 80098a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ac:	da1c      	bge.n	80098e8 <scalbn+0xa8>
 80098ae:	a120      	add	r1, pc, #128	; (adr r1, 8009930 <scalbn+0xf0>)
 80098b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b4:	e018      	b.n	80098e8 <scalbn+0xa8>
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	dd08      	ble.n	80098cc <scalbn+0x8c>
 80098ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098c6:	ec45 4b10 	vmov	d0, r4, r5
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098d0:	da19      	bge.n	8009906 <scalbn+0xc6>
 80098d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098d6:	429e      	cmp	r6, r3
 80098d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80098dc:	dd0a      	ble.n	80098f4 <scalbn+0xb4>
 80098de:	a112      	add	r1, pc, #72	; (adr r1, 8009928 <scalbn+0xe8>)
 80098e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e2      	bne.n	80098ae <scalbn+0x6e>
 80098e8:	a30f      	add	r3, pc, #60	; (adr r3, 8009928 <scalbn+0xe8>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f6 fe4f 	bl	8000590 <__aeabi_dmul>
 80098f2:	e7cb      	b.n	800988c <scalbn+0x4c>
 80098f4:	a10a      	add	r1, pc, #40	; (adr r1, 8009920 <scalbn+0xe0>)
 80098f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0b8      	beq.n	8009870 <scalbn+0x30>
 80098fe:	a10e      	add	r1, pc, #56	; (adr r1, 8009938 <scalbn+0xf8>)
 8009900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009904:	e7b4      	b.n	8009870 <scalbn+0x30>
 8009906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800990a:	3236      	adds	r2, #54	; 0x36
 800990c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009910:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009914:	4620      	mov	r0, r4
 8009916:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <scalbn+0x108>)
 8009918:	2200      	movs	r2, #0
 800991a:	e7e8      	b.n	80098ee <scalbn+0xae>
 800991c:	f3af 8000 	nop.w
 8009920:	c2f8f359 	.word	0xc2f8f359
 8009924:	01a56e1f 	.word	0x01a56e1f
 8009928:	8800759c 	.word	0x8800759c
 800992c:	7e37e43c 	.word	0x7e37e43c
 8009930:	8800759c 	.word	0x8800759c
 8009934:	fe37e43c 	.word	0xfe37e43c
 8009938:	c2f8f359 	.word	0xc2f8f359
 800993c:	81a56e1f 	.word	0x81a56e1f
 8009940:	43500000 	.word	0x43500000
 8009944:	ffff3cb0 	.word	0xffff3cb0
 8009948:	3c900000 	.word	0x3c900000

0800994c <_init>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr

08009958 <_fini>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	bf00      	nop
 800995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995e:	bc08      	pop	{r3}
 8009960:	469e      	mov	lr, r3
 8009962:	4770      	bx	lr
