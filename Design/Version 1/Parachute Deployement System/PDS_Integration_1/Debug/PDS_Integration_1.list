
PDS_Integration_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000470c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080048d8  080048d8  000148d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004920  08004920  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004928  08004928  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  080049a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080049a0  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080c1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b0  00000000  00000000  00028161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00029718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00029eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d59  00000000  00000000  0002a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a40d  00000000  00000000  0004b311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7de2  00000000  00000000  0005571e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000238c  00000000  00000000  0011d550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080048bc 	.word	0x080048bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	080048bc 	.word	0x080048bc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz, Avg1, Avg2;


void MPU6050_Init (void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2301      	movs	r3, #1
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2275      	movs	r2, #117	; 0x75
 8000e9c:	21d0      	movs	r1, #208	; 0xd0
 8000e9e:	4823      	ldr	r0, [pc, #140]	; (8000f2c <MPU6050_Init+0xa8>)
 8000ea0:	f001 faa0 	bl	80023e4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b68      	cmp	r3, #104	; 0x68
 8000ea8:	d13b      	bne.n	8000f22 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	226b      	movs	r2, #107	; 0x6b
 8000ec0:	21d0      	movs	r1, #208	; 0xd0
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <MPU6050_Init+0xa8>)
 8000ec4:	f001 f994 	bl	80021f0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	1dbb      	adds	r3, r7, #6
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	2219      	movs	r2, #25
 8000ede:	21d0      	movs	r1, #208	; 0xd0
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MPU6050_Init+0xa8>)
 8000ee2:	f001 f985 	bl	80021f0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	221c      	movs	r2, #28
 8000efc:	21d0      	movs	r1, #208	; 0xd0
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <MPU6050_Init+0xa8>)
 8000f00:	f001 f976 	bl	80021f0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000f04:	2300      	movs	r3, #0
 8000f06:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	1dbb      	adds	r3, r7, #6
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	221b      	movs	r2, #27
 8000f1a:	21d0      	movs	r1, #208	; 0xd0
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MPU6050_Init+0xa8>)
 8000f1e:	f001 f967 	bl	80021f0 <HAL_I2C_Mem_Write>
	}

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000008c 	.word	0x2000008c

08000f30 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	463b      	mov	r3, r7
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	223b      	movs	r2, #59	; 0x3b
 8000f48:	21d0      	movs	r1, #208	; 0xd0
 8000f4a:	482f      	ldr	r0, [pc, #188]	; (8001008 <MPU6050_Read_Accel+0xd8>)
 8000f4c:	f001 fa4a 	bl	80023e4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f50:	783b      	ldrb	r3, [r7, #0]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	787b      	ldrb	r3, [r7, #1]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MPU6050_Read_Accel+0xdc>)
 8000f60:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MPU6050_Read_Accel+0xe0>)
 8000f72:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MPU6050_Read_Accel+0xe4>)
 8000f84:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <MPU6050_Read_Accel+0xdc>)
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa8d 	bl	80004ac <__aeabi_i2d>
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MPU6050_Read_Accel+0xe8>)
 8000f98:	f7ff fc1c 	bl	80007d4 <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fd9c 	bl	8000ae0 <__aeabi_d2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <MPU6050_Read_Accel+0xec>)
 8000fac:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MPU6050_Read_Accel+0xe0>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa79 	bl	80004ac <__aeabi_i2d>
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MPU6050_Read_Accel+0xe8>)
 8000fc0:	f7ff fc08 	bl	80007d4 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fd88 	bl	8000ae0 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <MPU6050_Read_Accel+0xf0>)
 8000fd4:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MPU6050_Read_Accel+0xe4>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa65 	bl	80004ac <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MPU6050_Read_Accel+0xe8>)
 8000fe8:	f7ff fbf4 	bl	80007d4 <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd74 	bl	8000ae0 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <MPU6050_Read_Accel+0xf4>)
 8000ffc:	6013      	str	r3, [r2, #0]


}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000008c 	.word	0x2000008c
 800100c:	200000e4 	.word	0x200000e4
 8001010:	200000e6 	.word	0x200000e6
 8001014:	200000e8 	.word	0x200000e8
 8001018:	40d00000 	.word	0x40d00000
 800101c:	200000f0 	.word	0x200000f0
 8001020:	200000f4 	.word	0x200000f4
 8001024:	200000f8 	.word	0x200000f8

08001028 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2306      	movs	r3, #6
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	463b      	mov	r3, r7
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2243      	movs	r2, #67	; 0x43
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	4831      	ldr	r0, [pc, #196]	; (8001108 <MPU6050_Read_Gyro+0xe0>)
 8001044:	f001 f9ce 	bl	80023e4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001048:	783b      	ldrb	r3, [r7, #0]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	787b      	ldrb	r3, [r7, #1]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <MPU6050_Read_Gyro+0xe4>)
 8001058:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800105a:	78bb      	ldrb	r3, [r7, #2]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <MPU6050_Read_Gyro+0xe8>)
 800106a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	797b      	ldrb	r3, [r7, #5]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MPU6050_Read_Gyro+0xec>)
 800107c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MPU6050_Read_Gyro+0xe4>)
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa11 	bl	80004ac <__aeabi_i2d>
 800108a:	a31d      	add	r3, pc, #116	; (adr r3, 8001100 <MPU6050_Read_Gyro+0xd8>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fba0 	bl	80007d4 <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fd20 	bl	8000ae0 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <MPU6050_Read_Gyro+0xf0>)
 80010a4:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MPU6050_Read_Gyro+0xe8>)
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9fd 	bl	80004ac <__aeabi_i2d>
 80010b2:	a313      	add	r3, pc, #76	; (adr r3, 8001100 <MPU6050_Read_Gyro+0xd8>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fb8c 	bl	80007d4 <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd0c 	bl	8000ae0 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <MPU6050_Read_Gyro+0xf4>)
 80010cc:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MPU6050_Read_Gyro+0xec>)
 80010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9e9 	bl	80004ac <__aeabi_i2d>
 80010da:	a309      	add	r3, pc, #36	; (adr r3, 8001100 <MPU6050_Read_Gyro+0xd8>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fb78 	bl	80007d4 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fcf8 	bl	8000ae0 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <MPU6050_Read_Gyro+0xf8>)
 80010f4:	6013      	str	r3, [r2, #0]

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	00000000 	.word	0x00000000
 8001104:	40606000 	.word	0x40606000
 8001108:	2000008c 	.word	0x2000008c
 800110c:	200000ea 	.word	0x200000ea
 8001110:	200000ec 	.word	0x200000ec
 8001114:	200000ee 	.word	0x200000ee
 8001118:	200000fc 	.word	0x200000fc
 800111c:	20000100 	.word	0x20000100
 8001120:	20000104 	.word	0x20000104

08001124 <Tilt_sensor>:
void Tilt_sensor()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	tilt= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <Tilt_sensor+0x24>)
 800112e:	f000 fee9 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b03      	ldr	r3, [pc, #12]	; (800114c <Tilt_sensor+0x28>)
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020800 	.word	0x40020800
 800114c:	200000e0 	.word	0x200000e0

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fbc6 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f9b6 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 fa54 	bl	8001608 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001160:	f000 fa24 	bl	80015ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001164:	f7ff fe8e 	bl	8000e84 <MPU6050_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // read the Accelerometer and Gyro values
	  MPU6050_Read_Accel();
 8001168:	f7ff fee2 	bl	8000f30 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 800116c:	f7ff ff5c 	bl	8001028 <MPU6050_Read_Gyro>
	  Tilt_sensor();
 8001170:	f7ff ffd8 	bl	8001124 <Tilt_sensor>
	  // print the Acceleration and Gyro values on the LCD 20x4
	  Avg1 = pow(pow(Ax,2)+pow(Ay,2)+pow(Az,2),0.5);
 8001174:	4bc6      	ldr	r3, [pc, #792]	; (8001490 <main+0x340>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9a9 	bl	80004d0 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	ed9f 1bbf 	vldr	d1, [pc, #764]	; 8001480 <main+0x330>
 8001186:	ec43 2b10 	vmov	d0, r2, r3
 800118a:	f002 fc7d 	bl	8003a88 <pow>
 800118e:	ec55 4b10 	vmov	r4, r5, d0
 8001192:	4bc0      	ldr	r3, [pc, #768]	; (8001494 <main+0x344>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f99a 	bl	80004d0 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ed9f 1bb7 	vldr	d1, [pc, #732]	; 8001480 <main+0x330>
 80011a4:	ec43 2b10 	vmov	d0, r2, r3
 80011a8:	f002 fc6e 	bl	8003a88 <pow>
 80011ac:	ec53 2b10 	vmov	r2, r3, d0
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff f82e 	bl	8000214 <__adddf3>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4614      	mov	r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	4bb5      	ldr	r3, [pc, #724]	; (8001498 <main+0x348>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f983 	bl	80004d0 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	ed9f 1bac 	vldr	d1, [pc, #688]	; 8001480 <main+0x330>
 80011d2:	ec43 2b10 	vmov	d0, r2, r3
 80011d6:	f002 fc57 	bl	8003a88 <pow>
 80011da:	ec53 2b10 	vmov	r2, r3, d0
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f817 	bl	8000214 <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	ec43 2b17 	vmov	d7, r2, r3
 80011ee:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8001488 <main+0x338>
 80011f2:	eeb0 0a47 	vmov.f32	s0, s14
 80011f6:	eef0 0a67 	vmov.f32	s1, s15
 80011fa:	f002 fc45 	bl	8003a88 <pow>
 80011fe:	ec53 2b10 	vmov	r2, r3, d0
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fc6b 	bl	8000ae0 <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	4aa3      	ldr	r2, [pc, #652]	; (800149c <main+0x34c>)
 800120e:	6013      	str	r3, [r2, #0]
	  Avg2 = pow(pow(Gx,2)+pow(Gy,2)+pow(Gz,2),0.5);
 8001210:	4ba3      	ldr	r3, [pc, #652]	; (80014a0 <main+0x350>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f95b 	bl	80004d0 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8001480 <main+0x330>
 8001222:	ec43 2b10 	vmov	d0, r2, r3
 8001226:	f002 fc2f 	bl	8003a88 <pow>
 800122a:	ec55 4b10 	vmov	r4, r5, d0
 800122e:	4b9d      	ldr	r3, [pc, #628]	; (80014a4 <main+0x354>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f94c 	bl	80004d0 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8001480 <main+0x330>
 8001240:	ec43 2b10 	vmov	d0, r2, r3
 8001244:	f002 fc20 	bl	8003a88 <pow>
 8001248:	ec53 2b10 	vmov	r2, r3, d0
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7fe ffe0 	bl	8000214 <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	4b92      	ldr	r3, [pc, #584]	; (80014a8 <main+0x358>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f935 	bl	80004d0 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	ed9f 1b85 	vldr	d1, [pc, #532]	; 8001480 <main+0x330>
 800126e:	ec43 2b10 	vmov	d0, r2, r3
 8001272:	f002 fc09 	bl	8003a88 <pow>
 8001276:	ec53 2b10 	vmov	r2, r3, d0
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7fe ffc9 	bl	8000214 <__adddf3>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	ec43 2b17 	vmov	d7, r2, r3
 800128a:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8001488 <main+0x338>
 800128e:	eeb0 0a47 	vmov.f32	s0, s14
 8001292:	eef0 0a67 	vmov.f32	s1, s15
 8001296:	f002 fbf7 	bl	8003a88 <pow>
 800129a:	ec53 2b10 	vmov	r2, r3, d0
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff fc1d 	bl	8000ae0 <__aeabi_d2f>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a80      	ldr	r2, [pc, #512]	; (80014ac <main+0x35c>)
 80012aa:	6013      	str	r3, [r2, #0]
	  Avg1 = pow(pow(Ax,2)+pow(Ay,2)+pow(Az,2),0.5);
 80012ac:	4b78      	ldr	r3, [pc, #480]	; (8001490 <main+0x340>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f90d 	bl	80004d0 <__aeabi_f2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001480 <main+0x330>
 80012be:	ec43 2b10 	vmov	d0, r2, r3
 80012c2:	f002 fbe1 	bl	8003a88 <pow>
 80012c6:	ec55 4b10 	vmov	r4, r5, d0
 80012ca:	4b72      	ldr	r3, [pc, #456]	; (8001494 <main+0x344>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8fe 	bl	80004d0 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8001480 <main+0x330>
 80012dc:	ec43 2b10 	vmov	d0, r2, r3
 80012e0:	f002 fbd2 	bl	8003a88 <pow>
 80012e4:	ec53 2b10 	vmov	r2, r3, d0
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7fe ff92 	bl	8000214 <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <main+0x348>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8e7 	bl	80004d0 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001480 <main+0x330>
 800130a:	ec43 2b10 	vmov	d0, r2, r3
 800130e:	f002 fbbb 	bl	8003a88 <pow>
 8001312:	ec53 2b10 	vmov	r2, r3, d0
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7fe ff7b 	bl	8000214 <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	ec43 2b17 	vmov	d7, r2, r3
 8001326:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001488 <main+0x338>
 800132a:	eeb0 0a47 	vmov.f32	s0, s14
 800132e:	eef0 0a67 	vmov.f32	s1, s15
 8001332:	f002 fba9 	bl	8003a88 <pow>
 8001336:	ec53 2b10 	vmov	r2, r3, d0
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbcf 	bl	8000ae0 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a55      	ldr	r2, [pc, #340]	; (800149c <main+0x34c>)
 8001346:	6013      	str	r3, [r2, #0]
	  Avg2 = pow(pow(Gx,2)+pow(Gy,2)+pow(Gz,2),0.5);
 8001348:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <main+0x350>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8bf 	bl	80004d0 <__aeabi_f2d>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8001480 <main+0x330>
 800135a:	ec43 2b10 	vmov	d0, r2, r3
 800135e:	f002 fb93 	bl	8003a88 <pow>
 8001362:	ec55 4b10 	vmov	r4, r5, d0
 8001366:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <main+0x354>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8b0 	bl	80004d0 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001480 <main+0x330>
 8001378:	ec43 2b10 	vmov	d0, r2, r3
 800137c:	f002 fb84 	bl	8003a88 <pow>
 8001380:	ec53 2b10 	vmov	r2, r3, d0
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7fe ff44 	bl	8000214 <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <main+0x358>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f899 	bl	80004d0 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001480 <main+0x330>
 80013a6:	ec43 2b10 	vmov	d0, r2, r3
 80013aa:	f002 fb6d 	bl	8003a88 <pow>
 80013ae:	ec53 2b10 	vmov	r2, r3, d0
 80013b2:	4620      	mov	r0, r4
 80013b4:	4629      	mov	r1, r5
 80013b6:	f7fe ff2d 	bl	8000214 <__adddf3>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	ec43 2b17 	vmov	d7, r2, r3
 80013c2:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8001488 <main+0x338>
 80013c6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ca:	eef0 0a67 	vmov.f32	s1, s15
 80013ce:	f002 fb5b 	bl	8003a88 <pow>
 80013d2:	ec53 2b10 	vmov	r2, r3, d0
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fb81 	bl	8000ae0 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a32      	ldr	r2, [pc, #200]	; (80014ac <main+0x35c>)
 80013e2:	6013      	str	r3, [r2, #0]
	  if((Avg1 >= 2 && Avg2 >= 200 && tilt==0)||fall==1)
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <main+0x34c>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	db10      	blt.n	800141a <main+0x2ca>
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <main+0x35c>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80014b0 <main+0x360>
 8001402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	db06      	blt.n	800141a <main+0x2ca>
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <main+0x364>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	f083 0301 	eor.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <main+0x2d2>
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <main+0x368>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <main+0x2e0>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //Trigger PDS
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	4824      	ldr	r0, [pc, #144]	; (80014bc <main+0x36c>)
 800142a:	f000 fd83 	bl	8001f34 <HAL_GPIO_WritePin>
 800142e:	e005      	b.n	800143c <main+0x2ec>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001436:	4821      	ldr	r0, [pc, #132]	; (80014bc <main+0x36c>)
 8001438:	f000 fd7c 	bl	8001f34 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay (100);  // wait for a while
 800143c:	2064      	movs	r0, #100	; 0x64
 800143e:	f000 fac3 	bl	80019c8 <HAL_Delay>
	  pds=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001442:	2120      	movs	r1, #32
 8001444:	481d      	ldr	r0, [pc, #116]	; (80014bc <main+0x36c>)
 8001446:	f000 fd5d 	bl	8001f04 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf14      	ite	ne
 8001450:	2301      	movne	r3, #1
 8001452:	2300      	moveq	r3, #0
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <main+0x370>)
 8001458:	701a      	strb	r2, [r3, #0]
	  	  if(pds==0)
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <main+0x370>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <main+0x324>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2120      	movs	r1, #32
 800146c:	4815      	ldr	r0, [pc, #84]	; (80014c4 <main+0x374>)
 800146e:	f000 fd61 	bl	8001f34 <HAL_GPIO_WritePin>
 8001472:	e679      	b.n	8001168 <main+0x18>
	  	  }
	  	  else
	  	  {
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	2120      	movs	r1, #32
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <main+0x374>)
 800147a:	f000 fd5b 	bl	8001f34 <HAL_GPIO_WritePin>
	  MPU6050_Read_Accel();
 800147e:	e673      	b.n	8001168 <main+0x18>
 8001480:	00000000 	.word	0x00000000
 8001484:	40000000 	.word	0x40000000
 8001488:	00000000 	.word	0x00000000
 800148c:	3fe00000 	.word	0x3fe00000
 8001490:	200000f0 	.word	0x200000f0
 8001494:	200000f4 	.word	0x200000f4
 8001498:	200000f8 	.word	0x200000f8
 800149c:	20000108 	.word	0x20000108
 80014a0:	200000fc 	.word	0x200000fc
 80014a4:	20000100 	.word	0x20000100
 80014a8:	20000104 	.word	0x20000104
 80014ac:	2000010c 	.word	0x2000010c
 80014b0:	43480000 	.word	0x43480000
 80014b4:	200000e0 	.word	0x200000e0
 80014b8:	200000e1 	.word	0x200000e1
 80014bc:	40020800 	.word	0x40020800
 80014c0:	200000e2 	.word	0x200000e2
 80014c4:	40020400 	.word	0x40020400

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b094      	sub	sp, #80	; 0x50
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	2234      	movs	r2, #52	; 0x34
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 face 	bl	8003a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <SystemClock_Config+0xdc>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a2b      	ldr	r2, [pc, #172]	; (80015a4 <SystemClock_Config+0xdc>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <SystemClock_Config+0xdc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <SystemClock_Config+0xe0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <SystemClock_Config+0xe0>)
 8001512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <SystemClock_Config+0xe0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800152c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001538:	230f      	movs	r3, #15
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800153c:	23d8      	movs	r3, #216	; 0xd8
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001544:	2302      	movs	r3, #2
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001548:	2302      	movs	r3, #2
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4618      	mov	r0, r3
 8001552:	f001 ffc9 	bl	80034e8 <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800155c:	f000 f8e4 	bl	8001728 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001560:	f001 fcc2 	bl	8002ee8 <HAL_PWREx_EnableOverDrive>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800156a:	f000 f8dd 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2302      	movs	r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800157a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2105      	movs	r1, #5
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fcfb 	bl	8002f88 <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001598:	f000 f8c6 	bl	8001728 <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	3750      	adds	r7, #80	; 0x50
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_I2C1_Init+0x50>)
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <MX_I2C1_Init+0x54>)
 80015b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_I2C1_Init+0x50>)
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <MX_I2C1_Init+0x58>)
 80015ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_I2C1_Init+0x50>)
 80015ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_I2C1_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_I2C1_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_I2C1_Init+0x50>)
 80015ea:	f000 fcbd 	bl	8001f68 <HAL_I2C_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015f4:	f000 f898 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000008c 	.word	0x2000008c
 8001600:	40005400 	.word	0x40005400
 8001604:	000186a0 	.word	0x000186a0

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <MX_GPIO_Init+0x114>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <MX_GPIO_Init+0x114>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <MX_GPIO_Init+0x114>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <MX_GPIO_Init+0x114>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a36      	ldr	r2, [pc, #216]	; (800171c <MX_GPIO_Init+0x114>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <MX_GPIO_Init+0x114>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <MX_GPIO_Init+0x114>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <MX_GPIO_Init+0x114>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_GPIO_Init+0x114>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <MX_GPIO_Init+0x114>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a28      	ldr	r2, [pc, #160]	; (800171c <MX_GPIO_Init+0x114>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <MX_GPIO_Init+0x114>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Tilt_Out_Pin|Gyro_Out_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001694:	4822      	ldr	r0, [pc, #136]	; (8001720 <MX_GPIO_Init+0x118>)
 8001696:	f000 fc4d 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pds_Out_GPIO_Port, pds_Out_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2120      	movs	r1, #32
 800169e:	4821      	ldr	r0, [pc, #132]	; (8001724 <MX_GPIO_Init+0x11c>)
 80016a0:	f000 fc48 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : pds_input_Pin Tilt_In_Pin */
  GPIO_InitStruct.Pin = pds_input_Pin|Tilt_In_Pin;
 80016a4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4819      	ldr	r0, [pc, #100]	; (8001720 <MX_GPIO_Init+0x118>)
 80016ba:	f000 fa8f 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Tilt_Out_Pin */
  GPIO_InitStruct.Pin = Tilt_Out_Pin;
 80016be:	2340      	movs	r3, #64	; 0x40
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Tilt_Out_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4812      	ldr	r0, [pc, #72]	; (8001720 <MX_GPIO_Init+0x118>)
 80016d6:	f000 fa81 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Gyro_Out_Pin */
  GPIO_InitStruct.Pin = Gyro_Out_Pin;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Gyro_Out_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <MX_GPIO_Init+0x118>)
 80016f4:	f000 fa72 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : pds_Out_Pin */
  GPIO_InitStruct.Pin = pds_Out_Pin;
 80016f8:	2320      	movs	r3, #32
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pds_Out_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_GPIO_Init+0x11c>)
 8001710:	f000 fa64 	bl	8001bdc <HAL_GPIO_Init>

}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40020800 	.word	0x40020800
 8001724:	40020400 	.word	0x40020400

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_MspInit+0x4c>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_MspInit+0x4c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_I2C_MspInit+0x84>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12b      	bne.n	8001802 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_I2C_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_I2C_MspInit+0x88>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_I2C_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c6:	23c0      	movs	r3, #192	; 0xc0
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ca:	2312      	movs	r3, #18
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d6:	2304      	movs	r3, #4
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <HAL_I2C_MspInit+0x8c>)
 80017e2:	f000 f9fb 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_I2C_MspInit+0x88>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_I2C_MspInit+0x88>)
 80017f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_I2C_MspInit+0x88>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40005400 	.word	0x40005400
 8001810:	40023800 	.word	0x40023800
 8001814:	40020400 	.word	0x40020400

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 f890 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <SystemInit+0x20>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <SystemInit+0x20>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <Reset_Handler>:
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopFillZerobss+0x12>
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <LoopFillZerobss+0x16>)
 8001896:	490e      	ldr	r1, [pc, #56]	; (80018d0 <LoopFillZerobss+0x1a>)
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <LoopFillZerobss+0x1e>)
 800189a:	2300      	movs	r3, #0
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:
 800189e:	58d4      	ldr	r4, [r2, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:
 80018a4:	18c4      	adds	r4, r0, r3
 80018a6:	428c      	cmp	r4, r1
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <LoopFillZerobss+0x22>)
 80018ac:	4c0b      	ldr	r4, [pc, #44]	; (80018dc <LoopFillZerobss+0x26>)
 80018ae:	2300      	movs	r3, #0
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:
 80018b6:	42a2      	cmp	r2, r4
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>
 80018ba:	f7ff ffd7 	bl	800186c <SystemInit>
 80018be:	f002 f8b7 	bl	8003a30 <__libc_init_array>
 80018c2:	f7ff fc45 	bl	8001150 <main>
 80018c6:	4770      	bx	lr
 80018c8:	20020000 	.word	0x20020000
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000070 	.word	0x20000070
 80018d4:	08004930 	.word	0x08004930
 80018d8:	20000070 	.word	0x20000070
 80018dc:	20000114 	.word	0x20000114

080018e0 <ADC_IRQHandler>:
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_Init+0x40>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_Init+0x40>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_Init+0x40>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f931 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff ff0e 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f93b 	bl	8001bc2 <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 f911 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000110 	.word	0x20000110

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000110 	.word	0x20000110

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff47 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff5c 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffb0 	bl	8001b30 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e165      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8154 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ae 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x308>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x202>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae96 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e12b      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fbfa 	bl	8001788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fcc:	f001 f8ce 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8001fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a81      	ldr	r2, [pc, #516]	; (80021dc <HAL_I2C_Init+0x274>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d807      	bhi.n	8001fec <HAL_I2C_Init+0x84>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a80      	ldr	r2, [pc, #512]	; (80021e0 <HAL_I2C_Init+0x278>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf94      	ite	ls
 8001fe4:	2301      	movls	r3, #1
 8001fe6:	2300      	movhi	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e006      	b.n	8001ffa <HAL_I2C_Init+0x92>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a7d      	ldr	r2, [pc, #500]	; (80021e4 <HAL_I2C_Init+0x27c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0e7      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a78      	ldr	r2, [pc, #480]	; (80021e8 <HAL_I2C_Init+0x280>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9b      	lsrs	r3, r3, #18
 800200c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a6a      	ldr	r2, [pc, #424]	; (80021dc <HAL_I2C_Init+0x274>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d802      	bhi.n	800203c <HAL_I2C_Init+0xd4>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3301      	adds	r3, #1
 800203a:	e009      	b.n	8002050 <HAL_I2C_Init+0xe8>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_I2C_Init+0x284>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	430b      	orrs	r3, r1
 8002056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	495c      	ldr	r1, [pc, #368]	; (80021dc <HAL_I2C_Init+0x274>)
 800206c:	428b      	cmp	r3, r1
 800206e:	d819      	bhi.n	80020a4 <HAL_I2C_Init+0x13c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e59      	subs	r1, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fbb1 f3f3 	udiv	r3, r1, r3
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002084:	400b      	ands	r3, r1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_I2C_Init+0x138>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e59      	subs	r1, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fbb1 f3f3 	udiv	r3, r1, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209e:	e051      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a0:	2304      	movs	r3, #4
 80020a2:	e04f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <HAL_I2C_Init+0x168>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e012      	b.n	80020f6 <HAL_I2C_Init+0x18e>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Init+0x196>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e022      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <HAL_I2C_Init+0x1bc>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e58      	subs	r0, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	440b      	add	r3, r1
 8002114:	fbb0 f3f3 	udiv	r3, r0, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002122:	e00f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	0099      	lsls	r1, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	6809      	ldr	r1, [r1, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6911      	ldr	r1, [r2, #16]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68d2      	ldr	r2, [r2, #12]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	000186a0 	.word	0x000186a0
 80021e0:	001e847f 	.word	0x001e847f
 80021e4:	003d08ff 	.word	0x003d08ff
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	10624dd3 	.word	0x10624dd3

080021f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800220a:	f7ff fbd1 	bl	80019b0 <HAL_GetTick>
 800220e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b20      	cmp	r3, #32
 800221a:	f040 80d9 	bne.w	80023d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2319      	movs	r3, #25
 8002224:	2201      	movs	r2, #1
 8002226:	496d      	ldr	r1, [pc, #436]	; (80023dc <HAL_I2C_Mem_Write+0x1ec>)
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fc7f 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002234:	2302      	movs	r3, #2
 8002236:	e0cc      	b.n	80023d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Mem_Write+0x56>
 8002242:	2302      	movs	r3, #2
 8002244:	e0c5      	b.n	80023d2 <HAL_I2C_Mem_Write+0x1e2>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d007      	beq.n	800226c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2221      	movs	r2, #33	; 0x21
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2240      	movs	r2, #64	; 0x40
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a3a      	ldr	r2, [r7, #32]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800229c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a4d      	ldr	r2, [pc, #308]	; (80023e0 <HAL_I2C_Mem_Write+0x1f0>)
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ae:	88f8      	ldrh	r0, [r7, #6]
 80022b0:	893a      	ldrh	r2, [r7, #8]
 80022b2:	8979      	ldrh	r1, [r7, #10]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4603      	mov	r3, r0
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fab6 	bl	8002830 <I2C_RequestMemoryWrite>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d052      	beq.n	8002370 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e081      	b.n	80023d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fd00 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d107      	bne.n	80022f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d11b      	bne.n	8002370 <HAL_I2C_Mem_Write+0x180>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1aa      	bne.n	80022ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fcec 	bl	8002d5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2b04      	cmp	r3, #4
 800238e:	d107      	bne.n	80023a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e016      	b.n	80023d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	00100002 	.word	0x00100002
 80023e0:	ffff0000 	.word	0xffff0000

080023e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	817b      	strh	r3, [r7, #10]
 80023f6:	460b      	mov	r3, r1
 80023f8:	813b      	strh	r3, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fe:	f7ff fad7 	bl	80019b0 <HAL_GetTick>
 8002402:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b20      	cmp	r3, #32
 800240e:	f040 8208 	bne.w	8002822 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2319      	movs	r3, #25
 8002418:	2201      	movs	r2, #1
 800241a:	497b      	ldr	r1, [pc, #492]	; (8002608 <HAL_I2C_Mem_Read+0x224>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fb85 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
 800242a:	e1fb      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_I2C_Mem_Read+0x56>
 8002436:	2302      	movs	r3, #2
 8002438:	e1f4      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d007      	beq.n	8002460 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2222      	movs	r2, #34	; 0x22
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a5b      	ldr	r2, [pc, #364]	; (800260c <HAL_I2C_Mem_Read+0x228>)
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024a2:	88f8      	ldrh	r0, [r7, #6]
 80024a4:	893a      	ldrh	r2, [r7, #8]
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4603      	mov	r3, r0
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fa52 	bl	800295c <I2C_RequestMemoryRead>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1b0      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d113      	bne.n	80024f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	623b      	str	r3, [r7, #32]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e184      	b.n	80027fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d11b      	bne.n	8002532 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e164      	b.n	80027fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11b      	bne.n	8002572 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002548:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	e144      	b.n	80027fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002588:	e138      	b.n	80027fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b03      	cmp	r3, #3
 8002590:	f200 80f1 	bhi.w	8002776 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b01      	cmp	r3, #1
 800259a:	d123      	bne.n	80025e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fc1b 	bl	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e139      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e2:	e10b      	b.n	80027fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d14e      	bne.n	800268a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	2200      	movs	r2, #0
 80025f4:	4906      	ldr	r1, [pc, #24]	; (8002610 <HAL_I2C_Mem_Read+0x22c>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fa98 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e10e      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
 8002606:	bf00      	nop
 8002608:	00100002 	.word	0x00100002
 800260c:	ffff0000 	.word	0xffff0000
 8002610:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002688:	e0b8      	b.n	80027fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	4966      	ldr	r1, [pc, #408]	; (800282c <HAL_I2C_Mem_Read+0x448>)
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fa49 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0bf      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2200      	movs	r2, #0
 80026ee:	494f      	ldr	r1, [pc, #316]	; (800282c <HAL_I2C_Mem_Read+0x448>)
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fa1b 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e091      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002774:	e042      	b.n	80027fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fb2e 	bl	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e04c      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d118      	bne.n	80027fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f aec2 	bne.w	800258a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e000      	b.n	8002824 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
  }
}
 8002824:	4618      	mov	r0, r3
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	00010004 	.word	0x00010004

08002830 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2200      	movs	r2, #0
 8002862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f960 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002880:	d103      	bne.n	800288a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e05f      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800289c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	492d      	ldr	r1, [pc, #180]	; (8002958 <I2C_RequestMemoryWrite+0x128>)
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f998 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e04c      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa02 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d107      	bne.n	80028f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e02b      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	e021      	b.n	800294c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002908:	893b      	ldrh	r3, [r7, #8]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b29b      	uxth	r3, r3
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	6a39      	ldr	r1, [r7, #32]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f9dc 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b04      	cmp	r3, #4
 800292c:	d107      	bne.n	800293e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e005      	b.n	800294e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002942:	893b      	ldrh	r3, [r7, #8]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	00010002 	.word	0x00010002

0800295c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	2200      	movs	r2, #0
 800299e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f8c2 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029bc:	d103      	bne.n	80029c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0aa      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	4952      	ldr	r1, [pc, #328]	; (8002b28 <I2C_RequestMemoryRead+0x1cc>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f8fa 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e097      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f964 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e076      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	e021      	b.n	8002a88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f93e 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e050      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8a:	6a39      	ldr	r1, [r7, #32]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f923 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d107      	bne.n	8002ab0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e035      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f82b 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e013      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	6a3a      	ldr	r2, [r7, #32]
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <I2C_RequestMemoryRead+0x1cc>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f863 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010002 	.word	0x00010002

08002b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3c:	e025      	b.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d021      	beq.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7fe ff33 	bl	80019b0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d116      	bne.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e023      	b.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10d      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	e00c      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0b6      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be8:	e051      	b.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d123      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0204 	orr.w	r2, r3, #4
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e046      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d021      	beq.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe feb1 	bl	80019b0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d116      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e020      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10c      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e00b      	b.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d18d      	bne.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce4:	e02d      	b.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f8ce 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e02d      	b.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d021      	beq.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe fe57 	bl	80019b0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b80      	cmp	r3, #128	; 0x80
 8002d4e:	d1ca      	bne.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d66:	e02d      	b.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f88d 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e02d      	b.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d021      	beq.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d80:	f7fe fe16 	bl	80019b0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d302      	bcc.n	8002d96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e007      	b.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d1ca      	bne.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de8:	e042      	b.n	8002e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d119      	bne.n	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0210 	mvn.w	r2, #16
 8002e00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e029      	b.n	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe fdc0 	bl	80019b0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e007      	b.n	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d1b5      	bne.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d11b      	bne.n	8002ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x94>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f14:	f7fe fd4c 	bl	80019b0 <HAL_GetTick>
 8002f18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f1a:	e009      	b.n	8002f30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f1c:	f7fe fd48 	bl	80019b0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f2a:	d901      	bls.n	8002f30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e01f      	b.n	8002f70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d1ee      	bne.n	8002f1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f44:	f7fe fd34 	bl	80019b0 <HAL_GetTick>
 8002f48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f4a:	e009      	b.n	8002f60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f4c:	f7fe fd30 	bl	80019b0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5a:	d901      	bls.n	8002f60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e007      	b.n	8002f70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	420e0040 	.word	0x420e0040
 8002f80:	40007000 	.word	0x40007000
 8002f84:	420e0044 	.word	0x420e0044

08002f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0cc      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b68      	ldr	r3, [pc, #416]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d90c      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	494d      	ldr	r1, [pc, #308]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d044      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d119      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d003      	beq.n	8003046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003042:	2b03      	cmp	r3, #3
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e067      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4934      	ldr	r1, [pc, #208]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003078:	f7fe fc9a 	bl	80019b0 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fe fc96 	bl	80019b0 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e04f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d20c      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e032      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4916      	ldr	r1, [pc, #88]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310e:	f000 f841 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490a      	ldr	r1, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fbfa 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00
 8003144:	40023800 	.word	0x40023800
 8003148:	080048d8 	.word	0x080048d8
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_RCC_GetHCLKFreq+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003170:	f7ff fff0 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	0a9b      	lsrs	r3, r3, #10
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	080048e8 	.word	0x080048e8

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b0a6      	sub	sp, #152	; 0x98
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ba:	4bc8      	ldr	r3, [pc, #800]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	f200 817e 	bhi.w	80034c4 <HAL_RCC_GetSysClockFreq+0x330>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	08003205 	.word	0x08003205
 80031d4:	080034c5 	.word	0x080034c5
 80031d8:	080034c5 	.word	0x080034c5
 80031dc:	080034c5 	.word	0x080034c5
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	080034c5 	.word	0x080034c5
 80031e8:	080034c5 	.word	0x080034c5
 80031ec:	080034c5 	.word	0x080034c5
 80031f0:	08003215 	.word	0x08003215
 80031f4:	080034c5 	.word	0x080034c5
 80031f8:	080034c5 	.word	0x080034c5
 80031fc:	080034c5 	.word	0x080034c5
 8003200:	0800337f 	.word	0x0800337f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4bb6      	ldr	r3, [pc, #728]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800320a:	e15f      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320c:	4bb5      	ldr	r3, [pc, #724]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003212:	e15b      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003214:	4bb1      	ldr	r3, [pc, #708]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800321c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003220:	4bae      	ldr	r3, [pc, #696]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d031      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322c:	4bab      	ldr	r3, [pc, #684]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	2200      	movs	r2, #0
 8003234:	66bb      	str	r3, [r7, #104]	; 0x68
 8003236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	663b      	str	r3, [r7, #96]	; 0x60
 8003240:	2300      	movs	r3, #0
 8003242:	667b      	str	r3, [r7, #100]	; 0x64
 8003244:	4ba7      	ldr	r3, [pc, #668]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003246:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800324a:	462a      	mov	r2, r5
 800324c:	fb03 f202 	mul.w	r2, r3, r2
 8003250:	2300      	movs	r3, #0
 8003252:	4621      	mov	r1, r4
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	4aa2      	ldr	r2, [pc, #648]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 800325c:	4621      	mov	r1, r4
 800325e:	fba1 1202 	umull	r1, r2, r1, r2
 8003262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003264:	460a      	mov	r2, r1
 8003266:	67ba      	str	r2, [r7, #120]	; 0x78
 8003268:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800326a:	4413      	add	r3, r2
 800326c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003272:	2200      	movs	r2, #0
 8003274:	65bb      	str	r3, [r7, #88]	; 0x58
 8003276:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003278:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800327c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003280:	f7fd fc7e 	bl	8000b80 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800328e:	e064      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003290:	4b92      	ldr	r3, [pc, #584]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	2200      	movs	r2, #0
 8003298:	653b      	str	r3, [r7, #80]	; 0x50
 800329a:	657a      	str	r2, [r7, #84]	; 0x54
 800329c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a4:	2300      	movs	r3, #0
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80032ac:	4622      	mov	r2, r4
 80032ae:	462b      	mov	r3, r5
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	0159      	lsls	r1, r3, #5
 80032ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032be:	0150      	lsls	r0, r2, #5
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4621      	mov	r1, r4
 80032c6:	1a51      	subs	r1, r2, r1
 80032c8:	6139      	str	r1, [r7, #16]
 80032ca:	4629      	mov	r1, r5
 80032cc:	eb63 0301 	sbc.w	r3, r3, r1
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032de:	4659      	mov	r1, fp
 80032e0:	018b      	lsls	r3, r1, #6
 80032e2:	4651      	mov	r1, sl
 80032e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e8:	4651      	mov	r1, sl
 80032ea:	018a      	lsls	r2, r1, #6
 80032ec:	4651      	mov	r1, sl
 80032ee:	ebb2 0801 	subs.w	r8, r2, r1
 80032f2:	4659      	mov	r1, fp
 80032f4:	eb63 0901 	sbc.w	r9, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003304:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003308:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330c:	4690      	mov	r8, r2
 800330e:	4699      	mov	r9, r3
 8003310:	4623      	mov	r3, r4
 8003312:	eb18 0303 	adds.w	r3, r8, r3
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	462b      	mov	r3, r5
 800331a:	eb49 0303 	adc.w	r3, r9, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800332c:	4629      	mov	r1, r5
 800332e:	028b      	lsls	r3, r1, #10
 8003330:	4621      	mov	r1, r4
 8003332:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003336:	4621      	mov	r1, r4
 8003338:	028a      	lsls	r2, r1, #10
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003342:	2200      	movs	r2, #0
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
 8003346:	647a      	str	r2, [r7, #68]	; 0x44
 8003348:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800334c:	f7fd fc18 	bl	8000b80 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4613      	mov	r3, r2
 8003356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800335a:	4b60      	ldr	r3, [pc, #384]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	3301      	adds	r3, #1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800336c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800337c:	e0a6      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338a:	4b54      	ldr	r3, [pc, #336]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d02a      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	2200      	movs	r2, #0
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033a8:	2100      	movs	r1, #0
 80033aa:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 80033ac:	fb03 f201 	mul.w	r2, r3, r1
 80033b0:	2300      	movs	r3, #0
 80033b2:	fb00 f303 	mul.w	r3, r0, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x350>)
 80033ba:	fba0 1202 	umull	r1, r2, r0, r2
 80033be:	677a      	str	r2, [r7, #116]	; 0x74
 80033c0:	460a      	mov	r2, r1
 80033c2:	673a      	str	r2, [r7, #112]	; 0x70
 80033c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033c6:	4413      	add	r3, r2
 80033c8:	677b      	str	r3, [r7, #116]	; 0x74
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ce:	2200      	movs	r2, #0
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 80033d2:	637a      	str	r2, [r7, #52]	; 0x34
 80033d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033dc:	f7fd fbd0 	bl	8000b80 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ea:	e05b      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0159      	lsls	r1, r3, #5
 8003416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341a:	0150      	lsls	r0, r2, #5
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4641      	mov	r1, r8
 8003422:	ebb2 0a01 	subs.w	sl, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb63 0b01 	sbc.w	fp, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800343c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003440:	ebb2 040a 	subs.w	r4, r2, sl
 8003444:	eb63 050b 	sbc.w	r5, r3, fp
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	00eb      	lsls	r3, r5, #3
 8003452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003456:	00e2      	lsls	r2, r4, #3
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	4643      	mov	r3, r8
 800345e:	18e3      	adds	r3, r4, r3
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	464b      	mov	r3, r9
 8003464:	eb45 0303 	adc.w	r3, r5, r3
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003476:	4629      	mov	r1, r5
 8003478:	028b      	lsls	r3, r1, #10
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003480:	4621      	mov	r1, r4
 8003482:	028a      	lsls	r2, r1, #10
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348c:	2200      	movs	r2, #0
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	61fa      	str	r2, [r7, #28]
 8003492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003496:	f7fd fb73 	bl	8000b80 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4613      	mov	r3, r2
 80034a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_GetSysClockFreq+0x348>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	0f1b      	lsrs	r3, r3, #28
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80034b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034c2:	e003      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80034c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3798      	adds	r7, #152	; 0x98
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	017d7840 	.word	0x017d7840

080034e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e28d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8083 	beq.w	800360e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003508:	4b94      	ldr	r3, [pc, #592]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b04      	cmp	r3, #4
 8003512:	d019      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003514:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800351c:	2b08      	cmp	r3, #8
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003520:	4b8e      	ldr	r3, [pc, #568]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352c:	d00c      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x124>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e25a      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x90>
 800356a:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7b      	ldr	r2, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0xb4>
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a72      	ldr	r2, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6b      	ldr	r2, [pc, #428]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe f9f8 	bl	80019b0 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe f9f4 	bl	80019b0 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e21f      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xdc>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f9e4 	bl	80019b0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe f9e0 	bl	80019b0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e20b      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x104>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06f      	beq.n	80036fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d105      	bne.n	800363e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1d3      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4937      	ldr	r1, [pc, #220]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fe f98d 	bl	80019b0 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7fe f989 	bl	80019b0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1b4      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4925      	ldr	r1, [pc, #148]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f96c 	bl	80019b0 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036dc:	f7fe f968 	bl	80019b0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e193      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d036      	beq.n	8003774 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe f94c 	bl	80019b0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371c:	f7fe f948 	bl	80019b0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e173      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x234>
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe f935 	bl	80019b0 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00e      	b.n	8003768 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374a:	f7fe f931 	bl	80019b0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d907      	bls.n	8003768 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e15c      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b8a      	ldr	r3, [pc, #552]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ea      	bne.n	800374a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8097 	beq.w	80038b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b83      	ldr	r3, [pc, #524]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b7f      	ldr	r3, [pc, #508]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a7e      	ldr	r2, [pc, #504]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b7c      	ldr	r3, [pc, #496]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b76      	ldr	r3, [pc, #472]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a75      	ldr	r2, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fe f8f1 	bl	80019b0 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fe f8ed 	bl	80019b0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e118      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x31e>
 80037f8:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a65      	ldr	r2, [pc, #404]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x340>
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a60      	ldr	r2, [pc, #384]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003828:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a59      	ldr	r2, [pc, #356]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	4b57      	ldr	r3, [pc, #348]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a56      	ldr	r2, [pc, #344]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fe f8b2 	bl	80019b0 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe f8ae 	bl	80019b0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d7      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x368>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe f89c 	bl	80019b0 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fe f898 	bl	80019b0 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0c1      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80ad 	beq.w	8003a14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d060      	beq.n	8003988 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d145      	bne.n	800395a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe f86c 	bl	80019b0 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe f868 	bl	80019b0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e093      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	071b      	lsls	r3, r3, #28
 8003926:	491b      	ldr	r1, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe f83d 	bl	80019b0 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fe f839 	bl	80019b0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e064      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x452>
 8003958:	e05c      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe f826 	bl	80019b0 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe f822 	bl	80019b0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e04d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x480>
 8003986:	e045      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e040      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_RCC_OscConfig+0x538>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d030      	beq.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d129      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d122      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	4293      	cmp	r3, r2
 80039da:	d119      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d10f      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <__errno>:
 8003a24:	4b01      	ldr	r3, [pc, #4]	; (8003a2c <__errno+0x8>)
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	2000000c 	.word	0x2000000c

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	4d0d      	ldr	r5, [pc, #52]	; (8003a68 <__libc_init_array+0x38>)
 8003a34:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	2600      	movs	r6, #0
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	4d0b      	ldr	r5, [pc, #44]	; (8003a70 <__libc_init_array+0x40>)
 8003a42:	4c0c      	ldr	r4, [pc, #48]	; (8003a74 <__libc_init_array+0x44>)
 8003a44:	f000 ff3a 	bl	80048bc <_init>
 8003a48:	1b64      	subs	r4, r4, r5
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	2600      	movs	r6, #0
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08004928 	.word	0x08004928
 8003a6c:	08004928 	.word	0x08004928
 8003a70:	08004928 	.word	0x08004928
 8003a74:	0800492c 	.word	0x0800492c

08003a78 <memset>:
 8003a78:	4402      	add	r2, r0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d100      	bne.n	8003a82 <memset+0xa>
 8003a80:	4770      	bx	lr
 8003a82:	f803 1b01 	strb.w	r1, [r3], #1
 8003a86:	e7f9      	b.n	8003a7c <memset+0x4>

08003a88 <pow>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	ed2d 8b02 	vpush	{d8}
 8003a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8003a92:	eef0 8a60 	vmov.f32	s17, s1
 8003a96:	ec55 4b11 	vmov	r4, r5, d1
 8003a9a:	f000 f865 	bl	8003b68 <__ieee754_pow>
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	ec57 6b10 	vmov	r6, r7, d0
 8003aaa:	f7fd f803 	bl	8000ab4 <__aeabi_dcmpun>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d13b      	bne.n	8003b2a <pow+0xa2>
 8003ab2:	ec51 0b18 	vmov	r0, r1, d8
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f7fc ffc9 	bl	8000a50 <__aeabi_dcmpeq>
 8003abe:	b1b8      	cbz	r0, 8003af0 <pow+0x68>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f7fc ffc2 	bl	8000a50 <__aeabi_dcmpeq>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d146      	bne.n	8003b5e <pow+0xd6>
 8003ad0:	ec45 4b10 	vmov	d0, r4, r5
 8003ad4:	f000 fe61 	bl	800479a <finite>
 8003ad8:	b338      	cbz	r0, 8003b2a <pow+0xa2>
 8003ada:	2200      	movs	r2, #0
 8003adc:	2300      	movs	r3, #0
 8003ade:	4620      	mov	r0, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f7fc ffbf 	bl	8000a64 <__aeabi_dcmplt>
 8003ae6:	b300      	cbz	r0, 8003b2a <pow+0xa2>
 8003ae8:	f7ff ff9c 	bl	8003a24 <__errno>
 8003aec:	2322      	movs	r3, #34	; 0x22
 8003aee:	e01b      	b.n	8003b28 <pow+0xa0>
 8003af0:	ec47 6b10 	vmov	d0, r6, r7
 8003af4:	f000 fe51 	bl	800479a <finite>
 8003af8:	b9e0      	cbnz	r0, 8003b34 <pow+0xac>
 8003afa:	eeb0 0a48 	vmov.f32	s0, s16
 8003afe:	eef0 0a68 	vmov.f32	s1, s17
 8003b02:	f000 fe4a 	bl	800479a <finite>
 8003b06:	b1a8      	cbz	r0, 8003b34 <pow+0xac>
 8003b08:	ec45 4b10 	vmov	d0, r4, r5
 8003b0c:	f000 fe45 	bl	800479a <finite>
 8003b10:	b180      	cbz	r0, 8003b34 <pow+0xac>
 8003b12:	4632      	mov	r2, r6
 8003b14:	463b      	mov	r3, r7
 8003b16:	4630      	mov	r0, r6
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f7fc ffcb 	bl	8000ab4 <__aeabi_dcmpun>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d0e2      	beq.n	8003ae8 <pow+0x60>
 8003b22:	f7ff ff7f 	bl	8003a24 <__errno>
 8003b26:	2321      	movs	r3, #33	; 0x21
 8003b28:	6003      	str	r3, [r0, #0]
 8003b2a:	ecbd 8b02 	vpop	{d8}
 8003b2e:	ec47 6b10 	vmov	d0, r6, r7
 8003b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b34:	2200      	movs	r2, #0
 8003b36:	2300      	movs	r3, #0
 8003b38:	4630      	mov	r0, r6
 8003b3a:	4639      	mov	r1, r7
 8003b3c:	f7fc ff88 	bl	8000a50 <__aeabi_dcmpeq>
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d0f2      	beq.n	8003b2a <pow+0xa2>
 8003b44:	eeb0 0a48 	vmov.f32	s0, s16
 8003b48:	eef0 0a68 	vmov.f32	s1, s17
 8003b4c:	f000 fe25 	bl	800479a <finite>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d0ea      	beq.n	8003b2a <pow+0xa2>
 8003b54:	ec45 4b10 	vmov	d0, r4, r5
 8003b58:	f000 fe1f 	bl	800479a <finite>
 8003b5c:	e7c3      	b.n	8003ae6 <pow+0x5e>
 8003b5e:	4f01      	ldr	r7, [pc, #4]	; (8003b64 <pow+0xdc>)
 8003b60:	2600      	movs	r6, #0
 8003b62:	e7e2      	b.n	8003b2a <pow+0xa2>
 8003b64:	3ff00000 	.word	0x3ff00000

08003b68 <__ieee754_pow>:
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	ed2d 8b06 	vpush	{d8-d10}
 8003b70:	b089      	sub	sp, #36	; 0x24
 8003b72:	ed8d 1b00 	vstr	d1, [sp]
 8003b76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003b7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003b7e:	ea58 0102 	orrs.w	r1, r8, r2
 8003b82:	ec57 6b10 	vmov	r6, r7, d0
 8003b86:	d115      	bne.n	8003bb4 <__ieee754_pow+0x4c>
 8003b88:	19b3      	adds	r3, r6, r6
 8003b8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003b8e:	4152      	adcs	r2, r2
 8003b90:	4299      	cmp	r1, r3
 8003b92:	4b89      	ldr	r3, [pc, #548]	; (8003db8 <__ieee754_pow+0x250>)
 8003b94:	4193      	sbcs	r3, r2
 8003b96:	f080 84d2 	bcs.w	800453e <__ieee754_pow+0x9d6>
 8003b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	4639      	mov	r1, r7
 8003ba2:	f7fc fb37 	bl	8000214 <__adddf3>
 8003ba6:	ec41 0b10 	vmov	d0, r0, r1
 8003baa:	b009      	add	sp, #36	; 0x24
 8003bac:	ecbd 8b06 	vpop	{d8-d10}
 8003bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb4:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <__ieee754_pow+0x254>)
 8003bb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003bba:	429c      	cmp	r4, r3
 8003bbc:	ee10 aa10 	vmov	sl, s0
 8003bc0:	463d      	mov	r5, r7
 8003bc2:	dc06      	bgt.n	8003bd2 <__ieee754_pow+0x6a>
 8003bc4:	d101      	bne.n	8003bca <__ieee754_pow+0x62>
 8003bc6:	2e00      	cmp	r6, #0
 8003bc8:	d1e7      	bne.n	8003b9a <__ieee754_pow+0x32>
 8003bca:	4598      	cmp	r8, r3
 8003bcc:	dc01      	bgt.n	8003bd2 <__ieee754_pow+0x6a>
 8003bce:	d10f      	bne.n	8003bf0 <__ieee754_pow+0x88>
 8003bd0:	b172      	cbz	r2, 8003bf0 <__ieee754_pow+0x88>
 8003bd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003bd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003bda:	ea55 050a 	orrs.w	r5, r5, sl
 8003bde:	d1dc      	bne.n	8003b9a <__ieee754_pow+0x32>
 8003be0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003be4:	18db      	adds	r3, r3, r3
 8003be6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003bea:	4152      	adcs	r2, r2
 8003bec:	429d      	cmp	r5, r3
 8003bee:	e7d0      	b.n	8003b92 <__ieee754_pow+0x2a>
 8003bf0:	2d00      	cmp	r5, #0
 8003bf2:	da3b      	bge.n	8003c6c <__ieee754_pow+0x104>
 8003bf4:	4b72      	ldr	r3, [pc, #456]	; (8003dc0 <__ieee754_pow+0x258>)
 8003bf6:	4598      	cmp	r8, r3
 8003bf8:	dc51      	bgt.n	8003c9e <__ieee754_pow+0x136>
 8003bfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003bfe:	4598      	cmp	r8, r3
 8003c00:	f340 84ac 	ble.w	800455c <__ieee754_pow+0x9f4>
 8003c04:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003c08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003c0c:	2b14      	cmp	r3, #20
 8003c0e:	dd0f      	ble.n	8003c30 <__ieee754_pow+0xc8>
 8003c10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003c14:	fa22 f103 	lsr.w	r1, r2, r3
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f040 849d 	bne.w	800455c <__ieee754_pow+0x9f4>
 8003c22:	f001 0101 	and.w	r1, r1, #1
 8003c26:	f1c1 0302 	rsb	r3, r1, #2
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	b182      	cbz	r2, 8003c50 <__ieee754_pow+0xe8>
 8003c2e:	e05f      	b.n	8003cf0 <__ieee754_pow+0x188>
 8003c30:	2a00      	cmp	r2, #0
 8003c32:	d15b      	bne.n	8003cec <__ieee754_pow+0x184>
 8003c34:	f1c3 0314 	rsb	r3, r3, #20
 8003c38:	fa48 f103 	asr.w	r1, r8, r3
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	4543      	cmp	r3, r8
 8003c42:	f040 8488 	bne.w	8004556 <__ieee754_pow+0x9ee>
 8003c46:	f001 0101 	and.w	r1, r1, #1
 8003c4a:	f1c1 0302 	rsb	r3, r1, #2
 8003c4e:	9304      	str	r3, [sp, #16]
 8003c50:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <__ieee754_pow+0x25c>)
 8003c52:	4598      	cmp	r8, r3
 8003c54:	d132      	bne.n	8003cbc <__ieee754_pow+0x154>
 8003c56:	f1b9 0f00 	cmp.w	r9, #0
 8003c5a:	f280 8478 	bge.w	800454e <__ieee754_pow+0x9e6>
 8003c5e:	4959      	ldr	r1, [pc, #356]	; (8003dc4 <__ieee754_pow+0x25c>)
 8003c60:	4632      	mov	r2, r6
 8003c62:	463b      	mov	r3, r7
 8003c64:	2000      	movs	r0, #0
 8003c66:	f7fc fdb5 	bl	80007d4 <__aeabi_ddiv>
 8003c6a:	e79c      	b.n	8003ba6 <__ieee754_pow+0x3e>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9304      	str	r3, [sp, #16]
 8003c70:	2a00      	cmp	r2, #0
 8003c72:	d13d      	bne.n	8003cf0 <__ieee754_pow+0x188>
 8003c74:	4b51      	ldr	r3, [pc, #324]	; (8003dbc <__ieee754_pow+0x254>)
 8003c76:	4598      	cmp	r8, r3
 8003c78:	d1ea      	bne.n	8003c50 <__ieee754_pow+0xe8>
 8003c7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003c7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003c82:	ea53 030a 	orrs.w	r3, r3, sl
 8003c86:	f000 845a 	beq.w	800453e <__ieee754_pow+0x9d6>
 8003c8a:	4b4f      	ldr	r3, [pc, #316]	; (8003dc8 <__ieee754_pow+0x260>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	dd08      	ble.n	8003ca2 <__ieee754_pow+0x13a>
 8003c90:	f1b9 0f00 	cmp.w	r9, #0
 8003c94:	f2c0 8457 	blt.w	8004546 <__ieee754_pow+0x9de>
 8003c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c9c:	e783      	b.n	8003ba6 <__ieee754_pow+0x3e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e7e5      	b.n	8003c6e <__ieee754_pow+0x106>
 8003ca2:	f1b9 0f00 	cmp.w	r9, #0
 8003ca6:	f04f 0000 	mov.w	r0, #0
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	f6bf af7a 	bge.w	8003ba6 <__ieee754_pow+0x3e>
 8003cb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003cb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003cba:	e774      	b.n	8003ba6 <__ieee754_pow+0x3e>
 8003cbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003cc0:	d106      	bne.n	8003cd0 <__ieee754_pow+0x168>
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	4639      	mov	r1, r7
 8003cca:	f7fc fc59 	bl	8000580 <__aeabi_dmul>
 8003cce:	e76a      	b.n	8003ba6 <__ieee754_pow+0x3e>
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <__ieee754_pow+0x264>)
 8003cd2:	4599      	cmp	r9, r3
 8003cd4:	d10c      	bne.n	8003cf0 <__ieee754_pow+0x188>
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	db0a      	blt.n	8003cf0 <__ieee754_pow+0x188>
 8003cda:	ec47 6b10 	vmov	d0, r6, r7
 8003cde:	b009      	add	sp, #36	; 0x24
 8003ce0:	ecbd 8b06 	vpop	{d8-d10}
 8003ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	f000 bc6c 	b.w	80045c4 <__ieee754_sqrt>
 8003cec:	2300      	movs	r3, #0
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	ec47 6b10 	vmov	d0, r6, r7
 8003cf4:	f000 fd48 	bl	8004788 <fabs>
 8003cf8:	ec51 0b10 	vmov	r0, r1, d0
 8003cfc:	f1ba 0f00 	cmp.w	sl, #0
 8003d00:	d129      	bne.n	8003d56 <__ieee754_pow+0x1ee>
 8003d02:	b124      	cbz	r4, 8003d0e <__ieee754_pow+0x1a6>
 8003d04:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <__ieee754_pow+0x25c>)
 8003d06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d123      	bne.n	8003d56 <__ieee754_pow+0x1ee>
 8003d0e:	f1b9 0f00 	cmp.w	r9, #0
 8003d12:	da05      	bge.n	8003d20 <__ieee754_pow+0x1b8>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	2000      	movs	r0, #0
 8003d1a:	492a      	ldr	r1, [pc, #168]	; (8003dc4 <__ieee754_pow+0x25c>)
 8003d1c:	f7fc fd5a 	bl	80007d4 <__aeabi_ddiv>
 8003d20:	2d00      	cmp	r5, #0
 8003d22:	f6bf af40 	bge.w	8003ba6 <__ieee754_pow+0x3e>
 8003d26:	9b04      	ldr	r3, [sp, #16]
 8003d28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003d2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003d30:	4323      	orrs	r3, r4
 8003d32:	d108      	bne.n	8003d46 <__ieee754_pow+0x1de>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7fc fa68 	bl	8000210 <__aeabi_dsub>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	e78f      	b.n	8003c66 <__ieee754_pow+0xfe>
 8003d46:	9b04      	ldr	r3, [sp, #16]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	f47f af2c 	bne.w	8003ba6 <__ieee754_pow+0x3e>
 8003d4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d52:	4619      	mov	r1, r3
 8003d54:	e727      	b.n	8003ba6 <__ieee754_pow+0x3e>
 8003d56:	0feb      	lsrs	r3, r5, #31
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	9306      	str	r3, [sp, #24]
 8003d5c:	9a06      	ldr	r2, [sp, #24]
 8003d5e:	9b04      	ldr	r3, [sp, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d102      	bne.n	8003d6a <__ieee754_pow+0x202>
 8003d64:	4632      	mov	r2, r6
 8003d66:	463b      	mov	r3, r7
 8003d68:	e7e6      	b.n	8003d38 <__ieee754_pow+0x1d0>
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <__ieee754_pow+0x268>)
 8003d6c:	4598      	cmp	r8, r3
 8003d6e:	f340 80fb 	ble.w	8003f68 <__ieee754_pow+0x400>
 8003d72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003d76:	4598      	cmp	r8, r3
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <__ieee754_pow+0x260>)
 8003d7a:	dd0c      	ble.n	8003d96 <__ieee754_pow+0x22e>
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	dc0f      	bgt.n	8003da0 <__ieee754_pow+0x238>
 8003d80:	f1b9 0f00 	cmp.w	r9, #0
 8003d84:	da0f      	bge.n	8003da6 <__ieee754_pow+0x23e>
 8003d86:	2000      	movs	r0, #0
 8003d88:	b009      	add	sp, #36	; 0x24
 8003d8a:	ecbd 8b06 	vpop	{d8-d10}
 8003d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d92:	f000 bcf0 	b.w	8004776 <__math_oflow>
 8003d96:	429c      	cmp	r4, r3
 8003d98:	dbf2      	blt.n	8003d80 <__ieee754_pow+0x218>
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <__ieee754_pow+0x25c>)
 8003d9c:	429c      	cmp	r4, r3
 8003d9e:	dd19      	ble.n	8003dd4 <__ieee754_pow+0x26c>
 8003da0:	f1b9 0f00 	cmp.w	r9, #0
 8003da4:	dcef      	bgt.n	8003d86 <__ieee754_pow+0x21e>
 8003da6:	2000      	movs	r0, #0
 8003da8:	b009      	add	sp, #36	; 0x24
 8003daa:	ecbd 8b06 	vpop	{d8-d10}
 8003dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db2:	f000 bcd7 	b.w	8004764 <__math_uflow>
 8003db6:	bf00      	nop
 8003db8:	fff00000 	.word	0xfff00000
 8003dbc:	7ff00000 	.word	0x7ff00000
 8003dc0:	433fffff 	.word	0x433fffff
 8003dc4:	3ff00000 	.word	0x3ff00000
 8003dc8:	3fefffff 	.word	0x3fefffff
 8003dcc:	3fe00000 	.word	0x3fe00000
 8003dd0:	41e00000 	.word	0x41e00000
 8003dd4:	4b60      	ldr	r3, [pc, #384]	; (8003f58 <__ieee754_pow+0x3f0>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f7fc fa1a 	bl	8000210 <__aeabi_dsub>
 8003ddc:	a354      	add	r3, pc, #336	; (adr r3, 8003f30 <__ieee754_pow+0x3c8>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	4604      	mov	r4, r0
 8003de4:	460d      	mov	r5, r1
 8003de6:	f7fc fbcb 	bl	8000580 <__aeabi_dmul>
 8003dea:	a353      	add	r3, pc, #332	; (adr r3, 8003f38 <__ieee754_pow+0x3d0>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	4606      	mov	r6, r0
 8003df2:	460f      	mov	r7, r1
 8003df4:	4620      	mov	r0, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	f7fc fbc2 	bl	8000580 <__aeabi_dmul>
 8003dfc:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <__ieee754_pow+0x3f4>)
 8003dfe:	4682      	mov	sl, r0
 8003e00:	468b      	mov	fp, r1
 8003e02:	2200      	movs	r2, #0
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc fbba 	bl	8000580 <__aeabi_dmul>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	a14b      	add	r1, pc, #300	; (adr r1, 8003f40 <__ieee754_pow+0x3d8>)
 8003e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e16:	f7fc f9fb 	bl	8000210 <__aeabi_dsub>
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	f7fc fbaf 	bl	8000580 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	2000      	movs	r0, #0
 8003e28:	494d      	ldr	r1, [pc, #308]	; (8003f60 <__ieee754_pow+0x3f8>)
 8003e2a:	f7fc f9f1 	bl	8000210 <__aeabi_dsub>
 8003e2e:	4622      	mov	r2, r4
 8003e30:	4680      	mov	r8, r0
 8003e32:	4689      	mov	r9, r1
 8003e34:	462b      	mov	r3, r5
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc fba1 	bl	8000580 <__aeabi_dmul>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4640      	mov	r0, r8
 8003e44:	4649      	mov	r1, r9
 8003e46:	f7fc fb9b 	bl	8000580 <__aeabi_dmul>
 8003e4a:	a33f      	add	r3, pc, #252	; (adr r3, 8003f48 <__ieee754_pow+0x3e0>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fb96 	bl	8000580 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4650      	mov	r0, sl
 8003e5a:	4659      	mov	r1, fp
 8003e5c:	f7fc f9d8 	bl	8000210 <__aeabi_dsub>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4680      	mov	r8, r0
 8003e66:	4689      	mov	r9, r1
 8003e68:	4630      	mov	r0, r6
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	f7fc f9d2 	bl	8000214 <__adddf3>
 8003e70:	2000      	movs	r0, #0
 8003e72:	4632      	mov	r2, r6
 8003e74:	463b      	mov	r3, r7
 8003e76:	4604      	mov	r4, r0
 8003e78:	460d      	mov	r5, r1
 8003e7a:	f7fc f9c9 	bl	8000210 <__aeabi_dsub>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4640      	mov	r0, r8
 8003e84:	4649      	mov	r1, r9
 8003e86:	f7fc f9c3 	bl	8000210 <__aeabi_dsub>
 8003e8a:	9b04      	ldr	r3, [sp, #16]
 8003e8c:	9a06      	ldr	r2, [sp, #24]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	4682      	mov	sl, r0
 8003e94:	468b      	mov	fp, r1
 8003e96:	f040 81e7 	bne.w	8004268 <__ieee754_pow+0x700>
 8003e9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8003f50 <__ieee754_pow+0x3e8>
 8003e9e:	eeb0 8a47 	vmov.f32	s16, s14
 8003ea2:	eef0 8a67 	vmov.f32	s17, s15
 8003ea6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003eaa:	2600      	movs	r6, #0
 8003eac:	4632      	mov	r2, r6
 8003eae:	463b      	mov	r3, r7
 8003eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eb4:	f7fc f9ac 	bl	8000210 <__aeabi_dsub>
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	f7fc fb60 	bl	8000580 <__aeabi_dmul>
 8003ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ec4:	4680      	mov	r8, r0
 8003ec6:	4689      	mov	r9, r1
 8003ec8:	4650      	mov	r0, sl
 8003eca:	4659      	mov	r1, fp
 8003ecc:	f7fc fb58 	bl	8000580 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	f7fc f99c 	bl	8000214 <__adddf3>
 8003edc:	4632      	mov	r2, r6
 8003ede:	463b      	mov	r3, r7
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	4689      	mov	r9, r1
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7fc fb4a 	bl	8000580 <__aeabi_dmul>
 8003eec:	460b      	mov	r3, r1
 8003eee:	4604      	mov	r4, r0
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	f7fc f98c 	bl	8000214 <__adddf3>
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <__ieee754_pow+0x3fc>)
 8003efe:	4299      	cmp	r1, r3
 8003f00:	ec45 4b19 	vmov	d9, r4, r5
 8003f04:	4606      	mov	r6, r0
 8003f06:	460f      	mov	r7, r1
 8003f08:	468b      	mov	fp, r1
 8003f0a:	f340 82f1 	ble.w	80044f0 <__ieee754_pow+0x988>
 8003f0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003f12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003f16:	4303      	orrs	r3, r0
 8003f18:	f000 81e4 	beq.w	80042e4 <__ieee754_pow+0x77c>
 8003f1c:	ec51 0b18 	vmov	r0, r1, d8
 8003f20:	2200      	movs	r2, #0
 8003f22:	2300      	movs	r3, #0
 8003f24:	f7fc fd9e 	bl	8000a64 <__aeabi_dcmplt>
 8003f28:	3800      	subs	r0, #0
 8003f2a:	bf18      	it	ne
 8003f2c:	2001      	movne	r0, #1
 8003f2e:	e72b      	b.n	8003d88 <__ieee754_pow+0x220>
 8003f30:	60000000 	.word	0x60000000
 8003f34:	3ff71547 	.word	0x3ff71547
 8003f38:	f85ddf44 	.word	0xf85ddf44
 8003f3c:	3e54ae0b 	.word	0x3e54ae0b
 8003f40:	55555555 	.word	0x55555555
 8003f44:	3fd55555 	.word	0x3fd55555
 8003f48:	652b82fe 	.word	0x652b82fe
 8003f4c:	3ff71547 	.word	0x3ff71547
 8003f50:	00000000 	.word	0x00000000
 8003f54:	bff00000 	.word	0xbff00000
 8003f58:	3ff00000 	.word	0x3ff00000
 8003f5c:	3fd00000 	.word	0x3fd00000
 8003f60:	3fe00000 	.word	0x3fe00000
 8003f64:	408fffff 	.word	0x408fffff
 8003f68:	4bd5      	ldr	r3, [pc, #852]	; (80042c0 <__ieee754_pow+0x758>)
 8003f6a:	402b      	ands	r3, r5
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	b92b      	cbnz	r3, 8003f7c <__ieee754_pow+0x414>
 8003f70:	4bd4      	ldr	r3, [pc, #848]	; (80042c4 <__ieee754_pow+0x75c>)
 8003f72:	f7fc fb05 	bl	8000580 <__aeabi_dmul>
 8003f76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	1523      	asrs	r3, r4, #20
 8003f7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003f82:	4413      	add	r3, r2
 8003f84:	9305      	str	r3, [sp, #20]
 8003f86:	4bd0      	ldr	r3, [pc, #832]	; (80042c8 <__ieee754_pow+0x760>)
 8003f88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003f8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003f90:	429c      	cmp	r4, r3
 8003f92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003f96:	dd08      	ble.n	8003faa <__ieee754_pow+0x442>
 8003f98:	4bcc      	ldr	r3, [pc, #816]	; (80042cc <__ieee754_pow+0x764>)
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	f340 8162 	ble.w	8004264 <__ieee754_pow+0x6fc>
 8003fa0:	9b05      	ldr	r3, [sp, #20]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	9305      	str	r3, [sp, #20]
 8003fa6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003faa:	2400      	movs	r4, #0
 8003fac:	00e3      	lsls	r3, r4, #3
 8003fae:	9307      	str	r3, [sp, #28]
 8003fb0:	4bc7      	ldr	r3, [pc, #796]	; (80042d0 <__ieee754_pow+0x768>)
 8003fb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003fb6:	ed93 7b00 	vldr	d7, [r3]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	ec53 2b17 	vmov	r2, r3, d7
 8003fc0:	eeb0 9a47 	vmov.f32	s18, s14
 8003fc4:	eef0 9a67 	vmov.f32	s19, s15
 8003fc8:	4682      	mov	sl, r0
 8003fca:	f7fc f921 	bl	8000210 <__aeabi_dsub>
 8003fce:	4652      	mov	r2, sl
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	460f      	mov	r7, r1
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	ec51 0b19 	vmov	r0, r1, d9
 8003fda:	f7fc f91b 	bl	8000214 <__adddf3>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	49bb      	ldr	r1, [pc, #748]	; (80042d4 <__ieee754_pow+0x76c>)
 8003fe6:	f7fc fbf5 	bl	80007d4 <__aeabi_ddiv>
 8003fea:	ec41 0b1a 	vmov	d10, r0, r1
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	4639      	mov	r1, r7
 8003ff6:	f7fc fac3 	bl	8000580 <__aeabi_dmul>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004000:	9302      	str	r3, [sp, #8]
 8004002:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004006:	46ab      	mov	fp, r5
 8004008:	106d      	asrs	r5, r5, #1
 800400a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800400e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004012:	ec41 0b18 	vmov	d8, r0, r1
 8004016:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800401a:	2200      	movs	r2, #0
 800401c:	4640      	mov	r0, r8
 800401e:	4649      	mov	r1, r9
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	f7fc faac 	bl	8000580 <__aeabi_dmul>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4630      	mov	r0, r6
 800402e:	4639      	mov	r1, r7
 8004030:	f7fc f8ee 	bl	8000210 <__aeabi_dsub>
 8004034:	ec53 2b19 	vmov	r2, r3, d9
 8004038:	4606      	mov	r6, r0
 800403a:	460f      	mov	r7, r1
 800403c:	4620      	mov	r0, r4
 800403e:	4629      	mov	r1, r5
 8004040:	f7fc f8e6 	bl	8000210 <__aeabi_dsub>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4650      	mov	r0, sl
 800404a:	4659      	mov	r1, fp
 800404c:	f7fc f8e0 	bl	8000210 <__aeabi_dsub>
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	f7fc fa94 	bl	8000580 <__aeabi_dmul>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4630      	mov	r0, r6
 800405e:	4639      	mov	r1, r7
 8004060:	f7fc f8d6 	bl	8000210 <__aeabi_dsub>
 8004064:	ec53 2b1a 	vmov	r2, r3, d10
 8004068:	f7fc fa8a 	bl	8000580 <__aeabi_dmul>
 800406c:	ec53 2b18 	vmov	r2, r3, d8
 8004070:	ec41 0b19 	vmov	d9, r0, r1
 8004074:	ec51 0b18 	vmov	r0, r1, d8
 8004078:	f7fc fa82 	bl	8000580 <__aeabi_dmul>
 800407c:	a37c      	add	r3, pc, #496	; (adr r3, 8004270 <__ieee754_pow+0x708>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	4604      	mov	r4, r0
 8004084:	460d      	mov	r5, r1
 8004086:	f7fc fa7b 	bl	8000580 <__aeabi_dmul>
 800408a:	a37b      	add	r3, pc, #492	; (adr r3, 8004278 <__ieee754_pow+0x710>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc f8c0 	bl	8000214 <__adddf3>
 8004094:	4622      	mov	r2, r4
 8004096:	462b      	mov	r3, r5
 8004098:	f7fc fa72 	bl	8000580 <__aeabi_dmul>
 800409c:	a378      	add	r3, pc, #480	; (adr r3, 8004280 <__ieee754_pow+0x718>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f7fc f8b7 	bl	8000214 <__adddf3>
 80040a6:	4622      	mov	r2, r4
 80040a8:	462b      	mov	r3, r5
 80040aa:	f7fc fa69 	bl	8000580 <__aeabi_dmul>
 80040ae:	a376      	add	r3, pc, #472	; (adr r3, 8004288 <__ieee754_pow+0x720>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f7fc f8ae 	bl	8000214 <__adddf3>
 80040b8:	4622      	mov	r2, r4
 80040ba:	462b      	mov	r3, r5
 80040bc:	f7fc fa60 	bl	8000580 <__aeabi_dmul>
 80040c0:	a373      	add	r3, pc, #460	; (adr r3, 8004290 <__ieee754_pow+0x728>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc f8a5 	bl	8000214 <__adddf3>
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f7fc fa57 	bl	8000580 <__aeabi_dmul>
 80040d2:	a371      	add	r3, pc, #452	; (adr r3, 8004298 <__ieee754_pow+0x730>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f89c 	bl	8000214 <__adddf3>
 80040dc:	4622      	mov	r2, r4
 80040de:	4606      	mov	r6, r0
 80040e0:	460f      	mov	r7, r1
 80040e2:	462b      	mov	r3, r5
 80040e4:	4620      	mov	r0, r4
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7fc fa4a 	bl	8000580 <__aeabi_dmul>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4630      	mov	r0, r6
 80040f2:	4639      	mov	r1, r7
 80040f4:	f7fc fa44 	bl	8000580 <__aeabi_dmul>
 80040f8:	4642      	mov	r2, r8
 80040fa:	4604      	mov	r4, r0
 80040fc:	460d      	mov	r5, r1
 80040fe:	464b      	mov	r3, r9
 8004100:	ec51 0b18 	vmov	r0, r1, d8
 8004104:	f7fc f886 	bl	8000214 <__adddf3>
 8004108:	ec53 2b19 	vmov	r2, r3, d9
 800410c:	f7fc fa38 	bl	8000580 <__aeabi_dmul>
 8004110:	4622      	mov	r2, r4
 8004112:	462b      	mov	r3, r5
 8004114:	f7fc f87e 	bl	8000214 <__adddf3>
 8004118:	4642      	mov	r2, r8
 800411a:	4682      	mov	sl, r0
 800411c:	468b      	mov	fp, r1
 800411e:	464b      	mov	r3, r9
 8004120:	4640      	mov	r0, r8
 8004122:	4649      	mov	r1, r9
 8004124:	f7fc fa2c 	bl	8000580 <__aeabi_dmul>
 8004128:	4b6b      	ldr	r3, [pc, #428]	; (80042d8 <__ieee754_pow+0x770>)
 800412a:	2200      	movs	r2, #0
 800412c:	4606      	mov	r6, r0
 800412e:	460f      	mov	r7, r1
 8004130:	f7fc f870 	bl	8000214 <__adddf3>
 8004134:	4652      	mov	r2, sl
 8004136:	465b      	mov	r3, fp
 8004138:	f7fc f86c 	bl	8000214 <__adddf3>
 800413c:	2000      	movs	r0, #0
 800413e:	4604      	mov	r4, r0
 8004140:	460d      	mov	r5, r1
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4640      	mov	r0, r8
 8004148:	4649      	mov	r1, r9
 800414a:	f7fc fa19 	bl	8000580 <__aeabi_dmul>
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <__ieee754_pow+0x770>)
 8004150:	4680      	mov	r8, r0
 8004152:	4689      	mov	r9, r1
 8004154:	2200      	movs	r2, #0
 8004156:	4620      	mov	r0, r4
 8004158:	4629      	mov	r1, r5
 800415a:	f7fc f859 	bl	8000210 <__aeabi_dsub>
 800415e:	4632      	mov	r2, r6
 8004160:	463b      	mov	r3, r7
 8004162:	f7fc f855 	bl	8000210 <__aeabi_dsub>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4650      	mov	r0, sl
 800416c:	4659      	mov	r1, fp
 800416e:	f7fc f84f 	bl	8000210 <__aeabi_dsub>
 8004172:	ec53 2b18 	vmov	r2, r3, d8
 8004176:	f7fc fa03 	bl	8000580 <__aeabi_dmul>
 800417a:	4622      	mov	r2, r4
 800417c:	4606      	mov	r6, r0
 800417e:	460f      	mov	r7, r1
 8004180:	462b      	mov	r3, r5
 8004182:	ec51 0b19 	vmov	r0, r1, d9
 8004186:	f7fc f9fb 	bl	8000580 <__aeabi_dmul>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4630      	mov	r0, r6
 8004190:	4639      	mov	r1, r7
 8004192:	f7fc f83f 	bl	8000214 <__adddf3>
 8004196:	4606      	mov	r6, r0
 8004198:	460f      	mov	r7, r1
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4640      	mov	r0, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	f7fc f837 	bl	8000214 <__adddf3>
 80041a6:	a33e      	add	r3, pc, #248	; (adr r3, 80042a0 <__ieee754_pow+0x738>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	2000      	movs	r0, #0
 80041ae:	4604      	mov	r4, r0
 80041b0:	460d      	mov	r5, r1
 80041b2:	f7fc f9e5 	bl	8000580 <__aeabi_dmul>
 80041b6:	4642      	mov	r2, r8
 80041b8:	ec41 0b18 	vmov	d8, r0, r1
 80041bc:	464b      	mov	r3, r9
 80041be:	4620      	mov	r0, r4
 80041c0:	4629      	mov	r1, r5
 80041c2:	f7fc f825 	bl	8000210 <__aeabi_dsub>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4630      	mov	r0, r6
 80041cc:	4639      	mov	r1, r7
 80041ce:	f7fc f81f 	bl	8000210 <__aeabi_dsub>
 80041d2:	a335      	add	r3, pc, #212	; (adr r3, 80042a8 <__ieee754_pow+0x740>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f7fc f9d2 	bl	8000580 <__aeabi_dmul>
 80041dc:	a334      	add	r3, pc, #208	; (adr r3, 80042b0 <__ieee754_pow+0x748>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	4606      	mov	r6, r0
 80041e4:	460f      	mov	r7, r1
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7fc f9c9 	bl	8000580 <__aeabi_dmul>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4630      	mov	r0, r6
 80041f4:	4639      	mov	r1, r7
 80041f6:	f7fc f80d 	bl	8000214 <__adddf3>
 80041fa:	9a07      	ldr	r2, [sp, #28]
 80041fc:	4b37      	ldr	r3, [pc, #220]	; (80042dc <__ieee754_pow+0x774>)
 80041fe:	4413      	add	r3, r2
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f7fc f806 	bl	8000214 <__adddf3>
 8004208:	4682      	mov	sl, r0
 800420a:	9805      	ldr	r0, [sp, #20]
 800420c:	468b      	mov	fp, r1
 800420e:	f7fc f94d 	bl	80004ac <__aeabi_i2d>
 8004212:	9a07      	ldr	r2, [sp, #28]
 8004214:	4b32      	ldr	r3, [pc, #200]	; (80042e0 <__ieee754_pow+0x778>)
 8004216:	4413      	add	r3, r2
 8004218:	e9d3 8900 	ldrd	r8, r9, [r3]
 800421c:	4606      	mov	r6, r0
 800421e:	460f      	mov	r7, r1
 8004220:	4652      	mov	r2, sl
 8004222:	465b      	mov	r3, fp
 8004224:	ec51 0b18 	vmov	r0, r1, d8
 8004228:	f7fb fff4 	bl	8000214 <__adddf3>
 800422c:	4642      	mov	r2, r8
 800422e:	464b      	mov	r3, r9
 8004230:	f7fb fff0 	bl	8000214 <__adddf3>
 8004234:	4632      	mov	r2, r6
 8004236:	463b      	mov	r3, r7
 8004238:	f7fb ffec 	bl	8000214 <__adddf3>
 800423c:	2000      	movs	r0, #0
 800423e:	4632      	mov	r2, r6
 8004240:	463b      	mov	r3, r7
 8004242:	4604      	mov	r4, r0
 8004244:	460d      	mov	r5, r1
 8004246:	f7fb ffe3 	bl	8000210 <__aeabi_dsub>
 800424a:	4642      	mov	r2, r8
 800424c:	464b      	mov	r3, r9
 800424e:	f7fb ffdf 	bl	8000210 <__aeabi_dsub>
 8004252:	ec53 2b18 	vmov	r2, r3, d8
 8004256:	f7fb ffdb 	bl	8000210 <__aeabi_dsub>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4650      	mov	r0, sl
 8004260:	4659      	mov	r1, fp
 8004262:	e610      	b.n	8003e86 <__ieee754_pow+0x31e>
 8004264:	2401      	movs	r4, #1
 8004266:	e6a1      	b.n	8003fac <__ieee754_pow+0x444>
 8004268:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80042b8 <__ieee754_pow+0x750>
 800426c:	e617      	b.n	8003e9e <__ieee754_pow+0x336>
 800426e:	bf00      	nop
 8004270:	4a454eef 	.word	0x4a454eef
 8004274:	3fca7e28 	.word	0x3fca7e28
 8004278:	93c9db65 	.word	0x93c9db65
 800427c:	3fcd864a 	.word	0x3fcd864a
 8004280:	a91d4101 	.word	0xa91d4101
 8004284:	3fd17460 	.word	0x3fd17460
 8004288:	518f264d 	.word	0x518f264d
 800428c:	3fd55555 	.word	0x3fd55555
 8004290:	db6fabff 	.word	0xdb6fabff
 8004294:	3fdb6db6 	.word	0x3fdb6db6
 8004298:	33333303 	.word	0x33333303
 800429c:	3fe33333 	.word	0x3fe33333
 80042a0:	e0000000 	.word	0xe0000000
 80042a4:	3feec709 	.word	0x3feec709
 80042a8:	dc3a03fd 	.word	0xdc3a03fd
 80042ac:	3feec709 	.word	0x3feec709
 80042b0:	145b01f5 	.word	0x145b01f5
 80042b4:	be3e2fe0 	.word	0xbe3e2fe0
 80042b8:	00000000 	.word	0x00000000
 80042bc:	3ff00000 	.word	0x3ff00000
 80042c0:	7ff00000 	.word	0x7ff00000
 80042c4:	43400000 	.word	0x43400000
 80042c8:	0003988e 	.word	0x0003988e
 80042cc:	000bb679 	.word	0x000bb679
 80042d0:	080048f0 	.word	0x080048f0
 80042d4:	3ff00000 	.word	0x3ff00000
 80042d8:	40080000 	.word	0x40080000
 80042dc:	08004910 	.word	0x08004910
 80042e0:	08004900 	.word	0x08004900
 80042e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80045bc <__ieee754_pow+0xa54>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	4640      	mov	r0, r8
 80042ec:	4649      	mov	r1, r9
 80042ee:	f7fb ff91 	bl	8000214 <__adddf3>
 80042f2:	4622      	mov	r2, r4
 80042f4:	ec41 0b1a 	vmov	d10, r0, r1
 80042f8:	462b      	mov	r3, r5
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	f7fb ff87 	bl	8000210 <__aeabi_dsub>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	ec51 0b1a 	vmov	r0, r1, d10
 800430a:	f7fc fbc9 	bl	8000aa0 <__aeabi_dcmpgt>
 800430e:	2800      	cmp	r0, #0
 8004310:	f47f ae04 	bne.w	8003f1c <__ieee754_pow+0x3b4>
 8004314:	4aa4      	ldr	r2, [pc, #656]	; (80045a8 <__ieee754_pow+0xa40>)
 8004316:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800431a:	4293      	cmp	r3, r2
 800431c:	f340 8108 	ble.w	8004530 <__ieee754_pow+0x9c8>
 8004320:	151b      	asrs	r3, r3, #20
 8004322:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004326:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800432a:	fa4a f303 	asr.w	r3, sl, r3
 800432e:	445b      	add	r3, fp
 8004330:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004334:	4e9d      	ldr	r6, [pc, #628]	; (80045ac <__ieee754_pow+0xa44>)
 8004336:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800433a:	4116      	asrs	r6, r2
 800433c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004340:	2000      	movs	r0, #0
 8004342:	ea23 0106 	bic.w	r1, r3, r6
 8004346:	f1c2 0214 	rsb	r2, r2, #20
 800434a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800434e:	fa4a fa02 	asr.w	sl, sl, r2
 8004352:	f1bb 0f00 	cmp.w	fp, #0
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	bfb8      	it	lt
 8004360:	f1ca 0a00 	rsblt	sl, sl, #0
 8004364:	f7fb ff54 	bl	8000210 <__aeabi_dsub>
 8004368:	ec41 0b19 	vmov	d9, r0, r1
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	ec51 0b19 	vmov	r0, r1, d9
 8004374:	f7fb ff4e 	bl	8000214 <__adddf3>
 8004378:	a37b      	add	r3, pc, #492	; (adr r3, 8004568 <__ieee754_pow+0xa00>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	2000      	movs	r0, #0
 8004380:	4604      	mov	r4, r0
 8004382:	460d      	mov	r5, r1
 8004384:	f7fc f8fc 	bl	8000580 <__aeabi_dmul>
 8004388:	ec53 2b19 	vmov	r2, r3, d9
 800438c:	4606      	mov	r6, r0
 800438e:	460f      	mov	r7, r1
 8004390:	4620      	mov	r0, r4
 8004392:	4629      	mov	r1, r5
 8004394:	f7fb ff3c 	bl	8000210 <__aeabi_dsub>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4640      	mov	r0, r8
 800439e:	4649      	mov	r1, r9
 80043a0:	f7fb ff36 	bl	8000210 <__aeabi_dsub>
 80043a4:	a372      	add	r3, pc, #456	; (adr r3, 8004570 <__ieee754_pow+0xa08>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f7fc f8e9 	bl	8000580 <__aeabi_dmul>
 80043ae:	a372      	add	r3, pc, #456	; (adr r3, 8004578 <__ieee754_pow+0xa10>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	4680      	mov	r8, r0
 80043b6:	4689      	mov	r9, r1
 80043b8:	4620      	mov	r0, r4
 80043ba:	4629      	mov	r1, r5
 80043bc:	f7fc f8e0 	bl	8000580 <__aeabi_dmul>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4640      	mov	r0, r8
 80043c6:	4649      	mov	r1, r9
 80043c8:	f7fb ff24 	bl	8000214 <__adddf3>
 80043cc:	4604      	mov	r4, r0
 80043ce:	460d      	mov	r5, r1
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4630      	mov	r0, r6
 80043d6:	4639      	mov	r1, r7
 80043d8:	f7fb ff1c 	bl	8000214 <__adddf3>
 80043dc:	4632      	mov	r2, r6
 80043de:	463b      	mov	r3, r7
 80043e0:	4680      	mov	r8, r0
 80043e2:	4689      	mov	r9, r1
 80043e4:	f7fb ff14 	bl	8000210 <__aeabi_dsub>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4620      	mov	r0, r4
 80043ee:	4629      	mov	r1, r5
 80043f0:	f7fb ff0e 	bl	8000210 <__aeabi_dsub>
 80043f4:	4642      	mov	r2, r8
 80043f6:	4606      	mov	r6, r0
 80043f8:	460f      	mov	r7, r1
 80043fa:	464b      	mov	r3, r9
 80043fc:	4640      	mov	r0, r8
 80043fe:	4649      	mov	r1, r9
 8004400:	f7fc f8be 	bl	8000580 <__aeabi_dmul>
 8004404:	a35e      	add	r3, pc, #376	; (adr r3, 8004580 <__ieee754_pow+0xa18>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	4604      	mov	r4, r0
 800440c:	460d      	mov	r5, r1
 800440e:	f7fc f8b7 	bl	8000580 <__aeabi_dmul>
 8004412:	a35d      	add	r3, pc, #372	; (adr r3, 8004588 <__ieee754_pow+0xa20>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fb fefa 	bl	8000210 <__aeabi_dsub>
 800441c:	4622      	mov	r2, r4
 800441e:	462b      	mov	r3, r5
 8004420:	f7fc f8ae 	bl	8000580 <__aeabi_dmul>
 8004424:	a35a      	add	r3, pc, #360	; (adr r3, 8004590 <__ieee754_pow+0xa28>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fb fef3 	bl	8000214 <__adddf3>
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	f7fc f8a5 	bl	8000580 <__aeabi_dmul>
 8004436:	a358      	add	r3, pc, #352	; (adr r3, 8004598 <__ieee754_pow+0xa30>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fb fee8 	bl	8000210 <__aeabi_dsub>
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	f7fc f89c 	bl	8000580 <__aeabi_dmul>
 8004448:	a355      	add	r3, pc, #340	; (adr r3, 80045a0 <__ieee754_pow+0xa38>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fb fee1 	bl	8000214 <__adddf3>
 8004452:	4622      	mov	r2, r4
 8004454:	462b      	mov	r3, r5
 8004456:	f7fc f893 	bl	8000580 <__aeabi_dmul>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4640      	mov	r0, r8
 8004460:	4649      	mov	r1, r9
 8004462:	f7fb fed5 	bl	8000210 <__aeabi_dsub>
 8004466:	4604      	mov	r4, r0
 8004468:	460d      	mov	r5, r1
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4640      	mov	r0, r8
 8004470:	4649      	mov	r1, r9
 8004472:	f7fc f885 	bl	8000580 <__aeabi_dmul>
 8004476:	2200      	movs	r2, #0
 8004478:	ec41 0b19 	vmov	d9, r0, r1
 800447c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004480:	4620      	mov	r0, r4
 8004482:	4629      	mov	r1, r5
 8004484:	f7fb fec4 	bl	8000210 <__aeabi_dsub>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	ec51 0b19 	vmov	r0, r1, d9
 8004490:	f7fc f9a0 	bl	80007d4 <__aeabi_ddiv>
 8004494:	4632      	mov	r2, r6
 8004496:	4604      	mov	r4, r0
 8004498:	460d      	mov	r5, r1
 800449a:	463b      	mov	r3, r7
 800449c:	4640      	mov	r0, r8
 800449e:	4649      	mov	r1, r9
 80044a0:	f7fc f86e 	bl	8000580 <__aeabi_dmul>
 80044a4:	4632      	mov	r2, r6
 80044a6:	463b      	mov	r3, r7
 80044a8:	f7fb feb4 	bl	8000214 <__adddf3>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4620      	mov	r0, r4
 80044b2:	4629      	mov	r1, r5
 80044b4:	f7fb feac 	bl	8000210 <__aeabi_dsub>
 80044b8:	4642      	mov	r2, r8
 80044ba:	464b      	mov	r3, r9
 80044bc:	f7fb fea8 	bl	8000210 <__aeabi_dsub>
 80044c0:	460b      	mov	r3, r1
 80044c2:	4602      	mov	r2, r0
 80044c4:	493a      	ldr	r1, [pc, #232]	; (80045b0 <__ieee754_pow+0xa48>)
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fb fea2 	bl	8000210 <__aeabi_dsub>
 80044cc:	ec41 0b10 	vmov	d0, r0, r1
 80044d0:	ee10 3a90 	vmov	r3, s1
 80044d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80044d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044dc:	da2b      	bge.n	8004536 <__ieee754_pow+0x9ce>
 80044de:	4650      	mov	r0, sl
 80044e0:	f000 f966 	bl	80047b0 <scalbn>
 80044e4:	ec51 0b10 	vmov	r0, r1, d0
 80044e8:	ec53 2b18 	vmov	r2, r3, d8
 80044ec:	f7ff bbed 	b.w	8003cca <__ieee754_pow+0x162>
 80044f0:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <__ieee754_pow+0xa4c>)
 80044f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80044f6:	429e      	cmp	r6, r3
 80044f8:	f77f af0c 	ble.w	8004314 <__ieee754_pow+0x7ac>
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <__ieee754_pow+0xa50>)
 80044fe:	440b      	add	r3, r1
 8004500:	4303      	orrs	r3, r0
 8004502:	d009      	beq.n	8004518 <__ieee754_pow+0x9b0>
 8004504:	ec51 0b18 	vmov	r0, r1, d8
 8004508:	2200      	movs	r2, #0
 800450a:	2300      	movs	r3, #0
 800450c:	f7fc faaa 	bl	8000a64 <__aeabi_dcmplt>
 8004510:	3800      	subs	r0, #0
 8004512:	bf18      	it	ne
 8004514:	2001      	movne	r0, #1
 8004516:	e447      	b.n	8003da8 <__ieee754_pow+0x240>
 8004518:	4622      	mov	r2, r4
 800451a:	462b      	mov	r3, r5
 800451c:	f7fb fe78 	bl	8000210 <__aeabi_dsub>
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	f7fc fab2 	bl	8000a8c <__aeabi_dcmpge>
 8004528:	2800      	cmp	r0, #0
 800452a:	f43f aef3 	beq.w	8004314 <__ieee754_pow+0x7ac>
 800452e:	e7e9      	b.n	8004504 <__ieee754_pow+0x99c>
 8004530:	f04f 0a00 	mov.w	sl, #0
 8004534:	e71a      	b.n	800436c <__ieee754_pow+0x804>
 8004536:	ec51 0b10 	vmov	r0, r1, d0
 800453a:	4619      	mov	r1, r3
 800453c:	e7d4      	b.n	80044e8 <__ieee754_pow+0x980>
 800453e:	491c      	ldr	r1, [pc, #112]	; (80045b0 <__ieee754_pow+0xa48>)
 8004540:	2000      	movs	r0, #0
 8004542:	f7ff bb30 	b.w	8003ba6 <__ieee754_pow+0x3e>
 8004546:	2000      	movs	r0, #0
 8004548:	2100      	movs	r1, #0
 800454a:	f7ff bb2c 	b.w	8003ba6 <__ieee754_pow+0x3e>
 800454e:	4630      	mov	r0, r6
 8004550:	4639      	mov	r1, r7
 8004552:	f7ff bb28 	b.w	8003ba6 <__ieee754_pow+0x3e>
 8004556:	9204      	str	r2, [sp, #16]
 8004558:	f7ff bb7a 	b.w	8003c50 <__ieee754_pow+0xe8>
 800455c:	2300      	movs	r3, #0
 800455e:	f7ff bb64 	b.w	8003c2a <__ieee754_pow+0xc2>
 8004562:	bf00      	nop
 8004564:	f3af 8000 	nop.w
 8004568:	00000000 	.word	0x00000000
 800456c:	3fe62e43 	.word	0x3fe62e43
 8004570:	fefa39ef 	.word	0xfefa39ef
 8004574:	3fe62e42 	.word	0x3fe62e42
 8004578:	0ca86c39 	.word	0x0ca86c39
 800457c:	be205c61 	.word	0xbe205c61
 8004580:	72bea4d0 	.word	0x72bea4d0
 8004584:	3e663769 	.word	0x3e663769
 8004588:	c5d26bf1 	.word	0xc5d26bf1
 800458c:	3ebbbd41 	.word	0x3ebbbd41
 8004590:	af25de2c 	.word	0xaf25de2c
 8004594:	3f11566a 	.word	0x3f11566a
 8004598:	16bebd93 	.word	0x16bebd93
 800459c:	3f66c16c 	.word	0x3f66c16c
 80045a0:	5555553e 	.word	0x5555553e
 80045a4:	3fc55555 	.word	0x3fc55555
 80045a8:	3fe00000 	.word	0x3fe00000
 80045ac:	000fffff 	.word	0x000fffff
 80045b0:	3ff00000 	.word	0x3ff00000
 80045b4:	4090cbff 	.word	0x4090cbff
 80045b8:	3f6f3400 	.word	0x3f6f3400
 80045bc:	652b82fe 	.word	0x652b82fe
 80045c0:	3c971547 	.word	0x3c971547

080045c4 <__ieee754_sqrt>:
 80045c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c8:	ec55 4b10 	vmov	r4, r5, d0
 80045cc:	4e55      	ldr	r6, [pc, #340]	; (8004724 <__ieee754_sqrt+0x160>)
 80045ce:	43ae      	bics	r6, r5
 80045d0:	ee10 0a10 	vmov	r0, s0
 80045d4:	ee10 3a10 	vmov	r3, s0
 80045d8:	462a      	mov	r2, r5
 80045da:	4629      	mov	r1, r5
 80045dc:	d110      	bne.n	8004600 <__ieee754_sqrt+0x3c>
 80045de:	ee10 2a10 	vmov	r2, s0
 80045e2:	462b      	mov	r3, r5
 80045e4:	f7fb ffcc 	bl	8000580 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7fb fe10 	bl	8000214 <__adddf3>
 80045f4:	4604      	mov	r4, r0
 80045f6:	460d      	mov	r5, r1
 80045f8:	ec45 4b10 	vmov	d0, r4, r5
 80045fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004600:	2d00      	cmp	r5, #0
 8004602:	dc10      	bgt.n	8004626 <__ieee754_sqrt+0x62>
 8004604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004608:	4330      	orrs	r0, r6
 800460a:	d0f5      	beq.n	80045f8 <__ieee754_sqrt+0x34>
 800460c:	b15d      	cbz	r5, 8004626 <__ieee754_sqrt+0x62>
 800460e:	ee10 2a10 	vmov	r2, s0
 8004612:	462b      	mov	r3, r5
 8004614:	ee10 0a10 	vmov	r0, s0
 8004618:	f7fb fdfa 	bl	8000210 <__aeabi_dsub>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	f7fc f8d8 	bl	80007d4 <__aeabi_ddiv>
 8004624:	e7e6      	b.n	80045f4 <__ieee754_sqrt+0x30>
 8004626:	1512      	asrs	r2, r2, #20
 8004628:	d074      	beq.n	8004714 <__ieee754_sqrt+0x150>
 800462a:	07d4      	lsls	r4, r2, #31
 800462c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004630:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004638:	bf5e      	ittt	pl
 800463a:	0fda      	lsrpl	r2, r3, #31
 800463c:	005b      	lslpl	r3, r3, #1
 800463e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004642:	2400      	movs	r4, #0
 8004644:	0fda      	lsrs	r2, r3, #31
 8004646:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800464a:	107f      	asrs	r7, r7, #1
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2516      	movs	r5, #22
 8004650:	4620      	mov	r0, r4
 8004652:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004656:	1886      	adds	r6, r0, r2
 8004658:	428e      	cmp	r6, r1
 800465a:	bfde      	ittt	le
 800465c:	1b89      	suble	r1, r1, r6
 800465e:	18b0      	addle	r0, r6, r2
 8004660:	18a4      	addle	r4, r4, r2
 8004662:	0049      	lsls	r1, r1, #1
 8004664:	3d01      	subs	r5, #1
 8004666:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800466a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800466e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004672:	d1f0      	bne.n	8004656 <__ieee754_sqrt+0x92>
 8004674:	462a      	mov	r2, r5
 8004676:	f04f 0e20 	mov.w	lr, #32
 800467a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800467e:	4281      	cmp	r1, r0
 8004680:	eb06 0c05 	add.w	ip, r6, r5
 8004684:	dc02      	bgt.n	800468c <__ieee754_sqrt+0xc8>
 8004686:	d113      	bne.n	80046b0 <__ieee754_sqrt+0xec>
 8004688:	459c      	cmp	ip, r3
 800468a:	d811      	bhi.n	80046b0 <__ieee754_sqrt+0xec>
 800468c:	f1bc 0f00 	cmp.w	ip, #0
 8004690:	eb0c 0506 	add.w	r5, ip, r6
 8004694:	da43      	bge.n	800471e <__ieee754_sqrt+0x15a>
 8004696:	2d00      	cmp	r5, #0
 8004698:	db41      	blt.n	800471e <__ieee754_sqrt+0x15a>
 800469a:	f100 0801 	add.w	r8, r0, #1
 800469e:	1a09      	subs	r1, r1, r0
 80046a0:	459c      	cmp	ip, r3
 80046a2:	bf88      	it	hi
 80046a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80046a8:	eba3 030c 	sub.w	r3, r3, ip
 80046ac:	4432      	add	r2, r6
 80046ae:	4640      	mov	r0, r8
 80046b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80046b4:	f1be 0e01 	subs.w	lr, lr, #1
 80046b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80046bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80046c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80046c4:	d1db      	bne.n	800467e <__ieee754_sqrt+0xba>
 80046c6:	430b      	orrs	r3, r1
 80046c8:	d006      	beq.n	80046d8 <__ieee754_sqrt+0x114>
 80046ca:	1c50      	adds	r0, r2, #1
 80046cc:	bf13      	iteet	ne
 80046ce:	3201      	addne	r2, #1
 80046d0:	3401      	addeq	r4, #1
 80046d2:	4672      	moveq	r2, lr
 80046d4:	f022 0201 	bicne.w	r2, r2, #1
 80046d8:	1063      	asrs	r3, r4, #1
 80046da:	0852      	lsrs	r2, r2, #1
 80046dc:	07e1      	lsls	r1, r4, #31
 80046de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80046e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80046e6:	bf48      	it	mi
 80046e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80046ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80046f0:	4614      	mov	r4, r2
 80046f2:	e781      	b.n	80045f8 <__ieee754_sqrt+0x34>
 80046f4:	0ad9      	lsrs	r1, r3, #11
 80046f6:	3815      	subs	r0, #21
 80046f8:	055b      	lsls	r3, r3, #21
 80046fa:	2900      	cmp	r1, #0
 80046fc:	d0fa      	beq.n	80046f4 <__ieee754_sqrt+0x130>
 80046fe:	02cd      	lsls	r5, r1, #11
 8004700:	d50a      	bpl.n	8004718 <__ieee754_sqrt+0x154>
 8004702:	f1c2 0420 	rsb	r4, r2, #32
 8004706:	fa23 f404 	lsr.w	r4, r3, r4
 800470a:	1e55      	subs	r5, r2, #1
 800470c:	4093      	lsls	r3, r2
 800470e:	4321      	orrs	r1, r4
 8004710:	1b42      	subs	r2, r0, r5
 8004712:	e78a      	b.n	800462a <__ieee754_sqrt+0x66>
 8004714:	4610      	mov	r0, r2
 8004716:	e7f0      	b.n	80046fa <__ieee754_sqrt+0x136>
 8004718:	0049      	lsls	r1, r1, #1
 800471a:	3201      	adds	r2, #1
 800471c:	e7ef      	b.n	80046fe <__ieee754_sqrt+0x13a>
 800471e:	4680      	mov	r8, r0
 8004720:	e7bd      	b.n	800469e <__ieee754_sqrt+0xda>
 8004722:	bf00      	nop
 8004724:	7ff00000 	.word	0x7ff00000

08004728 <with_errno>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	4604      	mov	r4, r0
 800472c:	460d      	mov	r5, r1
 800472e:	4616      	mov	r6, r2
 8004730:	f7ff f978 	bl	8003a24 <__errno>
 8004734:	4629      	mov	r1, r5
 8004736:	6006      	str	r6, [r0, #0]
 8004738:	4620      	mov	r0, r4
 800473a:	bd70      	pop	{r4, r5, r6, pc}

0800473c <xflow>:
 800473c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800473e:	4614      	mov	r4, r2
 8004740:	461d      	mov	r5, r3
 8004742:	b108      	cbz	r0, 8004748 <xflow+0xc>
 8004744:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004748:	e9cd 2300 	strd	r2, r3, [sp]
 800474c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004750:	4620      	mov	r0, r4
 8004752:	4629      	mov	r1, r5
 8004754:	f7fb ff14 	bl	8000580 <__aeabi_dmul>
 8004758:	2222      	movs	r2, #34	; 0x22
 800475a:	b003      	add	sp, #12
 800475c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004760:	f7ff bfe2 	b.w	8004728 <with_errno>

08004764 <__math_uflow>:
 8004764:	b508      	push	{r3, lr}
 8004766:	2200      	movs	r2, #0
 8004768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800476c:	f7ff ffe6 	bl	800473c <xflow>
 8004770:	ec41 0b10 	vmov	d0, r0, r1
 8004774:	bd08      	pop	{r3, pc}

08004776 <__math_oflow>:
 8004776:	b508      	push	{r3, lr}
 8004778:	2200      	movs	r2, #0
 800477a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800477e:	f7ff ffdd 	bl	800473c <xflow>
 8004782:	ec41 0b10 	vmov	d0, r0, r1
 8004786:	bd08      	pop	{r3, pc}

08004788 <fabs>:
 8004788:	ec51 0b10 	vmov	r0, r1, d0
 800478c:	ee10 2a10 	vmov	r2, s0
 8004790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004794:	ec43 2b10 	vmov	d0, r2, r3
 8004798:	4770      	bx	lr

0800479a <finite>:
 800479a:	b082      	sub	sp, #8
 800479c:	ed8d 0b00 	vstr	d0, [sp]
 80047a0:	9801      	ldr	r0, [sp, #4]
 80047a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80047a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80047aa:	0fc0      	lsrs	r0, r0, #31
 80047ac:	b002      	add	sp, #8
 80047ae:	4770      	bx	lr

080047b0 <scalbn>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	ec55 4b10 	vmov	r4, r5, d0
 80047b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80047ba:	4606      	mov	r6, r0
 80047bc:	462b      	mov	r3, r5
 80047be:	b99a      	cbnz	r2, 80047e8 <scalbn+0x38>
 80047c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80047c4:	4323      	orrs	r3, r4
 80047c6:	d036      	beq.n	8004836 <scalbn+0x86>
 80047c8:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <scalbn+0x100>)
 80047ca:	4629      	mov	r1, r5
 80047cc:	ee10 0a10 	vmov	r0, s0
 80047d0:	2200      	movs	r2, #0
 80047d2:	f7fb fed5 	bl	8000580 <__aeabi_dmul>
 80047d6:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <scalbn+0x104>)
 80047d8:	429e      	cmp	r6, r3
 80047da:	4604      	mov	r4, r0
 80047dc:	460d      	mov	r5, r1
 80047de:	da10      	bge.n	8004802 <scalbn+0x52>
 80047e0:	a32b      	add	r3, pc, #172	; (adr r3, 8004890 <scalbn+0xe0>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	e03a      	b.n	800485e <scalbn+0xae>
 80047e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80047ec:	428a      	cmp	r2, r1
 80047ee:	d10c      	bne.n	800480a <scalbn+0x5a>
 80047f0:	ee10 2a10 	vmov	r2, s0
 80047f4:	4620      	mov	r0, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7fb fd0c 	bl	8000214 <__adddf3>
 80047fc:	4604      	mov	r4, r0
 80047fe:	460d      	mov	r5, r1
 8004800:	e019      	b.n	8004836 <scalbn+0x86>
 8004802:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004806:	460b      	mov	r3, r1
 8004808:	3a36      	subs	r2, #54	; 0x36
 800480a:	4432      	add	r2, r6
 800480c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004810:	428a      	cmp	r2, r1
 8004812:	dd08      	ble.n	8004826 <scalbn+0x76>
 8004814:	2d00      	cmp	r5, #0
 8004816:	a120      	add	r1, pc, #128	; (adr r1, 8004898 <scalbn+0xe8>)
 8004818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800481c:	da1c      	bge.n	8004858 <scalbn+0xa8>
 800481e:	a120      	add	r1, pc, #128	; (adr r1, 80048a0 <scalbn+0xf0>)
 8004820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004824:	e018      	b.n	8004858 <scalbn+0xa8>
 8004826:	2a00      	cmp	r2, #0
 8004828:	dd08      	ble.n	800483c <scalbn+0x8c>
 800482a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800482e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004832:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004836:	ec45 4b10 	vmov	d0, r4, r5
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004840:	da19      	bge.n	8004876 <scalbn+0xc6>
 8004842:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004846:	429e      	cmp	r6, r3
 8004848:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800484c:	dd0a      	ble.n	8004864 <scalbn+0xb4>
 800484e:	a112      	add	r1, pc, #72	; (adr r1, 8004898 <scalbn+0xe8>)
 8004850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e2      	bne.n	800481e <scalbn+0x6e>
 8004858:	a30f      	add	r3, pc, #60	; (adr r3, 8004898 <scalbn+0xe8>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fe8f 	bl	8000580 <__aeabi_dmul>
 8004862:	e7cb      	b.n	80047fc <scalbn+0x4c>
 8004864:	a10a      	add	r1, pc, #40	; (adr r1, 8004890 <scalbn+0xe0>)
 8004866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0b8      	beq.n	80047e0 <scalbn+0x30>
 800486e:	a10e      	add	r1, pc, #56	; (adr r1, 80048a8 <scalbn+0xf8>)
 8004870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004874:	e7b4      	b.n	80047e0 <scalbn+0x30>
 8004876:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800487a:	3236      	adds	r2, #54	; 0x36
 800487c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004880:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004884:	4620      	mov	r0, r4
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <scalbn+0x108>)
 8004888:	2200      	movs	r2, #0
 800488a:	e7e8      	b.n	800485e <scalbn+0xae>
 800488c:	f3af 8000 	nop.w
 8004890:	c2f8f359 	.word	0xc2f8f359
 8004894:	01a56e1f 	.word	0x01a56e1f
 8004898:	8800759c 	.word	0x8800759c
 800489c:	7e37e43c 	.word	0x7e37e43c
 80048a0:	8800759c 	.word	0x8800759c
 80048a4:	fe37e43c 	.word	0xfe37e43c
 80048a8:	c2f8f359 	.word	0xc2f8f359
 80048ac:	81a56e1f 	.word	0x81a56e1f
 80048b0:	43500000 	.word	0x43500000
 80048b4:	ffff3cb0 	.word	0xffff3cb0
 80048b8:	3c900000 	.word	0x3c900000

080048bc <_init>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr

080048c8 <_fini>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr
