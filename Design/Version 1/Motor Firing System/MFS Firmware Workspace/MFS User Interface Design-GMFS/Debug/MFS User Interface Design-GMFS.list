
MFS User Interface Design-GMFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d8  080036d8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e0  080036e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080036e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000014  080036fc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080036fc  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b20  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b1  00000000  00000000  00029b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211ce  00000000  00000000  0002c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a549  00000000  00000000  0004d59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c86ee  00000000  00000000  00057ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001201d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e00  00000000  00000000  00120228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036a0 	.word	0x080036a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	080036a0 	.word	0x080036a0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <seq_check>:
//char isu_check[2]='DD';
//char kill[2]='KK';
//char ignition_switch[2]='II;
//char launch[2]='LL';
void seq_check()
	{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)== 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0)
 800051c:	2108      	movs	r1, #8
 800051e:	4821      	ldr	r0, [pc, #132]	; (80005a4 <seq_check+0x8c>)
 8000520:	f001 fc58 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d128      	bne.n	800057c <seq_check+0x64>
 800052a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052e:	481d      	ldr	r0, [pc, #116]	; (80005a4 <seq_check+0x8c>)
 8000530:	f001 fc50 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d120      	bne.n	800057c <seq_check+0x64>
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4819      	ldr	r0, [pc, #100]	; (80005a4 <seq_check+0x8c>)
 8000540:	f001 fc48 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d118      	bne.n	800057c <seq_check+0x64>
			{seq_flag = 1;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <seq_check+0x90>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
			tx_key_flag=1;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <seq_check+0x94>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
			tx_arm_flag=1;
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <seq_check+0x98>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
			tx_launch_flag=1;
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <seq_check+0x9c>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
			tx_ignition_flag=1;
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <seq_check+0xa0>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
			tx_init_flag=1;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <seq_check+0xa4>)
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
			tx_error_flag=1;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <seq_check+0xa8>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
			tx_kill_flag=1;
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <seq_check+0xac>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
			}
		else if(Sec_key==0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) seq_flag=0;
	}
 800057a:	e011      	b.n	80005a0 <seq_check+0x88>
		else if(Sec_key==0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) seq_flag=0;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <seq_check+0xb0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	f083 0301 	eor.w	r3, r3, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00a      	beq.n	80005a0 <seq_check+0x88>
 800058a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <seq_check+0x8c>)
 8000590:	f001 fc20 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b01      	cmp	r3, #1
 8000598:	d102      	bne.n	80005a0 <seq_check+0x88>
 800059a:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <seq_check+0x90>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
	}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020800 	.word	0x40020800
 80005a8:	20000121 	.word	0x20000121
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000001 	.word	0x20000001
 80005b4:	20000002 	.word	0x20000002
 80005b8:	20000003 	.word	0x20000003
 80005bc:	20000005 	.word	0x20000005
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000006 	.word	0x20000006
 80005c8:	2000011e 	.word	0x2000011e

080005cc <error>:
void error()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	memset(tx_data,'F',2);
 80005d0:	2202      	movs	r2, #2
 80005d2:	2146      	movs	r1, #70	; 0x46
 80005d4:	4814      	ldr	r0, [pc, #80]	; (8000628 <error+0x5c>)
 80005d6:	f003 f85b 	bl	8003690 <memset>
	HAL_UART_Transmit(&huart5, tx_data, strlen(tx_data),100);
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <error+0x5c>)
 80005dc:	f7ff fe12 	bl	8000204 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	4910      	ldr	r1, [pc, #64]	; (8000628 <error+0x5c>)
 80005e8:	4810      	ldr	r0, [pc, #64]	; (800062c <error+0x60>)
 80005ea:	f002 fa3c 	bl	8002a66 <HAL_UART_Transmit>
	if(tx_error_flag==1){
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <error+0x64>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d015      	beq.n	8000622 <error+0x56>
	HAL_Delay(3000);
 80005f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005fa:	f000 fdb1 	bl	8001160 <HAL_Delay>
	HAL_UART_Transmit(&huart4, rx_data, strlen(rx_data),100);
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <error+0x68>)
 8000600:	f7ff fe00 	bl	8000204 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	490a      	ldr	r1, [pc, #40]	; (8000634 <error+0x68>)
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <error+0x6c>)
 800060e:	f002 fa2a 	bl	8002a66 <HAL_UART_Transmit>
	memset(rx_data,'\0',2);
 8000612:	2202      	movs	r2, #2
 8000614:	2100      	movs	r1, #0
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <error+0x68>)
 8000618:	f003 f83a 	bl	8003690 <memset>
	tx_error_flag=0;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <error+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	}
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000118 	.word	0x20000118
 800062c:	20000074 	.word	0x20000074
 8000630:	20000004 	.word	0x20000004
 8000634:	2000011c 	.word	0x2000011c
 8000638:	20000030 	.word	0x20000030

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fd1c 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f9b8 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 fa9c 	bl	8000b84 <MX_GPIO_Init>
  MX_DMA_Init();
 800064c:	f000 fa7a 	bl	8000b44 <MX_DMA_Init>
  MX_UART5_Init();
 8000650:	f000 fa4e 	bl	8000af0 <MX_UART5_Init>
  MX_UART4_Init();
 8000654:	f000 fa22 	bl	8000a9c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_DMA(&huart5, rx_data, sizeof(rx_data));
 8000658:	2202      	movs	r2, #2
 800065a:	49b4      	ldr	r1, [pc, #720]	; (800092c <main+0x2f0>)
 800065c:	48b4      	ldr	r0, [pc, #720]	; (8000930 <main+0x2f4>)
 800065e:	f002 fa94 	bl	8002b8a <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		seq_check();
 8000662:	f7ff ff59 	bl	8000518 <seq_check>
		if(seq_flag ==1){
 8000666:	4bb3      	ldr	r3, [pc, #716]	; (8000934 <main+0x2f8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	f000 818a 	beq.w	8000984 <main+0x348>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0 || Sec_key == 0)
 8000670:	2108      	movs	r1, #8
 8000672:	48b1      	ldr	r0, [pc, #708]	; (8000938 <main+0x2fc>)
 8000674:	f001 fbae 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <main+0x50>
 800067e:	4baf      	ldr	r3, [pc, #700]	; (800093c <main+0x300>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f083 0301 	eor.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d028      	beq.n	80006de <main+0xa2>
			{
			memset(tx_data,'N',2); //Initialisation
 800068c:	2202      	movs	r2, #2
 800068e:	214e      	movs	r1, #78	; 0x4e
 8000690:	48ab      	ldr	r0, [pc, #684]	; (8000940 <main+0x304>)
 8000692:	f002 fffd 	bl	8003690 <memset>
			    HAL_UART_Transmit(&huart5, tx_data, strlen(tx_data),100);
 8000696:	48aa      	ldr	r0, [pc, #680]	; (8000940 <main+0x304>)
 8000698:	f7ff fdb4 	bl	8000204 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	49a7      	ldr	r1, [pc, #668]	; (8000940 <main+0x304>)
 80006a4:	48a2      	ldr	r0, [pc, #648]	; (8000930 <main+0x2f4>)
 80006a6:	f002 f9de 	bl	8002a66 <HAL_UART_Transmit>
			    if(tx_init_flag==1){
 80006aa:	4ba6      	ldr	r3, [pc, #664]	; (8000944 <main+0x308>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d015      	beq.n	80006de <main+0xa2>
				HAL_Delay(3000);
 80006b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006b6:	f000 fd53 	bl	8001160 <HAL_Delay>
				HAL_UART_Transmit(&huart4, rx_data, strlen(rx_data),100);
 80006ba:	489c      	ldr	r0, [pc, #624]	; (800092c <main+0x2f0>)
 80006bc:	f7ff fda2 	bl	8000204 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	4999      	ldr	r1, [pc, #612]	; (800092c <main+0x2f0>)
 80006c8:	489f      	ldr	r0, [pc, #636]	; (8000948 <main+0x30c>)
 80006ca:	f002 f9cc 	bl	8002a66 <HAL_UART_Transmit>
				memset(rx_data,'\0',2);
 80006ce:	2202      	movs	r2, #2
 80006d0:	2100      	movs	r1, #0
 80006d2:	4896      	ldr	r0, [pc, #600]	; (800092c <main+0x2f0>)
 80006d4:	f002 ffdc 	bl	8003690 <memset>
				tx_init_flag=0;
 80006d8:	4b9a      	ldr	r3, [pc, #616]	; (8000944 <main+0x308>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
			}
			}
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 1 || Sec_key == 1)
 80006de:	2108      	movs	r1, #8
 80006e0:	4895      	ldr	r0, [pc, #596]	; (8000938 <main+0x2fc>)
 80006e2:	f001 fb77 	bl	8001dd4 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d003      	beq.n	80006f4 <main+0xb8>
 80006ec:	4b93      	ldr	r3, [pc, #588]	; (800093c <main+0x300>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d032      	beq.n	800075a <main+0x11e>
			{
				Sec_key=1;
 80006f4:	4b91      	ldr	r3, [pc, #580]	; (800093c <main+0x300>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
				if(Arm_switch==0){
 80006fa:	4b94      	ldr	r3, [pc, #592]	; (800094c <main+0x310>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f083 0301 	eor.w	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d028      	beq.n	800075a <main+0x11e>
				memset(tx_data,'K',2); //Security Key ACK
 8000708:	2202      	movs	r2, #2
 800070a:	214b      	movs	r1, #75	; 0x4b
 800070c:	488c      	ldr	r0, [pc, #560]	; (8000940 <main+0x304>)
 800070e:	f002 ffbf 	bl	8003690 <memset>
				HAL_UART_Transmit(&huart5, tx_data, strlen(tx_data),100);
 8000712:	488b      	ldr	r0, [pc, #556]	; (8000940 <main+0x304>)
 8000714:	f7ff fd76 	bl	8000204 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	4988      	ldr	r1, [pc, #544]	; (8000940 <main+0x304>)
 8000720:	4883      	ldr	r0, [pc, #524]	; (8000930 <main+0x2f4>)
 8000722:	f002 f9a0 	bl	8002a66 <HAL_UART_Transmit>
				if(tx_key_flag==1){
 8000726:	4b8a      	ldr	r3, [pc, #552]	; (8000950 <main+0x314>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d015      	beq.n	800075a <main+0x11e>
				HAL_Delay(3000);
 800072e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000732:	f000 fd15 	bl	8001160 <HAL_Delay>
				HAL_UART_Transmit(&huart4, rx_data, strlen(rx_data),100);
 8000736:	487d      	ldr	r0, [pc, #500]	; (800092c <main+0x2f0>)
 8000738:	f7ff fd64 	bl	8000204 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	497a      	ldr	r1, [pc, #488]	; (800092c <main+0x2f0>)
 8000744:	4880      	ldr	r0, [pc, #512]	; (8000948 <main+0x30c>)
 8000746:	f002 f98e 	bl	8002a66 <HAL_UART_Transmit>
				memset(rx_data,'\0',2);
 800074a:	2202      	movs	r2, #2
 800074c:	2100      	movs	r1, #0
 800074e:	4877      	ldr	r0, [pc, #476]	; (800092c <main+0x2f0>)
 8000750:	f002 ff9e 	bl	8003690 <memset>
				tx_key_flag=0;
 8000754:	4b7e      	ldr	r3, [pc, #504]	; (8000950 <main+0x314>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
				}
				}
			}
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0 && Arm_switch == 0){
 800075a:	2108      	movs	r1, #8
 800075c:	4876      	ldr	r0, [pc, #472]	; (8000938 <main+0x2fc>)
 800075e:	f001 fb39 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d112      	bne.n	800078e <main+0x152>
 8000768:	4b78      	ldr	r3, [pc, #480]	; (800094c <main+0x310>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	f083 0301 	eor.w	r3, r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00b      	beq.n	800078e <main+0x152>
					Sec_key = 0; // Notify the user to reset the inputs
 8000776:	4b71      	ldr	r3, [pc, #452]	; (800093c <main+0x300>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
					seq_flag = 0;
 800077c:	4b6d      	ldr	r3, [pc, #436]	; (8000934 <main+0x2f8>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
					Arm_switch = 0;
 8000782:	4b72      	ldr	r3, [pc, #456]	; (800094c <main+0x310>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
					Ign_switch = 0;
 8000788:	4b72      	ldr	r3, [pc, #456]	; (8000954 <main+0x318>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
				}
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)== 1 || Arm_switch == 1){
 800078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000792:	4869      	ldr	r0, [pc, #420]	; (8000938 <main+0x2fc>)
 8000794:	f001 fb1e 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d003      	beq.n	80007a6 <main+0x16a>
 800079e:	4b6b      	ldr	r3, [pc, #428]	; (800094c <main+0x310>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d032      	beq.n	800080c <main+0x1d0>
						Arm_switch = 1;
 80007a6:	4b69      	ldr	r3, [pc, #420]	; (800094c <main+0x310>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
						if(Ign_switch==0){
 80007ac:	4b69      	ldr	r3, [pc, #420]	; (8000954 <main+0x318>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d028      	beq.n	800080c <main+0x1d0>
						memset(tx_data,'A',2); //Arm Switch ACK
 80007ba:	2202      	movs	r2, #2
 80007bc:	2141      	movs	r1, #65	; 0x41
 80007be:	4860      	ldr	r0, [pc, #384]	; (8000940 <main+0x304>)
 80007c0:	f002 ff66 	bl	8003690 <memset>
						HAL_UART_Transmit(&huart5, tx_data, strlen(tx_data),100);
 80007c4:	485e      	ldr	r0, [pc, #376]	; (8000940 <main+0x304>)
 80007c6:	f7ff fd1d 	bl	8000204 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	2364      	movs	r3, #100	; 0x64
 80007d0:	495b      	ldr	r1, [pc, #364]	; (8000940 <main+0x304>)
 80007d2:	4857      	ldr	r0, [pc, #348]	; (8000930 <main+0x2f4>)
 80007d4:	f002 f947 	bl	8002a66 <HAL_UART_Transmit>
						if(tx_arm_flag==1){
 80007d8:	4b5f      	ldr	r3, [pc, #380]	; (8000958 <main+0x31c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d015      	beq.n	800080c <main+0x1d0>
						HAL_Delay(3000);
 80007e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007e4:	f000 fcbc 	bl	8001160 <HAL_Delay>
						HAL_UART_Transmit(&huart4, rx_data, strlen(rx_data),100);
 80007e8:	4850      	ldr	r0, [pc, #320]	; (800092c <main+0x2f0>)
 80007ea:	f7ff fd0b 	bl	8000204 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	2364      	movs	r3, #100	; 0x64
 80007f4:	494d      	ldr	r1, [pc, #308]	; (800092c <main+0x2f0>)
 80007f6:	4854      	ldr	r0, [pc, #336]	; (8000948 <main+0x30c>)
 80007f8:	f002 f935 	bl	8002a66 <HAL_UART_Transmit>
						memset(rx_data,'\0',2);
 80007fc:	2202      	movs	r2, #2
 80007fe:	2100      	movs	r1, #0
 8000800:	484a      	ldr	r0, [pc, #296]	; (800092c <main+0x2f0>)
 8000802:	f002 ff45 	bl	8003690 <memset>
						tx_arm_flag=0;
 8000806:	4b54      	ldr	r3, [pc, #336]	; (8000958 <main+0x31c>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
						}
						}
				}
						if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 0){
 800080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000810:	4849      	ldr	r0, [pc, #292]	; (8000938 <main+0x2fc>)
 8000812:	f001 fadf 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <main+0x1e6>
							Arm_switch = 0;
 800081c:	4b4b      	ldr	r3, [pc, #300]	; (800094c <main+0x310>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
						}
						if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1 || Ign_switch == 1 ){
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	4844      	ldr	r0, [pc, #272]	; (8000938 <main+0x2fc>)
 8000828:	f001 fad4 	bl	8001dd4 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d004      	beq.n	800083c <main+0x200>
 8000832:	4b48      	ldr	r3, [pc, #288]	; (8000954 <main+0x318>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	f43f af13 	beq.w	8000662 <main+0x26>
//							HAL_Delay(5000);
							if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) {
 800083c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000840:	483d      	ldr	r0, [pc, #244]	; (8000938 <main+0x2fc>)
 8000842:	f001 fac7 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	f47f af0a 	bne.w	8000662 <main+0x26>
								memset(tx_data,'\0',2);
 800084e:	2202      	movs	r2, #2
 8000850:	2100      	movs	r1, #0
 8000852:	483b      	ldr	r0, [pc, #236]	; (8000940 <main+0x304>)
 8000854:	f002 ff1c 	bl	8003690 <memset>
								Ign_switch = 1;
 8000858:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <main+0x318>)
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
								memset(tx_data,'I',2);
 800085e:	2202      	movs	r2, #2
 8000860:	2149      	movs	r1, #73	; 0x49
 8000862:	4837      	ldr	r0, [pc, #220]	; (8000940 <main+0x304>)
 8000864:	f002 ff14 	bl	8003690 <memset>

								HAL_UART_Transmit(&huart5, tx_data, strlen(tx_data),100);
 8000868:	4835      	ldr	r0, [pc, #212]	; (8000940 <main+0x304>)
 800086a:	f7ff fccb 	bl	8000204 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	4932      	ldr	r1, [pc, #200]	; (8000940 <main+0x304>)
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <main+0x2f4>)
 8000878:	f002 f8f5 	bl	8002a66 <HAL_UART_Transmit>
								if(tx_ignition_flag==1){
 800087c:	4b37      	ldr	r3, [pc, #220]	; (800095c <main+0x320>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d015      	beq.n	80008b0 <main+0x274>
								HAL_Delay(3000);
 8000884:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000888:	f000 fc6a 	bl	8001160 <HAL_Delay>
								HAL_UART_Transmit(&huart4, rx_data, strlen(rx_data),100);
 800088c:	4827      	ldr	r0, [pc, #156]	; (800092c <main+0x2f0>)
 800088e:	f7ff fcb9 	bl	8000204 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	b29a      	uxth	r2, r3
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	4924      	ldr	r1, [pc, #144]	; (800092c <main+0x2f0>)
 800089a:	482b      	ldr	r0, [pc, #172]	; (8000948 <main+0x30c>)
 800089c:	f002 f8e3 	bl	8002a66 <HAL_UART_Transmit>
								memset(rx_data,'\0',2);
 80008a0:	2202      	movs	r2, #2
 80008a2:	2100      	movs	r1, #0
 80008a4:	4821      	ldr	r0, [pc, #132]	; (800092c <main+0x2f0>)
 80008a6:	f002 fef3 	bl	8003690 <memset>
								tx_ignition_flag=0;
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <main+0x320>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
//								HAL_Delay(100);
								}
								if(rx_data[0]=='L')
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <main+0x2f0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b4c      	cmp	r3, #76	; 0x4c
 80008b6:	d128      	bne.n	800090a <main+0x2ce>
								{
								memset(tx_data,'L',2); //Launching ACK
 80008b8:	2202      	movs	r2, #2
 80008ba:	214c      	movs	r1, #76	; 0x4c
 80008bc:	4820      	ldr	r0, [pc, #128]	; (8000940 <main+0x304>)
 80008be:	f002 fee7 	bl	8003690 <memset>
								HAL_UART_Transmit(&huart5, tx_data, strlen(tx_data),100);
 80008c2:	481f      	ldr	r0, [pc, #124]	; (8000940 <main+0x304>)
 80008c4:	f7ff fc9e 	bl	8000204 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	491c      	ldr	r1, [pc, #112]	; (8000940 <main+0x304>)
 80008d0:	4817      	ldr	r0, [pc, #92]	; (8000930 <main+0x2f4>)
 80008d2:	f002 f8c8 	bl	8002a66 <HAL_UART_Transmit>
								if(tx_launch_flag==1){
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <main+0x324>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d015      	beq.n	800090a <main+0x2ce>
								HAL_Delay(3000);
 80008de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008e2:	f000 fc3d 	bl	8001160 <HAL_Delay>
								HAL_UART_Transmit(&huart4, rx_data, strlen(rx_data),100);
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <main+0x2f0>)
 80008e8:	f7ff fc8c 	bl	8000204 <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <main+0x2f0>)
 80008f4:	4814      	ldr	r0, [pc, #80]	; (8000948 <main+0x30c>)
 80008f6:	f002 f8b6 	bl	8002a66 <HAL_UART_Transmit>
								memset(rx_data,'\0',2);
 80008fa:	2202      	movs	r2, #2
 80008fc:	2100      	movs	r1, #0
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <main+0x2f0>)
 8000900:	f002 fec6 	bl	8003690 <memset>
								tx_launch_flag=0;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <main+0x324>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
//								HAL_Delay(100);
								}
								}
								memset(tx_data,'\0',2);
 800090a:	2202      	movs	r2, #2
 800090c:	2100      	movs	r1, #0
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <main+0x304>)
 8000910:	f002 febe 	bl	8003690 <memset>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,1);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091a:	4807      	ldr	r0, [pc, #28]	; (8000938 <main+0x2fc>)
 800091c:	f001 fa72 	bl	8001e04 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8000920:	2200      	movs	r2, #0
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <main+0x2fc>)
 8000926:	f001 fa6d 	bl	8001e04 <HAL_GPIO_WritePin>
 800092a:	e01b      	b.n	8000964 <main+0x328>
 800092c:	2000011c 	.word	0x2000011c
 8000930:	20000074 	.word	0x20000074
 8000934:	20000121 	.word	0x20000121
 8000938:	40020800 	.word	0x40020800
 800093c:	2000011e 	.word	0x2000011e
 8000940:	20000118 	.word	0x20000118
 8000944:	20000005 	.word	0x20000005
 8000948:	20000030 	.word	0x20000030
 800094c:	2000011f 	.word	0x2000011f
 8000950:	20000000 	.word	0x20000000
 8000954:	20000120 	.word	0x20000120
 8000958:	20000001 	.word	0x20000001
 800095c:	20000003 	.word	0x20000003
 8000960:	20000002 	.word	0x20000002
							HAL_Delay(2000);
 8000964:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000968:	f000 fbfa 	bl	8001160 <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 800096c:	2201      	movs	r2, #1
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <main+0x368>)
 8000972:	f001 fa47 	bl	8001e04 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,0);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <main+0x368>)
 800097e:	f001 fa41 	bl	8001e04 <HAL_GPIO_WritePin>
 8000982:	e66e      	b.n	8000662 <main+0x26>
							}
							}
		}
							else
							{
								Sec_key = 0;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <main+0x36c>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
								Arm_switch = 0;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <main+0x370>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
								Ign_switch = 0;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <main+0x374>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
								seq_flag = 0;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <main+0x378>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
								error();
 800099c:	f7ff fe16 	bl	80005cc <error>
		seq_check();
 80009a0:	e65f      	b.n	8000662 <main+0x26>
 80009a2:	bf00      	nop
 80009a4:	40020800 	.word	0x40020800
 80009a8:	2000011e 	.word	0x2000011e
 80009ac:	2000011f 	.word	0x2000011f
 80009b0:	20000120 	.word	0x20000120
 80009b4:	20000121 	.word	0x20000121

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2234      	movs	r2, #52	; 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fe62 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <SystemClock_Config+0xdc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <SystemClock_Config+0xdc>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <SystemClock_Config+0xdc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemClock_Config+0xe0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a25      	ldr	r2, [pc, #148]	; (8000a98 <SystemClock_Config+0xe0>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <SystemClock_Config+0xe0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a2c:	23b4      	movs	r3, #180	; 0xb4
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fd25 	bl	8002490 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a4c:	f000 f99e 	bl	8000d8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a50:	f001 fa0a 	bl	8001e68 <HAL_PWREx_EnableOverDrive>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a5a:	f000 f997 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fa43 	bl	8001f08 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a88:	f000 f980 	bl	8000d8c <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3750      	adds	r7, #80	; 0x50
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_UART4_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_UART4_Init+0x4c>)
 8000ad4:	f001 ff7a 	bl	80029cc <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f955 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000030 	.word	0x20000030
 8000aec:	40004c00 	.word	0x40004c00

08000af0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_UART5_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b28:	f001 ff50 	bl	80029cc <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b32:	f000 f92b 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000074 	.word	0x20000074
 8000b40:	40005000 	.word	0x40005000

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	200b      	movs	r0, #11
 8000b6c:	f000 fbf7 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b70:	200b      	movs	r0, #11
 8000b72:	f000 fc10 	bl	8001396 <HAL_NVIC_EnableIRQ>

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b4c      	ldr	r3, [pc, #304]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a4b      	ldr	r2, [pc, #300]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b45      	ldr	r3, [pc, #276]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a44      	ldr	r2, [pc, #272]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b42      	ldr	r3, [pc, #264]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a3d      	ldr	r2, [pc, #244]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(kill_led_GPIO_Port, kill_led_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4831      	ldr	r0, [pc, #196]	; (8000cd4 <MX_GPIO_Init+0x150>)
 8000c10:	f001 f8f8 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	482f      	ldr	r0, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000c1a:	f001 f8f3 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000c26:	f001 f8ed 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000c42:	f000 ff33 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pins : Security_key_Pin PC8 Arm_Switch_Pin */
  GPIO_InitStruct.Pin = Security_key_Pin|GPIO_PIN_8|Arm_Switch_Pin;
 8000c46:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000c5c:	f000 ff26 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : kill_led_Pin */
  GPIO_InitStruct.Pin = kill_led_Pin;
 8000c60:	2320      	movs	r3, #32
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(kill_led_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <MX_GPIO_Init+0x150>)
 8000c78:	f000 ff18 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000c94:	f000 ff0a 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000cb2:	f000 fefb 	bl	8001aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2028      	movs	r0, #40	; 0x28
 8000cbc:	f000 fb4f 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f000 fb68 	bl	8001396 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1)
 8000ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cea:	4820      	ldr	r0, [pc, #128]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x90>)
 8000cec:	f001 f872 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d12d      	bne.n	8000d52 <HAL_GPIO_EXTI_Callback+0x76>
  {
        memset(tx_data,'Y',2); //Kill_Switch
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	2159      	movs	r1, #89	; 0x59
 8000cfa:	481d      	ldr	r0, [pc, #116]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000cfc:	f002 fcc8 	bl	8003690 <memset>
    	HAL_UART_Transmit(&huart5, tx_data, strlen(tx_data),100);
 8000d00:	481b      	ldr	r0, [pc, #108]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d02:	f7ff fa7f 	bl	8000204 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	4918      	ldr	r1, [pc, #96]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d0e:	4819      	ldr	r0, [pc, #100]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d10:	f001 fea9 	bl	8002a66 <HAL_UART_Transmit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2120      	movs	r1, #32
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000d1a:	f001 f873 	bl	8001e04 <HAL_GPIO_WritePin>
    	if(tx_error_flag==1){
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d015      	beq.n	8000d52 <HAL_GPIO_EXTI_Callback+0x76>
    	HAL_Delay(3000);
 8000d26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d2a:	f000 fa19 	bl	8001160 <HAL_Delay>
    	HAL_UART_Transmit(&huart4, rx_data, strlen(rx_data),100);
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d30:	f7ff fa68 	bl	8000204 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	4911      	ldr	r1, [pc, #68]	; (8000d80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000d3e:	f001 fe92 	bl	8002a66 <HAL_UART_Transmit>
    	memset(rx_data,'\0',2);
 8000d42:	2202      	movs	r2, #2
 8000d44:	2100      	movs	r1, #0
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d48:	f002 fca2 	bl	8003690 <memset>
    	tx_kill_flag=0;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_GPIO_EXTI_Callback+0xac>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
    	}
  }
  HAL_Delay(500);
 8000d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d56:	f000 fa03 	bl	8001160 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000d60:	f001 f850 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	20000118 	.word	0x20000118
 8000d74:	20000074 	.word	0x20000074
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	2000011c 	.word	0x2000011c
 8000d84:	20000030 	.word	0x20000030
 8000d88:	20000006 	.word	0x20000006

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a59      	ldr	r2, [pc, #356]	; (8000f6c <HAL_UART_MspInit+0x184>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a57      	ldr	r2, [pc, #348]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b55      	ldr	r3, [pc, #340]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a50      	ldr	r2, [pc, #320]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e52:	2308      	movs	r3, #8
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4845      	ldr	r0, [pc, #276]	; (8000f74 <HAL_UART_MspInit+0x18c>)
 8000e5e:	f000 fe25 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000e62:	e07e      	b.n	8000f62 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==UART5)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a43      	ldr	r2, [pc, #268]	; (8000f78 <HAL_UART_MspInit+0x190>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d179      	bne.n	8000f62 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a3e      	ldr	r2, [pc, #248]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a37      	ldr	r2, [pc, #220]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a30      	ldr	r2, [pc, #192]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <HAL_UART_MspInit+0x188>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4827      	ldr	r0, [pc, #156]	; (8000f7c <HAL_UART_MspInit+0x194>)
 8000ee0:	f000 fde4 	bl	8001aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4820      	ldr	r0, [pc, #128]	; (8000f80 <HAL_UART_MspInit+0x198>)
 8000f00:	f000 fdd4 	bl	8001aac <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f06:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <HAL_UART_MspInit+0x1a0>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f10:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f24:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000f46:	480f      	ldr	r0, [pc, #60]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f48:	f000 fa40 	bl	80013cc <HAL_DMA_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8000f52:	f7ff ff1b 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f5c:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <HAL_UART_MspInit+0x19c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f62:	bf00      	nop
 8000f64:	3730      	adds	r7, #48	; 0x30
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40004c00 	.word	0x40004c00
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40005000 	.word	0x40005000
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	200000b8 	.word	0x200000b8
 8000f88:	40026010 	.word	0x40026010

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f8a2 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <DMA1_Stream0_IRQHandler+0x10>)
 8000fe6:	f000 faf7 	bl	80015d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000b8 	.word	0x200000b8

08000ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ff8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ffc:	f000 ff1c 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 faf7 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff faef 	bl	800063c <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800106c:	080036e8 	.word	0x080036e8
  ldr r2, =_sbss
 8001070:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001074:	20000128 	.word	0x20000128

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f94f 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fe72 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f967 	bl	80013b2 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f92f 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000008 	.word	0x20000008
 8001118:	20000010 	.word	0x20000010
 800111c:	2000000c 	.word	0x2000000c

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000010 	.word	0x20000010
 8001144:	20000124 	.word	0x20000124

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000124 	.word	0x20000124

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000010 	.word	0x20000010

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff feb6 	bl	8001148 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e099      	b.n	800151c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001408:	e00f      	b.n	800142a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140a:	f7ff fe9d 	bl	8001148 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b05      	cmp	r3, #5
 8001416:	d908      	bls.n	800142a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e078      	b.n	800151c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e8      	bne.n	800140a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_DMA_Init+0x158>)
 8001444:	4013      	ands	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	2b04      	cmp	r3, #4
 8001482:	d107      	bne.n	8001494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4313      	orrs	r3, r2
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d117      	bne.n	80014ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00e      	beq.n	80014ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fa6f 	bl	80019b4 <DMA_CheckFifoParam>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ea:	2301      	movs	r3, #1
 80014ec:	e016      	b.n	800151c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fa26 	bl	8001948 <DMA_CalcBaseAndBitshift>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	223f      	movs	r2, #63	; 0x3f
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	f010803f 	.word	0xf010803f

08001528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_DMA_Start_IT+0x26>
 800154a:	2302      	movs	r3, #2
 800154c:	e040      	b.n	80015d0 <HAL_DMA_Start_IT+0xa8>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d12f      	bne.n	80015c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f9b8 	bl	80018ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	223f      	movs	r2, #63	; 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0216 	orr.w	r2, r2, #22
 8001596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0208 	orr.w	r2, r2, #8
 80015ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e005      	b.n	80015ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015e4:	4b8e      	ldr	r3, [pc, #568]	; (8001820 <HAL_DMA_IRQHandler+0x248>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a8e      	ldr	r2, [pc, #568]	; (8001824 <HAL_DMA_IRQHandler+0x24c>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0a9b      	lsrs	r3, r3, #10
 80015f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2208      	movs	r2, #8
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01a      	beq.n	8001644 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0204 	bic.w	r2, r2, #4
 800162a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	2208      	movs	r2, #8
 8001632:	409a      	lsls	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	2201      	movs	r2, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d012      	beq.n	800167a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	2201      	movs	r2, #1
 8001668:	409a      	lsls	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	f043 0202 	orr.w	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2204      	movs	r2, #4
 8001680:	409a      	lsls	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d012      	beq.n	80016b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	2204      	movs	r2, #4
 800169e:	409a      	lsls	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a8:	f043 0204 	orr.w	r2, r3, #4
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	2210      	movs	r2, #16
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d043      	beq.n	8001748 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d03c      	beq.n	8001748 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	2210      	movs	r2, #16
 80016d4:	409a      	lsls	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d018      	beq.n	800171a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d024      	beq.n	8001748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
 8001706:	e01f      	b.n	8001748 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
 8001718:	e016      	b.n	8001748 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d107      	bne.n	8001738 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0208 	bic.w	r2, r2, #8
 8001736:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2220      	movs	r2, #32
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 808f 	beq.w	8001878 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8087 	beq.w	8001878 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176e:	2220      	movs	r2, #32
 8001770:	409a      	lsls	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b05      	cmp	r3, #5
 8001780:	d136      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0216 	bic.w	r2, r2, #22
 8001790:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <HAL_DMA_IRQHandler+0x1da>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0208 	bic.w	r2, r2, #8
 80017c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	223f      	movs	r2, #63	; 0x3f
 80017c8:	409a      	lsls	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d07e      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
        }
        return;
 80017ee:	e079      	b.n	80018e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01d      	beq.n	800183a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	2b00      	cmp	r3, #0
 8001812:	d031      	beq.n	8001878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
 800181c:	e02c      	b.n	8001878 <HAL_DMA_IRQHandler+0x2a0>
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	2b00      	cmp	r3, #0
 800182e:	d023      	beq.n	8001878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	4798      	blx	r3
 8001838:	e01e      	b.n	8001878 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0210 	bic.w	r2, r2, #16
 8001856:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	2b00      	cmp	r3, #0
 800187e:	d032      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d022      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2205      	movs	r2, #5
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d307      	bcc.n	80018c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f2      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x2cc>
 80018be:	e000      	b.n	80018c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
 80018e2:	e000      	b.n	80018e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018e4:	bf00      	nop
    }
  }
}
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001908:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b40      	cmp	r3, #64	; 0x40
 8001918:	d108      	bne.n	800192c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800192a:	e007      	b.n	800193c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	60da      	str	r2, [r3, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	3b10      	subs	r3, #16
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <DMA_CalcBaseAndBitshift+0x64>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d909      	bls.n	800198a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	1d1a      	adds	r2, r3, #4
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	; 0x58
 8001988:	e007      	b.n	800199a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	aaaaaaab 	.word	0xaaaaaaab
 80019b0:	080036d0 	.word	0x080036d0

080019b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d11f      	bne.n	8001a0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d856      	bhi.n	8001a82 <DMA_CheckFifoParam+0xce>
 80019d4:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <DMA_CheckFifoParam+0x28>)
 80019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019da:	bf00      	nop
 80019dc:	080019ed 	.word	0x080019ed
 80019e0:	080019ff 	.word	0x080019ff
 80019e4:	080019ed 	.word	0x080019ed
 80019e8:	08001a83 	.word	0x08001a83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d046      	beq.n	8001a86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019fc:	e043      	b.n	8001a86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a06:	d140      	bne.n	8001a8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a0c:	e03d      	b.n	8001a8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a16:	d121      	bne.n	8001a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d837      	bhi.n	8001a8e <DMA_CheckFifoParam+0xda>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <DMA_CheckFifoParam+0x70>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a3b 	.word	0x08001a3b
 8001a2c:	08001a35 	.word	0x08001a35
 8001a30:	08001a4d 	.word	0x08001a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      break;
 8001a38:	e030      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d025      	beq.n	8001a92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4a:	e022      	b.n	8001a92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a54:	d11f      	bne.n	8001a96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a5a:	e01c      	b.n	8001a96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d903      	bls.n	8001a6a <DMA_CheckFifoParam+0xb6>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d003      	beq.n	8001a70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a68:	e018      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a6e:	e015      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a80:	e00b      	b.n	8001a9a <DMA_CheckFifoParam+0xe6>
      break;
 8001a82:	bf00      	nop
 8001a84:	e00a      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      break;
 8001a86:	bf00      	nop
 8001a88:	e008      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e006      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e004      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e002      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a96:	bf00      	nop
 8001a98:	e000      	b.n	8001a9c <DMA_CheckFifoParam+0xe8>
      break;
 8001a9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e165      	b.n	8001d94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8154 	bne.w	8001d8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d005      	beq.n	8001afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d130      	bne.n	8001b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d017      	beq.n	8001b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80ae 	beq.w	8001d8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a5c      	ldr	r2, [pc, #368]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4e:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x308>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d025      	beq.n	8001cc6 <HAL_GPIO_Init+0x21a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_GPIO_Init+0x30c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <HAL_GPIO_Init+0x216>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <HAL_GPIO_Init+0x310>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x212>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	; (8001dc0 <HAL_GPIO_Init+0x314>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x20e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4b      	ldr	r2, [pc, #300]	; (8001dc4 <HAL_GPIO_Init+0x318>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x20a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4a      	ldr	r2, [pc, #296]	; (8001dc8 <HAL_GPIO_Init+0x31c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x206>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a49      	ldr	r2, [pc, #292]	; (8001dcc <HAL_GPIO_Init+0x320>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x202>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae96 	bls.w	8001ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e001      	b.n	8001df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	619a      	str	r2, [r3, #24]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff40 	bl	8000cdc <HAL_GPIO_EXTI_Callback>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_PWREx_EnableOverDrive+0x94>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e94:	f7ff f958 	bl	8001148 <HAL_GetTick>
 8001e98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e9a:	e009      	b.n	8001eb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e9c:	f7ff f954 	bl	8001148 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eaa:	d901      	bls.n	8001eb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e01f      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d1ee      	bne.n	8001e9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff f940 	bl	8001148 <HAL_GetTick>
 8001ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eca:	e009      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ecc:	f7ff f93c 	bl	8001148 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eda:	d901      	bls.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e007      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eec:	d1ee      	bne.n	8001ecc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	420e0040 	.word	0x420e0040
 8001f00:	40007000 	.word	0x40007000
 8001f04:	420e0044 	.word	0x420e0044

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0cc      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d90c      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b8      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	494d      	ldr	r1, [pc, #308]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d044      	beq.n	8002028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d119      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e07f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e067      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f023 0203 	bic.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4934      	ldr	r1, [pc, #208]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff8:	f7ff f8a6 	bl	8001148 <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7ff f8a2 	bl	8001148 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e04f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 020c 	and.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d1eb      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d20c      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e032      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4916      	ldr	r1, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208e:	f000 f855 	bl	800213c <HAL_RCC_GetSysClockFreq>
 8002092:	4602      	mov	r2, r0
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	490a      	ldr	r1, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	5ccb      	ldrb	r3, [r1, r3]
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f806 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00
 80020c4:	40023800 	.word	0x40023800
 80020c8:	080036b8 	.word	0x080036b8
 80020cc:	20000008 	.word	0x20000008
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4903      	ldr	r1, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	080036c8 	.word	0x080036c8

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002118:	f7ff ffdc 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0b5b      	lsrs	r3, r3, #13
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	080036c8 	.word	0x080036c8

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002140:	b0a6      	sub	sp, #152	; 0x98
 8002142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002162:	4bc8      	ldr	r3, [pc, #800]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b0c      	cmp	r3, #12
 800216c:	f200 817e 	bhi.w	800246c <HAL_RCC_GetSysClockFreq+0x330>
 8002170:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	080021ad 	.word	0x080021ad
 800217c:	0800246d 	.word	0x0800246d
 8002180:	0800246d 	.word	0x0800246d
 8002184:	0800246d 	.word	0x0800246d
 8002188:	080021b5 	.word	0x080021b5
 800218c:	0800246d 	.word	0x0800246d
 8002190:	0800246d 	.word	0x0800246d
 8002194:	0800246d 	.word	0x0800246d
 8002198:	080021bd 	.word	0x080021bd
 800219c:	0800246d 	.word	0x0800246d
 80021a0:	0800246d 	.word	0x0800246d
 80021a4:	0800246d 	.word	0x0800246d
 80021a8:	08002327 	.word	0x08002327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4bb6      	ldr	r3, [pc, #728]	; (8002488 <HAL_RCC_GetSysClockFreq+0x34c>)
 80021ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80021b2:	e15f      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b4:	4bb5      	ldr	r3, [pc, #724]	; (800248c <HAL_RCC_GetSysClockFreq+0x350>)
 80021b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80021ba:	e15b      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4bb1      	ldr	r3, [pc, #708]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c8:	4bae      	ldr	r3, [pc, #696]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d031      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d4:	4bab      	ldr	r3, [pc, #684]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	2200      	movs	r2, #0
 80021dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80021de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e6:	663b      	str	r3, [r7, #96]	; 0x60
 80021e8:	2300      	movs	r3, #0
 80021ea:	667b      	str	r3, [r7, #100]	; 0x64
 80021ec:	4ba7      	ldr	r3, [pc, #668]	; (800248c <HAL_RCC_GetSysClockFreq+0x350>)
 80021ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021f2:	462a      	mov	r2, r5
 80021f4:	fb03 f202 	mul.w	r2, r3, r2
 80021f8:	2300      	movs	r3, #0
 80021fa:	4621      	mov	r1, r4
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	4aa2      	ldr	r2, [pc, #648]	; (800248c <HAL_RCC_GetSysClockFreq+0x350>)
 8002204:	4621      	mov	r1, r4
 8002206:	fba1 1202 	umull	r1, r2, r1, r2
 800220a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800220c:	460a      	mov	r2, r1
 800220e:	67ba      	str	r2, [r7, #120]	; 0x78
 8002210:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002212:	4413      	add	r3, r2
 8002214:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800221a:	2200      	movs	r2, #0
 800221c:	65bb      	str	r3, [r7, #88]	; 0x58
 800221e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002220:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002224:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002228:	f7fd fff4 	bl	8000214 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4613      	mov	r3, r2
 8002232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002236:	e064      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002238:	4b92      	ldr	r3, [pc, #584]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	2200      	movs	r2, #0
 8002240:	653b      	str	r3, [r7, #80]	; 0x50
 8002242:	657a      	str	r2, [r7, #84]	; 0x54
 8002244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002250:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002254:	4622      	mov	r2, r4
 8002256:	462b      	mov	r3, r5
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	f04f 0100 	mov.w	r1, #0
 8002260:	0159      	lsls	r1, r3, #5
 8002262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002266:	0150      	lsls	r0, r2, #5
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4621      	mov	r1, r4
 800226e:	1a51      	subs	r1, r2, r1
 8002270:	6139      	str	r1, [r7, #16]
 8002272:	4629      	mov	r1, r5
 8002274:	eb63 0301 	sbc.w	r3, r3, r1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002286:	4659      	mov	r1, fp
 8002288:	018b      	lsls	r3, r1, #6
 800228a:	4651      	mov	r1, sl
 800228c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002290:	4651      	mov	r1, sl
 8002292:	018a      	lsls	r2, r1, #6
 8002294:	4651      	mov	r1, sl
 8002296:	ebb2 0801 	subs.w	r8, r2, r1
 800229a:	4659      	mov	r1, fp
 800229c:	eb63 0901 	sbc.w	r9, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022b4:	4690      	mov	r8, r2
 80022b6:	4699      	mov	r9, r3
 80022b8:	4623      	mov	r3, r4
 80022ba:	eb18 0303 	adds.w	r3, r8, r3
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	462b      	mov	r3, r5
 80022c2:	eb49 0303 	adc.w	r3, r9, r3
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022d4:	4629      	mov	r1, r5
 80022d6:	028b      	lsls	r3, r1, #10
 80022d8:	4621      	mov	r1, r4
 80022da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022de:	4621      	mov	r1, r4
 80022e0:	028a      	lsls	r2, r1, #10
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ea:	2200      	movs	r2, #0
 80022ec:	643b      	str	r3, [r7, #64]	; 0x40
 80022ee:	647a      	str	r2, [r7, #68]	; 0x44
 80022f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022f4:	f7fd ff8e 	bl	8000214 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4613      	mov	r3, r2
 80022fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002302:	4b60      	ldr	r3, [pc, #384]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002314:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002324:	e0a6      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002326:	4b57      	ldr	r3, [pc, #348]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800232e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002332:	4b54      	ldr	r3, [pc, #336]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d02a      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233e:	4b51      	ldr	r3, [pc, #324]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	2200      	movs	r2, #0
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
 8002348:	63fa      	str	r2, [r7, #60]	; 0x3c
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002350:	2100      	movs	r1, #0
 8002352:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_RCC_GetSysClockFreq+0x350>)
 8002354:	fb03 f201 	mul.w	r2, r3, r1
 8002358:	2300      	movs	r3, #0
 800235a:	fb00 f303 	mul.w	r3, r0, r3
 800235e:	4413      	add	r3, r2
 8002360:	4a4a      	ldr	r2, [pc, #296]	; (800248c <HAL_RCC_GetSysClockFreq+0x350>)
 8002362:	fba0 1202 	umull	r1, r2, r0, r2
 8002366:	677a      	str	r2, [r7, #116]	; 0x74
 8002368:	460a      	mov	r2, r1
 800236a:	673a      	str	r2, [r7, #112]	; 0x70
 800236c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800236e:	4413      	add	r3, r2
 8002370:	677b      	str	r3, [r7, #116]	; 0x74
 8002372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002376:	2200      	movs	r2, #0
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
 800237a:	637a      	str	r2, [r7, #52]	; 0x34
 800237c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002380:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002384:	f7fd ff46 	bl	8000214 <__aeabi_uldivmod>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4613      	mov	r3, r2
 800238e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002392:	e05b      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	2200      	movs	r2, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023b0:	4642      	mov	r2, r8
 80023b2:	464b      	mov	r3, r9
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	f04f 0100 	mov.w	r1, #0
 80023bc:	0159      	lsls	r1, r3, #5
 80023be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c2:	0150      	lsls	r0, r2, #5
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4641      	mov	r1, r8
 80023ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80023ce:	4649      	mov	r1, r9
 80023d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023e8:	ebb2 040a 	subs.w	r4, r2, sl
 80023ec:	eb63 050b 	sbc.w	r5, r3, fp
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	00eb      	lsls	r3, r5, #3
 80023fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023fe:	00e2      	lsls	r2, r4, #3
 8002400:	4614      	mov	r4, r2
 8002402:	461d      	mov	r5, r3
 8002404:	4643      	mov	r3, r8
 8002406:	18e3      	adds	r3, r4, r3
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	464b      	mov	r3, r9
 800240c:	eb45 0303 	adc.w	r3, r5, r3
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800241e:	4629      	mov	r1, r5
 8002420:	028b      	lsls	r3, r1, #10
 8002422:	4621      	mov	r1, r4
 8002424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002428:	4621      	mov	r1, r4
 800242a:	028a      	lsls	r2, r1, #10
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002434:	2200      	movs	r2, #0
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	61fa      	str	r2, [r7, #28]
 800243a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800243e:	f7fd fee9 	bl	8000214 <__aeabi_uldivmod>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4613      	mov	r3, r2
 8002448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_RCC_GetSysClockFreq+0x348>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0f1b      	lsrs	r3, r3, #28
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800245a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800245e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800246a:	e003      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_GetSysClockFreq+0x34c>)
 800246e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002478:	4618      	mov	r0, r3
 800247a:	3798      	adds	r7, #152	; 0x98
 800247c:	46bd      	mov	sp, r7
 800247e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	00f42400 	.word	0x00f42400
 800248c:	017d7840 	.word	0x017d7840

08002490 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e28d      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8083 	beq.w	80025b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024b0:	4b94      	ldr	r3, [pc, #592]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d019      	beq.n	80024f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024bc:	4b91      	ldr	r3, [pc, #580]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024c8:	4b8e      	ldr	r3, [pc, #568]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d4:	d00c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b8b      	ldr	r3, [pc, #556]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d112      	bne.n	8002508 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4b88      	ldr	r3, [pc, #544]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b84      	ldr	r3, [pc, #528]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x124>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d157      	bne.n	80025b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e25a      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x90>
 8002512:	4b7c      	ldr	r3, [pc, #496]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7b      	ldr	r2, [pc, #492]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e01d      	b.n	800255c <HAL_RCC_OscConfig+0xcc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0xb4>
 800252a:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a75      	ldr	r2, [pc, #468]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a72      	ldr	r2, [pc, #456]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0xcc>
 8002544:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6b      	ldr	r2, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fdf0 	bl	8001148 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fdec 	bl	8001148 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e21f      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xdc>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fddc 	bl	8001148 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fdd8 	bl	8001148 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e20b      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x104>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d06f      	beq.n	80026a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025c2:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d017      	beq.n	80025fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ce:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d105      	bne.n	80025e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025da:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d11c      	bne.n	800262c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b44      	ldr	r3, [pc, #272]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x186>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e1d3      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4937      	ldr	r1, [pc, #220]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	e03a      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCC_OscConfig+0x278>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fd85 	bl	8001148 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002642:	f7fe fd81 	bl	8001148 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1b4      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4b28      	ldr	r3, [pc, #160]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4925      	ldr	r1, [pc, #148]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <HAL_RCC_OscConfig+0x278>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fd64 	bl	8001148 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002684:	f7fe fd60 	bl	8001148 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e193      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d036      	beq.n	800271c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCC_OscConfig+0x27c>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7fe fd44 	bl	8001148 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c4:	f7fe fd40 	bl	8001148 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e173      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x234>
 80026e2:	e01b      	b.n	800271c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_OscConfig+0x27c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fd2d 	bl	8001148 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	e00e      	b.n	8002710 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fd29 	bl	8001148 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d907      	bls.n	8002710 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e15c      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
 8002704:	40023800 	.word	0x40023800
 8002708:	42470000 	.word	0x42470000
 800270c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b8a      	ldr	r3, [pc, #552]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ea      	bne.n	80026f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8097 	beq.w	8002858 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b83      	ldr	r3, [pc, #524]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	4b7f      	ldr	r3, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a7e      	ldr	r2, [pc, #504]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b7c      	ldr	r3, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b79      	ldr	r3, [pc, #484]	; (8002940 <HAL_RCC_OscConfig+0x4b0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCC_OscConfig+0x4b0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a75      	ldr	r2, [pc, #468]	; (8002940 <HAL_RCC_OscConfig+0x4b0>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7fe fce9 	bl	8001148 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7fe fce5 	bl	8001148 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e118      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <HAL_RCC_OscConfig+0x4b0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x31e>
 80027a0:	4b66      	ldr	r3, [pc, #408]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a65      	ldr	r2, [pc, #404]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	e01c      	b.n	80027e8 <HAL_RCC_OscConfig+0x358>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x340>
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a60      	ldr	r2, [pc, #384]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
 80027c2:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a5d      	ldr	r2, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0x358>
 80027d0:	4b5a      	ldr	r3, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a59      	ldr	r2, [pc, #356]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	4b57      	ldr	r3, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a56      	ldr	r2, [pc, #344]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80027e2:	f023 0304 	bic.w	r3, r3, #4
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d015      	beq.n	800281c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fcaa 	bl	8001148 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7fe fca6 	bl	8001148 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0d7      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ee      	beq.n	80027f8 <HAL_RCC_OscConfig+0x368>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fc94 	bl	8001148 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	e00a      	b.n	800283a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7fe fc90 	bl	8001148 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e0c1      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ee      	bne.n	8002824 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d105      	bne.n	8002858 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284c:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	4a3a      	ldr	r2, [pc, #232]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002856:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80ad 	beq.w	80029bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b08      	cmp	r3, #8
 800286c:	d060      	beq.n	8002930 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d145      	bne.n	8002902 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_RCC_OscConfig+0x4b4>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fc64 	bl	8001148 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe fc60 	bl	8001148 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e093      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	3b01      	subs	r3, #1
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	071b      	lsls	r3, r3, #28
 80028ce:	491b      	ldr	r1, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x4b4>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fc35 	bl	8001148 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fc31 	bl	8001148 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e064      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x452>
 8002900:	e05c      	b.n	80029bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x4b4>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fc1e 	bl	8001148 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fc1a 	bl	8001148 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e04d      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x4ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x480>
 800292e:	e045      	b.n	80029bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e040      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
 800293c:	40023800 	.word	0x40023800
 8002940:	40007000 	.word	0x40007000
 8002944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <HAL_RCC_OscConfig+0x538>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d030      	beq.n	80029b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d129      	bne.n	80029b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d122      	bne.n	80029b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002980:	4293      	cmp	r3, r2
 8002982:	d119      	bne.n	80029b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	3b01      	subs	r3, #1
 8002992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d10f      	bne.n	80029b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e03f      	b.n	8002a5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe f9f8 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fba5 	bl	8003160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b08a      	sub	sp, #40	; 0x28
 8002a6a:	af02      	add	r7, sp, #8
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d17c      	bne.n	8002b80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_UART_Transmit+0x2c>
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e075      	b.n	8002b82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit+0x3e>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e06e      	b.n	8002b82 <HAL_UART_Transmit+0x11c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2221      	movs	r2, #33	; 0x21
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aba:	f7fe fb45 	bl	8001148 <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad4:	d108      	bne.n	8002ae8 <HAL_UART_Transmit+0x82>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	e003      	b.n	8002af0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002af8:	e02a      	b.n	8002b50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f992 	bl	8002e2e <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e036      	b.n	8002b82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	e007      	b.n	8002b42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1cf      	bne.n	8002afa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2140      	movs	r1, #64	; 0x40
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f962 	bl	8002e2e <UART_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e006      	b.n	8002b82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d11d      	bne.n	8002be0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_UART_Receive_DMA+0x26>
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e016      	b.n	8002be2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_UART_Receive_DMA+0x38>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e00f      	b.n	8002be2 <HAL_UART_Receive_DMA+0x58>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f998 	bl	8002f0c <UART_Start_Receive_DMA>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	e000      	b.n	8002be2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b09c      	sub	sp, #112	; 0x70
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d172      	bne.n	8002d40 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	330c      	adds	r3, #12
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c80:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c88:	e841 2300 	strex	r3, r2, [r1]
 8002c8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e5      	bne.n	8002c60 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3314      	adds	r3, #20
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	667b      	str	r3, [r7, #100]	; 0x64
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3314      	adds	r3, #20
 8002cb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002cb4:	647a      	str	r2, [r7, #68]	; 0x44
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e5      	bne.n	8002c94 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cde:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e5      	bne.n	8002cc8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d119      	bne.n	8002d40 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0310 	bic.w	r3, r3, #16
 8002d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d2c:	61fa      	str	r2, [r7, #28]
 8002d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	69b9      	ldr	r1, [r7, #24]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	617b      	str	r3, [r7, #20]
   return(result);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e5      	bne.n	8002d0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d50:	f7ff ff69 	bl	8002c26 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d54:	e002      	b.n	8002d5c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002d56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d58:	f7ff ff47 	bl	8002bea <HAL_UART_RxCpltCallback>
}
 8002d5c:	bf00      	nop
 8002d5e:	3770      	adds	r7, #112	; 0x70
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d108      	bne.n	8002d8c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4619      	mov	r1, r3
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7ff ff4e 	bl	8002c26 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d8a:	e002      	b.n	8002d92 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff ff36 	bl	8002bfe <HAL_UART_RxHalfCpltCallback>
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b21      	cmp	r3, #33	; 0x21
 8002dcc:	d108      	bne.n	8002de0 <UART_DMAError+0x46>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002dda:	68b8      	ldr	r0, [r7, #8]
 8002ddc:	f000 f934 	bl	8003048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b22      	cmp	r3, #34	; 0x22
 8002e00:	d108      	bne.n	8002e14 <UART_DMAError+0x7a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002e0e:	68b8      	ldr	r0, [r7, #8]
 8002e10:	f000 f942 	bl	8003098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f043 0210 	orr.w	r2, r3, #16
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e20:	68b8      	ldr	r0, [r7, #8]
 8002e22:	f7ff fef6 	bl	8002c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b090      	sub	sp, #64	; 0x40
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3e:	e050      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d04c      	beq.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e4e:	f7fe f97b 	bl	8001148 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d241      	bcs.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e7e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e5      	bne.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3314      	adds	r3, #20
 8002e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3314      	adds	r3, #20
 8002eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb2:	623a      	str	r2, [r7, #32]
 8002eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e5      	bne.n	8002e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e00f      	b.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d09f      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3740      	adds	r7, #64	; 0x40
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b098      	sub	sp, #96	; 0x60
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2222      	movs	r2, #34	; 0x22
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4a40      	ldr	r2, [pc, #256]	; (800303c <UART_Start_Receive_DMA+0x130>)
 8002f3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	4a3f      	ldr	r2, [pc, #252]	; (8003040 <UART_Start_Receive_DMA+0x134>)
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	4a3e      	ldr	r2, [pc, #248]	; (8003044 <UART_Start_Receive_DMA+0x138>)
 8002f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	2200      	movs	r2, #0
 8002f52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	f7fe fadc 	bl	8001528 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d019      	beq.n	8002fca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002fb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fea:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	617b      	str	r3, [r7, #20]
   return(result);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003014:	653b      	str	r3, [r7, #80]	; 0x50
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3314      	adds	r3, #20
 800301c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800301e:	627a      	str	r2, [r7, #36]	; 0x24
 8003020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	61fb      	str	r3, [r7, #28]
   return(result);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3760      	adds	r7, #96	; 0x60
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	08002c3f 	.word	0x08002c3f
 8003040:	08002d65 	.word	0x08002d65
 8003044:	08002d9b 	.word	0x08002d9b

08003048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	330c      	adds	r3, #12
 8003056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	61ba      	str	r2, [r7, #24]
 8003072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6979      	ldr	r1, [r7, #20]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	613b      	str	r3, [r7, #16]
   return(result);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e5      	bne.n	8003050 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800308c:	bf00      	nop
 800308e:	3724      	adds	r7, #36	; 0x24
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003098:	b480      	push	{r7}
 800309a:	b095      	sub	sp, #84	; 0x54
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c0:	643a      	str	r2, [r7, #64]	; 0x40
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e5      	bne.n	80030a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3314      	adds	r3, #20
 80030da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e5      	bne.n	80030d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	2b01      	cmp	r3, #1
 800310e:	d119      	bne.n	8003144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f023 0310 	bic.w	r3, r3, #16
 8003126:	647b      	str	r3, [r7, #68]	; 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003130:	61ba      	str	r2, [r7, #24]
 8003132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	613b      	str	r3, [r7, #16]
   return(result);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e5      	bne.n	8003110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003152:	bf00      	nop
 8003154:	3754      	adds	r7, #84	; 0x54
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b0c0      	sub	sp, #256	; 0x100
 8003166:	af00      	add	r7, sp, #0
 8003168:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	ea40 0301 	orr.w	r3, r0, r1
 8003188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	431a      	orrs	r2, r3
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031b8:	f021 010c 	bic.w	r1, r1, #12
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031c6:	430b      	orrs	r3, r1
 80031c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031da:	6999      	ldr	r1, [r3, #24]
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	ea40 0301 	orr.w	r3, r0, r1
 80031e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b8f      	ldr	r3, [pc, #572]	; (800342c <UART_SetConfig+0x2cc>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d005      	beq.n	8003200 <UART_SetConfig+0xa0>
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b8d      	ldr	r3, [pc, #564]	; (8003430 <UART_SetConfig+0x2d0>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d104      	bne.n	800320a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7fe ff88 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003204:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003208:	e003      	b.n	8003212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320a:	f7fe ff6f 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 800320e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321c:	f040 810c 	bne.w	8003438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800322a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800322e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	1891      	adds	r1, r2, r2
 8003238:	65b9      	str	r1, [r7, #88]	; 0x58
 800323a:	415b      	adcs	r3, r3
 800323c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800323e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003242:	4621      	mov	r1, r4
 8003244:	eb12 0801 	adds.w	r8, r2, r1
 8003248:	4629      	mov	r1, r5
 800324a:	eb43 0901 	adc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003270:	462b      	mov	r3, r5
 8003272:	eb49 0303 	adc.w	r3, r9, r3
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003286:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800328a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800328e:	460b      	mov	r3, r1
 8003290:	18db      	adds	r3, r3, r3
 8003292:	653b      	str	r3, [r7, #80]	; 0x50
 8003294:	4613      	mov	r3, r2
 8003296:	eb42 0303 	adc.w	r3, r2, r3
 800329a:	657b      	str	r3, [r7, #84]	; 0x54
 800329c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032a4:	f7fc ffb6 	bl	8000214 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b61      	ldr	r3, [pc, #388]	; (8003434 <UART_SetConfig+0x2d4>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011c      	lsls	r4, r3, #4
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80032d0:	415b      	adcs	r3, r3
 80032d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032d8:	4641      	mov	r1, r8
 80032da:	eb12 0a01 	adds.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb43 0b01 	adc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f8:	4692      	mov	sl, r2
 80032fa:	469b      	mov	fp, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003306:	464b      	mov	r3, r9
 8003308:	eb4b 0303 	adc.w	r3, fp, r3
 800330c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800331c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003324:	460b      	mov	r3, r1
 8003326:	18db      	adds	r3, r3, r3
 8003328:	643b      	str	r3, [r7, #64]	; 0x40
 800332a:	4613      	mov	r3, r2
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	647b      	str	r3, [r7, #68]	; 0x44
 8003332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800333a:	f7fc ff6b 	bl	8000214 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4611      	mov	r1, r2
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <UART_SetConfig+0x2d4>)
 8003346:	fba3 2301 	umull	r2, r3, r3, r1
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2264      	movs	r2, #100	; 0x64
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <UART_SetConfig+0x2d4>)
 800335c:	fba3 2302 	umull	r2, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003368:	441c      	add	r4, r3
 800336a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003374:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	1891      	adds	r1, r2, r2
 8003382:	63b9      	str	r1, [r7, #56]	; 0x38
 8003384:	415b      	adcs	r3, r3
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800338c:	4641      	mov	r1, r8
 800338e:	1851      	adds	r1, r2, r1
 8003390:	6339      	str	r1, [r7, #48]	; 0x30
 8003392:	4649      	mov	r1, r9
 8003394:	414b      	adcs	r3, r1
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033a4:	4659      	mov	r1, fp
 80033a6:	00cb      	lsls	r3, r1, #3
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ae:	4651      	mov	r1, sl
 80033b0:	00ca      	lsls	r2, r1, #3
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	4642      	mov	r2, r8
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c0:	464b      	mov	r3, r9
 80033c2:	460a      	mov	r2, r1
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033e0:	460b      	mov	r3, r1
 80033e2:	18db      	adds	r3, r3, r3
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e6:	4613      	mov	r3, r2
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033f6:	f7fc ff0d 	bl	8000214 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <UART_SetConfig+0x2d4>)
 8003400:	fba3 1302 	umull	r1, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2164      	movs	r1, #100	; 0x64
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3332      	adds	r3, #50	; 0x32
 8003412:	4a08      	ldr	r2, [pc, #32]	; (8003434 <UART_SetConfig+0x2d4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4422      	add	r2, r4
 8003426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003428:	e105      	b.n	8003636 <UART_SetConfig+0x4d6>
 800342a:	bf00      	nop
 800342c:	40011000 	.word	0x40011000
 8003430:	40011400 	.word	0x40011400
 8003434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003442:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800344a:	4642      	mov	r2, r8
 800344c:	464b      	mov	r3, r9
 800344e:	1891      	adds	r1, r2, r2
 8003450:	6239      	str	r1, [r7, #32]
 8003452:	415b      	adcs	r3, r3
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
 8003456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345a:	4641      	mov	r1, r8
 800345c:	1854      	adds	r4, r2, r1
 800345e:	4649      	mov	r1, r9
 8003460:	eb43 0501 	adc.w	r5, r3, r1
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	00eb      	lsls	r3, r5, #3
 800346e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003472:	00e2      	lsls	r2, r4, #3
 8003474:	4614      	mov	r4, r2
 8003476:	461d      	mov	r5, r3
 8003478:	4643      	mov	r3, r8
 800347a:	18e3      	adds	r3, r4, r3
 800347c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003480:	464b      	mov	r3, r9
 8003482:	eb45 0303 	adc.w	r3, r5, r3
 8003486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034a6:	4629      	mov	r1, r5
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b0:	4621      	mov	r1, r4
 80034b2:	008a      	lsls	r2, r1, #2
 80034b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034b8:	f7fc feac 	bl	8000214 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4b60      	ldr	r3, [pc, #384]	; (8003644 <UART_SetConfig+0x4e4>)
 80034c2:	fba3 2302 	umull	r2, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	011c      	lsls	r4, r3, #4
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	61b9      	str	r1, [r7, #24]
 80034e4:	415b      	adcs	r3, r3
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	4641      	mov	r1, r8
 80034ee:	1851      	adds	r1, r2, r1
 80034f0:	6139      	str	r1, [r7, #16]
 80034f2:	4649      	mov	r1, r9
 80034f4:	414b      	adcs	r3, r1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003504:	4659      	mov	r1, fp
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4651      	mov	r1, sl
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4642      	mov	r2, r8
 800351a:	189b      	adds	r3, r3, r2
 800351c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003520:	464b      	mov	r3, r9
 8003522:	460a      	mov	r2, r1
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	67bb      	str	r3, [r7, #120]	; 0x78
 8003536:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003544:	4649      	mov	r1, r9
 8003546:	008b      	lsls	r3, r1, #2
 8003548:	4641      	mov	r1, r8
 800354a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354e:	4641      	mov	r1, r8
 8003550:	008a      	lsls	r2, r1, #2
 8003552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003556:	f7fc fe5d 	bl	8000214 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4b39      	ldr	r3, [pc, #228]	; (8003644 <UART_SetConfig+0x4e4>)
 8003560:	fba3 1302 	umull	r1, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	2164      	movs	r1, #100	; 0x64
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	3332      	adds	r3, #50	; 0x32
 8003572:	4a34      	ldr	r2, [pc, #208]	; (8003644 <UART_SetConfig+0x4e4>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357e:	441c      	add	r4, r3
 8003580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003584:	2200      	movs	r2, #0
 8003586:	673b      	str	r3, [r7, #112]	; 0x70
 8003588:	677a      	str	r2, [r7, #116]	; 0x74
 800358a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800358e:	4642      	mov	r2, r8
 8003590:	464b      	mov	r3, r9
 8003592:	1891      	adds	r1, r2, r2
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	415b      	adcs	r3, r3
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800359e:	4641      	mov	r1, r8
 80035a0:	1851      	adds	r1, r2, r1
 80035a2:	6039      	str	r1, [r7, #0]
 80035a4:	4649      	mov	r1, r9
 80035a6:	414b      	adcs	r3, r1
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035b6:	4659      	mov	r1, fp
 80035b8:	00cb      	lsls	r3, r1, #3
 80035ba:	4651      	mov	r1, sl
 80035bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c0:	4651      	mov	r1, sl
 80035c2:	00ca      	lsls	r2, r1, #3
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	4603      	mov	r3, r0
 80035ca:	4642      	mov	r2, r8
 80035cc:	189b      	adds	r3, r3, r2
 80035ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	663b      	str	r3, [r7, #96]	; 0x60
 80035e4:	667a      	str	r2, [r7, #100]	; 0x64
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035f2:	4649      	mov	r1, r9
 80035f4:	008b      	lsls	r3, r1, #2
 80035f6:	4641      	mov	r1, r8
 80035f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fc:	4641      	mov	r1, r8
 80035fe:	008a      	lsls	r2, r1, #2
 8003600:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003604:	f7fc fe06 	bl	8000214 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <UART_SetConfig+0x4e4>)
 800360e:	fba3 1302 	umull	r1, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2164      	movs	r1, #100	; 0x64
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	3332      	adds	r3, #50	; 0x32
 8003620:	4a08      	ldr	r2, [pc, #32]	; (8003644 <UART_SetConfig+0x4e4>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4422      	add	r2, r4
 8003634:	609a      	str	r2, [r3, #8]
}
 8003636:	bf00      	nop
 8003638:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003642:	bf00      	nop
 8003644:	51eb851f 	.word	0x51eb851f

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	4d0d      	ldr	r5, [pc, #52]	; (8003680 <__libc_init_array+0x38>)
 800364c:	4c0d      	ldr	r4, [pc, #52]	; (8003684 <__libc_init_array+0x3c>)
 800364e:	1b64      	subs	r4, r4, r5
 8003650:	10a4      	asrs	r4, r4, #2
 8003652:	2600      	movs	r6, #0
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	4d0b      	ldr	r5, [pc, #44]	; (8003688 <__libc_init_array+0x40>)
 800365a:	4c0c      	ldr	r4, [pc, #48]	; (800368c <__libc_init_array+0x44>)
 800365c:	f000 f820 	bl	80036a0 <_init>
 8003660:	1b64      	subs	r4, r4, r5
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	2600      	movs	r6, #0
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f855 3b04 	ldr.w	r3, [r5], #4
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	080036e0 	.word	0x080036e0
 8003684:	080036e0 	.word	0x080036e0
 8003688:	080036e0 	.word	0x080036e0
 800368c:	080036e4 	.word	0x080036e4

08003690 <memset>:
 8003690:	4402      	add	r2, r0
 8003692:	4603      	mov	r3, r0
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	f803 1b01 	strb.w	r1, [r3], #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <_init>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	bf00      	nop
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr

080036ac <_fini>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr
