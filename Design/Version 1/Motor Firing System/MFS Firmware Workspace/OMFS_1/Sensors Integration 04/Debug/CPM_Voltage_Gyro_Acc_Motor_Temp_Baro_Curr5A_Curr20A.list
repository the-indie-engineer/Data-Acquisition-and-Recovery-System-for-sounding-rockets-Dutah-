
CPM_Voltage_Gyro_Acc_Motor_Temp_Baro_Curr5A_Curr20A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007574  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007740  08007740  00017740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007790  08007790  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007798  08007798  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080077a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000088  08007828  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08007828  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ea2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029be  00000000  00000000  00032f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00035918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00036a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e08  00000000  00000000  00037a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156c9  00000000  00000000  0005b860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deef8  00000000  00000000  00070f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fe21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de8  00000000  00000000  0014fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000088 	.word	0x20000088
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007724 	.word	0x08007724

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000008c 	.word	0x2000008c
 8000204:	08007724 	.word	0x08007724

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b974 	b.w	8000f10 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468e      	mov	lr, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d14d      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	4694      	mov	ip, r2
 8000c52:	d969      	bls.n	8000d28 <__udivmoddi4+0xe8>
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	b152      	cbz	r2, 8000c70 <__udivmoddi4+0x30>
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	f1c2 0120 	rsb	r1, r2, #32
 8000c62:	fa20 f101 	lsr.w	r1, r0, r1
 8000c66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	0c21      	lsrs	r1, r4, #16
 8000c76:	fbbe f6f8 	udiv	r6, lr, r8
 8000c7a:	fa1f f78c 	uxth.w	r7, ip
 8000c7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c86:	fb06 f107 	mul.w	r1, r6, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c96:	f080 811f 	bcs.w	8000ed8 <__udivmoddi4+0x298>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 811c 	bls.w	8000ed8 <__udivmoddi4+0x298>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb00 f707 	mul.w	r7, r0, r7
 8000cb8:	42a7      	cmp	r7, r4
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x92>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	f080 810a 	bcs.w	8000edc <__udivmoddi4+0x29c>
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	f240 8107 	bls.w	8000edc <__udivmoddi4+0x29c>
 8000cce:	4464      	add	r4, ip
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	1be4      	subs	r4, r4, r7
 8000cd8:	2600      	movs	r6, #0
 8000cda:	b11d      	cbz	r5, 8000ce4 <__udivmoddi4+0xa4>
 8000cdc:	40d4      	lsrs	r4, r2
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0xc2>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80ef 	beq.w	8000ed2 <__udivmoddi4+0x292>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	fab3 f683 	clz	r6, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d14a      	bne.n	8000da0 <__udivmoddi4+0x160>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xd4>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 80f9 	bhi.w	8000f06 <__udivmoddi4+0x2c6>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e0      	beq.n	8000ce4 <__udivmoddi4+0xa4>
 8000d22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d26:	e7dd      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000d28:	b902      	cbnz	r2, 8000d2c <__udivmoddi4+0xec>
 8000d2a:	deff      	udf	#255	; 0xff
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	f040 8092 	bne.w	8000e5a <__udivmoddi4+0x21a>
 8000d36:	eba1 010c 	sub.w	r1, r1, ip
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2601      	movs	r6, #1
 8000d44:	0c20      	lsrs	r0, r4, #16
 8000d46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d52:	fb0e f003 	mul.w	r0, lr, r3
 8000d56:	4288      	cmp	r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x12c>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x12a>
 8000d64:	4288      	cmp	r0, r1
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2c0>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	1a09      	subs	r1, r1, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d74:	fb07 1110 	mls	r1, r7, r0, r1
 8000d78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x156>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x154>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2ca>
 8000d94:	4608      	mov	r0, r1
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	e79c      	b.n	8000cda <__udivmoddi4+0x9a>
 8000da0:	f1c6 0720 	rsb	r7, r6, #32
 8000da4:	40b3      	lsls	r3, r6
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa20 f407 	lsr.w	r4, r0, r7
 8000db2:	fa01 f306 	lsl.w	r3, r1, r6
 8000db6:	431c      	orrs	r4, r3
 8000db8:	40f9      	lsrs	r1, r7
 8000dba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc6:	0c20      	lsrs	r0, r4, #16
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	fa02 f206 	lsl.w	r2, r2, r6
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b8>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2bc>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2bc>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e00:	fb09 1110 	mls	r1, r9, r0, r1
 8000e04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e0c:	458e      	cmp	lr, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1e2>
 8000e10:	eb1c 0101 	adds.w	r1, ip, r1
 8000e14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1a:	458e      	cmp	lr, r1
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4461      	add	r1, ip
 8000e22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e26:	fba0 9402 	umull	r9, r4, r0, r2
 8000e2a:	eba1 010e 	sub.w	r1, r1, lr
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46a6      	mov	lr, r4
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x212>
 8000e3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e42:	fa01 f707 	lsl.w	r7, r1, r7
 8000e46:	fa22 f306 	lsr.w	r3, r2, r6
 8000e4a:	40f1      	lsrs	r1, r6
 8000e4c:	431f      	orrs	r7, r3
 8000e4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	40d8      	lsrs	r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e78:	fb07 3610 	mls	r6, r7, r0, r3
 8000e7c:	0c0b      	lsrs	r3, r1, #16
 8000e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e82:	fb00 f60e 	mul.w	r6, r0, lr
 8000e86:	429e      	cmp	r6, r3
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x260>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1b9b      	subs	r3, r3, r6
 8000ea2:	b289      	uxth	r1, r1
 8000ea4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x28a>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec6:	3e02      	subs	r6, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0x104>
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e705      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e3      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6f8      	b.n	8000cd2 <__udivmoddi4+0x92>
 8000ee0:	454b      	cmp	r3, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f8>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f8>
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x28a>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1e2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b8>
 8000f00:	3b02      	subs	r3, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x12c>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e709      	b.n	8000d1e <__udivmoddi4+0xde>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x156>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <read_calliberation_data>:

#define atmPress 101325 //Pa


void read_calliberation_data (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
	uint16_t Callib_Start = 0xAA;
 8000f1a:	23aa      	movs	r3, #170	; 0xaa
 8000f1c:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2316      	movs	r3, #22
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <read_calliberation_data+0x12c>)
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	21ee      	movs	r1, #238	; 0xee
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <read_calliberation_data+0x130>)
 8000f34:	f003 f960 	bl	80041f8 <HAL_I2C_Mem_Read>
	temp=Callib_Data;
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <read_calliberation_data+0x12c>)
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b42      	ldr	r3, [pc, #264]	; (8001048 <read_calliberation_data+0x134>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <read_calliberation_data+0x12c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <read_calliberation_data+0x12c>)
 8000f4a:	785b      	ldrb	r3, [r3, #1]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <read_calliberation_data+0x138>)
 8000f54:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <read_calliberation_data+0x12c>)
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <read_calliberation_data+0x12c>)
 8000f60:	78db      	ldrb	r3, [r3, #3]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <read_calliberation_data+0x13c>)
 8000f6a:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <read_calliberation_data+0x12c>)
 8000f6e:	791b      	ldrb	r3, [r3, #4]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <read_calliberation_data+0x12c>)
 8000f76:	795b      	ldrb	r3, [r3, #5]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <read_calliberation_data+0x140>)
 8000f80:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <read_calliberation_data+0x12c>)
 8000f84:	799b      	ldrb	r3, [r3, #6]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <read_calliberation_data+0x12c>)
 8000f8c:	79db      	ldrb	r3, [r3, #7]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <read_calliberation_data+0x144>)
 8000f98:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <read_calliberation_data+0x12c>)
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <read_calliberation_data+0x12c>)
 8000fa4:	7a5b      	ldrb	r3, [r3, #9]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <read_calliberation_data+0x148>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <read_calliberation_data+0x12c>)
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <read_calliberation_data+0x12c>)
 8000fbc:	7adb      	ldrb	r3, [r3, #11]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <read_calliberation_data+0x14c>)
 8000fc8:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <read_calliberation_data+0x12c>)
 8000fcc:	7b1b      	ldrb	r3, [r3, #12]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <read_calliberation_data+0x12c>)
 8000fd4:	7b5b      	ldrb	r3, [r3, #13]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <read_calliberation_data+0x150>)
 8000fde:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <read_calliberation_data+0x12c>)
 8000fe2:	7b9b      	ldrb	r3, [r3, #14]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <read_calliberation_data+0x12c>)
 8000fea:	7bdb      	ldrb	r3, [r3, #15]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <read_calliberation_data+0x154>)
 8000ff4:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <read_calliberation_data+0x12c>)
 8000ff8:	7c1b      	ldrb	r3, [r3, #16]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <read_calliberation_data+0x12c>)
 8001000:	7c5b      	ldrb	r3, [r3, #17]
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <read_calliberation_data+0x158>)
 800100a:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <read_calliberation_data+0x12c>)
 800100e:	7c9b      	ldrb	r3, [r3, #18]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <read_calliberation_data+0x12c>)
 8001016:	7cdb      	ldrb	r3, [r3, #19]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <read_calliberation_data+0x15c>)
 8001020:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <read_calliberation_data+0x12c>)
 8001024:	7d1b      	ldrb	r3, [r3, #20]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <read_calliberation_data+0x12c>)
 800102c:	7d5b      	ldrb	r3, [r3, #21]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <read_calliberation_data+0x160>)
 8001036:	801a      	strh	r2, [r3, #0]

}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000f0 	.word	0x200000f0
 8001044:	20000210 	.word	0x20000210
 8001048:	200000ec 	.word	0x200000ec
 800104c:	200000a4 	.word	0x200000a4
 8001050:	200000a6 	.word	0x200000a6
 8001054:	200000a8 	.word	0x200000a8
 8001058:	200000aa 	.word	0x200000aa
 800105c:	200000ac 	.word	0x200000ac
 8001060:	200000ae 	.word	0x200000ae
 8001064:	200000b0 	.word	0x200000b0
 8001068:	200000b2 	.word	0x200000b2
 800106c:	200000b4 	.word	0x200000b4
 8001070:	200000b6 	.word	0x200000b6
 8001074:	200000b8 	.word	0x200000b8

08001078 <Get_UTemp>:
// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800107e:	232e      	movs	r3, #46	; 0x2e
 8001080:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2301      	movs	r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	22f4      	movs	r2, #244	; 0xf4
 8001094:	21ee      	movs	r1, #238	; 0xee
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <Get_UTemp+0x60>)
 8001098:	f002 ffb4 	bl	8004004 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 800109c:	2005      	movs	r0, #5
 800109e:	f001 fbf7 	bl	8002890 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2302      	movs	r3, #2
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Get_UTemp+0x64>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	22f6      	movs	r2, #246	; 0xf6
 80010b4:	21ee      	movs	r1, #238	; 0xee
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <Get_UTemp+0x60>)
 80010b8:	f003 f89e 	bl	80041f8 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <Get_UTemp+0x64>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <Get_UTemp+0x64>)
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	b29b      	uxth	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000210 	.word	0x20000210
 80010dc:	2000010c 	.word	0x2000010c

080010e0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80010e4:	f7ff ffc8 	bl	8001078 <Get_UTemp>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <BMP180_GetTemp+0x108>)
 80010ee:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80010f0:	4b3d      	ldr	r3, [pc, #244]	; (80011e8 <BMP180_GetTemp+0x108>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <BMP180_GetTemp+0x10c>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f9d6 	bl	80004ac <__aeabi_i2d>
 8001100:	4604      	mov	r4, r0
 8001102:	460d      	mov	r5, r1
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <BMP180_GetTemp+0x110>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9cf 	bl	80004ac <__aeabi_i2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <BMP180_GetTemp+0x114>)
 8001114:	f7ff fb5e 	bl	80007d4 <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4620      	mov	r0, r4
 800111e:	4629      	mov	r1, r5
 8001120:	f7ff fa2e 	bl	8000580 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fcd8 	bl	8000ae0 <__aeabi_d2iz>
 8001130:	4603      	mov	r3, r0
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <BMP180_GetTemp+0x118>)
 8001134:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <BMP180_GetTemp+0x11c>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9b5 	bl	80004ac <__aeabi_i2d>
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <BMP180_GetTemp+0x120>)
 8001148:	f7ff fa1a 	bl	8000580 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4614      	mov	r4, r2
 8001152:	461d      	mov	r5, r3
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <BMP180_GetTemp+0x124>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	461a      	mov	r2, r3
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <BMP180_GetTemp+0x118>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4413      	add	r3, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9a2 	bl	80004ac <__aeabi_i2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff fb30 	bl	80007d4 <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fcb0 	bl	8000ae0 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <BMP180_GetTemp+0x128>)
 8001184:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <BMP180_GetTemp+0x118>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <BMP180_GetTemp+0x128>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <BMP180_GetTemp+0x12c>)
 8001192:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <BMP180_GetTemp+0x12c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3308      	adds	r3, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f986 	bl	80004ac <__aeabi_i2d>
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <BMP180_GetTemp+0x130>)
 80011a6:	f7ff fb15 	bl	80007d4 <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc95 	bl	8000ae0 <__aeabi_d2iz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <BMP180_GetTemp+0x134>)
 80011ba:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <BMP180_GetTemp+0x134>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f973 	bl	80004ac <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <BMP180_GetTemp+0x138>)
 80011cc:	f7ff fb02 	bl	80007d4 <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcca 	bl	8000b70 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	ee07 3a90 	vmov	s15, r3
}
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}
 80011e8:	200000bc 	.word	0x200000bc
 80011ec:	200000ae 	.word	0x200000ae
 80011f0:	200000ac 	.word	0x200000ac
 80011f4:	40e00000 	.word	0x40e00000
 80011f8:	200000c4 	.word	0x200000c4
 80011fc:	200000b6 	.word	0x200000b6
 8001200:	40a00000 	.word	0x40a00000
 8001204:	200000b8 	.word	0x200000b8
 8001208:	200000c8 	.word	0x200000c8
 800120c:	200000d4 	.word	0x200000d4
 8001210:	40300000 	.word	0x40300000
 8001214:	200000e8 	.word	0x200000e8
 8001218:	40240000 	.word	0x40240000

0800121c <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af04      	add	r7, sp, #16
 8001222:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3334      	adds	r3, #52	; 0x34
 800122e:	b2db      	uxtb	r3, r3
 8001230:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 030f 	add.w	r3, r7, #15
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	22f4      	movs	r2, #244	; 0xf4
 8001246:	21ee      	movs	r1, #238	; 0xee
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <Get_UPress+0xb0>)
 800124a:	f002 fedb 	bl	8004004 <HAL_I2C_Mem_Write>
	}
	if(PCF==3|PCF==1) //Open
		{
			Press_RAW[1]=1;
		}*/
	switch (oss)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d81b      	bhi.n	800128c <Get_UPress+0x70>
 8001254:	a201      	add	r2, pc, #4	; (adr r2, 800125c <Get_UPress+0x40>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	0800126d 	.word	0x0800126d
 8001260:	08001275 	.word	0x08001275
 8001264:	0800127d 	.word	0x0800127d
 8001268:	08001285 	.word	0x08001285
	{
		case (0):
			HAL_Delay (5);
 800126c:	2005      	movs	r0, #5
 800126e:	f001 fb0f 	bl	8002890 <HAL_Delay>
			break;
 8001272:	e00b      	b.n	800128c <Get_UPress+0x70>
		case (1):
			HAL_Delay (8);
 8001274:	2008      	movs	r0, #8
 8001276:	f001 fb0b 	bl	8002890 <HAL_Delay>
			break;
 800127a:	e007      	b.n	800128c <Get_UPress+0x70>
		case (2):
			HAL_Delay (14);
 800127c:	200e      	movs	r0, #14
 800127e:	f001 fb07 	bl	8002890 <HAL_Delay>
			break;
 8001282:	e003      	b.n	800128c <Get_UPress+0x70>
		case (3):
			HAL_Delay (26);
 8001284:	201a      	movs	r0, #26
 8001286:	f001 fb03 	bl	8002890 <HAL_Delay>
			break;
 800128a:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	2303      	movs	r3, #3
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <Get_UPress+0xb4>)
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	22f6      	movs	r2, #246	; 0xf6
 800129e:	21ee      	movs	r1, #238	; 0xee
 80012a0:	480a      	ldr	r0, [pc, #40]	; (80012cc <Get_UPress+0xb0>)
 80012a2:	f002 ffa9 	bl	80041f8 <HAL_I2C_Mem_Read>
	//i2c_err=Press_RAW[1]&0x07;
	//i2c_err=Press_RAW;
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <Get_UPress+0xb4>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <Get_UPress+0xb4>)
 80012ae:	785b      	ldrb	r3, [r3, #1]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	4413      	add	r3, r2
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <Get_UPress+0xb4>)
 80012b6:	7892      	ldrb	r2, [r2, #2]
 80012b8:	441a      	add	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f1c3 0308 	rsb	r3, r3, #8
 80012c0:	fa42 f303 	asr.w	r3, r2, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000210 	.word	0x20000210
 80012d0:	20000108 	.word	0x20000108

080012d4 <BMP180_GetPress>:
float BMP180_GetPress (int oss)
{
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff9d 	bl	800121c <Get_UPress>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4ba8      	ldr	r3, [pc, #672]	; (8001588 <BMP180_GetPress+0x2b4>)
 80012e8:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80012ea:	4ba8      	ldr	r3, [pc, #672]	; (800158c <BMP180_GetPress+0x2b8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4aa8      	ldr	r2, [pc, #672]	; (8001590 <BMP180_GetPress+0x2bc>)
 80012f0:	8812      	ldrh	r2, [r2, #0]
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8d9 	bl	80004ac <__aeabi_i2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	4ba5      	ldr	r3, [pc, #660]	; (8001594 <BMP180_GetPress+0x2c0>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8d2 	bl	80004ac <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4ba2      	ldr	r3, [pc, #648]	; (8001598 <BMP180_GetPress+0x2c4>)
 800130e:	f7ff fa61 	bl	80007d4 <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7ff f931 	bl	8000580 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fbdb 	bl	8000ae0 <__aeabi_d2iz>
 800132a:	4603      	mov	r3, r0
 800132c:	4a9b      	ldr	r2, [pc, #620]	; (800159c <BMP180_GetPress+0x2c8>)
 800132e:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001330:	4b9b      	ldr	r3, [pc, #620]	; (80015a0 <BMP180_GetPress+0x2cc>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8b8 	bl	80004ac <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b98      	ldr	r3, [pc, #608]	; (80015a4 <BMP180_GetPress+0x2d0>)
 8001342:	f7ff f91d 	bl	8000580 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4614      	mov	r4, r2
 800134c:	461d      	mov	r5, r3
 800134e:	4b96      	ldr	r3, [pc, #600]	; (80015a8 <BMP180_GetPress+0x2d4>)
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	461a      	mov	r2, r3
 8001356:	4b91      	ldr	r3, [pc, #580]	; (800159c <BMP180_GetPress+0x2c8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8a5 	bl	80004ac <__aeabi_i2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4620      	mov	r0, r4
 8001368:	4629      	mov	r1, r5
 800136a:	f7ff fa33 	bl	80007d4 <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fbb3 	bl	8000ae0 <__aeabi_d2iz>
 800137a:	4603      	mov	r3, r0
 800137c:	4a8b      	ldr	r2, [pc, #556]	; (80015ac <BMP180_GetPress+0x2d8>)
 800137e:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001380:	4b86      	ldr	r3, [pc, #536]	; (800159c <BMP180_GetPress+0x2c8>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b89      	ldr	r3, [pc, #548]	; (80015ac <BMP180_GetPress+0x2d8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	4a89      	ldr	r2, [pc, #548]	; (80015b0 <BMP180_GetPress+0x2dc>)
 800138c:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800138e:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <BMP180_GetPress+0x2dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001396:	4a87      	ldr	r2, [pc, #540]	; (80015b4 <BMP180_GetPress+0x2e0>)
 8001398:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800139a:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <BMP180_GetPress+0x2e4>)
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f883 	bl	80004ac <__aeabi_i2d>
 80013a6:	4604      	mov	r4, r0
 80013a8:	460d      	mov	r5, r1
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <BMP180_GetPress+0x2e0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a81      	ldr	r2, [pc, #516]	; (80015b4 <BMP180_GetPress+0x2e0>)
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f878 	bl	80004ac <__aeabi_i2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <BMP180_GetPress+0x2e8>)
 80013c2:	f7ff fa07 	bl	80007d4 <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7ff f8d7 	bl	8000580 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <BMP180_GetPress+0x2d0>)
 80013e0:	f7ff f9f8 	bl	80007d4 <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fb78 	bl	8000ae0 <__aeabi_d2iz>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a6a      	ldr	r2, [pc, #424]	; (800159c <BMP180_GetPress+0x2c8>)
 80013f4:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <BMP180_GetPress+0x2ec>)
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <BMP180_GetPress+0x2e0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f850 	bl	80004ac <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <BMP180_GetPress+0x2d0>)
 8001412:	f7ff f9df 	bl	80007d4 <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fb5f 	bl	8000ae0 <__aeabi_d2iz>
 8001422:	4603      	mov	r3, r0
 8001424:	4a61      	ldr	r2, [pc, #388]	; (80015ac <BMP180_GetPress+0x2d8>)
 8001426:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001428:	4b5c      	ldr	r3, [pc, #368]	; (800159c <BMP180_GetPress+0x2c8>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <BMP180_GetPress+0x2d8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4413      	add	r3, r2
 8001432:	4a64      	ldr	r2, [pc, #400]	; (80015c4 <BMP180_GetPress+0x2f0>)
 8001434:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001436:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <BMP180_GetPress+0x2f4>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	009a      	lsls	r2, r3, #2
 800143e:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <BMP180_GetPress+0x2f0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	441a      	add	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	3302      	adds	r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	da00      	bge.n	8001452 <BMP180_GetPress+0x17e>
 8001450:	3303      	adds	r3, #3
 8001452:	109b      	asrs	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <BMP180_GetPress+0x2f8>)
 8001458:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <BMP180_GetPress+0x2fc>)
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	461a      	mov	r2, r3
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <BMP180_GetPress+0x2e0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f81e 	bl	80004ac <__aeabi_i2d>
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b57      	ldr	r3, [pc, #348]	; (80015d4 <BMP180_GetPress+0x300>)
 8001476:	f7ff f9ad 	bl	80007d4 <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb2d 	bl	8000ae0 <__aeabi_d2iz>
 8001486:	4603      	mov	r3, r0
 8001488:	4a44      	ldr	r2, [pc, #272]	; (800159c <BMP180_GetPress+0x2c8>)
 800148a:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800148c:	4b52      	ldr	r3, [pc, #328]	; (80015d8 <BMP180_GetPress+0x304>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f80a 	bl	80004ac <__aeabi_i2d>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
 800149c:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <BMP180_GetPress+0x2e0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a44      	ldr	r2, [pc, #272]	; (80015b4 <BMP180_GetPress+0x2e0>)
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffff 	bl	80004ac <__aeabi_i2d>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <BMP180_GetPress+0x2e8>)
 80014b4:	f7ff f98e 	bl	80007d4 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7ff f85e 	bl	8000580 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b42      	ldr	r3, [pc, #264]	; (80015dc <BMP180_GetPress+0x308>)
 80014d2:	f7ff f97f 	bl	80007d4 <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff faff 	bl	8000ae0 <__aeabi_d2iz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a31      	ldr	r2, [pc, #196]	; (80015ac <BMP180_GetPress+0x2d8>)
 80014e6:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <BMP180_GetPress+0x2c8>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <BMP180_GetPress+0x2d8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	3302      	adds	r3, #2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ffd9 	bl	80004ac <__aeabi_i2d>
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <BMP180_GetPress+0x30c>)
 8001500:	f7ff f968 	bl	80007d4 <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fae8 	bl	8000ae0 <__aeabi_d2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	4a2c      	ldr	r2, [pc, #176]	; (80015c4 <BMP180_GetPress+0x2f0>)
 8001514:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <BMP180_GetPress+0x310>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <BMP180_GetPress+0x2f0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ffaf 	bl	800048c <__aeabi_ui2d>
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <BMP180_GetPress+0x2c4>)
 8001534:	f7ff f94e 	bl	80007d4 <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff faf6 	bl	8000b30 <__aeabi_d2uiz>
 8001544:	4603      	mov	r3, r0
 8001546:	4a28      	ldr	r2, [pc, #160]	; (80015e8 <BMP180_GetPress+0x314>)
 8001548:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <BMP180_GetPress+0x2b4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <BMP180_GetPress+0x2f8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f24c 3150 	movw	r1, #50000	; 0xc350
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	fa41 f202 	asr.w	r2, r1, r2
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <BMP180_GetPress+0x318>)
 8001566:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <BMP180_GetPress+0x318>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db41      	blt.n	80015f4 <BMP180_GetPress+0x320>
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <BMP180_GetPress+0x318>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	005a      	lsls	r2, r3, #1
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <BMP180_GetPress+0x314>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <BMP180_GetPress+0x31c>)
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	e040      	b.n	8001608 <BMP180_GetPress+0x334>
 8001586:	bf00      	nop
 8001588:	200000c0 	.word	0x200000c0
 800158c:	200000bc 	.word	0x200000bc
 8001590:	200000ae 	.word	0x200000ae
 8001594:	200000ac 	.word	0x200000ac
 8001598:	40e00000 	.word	0x40e00000
 800159c:	200000c4 	.word	0x200000c4
 80015a0:	200000b6 	.word	0x200000b6
 80015a4:	40a00000 	.word	0x40a00000
 80015a8:	200000b8 	.word	0x200000b8
 80015ac:	200000c8 	.word	0x200000c8
 80015b0:	200000d4 	.word	0x200000d4
 80015b4:	200000dc 	.word	0x200000dc
 80015b8:	200000b2 	.word	0x200000b2
 80015bc:	40b00000 	.word	0x40b00000
 80015c0:	200000a6 	.word	0x200000a6
 80015c4:	200000cc 	.word	0x200000cc
 80015c8:	200000a4 	.word	0x200000a4
 80015cc:	200000d0 	.word	0x200000d0
 80015d0:	200000a8 	.word	0x200000a8
 80015d4:	40c00000 	.word	0x40c00000
 80015d8:	200000b0 	.word	0x200000b0
 80015dc:	40f00000 	.word	0x40f00000
 80015e0:	40100000 	.word	0x40100000
 80015e4:	200000aa 	.word	0x200000aa
 80015e8:	200000d8 	.word	0x200000d8
 80015ec:	200000e0 	.word	0x200000e0
 80015f0:	200000e4 	.word	0x200000e4
	else Press = (B7/B4)*2;
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <BMP180_GetPress+0x43c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b46      	ldr	r3, [pc, #280]	; (8001714 <BMP180_GetPress+0x440>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	461a      	mov	r2, r3
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <BMP180_GetPress+0x444>)
 8001606:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <BMP180_GetPress+0x444>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff4d 	bl	80004ac <__aeabi_i2d>
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <BMP180_GetPress+0x448>)
 8001618:	f7ff f8dc 	bl	80007d4 <__aeabi_ddiv>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4614      	mov	r4, r2
 8001622:	461d      	mov	r5, r3
 8001624:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <BMP180_GetPress+0x444>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff3f 	bl	80004ac <__aeabi_i2d>
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <BMP180_GetPress+0x448>)
 8001634:	f7ff f8ce 	bl	80007d4 <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4620      	mov	r0, r4
 800163e:	4629      	mov	r1, r5
 8001640:	f7fe ff9e 	bl	8000580 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff fa48 	bl	8000ae0 <__aeabi_d2iz>
 8001650:	4603      	mov	r3, r0
 8001652:	4a33      	ldr	r2, [pc, #204]	; (8001720 <BMP180_GetPress+0x44c>)
 8001654:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <BMP180_GetPress+0x44c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f640 32de 	movw	r2, #3038	; 0xbde
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff22 	bl	80004ac <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <BMP180_GetPress+0x450>)
 800166e:	f7ff f8b1 	bl	80007d4 <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa31 	bl	8000ae0 <__aeabi_d2iz>
 800167e:	4603      	mov	r3, r0
 8001680:	4a27      	ldr	r2, [pc, #156]	; (8001720 <BMP180_GetPress+0x44c>)
 8001682:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <BMP180_GetPress+0x444>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <BMP180_GetPress+0x454>)
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff0c 	bl	80004ac <__aeabi_i2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <BMP180_GetPress+0x450>)
 800169a:	f7ff f89b 	bl	80007d4 <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa1b 	bl	8000ae0 <__aeabi_d2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a1f      	ldr	r2, [pc, #124]	; (800172c <BMP180_GetPress+0x458>)
 80016ae:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <BMP180_GetPress+0x444>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fef9 	bl	80004ac <__aeabi_i2d>
 80016ba:	4604      	mov	r4, r0
 80016bc:	460d      	mov	r5, r1
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <BMP180_GetPress+0x44c>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <BMP180_GetPress+0x458>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe feed 	bl	80004ac <__aeabi_i2d>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <BMP180_GetPress+0x45c>)
 80016d8:	f7ff f87c 	bl	80007d4 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe fd96 	bl	8000214 <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff f9f6 	bl	8000ae0 <__aeabi_d2iz>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <BMP180_GetPress+0x444>)
 80016f8:	6013      	str	r3, [r2, #0]
	return Press;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <BMP180_GetPress+0x444>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bdb0      	pop	{r4, r5, r7, pc}
 8001710:	200000e0 	.word	0x200000e0
 8001714:	200000d8 	.word	0x200000d8
 8001718:	200000e4 	.word	0x200000e4
 800171c:	40700000 	.word	0x40700000
 8001720:	200000c4 	.word	0x200000c4
 8001724:	40f00000 	.word	0x40f00000
 8001728:	ffffe343 	.word	0xffffe343
 800172c:	200000c8 	.word	0x200000c8
 8001730:	40300000 	.word	0x40300000
 8001734:	00000000 	.word	0x00000000

08001738 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fdc7 	bl	80012d4 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.190294957)));
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <BMP180_GetAlt+0x88>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80017c4 <BMP180_GetAlt+0x8c>
 8001756:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800175a:	ee16 0a90 	vmov	r0, s13
 800175e:	f7fe feb7 	bl	80004d0 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80017b0 <BMP180_GetAlt+0x78>
 800176a:	ec43 2b10 	vmov	d0, r2, r3
 800176e:	f005 f8bd 	bl	80068ec <pow>
 8001772:	ec53 2b10 	vmov	r2, r3, d0
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	4913      	ldr	r1, [pc, #76]	; (80017c8 <BMP180_GetAlt+0x90>)
 800177c:	f7fe fd48 	bl	8000210 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a30b      	add	r3, pc, #44	; (adr r3, 80017b8 <BMP180_GetAlt+0x80>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe fef7 	bl	8000580 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f9e9 	bl	8000b70 <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	ee07 3a90 	vmov	s15, r3
}
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	cc745124 	.word	0xcc745124
 80017b4:	3fc85b95 	.word	0x3fc85b95
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40e5a540 	.word	0x40e5a540
 80017c0:	200000e4 	.word	0x200000e4
 80017c4:	47c5e680 	.word	0x47c5e680
 80017c8:	3ff00000 	.word	0x3ff00000

080017cc <BMP180_Start>:

void BMP180_Start (void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80017d0:	f7ff fba0 	bl	8000f14 <read_calliberation_data>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <Max6675_Read_Temp>:
extern uint16_t timer_val;



// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	4834      	ldr	r0, [pc, #208]	; (80018bc <Max6675_Read_Temp+0xe4>)
 80017ea:	f002 faad 	bl	8003d48 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80017ee:	2332      	movs	r3, #50	; 0x32
 80017f0:	2201      	movs	r2, #1
 80017f2:	4933      	ldr	r1, [pc, #204]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 80017f4:	4833      	ldr	r0, [pc, #204]	; (80018c4 <Max6675_Read_Temp+0xec>)
 80017f6:	f004 f92e 	bl	8005a56 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 80017fa:	2201      	movs	r2, #1
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	482f      	ldr	r0, [pc, #188]	; (80018bc <Max6675_Read_Temp+0xe4>)
 8001800:	f002 faa2 	bl	8003d48 <HAL_GPIO_WritePin>

TCF=DATARX[1]&0x03;
 8001804:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 8001810:	701a      	strb	r2, [r3, #0]
Error=0;
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <Max6675_Read_Temp+0xf4>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
if(TCF!=1)
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d02b      	beq.n	8001878 <Max6675_Read_Temp+0xa0>
{


	if(TCF==0)
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d120      	bne.n	800186a <Max6675_Read_Temp+0x92>
		{
		HAL_TIM_Base_Start(&htim1);
 8001828:	4829      	ldr	r0, [pc, #164]	; (80018d0 <Max6675_Read_Temp+0xf8>)
 800182a:	f004 fd47 	bl	80062bc <HAL_TIM_Base_Start>
		while(timer_val<1)
 800182e:	e011      	b.n	8001854 <Max6675_Read_Temp+0x7c>
		{
			if(TCF==3)
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d103      	bne.n	8001840 <Max6675_Read_Temp+0x68>
			{
				Error=1;
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <Max6675_Read_Temp+0xf4>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
				break;
 800183e:	e00d      	b.n	800185c <Max6675_Read_Temp+0x84>
			}
			timer_val = __HAL_TIM_GET_COUNTER(&htim1)/10000; // Get initial time value
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <Max6675_Read_Temp+0xf8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <Max6675_Read_Temp+0xfc>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0b5b      	lsrs	r3, r3, #13
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <Max6675_Read_Temp+0x100>)
 8001852:	801a      	strh	r2, [r3, #0]
		while(timer_val<1)
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <Max6675_Read_Temp+0x100>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0e9      	beq.n	8001830 <Max6675_Read_Temp+0x58>
		}
		timer_val=0;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <Max6675_Read_Temp+0x100>)
 800185e:	2200      	movs	r2, #0
 8001860:	801a      	strh	r2, [r3, #0]
		Error=2;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <Max6675_Read_Temp+0xf4>)
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e006      	b.n	8001878 <Max6675_Read_Temp+0xa0>
		}
	else if(TCF==3) Error=3;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <Max6675_Read_Temp+0xf0>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d102      	bne.n	8001878 <Max6675_Read_Temp+0xa0>
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <Max6675_Read_Temp+0xf4>)
 8001874:	2203      	movs	r2, #3
 8001876:	701a      	strb	r2, [r3, #0]

}


//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <Max6675_Read_Temp+0xe8>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4313      	orrs	r3, r2
 8001886:	10db      	asrs	r3, r3, #3
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8001894:	edd7 7a01 	vldr	s15, [r7, #4]
 8001898:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a0:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 80018a4:	20fa      	movs	r0, #250	; 0xfa
 80018a6:	f000 fff3 	bl	8002890 <HAL_Delay>
return Temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	ee07 3a90 	vmov	s15, r3
}
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40020000 	.word	0x40020000
 80018c0:	20000110 	.word	0x20000110
 80018c4:	20000264 	.word	0x20000264
 80018c8:	20000112 	.word	0x20000112
 80018cc:	20000113 	.word	0x20000113
 80018d0:	200002bc 	.word	0x200002bc
 80018d4:	d1b71759 	.word	0xd1b71759
 80018d8:	20000324 	.word	0x20000324

080018dc <barometer_sensor.0>:
  BMP180_Start();
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 3);


  void barometer_sensor()
  {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Temperature2 = BMP180_GetTemp();
 80018e6:	f7ff fbfb 	bl	80010e0 <BMP180_GetTemp>
 80018ea:	eef0 7a40 	vmov.f32	s15, s0
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <barometer_sensor.0+0x40>)
 80018f0:	edc3 7a00 	vstr	s15, [r3]
  	  Pressure = BMP180_GetPress(0);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fced 	bl	80012d4 <BMP180_GetPress>
 80018fa:	eef0 7a40 	vmov.f32	s15, s0
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <barometer_sensor.0+0x44>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
  	  Altitude = BMP180_GetAlt(0);
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff ff17 	bl	8001738 <BMP180_GetAlt>
 800190a:	eef0 7a40 	vmov.f32	s15, s0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <barometer_sensor.0+0x48>)
 8001910:	edc3 7a00 	vstr	s15, [r3]
  }
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000330 	.word	0x20000330
 8001920:	20000334 	.word	0x20000334
 8001924:	20000338 	.word	0x20000338

08001928 <main>:
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
int main(void)
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001934:	f000 ff3a 	bl	80027ac <HAL_Init>
  SystemClock_Config();
 8001938:	f000 f932 	bl	8001ba0 <SystemClock_Config>
  MX_GPIO_Init();
 800193c:	f000 fb16 	bl	8001f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001940:	f000 faf4 	bl	8001f2c <MX_DMA_Init>
  MX_ADC1_Init();
 8001944:	f000 f99e 	bl	8001c84 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001948:	f000 fa0a 	bl	8001d60 <MX_I2C1_Init>
  MX_SPI1_Init();
 800194c:	f000 fa64 	bl	8001e18 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001950:	f000 fa9a 	bl	8001e88 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001954:	f000 fa32 	bl	8001dbc <MX_I2C2_Init>
  HAL_ADC_Init(&hadc1);
 8001958:	4823      	ldr	r0, [pc, #140]	; (80019e8 <main+0xc0>)
 800195a:	f000 ffbd 	bl	80028d8 <HAL_ADC_Init>
  MPU6050_Init();
 800195e:	f000 fb77 	bl	8002050 <MPU6050_Init>
  BMP180_Start();
 8001962:	f7ff ff33 	bl	80017cc <BMP180_Start>
  HAL_ADC_Start_DMA(&hadc1, dmaOut, 3);
 8001966:	2203      	movs	r2, #3
 8001968:	4920      	ldr	r1, [pc, #128]	; (80019ec <main+0xc4>)
 800196a:	481f      	ldr	r0, [pc, #124]	; (80019e8 <main+0xc0>)
 800196c:	f000 fff8 	bl	8002960 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temperature=Max6675_Read_Temp();
 8001970:	f7ff ff32 	bl	80017d8 <Max6675_Read_Temp>
 8001974:	eef0 7a40 	vmov.f32	s15, s0
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <main+0xc8>)
 800197a:	edc3 7a00 	vstr	s15, [r3]

	  barometer_sensor();
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	469c      	mov	ip, r3
 8001982:	f7ff ffab 	bl	80018dc <barometer_sensor.0>
	  current_sensor5();
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	469c      	mov	ip, r3
 800198a:	f000 f849 	bl	8001a20 <current_sensor5.1>
	  current_sensor20();
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	469c      	mov	ip, r3
 8001992:	f000 f8a5 	bl	8001ae0 <current_sensor20.2>

	  MPU6050_Read_Accel (&Ax, &Ay, &Az);
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <main+0xcc>)
 8001998:	4917      	ldr	r1, [pc, #92]	; (80019f8 <main+0xd0>)
 800199a:	4818      	ldr	r0, [pc, #96]	; (80019fc <main+0xd4>)
 800199c:	f000 fbc0 	bl	8002120 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 80019a0:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <main+0xd8>)
 80019a2:	4918      	ldr	r1, [pc, #96]	; (8001a04 <main+0xdc>)
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <main+0xe0>)
 80019a6:	f000 fc3f 	bl	8002228 <MPU6050_Read_Gyro>
	  //HAL_Delay(250);

	  HAL_GPIO_WritePin(GPIOA, CV_En_Pin, CV_Voltage_ui);
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <main+0xe4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	2140      	movs	r1, #64	; 0x40
 80019b2:	4817      	ldr	r0, [pc, #92]	; (8001a10 <main+0xe8>)
 80019b4:	f002 f9c8 	bl	8003d48 <HAL_GPIO_WritePin>
	  CpmVoltage = dmaOut[0]*(5.0/4096.0);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <main+0xc4>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fd75 	bl	80004ac <__aeabi_i2d>
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <main+0xec>)
 80019c8:	f7fe fdda 	bl	8000580 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8cc 	bl	8000b70 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <main+0xf0>)
 80019dc:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 80019de:	2064      	movs	r0, #100	; 0x64
 80019e0:	f000 ff56 	bl	8002890 <HAL_Delay>
	  temperature=Max6675_Read_Temp();
 80019e4:	e7c4      	b.n	8001970 <main+0x48>
 80019e6:	bf00      	nop
 80019e8:	20000114 	.word	0x20000114
 80019ec:	20000328 	.word	0x20000328
 80019f0:	20000320 	.word	0x20000320
 80019f4:	2000030c 	.word	0x2000030c
 80019f8:	20000308 	.word	0x20000308
 80019fc:	20000304 	.word	0x20000304
 8001a00:	20000318 	.word	0x20000318
 8001a04:	20000314 	.word	0x20000314
 8001a08:	20000310 	.word	0x20000310
 8001a0c:	2000031c 	.word	0x2000031c
 8001a10:	40020000 	.word	0x40020000
 8001a14:	3f540000 	.word	0x3f540000
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	00000000 	.word	0x00000000

08001a20 <current_sensor5.1>:
  {
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue5 = dmaOut[1];
 8001a2a:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <current_sensor5.1+0xa8>)
 8001a2c:	885a      	ldrh	r2, [r3, #2]
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <current_sensor5.1+0xac>)
 8001a30:	801a      	strh	r2, [r3, #0]
  	  rawVoltage5 = ((float) readValue5 * 3.3) / 4095 *adc_err5;
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <current_sensor5.1+0xac>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3e:	ee17 0a90 	vmov	r0, s15
 8001a42:	f7fe fd45 	bl	80004d0 <__aeabi_f2d>
 8001a46:	a31c      	add	r3, pc, #112	; (adr r3, 8001ab8 <current_sensor5.1+0x98>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fd98 	bl	8000580 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	a319      	add	r3, pc, #100	; (adr r3, 8001ac0 <current_sensor5.1+0xa0>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe feb9 	bl	80007d4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	461d      	mov	r5, r3
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <current_sensor5.1+0xb0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd2e 	bl	80004d0 <__aeabi_f2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fd80 	bl	8000580 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f872 	bl	8000b70 <__aeabi_d2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <current_sensor5.1+0xb4>)
 8001a90:	6013      	str	r3, [r2, #0]
  	  current5 =(1 - rawVoltage5)/sensitivity5;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <current_sensor5.1+0xb4>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <current_sensor5.1+0xb8>)
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <current_sensor5.1+0xbc>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]
  }
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab8:	66666666 	.word	0x66666666
 8001abc:	400a6666 	.word	0x400a6666
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40affe00 	.word	0x40affe00
 8001ac8:	20000328 	.word	0x20000328
 8001acc:	2000033c 	.word	0x2000033c
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000340 	.word	0x20000340
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	20000344 	.word	0x20000344

08001ae0 <current_sensor20.2>:
  {
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	f8c7 c004 	str.w	ip, [r7, #4]
  	  readValue20 = dmaOut[2];
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <current_sensor20.2+0xa8>)
 8001aec:	889a      	ldrh	r2, [r3, #4]
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <current_sensor20.2+0xac>)
 8001af0:	801a      	strh	r2, [r3, #0]
  	  rawVoltage20 = ((float) readValue20 * 3.3) / 4095 *adc_err20;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <current_sensor20.2+0xac>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afe:	ee17 0a90 	vmov	r0, s15
 8001b02:	f7fe fce5 	bl	80004d0 <__aeabi_f2d>
 8001b06:	a31c      	add	r3, pc, #112	; (adr r3, 8001b78 <current_sensor20.2+0x98>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fd38 	bl	8000580 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	a319      	add	r3, pc, #100	; (adr r3, 8001b80 <current_sensor20.2+0xa0>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fe59 	bl	80007d4 <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <current_sensor20.2+0xb0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fcce 	bl	80004d0 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fd20 	bl	8000580 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7ff f812 	bl	8000b70 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <current_sensor20.2+0xb4>)
 8001b50:	6013      	str	r3, [r2, #0]
  	  current20 =(1 - rawVoltage20)/sensitivity20;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <current_sensor20.2+0xb4>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b5c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <current_sensor20.2+0xb8>)
 8001b62:	ed93 7a00 	vldr	s14, [r3]
 8001b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <current_sensor20.2+0xbc>)
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
  }
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	66666666 	.word	0x66666666
 8001b7c:	400a6666 	.word	0x400a6666
 8001b80:	00000000 	.word	0x00000000
 8001b84:	40affe00 	.word	0x40affe00
 8001b88:	20000328 	.word	0x20000328
 8001b8c:	20000348 	.word	0x20000348
 8001b90:	20000010 	.word	0x20000010
 8001b94:	2000034c 	.word	0x2000034c
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	20000350 	.word	0x20000350

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	2234      	movs	r2, #52	; 0x34
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fe94 	bl	80068dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <SystemClock_Config+0xdc>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <SystemClock_Config+0xdc>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <SystemClock_Config+0xdc>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be0:	2300      	movs	r3, #0
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <SystemClock_Config+0xe0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <SystemClock_Config+0xe0>)
 8001bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <SystemClock_Config+0xe0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c04:	2310      	movs	r3, #16
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c10:	2308      	movs	r3, #8
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c14:	23b4      	movs	r3, #180	; 0xb4
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fbed 	bl	8005408 <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c34:	f000 fa06 	bl	8002044 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c38:	f003 f860 	bl	8004cfc <HAL_PWREx_EnableOverDrive>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c42:	f000 f9ff 	bl	8002044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c46:	230f      	movs	r3, #15
 8001c48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	2105      	movs	r1, #5
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f899 	bl	8004d9c <HAL_RCC_ClockConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c70:	f000 f9e8 	bl	8002044 <Error_Handler>
  }
}
 8001c74:	bf00      	nop
 8001c76:	3750      	adds	r7, #80	; 0x50
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001c98:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <MX_ADC1_Init+0xd4>)
 8001c9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001c9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ca2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <MX_ADC1_Init+0xd8>)
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001ce6:	f000 fdf7 	bl	80028d8 <HAL_ADC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cf0:	f000 f9a8 	bl	8002044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	4619      	mov	r1, r3
 8001d04:	4813      	ldr	r0, [pc, #76]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001d06:	f000 ff59 	bl	8002bbc <HAL_ADC_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d10:	f000 f998 	bl	8002044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001d22:	f000 ff4b 	bl	8002bbc <HAL_ADC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d2c:	f000 f98a 	bl	8002044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d30:	2304      	movs	r3, #4
 8001d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d34:	2303      	movs	r3, #3
 8001d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_ADC1_Init+0xd0>)
 8001d3e:	f000 ff3d 	bl	8002bbc <HAL_ADC_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001d48:	f000 f97c 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000114 	.word	0x20000114
 8001d58:	40012000 	.word	0x40012000
 8001d5c:	0f000001 	.word	0x0f000001

08001d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <MX_I2C1_Init+0x54>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_I2C1_Init+0x58>)
 8001d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d9e:	f001 ffed 	bl	8003d7c <HAL_I2C_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001da8:	f000 f94c 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200001bc 	.word	0x200001bc
 8001db4:	40005400 	.word	0x40005400
 8001db8:	000186a0 	.word	0x000186a0

08001dbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <MX_I2C2_Init+0x54>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_I2C2_Init+0x58>)
 8001dca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dfa:	f001 ffbf 	bl	8003d7c <HAL_I2C_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e04:	f000 f91e 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000210 	.word	0x20000210
 8001e10:	40005800 	.word	0x40005800
 8001e14:	00061a80 	.word	0x00061a80

08001e18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e1e:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <MX_SPI1_Init+0x6c>)
 8001e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e30:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e66:	220a      	movs	r2, #10
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e6c:	f003 fd6a 	bl	8005944 <HAL_SPI_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001e76:	f000 f8e5 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000264 	.word	0x20000264
 8001e84:	40013000 	.word	0x40013000

08001e88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <MX_TIM1_Init+0xa0>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45000;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001eac:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001eb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ebe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed2:	4814      	ldr	r0, [pc, #80]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001ed4:	f004 f9a2 	bl	800621c <HAL_TIM_Base_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001ede:	f000 f8b1 	bl	8002044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4619      	mov	r1, r3
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001ef0:	f004 fa4c 	bl	800638c <HAL_TIM_ConfigClockSource>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001efa:	f000 f8a3 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f06:	463b      	mov	r3, r7
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4806      	ldr	r0, [pc, #24]	; (8001f24 <MX_TIM1_Init+0x9c>)
 8001f0c:	f004 fc40 	bl	8006790 <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001f16:	f000 f895 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200002bc 	.word	0x200002bc
 8001f28:	40010000 	.word	0x40010000

08001f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_DMA_Init+0x3c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <MX_DMA_Init+0x3c>)
 8001f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_DMA_Init+0x3c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2038      	movs	r0, #56	; 0x38
 8001f54:	f001 f9bd 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f58:	2038      	movs	r0, #56	; 0x38
 8001f5a:	f001 f9d6 	bl	800330a <HAL_NVIC_EnableIRQ>

}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <MX_GPIO_Init+0xd0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a2c      	ldr	r2, [pc, #176]	; (800203c <MX_GPIO_Init+0xd0>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <MX_GPIO_Init+0xd0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a25      	ldr	r2, [pc, #148]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <MX_GPIO_Init+0xd0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CV_Enable_Pin|MT_CS_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	21c0      	movs	r1, #192	; 0xc0
 8001ff6:	4812      	ldr	r0, [pc, #72]	; (8002040 <MX_GPIO_Init+0xd4>)
 8001ff8:	f001 fea6 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CV_Enable_Pin */
  GPIO_InitStruct.Pin = CV_Enable_Pin;
 8001ffc:	2340      	movs	r3, #64	; 0x40
 8001ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002004:	2302      	movs	r3, #2
 8002006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CV_Enable_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <MX_GPIO_Init+0xd4>)
 8002014:	f001 fd04 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MT_CS_Pin */
  GPIO_InitStruct.Pin = MT_CS_Pin;
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MT_CS_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_GPIO_Init+0xd4>)
 8002030:	f001 fcf6 	bl	8003a20 <HAL_GPIO_Init>

}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	; 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800204c:	e7fe      	b.n	800204c <Error_Handler+0x8>
	...

08002050 <MPU6050_Init>:
uint16_t errori2c=-1;



void MPU6050_Init (void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af04      	add	r7, sp, #16

	// check device ID WHO_AM_I

	errori2c=HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	2301      	movs	r3, #1
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <MPU6050_Init+0xc0>)
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2301      	movs	r3, #1
 8002066:	2275      	movs	r2, #117	; 0x75
 8002068:	21d0      	movs	r1, #208	; 0xd0
 800206a:	482a      	ldr	r0, [pc, #168]	; (8002114 <MPU6050_Init+0xc4>)
 800206c:	f002 f8c4 	bl	80041f8 <HAL_I2C_Mem_Read>
 8002070:	4603      	mov	r3, r0
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <MPU6050_Init+0xc8>)
 8002076:	801a      	strh	r2, [r3, #0]

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <MPU6050_Init+0xc0>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b68      	cmp	r3, #104	; 0x68
 800207e:	d140      	bne.n	8002102 <MPU6050_Init+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <MPU6050_Init+0xcc>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	2301      	movs	r3, #1
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <MPU6050_Init+0xcc>)
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2301      	movs	r3, #1
 8002096:	226b      	movs	r2, #107	; 0x6b
 8002098:	21d0      	movs	r1, #208	; 0xd0
 800209a:	481e      	ldr	r0, [pc, #120]	; (8002114 <MPU6050_Init+0xc4>)
 800209c:	f001 ffb2 	bl	8004004 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MPU6050_Init+0xcc>)
 80020a2:	2207      	movs	r2, #7
 80020a4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	2301      	movs	r3, #1
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MPU6050_Init+0xcc>)
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	2219      	movs	r2, #25
 80020b8:	21d0      	movs	r1, #208	; 0xd0
 80020ba:	4816      	ldr	r0, [pc, #88]	; (8002114 <MPU6050_Init+0xc4>)
 80020bc:	f001 ffa2 	bl	8004004 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <MPU6050_Init+0xcc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	9302      	str	r3, [sp, #8]
 80020cc:	2301      	movs	r3, #1
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <MPU6050_Init+0xcc>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2301      	movs	r3, #1
 80020d6:	221c      	movs	r2, #28
 80020d8:	21d0      	movs	r1, #208	; 0xd0
 80020da:	480e      	ldr	r0, [pc, #56]	; (8002114 <MPU6050_Init+0xc4>)
 80020dc:	f001 ff92 	bl	8004004 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MPU6050_Init+0xcc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	2301      	movs	r3, #1
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <MPU6050_Init+0xcc>)
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	221b      	movs	r2, #27
 80020f8:	21d0      	movs	r1, #208	; 0xd0
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <MPU6050_Init+0xc4>)
 80020fc:	f001 ff82 	bl	8004004 <HAL_I2C_Mem_Write>
	}
	else check=-1;

}
 8002100:	e002      	b.n	8002108 <MPU6050_Init+0xb8>
	else check=-1;
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <MPU6050_Init+0xc0>)
 8002104:	22ff      	movs	r2, #255	; 0xff
 8002106:	701a      	strb	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000360 	.word	0x20000360
 8002114:	200001bc 	.word	0x200001bc
 8002118:	20000014 	.word	0x20000014
 800211c:	20000361 	.word	0x20000361

08002120 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af04      	add	r7, sp, #16
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800212c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	2306      	movs	r3, #6
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2301      	movs	r3, #1
 800213e:	223b      	movs	r2, #59	; 0x3b
 8002140:	21d0      	movs	r1, #208	; 0xd0
 8002142:	4832      	ldr	r0, [pc, #200]	; (800220c <MPU6050_Read_Accel+0xec>)
 8002144:	f002 f858 	bl	80041f8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002148:	7c3b      	ldrb	r3, [r7, #16]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	7c7b      	ldrb	r3, [r7, #17]
 8002150:	b21b      	sxth	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b21a      	sxth	r2, r3
 8002156:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <MPU6050_Read_Accel+0xf0>)
 8002158:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800215a:	7cbb      	ldrb	r3, [r7, #18]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	b21a      	sxth	r2, r3
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b21a      	sxth	r2, r3
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <MPU6050_Read_Accel+0xf4>)
 800216a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800216c:	7d3b      	ldrb	r3, [r7, #20]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b21a      	sxth	r2, r3
 8002172:	7d7b      	ldrb	r3, [r7, #21]
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b21a      	sxth	r2, r3
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <MPU6050_Read_Accel+0xf8>)
 800217c:	801a      	strh	r2, [r3, #0]

	errori2c=Rec_Data[1]&0x07;
 800217e:	7c7b      	ldrb	r3, [r7, #17]
 8002180:	b29b      	uxth	r3, r3
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <MPU6050_Read_Accel+0xfc>)
 800218a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	*Ax = Accel_X_RAW/16384.0;
 800218c:	4b20      	ldr	r3, [pc, #128]	; (8002210 <MPU6050_Read_Accel+0xf0>)
 800218e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f98a 	bl	80004ac <__aeabi_i2d>
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <MPU6050_Read_Accel+0x100>)
 800219e:	f7fe fb19 	bl	80007d4 <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fce1 	bl	8000b70 <__aeabi_d2f>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW/16384.0;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MPU6050_Read_Accel+0xf4>)
 80021b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f976 	bl	80004ac <__aeabi_i2d>
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <MPU6050_Read_Accel+0x100>)
 80021c6:	f7fe fb05 	bl	80007d4 <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fccd 	bl	8000b70 <__aeabi_d2f>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW/16384.0;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MPU6050_Read_Accel+0xf8>)
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f962 	bl	80004ac <__aeabi_i2d>
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MPU6050_Read_Accel+0x100>)
 80021ee:	f7fe faf1 	bl	80007d4 <__aeabi_ddiv>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fcb9 	bl	8000b70 <__aeabi_d2f>
 80021fe:	4602      	mov	r2, r0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	601a      	str	r2, [r3, #0]

}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200001bc 	.word	0x200001bc
 8002210:	20000354 	.word	0x20000354
 8002214:	20000356 	.word	0x20000356
 8002218:	20000358 	.word	0x20000358
 800221c:	20000014 	.word	0x20000014
 8002220:	40d00000 	.word	0x40d00000
 8002224:	00000000 	.word	0x00000000

08002228 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af04      	add	r7, sp, #16
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	2306      	movs	r3, #6
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	2243      	movs	r2, #67	; 0x43
 8002248:	21d0      	movs	r1, #208	; 0xd0
 800224a:	4831      	ldr	r0, [pc, #196]	; (8002310 <MPU6050_Read_Gyro+0xe8>)
 800224c:	f001 ffd4 	bl	80041f8 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002250:	7c3b      	ldrb	r3, [r7, #16]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	b21a      	sxth	r2, r3
 8002256:	7c7b      	ldrb	r3, [r7, #17]
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21a      	sxth	r2, r3
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <MPU6050_Read_Gyro+0xec>)
 8002260:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002262:	7cbb      	ldrb	r3, [r7, #18]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	b21a      	sxth	r2, r3
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21a      	sxth	r2, r3
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <MPU6050_Read_Gyro+0xf0>)
 8002272:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002274:	7d3b      	ldrb	r3, [r7, #20]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	7d7b      	ldrb	r3, [r7, #21]
 800227c:	b21b      	sxth	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b21a      	sxth	r2, r3
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <MPU6050_Read_Gyro+0xf4>)
 8002284:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	*Gx = Gyro_X_RAW/131.0;
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <MPU6050_Read_Gyro+0xec>)
 8002288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f90d 	bl	80004ac <__aeabi_i2d>
 8002292:	a31d      	add	r3, pc, #116	; (adr r3, 8002308 <MPU6050_Read_Gyro+0xe0>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe fa9c 	bl	80007d4 <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc64 	bl	8000b70 <__aeabi_d2f>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MPU6050_Read_Gyro+0xf0>)
 80022b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f8f9 	bl	80004ac <__aeabi_i2d>
 80022ba:	a313      	add	r3, pc, #76	; (adr r3, 8002308 <MPU6050_Read_Gyro+0xe0>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe fa88 	bl	80007d4 <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc50 	bl	8000b70 <__aeabi_d2f>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MPU6050_Read_Gyro+0xf4>)
 80022d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f8e5 	bl	80004ac <__aeabi_i2d>
 80022e2:	a309      	add	r3, pc, #36	; (adr r3, 8002308 <MPU6050_Read_Gyro+0xe0>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe fa74 	bl	80007d4 <__aeabi_ddiv>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fc3c 	bl	8000b70 <__aeabi_d2f>
 80022f8:	4602      	mov	r2, r0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	00000000 	.word	0x00000000
 800230c:	40606000 	.word	0x40606000
 8002310:	200001bc 	.word	0x200001bc
 8002314:	2000035a 	.word	0x2000035a
 8002318:	2000035c 	.word	0x2000035c
 800231c:	2000035e 	.word	0x2000035e

08002320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_MspInit+0x58>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_MspInit+0x58>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_MspInit+0x58>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_MspInit+0x58>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <HAL_MspInit+0x58>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_MspInit+0x58>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2005      	movs	r0, #5
 8002364:	f000 ffb5 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002368:	2005      	movs	r0, #5
 800236a:	f000 ffce 	bl	800330a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800

0800237c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2f      	ldr	r2, [pc, #188]	; (8002458 <HAL_ADC_MspInit+0xdc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d157      	bne.n	800244e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_ADC_MspInit+0xe0>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	4a2d      	ldr	r2, [pc, #180]	; (800245c <HAL_ADC_MspInit+0xe0>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_ADC_MspInit+0xe0>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_ADC_MspInit+0xe0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a26      	ldr	r2, [pc, #152]	; (800245c <HAL_ADC_MspInit+0xe0>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_ADC_MspInit+0xe0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80023d6:	2313      	movs	r3, #19
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023da:	2303      	movs	r3, #3
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	481d      	ldr	r0, [pc, #116]	; (8002460 <HAL_ADC_MspInit+0xe4>)
 80023ea:	f001 fb19 	bl	8003a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_ADC_MspInit+0xec>)
 80023f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002414:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002424:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 800242e:	2200      	movs	r2, #0
 8002430:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002434:	f000 ff84 	bl	8003340 <HAL_DMA_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800243e:	f7ff fe01 	bl	8002044 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <HAL_ADC_MspInit+0xe8>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40012000 	.word	0x40012000
 800245c:	40023800 	.word	0x40023800
 8002460:	40020000 	.word	0x40020000
 8002464:	2000015c 	.word	0x2000015c
 8002468:	40026410 	.word	0x40026410

0800246c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a42      	ldr	r2, [pc, #264]	; (8002594 <HAL_I2C_MspInit+0x128>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12c      	bne.n	80024e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024aa:	23c0      	movs	r3, #192	; 0xc0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ae:	2312      	movs	r3, #18
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ba:	2304      	movs	r3, #4
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	4835      	ldr	r0, [pc, #212]	; (800259c <HAL_I2C_MspInit+0x130>)
 80024c6:	f001 faab 	bl	8003a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a31      	ldr	r2, [pc, #196]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 80024d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024e6:	e050      	b.n	800258a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <HAL_I2C_MspInit+0x134>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d14b      	bne.n	800258a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002530:	2312      	movs	r3, #18
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800253c:	2304      	movs	r3, #4
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	4619      	mov	r1, r3
 8002546:	4815      	ldr	r0, [pc, #84]	; (800259c <HAL_I2C_MspInit+0x130>)
 8002548:	f001 fa6a 	bl	8003a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800254c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002552:	2312      	movs	r3, #18
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800255e:	2304      	movs	r3, #4
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	480e      	ldr	r0, [pc, #56]	; (80025a4 <HAL_I2C_MspInit+0x138>)
 800256a:	f001 fa59 	bl	8003a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_I2C_MspInit+0x12c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
}
 800258a:	bf00      	nop
 800258c:	3730      	adds	r7, #48	; 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40005400 	.word	0x40005400
 8002598:	40023800 	.word	0x40023800
 800259c:	40020400 	.word	0x40020400
 80025a0:	40005800 	.word	0x40005800
 80025a4:	40020800 	.word	0x40020800

080025a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_SPI_MspInit+0xc0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d149      	bne.n	800265e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b27      	ldr	r3, [pc, #156]	; (800266c <HAL_SPI_MspInit+0xc4>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a26      	ldr	r2, [pc, #152]	; (800266c <HAL_SPI_MspInit+0xc4>)
 80025d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_SPI_MspInit+0xc4>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_SPI_MspInit+0xc4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a1f      	ldr	r2, [pc, #124]	; (800266c <HAL_SPI_MspInit+0xc4>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_SPI_MspInit+0xc4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_SPI_MspInit+0xc4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_SPI_MspInit+0xc4>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_SPI_MspInit+0xc4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261e:	2320      	movs	r3, #32
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800262e:	2305      	movs	r3, #5
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <HAL_SPI_MspInit+0xc8>)
 800263a:	f001 f9f1 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800263e:	2310      	movs	r3, #16
 8002640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800264e:	2305      	movs	r3, #5
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <HAL_SPI_MspInit+0xcc>)
 800265a:	f001 f9e1 	bl	8003a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800265e:	bf00      	nop
 8002660:	3728      	adds	r7, #40	; 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40013000 	.word	0x40013000
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400

08002678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10d      	bne.n	80026a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_TIM_Base_MspInit+0x40>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_TIM_Base_MspInit+0x40>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6453      	str	r3, [r2, #68]	; 0x44
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_TIM_Base_MspInit+0x40>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40010000 	.word	0x40010000
 80026b8:	40023800 	.word	0x40023800

080026bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <NMI_Handler+0x4>

080026c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c6:	e7fe      	b.n	80026c6 <HardFault_Handler+0x4>

080026c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026cc:	e7fe      	b.n	80026cc <MemManage_Handler+0x4>

080026ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d2:	e7fe      	b.n	80026d2 <BusFault_Handler+0x4>

080026d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <UsageFault_Handler+0x4>

080026da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002708:	f000 f8a2 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}

08002710 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <DMA2_Stream0_IRQHandler+0x10>)
 8002726:	f000 ff11 	bl	800354c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000015c 	.word	0x2000015c

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275e:	490e      	ldr	r1, [pc, #56]	; (8002798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002774:	4c0b      	ldr	r4, [pc, #44]	; (80027a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002782:	f7ff ffd7 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002786:	f004 f885 	bl	8006894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7ff f8cd 	bl	8001928 <main>
  bx  lr    
 800278e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800279c:	080077a0 	.word	0x080077a0
  ldr r2, =_sbss
 80027a0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80027a4:	20000368 	.word	0x20000368

080027a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 fd71 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	200f      	movs	r0, #15
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fd9e 	bl	8002320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd89 	bl	8003326 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 fd51 	bl	80032d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000018 	.word	0x20000018
 8002848:	20000020 	.word	0x20000020
 800284c:	2000001c 	.word	0x2000001c

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000020 	.word	0x20000020
 8002874:	20000364 	.word	0x20000364

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000364 	.word	0x20000364

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000020 	.word	0x20000020

080028d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e033      	b.n	8002956 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fd40 	bl	800237c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800291e:	f023 0302 	bic.w	r3, r3, #2
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa78 	bl	8002e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
 8002946:	e001      	b.n	800294c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_ADC_Start_DMA+0x1e>
 800297a:	2302      	movs	r3, #2
 800297c:	e0e9      	b.n	8002b52 <HAL_ADC_Start_DMA+0x1f2>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d018      	beq.n	80029c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029a4:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_ADC_Start_DMA+0x1fc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a6d      	ldr	r2, [pc, #436]	; (8002b60 <HAL_ADC_Start_DMA+0x200>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0c9a      	lsrs	r2, r3, #18
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3b01      	subs	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d4:	d107      	bne.n	80029e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 80a1 	bne.w	8002b38 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d106      	bne.n	8002a44 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f023 0206 	bic.w	r2, r3, #6
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
 8002a42:	e002      	b.n	8002a4a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a52:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <HAL_ADC_Start_DMA+0x204>)
 8002a54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <HAL_ADC_Start_DMA+0x208>)
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	4a42      	ldr	r2, [pc, #264]	; (8002b6c <HAL_ADC_Start_DMA+0x20c>)
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	4a41      	ldr	r2, [pc, #260]	; (8002b70 <HAL_ADC_Start_DMA+0x210>)
 8002a6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	334c      	adds	r3, #76	; 0x4c
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f000 fcf8 	bl	800349c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d12a      	bne.n	8002b0e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2d      	ldr	r2, [pc, #180]	; (8002b74 <HAL_ADC_Start_DMA+0x214>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d015      	beq.n	8002aee <HAL_ADC_Start_DMA+0x18e>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2c      	ldr	r2, [pc, #176]	; (8002b78 <HAL_ADC_Start_DMA+0x218>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d105      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x178>
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_ADC_Start_DMA+0x204>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <HAL_ADC_Start_DMA+0x21c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d136      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x1f0>
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_ADC_Start_DMA+0x204>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d130      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d129      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	e020      	b.n	8002b50 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_ADC_Start_DMA+0x214>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d11b      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x1f0>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d114      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	e00b      	b.n	8002b50 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000018 	.word	0x20000018
 8002b60:	431bde83 	.word	0x431bde83
 8002b64:	40012300 	.word	0x40012300
 8002b68:	08003019 	.word	0x08003019
 8002b6c:	080030d3 	.word	0x080030d3
 8002b70:	080030ef 	.word	0x080030ef
 8002b74:	40012000 	.word	0x40012000
 8002b78:	40012100 	.word	0x40012100
 8002b7c:	40012200 	.word	0x40012200

08002b80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1c>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e113      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x244>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b09      	cmp	r3, #9
 8002be6:	d925      	bls.n	8002c34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68d9      	ldr	r1, [r3, #12]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1e      	subs	r3, #30
 8002bfe:	2207      	movs	r2, #7
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43da      	mvns	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4603      	mov	r3, r0
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4403      	add	r3, r0
 8002c26:	3b1e      	subs	r3, #30
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e022      	b.n	8002c7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	2207      	movs	r2, #7
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	400a      	ands	r2, r1
 8002c56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4403      	add	r3, r0
 8002c70:	409a      	lsls	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d824      	bhi.n	8002ccc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	3b05      	subs	r3, #5
 8002c94:	221f      	movs	r2, #31
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b05      	subs	r3, #5
 8002cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cca:	e04c      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d824      	bhi.n	8002d1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b23      	subs	r3, #35	; 0x23
 8002ce6:	221f      	movs	r2, #31
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43da      	mvns	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3b23      	subs	r3, #35	; 0x23
 8002d10:	fa00 f203 	lsl.w	r2, r0, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1c:	e023      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b41      	subs	r3, #65	; 0x41
 8002d30:	221f      	movs	r2, #31
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	3b41      	subs	r3, #65	; 0x41
 8002d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_ADC_ConfigChannel+0x250>)
 8002d68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <HAL_ADC_ConfigChannel+0x254>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10f      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x1d8>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b12      	cmp	r3, #18
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <HAL_ADC_ConfigChannel+0x254>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d12b      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x23a>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <HAL_ADC_ConfigChannel+0x258>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d003      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x1f4>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b11      	cmp	r3, #17
 8002dae:	d122      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <HAL_ADC_ConfigChannel+0x258>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d111      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_ADC_ConfigChannel+0x25c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <HAL_ADC_ConfigChannel+0x260>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	0c9a      	lsrs	r2, r3, #18
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002de8:	e002      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f9      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40012300 	.word	0x40012300
 8002e10:	40012000 	.word	0x40012000
 8002e14:	10000012 	.word	0x10000012
 8002e18:	20000018 	.word	0x20000018
 8002e1c:	431bde83 	.word	0x431bde83

08002e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e28:	4b79      	ldr	r3, [pc, #484]	; (8003010 <ADC_Init+0x1f0>)
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	021a      	lsls	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	4a58      	ldr	r2, [pc, #352]	; (8003014 <ADC_Init+0x1f4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6899      	ldr	r1, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	e00f      	b.n	8002f1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0202 	bic.w	r2, r2, #2
 8002f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6899      	ldr	r1, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
 8002f38:	005a      	lsls	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01b      	beq.n	8002f84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	3b01      	subs	r3, #1
 8002f78:	035a      	lsls	r2, r3, #13
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	e007      	b.n	8002f94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	051a      	lsls	r2, r3, #20
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fd6:	025a      	lsls	r2, r3, #9
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	029a      	lsls	r2, r3, #10
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40012300 	.word	0x40012300
 8003014:	0f000001 	.word	0x0f000001

08003018 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d13c      	bne.n	80030ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d12b      	bne.n	80030a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	d127      	bne.n	80030a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800306c:	2b00      	cmp	r3, #0
 800306e:	d119      	bne.n	80030a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0220 	bic.w	r2, r2, #32
 800307e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff fd6b 	bl	8002b80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030aa:	e00e      	b.n	80030ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff fd75 	bl	8002ba8 <HAL_ADC_ErrorCallback>
}
 80030be:	e004      	b.n	80030ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fd57 	bl	8002b94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7ff fd4a 	bl	8002ba8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	; (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db0b      	blt.n	80031aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4907      	ldr	r1, [pc, #28]	; (80031b8 <__NVIC_EnableIRQ+0x38>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003288:	d301      	bcc.n	800328e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <SysTick_Config+0x40>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003296:	210f      	movs	r1, #15
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	f7ff ff8e 	bl	80031bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <SysTick_Config+0x40>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SysTick_Config+0x40>)
 80032a8:	2207      	movs	r2, #7
 80032aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	e000e010 	.word	0xe000e010

080032bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff29 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e4:	f7ff ff3e 	bl	8003164 <__NVIC_GetPriorityGrouping>
 80032e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f7ff ff8e 	bl	8003210 <NVIC_EncodePriority>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff5d 	bl	80031bc <__NVIC_SetPriority>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff31 	bl	8003180 <__NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffa2 	bl	8003278 <SysTick_Config>
 8003334:	4603      	mov	r3, r0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff fa94 	bl	8002878 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e099      	b.n	8003490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337c:	e00f      	b.n	800339e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337e:	f7ff fa7b 	bl	8002878 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b05      	cmp	r3, #5
 800338a:	d908      	bls.n	800339e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e078      	b.n	8003490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e8      	bne.n	800337e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_DMA_Init+0x158>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d107      	bne.n	8003408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	4313      	orrs	r3, r2
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0307 	bic.w	r3, r3, #7
 800341e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b04      	cmp	r3, #4
 8003430:	d117      	bne.n	8003462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fa6f 	bl	8003928 <DMA_CheckFifoParam>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2240      	movs	r2, #64	; 0x40
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800345e:	2301      	movs	r3, #1
 8003460:	e016      	b.n	8003490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa26 	bl	80038bc <DMA_CalcBaseAndBitshift>
 8003470:	4603      	mov	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	223f      	movs	r2, #63	; 0x3f
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	f010803f 	.word	0xf010803f

0800349c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_DMA_Start_IT+0x26>
 80034be:	2302      	movs	r3, #2
 80034c0:	e040      	b.n	8003544 <HAL_DMA_Start_IT+0xa8>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d12f      	bne.n	8003536 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f9b8 	bl	8003860 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	223f      	movs	r2, #63	; 0x3f
 80034f6:	409a      	lsls	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0216 	orr.w	r2, r2, #22
 800350a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0208 	orr.w	r2, r2, #8
 8003522:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e005      	b.n	8003542 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003558:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <HAL_DMA_IRQHandler+0x248>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a8e      	ldr	r2, [pc, #568]	; (8003798 <HAL_DMA_IRQHandler+0x24c>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0a9b      	lsrs	r3, r3, #10
 8003564:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2208      	movs	r2, #8
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01a      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	2208      	movs	r2, #8
 80035a6:	409a      	lsls	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	2201      	movs	r2, #1
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d012      	beq.n	80035ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	2201      	movs	r2, #1
 80035dc:	409a      	lsls	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	2204      	movs	r2, #4
 80035f4:	409a      	lsls	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d012      	beq.n	8003624 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2204      	movs	r2, #4
 8003612:	409a      	lsls	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	2210      	movs	r2, #16
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d043      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d03c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2210      	movs	r2, #16
 8003648:	409a      	lsls	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d018      	beq.n	800368e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d108      	bne.n	800367c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d024      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
 800367a:	e01f      	b.n	80036bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01b      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
 800368c:	e016      	b.n	80036bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0208 	bic.w	r2, r2, #8
 80036aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	2220      	movs	r2, #32
 80036c2:	409a      	lsls	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 808f 	beq.w	80037ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8087 	beq.w	80037ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	2220      	movs	r2, #32
 80036e4:	409a      	lsls	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	d136      	bne.n	8003764 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0216 	bic.w	r2, r2, #22
 8003704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003714:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <HAL_DMA_IRQHandler+0x1da>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0208 	bic.w	r2, r2, #8
 8003734:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	223f      	movs	r2, #63	; 0x3f
 800373c:	409a      	lsls	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	2b00      	cmp	r3, #0
 8003758:	d07e      	beq.n	8003858 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
        }
        return;
 8003762:	e079      	b.n	8003858 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01d      	beq.n	80037ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	2b00      	cmp	r3, #0
 8003786:	d031      	beq.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
 8003790:	e02c      	b.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
 8003792:	bf00      	nop
 8003794:	20000018 	.word	0x20000018
 8003798:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d023      	beq.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e01e      	b.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10f      	bne.n	80037dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0210 	bic.w	r2, r2, #16
 80037ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d032      	beq.n	800385a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2205      	movs	r2, #5
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3301      	adds	r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	429a      	cmp	r2, r3
 8003822:	d307      	bcc.n	8003834 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f2      	bne.n	8003818 <HAL_DMA_IRQHandler+0x2cc>
 8003832:	e000      	b.n	8003836 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003834:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
 8003856:	e000      	b.n	800385a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003858:	bf00      	nop
    }
  }
}
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800387c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d108      	bne.n	80038a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800389e:	e007      	b.n	80038b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	3b10      	subs	r3, #16
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <DMA_CalcBaseAndBitshift+0x64>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038d6:	4a13      	ldr	r2, [pc, #76]	; (8003924 <DMA_CalcBaseAndBitshift+0x68>)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d909      	bls.n	80038fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	1d1a      	adds	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	659a      	str	r2, [r3, #88]	; 0x58
 80038fc:	e007      	b.n	800390e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	aaaaaaab 	.word	0xaaaaaaab
 8003924:	08007758 	.word	0x08007758

08003928 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11f      	bne.n	8003982 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d856      	bhi.n	80039f6 <DMA_CheckFifoParam+0xce>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <DMA_CheckFifoParam+0x28>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	08003973 	.word	0x08003973
 8003958:	08003961 	.word	0x08003961
 800395c:	080039f7 	.word	0x080039f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d046      	beq.n	80039fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e043      	b.n	80039fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800397a:	d140      	bne.n	80039fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003980:	e03d      	b.n	80039fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398a:	d121      	bne.n	80039d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d837      	bhi.n	8003a02 <DMA_CheckFifoParam+0xda>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <DMA_CheckFifoParam+0x70>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039af 	.word	0x080039af
 80039a0:	080039a9 	.word	0x080039a9
 80039a4:	080039c1 	.word	0x080039c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e030      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d025      	beq.n	8003a06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e022      	b.n	8003a06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039c8:	d11f      	bne.n	8003a0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ce:	e01c      	b.n	8003a0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d903      	bls.n	80039de <DMA_CheckFifoParam+0xb6>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d003      	beq.n	80039e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039dc:	e018      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      break;
 80039e2:	e015      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e00b      	b.n	8003a0e <DMA_CheckFifoParam+0xe6>
      break;
 80039f6:	bf00      	nop
 80039f8:	e00a      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e008      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
 8003a00:	e006      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a02:	bf00      	nop
 8003a04:	e004      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e165      	b.n	8003d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	f040 8154 	bne.w	8003d02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d005      	beq.n	8003a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d130      	bne.n	8003ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 0201 	and.w	r2, r3, #1
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d017      	beq.n	8003b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d123      	bne.n	8003b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3208      	adds	r2, #8
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80ae 	beq.w	8003d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <HAL_GPIO_Init+0x300>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	4a5c      	ldr	r2, [pc, #368]	; (8003d20 <HAL_GPIO_Init+0x300>)
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb6:	4b5a      	ldr	r3, [pc, #360]	; (8003d20 <HAL_GPIO_Init+0x300>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc2:	4a58      	ldr	r2, [pc, #352]	; (8003d24 <HAL_GPIO_Init+0x304>)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4f      	ldr	r2, [pc, #316]	; (8003d28 <HAL_GPIO_Init+0x308>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d025      	beq.n	8003c3a <HAL_GPIO_Init+0x21a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01f      	beq.n	8003c36 <HAL_GPIO_Init+0x216>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4d      	ldr	r2, [pc, #308]	; (8003d30 <HAL_GPIO_Init+0x310>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d019      	beq.n	8003c32 <HAL_GPIO_Init+0x212>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4c      	ldr	r2, [pc, #304]	; (8003d34 <HAL_GPIO_Init+0x314>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_GPIO_Init+0x20e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <HAL_GPIO_Init+0x318>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00d      	beq.n	8003c2a <HAL_GPIO_Init+0x20a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4a      	ldr	r2, [pc, #296]	; (8003d3c <HAL_GPIO_Init+0x31c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <HAL_GPIO_Init+0x206>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a49      	ldr	r2, [pc, #292]	; (8003d40 <HAL_GPIO_Init+0x320>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_GPIO_Init+0x202>
 8003c1e:	2306      	movs	r3, #6
 8003c20:	e00c      	b.n	8003c3c <HAL_GPIO_Init+0x21c>
 8003c22:	2307      	movs	r3, #7
 8003c24:	e00a      	b.n	8003c3c <HAL_GPIO_Init+0x21c>
 8003c26:	2305      	movs	r3, #5
 8003c28:	e008      	b.n	8003c3c <HAL_GPIO_Init+0x21c>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x21c>
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e004      	b.n	8003c3c <HAL_GPIO_Init+0x21c>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_Init+0x21c>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_GPIO_Init+0x21c>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	f002 0203 	and.w	r2, r2, #3
 8003c42:	0092      	lsls	r2, r2, #2
 8003c44:	4093      	lsls	r3, r2
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c4c:	4935      	ldr	r1, [pc, #212]	; (8003d24 <HAL_GPIO_Init+0x304>)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c5a:	4b3a      	ldr	r3, [pc, #232]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c7e:	4a31      	ldr	r2, [pc, #196]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c84:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca8:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cae:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	f67f ae96 	bls.w	8003a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40013800 	.word	0x40013800
 8003d28:	40020000 	.word	0x40020000
 8003d2c:	40020400 	.word	0x40020400
 8003d30:	40020800 	.word	0x40020800
 8003d34:	40020c00 	.word	0x40020c00
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40021400 	.word	0x40021400
 8003d40:	40021800 	.word	0x40021800
 8003d44:	40013c00 	.word	0x40013c00

08003d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
 8003d54:	4613      	mov	r3, r2
 8003d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d58:	787b      	ldrb	r3, [r7, #1]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d64:	e003      	b.n	8003d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	041a      	lsls	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e12b      	b.n	8003fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe fb62 	bl	800246c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de0:	f001 f8ce 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8003de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a81      	ldr	r2, [pc, #516]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d807      	bhi.n	8003e00 <HAL_I2C_Init+0x84>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a80      	ldr	r2, [pc, #512]	; (8003ff4 <HAL_I2C_Init+0x278>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	bf94      	ite	ls
 8003df8:	2301      	movls	r3, #1
 8003dfa:	2300      	movhi	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e006      	b.n	8003e0e <HAL_I2C_Init+0x92>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a7d      	ldr	r2, [pc, #500]	; (8003ff8 <HAL_I2C_Init+0x27c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	bf94      	ite	ls
 8003e08:	2301      	movls	r3, #1
 8003e0a:	2300      	movhi	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0e7      	b.n	8003fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a78      	ldr	r2, [pc, #480]	; (8003ffc <HAL_I2C_Init+0x280>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a6a      	ldr	r2, [pc, #424]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d802      	bhi.n	8003e50 <HAL_I2C_Init+0xd4>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	e009      	b.n	8003e64 <HAL_I2C_Init+0xe8>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	4a69      	ldr	r2, [pc, #420]	; (8004000 <HAL_I2C_Init+0x284>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	3301      	adds	r3, #1
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	495c      	ldr	r1, [pc, #368]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d819      	bhi.n	8003eb8 <HAL_I2C_Init+0x13c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e59      	subs	r1, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e98:	400b      	ands	r3, r1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_I2C_Init+0x138>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e59      	subs	r1, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb2:	e051      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e04f      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d111      	bne.n	8003ee4 <HAL_I2C_Init+0x168>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e012      	b.n	8003f0a <HAL_I2C_Init+0x18e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Init+0x196>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e022      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10e      	bne.n	8003f38 <HAL_I2C_Init+0x1bc>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1e58      	subs	r0, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	440b      	add	r3, r1
 8003f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f36:	e00f      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	0099      	lsls	r1, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	6809      	ldr	r1, [r1, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6911      	ldr	r1, [r2, #16]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	000186a0 	.word	0x000186a0
 8003ff4:	001e847f 	.word	0x001e847f
 8003ff8:	003d08ff 	.word	0x003d08ff
 8003ffc:	431bde83 	.word	0x431bde83
 8004000:	10624dd3 	.word	0x10624dd3

08004004 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800401e:	f7fe fc2b 	bl	8002878 <HAL_GetTick>
 8004022:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	f040 80d9 	bne.w	80041e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2319      	movs	r3, #25
 8004038:	2201      	movs	r2, #1
 800403a:	496d      	ldr	r1, [pc, #436]	; (80041f0 <HAL_I2C_Mem_Write+0x1ec>)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fc7f 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
 800404a:	e0cc      	b.n	80041e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_I2C_Mem_Write+0x56>
 8004056:	2302      	movs	r3, #2
 8004058:	e0c5      	b.n	80041e6 <HAL_I2C_Mem_Write+0x1e2>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d007      	beq.n	8004080 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2221      	movs	r2, #33	; 0x21
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a4d      	ldr	r2, [pc, #308]	; (80041f4 <HAL_I2C_Mem_Write+0x1f0>)
 80040c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c2:	88f8      	ldrh	r0, [r7, #6]
 80040c4:	893a      	ldrh	r2, [r7, #8]
 80040c6:	8979      	ldrh	r1, [r7, #10]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	4603      	mov	r3, r0
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fab6 	bl	8004644 <I2C_RequestMemoryWrite>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d052      	beq.n	8004184 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e081      	b.n	80041e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fd00 	bl	8004aec <I2C_WaitOnTXEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d107      	bne.n	800410a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e06b      	b.n	80041e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d11b      	bne.n	8004184 <HAL_I2C_Mem_Write+0x180>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d017      	beq.n	8004184 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1aa      	bne.n	80040e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 fcec 	bl	8004b6e <I2C_WaitOnBTFFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d107      	bne.n	80041b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e016      	b.n	80041e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e000      	b.n	80041e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	00100002 	.word	0x00100002
 80041f4:	ffff0000 	.word	0xffff0000

080041f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08c      	sub	sp, #48	; 0x30
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	817b      	strh	r3, [r7, #10]
 800420a:	460b      	mov	r3, r1
 800420c:	813b      	strh	r3, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004212:	f7fe fb31 	bl	8002878 <HAL_GetTick>
 8004216:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	f040 8208 	bne.w	8004636 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2319      	movs	r3, #25
 800422c:	2201      	movs	r2, #1
 800422e:	497b      	ldr	r1, [pc, #492]	; (800441c <HAL_I2C_Mem_Read+0x224>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fb85 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	e1fb      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_I2C_Mem_Read+0x56>
 800424a:	2302      	movs	r3, #2
 800424c:	e1f4      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d007      	beq.n	8004274 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2222      	movs	r2, #34	; 0x22
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a5b      	ldr	r2, [pc, #364]	; (8004420 <HAL_I2C_Mem_Read+0x228>)
 80042b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042b6:	88f8      	ldrh	r0, [r7, #6]
 80042b8:	893a      	ldrh	r2, [r7, #8]
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa52 	bl	8004770 <I2C_RequestMemoryRead>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1b0      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d113      	bne.n	8004306 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042de:	2300      	movs	r3, #0
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e184      	b.n	8004610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	2b01      	cmp	r3, #1
 800430c:	d11b      	bne.n	8004346 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e164      	b.n	8004610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	2b02      	cmp	r3, #2
 800434c:	d11b      	bne.n	8004386 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	2300      	movs	r3, #0
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	e144      	b.n	8004610 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800439c:	e138      	b.n	8004610 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	f200 80f1 	bhi.w	800458a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d123      	bne.n	80043f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fc1b 	bl	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e139      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043f6:	e10b      	b.n	8004610 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d14e      	bne.n	800449e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	2200      	movs	r2, #0
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <HAL_I2C_Mem_Read+0x22c>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa98 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e10e      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
 800441a:	bf00      	nop
 800441c:	00100002 	.word	0x00100002
 8004420:	ffff0000 	.word	0xffff0000
 8004424:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800449c:	e0b8      	b.n	8004610 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	2200      	movs	r2, #0
 80044a6:	4966      	ldr	r1, [pc, #408]	; (8004640 <HAL_I2C_Mem_Read+0x448>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fa49 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0bf      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2200      	movs	r2, #0
 8004502:	494f      	ldr	r1, [pc, #316]	; (8004640 <HAL_I2C_Mem_Read+0x448>)
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fa1b 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e091      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004588:	e042      	b.n	8004610 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fb2e 	bl	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e04c      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d118      	bne.n	8004610 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f aec2 	bne.w	800439e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	00010004 	.word	0x00010004

08004644 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	461a      	mov	r2, r3
 8004652:	4603      	mov	r3, r0
 8004654:	817b      	strh	r3, [r7, #10]
 8004656:	460b      	mov	r3, r1
 8004658:	813b      	strh	r3, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2200      	movs	r2, #0
 8004676:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f960 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004694:	d103      	bne.n	800469e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e05f      	b.n	8004762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	6a3a      	ldr	r2, [r7, #32]
 80046b6:	492d      	ldr	r1, [pc, #180]	; (800476c <I2C_RequestMemoryWrite+0x128>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f998 	bl	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e04c      	b.n	8004762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e0:	6a39      	ldr	r1, [r7, #32]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fa02 	bl	8004aec <I2C_WaitOnTXEFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d107      	bne.n	8004706 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004704:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e02b      	b.n	8004762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004710:	893b      	ldrh	r3, [r7, #8]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	611a      	str	r2, [r3, #16]
 800471a:	e021      	b.n	8004760 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800471c:	893b      	ldrh	r3, [r7, #8]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	b29b      	uxth	r3, r3
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	6a39      	ldr	r1, [r7, #32]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f9dc 	bl	8004aec <I2C_WaitOnTXEFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b04      	cmp	r3, #4
 8004740:	d107      	bne.n	8004752 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004750:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e005      	b.n	8004762 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004756:	893b      	ldrh	r3, [r7, #8]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	00010002 	.word	0x00010002

08004770 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	4603      	mov	r3, r0
 8004780:	817b      	strh	r3, [r7, #10]
 8004782:	460b      	mov	r3, r1
 8004784:	813b      	strh	r3, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8c2 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d0:	d103      	bne.n	80047da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e0aa      	b.n	8004934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047de:	897b      	ldrh	r3, [r7, #10]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	6a3a      	ldr	r2, [r7, #32]
 80047f2:	4952      	ldr	r1, [pc, #328]	; (800493c <I2C_RequestMemoryRead+0x1cc>)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8fa 	bl	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e097      	b.n	8004934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	6a39      	ldr	r1, [r7, #32]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f964 	bl	8004aec <I2C_WaitOnTXEFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b04      	cmp	r3, #4
 8004830:	d107      	bne.n	8004842 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e076      	b.n	8004934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800484c:	893b      	ldrh	r3, [r7, #8]
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	611a      	str	r2, [r3, #16]
 8004856:	e021      	b.n	800489c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	b29b      	uxth	r3, r3
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004868:	6a39      	ldr	r1, [r7, #32]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f93e 	bl	8004aec <I2C_WaitOnTXEFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b04      	cmp	r3, #4
 800487c:	d107      	bne.n	800488e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e050      	b.n	8004934 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004892:	893b      	ldrh	r3, [r7, #8]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	6a39      	ldr	r1, [r7, #32]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f923 	bl	8004aec <I2C_WaitOnTXEFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00d      	beq.n	80048c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d107      	bne.n	80048c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e035      	b.n	8004934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	2200      	movs	r2, #0
 80048e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f82b 	bl	8004940 <I2C_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fe:	d103      	bne.n	8004908 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004906:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e013      	b.n	8004934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800490c:	897b      	ldrh	r3, [r7, #10]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	6a3a      	ldr	r2, [r7, #32]
 8004920:	4906      	ldr	r1, [pc, #24]	; (800493c <I2C_RequestMemoryRead+0x1cc>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f863 	bl	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	00010002 	.word	0x00010002

08004940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004950:	e025      	b.n	800499e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d021      	beq.n	800499e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495a:	f7fd ff8d 	bl	8002878 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d116      	bne.n	800499e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e023      	b.n	80049e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10d      	bne.n	80049c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	43da      	mvns	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	e00c      	b.n	80049de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d0b6      	beq.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049fc:	e051      	b.n	8004aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a0c:	d123      	bne.n	8004a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e046      	b.n	8004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d021      	beq.n	8004aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fd ff0b 	bl	8002878 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d116      	bne.n	8004aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e020      	b.n	8004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10c      	bne.n	8004ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf14      	ite	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	2300      	moveq	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e00b      	b.n	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	43da      	mvns	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf14      	ite	ne
 8004ad8:	2301      	movne	r3, #1
 8004ada:	2300      	moveq	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d18d      	bne.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af8:	e02d      	b.n	8004b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f8ce 	bl	8004c9c <I2C_IsAcknowledgeFailed>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e02d      	b.n	8004b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d021      	beq.n	8004b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fd feb1 	bl	8002878 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d116      	bne.n	8004b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f043 0220 	orr.w	r2, r3, #32
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e007      	b.n	8004b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d1ca      	bne.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b7a:	e02d      	b.n	8004bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f88d 	bl	8004c9c <I2C_IsAcknowledgeFailed>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e02d      	b.n	8004be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d021      	beq.n	8004bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b94:	f7fd fe70 	bl	8002878 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e007      	b.n	8004be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d1ca      	bne.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bfc:	e042      	b.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d119      	bne.n	8004c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0210 	mvn.w	r2, #16
 8004c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e029      	b.n	8004c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c40:	f7fd fe1a 	bl	8002878 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d302      	bcc.n	8004c56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d116      	bne.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e007      	b.n	8004c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d1b5      	bne.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d11b      	bne.n	8004cec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f043 0204 	orr.w	r2, r3, #4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
 8004d16:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d28:	f7fd fda6 	bl	8002878 <HAL_GetTick>
 8004d2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d2e:	e009      	b.n	8004d44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d30:	f7fd fda2 	bl	8002878 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3e:	d901      	bls.n	8004d44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e01f      	b.n	8004d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d1ee      	bne.n	8004d30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7fd fd8e 	bl	8002878 <HAL_GetTick>
 8004d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d5e:	e009      	b.n	8004d74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d60:	f7fd fd8a 	bl	8002878 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6e:	d901      	bls.n	8004d74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e007      	b.n	8004d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d80:	d1ee      	bne.n	8004d60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	420e0040 	.word	0x420e0040
 8004d94:	40007000 	.word	0x40007000
 8004d98:	420e0044 	.word	0x420e0044

08004d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0cc      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db0:	4b68      	ldr	r3, [pc, #416]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d90c      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0b8      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d020      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df0:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4a58      	ldr	r2, [pc, #352]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e08:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a52      	ldr	r2, [pc, #328]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e14:	4b50      	ldr	r3, [pc, #320]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	494d      	ldr	r1, [pc, #308]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d044      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d119      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07f      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d003      	beq.n	8004e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06f      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6a:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e067      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4934      	ldr	r1, [pc, #208]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fcf4 	bl	8002878 <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fd fcf0 	bl	8002878 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e04f      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d20c      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e032      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4916      	ldr	r1, [pc, #88]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	490e      	ldr	r1, [pc, #56]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f22:	f000 f841 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8004f26:	4602      	mov	r2, r0
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	490a      	ldr	r1, [pc, #40]	; (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004f34:	5ccb      	ldrb	r3, [r1, r3]
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <HAL_RCC_ClockConfig+0x1c8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fd fc54 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023c00 	.word	0x40023c00
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	08007740 	.word	0x08007740
 8004f60:	20000018 	.word	0x20000018
 8004f64:	2000001c 	.word	0x2000001c

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000018 	.word	0x20000018

08004f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f84:	f7ff fff0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	08007750 	.word	0x08007750

08004fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fac:	b0ae      	sub	sp, #184	; 0xb8
 8004fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fce:	4bcb      	ldr	r3, [pc, #812]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	f200 8206 	bhi.w	80053e8 <HAL_RCC_GetSysClockFreq+0x440>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	080053e9 	.word	0x080053e9
 8004fec:	080053e9 	.word	0x080053e9
 8004ff0:	080053e9 	.word	0x080053e9
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	080053e9 	.word	0x080053e9
 8004ffc:	080053e9 	.word	0x080053e9
 8005000:	080053e9 	.word	0x080053e9
 8005004:	08005029 	.word	0x08005029
 8005008:	080053e9 	.word	0x080053e9
 800500c:	080053e9 	.word	0x080053e9
 8005010:	080053e9 	.word	0x080053e9
 8005014:	08005219 	.word	0x08005219
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005018:	4bb9      	ldr	r3, [pc, #740]	; (8005300 <HAL_RCC_GetSysClockFreq+0x358>)
 800501a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800501e:	e1e7      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005020:	4bb8      	ldr	r3, [pc, #736]	; (8005304 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005026:	e1e3      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005028:	4bb4      	ldr	r3, [pc, #720]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005034:	4bb1      	ldr	r3, [pc, #708]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d071      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005040:	4bae      	ldr	r3, [pc, #696]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	099b      	lsrs	r3, r3, #6
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800504c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005058:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005066:	4622      	mov	r2, r4
 8005068:	462b      	mov	r3, r5
 800506a:	f04f 0000 	mov.w	r0, #0
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	0159      	lsls	r1, r3, #5
 8005074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005078:	0150      	lsls	r0, r2, #5
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4621      	mov	r1, r4
 8005080:	1a51      	subs	r1, r2, r1
 8005082:	6439      	str	r1, [r7, #64]	; 0x40
 8005084:	4629      	mov	r1, r5
 8005086:	eb63 0301 	sbc.w	r3, r3, r1
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005098:	4649      	mov	r1, r9
 800509a:	018b      	lsls	r3, r1, #6
 800509c:	4641      	mov	r1, r8
 800509e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050a2:	4641      	mov	r1, r8
 80050a4:	018a      	lsls	r2, r1, #6
 80050a6:	4641      	mov	r1, r8
 80050a8:	1a51      	subs	r1, r2, r1
 80050aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80050ac:	4649      	mov	r1, r9
 80050ae:	eb63 0301 	sbc.w	r3, r3, r1
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80050c0:	4649      	mov	r1, r9
 80050c2:	00cb      	lsls	r3, r1, #3
 80050c4:	4641      	mov	r1, r8
 80050c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ca:	4641      	mov	r1, r8
 80050cc:	00ca      	lsls	r2, r1, #3
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	4622      	mov	r2, r4
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
 80050da:	462b      	mov	r3, r5
 80050dc:	460a      	mov	r2, r1
 80050de:	eb42 0303 	adc.w	r3, r2, r3
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050f0:	4629      	mov	r1, r5
 80050f2:	024b      	lsls	r3, r1, #9
 80050f4:	4621      	mov	r1, r4
 80050f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050fa:	4621      	mov	r1, r4
 80050fc:	024a      	lsls	r2, r1, #9
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800510c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005110:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005114:	f7fb fd7c 	bl	8000c10 <__aeabi_uldivmod>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4613      	mov	r3, r2
 800511e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005122:	e067      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005124:	4b75      	ldr	r3, [pc, #468]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	099b      	lsrs	r3, r3, #6
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005130:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513c:	67bb      	str	r3, [r7, #120]	; 0x78
 800513e:	2300      	movs	r3, #0
 8005140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005142:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005146:	4622      	mov	r2, r4
 8005148:	462b      	mov	r3, r5
 800514a:	f04f 0000 	mov.w	r0, #0
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	0159      	lsls	r1, r3, #5
 8005154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005158:	0150      	lsls	r0, r2, #5
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4621      	mov	r1, r4
 8005160:	1a51      	subs	r1, r2, r1
 8005162:	62b9      	str	r1, [r7, #40]	; 0x28
 8005164:	4629      	mov	r1, r5
 8005166:	eb63 0301 	sbc.w	r3, r3, r1
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005178:	4649      	mov	r1, r9
 800517a:	018b      	lsls	r3, r1, #6
 800517c:	4641      	mov	r1, r8
 800517e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005182:	4641      	mov	r1, r8
 8005184:	018a      	lsls	r2, r1, #6
 8005186:	4641      	mov	r1, r8
 8005188:	ebb2 0a01 	subs.w	sl, r2, r1
 800518c:	4649      	mov	r1, r9
 800518e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800519e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a6:	4692      	mov	sl, r2
 80051a8:	469b      	mov	fp, r3
 80051aa:	4623      	mov	r3, r4
 80051ac:	eb1a 0303 	adds.w	r3, sl, r3
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	462b      	mov	r3, r5
 80051b4:	eb4b 0303 	adc.w	r3, fp, r3
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80051c6:	4629      	mov	r1, r5
 80051c8:	028b      	lsls	r3, r1, #10
 80051ca:	4621      	mov	r1, r4
 80051cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051d0:	4621      	mov	r1, r4
 80051d2:	028a      	lsls	r2, r1, #10
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051dc:	2200      	movs	r2, #0
 80051de:	673b      	str	r3, [r7, #112]	; 0x70
 80051e0:	677a      	str	r2, [r7, #116]	; 0x74
 80051e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80051e6:	f7fb fd13 	bl	8000c10 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4613      	mov	r3, r2
 80051f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051f4:	4b41      	ldr	r3, [pc, #260]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800520a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005216:	e0eb      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005218:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005224:	4b35      	ldr	r3, [pc, #212]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d06b      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	099b      	lsrs	r3, r3, #6
 8005236:	2200      	movs	r2, #0
 8005238:	66bb      	str	r3, [r7, #104]	; 0x68
 800523a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800523c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	663b      	str	r3, [r7, #96]	; 0x60
 8005244:	2300      	movs	r3, #0
 8005246:	667b      	str	r3, [r7, #100]	; 0x64
 8005248:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800524c:	4622      	mov	r2, r4
 800524e:	462b      	mov	r3, r5
 8005250:	f04f 0000 	mov.w	r0, #0
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	0159      	lsls	r1, r3, #5
 800525a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800525e:	0150      	lsls	r0, r2, #5
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4621      	mov	r1, r4
 8005266:	1a51      	subs	r1, r2, r1
 8005268:	61b9      	str	r1, [r7, #24]
 800526a:	4629      	mov	r1, r5
 800526c:	eb63 0301 	sbc.w	r3, r3, r1
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800527e:	4659      	mov	r1, fp
 8005280:	018b      	lsls	r3, r1, #6
 8005282:	4651      	mov	r1, sl
 8005284:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005288:	4651      	mov	r1, sl
 800528a:	018a      	lsls	r2, r1, #6
 800528c:	4651      	mov	r1, sl
 800528e:	ebb2 0801 	subs.w	r8, r2, r1
 8005292:	4659      	mov	r1, fp
 8005294:	eb63 0901 	sbc.w	r9, r3, r1
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ac:	4690      	mov	r8, r2
 80052ae:	4699      	mov	r9, r3
 80052b0:	4623      	mov	r3, r4
 80052b2:	eb18 0303 	adds.w	r3, r8, r3
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	462b      	mov	r3, r5
 80052ba:	eb49 0303 	adc.w	r3, r9, r3
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80052cc:	4629      	mov	r1, r5
 80052ce:	024b      	lsls	r3, r1, #9
 80052d0:	4621      	mov	r1, r4
 80052d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052d6:	4621      	mov	r1, r4
 80052d8:	024a      	lsls	r2, r1, #9
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052e2:	2200      	movs	r2, #0
 80052e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80052e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052ec:	f7fb fc90 	bl	8000c10 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4613      	mov	r3, r2
 80052f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052fa:	e065      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x420>
 80052fc:	40023800 	.word	0x40023800
 8005300:	00f42400 	.word	0x00f42400
 8005304:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005308:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <HAL_RCC_GetSysClockFreq+0x458>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	099b      	lsrs	r3, r3, #6
 800530e:	2200      	movs	r2, #0
 8005310:	4618      	mov	r0, r3
 8005312:	4611      	mov	r1, r2
 8005314:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005318:	653b      	str	r3, [r7, #80]	; 0x50
 800531a:	2300      	movs	r3, #0
 800531c:	657b      	str	r3, [r7, #84]	; 0x54
 800531e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005322:	4642      	mov	r2, r8
 8005324:	464b      	mov	r3, r9
 8005326:	f04f 0000 	mov.w	r0, #0
 800532a:	f04f 0100 	mov.w	r1, #0
 800532e:	0159      	lsls	r1, r3, #5
 8005330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005334:	0150      	lsls	r0, r2, #5
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4641      	mov	r1, r8
 800533c:	1a51      	subs	r1, r2, r1
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	4649      	mov	r1, r9
 8005342:	eb63 0301 	sbc.w	r3, r3, r1
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005354:	4659      	mov	r1, fp
 8005356:	018b      	lsls	r3, r1, #6
 8005358:	4651      	mov	r1, sl
 800535a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800535e:	4651      	mov	r1, sl
 8005360:	018a      	lsls	r2, r1, #6
 8005362:	4651      	mov	r1, sl
 8005364:	1a54      	subs	r4, r2, r1
 8005366:	4659      	mov	r1, fp
 8005368:	eb63 0501 	sbc.w	r5, r3, r1
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	00eb      	lsls	r3, r5, #3
 8005376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537a:	00e2      	lsls	r2, r4, #3
 800537c:	4614      	mov	r4, r2
 800537e:	461d      	mov	r5, r3
 8005380:	4643      	mov	r3, r8
 8005382:	18e3      	adds	r3, r4, r3
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	464b      	mov	r3, r9
 8005388:	eb45 0303 	adc.w	r3, r5, r3
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800539a:	4629      	mov	r1, r5
 800539c:	028b      	lsls	r3, r1, #10
 800539e:	4621      	mov	r1, r4
 80053a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053a4:	4621      	mov	r1, r4
 80053a6:	028a      	lsls	r2, r1, #10
 80053a8:	4610      	mov	r0, r2
 80053aa:	4619      	mov	r1, r3
 80053ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053b0:	2200      	movs	r2, #0
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80053b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053ba:	f7fb fc29 	bl	8000c10 <__aeabi_uldivmod>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4613      	mov	r3, r2
 80053c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <HAL_RCC_GetSysClockFreq+0x458>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	0f1b      	lsrs	r3, r3, #28
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80053d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80053e6:	e003      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_RCC_GetSysClockFreq+0x45c>)
 80053ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80053ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	37b8      	adds	r7, #184	; 0xb8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800
 8005404:	00f42400 	.word	0x00f42400

08005408 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e28d      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8083 	beq.w	800552e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005428:	4b94      	ldr	r3, [pc, #592]	; (800567c <HAL_RCC_OscConfig+0x274>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b04      	cmp	r3, #4
 8005432:	d019      	beq.n	8005468 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005434:	4b91      	ldr	r3, [pc, #580]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800543c:	2b08      	cmp	r3, #8
 800543e:	d106      	bne.n	800544e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005440:	4b8e      	ldr	r3, [pc, #568]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544e:	4b8b      	ldr	r3, [pc, #556]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d112      	bne.n	8005480 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800545a:	4b88      	ldr	r3, [pc, #544]	; (800567c <HAL_RCC_OscConfig+0x274>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005466:	d10b      	bne.n	8005480 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	4b84      	ldr	r3, [pc, #528]	; (800567c <HAL_RCC_OscConfig+0x274>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05b      	beq.n	800552c <HAL_RCC_OscConfig+0x124>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d157      	bne.n	800552c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e25a      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d106      	bne.n	8005498 <HAL_RCC_OscConfig+0x90>
 800548a:	4b7c      	ldr	r3, [pc, #496]	; (800567c <HAL_RCC_OscConfig+0x274>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7b      	ldr	r2, [pc, #492]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xcc>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0xb4>
 80054a2:	4b76      	ldr	r3, [pc, #472]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a75      	ldr	r2, [pc, #468]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b73      	ldr	r3, [pc, #460]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a72      	ldr	r2, [pc, #456]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xcc>
 80054bc:	4b6f      	ldr	r3, [pc, #444]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a6e      	ldr	r2, [pc, #440]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b6c      	ldr	r3, [pc, #432]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a6b      	ldr	r2, [pc, #428]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd f9cc 	bl	8002878 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fd f9c8 	bl	8002878 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e21f      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b61      	ldr	r3, [pc, #388]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xdc>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fd f9b8 	bl	8002878 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f7fd f9b4 	bl	8002878 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e20b      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	4b57      	ldr	r3, [pc, #348]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x104>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d06f      	beq.n	800561a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800553a:	4b50      	ldr	r3, [pc, #320]	; (800567c <HAL_RCC_OscConfig+0x274>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d017      	beq.n	8005576 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005546:	4b4d      	ldr	r3, [pc, #308]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800554e:	2b08      	cmp	r3, #8
 8005550:	d105      	bne.n	800555e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005552:	4b4a      	ldr	r3, [pc, #296]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d11c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556a:	4b44      	ldr	r3, [pc, #272]	; (800567c <HAL_RCC_OscConfig+0x274>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	4b41      	ldr	r3, [pc, #260]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x186>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1d3      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	4b3b      	ldr	r3, [pc, #236]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4937      	ldr	r1, [pc, #220]	; (800567c <HAL_RCC_OscConfig+0x274>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	e03a      	b.n	800561a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCC_OscConfig+0x278>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fd f961 	bl	8002878 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fd f95d 	bl	8002878 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1b4      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055cc:	4b2b      	ldr	r3, [pc, #172]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b28      	ldr	r3, [pc, #160]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4925      	ldr	r1, [pc, #148]	; (800567c <HAL_RCC_OscConfig+0x274>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_RCC_OscConfig+0x278>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd f940 	bl	8002878 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fd f93c 	bl	8002878 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e193      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d036      	beq.n	8005694 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <HAL_RCC_OscConfig+0x27c>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fd f920 	bl	8002878 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fd f91c 	bl	8002878 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e173      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_OscConfig+0x274>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x234>
 800565a:	e01b      	b.n	8005694 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_OscConfig+0x27c>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005662:	f7fd f909 	bl	8002878 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005668:	e00e      	b.n	8005688 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800566a:	f7fd f905 	bl	8002878 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d907      	bls.n	8005688 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e15c      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
 800567c:	40023800 	.word	0x40023800
 8005680:	42470000 	.word	0x42470000
 8005684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	4b8a      	ldr	r3, [pc, #552]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ea      	bne.n	800566a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8097 	beq.w	80057d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b83      	ldr	r3, [pc, #524]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	4b7f      	ldr	r3, [pc, #508]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	4a7e      	ldr	r2, [pc, #504]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c0:	6413      	str	r3, [r2, #64]	; 0x40
 80056c2:	4b7c      	ldr	r3, [pc, #496]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d2:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d118      	bne.n	8005710 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056de:	4b76      	ldr	r3, [pc, #472]	; (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a75      	ldr	r2, [pc, #468]	; (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 80056e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ea:	f7fd f8c5 	bl	8002878 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f2:	f7fd f8c1 	bl	8002878 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e118      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	4b6c      	ldr	r3, [pc, #432]	; (80058b8 <HAL_RCC_OscConfig+0x4b0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d106      	bne.n	8005726 <HAL_RCC_OscConfig+0x31e>
 8005718:	4b66      	ldr	r3, [pc, #408]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a65      	ldr	r2, [pc, #404]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
 8005724:	e01c      	b.n	8005760 <HAL_RCC_OscConfig+0x358>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b05      	cmp	r3, #5
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x340>
 800572e:	4b61      	ldr	r3, [pc, #388]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	4a60      	ldr	r2, [pc, #384]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	6713      	str	r3, [r2, #112]	; 0x70
 800573a:	4b5e      	ldr	r3, [pc, #376]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	4a5d      	ldr	r2, [pc, #372]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6713      	str	r3, [r2, #112]	; 0x70
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0x358>
 8005748:	4b5a      	ldr	r3, [pc, #360]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	4a59      	ldr	r2, [pc, #356]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6713      	str	r3, [r2, #112]	; 0x70
 8005754:	4b57      	ldr	r3, [pc, #348]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a56      	ldr	r2, [pc, #344]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800575a:	f023 0304 	bic.w	r3, r3, #4
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d015      	beq.n	8005794 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fd f886 	bl	8002878 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fd f882 	bl	8002878 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0d7      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	4b4b      	ldr	r3, [pc, #300]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ee      	beq.n	8005770 <HAL_RCC_OscConfig+0x368>
 8005792:	e014      	b.n	80057be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fd f870 	bl	8002878 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fd f86c 	bl	8002878 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0c1      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b2:	4b40      	ldr	r3, [pc, #256]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ee      	bne.n	800579c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c4:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80ad 	beq.w	8005934 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057da:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d060      	beq.n	80058a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d145      	bne.n	800587a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ee:	4b33      	ldr	r3, [pc, #204]	; (80058bc <HAL_RCC_OscConfig+0x4b4>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fd f840 	bl	8002878 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fd f83c 	bl	8002878 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e093      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	019b      	lsls	r3, r3, #6
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	3b01      	subs	r3, #1
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	071b      	lsls	r3, r3, #28
 8005846:	491b      	ldr	r1, [pc, #108]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <HAL_RCC_OscConfig+0x4b4>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fd f811 	bl	8002878 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585a:	f7fd f80d 	bl	8002878 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e064      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x452>
 8005878:	e05c      	b.n	8005934 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <HAL_RCC_OscConfig+0x4b4>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fc fffa 	bl	8002878 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005888:	f7fc fff6 	bl	8002878 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e04d      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_RCC_OscConfig+0x4ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0x480>
 80058a6:	e045      	b.n	8005934 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e040      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40007000 	.word	0x40007000
 80058bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c0:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <HAL_RCC_OscConfig+0x538>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d030      	beq.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d129      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d122      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d119      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	3b01      	subs	r3, #1
 800590a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d10f      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d107      	bne.n	8005930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800

08005944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07b      	b.n	8005a4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d108      	bne.n	8005970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d009      	beq.n	800597c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	61da      	str	r2, [r3, #28]
 800596e:	e005      	b.n	800597c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fe06 	bl	80025a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	ea42 0103 	orr.w	r1, r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	f003 0104 	and.w	r1, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f003 0210 	and.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b088      	sub	sp, #32
 8005a5a:	af02      	add	r7, sp, #8
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a72:	d112      	bne.n	8005a9a <HAL_SPI_Receive+0x44>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10e      	bne.n	8005a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f8f1 	bl	8005c78 <HAL_SPI_TransmitReceive>
 8005a96:	4603      	mov	r3, r0
 8005a98:	e0ea      	b.n	8005c70 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_SPI_Receive+0x52>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e0e3      	b.n	8005c70 <HAL_SPI_Receive+0x21a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ab0:	f7fc fee2 	bl	8002878 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d002      	beq.n	8005ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ac6:	e0ca      	b.n	8005c5e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_Receive+0x7e>
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ad8:	e0c1      	b.n	8005c5e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2204      	movs	r2, #4
 8005ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b20:	d10f      	bne.n	8005b42 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d007      	beq.n	8005b60 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d162      	bne.n	8005c2e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b68:	e02e      	b.n	8005bc8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d115      	bne.n	8005ba4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f103 020c 	add.w	r2, r3, #12
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba2:	e011      	b.n	8005bc8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba4:	f7fc fe68 	bl	8002878 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d803      	bhi.n	8005bbc <HAL_SPI_Receive+0x166>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d102      	bne.n	8005bc2 <HAL_SPI_Receive+0x16c>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bc6:	e04a      	b.n	8005c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1cb      	bne.n	8005b6a <HAL_SPI_Receive+0x114>
 8005bd2:	e031      	b.n	8005c38 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d113      	bne.n	8005c0a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	b292      	uxth	r2, r2
 8005bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c08:	e011      	b.n	8005c2e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0a:	f7fc fe35 	bl	8002878 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d803      	bhi.n	8005c22 <HAL_SPI_Receive+0x1cc>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d102      	bne.n	8005c28 <HAL_SPI_Receive+0x1d2>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d102      	bne.n	8005c2e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c2c:	e017      	b.n	8005c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1cd      	bne.n	8005bd4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fa45 	bl	80060cc <SPI_EndRxTransaction>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
 8005c5a:	e000      	b.n	8005c5e <HAL_SPI_Receive+0x208>
  }

error :
 8005c5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c86:	2301      	movs	r3, #1
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x26>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e18a      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x33c>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca6:	f7fc fde7 	bl	8002878 <HAL_GetTick>
 8005caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005cbc:	887b      	ldrh	r3, [r7, #2]
 8005cbe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d00f      	beq.n	8005ce8 <HAL_SPI_TransmitReceive+0x70>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cce:	d107      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x68>
 8005cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d003      	beq.n	8005ce8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ce6:	e15b      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x82>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x82>
 8005cf4:	887b      	ldrh	r3, [r7, #2]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d00:	e14e      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d003      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2205      	movs	r2, #5
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	887a      	ldrh	r2, [r7, #2]
 8005d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	887a      	ldrh	r2, [r7, #2]
 8005d38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	887a      	ldrh	r2, [r7, #2]
 8005d3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	d007      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d72:	d178      	bne.n	8005e66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_SPI_TransmitReceive+0x10a>
 8005d7c:	8b7b      	ldrh	r3, [r7, #26]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d166      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	881a      	ldrh	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	1c9a      	adds	r2, r3, #2
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da6:	e053      	b.n	8005e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d11b      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x176>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d016      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x176>
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d113      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d119      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x1b8>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d014      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	b292      	uxth	r2, r2
 8005e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e30:	f7fc fd22 	bl	8002878 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d807      	bhi.n	8005e50 <HAL_SPI_TransmitReceive+0x1d8>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d003      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e4e:	e0a7      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1a6      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x130>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1a1      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x130>
 8005e64:	e07c      	b.n	8005f60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_SPI_TransmitReceive+0x1fc>
 8005e6e:	8b7b      	ldrh	r3, [r7, #26]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d16b      	bne.n	8005f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	7812      	ldrb	r2, [r2, #0]
 8005e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e9a:	e057      	b.n	8005f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d11c      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0x26c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d017      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x26c>
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d114      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d119      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x2ae>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d014      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f22:	2301      	movs	r3, #1
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f26:	f7fc fca7 	bl	8002878 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d803      	bhi.n	8005f3e <HAL_SPI_TransmitReceive+0x2c6>
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d102      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x2cc>
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f4a:	e029      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1a2      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x224>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d19d      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f917 	bl	8006198 <SPI_EndRxTxTransaction>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d006      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f7c:	e010      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	e000      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3730      	adds	r7, #48	; 0x30
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fcc:	f7fc fc54 	bl	8002878 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	4413      	add	r3, r2
 8005fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fdc:	f7fc fc4c 	bl	8002878 <HAL_GetTick>
 8005fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fe2:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	015b      	lsls	r3, r3, #5
 8005fe8:	0d1b      	lsrs	r3, r3, #20
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	fb02 f303 	mul.w	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ff2:	e054      	b.n	800609e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d050      	beq.n	800609e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ffc:	f7fc fc3c 	bl	8002878 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	429a      	cmp	r2, r3
 800600a:	d902      	bls.n	8006012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d13d      	bne.n	800608e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800602a:	d111      	bne.n	8006050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006034:	d004      	beq.n	8006040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603e:	d107      	bne.n	8006050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006058:	d10f      	bne.n	800607a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e017      	b.n	80060be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3b01      	subs	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	bf0c      	ite	eq
 80060ae:	2301      	moveq	r3, #1
 80060b0:	2300      	movne	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d19b      	bne.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000018 	.word	0x20000018

080060cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e0:	d111      	bne.n	8006106 <SPI_EndRxTransaction+0x3a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ea:	d004      	beq.n	80060f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d107      	bne.n	8006106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800610e:	d12a      	bne.n	8006166 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006118:	d012      	beq.n	8006140 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff ff49 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d02d      	beq.n	800618c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e026      	b.n	800618e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2200      	movs	r2, #0
 8006148:	2101      	movs	r1, #1
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ff36 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01a      	beq.n	800618c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e013      	b.n	800618e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	2101      	movs	r1, #1
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff ff23 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e000      	b.n	800618e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <SPI_EndRxTxTransaction+0x7c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <SPI_EndRxTxTransaction+0x80>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	0d5b      	lsrs	r3, r3, #21
 80061b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061c2:	d112      	bne.n	80061ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff fef4 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00f      	b.n	800620a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	2b80      	cmp	r3, #128	; 0x80
 8006202:	d0f2      	beq.n	80061ea <SPI_EndRxTxTransaction+0x52>
 8006204:	e000      	b.n	8006208 <SPI_EndRxTxTransaction+0x70>
        break;
 8006206:	bf00      	nop
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000018 	.word	0x20000018
 8006218:	165e9f81 	.word	0x165e9f81

0800621c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e041      	b.n	80062b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fc fa18 	bl	8002678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 f95e 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d001      	beq.n	80062d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e046      	b.n	8006362 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a23      	ldr	r2, [pc, #140]	; (8006370 <HAL_TIM_Base_Start+0xb4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d022      	beq.n	800632c <HAL_TIM_Base_Start+0x70>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ee:	d01d      	beq.n	800632c <HAL_TIM_Base_Start+0x70>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_TIM_Base_Start+0xb8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d018      	beq.n	800632c <HAL_TIM_Base_Start+0x70>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <HAL_TIM_Base_Start+0xbc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <HAL_TIM_Base_Start+0x70>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_TIM_Base_Start+0xc0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00e      	beq.n	800632c <HAL_TIM_Base_Start+0x70>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <HAL_TIM_Base_Start+0xc4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_TIM_Base_Start+0x70>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a19      	ldr	r2, [pc, #100]	; (8006384 <HAL_TIM_Base_Start+0xc8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIM_Base_Start+0x70>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <HAL_TIM_Base_Start+0xcc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d111      	bne.n	8006350 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b06      	cmp	r3, #6
 800633c:	d010      	beq.n	8006360 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	e007      	b.n	8006360 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40010000 	.word	0x40010000
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40010400 	.word	0x40010400
 8006384:	40014000 	.word	0x40014000
 8006388:	40001800 	.word	0x40001800

0800638c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIM_ConfigClockSource+0x1c>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0b4      	b.n	8006512 <HAL_TIM_ConfigClockSource+0x186>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e0:	d03e      	beq.n	8006460 <HAL_TIM_ConfigClockSource+0xd4>
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e6:	f200 8087 	bhi.w	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ee:	f000 8086 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x172>
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f6:	d87f      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b70      	cmp	r3, #112	; 0x70
 80063fa:	d01a      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0xa6>
 80063fc:	2b70      	cmp	r3, #112	; 0x70
 80063fe:	d87b      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006400:	2b60      	cmp	r3, #96	; 0x60
 8006402:	d050      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006404:	2b60      	cmp	r3, #96	; 0x60
 8006406:	d877      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d03c      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0xfa>
 800640c:	2b50      	cmp	r3, #80	; 0x50
 800640e:	d873      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d058      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d86f      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d064      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x15a>
 800641c:	2b30      	cmp	r3, #48	; 0x30
 800641e:	d86b      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d060      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006424:	2b20      	cmp	r3, #32
 8006426:	d867      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05c      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x15a>
 800642c:	2b10      	cmp	r3, #16
 800642e:	d05a      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006430:	e062      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6899      	ldr	r1, [r3, #8]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f000 f985 	bl	8006750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	609a      	str	r2, [r3, #8]
      break;
 800645e:	e04f      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f000 f96e 	bl	8006750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006482:	609a      	str	r2, [r3, #8]
      break;
 8006484:	e03c      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 f8e2 	bl	800665c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2150      	movs	r1, #80	; 0x50
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f93b 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 80064a4:	e02c      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f000 f901 	bl	80066ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2160      	movs	r1, #96	; 0x60
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f92b 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 80064c4:	e01c      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f000 f8c2 	bl	800665c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f91b 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 80064e4:	e00c      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f000 f912 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 80064f6:	e003      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e000      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a40      	ldr	r2, [pc, #256]	; (8006630 <TIM_Base_SetConfig+0x114>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d013      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653a:	d00f      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a3d      	ldr	r2, [pc, #244]	; (8006634 <TIM_Base_SetConfig+0x118>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a3c      	ldr	r2, [pc, #240]	; (8006638 <TIM_Base_SetConfig+0x11c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a3b      	ldr	r2, [pc, #236]	; (800663c <TIM_Base_SetConfig+0x120>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3a      	ldr	r2, [pc, #232]	; (8006640 <TIM_Base_SetConfig+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d108      	bne.n	800656e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2f      	ldr	r2, [pc, #188]	; (8006630 <TIM_Base_SetConfig+0x114>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d02b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657c:	d027      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2c      	ldr	r2, [pc, #176]	; (8006634 <TIM_Base_SetConfig+0x118>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d023      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2b      	ldr	r2, [pc, #172]	; (8006638 <TIM_Base_SetConfig+0x11c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01f      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2a      	ldr	r2, [pc, #168]	; (800663c <TIM_Base_SetConfig+0x120>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a29      	ldr	r2, [pc, #164]	; (8006640 <TIM_Base_SetConfig+0x124>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d017      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a28      	ldr	r2, [pc, #160]	; (8006644 <TIM_Base_SetConfig+0x128>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a27      	ldr	r2, [pc, #156]	; (8006648 <TIM_Base_SetConfig+0x12c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a26      	ldr	r2, [pc, #152]	; (800664c <TIM_Base_SetConfig+0x130>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a25      	ldr	r2, [pc, #148]	; (8006650 <TIM_Base_SetConfig+0x134>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a24      	ldr	r2, [pc, #144]	; (8006654 <TIM_Base_SetConfig+0x138>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a23      	ldr	r2, [pc, #140]	; (8006658 <TIM_Base_SetConfig+0x13c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a0a      	ldr	r2, [pc, #40]	; (8006630 <TIM_Base_SetConfig+0x114>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_Base_SetConfig+0xf8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <TIM_Base_SetConfig+0x124>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d103      	bne.n	800661c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	615a      	str	r2, [r3, #20]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40010400 	.word	0x40010400
 8006644:	40014000 	.word	0x40014000
 8006648:	40014400 	.word	0x40014400
 800664c:	40014800 	.word	0x40014800
 8006650:	40001800 	.word	0x40001800
 8006654:	40001c00 	.word	0x40001c00
 8006658:	40002000 	.word	0x40002000

0800665c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f023 0201 	bic.w	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 030a 	bic.w	r3, r3, #10
 8006698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b087      	sub	sp, #28
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0210 	bic.w	r2, r3, #16
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	031b      	lsls	r3, r3, #12
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	f043 0307 	orr.w	r3, r3, #7
 800673c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	609a      	str	r2, [r3, #8]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	021a      	lsls	r2, r3, #8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	431a      	orrs	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4313      	orrs	r3, r2
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e05a      	b.n	800685e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a21      	ldr	r2, [pc, #132]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d022      	beq.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f4:	d01d      	beq.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1d      	ldr	r2, [pc, #116]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d018      	beq.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1a      	ldr	r2, [pc, #104]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00e      	beq.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a18      	ldr	r2, [pc, #96]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d009      	beq.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a17      	ldr	r2, [pc, #92]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d004      	beq.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d10c      	bne.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	4313      	orrs	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40010000 	.word	0x40010000
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800
 8006878:	40000c00 	.word	0x40000c00
 800687c:	40010400 	.word	0x40010400
 8006880:	40014000 	.word	0x40014000
 8006884:	40001800 	.word	0x40001800

08006888 <__errno>:
 8006888:	4b01      	ldr	r3, [pc, #4]	; (8006890 <__errno+0x8>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20000024 	.word	0x20000024

08006894 <__libc_init_array>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	4d0d      	ldr	r5, [pc, #52]	; (80068cc <__libc_init_array+0x38>)
 8006898:	4c0d      	ldr	r4, [pc, #52]	; (80068d0 <__libc_init_array+0x3c>)
 800689a:	1b64      	subs	r4, r4, r5
 800689c:	10a4      	asrs	r4, r4, #2
 800689e:	2600      	movs	r6, #0
 80068a0:	42a6      	cmp	r6, r4
 80068a2:	d109      	bne.n	80068b8 <__libc_init_array+0x24>
 80068a4:	4d0b      	ldr	r5, [pc, #44]	; (80068d4 <__libc_init_array+0x40>)
 80068a6:	4c0c      	ldr	r4, [pc, #48]	; (80068d8 <__libc_init_array+0x44>)
 80068a8:	f000 ff3c 	bl	8007724 <_init>
 80068ac:	1b64      	subs	r4, r4, r5
 80068ae:	10a4      	asrs	r4, r4, #2
 80068b0:	2600      	movs	r6, #0
 80068b2:	42a6      	cmp	r6, r4
 80068b4:	d105      	bne.n	80068c2 <__libc_init_array+0x2e>
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068bc:	4798      	blx	r3
 80068be:	3601      	adds	r6, #1
 80068c0:	e7ee      	b.n	80068a0 <__libc_init_array+0xc>
 80068c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c6:	4798      	blx	r3
 80068c8:	3601      	adds	r6, #1
 80068ca:	e7f2      	b.n	80068b2 <__libc_init_array+0x1e>
 80068cc:	08007798 	.word	0x08007798
 80068d0:	08007798 	.word	0x08007798
 80068d4:	08007798 	.word	0x08007798
 80068d8:	0800779c 	.word	0x0800779c

080068dc <memset>:
 80068dc:	4402      	add	r2, r0
 80068de:	4603      	mov	r3, r0
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d100      	bne.n	80068e6 <memset+0xa>
 80068e4:	4770      	bx	lr
 80068e6:	f803 1b01 	strb.w	r1, [r3], #1
 80068ea:	e7f9      	b.n	80068e0 <memset+0x4>

080068ec <pow>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	ed2d 8b02 	vpush	{d8}
 80068f2:	eeb0 8a40 	vmov.f32	s16, s0
 80068f6:	eef0 8a60 	vmov.f32	s17, s1
 80068fa:	ec55 4b11 	vmov	r4, r5, d1
 80068fe:	f000 f867 	bl	80069d0 <__ieee754_pow>
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	4620      	mov	r0, r4
 8006908:	4629      	mov	r1, r5
 800690a:	ec57 6b10 	vmov	r6, r7, d0
 800690e:	f7fa f8d1 	bl	8000ab4 <__aeabi_dcmpun>
 8006912:	2800      	cmp	r0, #0
 8006914:	d13b      	bne.n	800698e <pow+0xa2>
 8006916:	ec51 0b18 	vmov	r0, r1, d8
 800691a:	2200      	movs	r2, #0
 800691c:	2300      	movs	r3, #0
 800691e:	f7fa f897 	bl	8000a50 <__aeabi_dcmpeq>
 8006922:	b1b8      	cbz	r0, 8006954 <pow+0x68>
 8006924:	2200      	movs	r2, #0
 8006926:	2300      	movs	r3, #0
 8006928:	4620      	mov	r0, r4
 800692a:	4629      	mov	r1, r5
 800692c:	f7fa f890 	bl	8000a50 <__aeabi_dcmpeq>
 8006930:	2800      	cmp	r0, #0
 8006932:	d146      	bne.n	80069c2 <pow+0xd6>
 8006934:	ec45 4b10 	vmov	d0, r4, r5
 8006938:	f000 fe63 	bl	8007602 <finite>
 800693c:	b338      	cbz	r0, 800698e <pow+0xa2>
 800693e:	2200      	movs	r2, #0
 8006940:	2300      	movs	r3, #0
 8006942:	4620      	mov	r0, r4
 8006944:	4629      	mov	r1, r5
 8006946:	f7fa f88d 	bl	8000a64 <__aeabi_dcmplt>
 800694a:	b300      	cbz	r0, 800698e <pow+0xa2>
 800694c:	f7ff ff9c 	bl	8006888 <__errno>
 8006950:	2322      	movs	r3, #34	; 0x22
 8006952:	e01b      	b.n	800698c <pow+0xa0>
 8006954:	ec47 6b10 	vmov	d0, r6, r7
 8006958:	f000 fe53 	bl	8007602 <finite>
 800695c:	b9e0      	cbnz	r0, 8006998 <pow+0xac>
 800695e:	eeb0 0a48 	vmov.f32	s0, s16
 8006962:	eef0 0a68 	vmov.f32	s1, s17
 8006966:	f000 fe4c 	bl	8007602 <finite>
 800696a:	b1a8      	cbz	r0, 8006998 <pow+0xac>
 800696c:	ec45 4b10 	vmov	d0, r4, r5
 8006970:	f000 fe47 	bl	8007602 <finite>
 8006974:	b180      	cbz	r0, 8006998 <pow+0xac>
 8006976:	4632      	mov	r2, r6
 8006978:	463b      	mov	r3, r7
 800697a:	4630      	mov	r0, r6
 800697c:	4639      	mov	r1, r7
 800697e:	f7fa f899 	bl	8000ab4 <__aeabi_dcmpun>
 8006982:	2800      	cmp	r0, #0
 8006984:	d0e2      	beq.n	800694c <pow+0x60>
 8006986:	f7ff ff7f 	bl	8006888 <__errno>
 800698a:	2321      	movs	r3, #33	; 0x21
 800698c:	6003      	str	r3, [r0, #0]
 800698e:	ecbd 8b02 	vpop	{d8}
 8006992:	ec47 6b10 	vmov	d0, r6, r7
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006998:	2200      	movs	r2, #0
 800699a:	2300      	movs	r3, #0
 800699c:	4630      	mov	r0, r6
 800699e:	4639      	mov	r1, r7
 80069a0:	f7fa f856 	bl	8000a50 <__aeabi_dcmpeq>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d0f2      	beq.n	800698e <pow+0xa2>
 80069a8:	eeb0 0a48 	vmov.f32	s0, s16
 80069ac:	eef0 0a68 	vmov.f32	s1, s17
 80069b0:	f000 fe27 	bl	8007602 <finite>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d0ea      	beq.n	800698e <pow+0xa2>
 80069b8:	ec45 4b10 	vmov	d0, r4, r5
 80069bc:	f000 fe21 	bl	8007602 <finite>
 80069c0:	e7c3      	b.n	800694a <pow+0x5e>
 80069c2:	4f01      	ldr	r7, [pc, #4]	; (80069c8 <pow+0xdc>)
 80069c4:	2600      	movs	r6, #0
 80069c6:	e7e2      	b.n	800698e <pow+0xa2>
 80069c8:	3ff00000 	.word	0x3ff00000
 80069cc:	00000000 	.word	0x00000000

080069d0 <__ieee754_pow>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	ed2d 8b06 	vpush	{d8-d10}
 80069d8:	b089      	sub	sp, #36	; 0x24
 80069da:	ed8d 1b00 	vstr	d1, [sp]
 80069de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80069e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80069e6:	ea58 0102 	orrs.w	r1, r8, r2
 80069ea:	ec57 6b10 	vmov	r6, r7, d0
 80069ee:	d115      	bne.n	8006a1c <__ieee754_pow+0x4c>
 80069f0:	19b3      	adds	r3, r6, r6
 80069f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80069f6:	4152      	adcs	r2, r2
 80069f8:	4299      	cmp	r1, r3
 80069fa:	4b89      	ldr	r3, [pc, #548]	; (8006c20 <__ieee754_pow+0x250>)
 80069fc:	4193      	sbcs	r3, r2
 80069fe:	f080 84d2 	bcs.w	80073a6 <__ieee754_pow+0x9d6>
 8006a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7f9 fc03 	bl	8000214 <__adddf3>
 8006a0e:	ec41 0b10 	vmov	d0, r0, r1
 8006a12:	b009      	add	sp, #36	; 0x24
 8006a14:	ecbd 8b06 	vpop	{d8-d10}
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	4b81      	ldr	r3, [pc, #516]	; (8006c24 <__ieee754_pow+0x254>)
 8006a1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006a22:	429c      	cmp	r4, r3
 8006a24:	ee10 aa10 	vmov	sl, s0
 8006a28:	463d      	mov	r5, r7
 8006a2a:	dc06      	bgt.n	8006a3a <__ieee754_pow+0x6a>
 8006a2c:	d101      	bne.n	8006a32 <__ieee754_pow+0x62>
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d1e7      	bne.n	8006a02 <__ieee754_pow+0x32>
 8006a32:	4598      	cmp	r8, r3
 8006a34:	dc01      	bgt.n	8006a3a <__ieee754_pow+0x6a>
 8006a36:	d10f      	bne.n	8006a58 <__ieee754_pow+0x88>
 8006a38:	b172      	cbz	r2, 8006a58 <__ieee754_pow+0x88>
 8006a3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006a3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006a42:	ea55 050a 	orrs.w	r5, r5, sl
 8006a46:	d1dc      	bne.n	8006a02 <__ieee754_pow+0x32>
 8006a48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a4c:	18db      	adds	r3, r3, r3
 8006a4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006a52:	4152      	adcs	r2, r2
 8006a54:	429d      	cmp	r5, r3
 8006a56:	e7d0      	b.n	80069fa <__ieee754_pow+0x2a>
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	da3b      	bge.n	8006ad4 <__ieee754_pow+0x104>
 8006a5c:	4b72      	ldr	r3, [pc, #456]	; (8006c28 <__ieee754_pow+0x258>)
 8006a5e:	4598      	cmp	r8, r3
 8006a60:	dc51      	bgt.n	8006b06 <__ieee754_pow+0x136>
 8006a62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006a66:	4598      	cmp	r8, r3
 8006a68:	f340 84ac 	ble.w	80073c4 <__ieee754_pow+0x9f4>
 8006a6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a74:	2b14      	cmp	r3, #20
 8006a76:	dd0f      	ble.n	8006a98 <__ieee754_pow+0xc8>
 8006a78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a7c:	fa22 f103 	lsr.w	r1, r2, r3
 8006a80:	fa01 f303 	lsl.w	r3, r1, r3
 8006a84:	4293      	cmp	r3, r2
 8006a86:	f040 849d 	bne.w	80073c4 <__ieee754_pow+0x9f4>
 8006a8a:	f001 0101 	and.w	r1, r1, #1
 8006a8e:	f1c1 0302 	rsb	r3, r1, #2
 8006a92:	9304      	str	r3, [sp, #16]
 8006a94:	b182      	cbz	r2, 8006ab8 <__ieee754_pow+0xe8>
 8006a96:	e05f      	b.n	8006b58 <__ieee754_pow+0x188>
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	d15b      	bne.n	8006b54 <__ieee754_pow+0x184>
 8006a9c:	f1c3 0314 	rsb	r3, r3, #20
 8006aa0:	fa48 f103 	asr.w	r1, r8, r3
 8006aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	f040 8488 	bne.w	80073be <__ieee754_pow+0x9ee>
 8006aae:	f001 0101 	and.w	r1, r1, #1
 8006ab2:	f1c1 0302 	rsb	r3, r1, #2
 8006ab6:	9304      	str	r3, [sp, #16]
 8006ab8:	4b5c      	ldr	r3, [pc, #368]	; (8006c2c <__ieee754_pow+0x25c>)
 8006aba:	4598      	cmp	r8, r3
 8006abc:	d132      	bne.n	8006b24 <__ieee754_pow+0x154>
 8006abe:	f1b9 0f00 	cmp.w	r9, #0
 8006ac2:	f280 8478 	bge.w	80073b6 <__ieee754_pow+0x9e6>
 8006ac6:	4959      	ldr	r1, [pc, #356]	; (8006c2c <__ieee754_pow+0x25c>)
 8006ac8:	4632      	mov	r2, r6
 8006aca:	463b      	mov	r3, r7
 8006acc:	2000      	movs	r0, #0
 8006ace:	f7f9 fe81 	bl	80007d4 <__aeabi_ddiv>
 8006ad2:	e79c      	b.n	8006a0e <__ieee754_pow+0x3e>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	2a00      	cmp	r2, #0
 8006ada:	d13d      	bne.n	8006b58 <__ieee754_pow+0x188>
 8006adc:	4b51      	ldr	r3, [pc, #324]	; (8006c24 <__ieee754_pow+0x254>)
 8006ade:	4598      	cmp	r8, r3
 8006ae0:	d1ea      	bne.n	8006ab8 <__ieee754_pow+0xe8>
 8006ae2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006ae6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006aea:	ea53 030a 	orrs.w	r3, r3, sl
 8006aee:	f000 845a 	beq.w	80073a6 <__ieee754_pow+0x9d6>
 8006af2:	4b4f      	ldr	r3, [pc, #316]	; (8006c30 <__ieee754_pow+0x260>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	dd08      	ble.n	8006b0a <__ieee754_pow+0x13a>
 8006af8:	f1b9 0f00 	cmp.w	r9, #0
 8006afc:	f2c0 8457 	blt.w	80073ae <__ieee754_pow+0x9de>
 8006b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b04:	e783      	b.n	8006a0e <__ieee754_pow+0x3e>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e7e5      	b.n	8006ad6 <__ieee754_pow+0x106>
 8006b0a:	f1b9 0f00 	cmp.w	r9, #0
 8006b0e:	f04f 0000 	mov.w	r0, #0
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	f6bf af7a 	bge.w	8006a0e <__ieee754_pow+0x3e>
 8006b1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006b1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b22:	e774      	b.n	8006a0e <__ieee754_pow+0x3e>
 8006b24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006b28:	d106      	bne.n	8006b38 <__ieee754_pow+0x168>
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4639      	mov	r1, r7
 8006b32:	f7f9 fd25 	bl	8000580 <__aeabi_dmul>
 8006b36:	e76a      	b.n	8006a0e <__ieee754_pow+0x3e>
 8006b38:	4b3e      	ldr	r3, [pc, #248]	; (8006c34 <__ieee754_pow+0x264>)
 8006b3a:	4599      	cmp	r9, r3
 8006b3c:	d10c      	bne.n	8006b58 <__ieee754_pow+0x188>
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	db0a      	blt.n	8006b58 <__ieee754_pow+0x188>
 8006b42:	ec47 6b10 	vmov	d0, r6, r7
 8006b46:	b009      	add	sp, #36	; 0x24
 8006b48:	ecbd 8b06 	vpop	{d8-d10}
 8006b4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	f000 bc6c 	b.w	800742c <__ieee754_sqrt>
 8006b54:	2300      	movs	r3, #0
 8006b56:	9304      	str	r3, [sp, #16]
 8006b58:	ec47 6b10 	vmov	d0, r6, r7
 8006b5c:	f000 fd48 	bl	80075f0 <fabs>
 8006b60:	ec51 0b10 	vmov	r0, r1, d0
 8006b64:	f1ba 0f00 	cmp.w	sl, #0
 8006b68:	d129      	bne.n	8006bbe <__ieee754_pow+0x1ee>
 8006b6a:	b124      	cbz	r4, 8006b76 <__ieee754_pow+0x1a6>
 8006b6c:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <__ieee754_pow+0x25c>)
 8006b6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d123      	bne.n	8006bbe <__ieee754_pow+0x1ee>
 8006b76:	f1b9 0f00 	cmp.w	r9, #0
 8006b7a:	da05      	bge.n	8006b88 <__ieee754_pow+0x1b8>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	2000      	movs	r0, #0
 8006b82:	492a      	ldr	r1, [pc, #168]	; (8006c2c <__ieee754_pow+0x25c>)
 8006b84:	f7f9 fe26 	bl	80007d4 <__aeabi_ddiv>
 8006b88:	2d00      	cmp	r5, #0
 8006b8a:	f6bf af40 	bge.w	8006a0e <__ieee754_pow+0x3e>
 8006b8e:	9b04      	ldr	r3, [sp, #16]
 8006b90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b98:	4323      	orrs	r3, r4
 8006b9a:	d108      	bne.n	8006bae <__ieee754_pow+0x1de>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f7f9 fb34 	bl	8000210 <__aeabi_dsub>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	e78f      	b.n	8006ace <__ieee754_pow+0xfe>
 8006bae:	9b04      	ldr	r3, [sp, #16]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	f47f af2c 	bne.w	8006a0e <__ieee754_pow+0x3e>
 8006bb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bba:	4619      	mov	r1, r3
 8006bbc:	e727      	b.n	8006a0e <__ieee754_pow+0x3e>
 8006bbe:	0feb      	lsrs	r3, r5, #31
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	9a06      	ldr	r2, [sp, #24]
 8006bc6:	9b04      	ldr	r3, [sp, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d102      	bne.n	8006bd2 <__ieee754_pow+0x202>
 8006bcc:	4632      	mov	r2, r6
 8006bce:	463b      	mov	r3, r7
 8006bd0:	e7e6      	b.n	8006ba0 <__ieee754_pow+0x1d0>
 8006bd2:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <__ieee754_pow+0x268>)
 8006bd4:	4598      	cmp	r8, r3
 8006bd6:	f340 80fb 	ble.w	8006dd0 <__ieee754_pow+0x400>
 8006bda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006bde:	4598      	cmp	r8, r3
 8006be0:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <__ieee754_pow+0x260>)
 8006be2:	dd0c      	ble.n	8006bfe <__ieee754_pow+0x22e>
 8006be4:	429c      	cmp	r4, r3
 8006be6:	dc0f      	bgt.n	8006c08 <__ieee754_pow+0x238>
 8006be8:	f1b9 0f00 	cmp.w	r9, #0
 8006bec:	da0f      	bge.n	8006c0e <__ieee754_pow+0x23e>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	b009      	add	sp, #36	; 0x24
 8006bf2:	ecbd 8b06 	vpop	{d8-d10}
 8006bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfa:	f000 bcf0 	b.w	80075de <__math_oflow>
 8006bfe:	429c      	cmp	r4, r3
 8006c00:	dbf2      	blt.n	8006be8 <__ieee754_pow+0x218>
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <__ieee754_pow+0x25c>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	dd19      	ble.n	8006c3c <__ieee754_pow+0x26c>
 8006c08:	f1b9 0f00 	cmp.w	r9, #0
 8006c0c:	dcef      	bgt.n	8006bee <__ieee754_pow+0x21e>
 8006c0e:	2000      	movs	r0, #0
 8006c10:	b009      	add	sp, #36	; 0x24
 8006c12:	ecbd 8b06 	vpop	{d8-d10}
 8006c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	f000 bcd7 	b.w	80075cc <__math_uflow>
 8006c1e:	bf00      	nop
 8006c20:	fff00000 	.word	0xfff00000
 8006c24:	7ff00000 	.word	0x7ff00000
 8006c28:	433fffff 	.word	0x433fffff
 8006c2c:	3ff00000 	.word	0x3ff00000
 8006c30:	3fefffff 	.word	0x3fefffff
 8006c34:	3fe00000 	.word	0x3fe00000
 8006c38:	41e00000 	.word	0x41e00000
 8006c3c:	4b60      	ldr	r3, [pc, #384]	; (8006dc0 <__ieee754_pow+0x3f0>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f7f9 fae6 	bl	8000210 <__aeabi_dsub>
 8006c44:	a354      	add	r3, pc, #336	; (adr r3, 8006d98 <__ieee754_pow+0x3c8>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	f7f9 fc97 	bl	8000580 <__aeabi_dmul>
 8006c52:	a353      	add	r3, pc, #332	; (adr r3, 8006da0 <__ieee754_pow+0x3d0>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fc8e 	bl	8000580 <__aeabi_dmul>
 8006c64:	4b57      	ldr	r3, [pc, #348]	; (8006dc4 <__ieee754_pow+0x3f4>)
 8006c66:	4682      	mov	sl, r0
 8006c68:	468b      	mov	fp, r1
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f7f9 fc86 	bl	8000580 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	a14b      	add	r1, pc, #300	; (adr r1, 8006da8 <__ieee754_pow+0x3d8>)
 8006c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c7e:	f7f9 fac7 	bl	8000210 <__aeabi_dsub>
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	f7f9 fc7b 	bl	8000580 <__aeabi_dmul>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	2000      	movs	r0, #0
 8006c90:	494d      	ldr	r1, [pc, #308]	; (8006dc8 <__ieee754_pow+0x3f8>)
 8006c92:	f7f9 fabd 	bl	8000210 <__aeabi_dsub>
 8006c96:	4622      	mov	r2, r4
 8006c98:	4680      	mov	r8, r0
 8006c9a:	4689      	mov	r9, r1
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 fc6d 	bl	8000580 <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4640      	mov	r0, r8
 8006cac:	4649      	mov	r1, r9
 8006cae:	f7f9 fc67 	bl	8000580 <__aeabi_dmul>
 8006cb2:	a33f      	add	r3, pc, #252	; (adr r3, 8006db0 <__ieee754_pow+0x3e0>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f7f9 fc62 	bl	8000580 <__aeabi_dmul>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4650      	mov	r0, sl
 8006cc2:	4659      	mov	r1, fp
 8006cc4:	f7f9 faa4 	bl	8000210 <__aeabi_dsub>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4680      	mov	r8, r0
 8006cce:	4689      	mov	r9, r1
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	f7f9 fa9e 	bl	8000214 <__adddf3>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	4632      	mov	r2, r6
 8006cdc:	463b      	mov	r3, r7
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	f7f9 fa95 	bl	8000210 <__aeabi_dsub>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fa8f 	bl	8000210 <__aeabi_dsub>
 8006cf2:	9b04      	ldr	r3, [sp, #16]
 8006cf4:	9a06      	ldr	r2, [sp, #24]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	4682      	mov	sl, r0
 8006cfc:	468b      	mov	fp, r1
 8006cfe:	f040 81e7 	bne.w	80070d0 <__ieee754_pow+0x700>
 8006d02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006db8 <__ieee754_pow+0x3e8>
 8006d06:	eeb0 8a47 	vmov.f32	s16, s14
 8006d0a:	eef0 8a67 	vmov.f32	s17, s15
 8006d0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d12:	2600      	movs	r6, #0
 8006d14:	4632      	mov	r2, r6
 8006d16:	463b      	mov	r3, r7
 8006d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d1c:	f7f9 fa78 	bl	8000210 <__aeabi_dsub>
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	f7f9 fc2c 	bl	8000580 <__aeabi_dmul>
 8006d28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	4689      	mov	r9, r1
 8006d30:	4650      	mov	r0, sl
 8006d32:	4659      	mov	r1, fp
 8006d34:	f7f9 fc24 	bl	8000580 <__aeabi_dmul>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	4649      	mov	r1, r9
 8006d40:	f7f9 fa68 	bl	8000214 <__adddf3>
 8006d44:	4632      	mov	r2, r6
 8006d46:	463b      	mov	r3, r7
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4689      	mov	r9, r1
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 fc16 	bl	8000580 <__aeabi_dmul>
 8006d54:	460b      	mov	r3, r1
 8006d56:	4604      	mov	r4, r0
 8006d58:	460d      	mov	r5, r1
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f7f9 fa58 	bl	8000214 <__adddf3>
 8006d64:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <__ieee754_pow+0x3fc>)
 8006d66:	4299      	cmp	r1, r3
 8006d68:	ec45 4b19 	vmov	d9, r4, r5
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	460f      	mov	r7, r1
 8006d70:	468b      	mov	fp, r1
 8006d72:	f340 82f1 	ble.w	8007358 <__ieee754_pow+0x988>
 8006d76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d7e:	4303      	orrs	r3, r0
 8006d80:	f000 81e4 	beq.w	800714c <__ieee754_pow+0x77c>
 8006d84:	ec51 0b18 	vmov	r0, r1, d8
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f7f9 fe6a 	bl	8000a64 <__aeabi_dcmplt>
 8006d90:	3800      	subs	r0, #0
 8006d92:	bf18      	it	ne
 8006d94:	2001      	movne	r0, #1
 8006d96:	e72b      	b.n	8006bf0 <__ieee754_pow+0x220>
 8006d98:	60000000 	.word	0x60000000
 8006d9c:	3ff71547 	.word	0x3ff71547
 8006da0:	f85ddf44 	.word	0xf85ddf44
 8006da4:	3e54ae0b 	.word	0x3e54ae0b
 8006da8:	55555555 	.word	0x55555555
 8006dac:	3fd55555 	.word	0x3fd55555
 8006db0:	652b82fe 	.word	0x652b82fe
 8006db4:	3ff71547 	.word	0x3ff71547
 8006db8:	00000000 	.word	0x00000000
 8006dbc:	bff00000 	.word	0xbff00000
 8006dc0:	3ff00000 	.word	0x3ff00000
 8006dc4:	3fd00000 	.word	0x3fd00000
 8006dc8:	3fe00000 	.word	0x3fe00000
 8006dcc:	408fffff 	.word	0x408fffff
 8006dd0:	4bd5      	ldr	r3, [pc, #852]	; (8007128 <__ieee754_pow+0x758>)
 8006dd2:	402b      	ands	r3, r5
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	b92b      	cbnz	r3, 8006de4 <__ieee754_pow+0x414>
 8006dd8:	4bd4      	ldr	r3, [pc, #848]	; (800712c <__ieee754_pow+0x75c>)
 8006dda:	f7f9 fbd1 	bl	8000580 <__aeabi_dmul>
 8006dde:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006de2:	460c      	mov	r4, r1
 8006de4:	1523      	asrs	r3, r4, #20
 8006de6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dea:	4413      	add	r3, r2
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	4bd0      	ldr	r3, [pc, #832]	; (8007130 <__ieee754_pow+0x760>)
 8006df0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006df4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006dfe:	dd08      	ble.n	8006e12 <__ieee754_pow+0x442>
 8006e00:	4bcc      	ldr	r3, [pc, #816]	; (8007134 <__ieee754_pow+0x764>)
 8006e02:	429c      	cmp	r4, r3
 8006e04:	f340 8162 	ble.w	80070cc <__ieee754_pow+0x6fc>
 8006e08:	9b05      	ldr	r3, [sp, #20]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	9305      	str	r3, [sp, #20]
 8006e0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006e12:	2400      	movs	r4, #0
 8006e14:	00e3      	lsls	r3, r4, #3
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	4bc7      	ldr	r3, [pc, #796]	; (8007138 <__ieee754_pow+0x768>)
 8006e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e1e:	ed93 7b00 	vldr	d7, [r3]
 8006e22:	4629      	mov	r1, r5
 8006e24:	ec53 2b17 	vmov	r2, r3, d7
 8006e28:	eeb0 9a47 	vmov.f32	s18, s14
 8006e2c:	eef0 9a67 	vmov.f32	s19, s15
 8006e30:	4682      	mov	sl, r0
 8006e32:	f7f9 f9ed 	bl	8000210 <__aeabi_dsub>
 8006e36:	4652      	mov	r2, sl
 8006e38:	4606      	mov	r6, r0
 8006e3a:	460f      	mov	r7, r1
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	ec51 0b19 	vmov	r0, r1, d9
 8006e42:	f7f9 f9e7 	bl	8000214 <__adddf3>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	49bb      	ldr	r1, [pc, #748]	; (800713c <__ieee754_pow+0x76c>)
 8006e4e:	f7f9 fcc1 	bl	80007d4 <__aeabi_ddiv>
 8006e52:	ec41 0b1a 	vmov	d10, r0, r1
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	f7f9 fb8f 	bl	8000580 <__aeabi_dmul>
 8006e62:	2300      	movs	r3, #0
 8006e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e68:	9302      	str	r3, [sp, #8]
 8006e6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e6e:	46ab      	mov	fp, r5
 8006e70:	106d      	asrs	r5, r5, #1
 8006e72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e7a:	ec41 0b18 	vmov	d8, r0, r1
 8006e7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006e82:	2200      	movs	r2, #0
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	4614      	mov	r4, r2
 8006e8a:	461d      	mov	r5, r3
 8006e8c:	f7f9 fb78 	bl	8000580 <__aeabi_dmul>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	f7f9 f9ba 	bl	8000210 <__aeabi_dsub>
 8006e9c:	ec53 2b19 	vmov	r2, r3, d9
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 f9b2 	bl	8000210 <__aeabi_dsub>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	4659      	mov	r1, fp
 8006eb4:	f7f9 f9ac 	bl	8000210 <__aeabi_dsub>
 8006eb8:	4642      	mov	r2, r8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	f7f9 fb60 	bl	8000580 <__aeabi_dmul>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 f9a2 	bl	8000210 <__aeabi_dsub>
 8006ecc:	ec53 2b1a 	vmov	r2, r3, d10
 8006ed0:	f7f9 fb56 	bl	8000580 <__aeabi_dmul>
 8006ed4:	ec53 2b18 	vmov	r2, r3, d8
 8006ed8:	ec41 0b19 	vmov	d9, r0, r1
 8006edc:	ec51 0b18 	vmov	r0, r1, d8
 8006ee0:	f7f9 fb4e 	bl	8000580 <__aeabi_dmul>
 8006ee4:	a37c      	add	r3, pc, #496	; (adr r3, 80070d8 <__ieee754_pow+0x708>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	4604      	mov	r4, r0
 8006eec:	460d      	mov	r5, r1
 8006eee:	f7f9 fb47 	bl	8000580 <__aeabi_dmul>
 8006ef2:	a37b      	add	r3, pc, #492	; (adr r3, 80070e0 <__ieee754_pow+0x710>)
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	f7f9 f98c 	bl	8000214 <__adddf3>
 8006efc:	4622      	mov	r2, r4
 8006efe:	462b      	mov	r3, r5
 8006f00:	f7f9 fb3e 	bl	8000580 <__aeabi_dmul>
 8006f04:	a378      	add	r3, pc, #480	; (adr r3, 80070e8 <__ieee754_pow+0x718>)
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f7f9 f983 	bl	8000214 <__adddf3>
 8006f0e:	4622      	mov	r2, r4
 8006f10:	462b      	mov	r3, r5
 8006f12:	f7f9 fb35 	bl	8000580 <__aeabi_dmul>
 8006f16:	a376      	add	r3, pc, #472	; (adr r3, 80070f0 <__ieee754_pow+0x720>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 f97a 	bl	8000214 <__adddf3>
 8006f20:	4622      	mov	r2, r4
 8006f22:	462b      	mov	r3, r5
 8006f24:	f7f9 fb2c 	bl	8000580 <__aeabi_dmul>
 8006f28:	a373      	add	r3, pc, #460	; (adr r3, 80070f8 <__ieee754_pow+0x728>)
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	f7f9 f971 	bl	8000214 <__adddf3>
 8006f32:	4622      	mov	r2, r4
 8006f34:	462b      	mov	r3, r5
 8006f36:	f7f9 fb23 	bl	8000580 <__aeabi_dmul>
 8006f3a:	a371      	add	r3, pc, #452	; (adr r3, 8007100 <__ieee754_pow+0x730>)
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f7f9 f968 	bl	8000214 <__adddf3>
 8006f44:	4622      	mov	r2, r4
 8006f46:	4606      	mov	r6, r0
 8006f48:	460f      	mov	r7, r1
 8006f4a:	462b      	mov	r3, r5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fb16 	bl	8000580 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fb10 	bl	8000580 <__aeabi_dmul>
 8006f60:	4642      	mov	r2, r8
 8006f62:	4604      	mov	r4, r0
 8006f64:	460d      	mov	r5, r1
 8006f66:	464b      	mov	r3, r9
 8006f68:	ec51 0b18 	vmov	r0, r1, d8
 8006f6c:	f7f9 f952 	bl	8000214 <__adddf3>
 8006f70:	ec53 2b19 	vmov	r2, r3, d9
 8006f74:	f7f9 fb04 	bl	8000580 <__aeabi_dmul>
 8006f78:	4622      	mov	r2, r4
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	f7f9 f94a 	bl	8000214 <__adddf3>
 8006f80:	4642      	mov	r2, r8
 8006f82:	4682      	mov	sl, r0
 8006f84:	468b      	mov	fp, r1
 8006f86:	464b      	mov	r3, r9
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 faf8 	bl	8000580 <__aeabi_dmul>
 8006f90:	4b6b      	ldr	r3, [pc, #428]	; (8007140 <__ieee754_pow+0x770>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	f7f9 f93c 	bl	8000214 <__adddf3>
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	465b      	mov	r3, fp
 8006fa0:	f7f9 f938 	bl	8000214 <__adddf3>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f7f9 fae5 	bl	8000580 <__aeabi_dmul>
 8006fb6:	4b62      	ldr	r3, [pc, #392]	; (8007140 <__ieee754_pow+0x770>)
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4689      	mov	r9, r1
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 f925 	bl	8000210 <__aeabi_dsub>
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	463b      	mov	r3, r7
 8006fca:	f7f9 f921 	bl	8000210 <__aeabi_dsub>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	f7f9 f91b 	bl	8000210 <__aeabi_dsub>
 8006fda:	ec53 2b18 	vmov	r2, r3, d8
 8006fde:	f7f9 facf 	bl	8000580 <__aeabi_dmul>
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	460f      	mov	r7, r1
 8006fe8:	462b      	mov	r3, r5
 8006fea:	ec51 0b19 	vmov	r0, r1, d9
 8006fee:	f7f9 fac7 	bl	8000580 <__aeabi_dmul>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	f7f9 f90b 	bl	8000214 <__adddf3>
 8006ffe:	4606      	mov	r6, r0
 8007000:	460f      	mov	r7, r1
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 f903 	bl	8000214 <__adddf3>
 800700e:	a33e      	add	r3, pc, #248	; (adr r3, 8007108 <__ieee754_pow+0x738>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	2000      	movs	r0, #0
 8007016:	4604      	mov	r4, r0
 8007018:	460d      	mov	r5, r1
 800701a:	f7f9 fab1 	bl	8000580 <__aeabi_dmul>
 800701e:	4642      	mov	r2, r8
 8007020:	ec41 0b18 	vmov	d8, r0, r1
 8007024:	464b      	mov	r3, r9
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 f8f1 	bl	8000210 <__aeabi_dsub>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4630      	mov	r0, r6
 8007034:	4639      	mov	r1, r7
 8007036:	f7f9 f8eb 	bl	8000210 <__aeabi_dsub>
 800703a:	a335      	add	r3, pc, #212	; (adr r3, 8007110 <__ieee754_pow+0x740>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 fa9e 	bl	8000580 <__aeabi_dmul>
 8007044:	a334      	add	r3, pc, #208	; (adr r3, 8007118 <__ieee754_pow+0x748>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	4606      	mov	r6, r0
 800704c:	460f      	mov	r7, r1
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fa95 	bl	8000580 <__aeabi_dmul>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4630      	mov	r0, r6
 800705c:	4639      	mov	r1, r7
 800705e:	f7f9 f8d9 	bl	8000214 <__adddf3>
 8007062:	9a07      	ldr	r2, [sp, #28]
 8007064:	4b37      	ldr	r3, [pc, #220]	; (8007144 <__ieee754_pow+0x774>)
 8007066:	4413      	add	r3, r2
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	f7f9 f8d2 	bl	8000214 <__adddf3>
 8007070:	4682      	mov	sl, r0
 8007072:	9805      	ldr	r0, [sp, #20]
 8007074:	468b      	mov	fp, r1
 8007076:	f7f9 fa19 	bl	80004ac <__aeabi_i2d>
 800707a:	9a07      	ldr	r2, [sp, #28]
 800707c:	4b32      	ldr	r3, [pc, #200]	; (8007148 <__ieee754_pow+0x778>)
 800707e:	4413      	add	r3, r2
 8007080:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007084:	4606      	mov	r6, r0
 8007086:	460f      	mov	r7, r1
 8007088:	4652      	mov	r2, sl
 800708a:	465b      	mov	r3, fp
 800708c:	ec51 0b18 	vmov	r0, r1, d8
 8007090:	f7f9 f8c0 	bl	8000214 <__adddf3>
 8007094:	4642      	mov	r2, r8
 8007096:	464b      	mov	r3, r9
 8007098:	f7f9 f8bc 	bl	8000214 <__adddf3>
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	f7f9 f8b8 	bl	8000214 <__adddf3>
 80070a4:	2000      	movs	r0, #0
 80070a6:	4632      	mov	r2, r6
 80070a8:	463b      	mov	r3, r7
 80070aa:	4604      	mov	r4, r0
 80070ac:	460d      	mov	r5, r1
 80070ae:	f7f9 f8af 	bl	8000210 <__aeabi_dsub>
 80070b2:	4642      	mov	r2, r8
 80070b4:	464b      	mov	r3, r9
 80070b6:	f7f9 f8ab 	bl	8000210 <__aeabi_dsub>
 80070ba:	ec53 2b18 	vmov	r2, r3, d8
 80070be:	f7f9 f8a7 	bl	8000210 <__aeabi_dsub>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4650      	mov	r0, sl
 80070c8:	4659      	mov	r1, fp
 80070ca:	e610      	b.n	8006cee <__ieee754_pow+0x31e>
 80070cc:	2401      	movs	r4, #1
 80070ce:	e6a1      	b.n	8006e14 <__ieee754_pow+0x444>
 80070d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007120 <__ieee754_pow+0x750>
 80070d4:	e617      	b.n	8006d06 <__ieee754_pow+0x336>
 80070d6:	bf00      	nop
 80070d8:	4a454eef 	.word	0x4a454eef
 80070dc:	3fca7e28 	.word	0x3fca7e28
 80070e0:	93c9db65 	.word	0x93c9db65
 80070e4:	3fcd864a 	.word	0x3fcd864a
 80070e8:	a91d4101 	.word	0xa91d4101
 80070ec:	3fd17460 	.word	0x3fd17460
 80070f0:	518f264d 	.word	0x518f264d
 80070f4:	3fd55555 	.word	0x3fd55555
 80070f8:	db6fabff 	.word	0xdb6fabff
 80070fc:	3fdb6db6 	.word	0x3fdb6db6
 8007100:	33333303 	.word	0x33333303
 8007104:	3fe33333 	.word	0x3fe33333
 8007108:	e0000000 	.word	0xe0000000
 800710c:	3feec709 	.word	0x3feec709
 8007110:	dc3a03fd 	.word	0xdc3a03fd
 8007114:	3feec709 	.word	0x3feec709
 8007118:	145b01f5 	.word	0x145b01f5
 800711c:	be3e2fe0 	.word	0xbe3e2fe0
 8007120:	00000000 	.word	0x00000000
 8007124:	3ff00000 	.word	0x3ff00000
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	43400000 	.word	0x43400000
 8007130:	0003988e 	.word	0x0003988e
 8007134:	000bb679 	.word	0x000bb679
 8007138:	08007760 	.word	0x08007760
 800713c:	3ff00000 	.word	0x3ff00000
 8007140:	40080000 	.word	0x40080000
 8007144:	08007780 	.word	0x08007780
 8007148:	08007770 	.word	0x08007770
 800714c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007424 <__ieee754_pow+0xa54>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 f85d 	bl	8000214 <__adddf3>
 800715a:	4622      	mov	r2, r4
 800715c:	ec41 0b1a 	vmov	d10, r0, r1
 8007160:	462b      	mov	r3, r5
 8007162:	4630      	mov	r0, r6
 8007164:	4639      	mov	r1, r7
 8007166:	f7f9 f853 	bl	8000210 <__aeabi_dsub>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	ec51 0b1a 	vmov	r0, r1, d10
 8007172:	f7f9 fc95 	bl	8000aa0 <__aeabi_dcmpgt>
 8007176:	2800      	cmp	r0, #0
 8007178:	f47f ae04 	bne.w	8006d84 <__ieee754_pow+0x3b4>
 800717c:	4aa4      	ldr	r2, [pc, #656]	; (8007410 <__ieee754_pow+0xa40>)
 800717e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007182:	4293      	cmp	r3, r2
 8007184:	f340 8108 	ble.w	8007398 <__ieee754_pow+0x9c8>
 8007188:	151b      	asrs	r3, r3, #20
 800718a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800718e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007192:	fa4a f303 	asr.w	r3, sl, r3
 8007196:	445b      	add	r3, fp
 8007198:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800719c:	4e9d      	ldr	r6, [pc, #628]	; (8007414 <__ieee754_pow+0xa44>)
 800719e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80071a2:	4116      	asrs	r6, r2
 80071a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80071a8:	2000      	movs	r0, #0
 80071aa:	ea23 0106 	bic.w	r1, r3, r6
 80071ae:	f1c2 0214 	rsb	r2, r2, #20
 80071b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80071b6:	fa4a fa02 	asr.w	sl, sl, r2
 80071ba:	f1bb 0f00 	cmp.w	fp, #0
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	bfb8      	it	lt
 80071c8:	f1ca 0a00 	rsblt	sl, sl, #0
 80071cc:	f7f9 f820 	bl	8000210 <__aeabi_dsub>
 80071d0:	ec41 0b19 	vmov	d9, r0, r1
 80071d4:	4642      	mov	r2, r8
 80071d6:	464b      	mov	r3, r9
 80071d8:	ec51 0b19 	vmov	r0, r1, d9
 80071dc:	f7f9 f81a 	bl	8000214 <__adddf3>
 80071e0:	a37b      	add	r3, pc, #492	; (adr r3, 80073d0 <__ieee754_pow+0xa00>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	2000      	movs	r0, #0
 80071e8:	4604      	mov	r4, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	f7f9 f9c8 	bl	8000580 <__aeabi_dmul>
 80071f0:	ec53 2b19 	vmov	r2, r3, d9
 80071f4:	4606      	mov	r6, r0
 80071f6:	460f      	mov	r7, r1
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 f808 	bl	8000210 <__aeabi_dsub>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4640      	mov	r0, r8
 8007206:	4649      	mov	r1, r9
 8007208:	f7f9 f802 	bl	8000210 <__aeabi_dsub>
 800720c:	a372      	add	r3, pc, #456	; (adr r3, 80073d8 <__ieee754_pow+0xa08>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 f9b5 	bl	8000580 <__aeabi_dmul>
 8007216:	a372      	add	r3, pc, #456	; (adr r3, 80073e0 <__ieee754_pow+0xa10>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	4680      	mov	r8, r0
 800721e:	4689      	mov	r9, r1
 8007220:	4620      	mov	r0, r4
 8007222:	4629      	mov	r1, r5
 8007224:	f7f9 f9ac 	bl	8000580 <__aeabi_dmul>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4640      	mov	r0, r8
 800722e:	4649      	mov	r1, r9
 8007230:	f7f8 fff0 	bl	8000214 <__adddf3>
 8007234:	4604      	mov	r4, r0
 8007236:	460d      	mov	r5, r1
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f8 ffe8 	bl	8000214 <__adddf3>
 8007244:	4632      	mov	r2, r6
 8007246:	463b      	mov	r3, r7
 8007248:	4680      	mov	r8, r0
 800724a:	4689      	mov	r9, r1
 800724c:	f7f8 ffe0 	bl	8000210 <__aeabi_dsub>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4620      	mov	r0, r4
 8007256:	4629      	mov	r1, r5
 8007258:	f7f8 ffda 	bl	8000210 <__aeabi_dsub>
 800725c:	4642      	mov	r2, r8
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	464b      	mov	r3, r9
 8007264:	4640      	mov	r0, r8
 8007266:	4649      	mov	r1, r9
 8007268:	f7f9 f98a 	bl	8000580 <__aeabi_dmul>
 800726c:	a35e      	add	r3, pc, #376	; (adr r3, 80073e8 <__ieee754_pow+0xa18>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
 8007276:	f7f9 f983 	bl	8000580 <__aeabi_dmul>
 800727a:	a35d      	add	r3, pc, #372	; (adr r3, 80073f0 <__ieee754_pow+0xa20>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f8 ffc6 	bl	8000210 <__aeabi_dsub>
 8007284:	4622      	mov	r2, r4
 8007286:	462b      	mov	r3, r5
 8007288:	f7f9 f97a 	bl	8000580 <__aeabi_dmul>
 800728c:	a35a      	add	r3, pc, #360	; (adr r3, 80073f8 <__ieee754_pow+0xa28>)
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f7f8 ffbf 	bl	8000214 <__adddf3>
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	f7f9 f971 	bl	8000580 <__aeabi_dmul>
 800729e:	a358      	add	r3, pc, #352	; (adr r3, 8007400 <__ieee754_pow+0xa30>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f8 ffb4 	bl	8000210 <__aeabi_dsub>
 80072a8:	4622      	mov	r2, r4
 80072aa:	462b      	mov	r3, r5
 80072ac:	f7f9 f968 	bl	8000580 <__aeabi_dmul>
 80072b0:	a355      	add	r3, pc, #340	; (adr r3, 8007408 <__ieee754_pow+0xa38>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f8 ffad 	bl	8000214 <__adddf3>
 80072ba:	4622      	mov	r2, r4
 80072bc:	462b      	mov	r3, r5
 80072be:	f7f9 f95f 	bl	8000580 <__aeabi_dmul>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	f7f8 ffa1 	bl	8000210 <__aeabi_dsub>
 80072ce:	4604      	mov	r4, r0
 80072d0:	460d      	mov	r5, r1
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4640      	mov	r0, r8
 80072d8:	4649      	mov	r1, r9
 80072da:	f7f9 f951 	bl	8000580 <__aeabi_dmul>
 80072de:	2200      	movs	r2, #0
 80072e0:	ec41 0b19 	vmov	d9, r0, r1
 80072e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072e8:	4620      	mov	r0, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f8 ff90 	bl	8000210 <__aeabi_dsub>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	ec51 0b19 	vmov	r0, r1, d9
 80072f8:	f7f9 fa6c 	bl	80007d4 <__aeabi_ddiv>
 80072fc:	4632      	mov	r2, r6
 80072fe:	4604      	mov	r4, r0
 8007300:	460d      	mov	r5, r1
 8007302:	463b      	mov	r3, r7
 8007304:	4640      	mov	r0, r8
 8007306:	4649      	mov	r1, r9
 8007308:	f7f9 f93a 	bl	8000580 <__aeabi_dmul>
 800730c:	4632      	mov	r2, r6
 800730e:	463b      	mov	r3, r7
 8007310:	f7f8 ff80 	bl	8000214 <__adddf3>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4620      	mov	r0, r4
 800731a:	4629      	mov	r1, r5
 800731c:	f7f8 ff78 	bl	8000210 <__aeabi_dsub>
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	f7f8 ff74 	bl	8000210 <__aeabi_dsub>
 8007328:	460b      	mov	r3, r1
 800732a:	4602      	mov	r2, r0
 800732c:	493a      	ldr	r1, [pc, #232]	; (8007418 <__ieee754_pow+0xa48>)
 800732e:	2000      	movs	r0, #0
 8007330:	f7f8 ff6e 	bl	8000210 <__aeabi_dsub>
 8007334:	ec41 0b10 	vmov	d0, r0, r1
 8007338:	ee10 3a90 	vmov	r3, s1
 800733c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007344:	da2b      	bge.n	800739e <__ieee754_pow+0x9ce>
 8007346:	4650      	mov	r0, sl
 8007348:	f000 f966 	bl	8007618 <scalbn>
 800734c:	ec51 0b10 	vmov	r0, r1, d0
 8007350:	ec53 2b18 	vmov	r2, r3, d8
 8007354:	f7ff bbed 	b.w	8006b32 <__ieee754_pow+0x162>
 8007358:	4b30      	ldr	r3, [pc, #192]	; (800741c <__ieee754_pow+0xa4c>)
 800735a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800735e:	429e      	cmp	r6, r3
 8007360:	f77f af0c 	ble.w	800717c <__ieee754_pow+0x7ac>
 8007364:	4b2e      	ldr	r3, [pc, #184]	; (8007420 <__ieee754_pow+0xa50>)
 8007366:	440b      	add	r3, r1
 8007368:	4303      	orrs	r3, r0
 800736a:	d009      	beq.n	8007380 <__ieee754_pow+0x9b0>
 800736c:	ec51 0b18 	vmov	r0, r1, d8
 8007370:	2200      	movs	r2, #0
 8007372:	2300      	movs	r3, #0
 8007374:	f7f9 fb76 	bl	8000a64 <__aeabi_dcmplt>
 8007378:	3800      	subs	r0, #0
 800737a:	bf18      	it	ne
 800737c:	2001      	movne	r0, #1
 800737e:	e447      	b.n	8006c10 <__ieee754_pow+0x240>
 8007380:	4622      	mov	r2, r4
 8007382:	462b      	mov	r3, r5
 8007384:	f7f8 ff44 	bl	8000210 <__aeabi_dsub>
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	f7f9 fb7e 	bl	8000a8c <__aeabi_dcmpge>
 8007390:	2800      	cmp	r0, #0
 8007392:	f43f aef3 	beq.w	800717c <__ieee754_pow+0x7ac>
 8007396:	e7e9      	b.n	800736c <__ieee754_pow+0x99c>
 8007398:	f04f 0a00 	mov.w	sl, #0
 800739c:	e71a      	b.n	80071d4 <__ieee754_pow+0x804>
 800739e:	ec51 0b10 	vmov	r0, r1, d0
 80073a2:	4619      	mov	r1, r3
 80073a4:	e7d4      	b.n	8007350 <__ieee754_pow+0x980>
 80073a6:	491c      	ldr	r1, [pc, #112]	; (8007418 <__ieee754_pow+0xa48>)
 80073a8:	2000      	movs	r0, #0
 80073aa:	f7ff bb30 	b.w	8006a0e <__ieee754_pow+0x3e>
 80073ae:	2000      	movs	r0, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	f7ff bb2c 	b.w	8006a0e <__ieee754_pow+0x3e>
 80073b6:	4630      	mov	r0, r6
 80073b8:	4639      	mov	r1, r7
 80073ba:	f7ff bb28 	b.w	8006a0e <__ieee754_pow+0x3e>
 80073be:	9204      	str	r2, [sp, #16]
 80073c0:	f7ff bb7a 	b.w	8006ab8 <__ieee754_pow+0xe8>
 80073c4:	2300      	movs	r3, #0
 80073c6:	f7ff bb64 	b.w	8006a92 <__ieee754_pow+0xc2>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	00000000 	.word	0x00000000
 80073d4:	3fe62e43 	.word	0x3fe62e43
 80073d8:	fefa39ef 	.word	0xfefa39ef
 80073dc:	3fe62e42 	.word	0x3fe62e42
 80073e0:	0ca86c39 	.word	0x0ca86c39
 80073e4:	be205c61 	.word	0xbe205c61
 80073e8:	72bea4d0 	.word	0x72bea4d0
 80073ec:	3e663769 	.word	0x3e663769
 80073f0:	c5d26bf1 	.word	0xc5d26bf1
 80073f4:	3ebbbd41 	.word	0x3ebbbd41
 80073f8:	af25de2c 	.word	0xaf25de2c
 80073fc:	3f11566a 	.word	0x3f11566a
 8007400:	16bebd93 	.word	0x16bebd93
 8007404:	3f66c16c 	.word	0x3f66c16c
 8007408:	5555553e 	.word	0x5555553e
 800740c:	3fc55555 	.word	0x3fc55555
 8007410:	3fe00000 	.word	0x3fe00000
 8007414:	000fffff 	.word	0x000fffff
 8007418:	3ff00000 	.word	0x3ff00000
 800741c:	4090cbff 	.word	0x4090cbff
 8007420:	3f6f3400 	.word	0x3f6f3400
 8007424:	652b82fe 	.word	0x652b82fe
 8007428:	3c971547 	.word	0x3c971547

0800742c <__ieee754_sqrt>:
 800742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007430:	ec55 4b10 	vmov	r4, r5, d0
 8007434:	4e55      	ldr	r6, [pc, #340]	; (800758c <__ieee754_sqrt+0x160>)
 8007436:	43ae      	bics	r6, r5
 8007438:	ee10 0a10 	vmov	r0, s0
 800743c:	ee10 3a10 	vmov	r3, s0
 8007440:	462a      	mov	r2, r5
 8007442:	4629      	mov	r1, r5
 8007444:	d110      	bne.n	8007468 <__ieee754_sqrt+0x3c>
 8007446:	ee10 2a10 	vmov	r2, s0
 800744a:	462b      	mov	r3, r5
 800744c:	f7f9 f898 	bl	8000580 <__aeabi_dmul>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4620      	mov	r0, r4
 8007456:	4629      	mov	r1, r5
 8007458:	f7f8 fedc 	bl	8000214 <__adddf3>
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	ec45 4b10 	vmov	d0, r4, r5
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007468:	2d00      	cmp	r5, #0
 800746a:	dc10      	bgt.n	800748e <__ieee754_sqrt+0x62>
 800746c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007470:	4330      	orrs	r0, r6
 8007472:	d0f5      	beq.n	8007460 <__ieee754_sqrt+0x34>
 8007474:	b15d      	cbz	r5, 800748e <__ieee754_sqrt+0x62>
 8007476:	ee10 2a10 	vmov	r2, s0
 800747a:	462b      	mov	r3, r5
 800747c:	ee10 0a10 	vmov	r0, s0
 8007480:	f7f8 fec6 	bl	8000210 <__aeabi_dsub>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	f7f9 f9a4 	bl	80007d4 <__aeabi_ddiv>
 800748c:	e7e6      	b.n	800745c <__ieee754_sqrt+0x30>
 800748e:	1512      	asrs	r2, r2, #20
 8007490:	d074      	beq.n	800757c <__ieee754_sqrt+0x150>
 8007492:	07d4      	lsls	r4, r2, #31
 8007494:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007498:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800749c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074a0:	bf5e      	ittt	pl
 80074a2:	0fda      	lsrpl	r2, r3, #31
 80074a4:	005b      	lslpl	r3, r3, #1
 80074a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80074aa:	2400      	movs	r4, #0
 80074ac:	0fda      	lsrs	r2, r3, #31
 80074ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80074b2:	107f      	asrs	r7, r7, #1
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	2516      	movs	r5, #22
 80074b8:	4620      	mov	r0, r4
 80074ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80074be:	1886      	adds	r6, r0, r2
 80074c0:	428e      	cmp	r6, r1
 80074c2:	bfde      	ittt	le
 80074c4:	1b89      	suble	r1, r1, r6
 80074c6:	18b0      	addle	r0, r6, r2
 80074c8:	18a4      	addle	r4, r4, r2
 80074ca:	0049      	lsls	r1, r1, #1
 80074cc:	3d01      	subs	r5, #1
 80074ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80074d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80074d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074da:	d1f0      	bne.n	80074be <__ieee754_sqrt+0x92>
 80074dc:	462a      	mov	r2, r5
 80074de:	f04f 0e20 	mov.w	lr, #32
 80074e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80074e6:	4281      	cmp	r1, r0
 80074e8:	eb06 0c05 	add.w	ip, r6, r5
 80074ec:	dc02      	bgt.n	80074f4 <__ieee754_sqrt+0xc8>
 80074ee:	d113      	bne.n	8007518 <__ieee754_sqrt+0xec>
 80074f0:	459c      	cmp	ip, r3
 80074f2:	d811      	bhi.n	8007518 <__ieee754_sqrt+0xec>
 80074f4:	f1bc 0f00 	cmp.w	ip, #0
 80074f8:	eb0c 0506 	add.w	r5, ip, r6
 80074fc:	da43      	bge.n	8007586 <__ieee754_sqrt+0x15a>
 80074fe:	2d00      	cmp	r5, #0
 8007500:	db41      	blt.n	8007586 <__ieee754_sqrt+0x15a>
 8007502:	f100 0801 	add.w	r8, r0, #1
 8007506:	1a09      	subs	r1, r1, r0
 8007508:	459c      	cmp	ip, r3
 800750a:	bf88      	it	hi
 800750c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007510:	eba3 030c 	sub.w	r3, r3, ip
 8007514:	4432      	add	r2, r6
 8007516:	4640      	mov	r0, r8
 8007518:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800751c:	f1be 0e01 	subs.w	lr, lr, #1
 8007520:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007524:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007528:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800752c:	d1db      	bne.n	80074e6 <__ieee754_sqrt+0xba>
 800752e:	430b      	orrs	r3, r1
 8007530:	d006      	beq.n	8007540 <__ieee754_sqrt+0x114>
 8007532:	1c50      	adds	r0, r2, #1
 8007534:	bf13      	iteet	ne
 8007536:	3201      	addne	r2, #1
 8007538:	3401      	addeq	r4, #1
 800753a:	4672      	moveq	r2, lr
 800753c:	f022 0201 	bicne.w	r2, r2, #1
 8007540:	1063      	asrs	r3, r4, #1
 8007542:	0852      	lsrs	r2, r2, #1
 8007544:	07e1      	lsls	r1, r4, #31
 8007546:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800754a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800754e:	bf48      	it	mi
 8007550:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007554:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007558:	4614      	mov	r4, r2
 800755a:	e781      	b.n	8007460 <__ieee754_sqrt+0x34>
 800755c:	0ad9      	lsrs	r1, r3, #11
 800755e:	3815      	subs	r0, #21
 8007560:	055b      	lsls	r3, r3, #21
 8007562:	2900      	cmp	r1, #0
 8007564:	d0fa      	beq.n	800755c <__ieee754_sqrt+0x130>
 8007566:	02cd      	lsls	r5, r1, #11
 8007568:	d50a      	bpl.n	8007580 <__ieee754_sqrt+0x154>
 800756a:	f1c2 0420 	rsb	r4, r2, #32
 800756e:	fa23 f404 	lsr.w	r4, r3, r4
 8007572:	1e55      	subs	r5, r2, #1
 8007574:	4093      	lsls	r3, r2
 8007576:	4321      	orrs	r1, r4
 8007578:	1b42      	subs	r2, r0, r5
 800757a:	e78a      	b.n	8007492 <__ieee754_sqrt+0x66>
 800757c:	4610      	mov	r0, r2
 800757e:	e7f0      	b.n	8007562 <__ieee754_sqrt+0x136>
 8007580:	0049      	lsls	r1, r1, #1
 8007582:	3201      	adds	r2, #1
 8007584:	e7ef      	b.n	8007566 <__ieee754_sqrt+0x13a>
 8007586:	4680      	mov	r8, r0
 8007588:	e7bd      	b.n	8007506 <__ieee754_sqrt+0xda>
 800758a:	bf00      	nop
 800758c:	7ff00000 	.word	0x7ff00000

08007590 <with_errno>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	4604      	mov	r4, r0
 8007594:	460d      	mov	r5, r1
 8007596:	4616      	mov	r6, r2
 8007598:	f7ff f976 	bl	8006888 <__errno>
 800759c:	4629      	mov	r1, r5
 800759e:	6006      	str	r6, [r0, #0]
 80075a0:	4620      	mov	r0, r4
 80075a2:	bd70      	pop	{r4, r5, r6, pc}

080075a4 <xflow>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	4614      	mov	r4, r2
 80075a8:	461d      	mov	r5, r3
 80075aa:	b108      	cbz	r0, 80075b0 <xflow+0xc>
 80075ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075b0:	e9cd 2300 	strd	r2, r3, [sp]
 80075b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075b8:	4620      	mov	r0, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	f7f8 ffe0 	bl	8000580 <__aeabi_dmul>
 80075c0:	2222      	movs	r2, #34	; 0x22
 80075c2:	b003      	add	sp, #12
 80075c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075c8:	f7ff bfe2 	b.w	8007590 <with_errno>

080075cc <__math_uflow>:
 80075cc:	b508      	push	{r3, lr}
 80075ce:	2200      	movs	r2, #0
 80075d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075d4:	f7ff ffe6 	bl	80075a4 <xflow>
 80075d8:	ec41 0b10 	vmov	d0, r0, r1
 80075dc:	bd08      	pop	{r3, pc}

080075de <__math_oflow>:
 80075de:	b508      	push	{r3, lr}
 80075e0:	2200      	movs	r2, #0
 80075e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80075e6:	f7ff ffdd 	bl	80075a4 <xflow>
 80075ea:	ec41 0b10 	vmov	d0, r0, r1
 80075ee:	bd08      	pop	{r3, pc}

080075f0 <fabs>:
 80075f0:	ec51 0b10 	vmov	r0, r1, d0
 80075f4:	ee10 2a10 	vmov	r2, s0
 80075f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075fc:	ec43 2b10 	vmov	d0, r2, r3
 8007600:	4770      	bx	lr

08007602 <finite>:
 8007602:	b082      	sub	sp, #8
 8007604:	ed8d 0b00 	vstr	d0, [sp]
 8007608:	9801      	ldr	r0, [sp, #4]
 800760a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800760e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007612:	0fc0      	lsrs	r0, r0, #31
 8007614:	b002      	add	sp, #8
 8007616:	4770      	bx	lr

08007618 <scalbn>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	ec55 4b10 	vmov	r4, r5, d0
 800761e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007622:	4606      	mov	r6, r0
 8007624:	462b      	mov	r3, r5
 8007626:	b99a      	cbnz	r2, 8007650 <scalbn+0x38>
 8007628:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800762c:	4323      	orrs	r3, r4
 800762e:	d036      	beq.n	800769e <scalbn+0x86>
 8007630:	4b39      	ldr	r3, [pc, #228]	; (8007718 <scalbn+0x100>)
 8007632:	4629      	mov	r1, r5
 8007634:	ee10 0a10 	vmov	r0, s0
 8007638:	2200      	movs	r2, #0
 800763a:	f7f8 ffa1 	bl	8000580 <__aeabi_dmul>
 800763e:	4b37      	ldr	r3, [pc, #220]	; (800771c <scalbn+0x104>)
 8007640:	429e      	cmp	r6, r3
 8007642:	4604      	mov	r4, r0
 8007644:	460d      	mov	r5, r1
 8007646:	da10      	bge.n	800766a <scalbn+0x52>
 8007648:	a32b      	add	r3, pc, #172	; (adr r3, 80076f8 <scalbn+0xe0>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	e03a      	b.n	80076c6 <scalbn+0xae>
 8007650:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007654:	428a      	cmp	r2, r1
 8007656:	d10c      	bne.n	8007672 <scalbn+0x5a>
 8007658:	ee10 2a10 	vmov	r2, s0
 800765c:	4620      	mov	r0, r4
 800765e:	4629      	mov	r1, r5
 8007660:	f7f8 fdd8 	bl	8000214 <__adddf3>
 8007664:	4604      	mov	r4, r0
 8007666:	460d      	mov	r5, r1
 8007668:	e019      	b.n	800769e <scalbn+0x86>
 800766a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800766e:	460b      	mov	r3, r1
 8007670:	3a36      	subs	r2, #54	; 0x36
 8007672:	4432      	add	r2, r6
 8007674:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007678:	428a      	cmp	r2, r1
 800767a:	dd08      	ble.n	800768e <scalbn+0x76>
 800767c:	2d00      	cmp	r5, #0
 800767e:	a120      	add	r1, pc, #128	; (adr r1, 8007700 <scalbn+0xe8>)
 8007680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007684:	da1c      	bge.n	80076c0 <scalbn+0xa8>
 8007686:	a120      	add	r1, pc, #128	; (adr r1, 8007708 <scalbn+0xf0>)
 8007688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800768c:	e018      	b.n	80076c0 <scalbn+0xa8>
 800768e:	2a00      	cmp	r2, #0
 8007690:	dd08      	ble.n	80076a4 <scalbn+0x8c>
 8007692:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007696:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800769a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800769e:	ec45 4b10 	vmov	d0, r4, r5
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80076a8:	da19      	bge.n	80076de <scalbn+0xc6>
 80076aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076ae:	429e      	cmp	r6, r3
 80076b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80076b4:	dd0a      	ble.n	80076cc <scalbn+0xb4>
 80076b6:	a112      	add	r1, pc, #72	; (adr r1, 8007700 <scalbn+0xe8>)
 80076b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e2      	bne.n	8007686 <scalbn+0x6e>
 80076c0:	a30f      	add	r3, pc, #60	; (adr r3, 8007700 <scalbn+0xe8>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 ff5b 	bl	8000580 <__aeabi_dmul>
 80076ca:	e7cb      	b.n	8007664 <scalbn+0x4c>
 80076cc:	a10a      	add	r1, pc, #40	; (adr r1, 80076f8 <scalbn+0xe0>)
 80076ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0b8      	beq.n	8007648 <scalbn+0x30>
 80076d6:	a10e      	add	r1, pc, #56	; (adr r1, 8007710 <scalbn+0xf8>)
 80076d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076dc:	e7b4      	b.n	8007648 <scalbn+0x30>
 80076de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076e2:	3236      	adds	r2, #54	; 0x36
 80076e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80076ec:	4620      	mov	r0, r4
 80076ee:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <scalbn+0x108>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	e7e8      	b.n	80076c6 <scalbn+0xae>
 80076f4:	f3af 8000 	nop.w
 80076f8:	c2f8f359 	.word	0xc2f8f359
 80076fc:	01a56e1f 	.word	0x01a56e1f
 8007700:	8800759c 	.word	0x8800759c
 8007704:	7e37e43c 	.word	0x7e37e43c
 8007708:	8800759c 	.word	0x8800759c
 800770c:	fe37e43c 	.word	0xfe37e43c
 8007710:	c2f8f359 	.word	0xc2f8f359
 8007714:	81a56e1f 	.word	0x81a56e1f
 8007718:	43500000 	.word	0x43500000
 800771c:	ffff3cb0 	.word	0xffff3cb0
 8007720:	3c900000 	.word	0x3c900000

08007724 <_init>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr

08007730 <_fini>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr
