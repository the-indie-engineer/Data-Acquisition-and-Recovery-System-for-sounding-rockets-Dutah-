
Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800257c  0800257c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800257c  0800257c  0001257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002584  08002584  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800258c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002598  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002598  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089a9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001610  00000000  00000000  000289e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00029ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b24  00000000  00000000  0002ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009344  00000000  00000000  0004b864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c729c  00000000  00000000  00054ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011be44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001af4  00000000  00000000  0011be94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800254c 	.word	0x0800254c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800254c 	.word	0x0800254c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <seq_check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void seq_check()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)== 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8)== 0) seq_flag = 1;
 800050c:	2108      	movs	r1, #8
 800050e:	4817      	ldr	r0, [pc, #92]	; (800056c <seq_check+0x64>)
 8000510:	f000 fdc4 	bl	800109c <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d113      	bne.n	8000542 <seq_check+0x3a>
 800051a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051e:	4813      	ldr	r0, [pc, #76]	; (800056c <seq_check+0x64>)
 8000520:	f000 fdbc 	bl	800109c <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10b      	bne.n	8000542 <seq_check+0x3a>
 800052a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052e:	480f      	ldr	r0, [pc, #60]	; (800056c <seq_check+0x64>)
 8000530:	f000 fdb4 	bl	800109c <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d103      	bne.n	8000542 <seq_check+0x3a>
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <seq_check+0x68>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
	else if(Sec_key==0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)==1) seq_flag=0;
}
 8000540:	e011      	b.n	8000566 <seq_check+0x5e>
	else if(Sec_key==0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)==1) seq_flag=0;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <seq_check+0x6c>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f083 0301 	eor.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00a      	beq.n	8000566 <seq_check+0x5e>
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <seq_check+0x64>)
 8000556:	f000 fda1 	bl	800109c <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d102      	bne.n	8000566 <seq_check+0x5e>
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <seq_check+0x68>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40020800 	.word	0x40020800
 8000570:	2000006e 	.word	0x2000006e
 8000574:	2000006c 	.word	0x2000006c

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fa7e 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f8a6 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f940 	bl	8000808 <MX_GPIO_Init>
  MX_UART4_Init();
 8000588:	f000 f914 	bl	80007b4 <MX_UART4_Init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		seq_check();
 800058c:	f7ff ffbc 	bl	8000508 <seq_check>
		if(seq_flag ==1){
 8000590:	4b48      	ldr	r3, [pc, #288]	; (80006b4 <main+0x13c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f9      	beq.n	800058c <main+0x14>

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 1 || Sec_key == 1)
 8000598:	2108      	movs	r1, #8
 800059a:	4847      	ldr	r0, [pc, #284]	; (80006b8 <main+0x140>)
 800059c:	f000 fd7e 	bl	800109c <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d003      	beq.n	80005ae <main+0x36>
 80005a6:	4b45      	ldr	r3, [pc, #276]	; (80006bc <main+0x144>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0ee      	beq.n	800058c <main+0x14>
			{
				Sec_key=1;
 80005ae:	4b43      	ldr	r3, [pc, #268]	; (80006bc <main+0x144>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]

				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0 && Arm_switch == 0  ) {
 80005b4:	2108      	movs	r1, #8
 80005b6:	4840      	ldr	r0, [pc, #256]	; (80006b8 <main+0x140>)
 80005b8:	f000 fd70 	bl	800109c <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d113      	bne.n	80005ea <main+0x72>
 80005c2:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <main+0x148>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	f083 0301 	eor.w	r3, r3, #1
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00c      	beq.n	80005ea <main+0x72>
					Sec_key = 0; // Notify the user to reset the inputs
 80005d0:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <main+0x144>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
					seq_flag = 0;
 80005d6:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <main+0x13c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
					Arm_switch = 0;
 80005dc:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <main+0x148>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
					Ign_switch = 0;
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <main+0x14c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e063      	b.n	80006b2 <main+0x13a>
				}

				else{
					if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)== 1 || Arm_switch == 1 ){
 80005ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ee:	4832      	ldr	r0, [pc, #200]	; (80006b8 <main+0x140>)
 80005f0:	f000 fd54 	bl	800109c <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d003      	beq.n	8000602 <main+0x8a>
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <main+0x148>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0c4      	beq.n	800058c <main+0x14>
						Arm_switch = 1;
 8000602:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <main+0x148>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]

						if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 0) Arm_switch = 0;
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	482a      	ldr	r0, [pc, #168]	; (80006b8 <main+0x140>)
 800060e:	f000 fd45 	bl	800109c <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <main+0xa6>
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <main+0x148>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]


						if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1 || Ign_switch == 1 ){
 800061e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000622:	4825      	ldr	r0, [pc, #148]	; (80006b8 <main+0x140>)
 8000624:	f000 fd3a 	bl	800109c <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d003      	beq.n	8000636 <main+0xbe>
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <main+0x14c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0aa      	beq.n	800058c <main+0x14>
							HAL_Delay(5000);
 8000636:	f241 3088 	movw	r0, #5000	; 0x1388
 800063a:	f000 fa91 	bl	8000b60 <HAL_Delay>
							if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) {
 800063e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <main+0x140>)
 8000644:	f000 fd2a 	bl	800109c <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d128      	bne.n	80006a0 <main+0x128>
								Ign_switch = 1;
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <main+0x14c>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
								tx_data = 1;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0x150>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart4, tx_data, 1, 100);
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <main+0x150>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2201      	movs	r2, #1
 8000664:	4819      	ldr	r0, [pc, #100]	; (80006cc <main+0x154>)
 8000666:	f001 fbd0 	bl	8001e0a <HAL_UART_Transmit>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4811      	ldr	r0, [pc, #68]	; (80006b8 <main+0x140>)
 8000672:	f000 fd2b 	bl	80010cc <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 8000676:	2201      	movs	r2, #1
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <main+0x140>)
 800067c:	f000 fd26 	bl	80010cc <HAL_GPIO_WritePin>
								HAL_Delay(2000);
 8000680:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000684:	f000 fa6c 	bl	8000b60 <HAL_Delay>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8000688:	2200      	movs	r2, #0
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <main+0x140>)
 800068e:	f000 fd1d 	bl	80010cc <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <main+0x140>)
 800069a:	f000 fd17 	bl	80010cc <HAL_GPIO_WritePin>
 800069e:	e775      	b.n	800058c <main+0x14>
							}
							else
							{
								Sec_key=0;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <main+0x144>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
								Arm_switch = 0;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <main+0x148>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
								seq_flag = 0;
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <main+0x13c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
		seq_check();
 80006b2:	e76b      	b.n	800058c <main+0x14>
 80006b4:	2000006e 	.word	0x2000006e
 80006b8:	40020800 	.word	0x40020800
 80006bc:	2000006c 	.word	0x2000006c
 80006c0:	2000006d 	.word	0x2000006d
 80006c4:	2000006f 	.word	0x2000006f
 80006c8:	20000070 	.word	0x20000070
 80006cc:	20000028 	.word	0x20000028

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 ff2c 	bl	800253c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <SystemClock_Config+0xdc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <SystemClock_Config+0xdc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemClock_Config+0xe0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <SystemClock_Config+0xe0>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000744:	23b4      	movs	r3, #180	; 0xb4
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f86b 	bl	8001834 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 f8ae 	bl	80008c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000768:	f000 fcca 	bl	8001100 <HAL_PWREx_EnableOverDrive>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000772:	f000 f8a7 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2105      	movs	r1, #5
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fd03 	bl	80011a0 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a0:	f000 f890 	bl	80008c4 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	; 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_UART4_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_UART4_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_UART4_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_UART4_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_UART4_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_UART4_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_UART4_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_UART4_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_UART4_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_UART4_Init+0x4c>)
 80007ec:	f001 fac0 	bl	8001d70 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f865 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000028 	.word	0x20000028
 8000804:	40004c00 	.word	0x40004c00

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_GPIO_Init+0xb4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0xb4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <MX_GPIO_Init+0xb8>)
 8000878:	f000 fc28 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Sec_Key_Pin Launch_Pin ARM_Switch_Pin */
  GPIO_InitStruct.Pin = Sec_Key_Pin|Launch_Pin|ARM_Switch_Pin;
 800087c:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8000880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0xb8>)
 8000892:	f000 fa6f 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xb8>)
 80008ae:	f000 fa61 	bl	8000d74 <HAL_GPIO_Init>

}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800090e:	2007      	movs	r0, #7
 8000910:	f000 f9fc 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12b      	bne.n	800099a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x88>)
 800094c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800097a:	2303      	movs	r3, #3
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800098a:	2308      	movs	r3, #8
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_UART_MspInit+0x8c>)
 8000996:	f000 f9ed 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004c00 	.word	0x40004c00
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f890 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a52:	f7ff ffd7 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f001 fd4d 	bl	80024f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd8d 	bl	8000578 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a6c:	0800258c 	.word	0x0800258c
  ldr r2, =_sbss
 8000a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a74:	20000078 	.word	0x20000078

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_Init+0x40>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_Init+0x40>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x40>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f931 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff ff0e 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f93b 	bl	8000d5a <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f911 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000074 	.word	0x20000074

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000074 	.word	0x20000074

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff ffee 	bl	8000b48 <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffde 	bl	8000b48 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff5c 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffb0 	bl	8000cc8 <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e165      	b.n	800105c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8154 	bne.w	8001056 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80ae 	beq.w	8001056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a5c      	ldr	r2, [pc, #368]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a58      	ldr	r2, [pc, #352]	; (8001078 <HAL_GPIO_Init+0x304>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <HAL_GPIO_Init+0x308>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d025      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01f      	beq.n	8000f8a <HAL_GPIO_Init+0x216>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	; (8001088 <HAL_GPIO_Init+0x314>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x20e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	; (800108c <HAL_GPIO_Init+0x318>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x20a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x31c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a49      	ldr	r2, [pc, #292]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x202>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00c      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	; (8001078 <HAL_GPIO_Init+0x304>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_GPIO_Init+0x324>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <HAL_GPIO_Init+0x324>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_GPIO_Init+0x324>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_GPIO_Init+0x324>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f ae96 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40021400 	.word	0x40021400
 8001094:	40021800 	.word	0x40021800
 8001098:	40013c00 	.word	0x40013c00

0800109c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e001      	b.n	80010be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_PWREx_EnableOverDrive+0x90>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_PWREx_EnableOverDrive+0x90>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_PWREx_EnableOverDrive+0x90>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_PWREx_EnableOverDrive+0x94>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff fd0c 	bl	8000b48 <HAL_GetTick>
 8001130:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001132:	e009      	b.n	8001148 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001134:	f7ff fd08 	bl	8000b48 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001142:	d901      	bls.n	8001148 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e01f      	b.n	8001188 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_PWREx_EnableOverDrive+0x98>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d1ee      	bne.n	8001134 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff fcf4 	bl	8000b48 <HAL_GetTick>
 8001160:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001162:	e009      	b.n	8001178 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001164:	f7ff fcf0 	bl	8000b48 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001172:	d901      	bls.n	8001178 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e007      	b.n	8001188 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_PWREx_EnableOverDrive+0x98>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001184:	d1ee      	bne.n	8001164 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	420e0040 	.word	0x420e0040
 8001198:	40007000 	.word	0x40007000
 800119c:	420e0044 	.word	0x420e0044

080011a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e0cc      	b.n	800134e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011b4:	4b68      	ldr	r3, [pc, #416]	; (8001358 <HAL_RCC_ClockConfig+0x1b8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d90c      	bls.n	80011dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	4b65      	ldr	r3, [pc, #404]	; (8001358 <HAL_RCC_ClockConfig+0x1b8>)
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b63      	ldr	r3, [pc, #396]	; (8001358 <HAL_RCC_ClockConfig+0x1b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0b8      	b.n	800134e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	4a58      	ldr	r2, [pc, #352]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	494d      	ldr	r1, [pc, #308]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d044      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d119      	bne.n	800127e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e07f      	b.n	800134e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d003      	beq.n	800125e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800125a:	2b03      	cmp	r3, #3
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d109      	bne.n	800127e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e06f      	b.n	800134e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e067      	b.n	800134e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f023 0203 	bic.w	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4934      	ldr	r1, [pc, #208]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	4313      	orrs	r3, r2
 800128e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001290:	f7ff fc5a 	bl	8000b48 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	e00a      	b.n	80012ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001298:	f7ff fc56 	bl	8000b48 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e04f      	b.n	800134e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 020c 	and.w	r2, r3, #12
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	429a      	cmp	r2, r3
 80012be:	d1eb      	bne.n	8001298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <HAL_RCC_ClockConfig+0x1b8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d20c      	bcs.n	80012e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <HAL_RCC_ClockConfig+0x1b8>)
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_RCC_ClockConfig+0x1b8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e032      	b.n	800134e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4916      	ldr	r1, [pc, #88]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	490e      	ldr	r1, [pc, #56]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001326:	f000 f855 	bl	80013d4 <HAL_RCC_GetSysClockFreq>
 800132a:	4602      	mov	r2, r0
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	5ccb      	ldrb	r3, [r1, r3]
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_ClockConfig+0x1c8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fbba 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023c00 	.word	0x40023c00
 800135c:	40023800 	.word	0x40023800
 8001360:	08002564 	.word	0x08002564
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_RCC_GetHCLKFreq+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000

08001384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001388:	f7ff fff0 	bl	800136c <HAL_RCC_GetHCLKFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	0a9b      	lsrs	r3, r3, #10
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	4903      	ldr	r1, [pc, #12]	; (80013a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	08002574 	.word	0x08002574

080013ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013b0:	f7ff ffdc 	bl	800136c <HAL_RCC_GetHCLKFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	0b5b      	lsrs	r3, r3, #13
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	08002574 	.word	0x08002574

080013d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d8:	b0ae      	sub	sp, #184	; 0xb8
 80013da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013fa:	4bcb      	ldr	r3, [pc, #812]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b0c      	cmp	r3, #12
 8001404:	f200 8206 	bhi.w	8001814 <HAL_RCC_GetSysClockFreq+0x440>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <HAL_RCC_GetSysClockFreq+0x3c>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	08001445 	.word	0x08001445
 8001414:	08001815 	.word	0x08001815
 8001418:	08001815 	.word	0x08001815
 800141c:	08001815 	.word	0x08001815
 8001420:	0800144d 	.word	0x0800144d
 8001424:	08001815 	.word	0x08001815
 8001428:	08001815 	.word	0x08001815
 800142c:	08001815 	.word	0x08001815
 8001430:	08001455 	.word	0x08001455
 8001434:	08001815 	.word	0x08001815
 8001438:	08001815 	.word	0x08001815
 800143c:	08001815 	.word	0x08001815
 8001440:	08001645 	.word	0x08001645
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001444:	4bb9      	ldr	r3, [pc, #740]	; (800172c <HAL_RCC_GetSysClockFreq+0x358>)
 8001446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800144a:	e1e7      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800144c:	4bb8      	ldr	r3, [pc, #736]	; (8001730 <HAL_RCC_GetSysClockFreq+0x35c>)
 800144e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001452:	e1e3      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001454:	4bb4      	ldr	r3, [pc, #720]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800145c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001460:	4bb1      	ldr	r3, [pc, #708]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d071      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146c:	4bae      	ldr	r3, [pc, #696]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	099b      	lsrs	r3, r3, #6
 8001472:	2200      	movs	r2, #0
 8001474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001478:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800147c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800148e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001492:	4622      	mov	r2, r4
 8001494:	462b      	mov	r3, r5
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	0159      	lsls	r1, r3, #5
 80014a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014a4:	0150      	lsls	r0, r2, #5
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4621      	mov	r1, r4
 80014ac:	1a51      	subs	r1, r2, r1
 80014ae:	6439      	str	r1, [r7, #64]	; 0x40
 80014b0:	4629      	mov	r1, r5
 80014b2:	eb63 0301 	sbc.w	r3, r3, r1
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014c4:	4649      	mov	r1, r9
 80014c6:	018b      	lsls	r3, r1, #6
 80014c8:	4641      	mov	r1, r8
 80014ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ce:	4641      	mov	r1, r8
 80014d0:	018a      	lsls	r2, r1, #6
 80014d2:	4641      	mov	r1, r8
 80014d4:	1a51      	subs	r1, r2, r1
 80014d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80014d8:	4649      	mov	r1, r9
 80014da:	eb63 0301 	sbc.w	r3, r3, r1
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014ec:	4649      	mov	r1, r9
 80014ee:	00cb      	lsls	r3, r1, #3
 80014f0:	4641      	mov	r1, r8
 80014f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014f6:	4641      	mov	r1, r8
 80014f8:	00ca      	lsls	r2, r1, #3
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	4622      	mov	r2, r4
 8001502:	189b      	adds	r3, r3, r2
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
 8001506:	462b      	mov	r3, r5
 8001508:	460a      	mov	r2, r1
 800150a:	eb42 0303 	adc.w	r3, r2, r3
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800151c:	4629      	mov	r1, r5
 800151e:	024b      	lsls	r3, r1, #9
 8001520:	4621      	mov	r1, r4
 8001522:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001526:	4621      	mov	r1, r4
 8001528:	024a      	lsls	r2, r1, #9
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001532:	2200      	movs	r2, #0
 8001534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001538:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800153c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001540:	f7fe fe60 	bl	8000204 <__aeabi_uldivmod>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4613      	mov	r3, r2
 800154a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800154e:	e067      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001550:	4b75      	ldr	r3, [pc, #468]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	2200      	movs	r2, #0
 8001558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800155c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001568:	67bb      	str	r3, [r7, #120]	; 0x78
 800156a:	2300      	movs	r3, #0
 800156c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800156e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001572:	4622      	mov	r2, r4
 8001574:	462b      	mov	r3, r5
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	0159      	lsls	r1, r3, #5
 8001580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001584:	0150      	lsls	r0, r2, #5
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4621      	mov	r1, r4
 800158c:	1a51      	subs	r1, r2, r1
 800158e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001590:	4629      	mov	r1, r5
 8001592:	eb63 0301 	sbc.w	r3, r3, r1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015a4:	4649      	mov	r1, r9
 80015a6:	018b      	lsls	r3, r1, #6
 80015a8:	4641      	mov	r1, r8
 80015aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ae:	4641      	mov	r1, r8
 80015b0:	018a      	lsls	r2, r1, #6
 80015b2:	4641      	mov	r1, r8
 80015b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015b8:	4649      	mov	r1, r9
 80015ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015d2:	4692      	mov	sl, r2
 80015d4:	469b      	mov	fp, r3
 80015d6:	4623      	mov	r3, r4
 80015d8:	eb1a 0303 	adds.w	r3, sl, r3
 80015dc:	623b      	str	r3, [r7, #32]
 80015de:	462b      	mov	r3, r5
 80015e0:	eb4b 0303 	adc.w	r3, fp, r3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015f2:	4629      	mov	r1, r5
 80015f4:	028b      	lsls	r3, r1, #10
 80015f6:	4621      	mov	r1, r4
 80015f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015fc:	4621      	mov	r1, r4
 80015fe:	028a      	lsls	r2, r1, #10
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001608:	2200      	movs	r2, #0
 800160a:	673b      	str	r3, [r7, #112]	; 0x70
 800160c:	677a      	str	r2, [r7, #116]	; 0x74
 800160e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001612:	f7fe fdf7 	bl	8000204 <__aeabi_uldivmod>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4613      	mov	r3, r2
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001620:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	3301      	adds	r3, #1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001636:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001642:	e0eb      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800164c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001650:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d06b      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_RCC_GetSysClockFreq+0x354>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	2200      	movs	r2, #0
 8001664:	66bb      	str	r3, [r7, #104]	; 0x68
 8001666:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166e:	663b      	str	r3, [r7, #96]	; 0x60
 8001670:	2300      	movs	r3, #0
 8001672:	667b      	str	r3, [r7, #100]	; 0x64
 8001674:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001678:	4622      	mov	r2, r4
 800167a:	462b      	mov	r3, r5
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	0159      	lsls	r1, r3, #5
 8001686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800168a:	0150      	lsls	r0, r2, #5
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4621      	mov	r1, r4
 8001692:	1a51      	subs	r1, r2, r1
 8001694:	61b9      	str	r1, [r7, #24]
 8001696:	4629      	mov	r1, r5
 8001698:	eb63 0301 	sbc.w	r3, r3, r1
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016aa:	4659      	mov	r1, fp
 80016ac:	018b      	lsls	r3, r1, #6
 80016ae:	4651      	mov	r1, sl
 80016b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b4:	4651      	mov	r1, sl
 80016b6:	018a      	lsls	r2, r1, #6
 80016b8:	4651      	mov	r1, sl
 80016ba:	ebb2 0801 	subs.w	r8, r2, r1
 80016be:	4659      	mov	r1, fp
 80016c0:	eb63 0901 	sbc.w	r9, r3, r1
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d8:	4690      	mov	r8, r2
 80016da:	4699      	mov	r9, r3
 80016dc:	4623      	mov	r3, r4
 80016de:	eb18 0303 	adds.w	r3, r8, r3
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	462b      	mov	r3, r5
 80016e6:	eb49 0303 	adc.w	r3, r9, r3
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016f8:	4629      	mov	r1, r5
 80016fa:	024b      	lsls	r3, r1, #9
 80016fc:	4621      	mov	r1, r4
 80016fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001702:	4621      	mov	r1, r4
 8001704:	024a      	lsls	r2, r1, #9
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800170e:	2200      	movs	r2, #0
 8001710:	65bb      	str	r3, [r7, #88]	; 0x58
 8001712:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001714:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001718:	f7fe fd74 	bl	8000204 <__aeabi_uldivmod>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4613      	mov	r3, r2
 8001722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001726:	e065      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x420>
 8001728:	40023800 	.word	0x40023800
 800172c:	00f42400 	.word	0x00f42400
 8001730:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001734:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_GetSysClockFreq+0x458>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	2200      	movs	r2, #0
 800173c:	4618      	mov	r0, r3
 800173e:	4611      	mov	r1, r2
 8001740:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001744:	653b      	str	r3, [r7, #80]	; 0x50
 8001746:	2300      	movs	r3, #0
 8001748:	657b      	str	r3, [r7, #84]	; 0x54
 800174a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800174e:	4642      	mov	r2, r8
 8001750:	464b      	mov	r3, r9
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	0159      	lsls	r1, r3, #5
 800175c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001760:	0150      	lsls	r0, r2, #5
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4641      	mov	r1, r8
 8001768:	1a51      	subs	r1, r2, r1
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	4649      	mov	r1, r9
 800176e:	eb63 0301 	sbc.w	r3, r3, r1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001780:	4659      	mov	r1, fp
 8001782:	018b      	lsls	r3, r1, #6
 8001784:	4651      	mov	r1, sl
 8001786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800178a:	4651      	mov	r1, sl
 800178c:	018a      	lsls	r2, r1, #6
 800178e:	4651      	mov	r1, sl
 8001790:	1a54      	subs	r4, r2, r1
 8001792:	4659      	mov	r1, fp
 8001794:	eb63 0501 	sbc.w	r5, r3, r1
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	00eb      	lsls	r3, r5, #3
 80017a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a6:	00e2      	lsls	r2, r4, #3
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	4643      	mov	r3, r8
 80017ae:	18e3      	adds	r3, r4, r3
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	464b      	mov	r3, r9
 80017b4:	eb45 0303 	adc.w	r3, r5, r3
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c6:	4629      	mov	r1, r5
 80017c8:	028b      	lsls	r3, r1, #10
 80017ca:	4621      	mov	r1, r4
 80017cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d0:	4621      	mov	r1, r4
 80017d2:	028a      	lsls	r2, r1, #10
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017dc:	2200      	movs	r2, #0
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
 80017e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017e6:	f7fe fd0d 	bl	8000204 <__aeabi_uldivmod>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4613      	mov	r3, r2
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_RCC_GetSysClockFreq+0x458>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	0f1b      	lsrs	r3, r3, #28
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001812:	e003      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800181a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001820:	4618      	mov	r0, r3
 8001822:	37b8      	adds	r7, #184	; 0xb8
 8001824:	46bd      	mov	sp, r7
 8001826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	00f42400 	.word	0x00f42400

08001834 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e28d      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8083 	beq.w	800195a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001854:	4b94      	ldr	r3, [pc, #592]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b04      	cmp	r3, #4
 800185e:	d019      	beq.n	8001894 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001860:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001868:	2b08      	cmp	r3, #8
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800186c:	4b8e      	ldr	r3, [pc, #568]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001878:	d00c      	beq.n	8001894 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d112      	bne.n	80018ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001892:	d10b      	bne.n	80018ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05b      	beq.n	8001958 <HAL_RCC_OscConfig+0x124>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d157      	bne.n	8001958 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e25a      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_OscConfig+0x90>
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a7b      	ldr	r2, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xcc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0xb4>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a72      	ldr	r2, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xcc>
 80018e8:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a6b      	ldr	r2, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f91e 	bl	8000b48 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f91a 	bl	8000b48 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e21f      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xdc>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff f90a 	bl	8000b48 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff f906 	bl	8000b48 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e20b      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x104>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06f      	beq.n	8001a46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001966:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d017      	beq.n	80019a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800197a:	2b08      	cmp	r3, #8
 800197c:	d105      	bne.n	800198a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d11c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x186>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1d3      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x278>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f8b3 	bl	8000b48 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff f8af 	bl	8000b48 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1b4      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x278>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f892 	bl	8000b48 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff f88e 	bl	8000b48 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e193      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff f872 	bl	8000b48 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff f86e 	bl	8000b48 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e173      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x234>
 8001a86:	e01b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f85b 	bl	8000b48 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff f857 	bl	8000b48 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d907      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e15c      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
 8001ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b8a      	ldr	r3, [pc, #552]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ea      	bne.n	8001a96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8097 	beq.w	8001bfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b83      	ldr	r3, [pc, #524]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10f      	bne.n	8001afe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a7e      	ldr	r2, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_RCC_OscConfig+0x4b0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x4b0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a75      	ldr	r2, [pc, #468]	; (8001ce4 <HAL_RCC_OscConfig+0x4b0>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff f817 	bl	8000b48 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff f813 	bl	8000b48 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e118      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x4b0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x31e>
 8001b44:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x358>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x340>
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a60      	ldr	r2, [pc, #384]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0x358>
 8001b74:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a59      	ldr	r2, [pc, #356]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a56      	ldr	r2, [pc, #344]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7fe ffd8 	bl	8000b48 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7fe ffd4 	bl	8000b48 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0d7      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	4b4b      	ldr	r3, [pc, #300]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ee      	beq.n	8001b9c <HAL_RCC_OscConfig+0x368>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7fe ffc2 	bl	8000b48 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe ffbe 	bl	8000b48 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0c1      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a3a      	ldr	r2, [pc, #232]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80ad 	beq.w	8001d60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c06:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d060      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d145      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_RCC_OscConfig+0x4b4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7fe ff92 	bl	8000b48 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7fe ff8e 	bl	8000b48 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e093      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	071b      	lsls	r3, r3, #28
 8001c72:	491b      	ldr	r1, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x4b4>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7fe ff63 	bl	8000b48 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c86:	f7fe ff5f 	bl	8000b48 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e064      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x452>
 8001ca4:	e05c      	b.n	8001d60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_RCC_OscConfig+0x4b4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe ff4c 	bl	8000b48 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7fe ff48 	bl	8000b48 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e04d      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x480>
 8001cd2:	e045      	b.n	8001d60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e040      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_RCC_OscConfig+0x538>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d030      	beq.n	8001d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d129      	bne.n	8001d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d122      	bne.n	8001d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d119      	bne.n	8001d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	3b01      	subs	r3, #1
 8001d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10f      	bne.n	8001d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e03f      	b.n	8001e02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fdc2 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2224      	movs	r2, #36	; 0x24
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f929 	bl	800200c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b08a      	sub	sp, #40	; 0x28
 8001e0e:	af02      	add	r7, sp, #8
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d17c      	bne.n	8001f24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_UART_Transmit+0x2c>
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e075      	b.n	8001f26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_UART_Transmit+0x3e>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e06e      	b.n	8001f26 <HAL_UART_Transmit+0x11c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2221      	movs	r2, #33	; 0x21
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e5e:	f7fe fe73 	bl	8000b48 <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	88fa      	ldrh	r2, [r7, #6]
 8001e68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e78:	d108      	bne.n	8001e8c <HAL_UART_Transmit+0x82>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d104      	bne.n	8001e8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	e003      	b.n	8001e94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e9c:	e02a      	b.n	8001ef4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f840 	bl	8001f2e <UART_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e036      	b.n	8001f26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ecc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e007      	b.n	8001ee6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1cf      	bne.n	8001e9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f810 	bl	8001f2e <UART_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e006      	b.n	8001f26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b090      	sub	sp, #64	; 0x40
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f3e:	e050      	b.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d04c      	beq.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f4e:	f7fe fdfb 	bl	8000b48 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d241      	bcs.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330c      	adds	r3, #12
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	e853 3f00 	ldrex	r3, [r3]
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f7e:	637a      	str	r2, [r7, #52]	; 0x34
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f86:	e841 2300 	strex	r3, r2, [r1]
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1e5      	bne.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3314      	adds	r3, #20
 8001f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb2:	623a      	str	r2, [r7, #32]
 8001fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb6:	69f9      	ldr	r1, [r7, #28]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	e841 2300 	strex	r3, r2, [r1]
 8001fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1e5      	bne.n	8001f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e00f      	b.n	8002002 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d09f      	beq.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3740      	adds	r7, #64	; 0x40
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800200c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002010:	b0c0      	sub	sp, #256	; 0x100
 8002012:	af00      	add	r7, sp, #0
 8002014:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002028:	68d9      	ldr	r1, [r3, #12]
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	ea40 0301 	orr.w	r3, r0, r1
 8002034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	431a      	orrs	r2, r3
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	431a      	orrs	r2, r3
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002064:	f021 010c 	bic.w	r1, r1, #12
 8002068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002072:	430b      	orrs	r3, r1
 8002074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002086:	6999      	ldr	r1, [r3, #24]
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	ea40 0301 	orr.w	r3, r0, r1
 8002092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <UART_SetConfig+0x2cc>)
 800209c:	429a      	cmp	r2, r3
 800209e:	d005      	beq.n	80020ac <UART_SetConfig+0xa0>
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b8d      	ldr	r3, [pc, #564]	; (80022dc <UART_SetConfig+0x2d0>)
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d104      	bne.n	80020b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020ac:	f7ff f97e 	bl	80013ac <HAL_RCC_GetPCLK2Freq>
 80020b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020b4:	e003      	b.n	80020be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020b6:	f7ff f965 	bl	8001384 <HAL_RCC_GetPCLK1Freq>
 80020ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c8:	f040 810c 	bne.w	80022e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d0:	2200      	movs	r2, #0
 80020d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020de:	4622      	mov	r2, r4
 80020e0:	462b      	mov	r3, r5
 80020e2:	1891      	adds	r1, r2, r2
 80020e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80020e6:	415b      	adcs	r3, r3
 80020e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ee:	4621      	mov	r1, r4
 80020f0:	eb12 0801 	adds.w	r8, r2, r1
 80020f4:	4629      	mov	r1, r5
 80020f6:	eb43 0901 	adc.w	r9, r3, r1
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210e:	4690      	mov	r8, r2
 8002110:	4699      	mov	r9, r3
 8002112:	4623      	mov	r3, r4
 8002114:	eb18 0303 	adds.w	r3, r8, r3
 8002118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800211c:	462b      	mov	r3, r5
 800211e:	eb49 0303 	adc.w	r3, r9, r3
 8002122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002132:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800213a:	460b      	mov	r3, r1
 800213c:	18db      	adds	r3, r3, r3
 800213e:	653b      	str	r3, [r7, #80]	; 0x50
 8002140:	4613      	mov	r3, r2
 8002142:	eb42 0303 	adc.w	r3, r2, r3
 8002146:	657b      	str	r3, [r7, #84]	; 0x54
 8002148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800214c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002150:	f7fe f858 	bl	8000204 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <UART_SetConfig+0x2d4>)
 800215a:	fba3 2302 	umull	r2, r3, r3, r2
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	011c      	lsls	r4, r3, #4
 8002162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002166:	2200      	movs	r2, #0
 8002168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800216c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002174:	4642      	mov	r2, r8
 8002176:	464b      	mov	r3, r9
 8002178:	1891      	adds	r1, r2, r2
 800217a:	64b9      	str	r1, [r7, #72]	; 0x48
 800217c:	415b      	adcs	r3, r3
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002184:	4641      	mov	r1, r8
 8002186:	eb12 0a01 	adds.w	sl, r2, r1
 800218a:	4649      	mov	r1, r9
 800218c:	eb43 0b01 	adc.w	fp, r3, r1
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800219c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021a4:	4692      	mov	sl, r2
 80021a6:	469b      	mov	fp, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	eb1a 0303 	adds.w	r3, sl, r3
 80021ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021b2:	464b      	mov	r3, r9
 80021b4:	eb4b 0303 	adc.w	r3, fp, r3
 80021b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021d0:	460b      	mov	r3, r1
 80021d2:	18db      	adds	r3, r3, r3
 80021d4:	643b      	str	r3, [r7, #64]	; 0x40
 80021d6:	4613      	mov	r3, r2
 80021d8:	eb42 0303 	adc.w	r3, r2, r3
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
 80021de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021e6:	f7fe f80d 	bl	8000204 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <UART_SetConfig+0x2d4>)
 80021f2:	fba3 2301 	umull	r2, r3, r3, r1
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2264      	movs	r2, #100	; 0x64
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	1acb      	subs	r3, r1, r3
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <UART_SetConfig+0x2d4>)
 8002208:	fba3 2302 	umull	r2, r3, r3, r2
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002214:	441c      	add	r4, r3
 8002216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800221a:	2200      	movs	r2, #0
 800221c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002220:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002228:	4642      	mov	r2, r8
 800222a:	464b      	mov	r3, r9
 800222c:	1891      	adds	r1, r2, r2
 800222e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002230:	415b      	adcs	r3, r3
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002238:	4641      	mov	r1, r8
 800223a:	1851      	adds	r1, r2, r1
 800223c:	6339      	str	r1, [r7, #48]	; 0x30
 800223e:	4649      	mov	r1, r9
 8002240:	414b      	adcs	r3, r1
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002250:	4659      	mov	r1, fp
 8002252:	00cb      	lsls	r3, r1, #3
 8002254:	4651      	mov	r1, sl
 8002256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800225a:	4651      	mov	r1, sl
 800225c:	00ca      	lsls	r2, r1, #3
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4603      	mov	r3, r0
 8002264:	4642      	mov	r2, r8
 8002266:	189b      	adds	r3, r3, r2
 8002268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800226c:	464b      	mov	r3, r9
 800226e:	460a      	mov	r2, r1
 8002270:	eb42 0303 	adc.w	r3, r2, r3
 8002274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002284:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800228c:	460b      	mov	r3, r1
 800228e:	18db      	adds	r3, r3, r3
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
 8002292:	4613      	mov	r3, r2
 8002294:	eb42 0303 	adc.w	r3, r2, r3
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800229e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022a2:	f7fd ffaf 	bl	8000204 <__aeabi_uldivmod>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <UART_SetConfig+0x2d4>)
 80022ac:	fba3 1302 	umull	r1, r3, r3, r2
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	2164      	movs	r1, #100	; 0x64
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	3332      	adds	r3, #50	; 0x32
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <UART_SetConfig+0x2d4>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	f003 0207 	and.w	r2, r3, #7
 80022ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4422      	add	r2, r4
 80022d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022d4:	e105      	b.n	80024e2 <UART_SetConfig+0x4d6>
 80022d6:	bf00      	nop
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40011400 	.word	0x40011400
 80022e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022e8:	2200      	movs	r2, #0
 80022ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022f6:	4642      	mov	r2, r8
 80022f8:	464b      	mov	r3, r9
 80022fa:	1891      	adds	r1, r2, r2
 80022fc:	6239      	str	r1, [r7, #32]
 80022fe:	415b      	adcs	r3, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002306:	4641      	mov	r1, r8
 8002308:	1854      	adds	r4, r2, r1
 800230a:	4649      	mov	r1, r9
 800230c:	eb43 0501 	adc.w	r5, r3, r1
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	00eb      	lsls	r3, r5, #3
 800231a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800231e:	00e2      	lsls	r2, r4, #3
 8002320:	4614      	mov	r4, r2
 8002322:	461d      	mov	r5, r3
 8002324:	4643      	mov	r3, r8
 8002326:	18e3      	adds	r3, r4, r3
 8002328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800232c:	464b      	mov	r3, r9
 800232e:	eb45 0303 	adc.w	r3, r5, r3
 8002332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002352:	4629      	mov	r1, r5
 8002354:	008b      	lsls	r3, r1, #2
 8002356:	4621      	mov	r1, r4
 8002358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800235c:	4621      	mov	r1, r4
 800235e:	008a      	lsls	r2, r1, #2
 8002360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002364:	f7fd ff4e 	bl	8000204 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <UART_SetConfig+0x4e4>)
 800236e:	fba3 2302 	umull	r2, r3, r3, r2
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	011c      	lsls	r4, r3, #4
 8002376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800237a:	2200      	movs	r2, #0
 800237c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002380:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002388:	4642      	mov	r2, r8
 800238a:	464b      	mov	r3, r9
 800238c:	1891      	adds	r1, r2, r2
 800238e:	61b9      	str	r1, [r7, #24]
 8002390:	415b      	adcs	r3, r3
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002398:	4641      	mov	r1, r8
 800239a:	1851      	adds	r1, r2, r1
 800239c:	6139      	str	r1, [r7, #16]
 800239e:	4649      	mov	r1, r9
 80023a0:	414b      	adcs	r3, r1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023b0:	4659      	mov	r1, fp
 80023b2:	00cb      	lsls	r3, r1, #3
 80023b4:	4651      	mov	r1, sl
 80023b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ba:	4651      	mov	r1, sl
 80023bc:	00ca      	lsls	r2, r1, #3
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	4642      	mov	r2, r8
 80023c6:	189b      	adds	r3, r3, r2
 80023c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023cc:	464b      	mov	r3, r9
 80023ce:	460a      	mov	r2, r1
 80023d0:	eb42 0303 	adc.w	r3, r2, r3
 80023d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80023e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023f0:	4649      	mov	r1, r9
 80023f2:	008b      	lsls	r3, r1, #2
 80023f4:	4641      	mov	r1, r8
 80023f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023fa:	4641      	mov	r1, r8
 80023fc:	008a      	lsls	r2, r1, #2
 80023fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002402:	f7fd feff 	bl	8000204 <__aeabi_uldivmod>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <UART_SetConfig+0x4e4>)
 800240c:	fba3 1302 	umull	r1, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	2164      	movs	r1, #100	; 0x64
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	3332      	adds	r3, #50	; 0x32
 800241e:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <UART_SetConfig+0x4e4>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242a:	441c      	add	r4, r3
 800242c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002430:	2200      	movs	r2, #0
 8002432:	673b      	str	r3, [r7, #112]	; 0x70
 8002434:	677a      	str	r2, [r7, #116]	; 0x74
 8002436:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800243a:	4642      	mov	r2, r8
 800243c:	464b      	mov	r3, r9
 800243e:	1891      	adds	r1, r2, r2
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	415b      	adcs	r3, r3
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800244a:	4641      	mov	r1, r8
 800244c:	1851      	adds	r1, r2, r1
 800244e:	6039      	str	r1, [r7, #0]
 8002450:	4649      	mov	r1, r9
 8002452:	414b      	adcs	r3, r1
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002462:	4659      	mov	r1, fp
 8002464:	00cb      	lsls	r3, r1, #3
 8002466:	4651      	mov	r1, sl
 8002468:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800246c:	4651      	mov	r1, sl
 800246e:	00ca      	lsls	r2, r1, #3
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	4603      	mov	r3, r0
 8002476:	4642      	mov	r2, r8
 8002478:	189b      	adds	r3, r3, r2
 800247a:	66bb      	str	r3, [r7, #104]	; 0x68
 800247c:	464b      	mov	r3, r9
 800247e:	460a      	mov	r2, r1
 8002480:	eb42 0303 	adc.w	r3, r2, r3
 8002484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	663b      	str	r3, [r7, #96]	; 0x60
 8002490:	667a      	str	r2, [r7, #100]	; 0x64
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800249e:	4649      	mov	r1, r9
 80024a0:	008b      	lsls	r3, r1, #2
 80024a2:	4641      	mov	r1, r8
 80024a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a8:	4641      	mov	r1, r8
 80024aa:	008a      	lsls	r2, r1, #2
 80024ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024b0:	f7fd fea8 	bl	8000204 <__aeabi_uldivmod>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <UART_SetConfig+0x4e4>)
 80024ba:	fba3 1302 	umull	r1, r3, r3, r2
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2164      	movs	r1, #100	; 0x64
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	3332      	adds	r3, #50	; 0x32
 80024cc:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <UART_SetConfig+0x4e4>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4422      	add	r2, r4
 80024e0:	609a      	str	r2, [r3, #8]
}
 80024e2:	bf00      	nop
 80024e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024e8:	46bd      	mov	sp, r7
 80024ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ee:	bf00      	nop
 80024f0:	51eb851f 	.word	0x51eb851f

080024f4 <__libc_init_array>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	4d0d      	ldr	r5, [pc, #52]	; (800252c <__libc_init_array+0x38>)
 80024f8:	4c0d      	ldr	r4, [pc, #52]	; (8002530 <__libc_init_array+0x3c>)
 80024fa:	1b64      	subs	r4, r4, r5
 80024fc:	10a4      	asrs	r4, r4, #2
 80024fe:	2600      	movs	r6, #0
 8002500:	42a6      	cmp	r6, r4
 8002502:	d109      	bne.n	8002518 <__libc_init_array+0x24>
 8002504:	4d0b      	ldr	r5, [pc, #44]	; (8002534 <__libc_init_array+0x40>)
 8002506:	4c0c      	ldr	r4, [pc, #48]	; (8002538 <__libc_init_array+0x44>)
 8002508:	f000 f820 	bl	800254c <_init>
 800250c:	1b64      	subs	r4, r4, r5
 800250e:	10a4      	asrs	r4, r4, #2
 8002510:	2600      	movs	r6, #0
 8002512:	42a6      	cmp	r6, r4
 8002514:	d105      	bne.n	8002522 <__libc_init_array+0x2e>
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	f855 3b04 	ldr.w	r3, [r5], #4
 800251c:	4798      	blx	r3
 800251e:	3601      	adds	r6, #1
 8002520:	e7ee      	b.n	8002500 <__libc_init_array+0xc>
 8002522:	f855 3b04 	ldr.w	r3, [r5], #4
 8002526:	4798      	blx	r3
 8002528:	3601      	adds	r6, #1
 800252a:	e7f2      	b.n	8002512 <__libc_init_array+0x1e>
 800252c:	08002584 	.word	0x08002584
 8002530:	08002584 	.word	0x08002584
 8002534:	08002584 	.word	0x08002584
 8002538:	08002588 	.word	0x08002588

0800253c <memset>:
 800253c:	4402      	add	r2, r0
 800253e:	4603      	mov	r3, r0
 8002540:	4293      	cmp	r3, r2
 8002542:	d100      	bne.n	8002546 <memset+0xa>
 8002544:	4770      	bx	lr
 8002546:	f803 1b01 	strb.w	r1, [r3], #1
 800254a:	e7f9      	b.n	8002540 <memset+0x4>

0800254c <_init>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	bf00      	nop
 8002550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002552:	bc08      	pop	{r3}
 8002554:	469e      	mov	lr, r3
 8002556:	4770      	bx	lr

08002558 <_fini>:
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	bf00      	nop
 800255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255e:	bc08      	pop	{r3}
 8002560:	469e      	mov	lr, r3
 8002562:	4770      	bx	lr
