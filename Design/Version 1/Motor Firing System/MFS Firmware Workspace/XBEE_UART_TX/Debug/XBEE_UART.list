
XBEE_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003704  08003704  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800370c  0800370c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003720  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003720  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d38  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ac  00000000  00000000  00029d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020453  00000000  00000000  0002c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a058  00000000  00000000  0004ca0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4603  00000000  00000000  00056a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd0  00000000  00000000  0011b0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036cc 	.word	0x080036cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080036cc 	.word	0x080036cc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_UART_RxHalfCpltCallback>:
DMA_HandleTypeDef hdma_uart4_rx;

/* USER CODE BEGIN PV */
char rx_data[20];
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);  // toggle PA0
 8000510:	2120      	movs	r1, #32
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <HAL_UART_RxHalfCpltCallback+0x18>)
 8000514:	f001 f964 	bl	80017e0 <HAL_GPIO_TogglePin>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40020000 	.word	0x40020000

08000524 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart4, rx_data, sizeof(rx_data));
 800052c:	2214      	movs	r2, #20
 800052e:	4904      	ldr	r1, [pc, #16]	; (8000540 <HAL_UART_RxCpltCallback+0x1c>)
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <HAL_UART_RxCpltCallback+0x20>)
 8000532:	f001 fff4 	bl	800251e <HAL_UART_Receive_DMA>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000cc 	.word	0x200000cc
 8000544:	20000028 	.word	0x20000028

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fa2e 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f810 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f8ca 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000558:	f000 f8a8 	bl	80006ac <MX_DMA_Init>
  MX_UART4_Init();
 800055c:	f000 f87c 	bl	8000658 <MX_UART4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_DMA(&huart4, rx_data, sizeof(rx_data));
 8000560:	2214      	movs	r2, #20
 8000562:	4902      	ldr	r1, [pc, #8]	; (800056c <main+0x24>)
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <main+0x28>)
 8000566:	f001 ffda 	bl	800251e <HAL_UART_Receive_DMA>
 800056a:	e7f9      	b.n	8000560 <main+0x18>
 800056c:	200000cc 	.word	0x200000cc
 8000570:	20000028 	.word	0x20000028

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 f89a 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <SystemClock_Config+0xdc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <SystemClock_Config+0xdc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xdc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <SystemClock_Config+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a25      	ldr	r2, [pc, #148]	; (8000654 <SystemClock_Config+0xe0>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <SystemClock_Config+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005e8:	23b4      	movs	r3, #180	; 0xb4
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fca3 	bl	8001f48 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000608:	f000 f8a6 	bl	8000758 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800060c:	f001 f902 	bl	8001814 <HAL_PWREx_EnableOverDrive>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000616:	f000 f89f 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2105      	movs	r1, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f93b 	bl	80018b4 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000644:	f000 f888 	bl	8000758 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_UART4_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_UART4_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_UART4_Init+0x4c>)
 8000664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000668:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_UART4_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_UART4_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_UART4_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_UART4_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_UART4_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_UART4_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_UART4_Init+0x4c>)
 8000690:	f001 fef8 	bl	8002484 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f85d 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40004c00 	.word	0x40004c00

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_DMA_Init+0x3c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <MX_DMA_Init+0x3c>)
 80006bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_DMA_Init+0x3c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	200d      	movs	r0, #13
 80006d4:	f000 fab7 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006d8:	200d      	movs	r0, #13
 80006da:	f000 fad0 	bl	8000c7e <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_GPIO_Init+0x68>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_GPIO_Init+0x68>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_GPIO_Init+0x68>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_GPIO_Init+0x68>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_GPIO_Init+0x68>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_GPIO_Init+0x68>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_GPIO_Init+0x68>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <MX_GPIO_Init+0x68>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_GPIO_Init+0x68>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <HAL_MspInit+0x4c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 fa44 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a34      	ldr	r2, [pc, #208]	; (80008a4 <HAL_UART_MspInit+0xf0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d161      	bne.n	800089a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <HAL_UART_MspInit+0xf4>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <HAL_UART_MspInit+0xf4>)
 80007e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <HAL_UART_MspInit+0xf4>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <HAL_UART_MspInit+0xf4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2b      	ldr	r2, [pc, #172]	; (80008a8 <HAL_UART_MspInit+0xf4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <HAL_UART_MspInit+0xf4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080e:	2303      	movs	r3, #3
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800081e:	2308      	movs	r3, #8
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4820      	ldr	r0, [pc, #128]	; (80008ac <HAL_UART_MspInit+0xf8>)
 800082a:	f000 fe45 	bl	80014b8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <HAL_UART_MspInit+0x100>)
 8000832:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800083a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 800084a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800084e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000870:	f000 fa20 	bl	8000cb4 <HAL_DMA_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800087a:	f7ff ff6d 	bl	8000758 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000882:	639a      	str	r2, [r3, #56]	; 0x38
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_UART_MspInit+0xfc>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2034      	movs	r0, #52	; 0x34
 8000890:	f000 f9d9 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000894:	2034      	movs	r0, #52	; 0x34
 8000896:	f000 f9f2 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004c00 	.word	0x40004c00
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	2000006c 	.word	0x2000006c
 80008b4:	40026040 	.word	0x40026040

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8a4 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <DMA1_Stream2_IRQHandler+0x10>)
 8000912:	f000 fb67 	bl	8000fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000006c 	.word	0x2000006c

08000920 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <UART4_IRQHandler+0x10>)
 8000926:	f001 fe2b 	bl	8002580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000028 	.word	0x20000028

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 fe75 	bl	8003674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fddd 	bl	8000548 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800099c:	08003714 	.word	0x08003714
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a4:	200000e4 	.word	0x200000e4

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <HAL_Init+0x40>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_Init+0x40>)
 80009c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x40>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f92b 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff fec0 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f943 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f90b 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	200000e0 	.word	0x200000e0

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200000e0 	.word	0x200000e0

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff29 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff3e 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff31 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff feda 	bl	8000a78 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e099      	b.n	8000e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cf0:	e00f      	b.n	8000d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cf2:	f7ff fec1 	bl	8000a78 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d908      	bls.n	8000d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2220      	movs	r2, #32
 8000d04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e078      	b.n	8000e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e8      	bne.n	8000cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <HAL_DMA_Init+0x158>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d107      	bne.n	8000d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4313      	orrs	r3, r2
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f023 0307 	bic.w	r3, r3, #7
 8000d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d117      	bne.n	8000dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00e      	beq.n	8000dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 fb01 	bl	80013c0 <DMA_CheckFifoParam>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d008      	beq.n	8000dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2240      	movs	r2, #64	; 0x40
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e016      	b.n	8000e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fab8 	bl	8001354 <DMA_CalcBaseAndBitshift>
 8000de4:	4603      	mov	r3, r0
 8000de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dec:	223f      	movs	r2, #63	; 0x3f
 8000dee:	409a      	lsls	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	f010803f 	.word	0xf010803f

08000e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_DMA_Start_IT+0x26>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e040      	b.n	8000eb8 <HAL_DMA_Start_IT+0xa8>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d12f      	bne.n	8000eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f000 fa4a 	bl	80012f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e68:	223f      	movs	r2, #63	; 0x3f
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0216 	orr.w	r2, r2, #22
 8000e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0208 	orr.w	r2, r2, #8
 8000e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e005      	b.n	8000eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ece:	f7ff fdd3 	bl	8000a78 <HAL_GetTick>
 8000ed2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d008      	beq.n	8000ef2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e052      	b.n	8000f98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0216 	bic.w	r2, r2, #22
 8000f00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	695a      	ldr	r2, [r3, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <HAL_DMA_Abort+0x62>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0208 	bic.w	r2, r2, #8
 8000f30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0201 	bic.w	r2, r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f42:	e013      	b.n	8000f6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f44:	f7ff fd98 	bl	8000a78 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d90c      	bls.n	8000f6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2220      	movs	r2, #32
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e015      	b.n	8000f98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e4      	bne.n	8000f44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7e:	223f      	movs	r2, #63	; 0x3f
 8000f80:	409a      	lsls	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d004      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00c      	b.n	8000fd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0201 	bic.w	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ff0:	4b8e      	ldr	r3, [pc, #568]	; (800122c <HAL_DMA_IRQHandler+0x248>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a8e      	ldr	r2, [pc, #568]	; (8001230 <HAL_DMA_IRQHandler+0x24c>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0a9b      	lsrs	r3, r3, #10
 8000ffc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100e:	2208      	movs	r2, #8
 8001010:	409a      	lsls	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0204 	bic.w	r2, r2, #4
 8001036:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103c:	2208      	movs	r2, #8
 800103e:	409a      	lsls	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001048:	f043 0201 	orr.w	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001054:	2201      	movs	r2, #1
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d012      	beq.n	8001086 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001072:	2201      	movs	r2, #1
 8001074:	409a      	lsls	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	2204      	movs	r2, #4
 800108c:	409a      	lsls	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d012      	beq.n	80010bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a8:	2204      	movs	r2, #4
 80010aa:	409a      	lsls	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b4:	f043 0204 	orr.w	r2, r3, #4
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c0:	2210      	movs	r2, #16
 80010c2:	409a      	lsls	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d043      	beq.n	8001154 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d03c      	beq.n	8001154 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010de:	2210      	movs	r2, #16
 80010e0:	409a      	lsls	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d018      	beq.n	8001126 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d108      	bne.n	8001114 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d024      	beq.n	8001154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	4798      	blx	r3
 8001112:	e01f      	b.n	8001154 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01b      	beq.n	8001154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
 8001124:	e016      	b.n	8001154 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001130:	2b00      	cmp	r3, #0
 8001132:	d107      	bne.n	8001144 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0208 	bic.w	r2, r2, #8
 8001142:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001158:	2220      	movs	r2, #32
 800115a:	409a      	lsls	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 808f 	beq.w	8001284 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8087 	beq.w	8001284 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117a:	2220      	movs	r2, #32
 800117c:	409a      	lsls	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b05      	cmp	r3, #5
 800118c:	d136      	bne.n	80011fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0216 	bic.w	r2, r2, #22
 800119c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d103      	bne.n	80011be <HAL_DMA_IRQHandler+0x1da>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0208 	bic.w	r2, r2, #8
 80011cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d2:	223f      	movs	r2, #63	; 0x3f
 80011d4:	409a      	lsls	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d07e      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
        }
        return;
 80011fa:	e079      	b.n	80012f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01d      	beq.n	8001246 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10d      	bne.n	8001234 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	2b00      	cmp	r3, #0
 800121e:	d031      	beq.n	8001284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	4798      	blx	r3
 8001228:	e02c      	b.n	8001284 <HAL_DMA_IRQHandler+0x2a0>
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d023      	beq.n	8001284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4798      	blx	r3
 8001244:	e01e      	b.n	8001284 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10f      	bne.n	8001274 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0210 	bic.w	r2, r2, #16
 8001262:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001288:	2b00      	cmp	r3, #0
 800128a:	d032      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d022      	beq.n	80012de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2205      	movs	r2, #5
 800129c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d307      	bcc.n	80012cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f2      	bne.n	80012b0 <HAL_DMA_IRQHandler+0x2cc>
 80012ca:	e000      	b.n	80012ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
 80012ee:	e000      	b.n	80012f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80012f0:	bf00      	nop
    }
  }
}
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b40      	cmp	r3, #64	; 0x40
 8001324:	d108      	bne.n	8001338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001336:	e007      	b.n	8001348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3b10      	subs	r3, #16
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <DMA_CalcBaseAndBitshift+0x68>)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d909      	bls.n	8001396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800138a:	f023 0303 	bic.w	r3, r3, #3
 800138e:	1d1a      	adds	r2, r3, #4
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	659a      	str	r2, [r3, #88]	; 0x58
 8001394:	e007      	b.n	80013a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	aaaaaaab 	.word	0xaaaaaaab
 80013bc:	080036fc 	.word	0x080036fc

080013c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d11f      	bne.n	800141a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d856      	bhi.n	800148e <DMA_CheckFifoParam+0xce>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <DMA_CheckFifoParam+0x28>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	080013f9 	.word	0x080013f9
 80013ec:	0800140b 	.word	0x0800140b
 80013f0:	080013f9 	.word	0x080013f9
 80013f4:	0800148f 	.word	0x0800148f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d046      	beq.n	8001492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001408:	e043      	b.n	8001492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001412:	d140      	bne.n	8001496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001418:	e03d      	b.n	8001496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001422:	d121      	bne.n	8001468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d837      	bhi.n	800149a <DMA_CheckFifoParam+0xda>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <DMA_CheckFifoParam+0x70>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001441 	.word	0x08001441
 8001434:	08001447 	.word	0x08001447
 8001438:	08001441 	.word	0x08001441
 800143c:	08001459 	.word	0x08001459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
      break;
 8001444:	e030      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d025      	beq.n	800149e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001456:	e022      	b.n	800149e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001460:	d11f      	bne.n	80014a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001466:	e01c      	b.n	80014a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d903      	bls.n	8001476 <DMA_CheckFifoParam+0xb6>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d003      	beq.n	800147c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001474:	e018      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
      break;
 800147a:	e015      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00e      	beq.n	80014a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
      break;
 800148c:	e00b      	b.n	80014a6 <DMA_CheckFifoParam+0xe6>
      break;
 800148e:	bf00      	nop
 8001490:	e00a      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001492:	bf00      	nop
 8001494:	e008      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001496:	bf00      	nop
 8001498:	e006      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      break;
 800149a:	bf00      	nop
 800149c:	e004      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      break;
 800149e:	bf00      	nop
 80014a0:	e002      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80014a2:	bf00      	nop
 80014a4:	e000      	b.n	80014a8 <DMA_CheckFifoParam+0xe8>
      break;
 80014a6:	bf00      	nop
    }
  } 
  
  return status; 
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e165      	b.n	80017a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8154 	bne.w	800179a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	2b02      	cmp	r3, #2
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d017      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80ae 	beq.w	800179a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <HAL_GPIO_Init+0x300>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <HAL_GPIO_Init+0x300>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <HAL_GPIO_Init+0x300>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165a:	4a58      	ldr	r2, [pc, #352]	; (80017bc <HAL_GPIO_Init+0x304>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <HAL_GPIO_Init+0x308>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d025      	beq.n	80016d2 <HAL_GPIO_Init+0x21a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_GPIO_Init+0x30c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_Init+0x216>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4d      	ldr	r2, [pc, #308]	; (80017c8 <HAL_GPIO_Init+0x310>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x212>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_GPIO_Init+0x314>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x20e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4b      	ldr	r2, [pc, #300]	; (80017d0 <HAL_GPIO_Init+0x318>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x20a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <HAL_GPIO_Init+0x31c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x206>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a49      	ldr	r2, [pc, #292]	; (80017d8 <HAL_GPIO_Init+0x320>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x202>
 80016b6:	2306      	movs	r3, #6
 80016b8:	e00c      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e00a      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016be:	2305      	movs	r3, #5
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x304>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_GPIO_Init+0x324>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a31      	ldr	r2, [pc, #196]	; (80017dc <HAL_GPIO_Init+0x324>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_GPIO_Init+0x324>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_GPIO_Init+0x324>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <HAL_GPIO_Init+0x324>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_GPIO_Init+0x324>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_GPIO_Init+0x324>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001794:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_GPIO_Init+0x324>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f ae96 	bls.w	80014d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	43d9      	mvns	r1, r3
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	400b      	ands	r3, r1
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001840:	f7ff f91a 	bl	8000a78 <HAL_GetTick>
 8001844:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001846:	e009      	b.n	800185c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001848:	f7ff f916 	bl	8000a78 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001856:	d901      	bls.n	800185c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e01f      	b.n	800189c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_PWREx_EnableOverDrive+0x98>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001868:	d1ee      	bne.n	8001848 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001870:	f7ff f902 	bl	8000a78 <HAL_GetTick>
 8001874:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001876:	e009      	b.n	800188c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001878:	f7ff f8fe 	bl	8000a78 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001886:	d901      	bls.n	800188c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e007      	b.n	800189c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_PWREx_EnableOverDrive+0x98>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001898:	d1ee      	bne.n	8001878 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	420e0040 	.word	0x420e0040
 80018ac:	40007000 	.word	0x40007000
 80018b0:	420e0044 	.word	0x420e0044

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0cc      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d90c      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b63      	ldr	r3, [pc, #396]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b8      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001920:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a52      	ldr	r2, [pc, #328]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800192a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	494d      	ldr	r1, [pc, #308]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d044      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d119      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e07f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e067      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4934      	ldr	r1, [pc, #208]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff f868 	bl	8000a78 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f864 	bl	8000a78 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e04f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d20c      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e032      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4916      	ldr	r1, [pc, #88]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3a:	f000 f855 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	490a      	ldr	r1, [pc, #40]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	5ccb      	ldrb	r3, [r1, r3]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe ffc8 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00
 8001a70:	40023800 	.word	0x40023800
 8001a74:	080036e4 	.word	0x080036e4
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	080036f4 	.word	0x080036f4

08001ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac4:	f7ff ffdc 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	080036f4 	.word	0x080036f4

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aec:	b0ae      	sub	sp, #184	; 0xb8
 8001aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0e:	4bcb      	ldr	r3, [pc, #812]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	f200 8206 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x440>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b59 	.word	0x08001b59
 8001b28:	08001f29 	.word	0x08001f29
 8001b2c:	08001f29 	.word	0x08001f29
 8001b30:	08001f29 	.word	0x08001f29
 8001b34:	08001b61 	.word	0x08001b61
 8001b38:	08001f29 	.word	0x08001f29
 8001b3c:	08001f29 	.word	0x08001f29
 8001b40:	08001f29 	.word	0x08001f29
 8001b44:	08001b69 	.word	0x08001b69
 8001b48:	08001f29 	.word	0x08001f29
 8001b4c:	08001f29 	.word	0x08001f29
 8001b50:	08001f29 	.word	0x08001f29
 8001b54:	08001d59 	.word	0x08001d59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4bb9      	ldr	r3, [pc, #740]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001b5e:	e1e7      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b60:	4bb8      	ldr	r3, [pc, #736]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b66:	e1e3      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b68:	4bb4      	ldr	r3, [pc, #720]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b74:	4bb1      	ldr	r3, [pc, #708]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d071      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b80:	4bae      	ldr	r3, [pc, #696]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	2200      	movs	r2, #0
 8001b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	462b      	mov	r3, r5
 8001baa:	f04f 0000 	mov.w	r0, #0
 8001bae:	f04f 0100 	mov.w	r1, #0
 8001bb2:	0159      	lsls	r1, r3, #5
 8001bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb8:	0150      	lsls	r0, r2, #5
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	1a51      	subs	r1, r2, r1
 8001bc2:	6439      	str	r1, [r7, #64]	; 0x40
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bca:	647b      	str	r3, [r7, #68]	; 0x44
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001bd8:	4649      	mov	r1, r9
 8001bda:	018b      	lsls	r3, r1, #6
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001be2:	4641      	mov	r1, r8
 8001be4:	018a      	lsls	r2, r1, #6
 8001be6:	4641      	mov	r1, r8
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bec:	4649      	mov	r1, r9
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c00:	4649      	mov	r1, r9
 8001c02:	00cb      	lsls	r3, r1, #3
 8001c04:	4641      	mov	r1, r8
 8001c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	00ca      	lsls	r2, r1, #3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	4622      	mov	r2, r4
 8001c16:	189b      	adds	r3, r3, r2
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	eb42 0303 	adc.w	r3, r2, r3
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c30:	4629      	mov	r1, r5
 8001c32:	024b      	lsls	r3, r1, #9
 8001c34:	4621      	mov	r1, r4
 8001c36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	024a      	lsls	r2, r1, #9
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c46:	2200      	movs	r2, #0
 8001c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c54:	f7fe fad6 	bl	8000204 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c62:	e067      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c64:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c7e:	2300      	movs	r3, #0
 8001c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c86:	4622      	mov	r2, r4
 8001c88:	462b      	mov	r3, r5
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	0159      	lsls	r1, r3, #5
 8001c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c98:	0150      	lsls	r0, r2, #5
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	1a51      	subs	r1, r2, r1
 8001ca2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001cb8:	4649      	mov	r1, r9
 8001cba:	018b      	lsls	r3, r1, #6
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	018a      	lsls	r2, r1, #6
 8001cc6:	4641      	mov	r1, r8
 8001cc8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ccc:	4649      	mov	r1, r9
 8001cce:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cde:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ce6:	4692      	mov	sl, r2
 8001ce8:	469b      	mov	fp, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	eb1a 0303 	adds.w	r3, sl, r3
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	462b      	mov	r3, r5
 8001cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d06:	4629      	mov	r1, r5
 8001d08:	028b      	lsls	r3, r1, #10
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d10:	4621      	mov	r1, r4
 8001d12:	028a      	lsls	r2, r1, #10
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8001d20:	677a      	str	r2, [r7, #116]	; 0x74
 8001d22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d26:	f7fe fa6d 	bl	8000204 <__aeabi_uldivmod>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4613      	mov	r3, r2
 8001d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d34:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d56:	e0eb      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d64:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d06b      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	2200      	movs	r2, #0
 8001d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d82:	663b      	str	r3, [r7, #96]	; 0x60
 8001d84:	2300      	movs	r3, #0
 8001d86:	667b      	str	r3, [r7, #100]	; 0x64
 8001d88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	462b      	mov	r3, r5
 8001d90:	f04f 0000 	mov.w	r0, #0
 8001d94:	f04f 0100 	mov.w	r1, #0
 8001d98:	0159      	lsls	r1, r3, #5
 8001d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9e:	0150      	lsls	r0, r2, #5
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4621      	mov	r1, r4
 8001da6:	1a51      	subs	r1, r2, r1
 8001da8:	61b9      	str	r1, [r7, #24]
 8001daa:	4629      	mov	r1, r5
 8001dac:	eb63 0301 	sbc.w	r3, r3, r1
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001dbe:	4659      	mov	r1, fp
 8001dc0:	018b      	lsls	r3, r1, #6
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dc8:	4651      	mov	r1, sl
 8001dca:	018a      	lsls	r2, r1, #6
 8001dcc:	4651      	mov	r1, sl
 8001dce:	ebb2 0801 	subs.w	r8, r2, r1
 8001dd2:	4659      	mov	r1, fp
 8001dd4:	eb63 0901 	sbc.w	r9, r3, r1
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001de8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dec:	4690      	mov	r8, r2
 8001dee:	4699      	mov	r9, r3
 8001df0:	4623      	mov	r3, r4
 8001df2:	eb18 0303 	adds.w	r3, r8, r3
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	462b      	mov	r3, r5
 8001dfa:	eb49 0303 	adc.w	r3, r9, r3
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	024b      	lsls	r3, r1, #9
 8001e10:	4621      	mov	r1, r4
 8001e12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e16:	4621      	mov	r1, r4
 8001e18:	024a      	lsls	r2, r1, #9
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e22:	2200      	movs	r2, #0
 8001e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e2c:	f7fe f9ea 	bl	8000204 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e3a:	e065      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x420>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	4611      	mov	r1, r2
 8001e54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e58:	653b      	str	r3, [r7, #80]	; 0x50
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	657b      	str	r3, [r7, #84]	; 0x54
 8001e5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e62:	4642      	mov	r2, r8
 8001e64:	464b      	mov	r3, r9
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0159      	lsls	r1, r3, #5
 8001e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e74:	0150      	lsls	r0, r2, #5
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	1a51      	subs	r1, r2, r1
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	4649      	mov	r1, r9
 8001e82:	eb63 0301 	sbc.w	r3, r3, r1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e94:	4659      	mov	r1, fp
 8001e96:	018b      	lsls	r3, r1, #6
 8001e98:	4651      	mov	r1, sl
 8001e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9e:	4651      	mov	r1, sl
 8001ea0:	018a      	lsls	r2, r1, #6
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	1a54      	subs	r4, r2, r1
 8001ea6:	4659      	mov	r1, fp
 8001ea8:	eb63 0501 	sbc.w	r5, r3, r1
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	00eb      	lsls	r3, r5, #3
 8001eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eba:	00e2      	lsls	r2, r4, #3
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	4643      	mov	r3, r8
 8001ec2:	18e3      	adds	r3, r4, r3
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	eb45 0303 	adc.w	r3, r5, r3
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eda:	4629      	mov	r1, r5
 8001edc:	028b      	lsls	r3, r1, #10
 8001ede:	4621      	mov	r1, r4
 8001ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	028a      	lsls	r2, r1, #10
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ef4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ef6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001efa:	f7fe f983 	bl	8000204 <__aeabi_uldivmod>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4613      	mov	r3, r2
 8001f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	0f1b      	lsrs	r3, r3, #28
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f26:	e003      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	37b8      	adds	r7, #184	; 0xb8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	00f42400 	.word	0x00f42400

08001f48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e28d      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8083 	beq.w	800206e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f68:	4b94      	ldr	r3, [pc, #592]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d019      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f74:	4b91      	ldr	r3, [pc, #580]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f80:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d112      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b84      	ldr	r3, [pc, #528]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05b      	beq.n	800206c <HAL_RCC_OscConfig+0x124>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d157      	bne.n	800206c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e25a      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x90>
 8001fca:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xcc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xb4>
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a72      	ldr	r2, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xcc>
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a6b      	ldr	r2, [pc, #428]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fd2c 	bl	8000a78 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe fd28 	bl	8000a78 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e21f      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xdc>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fd18 	bl	8000a78 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe fd14 	bl	8000a78 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e20b      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x104>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06f      	beq.n	800215a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800207a:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d017      	beq.n	80020b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002086:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800208e:	2b08      	cmp	r3, #8
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020aa:	4b44      	ldr	r3, [pc, #272]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x186>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1d3      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e03a      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fcc1 	bl	8000a78 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fa:	f7fe fcbd 	bl	8000a78 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1b4      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe fca0 	bl	8000a78 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213c:	f7fe fc9c 	bl	8000a78 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e193      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d036      	beq.n	80021d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x27c>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7fe fc80 	bl	8000a78 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217c:	f7fe fc7c 	bl	8000a78 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e173      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x234>
 800219a:	e01b      	b.n	80021d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_OscConfig+0x27c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7fe fc69 	bl	8000a78 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	e00e      	b.n	80021c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7fe fc65 	bl	8000a78 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d907      	bls.n	80021c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e15c      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	42470000 	.word	0x42470000
 80021c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b8a      	ldr	r3, [pc, #552]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ea      	bne.n	80021aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8097 	beq.w	8002310 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b79      	ldr	r3, [pc, #484]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7fe fc25 	bl	8000a78 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7fe fc21 	bl	8000a78 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e118      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	4b6c      	ldr	r3, [pc, #432]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x31e>
 8002258:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	e01c      	b.n	80022a0 <HAL_RCC_OscConfig+0x358>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x340>
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0x358>
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a59      	ldr	r2, [pc, #356]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800229a:	f023 0304 	bic.w	r3, r3, #4
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe fbe6 	bl	8000a78 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fbe2 	bl	8000a78 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0d7      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0ee      	beq.n	80022b0 <HAL_RCC_OscConfig+0x368>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7fe fbd0 	bl	8000a78 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe fbcc 	bl	8000a78 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0c1      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ee      	bne.n	80022dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800230a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80ad 	beq.w	8002474 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d145      	bne.n	80023ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fba0 	bl	8000a78 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe fb9c 	bl	8000a78 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e093      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	071b      	lsls	r3, r3, #28
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fb71 	bl	8000a78 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fb6d 	bl	8000a78 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e064      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x452>
 80023b8:	e05c      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fb5a 	bl	8000a78 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fb56 	bl	8000a78 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e04d      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x480>
 80023e6:	e045      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e040      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_RCC_OscConfig+0x538>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d030      	beq.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d129      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d122      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d119      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d10f      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e03f      	b.n	8002516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f982 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fe5f 	bl	800318c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	d11d      	bne.n	8002574 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_UART_Receive_DMA+0x26>
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e016      	b.n	8002576 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_UART_Receive_DMA+0x38>
 8002552:	2302      	movs	r3, #2
 8002554:	e00f      	b.n	8002576 <HAL_UART_Receive_DMA+0x58>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	461a      	mov	r2, r3
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fbae 	bl	8002ccc <UART_Start_Receive_DMA>
 8002570:	4603      	mov	r3, r0
 8002572:	e000      	b.n	8002576 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0ba      	sub	sp, #232	; 0xe8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_UART_IRQHandler+0x66>
 80025d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fd19 	bl	8003016 <UART_Receive_IT>
      return;
 80025e4:	e256      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80de 	beq.w	80027ac <HAL_UART_IRQHandler+0x22c>
 80025f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002600:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80d1 	beq.w	80027ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800260a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_UART_IRQHandler+0xae>
 8002616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_UART_IRQHandler+0xd2>
 800263a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f043 0202 	orr.w	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_UART_IRQHandler+0xf6>
 800265e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f043 0204 	orr.w	r2, r3, #4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d011      	beq.n	80026a6 <HAL_UART_IRQHandler+0x126>
 8002682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800268e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0208 	orr.w	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 81ed 	beq.w	8002a8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_UART_IRQHandler+0x14e>
 80026bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fca4 	bl	8003016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_UART_IRQHandler+0x17a>
 80026f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04f      	beq.n	800279a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fbac 	bl	8002e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d141      	bne.n	8002792 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3314      	adds	r3, #20
 8002714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800271c:	e853 3f00 	ldrex	r3, [r3]
 8002720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800273a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1d9      	bne.n	800270e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	4a7d      	ldr	r2, [pc, #500]	; (800295c <HAL_UART_IRQHandler+0x3dc>)
 8002768:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fc16 	bl	8000fa0 <HAL_DMA_Abort_IT>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002784:	4610      	mov	r0, r2
 8002786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	e00e      	b.n	80027a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f990 	bl	8002ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	e00a      	b.n	80027a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f98c 	bl	8002ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	e006      	b.n	80027a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f988 	bl	8002ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027a6:	e170      	b.n	8002a8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	bf00      	nop
    return;
 80027aa:	e16e      	b.n	8002a8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 814a 	bne.w	8002a4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8143 	beq.w	8002a4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 813c 	beq.w	8002a4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	f040 80b4 	bne.w	8002960 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002804:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8140 	beq.w	8002a8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002816:	429a      	cmp	r2, r3
 8002818:	f080 8139 	bcs.w	8002a8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002822:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282e:	f000 8088 	beq.w	8002942 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800285e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800286a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1d9      	bne.n	8002832 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3314      	adds	r3, #20
 8002884:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800288e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e1      	bne.n	800287e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3314      	adds	r3, #20
 80028c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3314      	adds	r3, #20
 80028da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e3      	bne.n	80028ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	e853 3f00 	ldrex	r3, [r3]
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002912:	f023 0310 	bic.w	r3, r3, #16
 8002916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002924:	65ba      	str	r2, [r7, #88]	; 0x58
 8002926:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800292a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e3      	bne.n	8002900 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fabf 	bl	8000ec0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800294a:	b29b      	uxth	r3, r3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8b6 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002958:	e099      	b.n	8002a8e <HAL_UART_IRQHandler+0x50e>
 800295a:	bf00      	nop
 800295c:	08002f1f 	.word	0x08002f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002968:	b29b      	uxth	r3, r3
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 808b 	beq.w	8002a92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800297c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8086 	beq.w	8002a92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800299c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029aa:	647a      	str	r2, [r7, #68]	; 0x44
 80029ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e3      	bne.n	8002986 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	e853 3f00 	ldrex	r3, [r3]
 80029cc:	623b      	str	r3, [r7, #32]
   return(result);
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029e2:	633a      	str	r2, [r7, #48]	; 0x30
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e3      	bne.n	80029be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a28:	61fa      	str	r2, [r7, #28]
 8002a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	69b9      	ldr	r1, [r7, #24]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	617b      	str	r3, [r7, #20]
   return(result);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e3      	bne.n	8002a04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f83e 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a48:	e023      	b.n	8002a92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_UART_IRQHandler+0x4ea>
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa6f 	bl	8002f46 <UART_Transmit_IT>
    return;
 8002a68:	e014      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00e      	beq.n	8002a94 <HAL_UART_IRQHandler+0x514>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 faaf 	bl	8002fe6 <UART_EndTransmit_IT>
    return;
 8002a88:	e004      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
    return;
 8002a8a:	bf00      	nop
 8002a8c:	e002      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
      return;
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <HAL_UART_IRQHandler+0x514>
      return;
 8002a92:	bf00      	nop
  }
}
 8002a94:	37e8      	adds	r7, #232	; 0xe8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop

08002a9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b09c      	sub	sp, #112	; 0x70
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d172      	bne.n	8002bde <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afa:	2200      	movs	r2, #0
 8002afc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	330c      	adds	r3, #12
 8002b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e5      	bne.n	8002afe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3314      	adds	r3, #20
 8002b38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	e853 3f00 	ldrex	r3, [r3]
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	667b      	str	r3, [r7, #100]	; 0x64
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b52:	647a      	str	r2, [r7, #68]	; 0x44
 8002b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e5      	bne.n	8002b32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	623b      	str	r3, [r7, #32]
   return(result);
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3314      	adds	r3, #20
 8002b84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b86:	633a      	str	r2, [r7, #48]	; 0x30
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e5      	bne.n	8002b66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d119      	bne.n	8002bde <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f023 0310 	bic.w	r3, r3, #16
 8002bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bca:	61fa      	str	r2, [r7, #28]
 8002bcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	617b      	str	r3, [r7, #20]
   return(result);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e5      	bne.n	8002baa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d106      	bne.n	8002bf4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bea:	4619      	mov	r1, r3
 8002bec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bee:	f7ff ff69 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002bf2:	e002      	b.n	8002bfa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002bf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bf6:	f7fd fc95 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 8002bfa:	bf00      	nop
 8002bfc:	3770      	adds	r7, #112	; 0x70
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d108      	bne.n	8002c2a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4619      	mov	r1, r3
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff ff4e 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c28:	e002      	b.n	8002c30 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7fd fc6c 	bl	8000508 <HAL_UART_RxHalfCpltCallback>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b21      	cmp	r3, #33	; 0x21
 8002c6a:	d108      	bne.n	8002c7e <UART_DMAError+0x46>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2200      	movs	r2, #0
 8002c76:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002c78:	68b8      	ldr	r0, [r7, #8]
 8002c7a:	f000 f8c5 	bl	8002e08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b22      	cmp	r3, #34	; 0x22
 8002c9e:	d108      	bne.n	8002cb2 <UART_DMAError+0x7a>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002cac:	68b8      	ldr	r0, [r7, #8]
 8002cae:	f000 f8d3 	bl	8002e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cbe:	68b8      	ldr	r0, [r7, #8]
 8002cc0:	f7ff fef6 	bl	8002ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b098      	sub	sp, #96	; 0x60
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2222      	movs	r2, #34	; 0x22
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <UART_Start_Receive_DMA+0x130>)
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	4a3f      	ldr	r2, [pc, #252]	; (8002e00 <UART_Start_Receive_DMA+0x134>)
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	4a3e      	ldr	r2, [pc, #248]	; (8002e04 <UART_Start_Receive_DMA+0x138>)
 8002d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	2200      	movs	r2, #0
 8002d12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	f7fe f870 	bl	8000e10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d019      	beq.n	8002d8a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d76:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e5      	bne.n	8002d56 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	657b      	str	r3, [r7, #84]	; 0x54
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3314      	adds	r3, #20
 8002da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002daa:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db2:	e841 2300 	strex	r3, r2, [r1]
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1e5      	bne.n	8002d8a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3314      	adds	r3, #20
 8002dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dde:	627a      	str	r2, [r7, #36]	; 0x24
 8002de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	6a39      	ldr	r1, [r7, #32]
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e5      	bne.n	8002dbe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3760      	adds	r7, #96	; 0x60
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	08002add 	.word	0x08002add
 8002e00:	08002c03 	.word	0x08002c03
 8002e04:	08002c39 	.word	0x08002c39

08002e08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	e853 3f00 	ldrex	r3, [r3]
 8002e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	61ba      	str	r2, [r7, #24]
 8002e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	e841 2300 	strex	r3, r2, [r1]
 8002e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e5      	bne.n	8002e10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002e4c:	bf00      	nop
 8002e4e:	3724      	adds	r7, #36	; 0x24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b095      	sub	sp, #84	; 0x54
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	330c      	adds	r3, #12
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e80:	643a      	str	r2, [r7, #64]	; 0x40
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e5      	bne.n	8002e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3314      	adds	r3, #20
 8002e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	e841 2300 	strex	r3, r2, [r1]
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e5      	bne.n	8002e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d119      	bne.n	8002f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f023 0310 	bic.w	r3, r3, #16
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ef0:	61ba      	str	r2, [r7, #24]
 8002ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	6979      	ldr	r1, [r7, #20]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	613b      	str	r3, [r7, #16]
   return(result);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f12:	bf00      	nop
 8002f14:	3754      	adds	r7, #84	; 0x54
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fdb9 	bl	8002ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b21      	cmp	r3, #33	; 0x21
 8002f58:	d13e      	bne.n	8002fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d114      	bne.n	8002f8e <UART_Transmit_IT+0x48>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d110      	bne.n	8002f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	621a      	str	r2, [r3, #32]
 8002f8c:	e008      	b.n	8002fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6211      	str	r1, [r2, #32]
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4619      	mov	r1, r3
 8002fae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fd48 	bl	8002a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b08c      	sub	sp, #48	; 0x30
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b22      	cmp	r3, #34	; 0x22
 8003028:	f040 80ab 	bne.w	8003182 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003034:	d117      	bne.n	8003066 <UART_Receive_IT+0x50>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d113      	bne.n	8003066 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003054:	b29a      	uxth	r2, r3
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	1c9a      	adds	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
 8003064:	e026      	b.n	80030b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800306c:	2300      	movs	r3, #0
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d007      	beq.n	800308a <UART_Receive_IT+0x74>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <UART_Receive_IT+0x82>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e008      	b.n	80030aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4619      	mov	r1, r3
 80030c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d15a      	bne.n	800317e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0220 	bic.w	r2, r2, #32
 80030d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	2b01      	cmp	r3, #1
 8003106:	d135      	bne.n	8003174 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	613b      	str	r3, [r7, #16]
   return(result);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	623a      	str	r2, [r7, #32]
 8003130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	61bb      	str	r3, [r7, #24]
   return(result);
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b10      	cmp	r3, #16
 800314e:	d10a      	bne.n	8003166 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fca9 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
 8003172:	e002      	b.n	800317a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd f9d5 	bl	8000524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e002      	b.n	8003184 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3730      	adds	r7, #48	; 0x30
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800318c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003190:	b0c0      	sub	sp, #256	; 0x100
 8003192:	af00      	add	r7, sp, #0
 8003194:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	68d9      	ldr	r1, [r3, #12]
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	ea40 0301 	orr.w	r3, r0, r1
 80031b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031e4:	f021 010c 	bic.w	r1, r1, #12
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031f2:	430b      	orrs	r3, r1
 80031f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	6999      	ldr	r1, [r3, #24]
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	ea40 0301 	orr.w	r3, r0, r1
 8003212:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b8f      	ldr	r3, [pc, #572]	; (8003458 <UART_SetConfig+0x2cc>)
 800321c:	429a      	cmp	r2, r3
 800321e:	d005      	beq.n	800322c <UART_SetConfig+0xa0>
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b8d      	ldr	r3, [pc, #564]	; (800345c <UART_SetConfig+0x2d0>)
 8003228:	429a      	cmp	r2, r3
 800322a:	d104      	bne.n	8003236 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7fe fc48 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 8003230:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003234:	e003      	b.n	800323e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003236:	f7fe fc2f 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 800323a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003248:	f040 810c 	bne.w	8003464 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800324c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003250:	2200      	movs	r2, #0
 8003252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003256:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800325a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800325e:	4622      	mov	r2, r4
 8003260:	462b      	mov	r3, r5
 8003262:	1891      	adds	r1, r2, r2
 8003264:	65b9      	str	r1, [r7, #88]	; 0x58
 8003266:	415b      	adcs	r3, r3
 8003268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800326a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800326e:	4621      	mov	r1, r4
 8003270:	eb12 0801 	adds.w	r8, r2, r1
 8003274:	4629      	mov	r1, r5
 8003276:	eb43 0901 	adc.w	r9, r3, r1
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800328e:	4690      	mov	r8, r2
 8003290:	4699      	mov	r9, r3
 8003292:	4623      	mov	r3, r4
 8003294:	eb18 0303 	adds.w	r3, r8, r3
 8003298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800329c:	462b      	mov	r3, r5
 800329e:	eb49 0303 	adc.w	r3, r9, r3
 80032a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032ba:	460b      	mov	r3, r1
 80032bc:	18db      	adds	r3, r3, r3
 80032be:	653b      	str	r3, [r7, #80]	; 0x50
 80032c0:	4613      	mov	r3, r2
 80032c2:	eb42 0303 	adc.w	r3, r2, r3
 80032c6:	657b      	str	r3, [r7, #84]	; 0x54
 80032c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032d0:	f7fc ff98 	bl	8000204 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4b61      	ldr	r3, [pc, #388]	; (8003460 <UART_SetConfig+0x2d4>)
 80032da:	fba3 2302 	umull	r2, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	011c      	lsls	r4, r3, #4
 80032e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	1891      	adds	r1, r2, r2
 80032fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80032fc:	415b      	adcs	r3, r3
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003300:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003304:	4641      	mov	r1, r8
 8003306:	eb12 0a01 	adds.w	sl, r2, r1
 800330a:	4649      	mov	r1, r9
 800330c:	eb43 0b01 	adc.w	fp, r3, r1
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800331c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003324:	4692      	mov	sl, r2
 8003326:	469b      	mov	fp, r3
 8003328:	4643      	mov	r3, r8
 800332a:	eb1a 0303 	adds.w	r3, sl, r3
 800332e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003332:	464b      	mov	r3, r9
 8003334:	eb4b 0303 	adc.w	r3, fp, r3
 8003338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003348:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800334c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003350:	460b      	mov	r3, r1
 8003352:	18db      	adds	r3, r3, r3
 8003354:	643b      	str	r3, [r7, #64]	; 0x40
 8003356:	4613      	mov	r3, r2
 8003358:	eb42 0303 	adc.w	r3, r2, r3
 800335c:	647b      	str	r3, [r7, #68]	; 0x44
 800335e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003362:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003366:	f7fc ff4d 	bl	8000204 <__aeabi_uldivmod>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4611      	mov	r1, r2
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <UART_SetConfig+0x2d4>)
 8003372:	fba3 2301 	umull	r2, r3, r3, r1
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	1acb      	subs	r3, r1, r3
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <UART_SetConfig+0x2d4>)
 8003388:	fba3 2302 	umull	r2, r3, r3, r2
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003394:	441c      	add	r4, r3
 8003396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339a:	2200      	movs	r2, #0
 800339c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	1891      	adds	r1, r2, r2
 80033ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80033b0:	415b      	adcs	r3, r3
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033b8:	4641      	mov	r1, r8
 80033ba:	1851      	adds	r1, r2, r1
 80033bc:	6339      	str	r1, [r7, #48]	; 0x30
 80033be:	4649      	mov	r1, r9
 80033c0:	414b      	adcs	r3, r1
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033d0:	4659      	mov	r1, fp
 80033d2:	00cb      	lsls	r3, r1, #3
 80033d4:	4651      	mov	r1, sl
 80033d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033da:	4651      	mov	r1, sl
 80033dc:	00ca      	lsls	r2, r1, #3
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	4642      	mov	r2, r8
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033ec:	464b      	mov	r3, r9
 80033ee:	460a      	mov	r2, r1
 80033f0:	eb42 0303 	adc.w	r3, r2, r3
 80033f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003404:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800340c:	460b      	mov	r3, r1
 800340e:	18db      	adds	r3, r3, r3
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
 8003412:	4613      	mov	r3, r2
 8003414:	eb42 0303 	adc.w	r3, r2, r3
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800341a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800341e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003422:	f7fc feef 	bl	8000204 <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <UART_SetConfig+0x2d4>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	; 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a08      	ldr	r2, [pc, #32]	; (8003460 <UART_SetConfig+0x2d4>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 0207 	and.w	r2, r3, #7
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4422      	add	r2, r4
 8003452:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003454:	e105      	b.n	8003662 <UART_SetConfig+0x4d6>
 8003456:	bf00      	nop
 8003458:	40011000 	.word	0x40011000
 800345c:	40011400 	.word	0x40011400
 8003460:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003468:	2200      	movs	r2, #0
 800346a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800346e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003472:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003476:	4642      	mov	r2, r8
 8003478:	464b      	mov	r3, r9
 800347a:	1891      	adds	r1, r2, r2
 800347c:	6239      	str	r1, [r7, #32]
 800347e:	415b      	adcs	r3, r3
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
 8003482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003486:	4641      	mov	r1, r8
 8003488:	1854      	adds	r4, r2, r1
 800348a:	4649      	mov	r1, r9
 800348c:	eb43 0501 	adc.w	r5, r3, r1
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	00eb      	lsls	r3, r5, #3
 800349a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349e:	00e2      	lsls	r2, r4, #3
 80034a0:	4614      	mov	r4, r2
 80034a2:	461d      	mov	r5, r3
 80034a4:	4643      	mov	r3, r8
 80034a6:	18e3      	adds	r3, r4, r3
 80034a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034ac:	464b      	mov	r3, r9
 80034ae:	eb45 0303 	adc.w	r3, r5, r3
 80034b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034d2:	4629      	mov	r1, r5
 80034d4:	008b      	lsls	r3, r1, #2
 80034d6:	4621      	mov	r1, r4
 80034d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034dc:	4621      	mov	r1, r4
 80034de:	008a      	lsls	r2, r1, #2
 80034e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034e4:	f7fc fe8e 	bl	8000204 <__aeabi_uldivmod>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4b60      	ldr	r3, [pc, #384]	; (8003670 <UART_SetConfig+0x4e4>)
 80034ee:	fba3 2302 	umull	r2, r3, r3, r2
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	011c      	lsls	r4, r3, #4
 80034f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003500:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003504:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003508:	4642      	mov	r2, r8
 800350a:	464b      	mov	r3, r9
 800350c:	1891      	adds	r1, r2, r2
 800350e:	61b9      	str	r1, [r7, #24]
 8003510:	415b      	adcs	r3, r3
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003518:	4641      	mov	r1, r8
 800351a:	1851      	adds	r1, r2, r1
 800351c:	6139      	str	r1, [r7, #16]
 800351e:	4649      	mov	r1, r9
 8003520:	414b      	adcs	r3, r1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003530:	4659      	mov	r1, fp
 8003532:	00cb      	lsls	r3, r1, #3
 8003534:	4651      	mov	r1, sl
 8003536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353a:	4651      	mov	r1, sl
 800353c:	00ca      	lsls	r2, r1, #3
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	4603      	mov	r3, r0
 8003544:	4642      	mov	r2, r8
 8003546:	189b      	adds	r3, r3, r2
 8003548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800354c:	464b      	mov	r3, r9
 800354e:	460a      	mov	r2, r1
 8003550:	eb42 0303 	adc.w	r3, r2, r3
 8003554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	67bb      	str	r3, [r7, #120]	; 0x78
 8003562:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003570:	4649      	mov	r1, r9
 8003572:	008b      	lsls	r3, r1, #2
 8003574:	4641      	mov	r1, r8
 8003576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357a:	4641      	mov	r1, r8
 800357c:	008a      	lsls	r2, r1, #2
 800357e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003582:	f7fc fe3f 	bl	8000204 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <UART_SetConfig+0x4e4>)
 800358c:	fba3 1302 	umull	r1, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	2164      	movs	r1, #100	; 0x64
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	3332      	adds	r3, #50	; 0x32
 800359e:	4a34      	ldr	r2, [pc, #208]	; (8003670 <UART_SetConfig+0x4e4>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035aa:	441c      	add	r4, r3
 80035ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b0:	2200      	movs	r2, #0
 80035b2:	673b      	str	r3, [r7, #112]	; 0x70
 80035b4:	677a      	str	r2, [r7, #116]	; 0x74
 80035b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035ba:	4642      	mov	r2, r8
 80035bc:	464b      	mov	r3, r9
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	415b      	adcs	r3, r3
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ca:	4641      	mov	r1, r8
 80035cc:	1851      	adds	r1, r2, r1
 80035ce:	6039      	str	r1, [r7, #0]
 80035d0:	4649      	mov	r1, r9
 80035d2:	414b      	adcs	r3, r1
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035e2:	4659      	mov	r1, fp
 80035e4:	00cb      	lsls	r3, r1, #3
 80035e6:	4651      	mov	r1, sl
 80035e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ec:	4651      	mov	r1, sl
 80035ee:	00ca      	lsls	r2, r1, #3
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	4603      	mov	r3, r0
 80035f6:	4642      	mov	r2, r8
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80035fc:	464b      	mov	r3, r9
 80035fe:	460a      	mov	r2, r1
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	663b      	str	r3, [r7, #96]	; 0x60
 8003610:	667a      	str	r2, [r7, #100]	; 0x64
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800361e:	4649      	mov	r1, r9
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	4641      	mov	r1, r8
 8003624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003628:	4641      	mov	r1, r8
 800362a:	008a      	lsls	r2, r1, #2
 800362c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003630:	f7fc fde8 	bl	8000204 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <UART_SetConfig+0x4e4>)
 800363a:	fba3 1302 	umull	r1, r3, r3, r2
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	2164      	movs	r1, #100	; 0x64
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	3332      	adds	r3, #50	; 0x32
 800364c:	4a08      	ldr	r2, [pc, #32]	; (8003670 <UART_SetConfig+0x4e4>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	f003 020f 	and.w	r2, r3, #15
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4422      	add	r2, r4
 8003660:	609a      	str	r2, [r3, #8]
}
 8003662:	bf00      	nop
 8003664:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	51eb851f 	.word	0x51eb851f

08003674 <__libc_init_array>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	4d0d      	ldr	r5, [pc, #52]	; (80036ac <__libc_init_array+0x38>)
 8003678:	4c0d      	ldr	r4, [pc, #52]	; (80036b0 <__libc_init_array+0x3c>)
 800367a:	1b64      	subs	r4, r4, r5
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	2600      	movs	r6, #0
 8003680:	42a6      	cmp	r6, r4
 8003682:	d109      	bne.n	8003698 <__libc_init_array+0x24>
 8003684:	4d0b      	ldr	r5, [pc, #44]	; (80036b4 <__libc_init_array+0x40>)
 8003686:	4c0c      	ldr	r4, [pc, #48]	; (80036b8 <__libc_init_array+0x44>)
 8003688:	f000 f820 	bl	80036cc <_init>
 800368c:	1b64      	subs	r4, r4, r5
 800368e:	10a4      	asrs	r4, r4, #2
 8003690:	2600      	movs	r6, #0
 8003692:	42a6      	cmp	r6, r4
 8003694:	d105      	bne.n	80036a2 <__libc_init_array+0x2e>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	f855 3b04 	ldr.w	r3, [r5], #4
 800369c:	4798      	blx	r3
 800369e:	3601      	adds	r6, #1
 80036a0:	e7ee      	b.n	8003680 <__libc_init_array+0xc>
 80036a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a6:	4798      	blx	r3
 80036a8:	3601      	adds	r6, #1
 80036aa:	e7f2      	b.n	8003692 <__libc_init_array+0x1e>
 80036ac:	0800370c 	.word	0x0800370c
 80036b0:	0800370c 	.word	0x0800370c
 80036b4:	0800370c 	.word	0x0800370c
 80036b8:	08003710 	.word	0x08003710

080036bc <memset>:
 80036bc:	4402      	add	r2, r0
 80036be:	4603      	mov	r3, r0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	bf00      	nop
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
