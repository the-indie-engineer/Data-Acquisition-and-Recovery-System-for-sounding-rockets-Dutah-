
XBEE_UART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003770  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800395c  0800395c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000010  08003974  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003974  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c98  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001986  00000000  00000000  00029cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020453  00000000  00000000  0002c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a075  00000000  00000000  0004c93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4635  00000000  00000000  000569b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011afe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001da4  00000000  00000000  0011b038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800391c 	.word	0x0800391c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	0800391c 	.word	0x0800391c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa7c 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f818 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8da 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8b0 	bl	800067c <MX_DMA_Init>
  MX_UART4_Init();
 800051c:	f000 f884 	bl	8000628 <MX_UART4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_DMA(&huart4, rx_data, sizeof(rx_data));
 8000520:	2201      	movs	r2, #1
 8000522:	4905      	ldr	r1, [pc, #20]	; (8000538 <main+0x30>)
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <main+0x34>)
 8000526:	f002 f8a0 	bl	800266a <HAL_UART_Receive_DMA>
	  HAL_UART_Transmit(&huart4, tx1_data, sizeof(tx1_data),100);
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	2201      	movs	r2, #1
 800052e:	4904      	ldr	r1, [pc, #16]	; (8000540 <main+0x38>)
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <main+0x34>)
 8000532:	f002 f808 	bl	8002546 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart4, rx_data, sizeof(rx_data));
 8000536:	e7f3      	b.n	8000520 <main+0x18>
 8000538:	20000130 	.word	0x20000130
 800053c:	2000002c 	.word	0x2000002c
 8000540:	20000000 	.word	0x20000000

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2234      	movs	r2, #52	; 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f9da 	bl	800390c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <SystemClock_Config+0xdc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a2b      	ldr	r2, [pc, #172]	; (8000620 <SystemClock_Config+0xdc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <SystemClock_Config+0xdc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xe0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a25      	ldr	r2, [pc, #148]	; (8000624 <SystemClock_Config+0xe0>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <SystemClock_Config+0xe0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005b8:	23b4      	movs	r3, #180	; 0xb4
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fccf 	bl	8001f70 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 f8ae 	bl	8000738 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005dc:	f001 f92e 	bl	800183c <HAL_PWREx_EnableOverDrive>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e6:	f000 f8a7 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f967 	bl	80018dc <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000614:	f000 f890 	bl	8000738 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_UART4_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_UART4_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_UART4_Init+0x4c>)
 8000634:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000638:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_UART4_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_UART4_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_UART4_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_UART4_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_UART4_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_UART4_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_UART4_Init+0x4c>)
 8000660:	f001 ff24 	bl	80024ac <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f865 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40004c00 	.word	0x40004c00

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <MX_DMA_Init+0x4c>)
 800068c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_DMA_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	200d      	movs	r0, #13
 80006a4:	f000 fafd 	bl	8000ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006a8:	200d      	movs	r0, #13
 80006aa:	f000 fb16 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	200f      	movs	r0, #15
 80006b4:	f000 faf5 	bl	8000ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006b8:	200f      	movs	r0, #15
 80006ba:	f000 fb0e 	bl	8000cda <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_GPIO_Init+0x68>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_GPIO_Init+0x68>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_GPIO_Init+0x68>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_GPIO_Init+0x68>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <MX_GPIO_Init+0x68>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_GPIO_Init+0x68>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_GPIO_Init+0x68>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <MX_GPIO_Init+0x68>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_GPIO_Init+0x68>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <HAL_MspInit+0x4c>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000782:	2007      	movs	r0, #7
 8000784:	f000 fa82 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a4c      	ldr	r2, [pc, #304]	; (80008e4 <HAL_UART_MspInit+0x150>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	f040 8092 	bne.w	80008dc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <HAL_UART_MspInit+0x154>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a49      	ldr	r2, [pc, #292]	; (80008e8 <HAL_UART_MspInit+0x154>)
 80007c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <HAL_UART_MspInit+0x154>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <HAL_UART_MspInit+0x154>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a42      	ldr	r2, [pc, #264]	; (80008e8 <HAL_UART_MspInit+0x154>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <HAL_UART_MspInit+0x154>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007f0:	2303      	movs	r3, #3
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000800:	2308      	movs	r3, #8
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4838      	ldr	r0, [pc, #224]	; (80008ec <HAL_UART_MspInit+0x158>)
 800080c:	f000 fe82 	bl	8001514 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000812:	4a38      	ldr	r2, [pc, #224]	; (80008f4 <HAL_UART_MspInit+0x160>)
 8000814:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000818:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 800082c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000830:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000838:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000844:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000846:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000852:	4827      	ldr	r0, [pc, #156]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000854:	f000 fa5c 	bl	8000d10 <HAL_DMA_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800085e:	f7ff ff6b 	bl	8000738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 8000866:	639a      	str	r2, [r3, #56]	; 0x38
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_UART_MspInit+0x15c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <HAL_UART_MspInit+0x164>)
 8000870:	4a22      	ldr	r2, [pc, #136]	; (80008fc <HAL_UART_MspInit+0x168>)
 8000872:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_UART_MspInit+0x164>)
 8000876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800087a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <HAL_UART_MspInit+0x164>)
 800087e:	2240      	movs	r2, #64	; 0x40
 8000880:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_UART_MspInit+0x164>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_UART_MspInit+0x164>)
 800088a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_UART_MspInit+0x164>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0x164>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_UART_MspInit+0x164>)
 800089e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0x164>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <HAL_UART_MspInit+0x164>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <HAL_UART_MspInit+0x164>)
 80008b2:	f000 fa2d 	bl	8000d10 <HAL_DMA_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80008bc:	f7ff ff3c 	bl	8000738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <HAL_UART_MspInit+0x164>)
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <HAL_UART_MspInit+0x164>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2034      	movs	r0, #52	; 0x34
 80008d2:	f000 f9e6 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80008d6:	2034      	movs	r0, #52	; 0x34
 80008d8:	f000 f9ff 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004c00 	.word	0x40004c00
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	20000070 	.word	0x20000070
 80008f4:	40026040 	.word	0x40026040
 80008f8:	200000d0 	.word	0x200000d0
 80008fc:	40026070 	.word	0x40026070

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f8ae 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <DMA1_Stream2_IRQHandler+0x10>)
 800095a:	f000 fb71 	bl	8001040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000070 	.word	0x20000070

08000968 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <DMA1_Stream4_IRQHandler+0x10>)
 800096e:	f000 fb67 	bl	8001040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000d0 	.word	0x200000d0

0800097c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <UART4_IRQHandler+0x10>)
 8000982:	f001 fea3 	bl	80026cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000002c 	.word	0x2000002c

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009de:	f7ff ffd7 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f002 ff6f 	bl	80038c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fd8f 	bl	8000508 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f8:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 80009fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a00:	20000138 	.word	0x20000138

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f92b 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fe82 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f943 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f90b 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	2000000c 	.word	0x2000000c
 8000aa8:	20000008 	.word	0x20000008

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	20000134 	.word	0x20000134

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000134 	.word	0x20000134

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff29 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff3e 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff31 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff feda 	bl	8000ad4 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e099      	b.n	8000e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d4c:	e00f      	b.n	8000d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d4e:	f7ff fec1 	bl	8000ad4 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	d908      	bls.n	8000d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e078      	b.n	8000e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1e8      	bne.n	8000d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <HAL_DMA_Init+0x158>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d107      	bne.n	8000dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f023 0307 	bic.w	r3, r3, #7
 8000dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d117      	bne.n	8000e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00e      	beq.n	8000e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 fb01 	bl	800141c <DMA_CheckFifoParam>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d008      	beq.n	8000e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e016      	b.n	8000e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 fab8 	bl	80013b0 <DMA_CalcBaseAndBitshift>
 8000e40:	4603      	mov	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e48:	223f      	movs	r2, #63	; 0x3f
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	f010803f 	.word	0xf010803f

08000e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d101      	bne.n	8000e92 <HAL_DMA_Start_IT+0x26>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e040      	b.n	8000f14 <HAL_DMA_Start_IT+0xa8>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d12f      	bne.n	8000f06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 fa4a 	bl	8001354 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec4:	223f      	movs	r2, #63	; 0x3f
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0216 	orr.w	r2, r2, #22
 8000eda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d007      	beq.n	8000ef4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0208 	orr.w	r2, r2, #8
 8000ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e005      	b.n	8000f12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f2a:	f7ff fdd3 	bl	8000ad4 <HAL_GetTick>
 8000f2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d008      	beq.n	8000f4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e052      	b.n	8000ff4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0216 	bic.w	r2, r2, #22
 8000f5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d103      	bne.n	8000f7e <HAL_DMA_Abort+0x62>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0208 	bic.w	r2, r2, #8
 8000f8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0201 	bic.w	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9e:	e013      	b.n	8000fc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fa0:	f7ff fd98 	bl	8000ad4 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d90c      	bls.n	8000fc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e015      	b.n	8000ff4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1e4      	bne.n	8000fa0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fda:	223f      	movs	r2, #63	; 0x3f
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d004      	beq.n	800101a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00c      	b.n	8001034 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2205      	movs	r2, #5
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800104c:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <HAL_DMA_IRQHandler+0x248>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a8e      	ldr	r2, [pc, #568]	; (800128c <HAL_DMA_IRQHandler+0x24c>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0a9b      	lsrs	r3, r3, #10
 8001058:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	2208      	movs	r2, #8
 800106c:	409a      	lsls	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d01a      	beq.n	80010ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0204 	bic.w	r2, r2, #4
 8001092:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001098:	2208      	movs	r2, #8
 800109a:	409a      	lsls	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	2201      	movs	r2, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d012      	beq.n	80010e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ce:	2201      	movs	r2, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	f043 0202 	orr.w	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	2204      	movs	r2, #4
 80010e8:	409a      	lsls	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d012      	beq.n	8001118 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	2204      	movs	r2, #4
 8001106:	409a      	lsls	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	f043 0204 	orr.w	r2, r3, #4
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111c:	2210      	movs	r2, #16
 800111e:	409a      	lsls	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d043      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d03c      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113a:	2210      	movs	r2, #16
 800113c:	409a      	lsls	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d018      	beq.n	8001182 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	d024      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
 800116e:	e01f      	b.n	80011b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01b      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	4798      	blx	r3
 8001180:	e016      	b.n	80011b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0208 	bic.w	r2, r2, #8
 800119e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	2220      	movs	r2, #32
 80011b6:	409a      	lsls	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 808f 	beq.w	80012e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 8087 	beq.w	80012e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	2220      	movs	r2, #32
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d136      	bne.n	8001258 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0216 	bic.w	r2, r2, #22
 80011f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001208:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <HAL_DMA_IRQHandler+0x1da>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0208 	bic.w	r2, r2, #8
 8001228:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122e:	223f      	movs	r2, #63	; 0x3f
 8001230:	409a      	lsls	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124a:	2b00      	cmp	r3, #0
 800124c:	d07e      	beq.n	800134c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	4798      	blx	r3
        }
        return;
 8001256:	e079      	b.n	800134c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d01d      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10d      	bne.n	8001290 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	2b00      	cmp	r3, #0
 800127a:	d031      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
 8001284:	e02c      	b.n	80012e0 <HAL_DMA_IRQHandler+0x2a0>
 8001286:	bf00      	nop
 8001288:	20000004 	.word	0x20000004
 800128c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001294:	2b00      	cmp	r3, #0
 8001296:	d023      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
 80012a0:	e01e      	b.n	80012e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10f      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0210 	bic.w	r2, r2, #16
 80012be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d032      	beq.n	800134e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d022      	beq.n	800133a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2205      	movs	r2, #5
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	3301      	adds	r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	d307      	bcc.n	8001328 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f2      	bne.n	800130c <HAL_DMA_IRQHandler+0x2cc>
 8001326:	e000      	b.n	800132a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001328:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	4798      	blx	r3
 800134a:	e000      	b.n	800134e <HAL_DMA_IRQHandler+0x30e>
        return;
 800134c:	bf00      	nop
    }
  }
}
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001370:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b40      	cmp	r3, #64	; 0x40
 8001380:	d108      	bne.n	8001394 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001392:	e007      	b.n	80013a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	60da      	str	r2, [r3, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3b10      	subs	r3, #16
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <DMA_CalcBaseAndBitshift+0x64>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <DMA_CalcBaseAndBitshift+0x68>)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d909      	bls.n	80013f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013e6:	f023 0303 	bic.w	r3, r3, #3
 80013ea:	1d1a      	adds	r2, r3, #4
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
 80013f0:	e007      	b.n	8001402 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	aaaaaaab 	.word	0xaaaaaaab
 8001418:	0800394c 	.word	0x0800394c

0800141c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11f      	bne.n	8001476 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b03      	cmp	r3, #3
 800143a:	d856      	bhi.n	80014ea <DMA_CheckFifoParam+0xce>
 800143c:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <DMA_CheckFifoParam+0x28>)
 800143e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001442:	bf00      	nop
 8001444:	08001455 	.word	0x08001455
 8001448:	08001467 	.word	0x08001467
 800144c:	08001455 	.word	0x08001455
 8001450:	080014eb 	.word	0x080014eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d046      	beq.n	80014ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001464:	e043      	b.n	80014ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800146e:	d140      	bne.n	80014f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001474:	e03d      	b.n	80014f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800147e:	d121      	bne.n	80014c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d837      	bhi.n	80014f6 <DMA_CheckFifoParam+0xda>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <DMA_CheckFifoParam+0x70>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014a3 	.word	0x080014a3
 8001494:	0800149d 	.word	0x0800149d
 8001498:	080014b5 	.word	0x080014b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
      break;
 80014a0:	e030      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d025      	beq.n	80014fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b2:	e022      	b.n	80014fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014bc:	d11f      	bne.n	80014fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014c2:	e01c      	b.n	80014fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d903      	bls.n	80014d2 <DMA_CheckFifoParam+0xb6>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d003      	beq.n	80014d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014d0:	e018      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
      break;
 80014d6:	e015      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
      break;
 80014e8:	e00b      	b.n	8001502 <DMA_CheckFifoParam+0xe6>
      break;
 80014ea:	bf00      	nop
 80014ec:	e00a      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014ee:	bf00      	nop
 80014f0:	e008      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014f2:	bf00      	nop
 80014f4:	e006      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014f6:	bf00      	nop
 80014f8:	e004      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 80014fa:	bf00      	nop
 80014fc:	e002      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;   
 80014fe:	bf00      	nop
 8001500:	e000      	b.n	8001504 <DMA_CheckFifoParam+0xe8>
      break;
 8001502:	bf00      	nop
    }
  } 
  
  return status; 
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e165      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8154 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80ae 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a5c      	ldr	r2, [pc, #368]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_GPIO_Init+0x304>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_GPIO_Init+0x308>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d025      	beq.n	800172e <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_GPIO_Init+0x30c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01f      	beq.n	800172a <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x310>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_GPIO_Init+0x314>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	; (800182c <HAL_GPIO_Init+0x318>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x20a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <HAL_GPIO_Init+0x31c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x206>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	; (8001834 <HAL_GPIO_Init+0x320>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x202>
 8001712:	2306      	movs	r3, #6
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001716:	2307      	movs	r3, #7
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_GPIO_Init+0x324>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <HAL_GPIO_Init+0x324>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_GPIO_Init+0x324>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_GPIO_Init+0x324>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_GPIO_Init+0x324>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae96 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_PWREx_EnableOverDrive+0x90>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_PWREx_EnableOverDrive+0x90>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_PWREx_EnableOverDrive+0x90>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001868:	f7ff f934 	bl	8000ad4 <HAL_GetTick>
 800186c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800186e:	e009      	b.n	8001884 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001870:	f7ff f930 	bl	8000ad4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800187e:	d901      	bls.n	8001884 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e01f      	b.n	80018c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d1ee      	bne.n	8001870 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001898:	f7ff f91c 	bl	8000ad4 <HAL_GetTick>
 800189c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800189e:	e009      	b.n	80018b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018a0:	f7ff f918 	bl	8000ad4 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ae:	d901      	bls.n	80018b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e007      	b.n	80018c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018c0:	d1ee      	bne.n	80018a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	420e0040 	.word	0x420e0040
 80018d4:	40007000 	.word	0x40007000
 80018d8:	420e0044 	.word	0x420e0044

080018dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0cc      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d90c      	bls.n	8001918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0b8      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001930:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800193a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001948:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a52      	ldr	r2, [pc, #328]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	494d      	ldr	r1, [pc, #308]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d044      	beq.n	80019fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d119      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e07f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d003      	beq.n	800199a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e067      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4934      	ldr	r1, [pc, #208]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f882 	bl	8000ad4 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff f87e 	bl	8000ad4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e04f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 020c 	and.w	r2, r3, #12
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1eb      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d20c      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e032      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4916      	ldr	r1, [pc, #88]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	490e      	ldr	r1, [pc, #56]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a62:	f000 f855 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	490a      	ldr	r1, [pc, #40]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	5ccb      	ldrb	r3, [r1, r3]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe ffe2 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08003934 	.word	0x08003934
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08003944 	.word	0x08003944

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffdc 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08003944 	.word	0x08003944

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b14:	b0ae      	sub	sp, #184	; 0xb8
 8001b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b36:	4bcb      	ldr	r3, [pc, #812]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	f200 8206 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x440>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b81 	.word	0x08001b81
 8001b50:	08001f51 	.word	0x08001f51
 8001b54:	08001f51 	.word	0x08001f51
 8001b58:	08001f51 	.word	0x08001f51
 8001b5c:	08001b89 	.word	0x08001b89
 8001b60:	08001f51 	.word	0x08001f51
 8001b64:	08001f51 	.word	0x08001f51
 8001b68:	08001f51 	.word	0x08001f51
 8001b6c:	08001b91 	.word	0x08001b91
 8001b70:	08001f51 	.word	0x08001f51
 8001b74:	08001f51 	.word	0x08001f51
 8001b78:	08001f51 	.word	0x08001f51
 8001b7c:	08001d81 	.word	0x08001d81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4bb9      	ldr	r3, [pc, #740]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001b86:	e1e7      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b88:	4bb8      	ldr	r3, [pc, #736]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b8e:	e1e3      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	4bb4      	ldr	r3, [pc, #720]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9c:	4bb1      	ldr	r3, [pc, #708]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d071      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4bae      	ldr	r3, [pc, #696]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4621      	mov	r1, r4
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	6439      	str	r1, [r7, #64]	; 0x40
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c00:	4649      	mov	r1, r9
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	4641      	mov	r1, r8
 8001c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	018a      	lsls	r2, r1, #6
 8001c0e:	4641      	mov	r1, r8
 8001c10:	1a51      	subs	r1, r2, r1
 8001c12:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c14:	4649      	mov	r1, r9
 8001c16:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c28:	4649      	mov	r1, r9
 8001c2a:	00cb      	lsls	r3, r1, #3
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c32:	4641      	mov	r1, r8
 8001c34:	00ca      	lsls	r2, r1, #3
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
 8001c42:	462b      	mov	r3, r5
 8001c44:	460a      	mov	r2, r1
 8001c46:	eb42 0303 	adc.w	r3, r2, r3
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c58:	4629      	mov	r1, r5
 8001c5a:	024b      	lsls	r3, r1, #9
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c62:	4621      	mov	r1, r4
 8001c64:	024a      	lsls	r2, r1, #9
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c7c:	f7fe fac2 	bl	8000204 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c8a:	e067      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8c:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001caa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001cae:	4622      	mov	r2, r4
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	0159      	lsls	r1, r3, #5
 8001cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc0:	0150      	lsls	r0, r2, #5
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	1a51      	subs	r1, r2, r1
 8001cca:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ccc:	4629      	mov	r1, r5
 8001cce:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ce0:	4649      	mov	r1, r9
 8001ce2:	018b      	lsls	r3, r1, #6
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cea:	4641      	mov	r1, r8
 8001cec:	018a      	lsls	r2, r1, #6
 8001cee:	4641      	mov	r1, r8
 8001cf0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d0e:	4692      	mov	sl, r2
 8001d10:	469b      	mov	fp, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	eb1a 0303 	adds.w	r3, sl, r3
 8001d18:	623b      	str	r3, [r7, #32]
 8001d1a:	462b      	mov	r3, r5
 8001d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	028b      	lsls	r3, r1, #10
 8001d32:	4621      	mov	r1, r4
 8001d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d38:	4621      	mov	r1, r4
 8001d3a:	028a      	lsls	r2, r1, #10
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d44:	2200      	movs	r2, #0
 8001d46:	673b      	str	r3, [r7, #112]	; 0x70
 8001d48:	677a      	str	r2, [r7, #116]	; 0x74
 8001d4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d4e:	f7fe fa59 	bl	8000204 <__aeabi_uldivmod>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4613      	mov	r3, r2
 8001d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d5c:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d7e:	e0eb      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d06b      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d98:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	2200      	movs	r2, #0
 8001da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001da2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001daa:	663b      	str	r3, [r7, #96]	; 0x60
 8001dac:	2300      	movs	r3, #0
 8001dae:	667b      	str	r3, [r7, #100]	; 0x64
 8001db0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001db4:	4622      	mov	r2, r4
 8001db6:	462b      	mov	r3, r5
 8001db8:	f04f 0000 	mov.w	r0, #0
 8001dbc:	f04f 0100 	mov.w	r1, #0
 8001dc0:	0159      	lsls	r1, r3, #5
 8001dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc6:	0150      	lsls	r0, r2, #5
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4621      	mov	r1, r4
 8001dce:	1a51      	subs	r1, r2, r1
 8001dd0:	61b9      	str	r1, [r7, #24]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001de6:	4659      	mov	r1, fp
 8001de8:	018b      	lsls	r3, r1, #6
 8001dea:	4651      	mov	r1, sl
 8001dec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001df0:	4651      	mov	r1, sl
 8001df2:	018a      	lsls	r2, r1, #6
 8001df4:	4651      	mov	r1, sl
 8001df6:	ebb2 0801 	subs.w	r8, r2, r1
 8001dfa:	4659      	mov	r1, fp
 8001dfc:	eb63 0901 	sbc.w	r9, r3, r1
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e14:	4690      	mov	r8, r2
 8001e16:	4699      	mov	r9, r3
 8001e18:	4623      	mov	r3, r4
 8001e1a:	eb18 0303 	adds.w	r3, r8, r3
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	462b      	mov	r3, r5
 8001e22:	eb49 0303 	adc.w	r3, r9, r3
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e34:	4629      	mov	r1, r5
 8001e36:	024b      	lsls	r3, r1, #9
 8001e38:	4621      	mov	r1, r4
 8001e3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e3e:	4621      	mov	r1, r4
 8001e40:	024a      	lsls	r2, r1, #9
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e54:	f7fe f9d6 	bl	8000204 <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e62:	e065      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x420>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	099b      	lsrs	r3, r3, #6
 8001e76:	2200      	movs	r2, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e80:	653b      	str	r3, [r7, #80]	; 0x50
 8001e82:	2300      	movs	r3, #0
 8001e84:	657b      	str	r3, [r7, #84]	; 0x54
 8001e86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	464b      	mov	r3, r9
 8001e8e:	f04f 0000 	mov.w	r0, #0
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	0159      	lsls	r1, r3, #5
 8001e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9c:	0150      	lsls	r0, r2, #5
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	1a51      	subs	r1, r2, r1
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	018b      	lsls	r3, r1, #6
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	018a      	lsls	r2, r1, #6
 8001eca:	4651      	mov	r1, sl
 8001ecc:	1a54      	subs	r4, r2, r1
 8001ece:	4659      	mov	r1, fp
 8001ed0:	eb63 0501 	sbc.w	r5, r3, r1
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	00eb      	lsls	r3, r5, #3
 8001ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee2:	00e2      	lsls	r2, r4, #3
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	4643      	mov	r3, r8
 8001eea:	18e3      	adds	r3, r4, r3
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	464b      	mov	r3, r9
 8001ef0:	eb45 0303 	adc.w	r3, r5, r3
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f02:	4629      	mov	r1, r5
 8001f04:	028b      	lsls	r3, r1, #10
 8001f06:	4621      	mov	r1, r4
 8001f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	028a      	lsls	r2, r1, #10
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f18:	2200      	movs	r2, #0
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f22:	f7fe f96f 	bl	8000204 <__aeabi_uldivmod>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0f1b      	lsrs	r3, r3, #28
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f4e:	e003      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	37b8      	adds	r7, #184	; 0xb8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	00f42400 	.word	0x00f42400

08001f70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e28d      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8083 	beq.w	8002096 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f90:	4b94      	ldr	r3, [pc, #592]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f9c:	4b91      	ldr	r3, [pc, #580]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa8:	4b8e      	ldr	r3, [pc, #568]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d112      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05b      	beq.n	8002094 <HAL_RCC_OscConfig+0x124>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d157      	bne.n	8002094 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e25a      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x90>
 8001ff2:	4b7c      	ldr	r3, [pc, #496]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7b      	ldr	r2, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xcc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xb4>
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a75      	ldr	r2, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b73      	ldr	r3, [pc, #460]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a72      	ldr	r2, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xcc>
 8002024:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6e      	ldr	r2, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6b      	ldr	r2, [pc, #428]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fd46 	bl	8000ad4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe fd42 	bl	8000ad4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e21f      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xdc>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe fd32 	bl	8000ad4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fd2e 	bl	8000ad4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e20b      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x104>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06f      	beq.n	8002182 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020a2:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d017      	beq.n	80020de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ae:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ba:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x186>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1d3      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_OscConfig+0x278>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fcdb 	bl	8000ad4 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe fcd7 	bl	8000ad4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1b4      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4925      	ldr	r1, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x278>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fcba 	bl	8000ad4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002164:	f7fe fcb6 	bl	8000ad4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e193      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d036      	beq.n	80021fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7fe fc9a 	bl	8000ad4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a4:	f7fe fc96 	bl	8000ad4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e173      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x234>
 80021c2:	e01b      	b.n	80021fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7fe fc83 	bl	8000ad4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	e00e      	b.n	80021f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d2:	f7fe fc7f 	bl	8000ad4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d907      	bls.n	80021f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e15c      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000
 80021ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b8a      	ldr	r3, [pc, #552]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ea      	bne.n	80021d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8097 	beq.w	8002338 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b83      	ldr	r3, [pc, #524]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b7f      	ldr	r3, [pc, #508]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a7e      	ldr	r2, [pc, #504]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b7c      	ldr	r3, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b79      	ldr	r3, [pc, #484]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7fe fc3f 	bl	8000ad4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7fe fc3b 	bl	8000ad4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e118      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x4b0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x31e>
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a65      	ldr	r2, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x358>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x340>
 8002296:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a60      	ldr	r2, [pc, #384]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b5e      	ldr	r3, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a5d      	ldr	r2, [pc, #372]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x358>
 80022b0:	4b5a      	ldr	r3, [pc, #360]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a59      	ldr	r2, [pc, #356]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a56      	ldr	r2, [pc, #344]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fc00 	bl	8000ad4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe fbfc 	bl	8000ad4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0d7      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0ee      	beq.n	80022d8 <HAL_RCC_OscConfig+0x368>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe fbea 	bl	8000ad4 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fbe6 	bl	8000ad4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0c1      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	4b40      	ldr	r3, [pc, #256]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ee      	bne.n	8002304 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80ad 	beq.w	800249c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d060      	beq.n	8002410 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d145      	bne.n	80023e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b33      	ldr	r3, [pc, #204]	; (8002424 <HAL_RCC_OscConfig+0x4b4>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fbba 	bl	8000ad4 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fbb6 	bl	8000ad4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e093      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	3b01      	subs	r3, #1
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	491b      	ldr	r1, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x4b4>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fb8b 	bl	8000ad4 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fb87 	bl	8000ad4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e064      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x452>
 80023e0:	e05c      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x4b4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fb74 	bl	8000ad4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fb70 	bl	8000ad4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04d      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_OscConfig+0x4ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x480>
 800240e:	e045      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e040      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000
 8002424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_RCC_OscConfig+0x538>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d030      	beq.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d129      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d122      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800245e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d119      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	3b01      	subs	r3, #1
 8002472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d10f      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03f      	b.n	800253e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe f95e 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	; 0x24
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 ff73 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b08a      	sub	sp, #40	; 0x28
 800254a:	af02      	add	r7, sp, #8
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d17c      	bne.n	8002660 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_Transmit+0x2c>
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e075      	b.n	8002662 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_UART_Transmit+0x3e>
 8002580:	2302      	movs	r3, #2
 8002582:	e06e      	b.n	8002662 <HAL_UART_Transmit+0x11c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2221      	movs	r2, #33	; 0x21
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800259a:	f7fe fa9b 	bl	8000ad4 <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b4:	d108      	bne.n	80025c8 <HAL_UART_Transmit+0x82>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e003      	b.n	80025d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025d8:	e02a      	b.n	8002630 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fc2b 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e036      	b.n	8002662 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3302      	adds	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e007      	b.n	8002622 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1cf      	bne.n	80025da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2200      	movs	r2, #0
 8002642:	2140      	movs	r1, #64	; 0x40
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fbfb 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e006      	b.n	8002662 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	d11d      	bne.n	80026c0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Receive_DMA+0x26>
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e016      	b.n	80026c2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Receive_DMA+0x38>
 800269e:	2302      	movs	r3, #2
 80026a0:	e00f      	b.n	80026c2 <HAL_UART_Receive_DMA+0x58>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fc30 	bl	8002f1c <UART_Start_Receive_DMA>
 80026bc:	4603      	mov	r3, r0
 80026be:	e000      	b.n	80026c2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b0ba      	sub	sp, #232	; 0xe8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800270a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_UART_IRQHandler+0x66>
 800271e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fd9b 	bl	8003266 <UART_Receive_IT>
      return;
 8002730:	e256      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80de 	beq.w	80028f8 <HAL_UART_IRQHandler+0x22c>
 800273c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80d1 	beq.w	80028f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_UART_IRQHandler+0xae>
 8002762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800277a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_UART_IRQHandler+0xd2>
 8002786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_UART_IRQHandler+0xf6>
 80027aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f043 0204 	orr.w	r2, r3, #4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d011      	beq.n	80027f2 <HAL_UART_IRQHandler+0x126>
 80027ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0208 	orr.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 81ed 	beq.w	8002bd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_UART_IRQHandler+0x14e>
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fd26 	bl	8003266 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <HAL_UART_IRQHandler+0x17a>
 800283e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d04f      	beq.n	80028e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fc2e 	bl	80030a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d141      	bne.n	80028de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3314      	adds	r3, #20
 8002882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800288a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800289e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1d9      	bne.n	800285a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	4a7d      	ldr	r2, [pc, #500]	; (8002aa8 <HAL_UART_IRQHandler+0x3dc>)
 80028b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fb9e 	bl	8000ffc <HAL_DMA_Abort_IT>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d0:	4610      	mov	r0, r2
 80028d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d4:	e00e      	b.n	80028f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f9a4 	bl	8002c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028dc:	e00a      	b.n	80028f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f9a0 	bl	8002c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	e006      	b.n	80028f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f99c 	bl	8002c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028f2:	e170      	b.n	8002bd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	bf00      	nop
    return;
 80028f6:	e16e      	b.n	8002bd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 814a 	bne.w	8002b96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8143 	beq.w	8002b96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 813c 	beq.w	8002b96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	f040 80b4 	bne.w	8002aac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8140 	beq.w	8002bda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800295e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002962:	429a      	cmp	r2, r3
 8002964:	f080 8139 	bcs.w	8002bda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800296e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	f000 8088 	beq.w	8002a8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800299c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1d9      	bne.n	800297e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d4:	e853 3f00 	ldrex	r3, [r3]
 80029d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3314      	adds	r3, #20
 80029ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e1      	bne.n	80029ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3314      	adds	r3, #20
 8002a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e3      	bne.n	8002a06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5e:	f023 0310 	bic.w	r3, r3, #16
 8002a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a70:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e3      	bne.n	8002a4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fa47 	bl	8000f1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8ca 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aa4:	e099      	b.n	8002bda <HAL_UART_IRQHandler+0x50e>
 8002aa6:	bf00      	nop
 8002aa8:	0800316f 	.word	0x0800316f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 808b 	beq.w	8002bde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8086 	beq.w	8002bde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002af6:	647a      	str	r2, [r7, #68]	; 0x44
 8002af8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e3      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	623b      	str	r3, [r7, #32]
   return(result);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e3      	bne.n	8002b0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0310 	bic.w	r3, r3, #16
 8002b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b74:	61fa      	str	r2, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	e841 2300 	strex	r3, r2, [r1]
 8002b80:	617b      	str	r3, [r7, #20]
   return(result);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e3      	bne.n	8002b50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f852 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b94:	e023      	b.n	8002bde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x4ea>
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 faf1 	bl	8003196 <UART_Transmit_IT>
    return;
 8002bb4:	e014      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00e      	beq.n	8002be0 <HAL_UART_IRQHandler+0x514>
 8002bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fb31 	bl	8003236 <UART_EndTransmit_IT>
    return;
 8002bd4:	e004      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
    return;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
      return;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
      return;
 8002bde:	bf00      	nop
  }
}
 8002be0:	37e8      	adds	r7, #232	; 0xe8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop

08002be8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b09c      	sub	sp, #112	; 0x70
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d172      	bne.n	8002d52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6e:	2200      	movs	r2, #0
 8002c70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c92:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e5      	bne.n	8002c72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002cc6:	647a      	str	r2, [r7, #68]	; 0x44
 8002cc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3314      	adds	r3, #20
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e5      	bne.n	8002cda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d119      	bne.n	8002d52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f023 0310 	bic.w	r3, r3, #16
 8002d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d3e:	61fa      	str	r2, [r7, #28]
 8002d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d106      	bne.n	8002d68 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d62:	f7ff ff69 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d66:	e002      	b.n	8002d6e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002d68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d6a:	f7ff ff47 	bl	8002bfc <HAL_UART_RxCpltCallback>
}
 8002d6e:	bf00      	nop
 8002d70:	3770      	adds	r7, #112	; 0x70
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff ff4e 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d9c:	e002      	b.n	8002da4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ff36 	bl	8002c10 <HAL_UART_RxHalfCpltCallback>
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b21      	cmp	r3, #33	; 0x21
 8002dde:	d108      	bne.n	8002df2 <UART_DMAError+0x46>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002dec:	68b8      	ldr	r0, [r7, #8]
 8002dee:	f000 f933 	bl	8003058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b22      	cmp	r3, #34	; 0x22
 8002e12:	d108      	bne.n	8002e26 <UART_DMAError+0x7a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002e20:	68b8      	ldr	r0, [r7, #8]
 8002e22:	f000 f941 	bl	80030a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	f7ff fef6 	bl	8002c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b090      	sub	sp, #64	; 0x40
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	e050      	b.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d04c      	beq.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e60:	f7fd fe38 	bl	8000ad4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d241      	bcs.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e90:	637a      	str	r2, [r7, #52]	; 0x34
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec4:	623a      	str	r2, [r7, #32]
 8002ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	6a3a      	ldr	r2, [r7, #32]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e5      	bne.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e00f      	b.n	8002f14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d09f      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3740      	adds	r7, #64	; 0x40
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b098      	sub	sp, #96	; 0x60
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2222      	movs	r2, #34	; 0x22
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	4a40      	ldr	r2, [pc, #256]	; (800304c <UART_Start_Receive_DMA+0x130>)
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <UART_Start_Receive_DMA+0x134>)
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <UART_Start_Receive_DMA+0x138>)
 8002f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2200      	movs	r2, #0
 8002f62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	f7fd ff76 	bl	8000e6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d019      	beq.n	8002fda <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ffa:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e5      	bne.n	8002fda <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	617b      	str	r3, [r7, #20]
   return(result);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003024:	653b      	str	r3, [r7, #80]	; 0x50
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3314      	adds	r3, #20
 800302c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800302e:	627a      	str	r2, [r7, #36]	; 0x24
 8003030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	61fb      	str	r3, [r7, #28]
   return(result);
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e5      	bne.n	800300e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3760      	adds	r7, #96	; 0x60
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	08002c51 	.word	0x08002c51
 8003050:	08002d77 	.word	0x08002d77
 8003054:	08002dad 	.word	0x08002dad

08003058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	61ba      	str	r2, [r7, #24]
 8003082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6979      	ldr	r1, [r7, #20]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	613b      	str	r3, [r7, #16]
   return(result);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e5      	bne.n	8003060 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800309c:	bf00      	nop
 800309e:	3724      	adds	r7, #36	; 0x24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b095      	sub	sp, #84	; 0x54
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030d0:	643a      	str	r2, [r7, #64]	; 0x40
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e5      	bne.n	80030b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3314      	adds	r3, #20
 80030ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800310a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	2b01      	cmp	r3, #1
 800311e:	d119      	bne.n	8003154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f023 0310 	bic.w	r3, r3, #16
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003140:	61ba      	str	r2, [r7, #24]
 8003142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	613b      	str	r3, [r7, #16]
   return(result);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003162:	bf00      	nop
 8003164:	3754      	adds	r7, #84	; 0x54
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fd4b 	bl	8002c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b21      	cmp	r3, #33	; 0x21
 80031a8:	d13e      	bne.n	8003228 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d114      	bne.n	80031de <UART_Transmit_IT+0x48>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d110      	bne.n	80031de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	1c9a      	adds	r2, r3, #2
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	621a      	str	r2, [r3, #32]
 80031dc:	e008      	b.n	80031f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6211      	str	r1, [r2, #32]
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4619      	mov	r1, r3
 80031fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003212:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003222:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fcc6 	bl	8002be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b08c      	sub	sp, #48	; 0x30
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b22      	cmp	r3, #34	; 0x22
 8003278:	f040 80ab 	bne.w	80033d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d117      	bne.n	80032b6 <UART_Receive_IT+0x50>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d113      	bne.n	80032b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
 80032b4:	e026      	b.n	8003304 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c8:	d007      	beq.n	80032da <UART_Receive_IT+0x74>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <UART_Receive_IT+0x82>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e008      	b.n	80032fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4619      	mov	r1, r3
 8003312:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15a      	bne.n	80033ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0220 	bic.w	r2, r2, #32
 8003326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	2b01      	cmp	r3, #1
 8003356:	d135      	bne.n	80033c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	613b      	str	r3, [r7, #16]
   return(result);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f023 0310 	bic.w	r3, r3, #16
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	623a      	str	r2, [r7, #32]
 8003380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	69f9      	ldr	r1, [r7, #28]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	61bb      	str	r3, [r7, #24]
   return(result);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d10a      	bne.n	80033b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fc3b 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
 80033c2:	e002      	b.n	80033ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fc19 	bl	8002bfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e002      	b.n	80033d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b0c0      	sub	sp, #256	; 0x100
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	ea40 0301 	orr.w	r3, r0, r1
 8003404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	431a      	orrs	r2, r3
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	431a      	orrs	r2, r3
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003434:	f021 010c 	bic.w	r1, r1, #12
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003442:	430b      	orrs	r3, r1
 8003444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	6999      	ldr	r1, [r3, #24]
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	ea40 0301 	orr.w	r3, r0, r1
 8003462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b8f      	ldr	r3, [pc, #572]	; (80036a8 <UART_SetConfig+0x2cc>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d005      	beq.n	800347c <UART_SetConfig+0xa0>
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8d      	ldr	r3, [pc, #564]	; (80036ac <UART_SetConfig+0x2d0>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d104      	bne.n	8003486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800347c:	f7fe fb34 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8003480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003484:	e003      	b.n	800348e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003486:	f7fe fb1b 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 800348a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	f040 810c 	bne.w	80036b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800349c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ae:	4622      	mov	r2, r4
 80034b0:	462b      	mov	r3, r5
 80034b2:	1891      	adds	r1, r2, r2
 80034b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80034b6:	415b      	adcs	r3, r3
 80034b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034be:	4621      	mov	r1, r4
 80034c0:	eb12 0801 	adds.w	r8, r2, r1
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb43 0901 	adc.w	r9, r3, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034de:	4690      	mov	r8, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	eb18 0303 	adds.w	r3, r8, r3
 80034e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034ec:	462b      	mov	r3, r5
 80034ee:	eb49 0303 	adc.w	r3, r9, r3
 80034f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800350a:	460b      	mov	r3, r1
 800350c:	18db      	adds	r3, r3, r3
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
 8003510:	4613      	mov	r3, r2
 8003512:	eb42 0303 	adc.w	r3, r2, r3
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
 8003518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800351c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003520:	f7fc fe70 	bl	8000204 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <UART_SetConfig+0x2d4>)
 800352a:	fba3 2302 	umull	r2, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	011c      	lsls	r4, r3, #4
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800353c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	1891      	adds	r1, r2, r2
 800354a:	64b9      	str	r1, [r7, #72]	; 0x48
 800354c:	415b      	adcs	r3, r3
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003554:	4641      	mov	r1, r8
 8003556:	eb12 0a01 	adds.w	sl, r2, r1
 800355a:	4649      	mov	r1, r9
 800355c:	eb43 0b01 	adc.w	fp, r3, r1
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800356c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003574:	4692      	mov	sl, r2
 8003576:	469b      	mov	fp, r3
 8003578:	4643      	mov	r3, r8
 800357a:	eb1a 0303 	adds.w	r3, sl, r3
 800357e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003582:	464b      	mov	r3, r9
 8003584:	eb4b 0303 	adc.w	r3, fp, r3
 8003588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800359c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035a0:	460b      	mov	r3, r1
 80035a2:	18db      	adds	r3, r3, r3
 80035a4:	643b      	str	r3, [r7, #64]	; 0x40
 80035a6:	4613      	mov	r3, r2
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
 80035ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035b6:	f7fc fe25 	bl	8000204 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <UART_SetConfig+0x2d4>)
 80035c2:	fba3 2301 	umull	r2, r3, r3, r1
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2264      	movs	r2, #100	; 0x64
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	1acb      	subs	r3, r1, r3
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035d6:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <UART_SetConfig+0x2d4>)
 80035d8:	fba3 2302 	umull	r2, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035e4:	441c      	add	r4, r3
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003600:	415b      	adcs	r3, r3
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6339      	str	r1, [r7, #48]	; 0x30
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800363c:	464b      	mov	r3, r9
 800363e:	460a      	mov	r2, r1
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800365c:	460b      	mov	r3, r1
 800365e:	18db      	adds	r3, r3, r3
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	4613      	mov	r3, r2
 8003664:	eb42 0303 	adc.w	r3, r2, r3
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800366e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003672:	f7fc fdc7 	bl	8000204 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <UART_SetConfig+0x2d4>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2164      	movs	r1, #100	; 0x64
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <UART_SetConfig+0x2d4>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 0207 	and.w	r2, r3, #7
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4422      	add	r2, r4
 80036a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036a4:	e105      	b.n	80038b2 <UART_SetConfig+0x4d6>
 80036a6:	bf00      	nop
 80036a8:	40011000 	.word	0x40011000
 80036ac:	40011400 	.word	0x40011400
 80036b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036c6:	4642      	mov	r2, r8
 80036c8:	464b      	mov	r3, r9
 80036ca:	1891      	adds	r1, r2, r2
 80036cc:	6239      	str	r1, [r7, #32]
 80036ce:	415b      	adcs	r3, r3
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036d6:	4641      	mov	r1, r8
 80036d8:	1854      	adds	r4, r2, r1
 80036da:	4649      	mov	r1, r9
 80036dc:	eb43 0501 	adc.w	r5, r3, r1
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	00eb      	lsls	r3, r5, #3
 80036ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ee:	00e2      	lsls	r2, r4, #3
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	4643      	mov	r3, r8
 80036f6:	18e3      	adds	r3, r4, r3
 80036f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036fc:	464b      	mov	r3, r9
 80036fe:	eb45 0303 	adc.w	r3, r5, r3
 8003702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003722:	4629      	mov	r1, r5
 8003724:	008b      	lsls	r3, r1, #2
 8003726:	4621      	mov	r1, r4
 8003728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800372c:	4621      	mov	r1, r4
 800372e:	008a      	lsls	r2, r1, #2
 8003730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003734:	f7fc fd66 	bl	8000204 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <UART_SetConfig+0x4e4>)
 800373e:	fba3 2302 	umull	r2, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	011c      	lsls	r4, r3, #4
 8003746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	1891      	adds	r1, r2, r2
 800375e:	61b9      	str	r1, [r7, #24]
 8003760:	415b      	adcs	r3, r3
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003768:	4641      	mov	r1, r8
 800376a:	1851      	adds	r1, r2, r1
 800376c:	6139      	str	r1, [r7, #16]
 800376e:	4649      	mov	r1, r9
 8003770:	414b      	adcs	r3, r1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003780:	4659      	mov	r1, fp
 8003782:	00cb      	lsls	r3, r1, #3
 8003784:	4651      	mov	r1, sl
 8003786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800378a:	4651      	mov	r1, sl
 800378c:	00ca      	lsls	r2, r1, #3
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	4603      	mov	r3, r0
 8003794:	4642      	mov	r2, r8
 8003796:	189b      	adds	r3, r3, r2
 8003798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800379c:	464b      	mov	r3, r9
 800379e:	460a      	mov	r2, r1
 80037a0:	eb42 0303 	adc.w	r3, r2, r3
 80037a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037c0:	4649      	mov	r1, r9
 80037c2:	008b      	lsls	r3, r1, #2
 80037c4:	4641      	mov	r1, r8
 80037c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ca:	4641      	mov	r1, r8
 80037cc:	008a      	lsls	r2, r1, #2
 80037ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037d2:	f7fc fd17 	bl	8000204 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <UART_SetConfig+0x4e4>)
 80037dc:	fba3 1302 	umull	r1, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	3332      	adds	r3, #50	; 0x32
 80037ee:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <UART_SetConfig+0x4e4>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fa:	441c      	add	r4, r3
 80037fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003800:	2200      	movs	r2, #0
 8003802:	673b      	str	r3, [r7, #112]	; 0x70
 8003804:	677a      	str	r2, [r7, #116]	; 0x74
 8003806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800380a:	4642      	mov	r2, r8
 800380c:	464b      	mov	r3, r9
 800380e:	1891      	adds	r1, r2, r2
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	415b      	adcs	r3, r3
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800381a:	4641      	mov	r1, r8
 800381c:	1851      	adds	r1, r2, r1
 800381e:	6039      	str	r1, [r7, #0]
 8003820:	4649      	mov	r1, r9
 8003822:	414b      	adcs	r3, r1
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003832:	4659      	mov	r1, fp
 8003834:	00cb      	lsls	r3, r1, #3
 8003836:	4651      	mov	r1, sl
 8003838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383c:	4651      	mov	r1, sl
 800383e:	00ca      	lsls	r2, r1, #3
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	4603      	mov	r3, r0
 8003846:	4642      	mov	r2, r8
 8003848:	189b      	adds	r3, r3, r2
 800384a:	66bb      	str	r3, [r7, #104]	; 0x68
 800384c:	464b      	mov	r3, r9
 800384e:	460a      	mov	r2, r1
 8003850:	eb42 0303 	adc.w	r3, r2, r3
 8003854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	663b      	str	r3, [r7, #96]	; 0x60
 8003860:	667a      	str	r2, [r7, #100]	; 0x64
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800386e:	4649      	mov	r1, r9
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4641      	mov	r1, r8
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4641      	mov	r1, r8
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003880:	f7fc fcc0 	bl	8000204 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <UART_SetConfig+0x4e4>)
 800388a:	fba3 1302 	umull	r1, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2164      	movs	r1, #100	; 0x64
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <UART_SetConfig+0x4e4>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4422      	add	r2, r4
 80038b0:	609a      	str	r2, [r3, #8]
}
 80038b2:	bf00      	nop
 80038b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038be:	bf00      	nop
 80038c0:	51eb851f 	.word	0x51eb851f

080038c4 <__libc_init_array>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4d0d      	ldr	r5, [pc, #52]	; (80038fc <__libc_init_array+0x38>)
 80038c8:	4c0d      	ldr	r4, [pc, #52]	; (8003900 <__libc_init_array+0x3c>)
 80038ca:	1b64      	subs	r4, r4, r5
 80038cc:	10a4      	asrs	r4, r4, #2
 80038ce:	2600      	movs	r6, #0
 80038d0:	42a6      	cmp	r6, r4
 80038d2:	d109      	bne.n	80038e8 <__libc_init_array+0x24>
 80038d4:	4d0b      	ldr	r5, [pc, #44]	; (8003904 <__libc_init_array+0x40>)
 80038d6:	4c0c      	ldr	r4, [pc, #48]	; (8003908 <__libc_init_array+0x44>)
 80038d8:	f000 f820 	bl	800391c <_init>
 80038dc:	1b64      	subs	r4, r4, r5
 80038de:	10a4      	asrs	r4, r4, #2
 80038e0:	2600      	movs	r6, #0
 80038e2:	42a6      	cmp	r6, r4
 80038e4:	d105      	bne.n	80038f2 <__libc_init_array+0x2e>
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ec:	4798      	blx	r3
 80038ee:	3601      	adds	r6, #1
 80038f0:	e7ee      	b.n	80038d0 <__libc_init_array+0xc>
 80038f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f6:	4798      	blx	r3
 80038f8:	3601      	adds	r6, #1
 80038fa:	e7f2      	b.n	80038e2 <__libc_init_array+0x1e>
 80038fc:	0800395c 	.word	0x0800395c
 8003900:	0800395c 	.word	0x0800395c
 8003904:	0800395c 	.word	0x0800395c
 8003908:	08003960 	.word	0x08003960

0800390c <memset>:
 800390c:	4402      	add	r2, r0
 800390e:	4603      	mov	r3, r0
 8003910:	4293      	cmp	r3, r2
 8003912:	d100      	bne.n	8003916 <memset+0xa>
 8003914:	4770      	bx	lr
 8003916:	f803 1b01 	strb.w	r1, [r3], #1
 800391a:	e7f9      	b.n	8003910 <memset+0x4>

0800391c <_init>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr

08003928 <_fini>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	bf00      	nop
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr
