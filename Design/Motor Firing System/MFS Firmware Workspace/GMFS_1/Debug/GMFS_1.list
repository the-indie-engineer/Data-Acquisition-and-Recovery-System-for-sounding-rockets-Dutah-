
GMFS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000299c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b7c  08002b7c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b84  08002b84  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000007c  08002c08  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002c08  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009abb  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a34  00000000  00000000  00029b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0002b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a89  00000000  00000000  0002c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa31  00000000  00000000  0004dfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9c22  00000000  00000000  000589f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000203c  00000000  00000000  00122664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b48 	.word	0x08002b48

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	08002b48 	.word	0x08002b48

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <seq_check>:
char arm[1]="F";
char pre_flight_check[1]="H";
char launch[1]="J";
char kill_switch[1]="K";
void seq_check()
	{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)== 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0) seq_flag = 1;
 800050c:	2102      	movs	r1, #2
 800050e:	4815      	ldr	r0, [pc, #84]	; (8000564 <seq_check+0x5c>)
 8000510:	f000 fe98 	bl	8001244 <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d111      	bne.n	800053e <seq_check+0x36>
 800051a:	2120      	movs	r1, #32
 800051c:	4811      	ldr	r0, [pc, #68]	; (8000564 <seq_check+0x5c>)
 800051e:	f000 fe91 	bl	8001244 <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10a      	bne.n	800053e <seq_check+0x36>
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	480e      	ldr	r0, [pc, #56]	; (8000564 <seq_check+0x5c>)
 800052c:	f000 fe8a 	bl	8001244 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d103      	bne.n	800053e <seq_check+0x36>
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <seq_check+0x60>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
		else if(Sec_key==0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==1) seq_flag=0;

	}
 800053c:	e010      	b.n	8000560 <seq_check+0x58>
		else if(Sec_key==0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==1) seq_flag=0;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <seq_check+0x64>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d009      	beq.n	8000560 <seq_check+0x58>
 800054c:	2120      	movs	r1, #32
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <seq_check+0x5c>)
 8000550:	f000 fe78 	bl	8001244 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d102      	bne.n	8000560 <seq_check+0x58>
 800055a:	4b03      	ldr	r3, [pc, #12]	; (8000568 <seq_check+0x60>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
	}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40020000 	.word	0x40020000
 8000568:	200000e4 	.word	0x200000e4
 800056c:	200000e1 	.word	0x200000e1

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fad0 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f8ae 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f948 	bl	8000810 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000580:	f000 f91c 	bl	80007bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_DMA(&huart1, rx_data, sizeof(rx_data));
 8000584:	2201      	movs	r2, #1
 8000586:	4948      	ldr	r1, [pc, #288]	; (80006a8 <main+0x138>)
 8000588:	4848      	ldr	r0, [pc, #288]	; (80006ac <main+0x13c>)
 800058a:	f001 fd38 	bl	8001ffe <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  seq_check();
 800058e:	f7ff ffbb 	bl	8000508 <seq_check>

	if(seq_flag ==1){
 8000592:	4b47      	ldr	r3, [pc, #284]	; (80006b0 <main+0x140>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <main+0x1e>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1 || Sec_key == 1)
 800059a:	2102      	movs	r1, #2
 800059c:	4845      	ldr	r0, [pc, #276]	; (80006b4 <main+0x144>)
 800059e:	f000 fe51 	bl	8001244 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d003      	beq.n	80005b0 <main+0x40>
 80005a8:	4b43      	ldr	r3, [pc, #268]	; (80006b8 <main+0x148>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0ee      	beq.n	800058e <main+0x1e>
		{
//			Sec_key=1;
			HAL_UART_Transmit(&huart1, ignition_key, sizeof(ignition_key), 100);
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	2201      	movs	r2, #1
 80005b4:	4941      	ldr	r1, [pc, #260]	; (80006bc <main+0x14c>)
 80005b6:	483d      	ldr	r0, [pc, #244]	; (80006ac <main+0x13c>)
 80005b8:	f001 fc8f 	bl	8001eda <HAL_UART_Transmit>

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 && Arm_switch == 0  ) {
 80005bc:	2102      	movs	r1, #2
 80005be:	483d      	ldr	r0, [pc, #244]	; (80006b4 <main+0x144>)
 80005c0:	f000 fe40 	bl	8001244 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d113      	bne.n	80005f2 <main+0x82>
 80005ca:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <main+0x150>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	f083 0301 	eor.w	r3, r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00c      	beq.n	80005f2 <main+0x82>
				Sec_key = 0; // Notify the user to reset the inputs
 80005d8:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <main+0x148>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
				seq_flag = 0;
 80005de:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <main+0x140>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
				Arm_switch = 0;
 80005e4:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <main+0x150>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
				Ign_switch = 0;
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <main+0x154>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	e059      	b.n	80006a6 <main+0x136>
			}

			else{
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)== 1 || Arm_switch == 1 ){
 80005f2:	2120      	movs	r1, #32
 80005f4:	482f      	ldr	r0, [pc, #188]	; (80006b4 <main+0x144>)
 80005f6:	f000 fe25 	bl	8001244 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d003      	beq.n	8000608 <main+0x98>
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <main+0x150>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0c2      	beq.n	800058e <main+0x1e>
//					Arm_switch = 1;
					HAL_UART_Transmit(&huart1, arm, sizeof(arm), 100);
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2201      	movs	r2, #1
 800060c:	492e      	ldr	r1, [pc, #184]	; (80006c8 <main+0x158>)
 800060e:	4827      	ldr	r0, [pc, #156]	; (80006ac <main+0x13c>)
 8000610:	f001 fc63 	bl	8001eda <HAL_UART_Transmit>

					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) Arm_switch = 0;
 8000614:	2120      	movs	r1, #32
 8000616:	4827      	ldr	r0, [pc, #156]	; (80006b4 <main+0x144>)
 8000618:	f000 fe14 	bl	8001244 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <main+0xb8>
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <main+0x150>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]


					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 || Ign_switch == 1 ){
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	4822      	ldr	r0, [pc, #136]	; (80006b4 <main+0x144>)
 800062c:	f000 fe0a 	bl	8001244 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	d003      	beq.n	800063e <main+0xce>
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <main+0x154>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d02a      	beq.n	8000694 <main+0x124>
						HAL_Delay(5000);
 800063e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000642:	f000 fadb 	bl	8000bfc <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0x144>)
 800064a:	f000 fdfb 	bl	8001244 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d113      	bne.n	800067c <main+0x10c>
//							Ign_switch = 1;



							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <main+0x144>)
 8000658:	f000 fe25 	bl	80012a6 <HAL_GPIO_TogglePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2120      	movs	r1, #32
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <main+0x15c>)
 8000662:	f000 fe07 	bl	8001274 <HAL_GPIO_WritePin>
							HAL_Delay(2000);
 8000666:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066a:	f000 fac7 	bl	8000bfc <HAL_Delay>
							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800066e:	2180      	movs	r1, #128	; 0x80
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0x144>)
 8000672:	f000 fe18 	bl	80012a6 <HAL_GPIO_TogglePin>
							charToTransmit[0] = 48; // 48 is ascii character for zero
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <main+0x160>)
 8000678:	2230      	movs	r2, #48	; 0x30
 800067a:	701a      	strb	r2, [r3, #0]
								     }
								     else
								     {

								     }
						HAL_UART_Transmit(&huart1, launch, sizeof(launch), 100);
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	4914      	ldr	r1, [pc, #80]	; (80006d4 <main+0x164>)
 8000682:	480a      	ldr	r0, [pc, #40]	; (80006ac <main+0x13c>)
 8000684:	f001 fc29 	bl	8001eda <HAL_UART_Transmit>
						HAL_Delay(200);
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f000 fab7 	bl	8000bfc <HAL_Delay>
						exit(0);
 800068e:	2000      	movs	r0, #0
 8000690:	f002 fa1a 	bl	8002ac8 <exit>
						}
						else
						{
							Sec_key=0;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <main+0x148>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
							Arm_switch = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <main+0x150>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
							seq_flag = 0;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <main+0x140>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	  seq_check();
 80006a6:	e772      	b.n	800058e <main+0x1e>
 80006a8:	200000e0 	.word	0x200000e0
 80006ac:	20000098 	.word	0x20000098
 80006b0:	200000e4 	.word	0x200000e4
 80006b4:	40020000 	.word	0x40020000
 80006b8:	200000e1 	.word	0x200000e1
 80006bc:	20000000 	.word	0x20000000
 80006c0:	200000e2 	.word	0x200000e2
 80006c4:	200000e3 	.word	0x200000e3
 80006c8:	20000004 	.word	0x20000004
 80006cc:	40020400 	.word	0x40020400
 80006d0:	200000dc 	.word	0x200000dc
 80006d4:	20000008 	.word	0x20000008

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fa26 	bl	8002b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <SystemClock_Config+0xdc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2b      	ldr	r2, [pc, #172]	; (80007b4 <SystemClock_Config+0xdc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <SystemClock_Config+0xdc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <SystemClock_Config+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <SystemClock_Config+0xe0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemClock_Config+0xe0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800074c:	23b4      	movs	r3, #180	; 0xb4
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f8cf 	bl	8001904 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800076c:	f000 f8de 	bl	800092c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000770:	f000 fdb4 	bl	80012dc <HAL_PWREx_EnableOverDrive>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077a:	f000 f8d7 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2105      	movs	r1, #5
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fded 	bl	800137c <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a8:	f000 f8c0 	bl	800092c <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	; 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f001 fb24 	bl	8001e40 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f895 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000098 	.word	0x20000098
 800080c:	40011000 	.word	0x40011000

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b3c      	ldr	r3, [pc, #240]	; (800091c <MX_GPIO_Init+0x10c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a3b      	ldr	r2, [pc, #236]	; (800091c <MX_GPIO_Init+0x10c>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b39      	ldr	r3, [pc, #228]	; (800091c <MX_GPIO_Init+0x10c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <MX_GPIO_Init+0x10c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a34      	ldr	r2, [pc, #208]	; (800091c <MX_GPIO_Init+0x10c>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b32      	ldr	r3, [pc, #200]	; (800091c <MX_GPIO_Init+0x10c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <MX_GPIO_Init+0x10c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a2d      	ldr	r2, [pc, #180]	; (800091c <MX_GPIO_Init+0x10c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_GPIO_Init+0x10c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_GPIO_Init+0x10c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a26      	ldr	r2, [pc, #152]	; (800091c <MX_GPIO_Init+0x10c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_GPIO_Init+0x10c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <MX_GPIO_Init+0x110>)
 800089c:	f000 fcea 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ignitionpin_GPIO_Port, ignitionpin_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	481f      	ldr	r0, [pc, #124]	; (8000924 <MX_GPIO_Init+0x114>)
 80008a6:	f000 fce5 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <MX_GPIO_Init+0x118>)
 80008c0:	f000 fb2c 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Security_key_Pin Arm_switch_Pin Launch_switch_Pin */
  GPIO_InitStruct.Pin = Security_key_Pin|Arm_switch_Pin|Launch_switch_Pin;
 80008c4:	2362      	movs	r3, #98	; 0x62
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <MX_GPIO_Init+0x110>)
 80008d8:	f000 fb20 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x110>)
 80008f4:	f000 fb12 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ignitionpin_Pin */
  GPIO_InitStruct.Pin = ignitionpin_Pin;
 80008f8:	2320      	movs	r3, #32
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ignitionpin_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_GPIO_Init+0x114>)
 8000910:	f000 fb04 	bl	8000f1c <HAL_GPIO_Init>

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	40020400 	.word	0x40020400
 8000928:	40020800 	.word	0x40020800

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12c      	bne.n	8000a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f4:	2307      	movs	r3, #7
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_UART_MspInit+0x8c>)
 8000a00:	f000 fa8c 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f8aa 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a76:	f002 f821 	bl	8002abc <__errno>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	601a      	str	r2, [r3, #0]
	return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_exit>:

void _exit (int status)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe7 	bl	8000a6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a9e:	e7fe      	b.n	8000a9e <_exit+0x12>

08000aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aca:	490e      	ldr	r1, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aee:	f7ff ffd7 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f001 fffd 	bl	8002af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fd3b 	bl	8000570 <main>
  bx  lr    
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b08:	08002b8c 	.word	0x08002b8c
  ldr r2, =_sbss
 8000b0c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b10:	200000ec 	.word	0x200000ec

08000b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <HAL_Init+0x40>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_Init+0x40>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_Init+0x40>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f931 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	200f      	movs	r0, #15
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fef4 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023c00 	.word	0x40023c00

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f93b 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f911 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	20000014 	.word	0x20000014
 8000bb8:	20000010 	.word	0x20000010

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000014 	.word	0x20000014
 8000be0:	200000e8 	.word	0x200000e8

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200000e8 	.word	0x200000e8

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff ffee 	bl	8000be4 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c22:	bf00      	nop
 8000c24:	f7ff ffde 	bl	8000be4 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000014 	.word	0x20000014

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff47 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff5c 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffb0 	bl	8000d64 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <HAL_DMA_Start_IT+0x26>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e040      	b.n	8000eb6 <HAL_DMA_Start_IT+0xa8>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d12f      	bne.n	8000ea8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2200      	movs	r2, #0
 8000e54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f000 f82e 	bl	8000ebe <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e66:	223f      	movs	r2, #63	; 0x3f
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 0216 	orr.w	r2, r2, #22
 8000e7c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0208 	orr.w	r2, r2, #8
 8000e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f042 0201 	orr.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e005      	b.n	8000eb4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b085      	sub	sp, #20
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eda:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b40      	cmp	r3, #64	; 0x40
 8000eea:	d108      	bne.n	8000efe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000efc:	e007      	b.n	8000f0e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	60da      	str	r2, [r3, #12]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e165      	b.n	8001204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8154 	bne.w	80011fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80ae 	beq.w	80011fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_GPIO_Init+0x300>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a5c      	ldr	r2, [pc, #368]	; (800121c <HAL_GPIO_Init+0x300>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <HAL_GPIO_Init+0x300>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_GPIO_Init+0x304>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x308>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d025      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01f      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x310>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x314>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x318>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x20a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_GPIO_Init+0x31c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x206>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x320>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x202>
 800111a:	2306      	movs	r3, #6
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 800111e:	2307      	movs	r3, #7
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x21c>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_GPIO_Init+0x304>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_GPIO_Init+0x324>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_GPIO_Init+0x324>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x324>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_GPIO_Init+0x324>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae96 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e001      	b.n	8001266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b8:	887a      	ldrh	r2, [r7, #2]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	041a      	lsls	r2, r3, #16
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	400b      	ands	r3, r1
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_PWREx_EnableOverDrive+0x90>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a1f      	ldr	r2, [pc, #124]	; (800136c <HAL_PWREx_EnableOverDrive+0x90>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_PWREx_EnableOverDrive+0x90>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_PWREx_EnableOverDrive+0x94>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff fc6c 	bl	8000be4 <HAL_GetTick>
 800130c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800130e:	e009      	b.n	8001324 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001310:	f7ff fc68 	bl	8000be4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800131e:	d901      	bls.n	8001324 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e01f      	b.n	8001364 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_PWREx_EnableOverDrive+0x98>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d1ee      	bne.n	8001310 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001338:	f7ff fc54 	bl	8000be4 <HAL_GetTick>
 800133c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800133e:	e009      	b.n	8001354 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001340:	f7ff fc50 	bl	8000be4 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800134e:	d901      	bls.n	8001354 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e007      	b.n	8001364 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_PWREx_EnableOverDrive+0x98>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001360:	d1ee      	bne.n	8001340 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	420e0040 	.word	0x420e0040
 8001374:	40007000 	.word	0x40007000
 8001378:	420e0044 	.word	0x420e0044

0800137c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0cc      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001390:	4b68      	ldr	r3, [pc, #416]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d90c      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b8      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	494d      	ldr	r1, [pc, #308]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d044      	beq.n	800149c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d119      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e07f      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d003      	beq.n	800143a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001436:	2b03      	cmp	r3, #3
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e06f      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e067      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f023 0203 	bic.w	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4934      	ldr	r1, [pc, #208]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	4313      	orrs	r3, r2
 800146a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff fbba 	bl	8000be4 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	e00a      	b.n	800148a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff fbb6 	bl	8000be4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e04f      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 020c 	and.w	r2, r3, #12
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d1eb      	bne.n	8001474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d20c      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e032      	b.n	800152a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f855 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	490a      	ldr	r1, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	5ccb      	ldrb	r3, [r1, r3]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fb1a 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00
 8001538:	40023800 	.word	0x40023800
 800153c:	08002b60 	.word	0x08002b60
 8001540:	2000000c 	.word	0x2000000c
 8001544:	20000010 	.word	0x20000010

08001548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_RCC_GetHCLKFreq+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000000c 	.word	0x2000000c

08001560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001564:	f7ff fff0 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001568:	4602      	mov	r2, r0
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001576:	5ccb      	ldrb	r3, [r1, r3]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800
 8001584:	08002b70 	.word	0x08002b70

08001588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800158c:	f7ff ffdc 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001590:	4602      	mov	r2, r0
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	0b5b      	lsrs	r3, r3, #13
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	4903      	ldr	r1, [pc, #12]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	08002b70 	.word	0x08002b70

080015b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b4:	b0a6      	sub	sp, #152	; 0x98
 80015b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015d6:	4bc8      	ldr	r3, [pc, #800]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	f200 817e 	bhi.w	80018e0 <HAL_RCC_GetSysClockFreq+0x330>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001621 	.word	0x08001621
 80015f0:	080018e1 	.word	0x080018e1
 80015f4:	080018e1 	.word	0x080018e1
 80015f8:	080018e1 	.word	0x080018e1
 80015fc:	08001629 	.word	0x08001629
 8001600:	080018e1 	.word	0x080018e1
 8001604:	080018e1 	.word	0x080018e1
 8001608:	080018e1 	.word	0x080018e1
 800160c:	08001631 	.word	0x08001631
 8001610:	080018e1 	.word	0x080018e1
 8001614:	080018e1 	.word	0x080018e1
 8001618:	080018e1 	.word	0x080018e1
 800161c:	0800179b 	.word	0x0800179b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001620:	4bb6      	ldr	r3, [pc, #728]	; (80018fc <HAL_RCC_GetSysClockFreq+0x34c>)
 8001622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001626:	e15f      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4bb5      	ldr	r3, [pc, #724]	; (8001900 <HAL_RCC_GetSysClockFreq+0x350>)
 800162a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800162e:	e15b      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001630:	4bb1      	ldr	r3, [pc, #708]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001638:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800163c:	4bae      	ldr	r3, [pc, #696]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d031      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4bab      	ldr	r3, [pc, #684]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	2200      	movs	r2, #0
 8001650:	66bb      	str	r3, [r7, #104]	; 0x68
 8001652:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800165a:	663b      	str	r3, [r7, #96]	; 0x60
 800165c:	2300      	movs	r3, #0
 800165e:	667b      	str	r3, [r7, #100]	; 0x64
 8001660:	4ba7      	ldr	r3, [pc, #668]	; (8001900 <HAL_RCC_GetSysClockFreq+0x350>)
 8001662:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001666:	462a      	mov	r2, r5
 8001668:	fb03 f202 	mul.w	r2, r3, r2
 800166c:	2300      	movs	r3, #0
 800166e:	4621      	mov	r1, r4
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	4413      	add	r3, r2
 8001676:	4aa2      	ldr	r2, [pc, #648]	; (8001900 <HAL_RCC_GetSysClockFreq+0x350>)
 8001678:	4621      	mov	r1, r4
 800167a:	fba1 1202 	umull	r1, r2, r1, r2
 800167e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001680:	460a      	mov	r2, r1
 8001682:	67ba      	str	r2, [r7, #120]	; 0x78
 8001684:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001686:	4413      	add	r3, r2
 8001688:	67fb      	str	r3, [r7, #124]	; 0x7c
 800168a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800168e:	2200      	movs	r2, #0
 8001690:	65bb      	str	r3, [r7, #88]	; 0x58
 8001692:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001698:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800169c:	f7fe fdb2 	bl	8000204 <__aeabi_uldivmod>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4613      	mov	r3, r2
 80016a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016aa:	e064      	b.n	8001776 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	653b      	str	r3, [r7, #80]	; 0x50
 80016b6:	657a      	str	r2, [r7, #84]	; 0x54
 80016b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c0:	2300      	movs	r3, #0
 80016c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80016c8:	4622      	mov	r2, r4
 80016ca:	462b      	mov	r3, r5
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	0159      	lsls	r1, r3, #5
 80016d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016da:	0150      	lsls	r0, r2, #5
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4621      	mov	r1, r4
 80016e2:	1a51      	subs	r1, r2, r1
 80016e4:	6139      	str	r1, [r7, #16]
 80016e6:	4629      	mov	r1, r5
 80016e8:	eb63 0301 	sbc.w	r3, r3, r1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016fa:	4659      	mov	r1, fp
 80016fc:	018b      	lsls	r3, r1, #6
 80016fe:	4651      	mov	r1, sl
 8001700:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001704:	4651      	mov	r1, sl
 8001706:	018a      	lsls	r2, r1, #6
 8001708:	4651      	mov	r1, sl
 800170a:	ebb2 0801 	subs.w	r8, r2, r1
 800170e:	4659      	mov	r1, fp
 8001710:	eb63 0901 	sbc.w	r9, r3, r1
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001728:	4690      	mov	r8, r2
 800172a:	4699      	mov	r9, r3
 800172c:	4623      	mov	r3, r4
 800172e:	eb18 0303 	adds.w	r3, r8, r3
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	462b      	mov	r3, r5
 8001736:	eb49 0303 	adc.w	r3, r9, r3
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001748:	4629      	mov	r1, r5
 800174a:	028b      	lsls	r3, r1, #10
 800174c:	4621      	mov	r1, r4
 800174e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001752:	4621      	mov	r1, r4
 8001754:	028a      	lsls	r2, r1, #10
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800175e:	2200      	movs	r2, #0
 8001760:	643b      	str	r3, [r7, #64]	; 0x40
 8001762:	647a      	str	r2, [r7, #68]	; 0x44
 8001764:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001768:	f7fe fd4c 	bl	8000204 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001776:	4b60      	ldr	r3, [pc, #384]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	3301      	adds	r3, #1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001788:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800178c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001798:	e0a6      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d02a      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b2:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	099b      	lsrs	r3, r3, #6
 80017b8:	2200      	movs	r2, #0
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80017bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017c4:	2100      	movs	r1, #0
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <HAL_RCC_GetSysClockFreq+0x350>)
 80017c8:	fb03 f201 	mul.w	r2, r3, r1
 80017cc:	2300      	movs	r3, #0
 80017ce:	fb00 f303 	mul.w	r3, r0, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <HAL_RCC_GetSysClockFreq+0x350>)
 80017d6:	fba0 1202 	umull	r1, r2, r0, r2
 80017da:	677a      	str	r2, [r7, #116]	; 0x74
 80017dc:	460a      	mov	r2, r1
 80017de:	673a      	str	r2, [r7, #112]	; 0x70
 80017e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017e2:	4413      	add	r3, r2
 80017e4:	677b      	str	r3, [r7, #116]	; 0x74
 80017e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ea:	2200      	movs	r2, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
 80017ee:	637a      	str	r2, [r7, #52]	; 0x34
 80017f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017f8:	f7fe fd04 	bl	8000204 <__aeabi_uldivmod>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4613      	mov	r3, r2
 8001802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001806:	e05b      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	2200      	movs	r2, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
 8001820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001824:	4642      	mov	r2, r8
 8001826:	464b      	mov	r3, r9
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	0159      	lsls	r1, r3, #5
 8001832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001836:	0150      	lsls	r0, r2, #5
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4641      	mov	r1, r8
 800183e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001842:	4649      	mov	r1, r9
 8001844:	eb63 0b01 	sbc.w	fp, r3, r1
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800185c:	ebb2 040a 	subs.w	r4, r2, sl
 8001860:	eb63 050b 	sbc.w	r5, r3, fp
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	00eb      	lsls	r3, r5, #3
 800186e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	4643      	mov	r3, r8
 800187a:	18e3      	adds	r3, r4, r3
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	464b      	mov	r3, r9
 8001880:	eb45 0303 	adc.w	r3, r5, r3
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001892:	4629      	mov	r1, r5
 8001894:	028b      	lsls	r3, r1, #10
 8001896:	4621      	mov	r1, r4
 8001898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800189c:	4621      	mov	r1, r4
 800189e:	028a      	lsls	r2, r1, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018a8:	2200      	movs	r2, #0
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	61fa      	str	r2, [r7, #28]
 80018ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b2:	f7fe fca7 	bl	8000204 <__aeabi_uldivmod>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4613      	mov	r3, r2
 80018bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	0f1b      	lsrs	r3, r3, #28
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80018ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80018de:	e003      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_GetSysClockFreq+0x34c>)
 80018e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80018e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3798      	adds	r7, #152	; 0x98
 80018f0:	46bd      	mov	sp, r7
 80018f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	00f42400 	.word	0x00f42400
 8001900:	017d7840 	.word	0x017d7840

08001904 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e28d      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8083 	beq.w	8001a2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001924:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b04      	cmp	r3, #4
 800192e:	d019      	beq.n	8001964 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001930:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001938:	2b08      	cmp	r3, #8
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800193c:	4b8e      	ldr	r3, [pc, #568]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001948:	d00c      	beq.n	8001964 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194a:	4b8b      	ldr	r3, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d112      	bne.n	800197c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001956:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001962:	d10b      	bne.n	800197c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	4b84      	ldr	r3, [pc, #528]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d05b      	beq.n	8001a28 <HAL_RCC_OscConfig+0x124>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d157      	bne.n	8001a28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e25a      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x90>
 8001986:	4b7c      	ldr	r3, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7b      	ldr	r2, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e01d      	b.n	80019d0 <HAL_RCC_OscConfig+0xcc>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0xb4>
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a72      	ldr	r2, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0xcc>
 80019b8:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b6c      	ldr	r3, [pc, #432]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6b      	ldr	r2, [pc, #428]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f904 	bl	8000be4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff f900 	bl	8000be4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e21f      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b61      	ldr	r3, [pc, #388]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0xdc>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f8f0 	bl	8000be4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff f8ec 	bl	8000be4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e20b      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x104>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d06f      	beq.n	8001b16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d017      	beq.n	8001a72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a42:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a66:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x186>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1d3      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4937      	ldr	r1, [pc, #220]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <HAL_RCC_OscConfig+0x278>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f899 	bl	8000be4 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f895 	bl	8000be4 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1b4      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4925      	ldr	r1, [pc, #148]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x278>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff f878 	bl	8000be4 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff f874 	bl	8000be4 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e193      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d036      	beq.n	8001b90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f858 	bl	8000be4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff f854 	bl	8000be4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e173      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x234>
 8001b56:	e01b      	b.n	8001b90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f841 	bl	8000be4 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	e00e      	b.n	8001b84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff f83d 	bl	8000be4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d907      	bls.n	8001b84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e15c      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	42470000 	.word	0x42470000
 8001b80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b8a      	ldr	r3, [pc, #552]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ea      	bne.n	8001b66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8097 	beq.w	8001ccc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b83      	ldr	r3, [pc, #524]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10f      	bne.n	8001bce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a7e      	ldr	r2, [pc, #504]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bce:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_OscConfig+0x4b0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bda:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x4b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a75      	ldr	r2, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x4b0>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be6:	f7fe fffd 	bl	8000be4 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bee:	f7fe fff9 	bl	8000be4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e118      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4b6c      	ldr	r3, [pc, #432]	; (8001db4 <HAL_RCC_OscConfig+0x4b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x31e>
 8001c14:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	e01c      	b.n	8001c5c <HAL_RCC_OscConfig+0x358>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x340>
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	4a60      	ldr	r2, [pc, #384]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6713      	str	r3, [r2, #112]	; 0x70
 8001c36:	4b5e      	ldr	r3, [pc, #376]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a5d      	ldr	r2, [pc, #372]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0x358>
 8001c44:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a59      	ldr	r2, [pc, #356]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	4b57      	ldr	r3, [pc, #348]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a56      	ldr	r2, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d015      	beq.n	8001c90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7fe ffbe 	bl	8000be4 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6c:	f7fe ffba 	bl	8000be4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0d7      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0ee      	beq.n	8001c6c <HAL_RCC_OscConfig+0x368>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7fe ffa8 	bl	8000be4 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7fe ffa4 	bl	8000be4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0c1      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cae:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ee      	bne.n	8001c98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a3a      	ldr	r2, [pc, #232]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80ad 	beq.w	8001e30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd6:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d060      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d145      	bne.n	8001d76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_RCC_OscConfig+0x4b4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7fe ff78 	bl	8000be4 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7fe ff74 	bl	8000be4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e093      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	071b      	lsls	r3, r3, #28
 8001d42:	491b      	ldr	r1, [pc, #108]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x4b4>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7fe ff49 	bl	8000be4 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d56:	f7fe ff45 	bl	8000be4 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e064      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x452>
 8001d74:	e05c      	b.n	8001e30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCC_OscConfig+0x4b4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ff32 	bl	8000be4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe ff2e 	bl	8000be4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e04d      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x480>
 8001da2:	e045      	b.n	8001e30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e040      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000
 8001db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <HAL_RCC_OscConfig+0x538>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d030      	beq.n	8001e2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d129      	bne.n	8001e2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d122      	bne.n	8001e2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d119      	bne.n	8001e2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d10f      	bne.n	8001e2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e03f      	b.n	8001ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fd8e 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fba5 	bl	80025d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b08a      	sub	sp, #40	; 0x28
 8001ede:	af02      	add	r7, sp, #8
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d17c      	bne.n	8001ff4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_UART_Transmit+0x2c>
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e075      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_UART_Transmit+0x3e>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e06e      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2221      	movs	r2, #33	; 0x21
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f2e:	f7fe fe59 	bl	8000be4 <HAL_GetTick>
 8001f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d108      	bne.n	8001f5c <HAL_UART_Transmit+0x82>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d104      	bne.n	8001f5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	e003      	b.n	8001f64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f6c:	e02a      	b.n	8001fc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f992 	bl	80022a2 <UART_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e036      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e007      	b.n	8001fb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1cf      	bne.n	8001f6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f962 	bl	80022a2 <UART_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e006      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	4613      	mov	r3, r2
 800200a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b20      	cmp	r3, #32
 8002016:	d11d      	bne.n	8002054 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_UART_Receive_DMA+0x26>
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e016      	b.n	8002056 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_UART_Receive_DMA+0x38>
 8002032:	2302      	movs	r3, #2
 8002034:	e00f      	b.n	8002056 <HAL_UART_Receive_DMA+0x58>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	461a      	mov	r2, r3
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f998 	bl	8002380 <UART_Start_Receive_DMA>
 8002050:	4603      	mov	r3, r0
 8002052:	e000      	b.n	8002056 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b09c      	sub	sp, #112	; 0x70
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d172      	bne.n	80021b4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80020ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d0:	2200      	movs	r2, #0
 80020d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020de:	e853 3f00 	ldrex	r3, [r3]
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	330c      	adds	r3, #12
 80020f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020fc:	e841 2300 	strex	r3, r2, [r1]
 8002100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e5      	bne.n	80020d4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002112:	e853 3f00 	ldrex	r3, [r3]
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	667b      	str	r3, [r7, #100]	; 0x64
 8002120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002128:	647a      	str	r2, [r7, #68]	; 0x44
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800212e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002130:	e841 2300 	strex	r3, r2, [r1]
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e5      	bne.n	8002108 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800213c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3314      	adds	r3, #20
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	e853 3f00 	ldrex	r3, [r3]
 800214a:	623b      	str	r3, [r7, #32]
   return(result);
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002152:	663b      	str	r3, [r7, #96]	; 0x60
 8002154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3314      	adds	r3, #20
 800215a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800215c:	633a      	str	r2, [r7, #48]	; 0x30
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002164:	e841 2300 	strex	r3, r2, [r1]
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e5      	bne.n	800213c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	2b01      	cmp	r3, #1
 800217e:	d119      	bne.n	80021b4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	e853 3f00 	ldrex	r3, [r3]
 800218e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021a0:	61fa      	str	r2, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a4:	69b9      	ldr	r1, [r7, #24]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	e841 2300 	strex	r3, r2, [r1]
 80021ac:	617b      	str	r3, [r7, #20]
   return(result);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e5      	bne.n	8002180 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80021bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021c0:	4619      	mov	r1, r3
 80021c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80021c4:	f7ff ff69 	bl	800209a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80021c8:	e002      	b.n	80021d0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80021ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80021cc:	f7ff ff47 	bl	800205e <HAL_UART_RxCpltCallback>
}
 80021d0:	bf00      	nop
 80021d2:	3770      	adds	r7, #112	; 0x70
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff ff4e 	bl	800209a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80021fe:	e002      	b.n	8002206 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff ff36 	bl	8002072 <HAL_UART_RxHalfCpltCallback>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b21      	cmp	r3, #33	; 0x21
 8002240:	d108      	bne.n	8002254 <UART_DMAError+0x46>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2200      	movs	r2, #0
 800224c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800224e:	68b8      	ldr	r0, [r7, #8]
 8002250:	f000 f934 	bl	80024bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b22      	cmp	r3, #34	; 0x22
 8002274:	d108      	bne.n	8002288 <UART_DMAError+0x7a>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f000 f942 	bl	800250c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002294:	68b8      	ldr	r0, [r7, #8]
 8002296:	f7ff fef6 	bl	8002086 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b090      	sub	sp, #64	; 0x40
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b2:	e050      	b.n	8002356 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d04c      	beq.n	8002356 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80022c2:	f7fe fc8f 	bl	8000be4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d241      	bcs.n	8002356 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	330c      	adds	r3, #12
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f2:	637a      	str	r2, [r7, #52]	; 0x34
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3314      	adds	r3, #20
 800230c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	e853 3f00 	ldrex	r3, [r3]
 8002314:	613b      	str	r3, [r7, #16]
   return(result);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3314      	adds	r3, #20
 8002324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002326:	623a      	str	r2, [r7, #32]
 8002328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232a:	69f9      	ldr	r1, [r7, #28]
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	e841 2300 	strex	r3, r2, [r1]
 8002332:	61bb      	str	r3, [r7, #24]
   return(result);
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e5      	bne.n	8002306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e00f      	b.n	8002376 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4013      	ands	r3, r2
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	bf0c      	ite	eq
 8002366:	2301      	moveq	r3, #1
 8002368:	2300      	movne	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	429a      	cmp	r2, r3
 8002372:	d09f      	beq.n	80022b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3740      	adds	r7, #64	; 0x40
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b098      	sub	sp, #96	; 0x60
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2222      	movs	r2, #34	; 0x22
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <UART_Start_Receive_DMA+0x130>)
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <UART_Start_Receive_DMA+0x134>)
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023bc:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <UART_Start_Receive_DMA+0x138>)
 80023be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	2200      	movs	r2, #0
 80023c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	f7fe fd15 	bl	8000e0e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d019      	beq.n	800243e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002414:	e853 3f00 	ldrex	r3, [r3]
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	65bb      	str	r3, [r7, #88]	; 0x58
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800242a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800242c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002432:	e841 2300 	strex	r3, r2, [r1]
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e5      	bne.n	800240a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3314      	adds	r3, #20
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	e853 3f00 	ldrex	r3, [r3]
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	657b      	str	r3, [r7, #84]	; 0x54
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3314      	adds	r3, #20
 800245c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800245e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002466:	e841 2300 	strex	r3, r2, [r1]
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e5      	bne.n	800243e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3314      	adds	r3, #20
 8002478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	e853 3f00 	ldrex	r3, [r3]
 8002480:	617b      	str	r3, [r7, #20]
   return(result);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002488:	653b      	str	r3, [r7, #80]	; 0x50
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3314      	adds	r3, #20
 8002490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002492:	627a      	str	r2, [r7, #36]	; 0x24
 8002494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002496:	6a39      	ldr	r1, [r7, #32]
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	e841 2300 	strex	r3, r2, [r1]
 800249e:	61fb      	str	r3, [r7, #28]
   return(result);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1e5      	bne.n	8002472 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3760      	adds	r7, #96	; 0x60
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	080020b3 	.word	0x080020b3
 80024b4:	080021d9 	.word	0x080021d9
 80024b8:	0800220f 	.word	0x0800220f

080024bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	61ba      	str	r2, [r7, #24]
 80024e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	6979      	ldr	r1, [r7, #20]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	613b      	str	r3, [r7, #16]
   return(result);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e5      	bne.n	80024c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002500:	bf00      	nop
 8002502:	3724      	adds	r7, #36	; 0x24
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b095      	sub	sp, #84	; 0x54
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	e853 3f00 	ldrex	r3, [r3]
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002534:	643a      	str	r2, [r7, #64]	; 0x40
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002538:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800253a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800253c:	e841 2300 	strex	r3, r2, [r1]
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e5      	bne.n	8002514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3314      	adds	r3, #20
 800254e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	61fb      	str	r3, [r7, #28]
   return(result);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002568:	62fa      	str	r2, [r7, #44]	; 0x2c
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800256e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	2b01      	cmp	r3, #1
 8002582:	d119      	bne.n	80025b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	e853 3f00 	ldrex	r3, [r3]
 8002592:	60bb      	str	r3, [r7, #8]
   return(result);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f023 0310 	bic.w	r3, r3, #16
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a4:	61ba      	str	r2, [r7, #24]
 80025a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	e841 2300 	strex	r3, r2, [r1]
 80025b0:	613b      	str	r3, [r7, #16]
   return(result);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e5      	bne.n	8002584 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025c6:	bf00      	nop
 80025c8:	3754      	adds	r7, #84	; 0x54
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b0c0      	sub	sp, #256	; 0x100
 80025da:	af00      	add	r7, sp, #0
 80025dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	68d9      	ldr	r1, [r3, #12]
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	ea40 0301 	orr.w	r3, r0, r1
 80025fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	431a      	orrs	r2, r3
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	431a      	orrs	r2, r3
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800262c:	f021 010c 	bic.w	r1, r1, #12
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800263a:	430b      	orrs	r3, r1
 800263c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	6999      	ldr	r1, [r3, #24]
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	ea40 0301 	orr.w	r3, r0, r1
 800265a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b8f      	ldr	r3, [pc, #572]	; (80028a0 <UART_SetConfig+0x2cc>)
 8002664:	429a      	cmp	r2, r3
 8002666:	d005      	beq.n	8002674 <UART_SetConfig+0xa0>
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b8d      	ldr	r3, [pc, #564]	; (80028a4 <UART_SetConfig+0x2d0>)
 8002670:	429a      	cmp	r2, r3
 8002672:	d104      	bne.n	800267e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002674:	f7fe ff88 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002678:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800267c:	e003      	b.n	8002686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800267e:	f7fe ff6f 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002682:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002690:	f040 810c 	bne.w	80028ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002698:	2200      	movs	r2, #0
 800269a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800269e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026a6:	4622      	mov	r2, r4
 80026a8:	462b      	mov	r3, r5
 80026aa:	1891      	adds	r1, r2, r2
 80026ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80026ae:	415b      	adcs	r3, r3
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026b6:	4621      	mov	r1, r4
 80026b8:	eb12 0801 	adds.w	r8, r2, r1
 80026bc:	4629      	mov	r1, r5
 80026be:	eb43 0901 	adc.w	r9, r3, r1
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d6:	4690      	mov	r8, r2
 80026d8:	4699      	mov	r9, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	eb18 0303 	adds.w	r3, r8, r3
 80026e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026e4:	462b      	mov	r3, r5
 80026e6:	eb49 0303 	adc.w	r3, r9, r3
 80026ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002702:	460b      	mov	r3, r1
 8002704:	18db      	adds	r3, r3, r3
 8002706:	653b      	str	r3, [r7, #80]	; 0x50
 8002708:	4613      	mov	r3, r2
 800270a:	eb42 0303 	adc.w	r3, r2, r3
 800270e:	657b      	str	r3, [r7, #84]	; 0x54
 8002710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002718:	f7fd fd74 	bl	8000204 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4b61      	ldr	r3, [pc, #388]	; (80028a8 <UART_SetConfig+0x2d4>)
 8002722:	fba3 2302 	umull	r2, r3, r3, r2
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	011c      	lsls	r4, r3, #4
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272e:	2200      	movs	r2, #0
 8002730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002734:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800273c:	4642      	mov	r2, r8
 800273e:	464b      	mov	r3, r9
 8002740:	1891      	adds	r1, r2, r2
 8002742:	64b9      	str	r1, [r7, #72]	; 0x48
 8002744:	415b      	adcs	r3, r3
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800274c:	4641      	mov	r1, r8
 800274e:	eb12 0a01 	adds.w	sl, r2, r1
 8002752:	4649      	mov	r1, r9
 8002754:	eb43 0b01 	adc.w	fp, r3, r1
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800276c:	4692      	mov	sl, r2
 800276e:	469b      	mov	fp, r3
 8002770:	4643      	mov	r3, r8
 8002772:	eb1a 0303 	adds.w	r3, sl, r3
 8002776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800277a:	464b      	mov	r3, r9
 800277c:	eb4b 0303 	adc.w	r3, fp, r3
 8002780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002790:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002798:	460b      	mov	r3, r1
 800279a:	18db      	adds	r3, r3, r3
 800279c:	643b      	str	r3, [r7, #64]	; 0x40
 800279e:	4613      	mov	r3, r2
 80027a0:	eb42 0303 	adc.w	r3, r2, r3
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
 80027a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027ae:	f7fd fd29 	bl	8000204 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <UART_SetConfig+0x2d4>)
 80027ba:	fba3 2301 	umull	r2, r3, r3, r1
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2264      	movs	r2, #100	; 0x64
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	1acb      	subs	r3, r1, r3
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <UART_SetConfig+0x2d4>)
 80027d0:	fba3 2302 	umull	r2, r3, r3, r2
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027dc:	441c      	add	r4, r3
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80027f8:	415b      	adcs	r3, r3
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002800:	4641      	mov	r1, r8
 8002802:	1851      	adds	r1, r2, r1
 8002804:	6339      	str	r1, [r7, #48]	; 0x30
 8002806:	4649      	mov	r1, r9
 8002808:	414b      	adcs	r3, r1
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002818:	4659      	mov	r1, fp
 800281a:	00cb      	lsls	r3, r1, #3
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002822:	4651      	mov	r1, sl
 8002824:	00ca      	lsls	r2, r1, #3
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4603      	mov	r3, r0
 800282c:	4642      	mov	r2, r8
 800282e:	189b      	adds	r3, r3, r2
 8002830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002834:	464b      	mov	r3, r9
 8002836:	460a      	mov	r2, r1
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800284c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002854:	460b      	mov	r3, r1
 8002856:	18db      	adds	r3, r3, r3
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
 800285a:	4613      	mov	r3, r2
 800285c:	eb42 0303 	adc.w	r3, r2, r3
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800286a:	f7fd fccb 	bl	8000204 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <UART_SetConfig+0x2d4>)
 8002874:	fba3 1302 	umull	r1, r3, r3, r2
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	2164      	movs	r1, #100	; 0x64
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	3332      	adds	r3, #50	; 0x32
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <UART_SetConfig+0x2d4>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	f003 0207 	and.w	r2, r3, #7
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4422      	add	r2, r4
 800289a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800289c:	e105      	b.n	8002aaa <UART_SetConfig+0x4d6>
 800289e:	bf00      	nop
 80028a0:	40011000 	.word	0x40011000
 80028a4:	40011400 	.word	0x40011400
 80028a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028be:	4642      	mov	r2, r8
 80028c0:	464b      	mov	r3, r9
 80028c2:	1891      	adds	r1, r2, r2
 80028c4:	6239      	str	r1, [r7, #32]
 80028c6:	415b      	adcs	r3, r3
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ce:	4641      	mov	r1, r8
 80028d0:	1854      	adds	r4, r2, r1
 80028d2:	4649      	mov	r1, r9
 80028d4:	eb43 0501 	adc.w	r5, r3, r1
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	00eb      	lsls	r3, r5, #3
 80028e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e6:	00e2      	lsls	r2, r4, #3
 80028e8:	4614      	mov	r4, r2
 80028ea:	461d      	mov	r5, r3
 80028ec:	4643      	mov	r3, r8
 80028ee:	18e3      	adds	r3, r4, r3
 80028f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028f4:	464b      	mov	r3, r9
 80028f6:	eb45 0303 	adc.w	r3, r5, r3
 80028fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800290a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800291a:	4629      	mov	r1, r5
 800291c:	008b      	lsls	r3, r1, #2
 800291e:	4621      	mov	r1, r4
 8002920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002924:	4621      	mov	r1, r4
 8002926:	008a      	lsls	r2, r1, #2
 8002928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800292c:	f7fd fc6a 	bl	8000204 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4b60      	ldr	r3, [pc, #384]	; (8002ab8 <UART_SetConfig+0x4e4>)
 8002936:	fba3 2302 	umull	r2, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	011c      	lsls	r4, r3, #4
 800293e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800294c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002950:	4642      	mov	r2, r8
 8002952:	464b      	mov	r3, r9
 8002954:	1891      	adds	r1, r2, r2
 8002956:	61b9      	str	r1, [r7, #24]
 8002958:	415b      	adcs	r3, r3
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002960:	4641      	mov	r1, r8
 8002962:	1851      	adds	r1, r2, r1
 8002964:	6139      	str	r1, [r7, #16]
 8002966:	4649      	mov	r1, r9
 8002968:	414b      	adcs	r3, r1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002978:	4659      	mov	r1, fp
 800297a:	00cb      	lsls	r3, r1, #3
 800297c:	4651      	mov	r1, sl
 800297e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002982:	4651      	mov	r1, sl
 8002984:	00ca      	lsls	r2, r1, #3
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	4603      	mov	r3, r0
 800298c:	4642      	mov	r2, r8
 800298e:	189b      	adds	r3, r3, r2
 8002990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002994:	464b      	mov	r3, r9
 8002996:	460a      	mov	r2, r1
 8002998:	eb42 0303 	adc.w	r3, r2, r3
 800299c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80029aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029b8:	4649      	mov	r1, r9
 80029ba:	008b      	lsls	r3, r1, #2
 80029bc:	4641      	mov	r1, r8
 80029be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029c2:	4641      	mov	r1, r8
 80029c4:	008a      	lsls	r2, r1, #2
 80029c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029ca:	f7fd fc1b 	bl	8000204 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <UART_SetConfig+0x4e4>)
 80029d4:	fba3 1302 	umull	r1, r3, r3, r2
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	2164      	movs	r1, #100	; 0x64
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	3332      	adds	r3, #50	; 0x32
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <UART_SetConfig+0x4e4>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f2:	441c      	add	r4, r3
 80029f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f8:	2200      	movs	r2, #0
 80029fa:	673b      	str	r3, [r7, #112]	; 0x70
 80029fc:	677a      	str	r2, [r7, #116]	; 0x74
 80029fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a02:	4642      	mov	r2, r8
 8002a04:	464b      	mov	r3, r9
 8002a06:	1891      	adds	r1, r2, r2
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	415b      	adcs	r3, r3
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a12:	4641      	mov	r1, r8
 8002a14:	1851      	adds	r1, r2, r1
 8002a16:	6039      	str	r1, [r7, #0]
 8002a18:	4649      	mov	r1, r9
 8002a1a:	414b      	adcs	r3, r1
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a2a:	4659      	mov	r1, fp
 8002a2c:	00cb      	lsls	r3, r1, #3
 8002a2e:	4651      	mov	r1, sl
 8002a30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a34:	4651      	mov	r1, sl
 8002a36:	00ca      	lsls	r2, r1, #3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4642      	mov	r2, r8
 8002a40:	189b      	adds	r3, r3, r2
 8002a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a44:	464b      	mov	r3, r9
 8002a46:	460a      	mov	r2, r1
 8002a48:	eb42 0303 	adc.w	r3, r2, r3
 8002a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	663b      	str	r3, [r7, #96]	; 0x60
 8002a58:	667a      	str	r2, [r7, #100]	; 0x64
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a66:	4649      	mov	r1, r9
 8002a68:	008b      	lsls	r3, r1, #2
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a70:	4641      	mov	r1, r8
 8002a72:	008a      	lsls	r2, r1, #2
 8002a74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a78:	f7fd fbc4 	bl	8000204 <__aeabi_uldivmod>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <UART_SetConfig+0x4e4>)
 8002a82:	fba3 1302 	umull	r1, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2164      	movs	r1, #100	; 0x64
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <UART_SetConfig+0x4e4>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4422      	add	r2, r4
 8002aa8:	609a      	str	r2, [r3, #8]
}
 8002aaa:	bf00      	nop
 8002aac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab6:	bf00      	nop
 8002ab8:	51eb851f 	.word	0x51eb851f

08002abc <__errno>:
 8002abc:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <__errno+0x8>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000018 	.word	0x20000018

08002ac8 <exit>:
 8002ac8:	b508      	push	{r3, lr}
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <exit+0x20>)
 8002acc:	4604      	mov	r4, r0
 8002ace:	b113      	cbz	r3, 8002ad6 <exit+0xe>
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f3af 8000 	nop.w
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <exit+0x24>)
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002adc:	b103      	cbz	r3, 8002ae0 <exit+0x18>
 8002ade:	4798      	blx	r3
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f7fd ffd3 	bl	8000a8c <_exit>
 8002ae6:	bf00      	nop
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	08002b78 	.word	0x08002b78

08002af0 <__libc_init_array>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	4d0d      	ldr	r5, [pc, #52]	; (8002b28 <__libc_init_array+0x38>)
 8002af4:	4c0d      	ldr	r4, [pc, #52]	; (8002b2c <__libc_init_array+0x3c>)
 8002af6:	1b64      	subs	r4, r4, r5
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	2600      	movs	r6, #0
 8002afc:	42a6      	cmp	r6, r4
 8002afe:	d109      	bne.n	8002b14 <__libc_init_array+0x24>
 8002b00:	4d0b      	ldr	r5, [pc, #44]	; (8002b30 <__libc_init_array+0x40>)
 8002b02:	4c0c      	ldr	r4, [pc, #48]	; (8002b34 <__libc_init_array+0x44>)
 8002b04:	f000 f820 	bl	8002b48 <_init>
 8002b08:	1b64      	subs	r4, r4, r5
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	42a6      	cmp	r6, r4
 8002b10:	d105      	bne.n	8002b1e <__libc_init_array+0x2e>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b18:	4798      	blx	r3
 8002b1a:	3601      	adds	r6, #1
 8002b1c:	e7ee      	b.n	8002afc <__libc_init_array+0xc>
 8002b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b22:	4798      	blx	r3
 8002b24:	3601      	adds	r6, #1
 8002b26:	e7f2      	b.n	8002b0e <__libc_init_array+0x1e>
 8002b28:	08002b84 	.word	0x08002b84
 8002b2c:	08002b84 	.word	0x08002b84
 8002b30:	08002b84 	.word	0x08002b84
 8002b34:	08002b88 	.word	0x08002b88

08002b38 <memset>:
 8002b38:	4402      	add	r2, r0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <memset+0xa>
 8002b40:	4770      	bx	lr
 8002b42:	f803 1b01 	strb.w	r1, [r3], #1
 8002b46:	e7f9      	b.n	8002b3c <memset+0x4>

08002b48 <_init>:
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	bf00      	nop
 8002b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4e:	bc08      	pop	{r3}
 8002b50:	469e      	mov	lr, r3
 8002b52:	4770      	bx	lr

08002b54 <_fini>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr
