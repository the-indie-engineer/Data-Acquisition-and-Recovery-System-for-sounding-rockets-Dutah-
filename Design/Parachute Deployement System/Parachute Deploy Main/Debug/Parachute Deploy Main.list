
Parachute Deploy Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004680  08004680  00014680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d0  080046d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08004748  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004748  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000798a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001401  00000000  00000000  00027a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  00028e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00029570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201eb  00000000  00000000  00029c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099b2  00000000  00000000  00049e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4573  00000000  00000000  000537bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117d30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002240  00000000  00000000  00117d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004664 	.word	0x08004664

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08004664 	.word	0x08004664

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz, Avg1, Avg2;


void MPU6050_Init (void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2301      	movs	r3, #1
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2275      	movs	r2, #117	; 0x75
 8000e9c:	21d0      	movs	r1, #208	; 0xd0
 8000e9e:	4823      	ldr	r0, [pc, #140]	; (8000f2c <MPU6050_Init+0xa8>)
 8000ea0:	f001 f9c4 	bl	800222c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b68      	cmp	r3, #104	; 0x68
 8000ea8:	d13b      	bne.n	8000f22 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	226b      	movs	r2, #107	; 0x6b
 8000ec0:	21d0      	movs	r1, #208	; 0xd0
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <MPU6050_Init+0xa8>)
 8000ec4:	f001 f8b8 	bl	8002038 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	1dbb      	adds	r3, r7, #6
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	2219      	movs	r2, #25
 8000ede:	21d0      	movs	r1, #208	; 0xd0
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MPU6050_Init+0xa8>)
 8000ee2:	f001 f8a9 	bl	8002038 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	221c      	movs	r2, #28
 8000efc:	21d0      	movs	r1, #208	; 0xd0
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <MPU6050_Init+0xa8>)
 8000f00:	f001 f89a 	bl	8002038 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000f04:	2300      	movs	r3, #0
 8000f06:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	1dbb      	adds	r3, r7, #6
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	221b      	movs	r2, #27
 8000f1a:	21d0      	movs	r1, #208	; 0xd0
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MPU6050_Init+0xa8>)
 8000f1e:	f001 f88b 	bl	8002038 <HAL_I2C_Mem_Write>
	}

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000090 	.word	0x20000090

08000f30 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	463b      	mov	r3, r7
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	223b      	movs	r2, #59	; 0x3b
 8000f48:	21d0      	movs	r1, #208	; 0xd0
 8000f4a:	482f      	ldr	r0, [pc, #188]	; (8001008 <MPU6050_Read_Accel+0xd8>)
 8000f4c:	f001 f96e 	bl	800222c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f50:	783b      	ldrb	r3, [r7, #0]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	787b      	ldrb	r3, [r7, #1]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MPU6050_Read_Accel+0xdc>)
 8000f60:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MPU6050_Read_Accel+0xe0>)
 8000f72:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MPU6050_Read_Accel+0xe4>)
 8000f84:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <MPU6050_Read_Accel+0xdc>)
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa8d 	bl	80004ac <__aeabi_i2d>
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MPU6050_Read_Accel+0xe8>)
 8000f98:	f7ff fc1c 	bl	80007d4 <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fd9c 	bl	8000ae0 <__aeabi_d2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <MPU6050_Read_Accel+0xec>)
 8000fac:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MPU6050_Read_Accel+0xe0>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa79 	bl	80004ac <__aeabi_i2d>
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MPU6050_Read_Accel+0xe8>)
 8000fc0:	f7ff fc08 	bl	80007d4 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fd88 	bl	8000ae0 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <MPU6050_Read_Accel+0xf0>)
 8000fd4:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MPU6050_Read_Accel+0xe4>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa65 	bl	80004ac <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MPU6050_Read_Accel+0xe8>)
 8000fe8:	f7ff fbf4 	bl	80007d4 <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd74 	bl	8000ae0 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <MPU6050_Read_Accel+0xf4>)
 8000ffc:	6013      	str	r3, [r2, #0]


}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000090 	.word	0x20000090
 800100c:	200000e4 	.word	0x200000e4
 8001010:	200000e6 	.word	0x200000e6
 8001014:	200000e8 	.word	0x200000e8
 8001018:	40d00000 	.word	0x40d00000
 800101c:	200000f0 	.word	0x200000f0
 8001020:	200000f4 	.word	0x200000f4
 8001024:	200000f8 	.word	0x200000f8

08001028 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2306      	movs	r3, #6
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	463b      	mov	r3, r7
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2243      	movs	r2, #67	; 0x43
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	4831      	ldr	r0, [pc, #196]	; (8001108 <MPU6050_Read_Gyro+0xe0>)
 8001044:	f001 f8f2 	bl	800222c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001048:	783b      	ldrb	r3, [r7, #0]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	787b      	ldrb	r3, [r7, #1]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <MPU6050_Read_Gyro+0xe4>)
 8001058:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800105a:	78bb      	ldrb	r3, [r7, #2]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <MPU6050_Read_Gyro+0xe8>)
 800106a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	797b      	ldrb	r3, [r7, #5]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MPU6050_Read_Gyro+0xec>)
 800107c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MPU6050_Read_Gyro+0xe4>)
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa11 	bl	80004ac <__aeabi_i2d>
 800108a:	a31d      	add	r3, pc, #116	; (adr r3, 8001100 <MPU6050_Read_Gyro+0xd8>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fba0 	bl	80007d4 <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fd20 	bl	8000ae0 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <MPU6050_Read_Gyro+0xf0>)
 80010a4:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MPU6050_Read_Gyro+0xe8>)
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9fd 	bl	80004ac <__aeabi_i2d>
 80010b2:	a313      	add	r3, pc, #76	; (adr r3, 8001100 <MPU6050_Read_Gyro+0xd8>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fb8c 	bl	80007d4 <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd0c 	bl	8000ae0 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <MPU6050_Read_Gyro+0xf4>)
 80010cc:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MPU6050_Read_Gyro+0xec>)
 80010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9e9 	bl	80004ac <__aeabi_i2d>
 80010da:	a309      	add	r3, pc, #36	; (adr r3, 8001100 <MPU6050_Read_Gyro+0xd8>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fb78 	bl	80007d4 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fcf8 	bl	8000ae0 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <MPU6050_Read_Gyro+0xf8>)
 80010f4:	6013      	str	r3, [r2, #0]

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	00000000 	.word	0x00000000
 8001104:	40606000 	.word	0x40606000
 8001108:	20000090 	.word	0x20000090
 800110c:	200000ea 	.word	0x200000ea
 8001110:	200000ec 	.word	0x200000ec
 8001114:	200000ee 	.word	0x200000ee
 8001118:	200000fc 	.word	0x200000fc
 800111c:	20000100 	.word	0x20000100
 8001120:	20000104 	.word	0x20000104

08001124 <Tilt_sensor>:

void Tilt_sensor(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	i= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <Tilt_sensor+0x38>)
 800112e:	f000 fe0d 	bl	8001d4c <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <Tilt_sensor+0x3c>)
 8001138:	601a      	str	r2, [r3, #0]
	if(i == 0)
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <Tilt_sensor+0x3c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <Tilt_sensor+0x2a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <Tilt_sensor+0x38>)
 8001148:	f000 fe18 	bl	8001d7c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
	}
}
 800114c:	e004      	b.n	8001158 <Tilt_sensor+0x34>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	2140      	movs	r1, #64	; 0x40
 8001152:	4802      	ldr	r0, [pc, #8]	; (800115c <Tilt_sensor+0x38>)
 8001154:	f000 fe12 	bl	8001d7c <HAL_GPIO_WritePin>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020800 	.word	0x40020800
 8001160:	2000008c 	.word	0x2000008c
 8001164:	00000000 	.word	0x00000000

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f000 fade 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f8f6 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f000 f98e 	bl	8001494 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001178:	f000 f95e 	bl	8001438 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 800117c:	f7ff fe82 	bl	8000e84 <MPU6050_Init>

    /* USER CODE BEGIN 3 */

	  // read the Accelerometer and Gyro values

	  MPU6050_Read_Accel();
 8001180:	f7ff fed6 	bl	8000f30 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001184:	f7ff ff50 	bl	8001028 <MPU6050_Read_Gyro>
	  Tilt_sensor();
 8001188:	f7ff ffcc 	bl	8001124 <Tilt_sensor>
	  // print the Acceleration and Gyro values on the LCD 20x4
	  Avg1 = pow(pow(Ax,2)+pow(Ay,2)+pow(Az,2),0.5);
 800118c:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <main+0x1d0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f99d 	bl	80004d0 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001328 <main+0x1c0>
 800119e:	ec43 2b10 	vmov	d0, r2, r3
 80011a2:	f002 fb45 	bl	8003830 <pow>
 80011a6:	ec55 4b10 	vmov	r4, r5, d0
 80011aa:	4b64      	ldr	r3, [pc, #400]	; (800133c <main+0x1d4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f98e 	bl	80004d0 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8001328 <main+0x1c0>
 80011bc:	ec43 2b10 	vmov	d0, r2, r3
 80011c0:	f002 fb36 	bl	8003830 <pow>
 80011c4:	ec53 2b10 	vmov	r2, r3, d0
 80011c8:	4620      	mov	r0, r4
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7ff f822 	bl	8000214 <__adddf3>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4614      	mov	r4, r2
 80011d6:	461d      	mov	r5, r3
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <main+0x1d8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f977 	bl	80004d0 <__aeabi_f2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8001328 <main+0x1c0>
 80011ea:	ec43 2b10 	vmov	d0, r2, r3
 80011ee:	f002 fb1f 	bl	8003830 <pow>
 80011f2:	ec53 2b10 	vmov	r2, r3, d0
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f80b 	bl	8000214 <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ec43 2b17 	vmov	d7, r2, r3
 8001206:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8001330 <main+0x1c8>
 800120a:	eeb0 0a47 	vmov.f32	s0, s14
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	f002 fb0d 	bl	8003830 <pow>
 8001216:	ec53 2b10 	vmov	r2, r3, d0
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fc5f 	bl	8000ae0 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a47      	ldr	r2, [pc, #284]	; (8001344 <main+0x1dc>)
 8001226:	6013      	str	r3, [r2, #0]
	  Avg2 = pow(pow(Gx,2)+pow(Gy,2)+pow(Gz,2),0.5);
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <main+0x1e0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f94f 	bl	80004d0 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8001328 <main+0x1c0>
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f002 faf7 	bl	8003830 <pow>
 8001242:	ec55 4b10 	vmov	r4, r5, d0
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <main+0x1e4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f940 	bl	80004d0 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8001328 <main+0x1c0>
 8001258:	ec43 2b10 	vmov	d0, r2, r3
 800125c:	f002 fae8 	bl	8003830 <pow>
 8001260:	ec53 2b10 	vmov	r2, r3, d0
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7fe ffd4 	bl	8000214 <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <main+0x1e8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f929 	bl	80004d0 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001328 <main+0x1c0>
 8001286:	ec43 2b10 	vmov	d0, r2, r3
 800128a:	f002 fad1 	bl	8003830 <pow>
 800128e:	ec53 2b10 	vmov	r2, r3, d0
 8001292:	4620      	mov	r0, r4
 8001294:	4629      	mov	r1, r5
 8001296:	f7fe ffbd 	bl	8000214 <__adddf3>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	ec43 2b17 	vmov	d7, r2, r3
 80012a2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001330 <main+0x1c8>
 80012a6:	eeb0 0a47 	vmov.f32	s0, s14
 80012aa:	eef0 0a67 	vmov.f32	s1, s15
 80012ae:	f002 fabf 	bl	8003830 <pow>
 80012b2:	ec53 2b10 	vmov	r2, r3, d0
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fc11 	bl	8000ae0 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a24      	ldr	r2, [pc, #144]	; (8001354 <main+0x1ec>)
 80012c2:	6013      	str	r3, [r2, #0]
	  if(Avg1 >= 2)
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <main+0x1dc>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	db05      	blt.n	80012e4 <main+0x17c>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	481e      	ldr	r0, [pc, #120]	; (8001358 <main+0x1f0>)
 80012de:	f000 fd4d 	bl	8001d7c <HAL_GPIO_WritePin>
 80012e2:	e004      	b.n	80012ee <main+0x186>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2140      	movs	r1, #64	; 0x40
 80012e8:	481b      	ldr	r0, [pc, #108]	; (8001358 <main+0x1f0>)
 80012ea:	f000 fd47 	bl	8001d7c <HAL_GPIO_WritePin>
	  }
	  if(Avg2 >= 200)
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <main+0x1ec>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800135c <main+0x1f4>
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	db06      	blt.n	8001310 <main+0x1a8>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <main+0x1f0>)
 800130a:	f000 fd37 	bl	8001d7c <HAL_GPIO_WritePin>
 800130e:	e005      	b.n	800131c <main+0x1b4>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001316:	4810      	ldr	r0, [pc, #64]	; (8001358 <main+0x1f0>)
 8001318:	f000 fd30 	bl	8001d7c <HAL_GPIO_WritePin>
	  }
	  HAL_Delay (10);  // wait for a while
 800131c:	200a      	movs	r0, #10
 800131e:	f000 fa77 	bl	8001810 <HAL_Delay>
  {
 8001322:	e72d      	b.n	8001180 <main+0x18>
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40000000 	.word	0x40000000
 8001330:	00000000 	.word	0x00000000
 8001334:	3fe00000 	.word	0x3fe00000
 8001338:	200000f0 	.word	0x200000f0
 800133c:	200000f4 	.word	0x200000f4
 8001340:	200000f8 	.word	0x200000f8
 8001344:	20000108 	.word	0x20000108
 8001348:	200000fc 	.word	0x200000fc
 800134c:	20000100 	.word	0x20000100
 8001350:	20000104 	.word	0x20000104
 8001354:	2000010c 	.word	0x2000010c
 8001358:	40020800 	.word	0x40020800
 800135c:	43480000 	.word	0x43480000

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2234      	movs	r2, #52	; 0x34
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fa56 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <SystemClock_Config+0xd0>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a28      	ldr	r2, [pc, #160]	; (8001430 <SystemClock_Config+0xd0>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <SystemClock_Config+0xd0>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <SystemClock_Config+0xd4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <SystemClock_Config+0xd4>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <SystemClock_Config+0xd4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c8:	2310      	movs	r3, #16
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013d4:	2308      	movs	r3, #8
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013d8:	2348      	movs	r3, #72	; 0x48
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 ff4f 	bl	8003290 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013f8:	f000 f8ba 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2102      	movs	r1, #2
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fc89 	bl	8002d30 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001424:	f000 f8a4 	bl	8001570 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C1_Init+0x50>)
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <MX_I2C1_Init+0x54>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_I2C1_Init+0x50>)
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_I2C1_Init+0x58>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_I2C1_Init+0x50>)
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_I2C1_Init+0x50>)
 8001476:	f000 fc9b 	bl	8001db0 <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 f876 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000090 	.word	0x20000090
 800148c:	40005400 	.word	0x40005400
 8001490:	000186a0 	.word	0x000186a0

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a26      	ldr	r2, [pc, #152]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_GPIO_Init+0xd4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <MX_GPIO_Init+0xd4>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_GPIO_Init+0xd4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001520:	4812      	ldr	r0, [pc, #72]	; (800156c <MX_GPIO_Init+0xd8>)
 8001522:	f000 fc2b 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001526:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <MX_GPIO_Init+0xd8>)
 8001540:	f000 fa70 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_GPIO_Init+0xd8>)
 800155a:	f000 fa63 	bl	8001a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40020800 	.word	0x40020800

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_I2C_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12b      	bne.n	800164a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_I2C_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_I2C_MspInit+0x88>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160e:	23c0      	movs	r3, #192	; 0xc0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161e:	2304      	movs	r3, #4
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_I2C_MspInit+0x8c>)
 800162a:	f000 f9fb 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 f890 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001702:	f7ff ffd7 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f002 f867 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fd2d 	bl	8001168 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800171c:	080046d8 	.word	0x080046d8
  ldr r2, =_sbss
 8001720:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001724:	20000114 	.word	0x20000114

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f931 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff ff0e 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f93b 	bl	8001a0a <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f911 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000110 	.word	0x20000110

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000110 	.word	0x20000110

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff47 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff5c 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb0 	bl	8001978 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e165      	b.n	8001d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8154 	bne.w	8001d06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80ae 	beq.w	8001d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a5c      	ldr	r2, [pc, #368]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4f      	ldr	r2, [pc, #316]	; (8001d2c <HAL_GPIO_Init+0x308>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	; (8001d30 <HAL_GPIO_Init+0x30c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x216>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_GPIO_Init+0x310>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x212>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	; (8001d38 <HAL_GPIO_Init+0x314>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	; (8001d3c <HAL_GPIO_Init+0x318>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x20a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4a      	ldr	r2, [pc, #296]	; (8001d40 <HAL_GPIO_Init+0x31c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a49      	ldr	r2, [pc, #292]	; (8001d44 <HAL_GPIO_Init+0x320>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x202>
 8001c22:	2306      	movs	r3, #6
 8001c24:	e00c      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e00a      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c2e:	2304      	movs	r3, #4
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c50:	4935      	ldr	r1, [pc, #212]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	f67f ae96 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e001      	b.n	8001d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e12b      	b.n	800201a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fbfa 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e14:	f001 f87e 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8001e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a81      	ldr	r2, [pc, #516]	; (8002024 <HAL_I2C_Init+0x274>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d807      	bhi.n	8001e34 <HAL_I2C_Init+0x84>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a80      	ldr	r2, [pc, #512]	; (8002028 <HAL_I2C_Init+0x278>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e006      	b.n	8001e42 <HAL_I2C_Init+0x92>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a7d      	ldr	r2, [pc, #500]	; (800202c <HAL_I2C_Init+0x27c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0e7      	b.n	800201a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a78      	ldr	r2, [pc, #480]	; (8002030 <HAL_I2C_Init+0x280>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_I2C_Init+0x274>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d802      	bhi.n	8001e84 <HAL_I2C_Init+0xd4>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	e009      	b.n	8001e98 <HAL_I2C_Init+0xe8>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_I2C_Init+0x284>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	3301      	adds	r3, #1
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	495c      	ldr	r1, [pc, #368]	; (8002024 <HAL_I2C_Init+0x274>)
 8001eb4:	428b      	cmp	r3, r1
 8001eb6:	d819      	bhi.n	8001eec <HAL_I2C_Init+0x13c>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e59      	subs	r1, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec6:	1c59      	adds	r1, r3, #1
 8001ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ecc:	400b      	ands	r3, r1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_I2C_Init+0x138>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e59      	subs	r1, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee6:	e051      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e04f      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <HAL_I2C_Init+0x168>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e012      	b.n	8001f3e <HAL_I2C_Init+0x18e>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1e58      	subs	r0, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	0099      	lsls	r1, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Init+0x196>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e022      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10e      	bne.n	8001f6c <HAL_I2C_Init+0x1bc>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e58      	subs	r0, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6859      	ldr	r1, [r3, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	440b      	add	r3, r1
 8001f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6a:	e00f      	b.n	8001f8c <HAL_I2C_Init+0x1dc>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	0099      	lsls	r1, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	6809      	ldr	r1, [r1, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6911      	ldr	r1, [r2, #16]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68d2      	ldr	r2, [r2, #12]
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	000186a0 	.word	0x000186a0
 8002028:	001e847f 	.word	0x001e847f
 800202c:	003d08ff 	.word	0x003d08ff
 8002030:	431bde83 	.word	0x431bde83
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	817b      	strh	r3, [r7, #10]
 800204a:	460b      	mov	r3, r1
 800204c:	813b      	strh	r3, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002052:	f7ff fbd1 	bl	80017f8 <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b20      	cmp	r3, #32
 8002062:	f040 80d9 	bne.w	8002218 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2319      	movs	r3, #25
 800206c:	2201      	movs	r2, #1
 800206e:	496d      	ldr	r1, [pc, #436]	; (8002224 <HAL_I2C_Mem_Write+0x1ec>)
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fc7f 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
 800207e:	e0cc      	b.n	800221a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_I2C_Mem_Write+0x56>
 800208a:	2302      	movs	r3, #2
 800208c:	e0c5      	b.n	800221a <HAL_I2C_Mem_Write+0x1e2>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d007      	beq.n	80020b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2221      	movs	r2, #33	; 0x21
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2240      	movs	r2, #64	; 0x40
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a3a      	ldr	r2, [r7, #32]
 80020de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_I2C_Mem_Write+0x1f0>)
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f6:	88f8      	ldrh	r0, [r7, #6]
 80020f8:	893a      	ldrh	r2, [r7, #8]
 80020fa:	8979      	ldrh	r1, [r7, #10]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4603      	mov	r3, r0
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fab6 	bl	8002678 <I2C_RequestMemoryWrite>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d052      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e081      	b.n	800221a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fd00 	bl	8002b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b04      	cmp	r3, #4
 800212c:	d107      	bne.n	800213e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06b      	b.n	800221a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11b      	bne.n	80021b8 <HAL_I2C_Mem_Write+0x180>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d017      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1aa      	bne.n	8002116 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fcec 	bl	8002ba2 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d107      	bne.n	80021e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e016      	b.n	800221a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	00100002 	.word	0x00100002
 8002228:	ffff0000 	.word	0xffff0000

0800222c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002246:	f7ff fad7 	bl	80017f8 <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	f040 8208 	bne.w	800266a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2319      	movs	r3, #25
 8002260:	2201      	movs	r2, #1
 8002262:	497b      	ldr	r1, [pc, #492]	; (8002450 <HAL_I2C_Mem_Read+0x224>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fb85 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	e1fb      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Mem_Read+0x56>
 800227e:	2302      	movs	r3, #2
 8002280:	e1f4      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d007      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2222      	movs	r2, #34	; 0x22
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a5b      	ldr	r2, [pc, #364]	; (8002454 <HAL_I2C_Mem_Read+0x228>)
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ea:	88f8      	ldrh	r0, [r7, #6]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4603      	mov	r3, r0
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fa52 	bl	80027a4 <I2C_RequestMemoryRead>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1b0      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	d113      	bne.n	800233a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e184      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	2b01      	cmp	r3, #1
 8002340:	d11b      	bne.n	800237a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e164      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b02      	cmp	r3, #2
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	e144      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023d0:	e138      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	f200 80f1 	bhi.w	80025be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d123      	bne.n	800242c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fc1b 	bl	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e139      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242a:	e10b      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b02      	cmp	r3, #2
 8002432:	d14e      	bne.n	80024d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243a:	2200      	movs	r2, #0
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_I2C_Mem_Read+0x22c>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa98 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e10e      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
 800244e:	bf00      	nop
 8002450:	00100002 	.word	0x00100002
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024d0:	e0b8      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	2200      	movs	r2, #0
 80024da:	4966      	ldr	r1, [pc, #408]	; (8002674 <HAL_I2C_Mem_Read+0x448>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fa49 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0bf      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	2200      	movs	r2, #0
 8002536:	494f      	ldr	r1, [pc, #316]	; (8002674 <HAL_I2C_Mem_Read+0x448>)
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fa1b 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e091      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025bc:	e042      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fb2e 	bl	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04c      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d118      	bne.n	8002644 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aec2 	bne.w	80023d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	00010004 	.word	0x00010004

08002678 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	817b      	strh	r3, [r7, #10]
 800268a:	460b      	mov	r3, r1
 800268c:	813b      	strh	r3, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f960 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c8:	d103      	bne.n	80026d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e05f      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	492d      	ldr	r1, [pc, #180]	; (80027a0 <I2C_RequestMemoryWrite+0x128>)
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f998 	bl	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e04c      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fa02 	bl	8002b20 <I2C_WaitOnTXEFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b04      	cmp	r3, #4
 8002728:	d107      	bne.n	800273a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002738:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02b      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002744:	893b      	ldrh	r3, [r7, #8]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e021      	b.n	8002794 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	6a39      	ldr	r1, [r7, #32]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9dc 	bl	8002b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b04      	cmp	r3, #4
 8002774:	d107      	bne.n	8002786 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002784:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e005      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800278a:	893b      	ldrh	r3, [r7, #8]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	00010002 	.word	0x00010002

080027a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8c2 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002804:	d103      	bne.n	800280e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0aa      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	4952      	ldr	r1, [pc, #328]	; (8002970 <I2C_RequestMemoryRead+0x1cc>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f8fa 	bl	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e097      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f964 	bl	8002b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e076      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002880:	893b      	ldrh	r3, [r7, #8]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	e021      	b.n	80028d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	b29b      	uxth	r3, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f93e 	bl	8002b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d107      	bne.n	80028c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e050      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	6a39      	ldr	r1, [r7, #32]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f923 	bl	8002b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d107      	bne.n	80028f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e035      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2200      	movs	r2, #0
 8002914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f82b 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002932:	d103      	bne.n	800293c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e013      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	4906      	ldr	r1, [pc, #24]	; (8002970 <I2C_RequestMemoryRead+0x1cc>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f863 	bl	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	00010002 	.word	0x00010002

08002974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002984:	e025      	b.n	80029d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d021      	beq.n	80029d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7fe ff33 	bl	80017f8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e023      	b.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10d      	bne.n	80029f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4013      	ands	r3, r2
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	e00c      	b.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d0b6      	beq.n	8002986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a30:	e051      	b.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a40:	d123      	bne.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0204 	orr.w	r2, r3, #4
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e046      	b.n	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d021      	beq.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe feb1 	bl	80017f8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d116      	bne.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e020      	b.n	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10c      	bne.n	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4013      	ands	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	e00b      	b.n	8002b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	43da      	mvns	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4013      	ands	r3, r2
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d18d      	bne.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2c:	e02d      	b.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f8ce 	bl	8002cd0 <I2C_IsAcknowledgeFailed>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e02d      	b.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d021      	beq.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7fe fe57 	bl	80017f8 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d116      	bne.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e007      	b.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d1ca      	bne.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bae:	e02d      	b.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f88d 	bl	8002cd0 <I2C_IsAcknowledgeFailed>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e02d      	b.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d021      	beq.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc8:	f7fe fe16 	bl	80017f8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d302      	bcc.n	8002bde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d116      	bne.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e007      	b.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d1ca      	bne.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c30:	e042      	b.n	8002cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d119      	bne.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0210 	mvn.w	r2, #16
 8002c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e029      	b.n	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c74:	f7fe fdc0 	bl	80017f8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d302      	bcc.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e007      	b.n	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d1b5      	bne.n	8002c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d11b      	bne.n	8002d20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0cc      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b68      	ldr	r3, [pc, #416]	; (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d90c      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0b8      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	494d      	ldr	r1, [pc, #308]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d044      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d119      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4b3f      	ldr	r3, [pc, #252]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e06f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e067      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4934      	ldr	r1, [pc, #208]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e20:	f7fe fcea 	bl	80017f8 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7fe fce6 	bl	80017f8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 020c 	and.w	r2, r3, #12
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1eb      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d20c      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e032      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4916      	ldr	r1, [pc, #88]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	490e      	ldr	r1, [pc, #56]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb6:	f000 f841 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	490a      	ldr	r1, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	5ccb      	ldrb	r3, [r1, r3]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fc4a 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08004680 	.word	0x08004680
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000000 	.word	0x20000000

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f18:	f7ff fff0 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	08004690 	.word	0x08004690

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b0a6      	sub	sp, #152	; 0x98
 8002f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f62:	4bc8      	ldr	r3, [pc, #800]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	f200 817e 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x330>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	0800326d 	.word	0x0800326d
 8002f80:	0800326d 	.word	0x0800326d
 8002f84:	0800326d 	.word	0x0800326d
 8002f88:	08002fb5 	.word	0x08002fb5
 8002f8c:	0800326d 	.word	0x0800326d
 8002f90:	0800326d 	.word	0x0800326d
 8002f94:	0800326d 	.word	0x0800326d
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	0800326d 	.word	0x0800326d
 8002fa0:	0800326d 	.word	0x0800326d
 8002fa4:	0800326d 	.word	0x0800326d
 8002fa8:	08003127 	.word	0x08003127
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4bb6      	ldr	r3, [pc, #728]	; (8003288 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002fb2:	e15f      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb4:	4bb5      	ldr	r3, [pc, #724]	; (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8002fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002fba:	e15b      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fbc:	4bb1      	ldr	r3, [pc, #708]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc8:	4bae      	ldr	r3, [pc, #696]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d031      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd4:	4bab      	ldr	r3, [pc, #684]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe8:	2300      	movs	r3, #0
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
 8002fec:	4ba7      	ldr	r3, [pc, #668]	; (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8002fee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	fb03 f202 	mul.w	r2, r3, r2
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	4aa2      	ldr	r2, [pc, #648]	; (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8003004:	4621      	mov	r1, r4
 8003006:	fba1 1202 	umull	r1, r2, r1, r2
 800300a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800300c:	460a      	mov	r2, r1
 800300e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003010:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003012:	4413      	add	r3, r2
 8003014:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800301a:	2200      	movs	r2, #0
 800301c:	65bb      	str	r3, [r7, #88]	; 0x58
 800301e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003024:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003028:	f7fd fdaa 	bl	8000b80 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003036:	e064      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003038:	4b92      	ldr	r3, [pc, #584]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	2200      	movs	r2, #0
 8003040:	653b      	str	r3, [r7, #80]	; 0x50
 8003042:	657a      	str	r2, [r7, #84]	; 0x54
 8003044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
 800304c:	2300      	movs	r3, #0
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003050:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003054:	4622      	mov	r2, r4
 8003056:	462b      	mov	r3, r5
 8003058:	f04f 0000 	mov.w	r0, #0
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	0159      	lsls	r1, r3, #5
 8003062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003066:	0150      	lsls	r0, r2, #5
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4621      	mov	r1, r4
 800306e:	1a51      	subs	r1, r2, r1
 8003070:	6139      	str	r1, [r7, #16]
 8003072:	4629      	mov	r1, r5
 8003074:	eb63 0301 	sbc.w	r3, r3, r1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003086:	4659      	mov	r1, fp
 8003088:	018b      	lsls	r3, r1, #6
 800308a:	4651      	mov	r1, sl
 800308c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003090:	4651      	mov	r1, sl
 8003092:	018a      	lsls	r2, r1, #6
 8003094:	4651      	mov	r1, sl
 8003096:	ebb2 0801 	subs.w	r8, r2, r1
 800309a:	4659      	mov	r1, fp
 800309c:	eb63 0901 	sbc.w	r9, r3, r1
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030b4:	4690      	mov	r8, r2
 80030b6:	4699      	mov	r9, r3
 80030b8:	4623      	mov	r3, r4
 80030ba:	eb18 0303 	adds.w	r3, r8, r3
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	462b      	mov	r3, r5
 80030c2:	eb49 0303 	adc.w	r3, r9, r3
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030d4:	4629      	mov	r1, r5
 80030d6:	028b      	lsls	r3, r1, #10
 80030d8:	4621      	mov	r1, r4
 80030da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030de:	4621      	mov	r1, r4
 80030e0:	028a      	lsls	r2, r1, #10
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ea:	2200      	movs	r2, #0
 80030ec:	643b      	str	r3, [r7, #64]	; 0x40
 80030ee:	647a      	str	r2, [r7, #68]	; 0x44
 80030f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030f4:	f7fd fd44 	bl	8000b80 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003102:	4b60      	ldr	r3, [pc, #384]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	3301      	adds	r3, #1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003114:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003124:	e0a6      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003126:	4b57      	ldr	r3, [pc, #348]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003132:	4b54      	ldr	r3, [pc, #336]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02a      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b51      	ldr	r3, [pc, #324]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	2200      	movs	r2, #0
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
 8003148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003150:	2100      	movs	r1, #0
 8003152:	4b4e      	ldr	r3, [pc, #312]	; (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8003154:	fb03 f201 	mul.w	r2, r3, r1
 8003158:	2300      	movs	r3, #0
 800315a:	fb00 f303 	mul.w	r3, r0, r3
 800315e:	4413      	add	r3, r2
 8003160:	4a4a      	ldr	r2, [pc, #296]	; (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8003162:	fba0 1202 	umull	r1, r2, r0, r2
 8003166:	677a      	str	r2, [r7, #116]	; 0x74
 8003168:	460a      	mov	r2, r1
 800316a:	673a      	str	r2, [r7, #112]	; 0x70
 800316c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800316e:	4413      	add	r3, r2
 8003170:	677b      	str	r3, [r7, #116]	; 0x74
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003176:	2200      	movs	r2, #0
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
 800317a:	637a      	str	r2, [r7, #52]	; 0x34
 800317c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003180:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003184:	f7fd fcfc 	bl	8000b80 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003192:	e05b      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003194:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	2200      	movs	r2, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
 800319e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0159      	lsls	r1, r3, #5
 80031be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c2:	0150      	lsls	r0, r2, #5
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4641      	mov	r1, r8
 80031ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e8:	ebb2 040a 	subs.w	r4, r2, sl
 80031ec:	eb63 050b 	sbc.w	r5, r3, fp
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	464b      	mov	r3, r9
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003234:	2200      	movs	r2, #0
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323e:	f7fd fc9f 	bl	8000b80 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4613      	mov	r3, r2
 8003248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0f1b      	lsrs	r3, r3, #28
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800325a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800325e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800326a:	e003      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_RCC_GetSysClockFreq+0x34c>)
 800326e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003272:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003278:	4618      	mov	r0, r3
 800327a:	3798      	adds	r7, #152	; 0x98
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	017d7840 	.word	0x017d7840

08003290 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e28d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8083 	beq.w	80033b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032b0:	4b94      	ldr	r3, [pc, #592]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d019      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032bc:	4b91      	ldr	r3, [pc, #580]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c8:	4b8e      	ldr	r3, [pc, #568]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x124>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e25a      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x90>
 8003312:	4b7c      	ldr	r3, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7b      	ldr	r2, [pc, #492]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0xb4>
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6b      	ldr	r2, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fa48 	bl	80017f8 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fa44 	bl	80017f8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e21f      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xdc>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fa34 	bl	80017f8 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fa30 	bl	80017f8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e20b      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b57      	ldr	r3, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x104>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06f      	beq.n	80034a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ce:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1d3      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x278>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe f9dd 	bl	80017f8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe f9d9 	bl	80017f8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1b4      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCC_OscConfig+0x278>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe f9bc 	bl	80017f8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7fe f9b8 	bl	80017f8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e193      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe f99c 	bl	80017f8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe f998 	bl	80017f8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e173      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x234>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe f985 	bl	80017f8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe f981 	bl	80017f8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e15c      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b8a      	ldr	r3, [pc, #552]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b83      	ldr	r3, [pc, #524]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7f      	ldr	r3, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a7e      	ldr	r2, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe f941 	bl	80017f8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe f93d 	bl	80017f8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e118      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x31e>
 80035a0:	4b66      	ldr	r3, [pc, #408]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a65      	ldr	r2, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x340>
 80035b6:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a60      	ldr	r2, [pc, #384]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	4b5e      	ldr	r3, [pc, #376]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a5d      	ldr	r2, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035d0:	4b5a      	ldr	r3, [pc, #360]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a59      	ldr	r2, [pc, #356]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe f902 	bl	80017f8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe f8fe 	bl	80017f8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0d7      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x368>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe f8ec 	bl	80017f8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe f8e8 	bl	80017f8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0c1      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b40      	ldr	r3, [pc, #256]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4a3a      	ldr	r2, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ad 	beq.w	80037bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d060      	beq.n	8003730 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d145      	bne.n	8003702 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe f8bc 	bl	80017f8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe f8b8 	bl	80017f8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e093      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	491b      	ldr	r1, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe f88d 	bl	80017f8 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe f889 	bl	80017f8 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e064      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x452>
 8003700:	e05c      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe f876 	bl	80017f8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe f872 	bl	80017f8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x480>
 800372e:	e045      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e040      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
 8003744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_RCC_OscConfig+0x538>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d030      	beq.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d129      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d122      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003780:	4293      	cmp	r3, r2
 8003782:	d119      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d10f      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <__errno>:
 80037cc:	4b01      	ldr	r3, [pc, #4]	; (80037d4 <__errno+0x8>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4d0d      	ldr	r5, [pc, #52]	; (8003810 <__libc_init_array+0x38>)
 80037dc:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	2600      	movs	r6, #0
 80037e4:	42a6      	cmp	r6, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	4d0b      	ldr	r5, [pc, #44]	; (8003818 <__libc_init_array+0x40>)
 80037ea:	4c0c      	ldr	r4, [pc, #48]	; (800381c <__libc_init_array+0x44>)
 80037ec:	f000 ff3a 	bl	8004664 <_init>
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	2600      	movs	r6, #0
 80037f6:	42a6      	cmp	r6, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003800:	4798      	blx	r3
 8003802:	3601      	adds	r6, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f855 3b04 	ldr.w	r3, [r5], #4
 800380a:	4798      	blx	r3
 800380c:	3601      	adds	r6, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	080046d0 	.word	0x080046d0
 8003814:	080046d0 	.word	0x080046d0
 8003818:	080046d0 	.word	0x080046d0
 800381c:	080046d4 	.word	0x080046d4

08003820 <memset>:
 8003820:	4402      	add	r2, r0
 8003822:	4603      	mov	r3, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <pow>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	ed2d 8b02 	vpush	{d8}
 8003836:	eeb0 8a40 	vmov.f32	s16, s0
 800383a:	eef0 8a60 	vmov.f32	s17, s1
 800383e:	ec55 4b11 	vmov	r4, r5, d1
 8003842:	f000 f865 	bl	8003910 <__ieee754_pow>
 8003846:	4622      	mov	r2, r4
 8003848:	462b      	mov	r3, r5
 800384a:	4620      	mov	r0, r4
 800384c:	4629      	mov	r1, r5
 800384e:	ec57 6b10 	vmov	r6, r7, d0
 8003852:	f7fd f92f 	bl	8000ab4 <__aeabi_dcmpun>
 8003856:	2800      	cmp	r0, #0
 8003858:	d13b      	bne.n	80038d2 <pow+0xa2>
 800385a:	ec51 0b18 	vmov	r0, r1, d8
 800385e:	2200      	movs	r2, #0
 8003860:	2300      	movs	r3, #0
 8003862:	f7fd f8f5 	bl	8000a50 <__aeabi_dcmpeq>
 8003866:	b1b8      	cbz	r0, 8003898 <pow+0x68>
 8003868:	2200      	movs	r2, #0
 800386a:	2300      	movs	r3, #0
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fd f8ee 	bl	8000a50 <__aeabi_dcmpeq>
 8003874:	2800      	cmp	r0, #0
 8003876:	d146      	bne.n	8003906 <pow+0xd6>
 8003878:	ec45 4b10 	vmov	d0, r4, r5
 800387c:	f000 fe61 	bl	8004542 <finite>
 8003880:	b338      	cbz	r0, 80038d2 <pow+0xa2>
 8003882:	2200      	movs	r2, #0
 8003884:	2300      	movs	r3, #0
 8003886:	4620      	mov	r0, r4
 8003888:	4629      	mov	r1, r5
 800388a:	f7fd f8eb 	bl	8000a64 <__aeabi_dcmplt>
 800388e:	b300      	cbz	r0, 80038d2 <pow+0xa2>
 8003890:	f7ff ff9c 	bl	80037cc <__errno>
 8003894:	2322      	movs	r3, #34	; 0x22
 8003896:	e01b      	b.n	80038d0 <pow+0xa0>
 8003898:	ec47 6b10 	vmov	d0, r6, r7
 800389c:	f000 fe51 	bl	8004542 <finite>
 80038a0:	b9e0      	cbnz	r0, 80038dc <pow+0xac>
 80038a2:	eeb0 0a48 	vmov.f32	s0, s16
 80038a6:	eef0 0a68 	vmov.f32	s1, s17
 80038aa:	f000 fe4a 	bl	8004542 <finite>
 80038ae:	b1a8      	cbz	r0, 80038dc <pow+0xac>
 80038b0:	ec45 4b10 	vmov	d0, r4, r5
 80038b4:	f000 fe45 	bl	8004542 <finite>
 80038b8:	b180      	cbz	r0, 80038dc <pow+0xac>
 80038ba:	4632      	mov	r2, r6
 80038bc:	463b      	mov	r3, r7
 80038be:	4630      	mov	r0, r6
 80038c0:	4639      	mov	r1, r7
 80038c2:	f7fd f8f7 	bl	8000ab4 <__aeabi_dcmpun>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0e2      	beq.n	8003890 <pow+0x60>
 80038ca:	f7ff ff7f 	bl	80037cc <__errno>
 80038ce:	2321      	movs	r3, #33	; 0x21
 80038d0:	6003      	str	r3, [r0, #0]
 80038d2:	ecbd 8b02 	vpop	{d8}
 80038d6:	ec47 6b10 	vmov	d0, r6, r7
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038dc:	2200      	movs	r2, #0
 80038de:	2300      	movs	r3, #0
 80038e0:	4630      	mov	r0, r6
 80038e2:	4639      	mov	r1, r7
 80038e4:	f7fd f8b4 	bl	8000a50 <__aeabi_dcmpeq>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d0f2      	beq.n	80038d2 <pow+0xa2>
 80038ec:	eeb0 0a48 	vmov.f32	s0, s16
 80038f0:	eef0 0a68 	vmov.f32	s1, s17
 80038f4:	f000 fe25 	bl	8004542 <finite>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d0ea      	beq.n	80038d2 <pow+0xa2>
 80038fc:	ec45 4b10 	vmov	d0, r4, r5
 8003900:	f000 fe1f 	bl	8004542 <finite>
 8003904:	e7c3      	b.n	800388e <pow+0x5e>
 8003906:	4f01      	ldr	r7, [pc, #4]	; (800390c <pow+0xdc>)
 8003908:	2600      	movs	r6, #0
 800390a:	e7e2      	b.n	80038d2 <pow+0xa2>
 800390c:	3ff00000 	.word	0x3ff00000

08003910 <__ieee754_pow>:
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	ed2d 8b06 	vpush	{d8-d10}
 8003918:	b089      	sub	sp, #36	; 0x24
 800391a:	ed8d 1b00 	vstr	d1, [sp]
 800391e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003922:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003926:	ea58 0102 	orrs.w	r1, r8, r2
 800392a:	ec57 6b10 	vmov	r6, r7, d0
 800392e:	d115      	bne.n	800395c <__ieee754_pow+0x4c>
 8003930:	19b3      	adds	r3, r6, r6
 8003932:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003936:	4152      	adcs	r2, r2
 8003938:	4299      	cmp	r1, r3
 800393a:	4b89      	ldr	r3, [pc, #548]	; (8003b60 <__ieee754_pow+0x250>)
 800393c:	4193      	sbcs	r3, r2
 800393e:	f080 84d2 	bcs.w	80042e6 <__ieee754_pow+0x9d6>
 8003942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003946:	4630      	mov	r0, r6
 8003948:	4639      	mov	r1, r7
 800394a:	f7fc fc63 	bl	8000214 <__adddf3>
 800394e:	ec41 0b10 	vmov	d0, r0, r1
 8003952:	b009      	add	sp, #36	; 0x24
 8003954:	ecbd 8b06 	vpop	{d8-d10}
 8003958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <__ieee754_pow+0x254>)
 800395e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003962:	429c      	cmp	r4, r3
 8003964:	ee10 aa10 	vmov	sl, s0
 8003968:	463d      	mov	r5, r7
 800396a:	dc06      	bgt.n	800397a <__ieee754_pow+0x6a>
 800396c:	d101      	bne.n	8003972 <__ieee754_pow+0x62>
 800396e:	2e00      	cmp	r6, #0
 8003970:	d1e7      	bne.n	8003942 <__ieee754_pow+0x32>
 8003972:	4598      	cmp	r8, r3
 8003974:	dc01      	bgt.n	800397a <__ieee754_pow+0x6a>
 8003976:	d10f      	bne.n	8003998 <__ieee754_pow+0x88>
 8003978:	b172      	cbz	r2, 8003998 <__ieee754_pow+0x88>
 800397a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800397e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003982:	ea55 050a 	orrs.w	r5, r5, sl
 8003986:	d1dc      	bne.n	8003942 <__ieee754_pow+0x32>
 8003988:	e9dd 3200 	ldrd	r3, r2, [sp]
 800398c:	18db      	adds	r3, r3, r3
 800398e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003992:	4152      	adcs	r2, r2
 8003994:	429d      	cmp	r5, r3
 8003996:	e7d0      	b.n	800393a <__ieee754_pow+0x2a>
 8003998:	2d00      	cmp	r5, #0
 800399a:	da3b      	bge.n	8003a14 <__ieee754_pow+0x104>
 800399c:	4b72      	ldr	r3, [pc, #456]	; (8003b68 <__ieee754_pow+0x258>)
 800399e:	4598      	cmp	r8, r3
 80039a0:	dc51      	bgt.n	8003a46 <__ieee754_pow+0x136>
 80039a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80039a6:	4598      	cmp	r8, r3
 80039a8:	f340 84ac 	ble.w	8004304 <__ieee754_pow+0x9f4>
 80039ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 80039b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80039b4:	2b14      	cmp	r3, #20
 80039b6:	dd0f      	ble.n	80039d8 <__ieee754_pow+0xc8>
 80039b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80039bc:	fa22 f103 	lsr.w	r1, r2, r3
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	4293      	cmp	r3, r2
 80039c6:	f040 849d 	bne.w	8004304 <__ieee754_pow+0x9f4>
 80039ca:	f001 0101 	and.w	r1, r1, #1
 80039ce:	f1c1 0302 	rsb	r3, r1, #2
 80039d2:	9304      	str	r3, [sp, #16]
 80039d4:	b182      	cbz	r2, 80039f8 <__ieee754_pow+0xe8>
 80039d6:	e05f      	b.n	8003a98 <__ieee754_pow+0x188>
 80039d8:	2a00      	cmp	r2, #0
 80039da:	d15b      	bne.n	8003a94 <__ieee754_pow+0x184>
 80039dc:	f1c3 0314 	rsb	r3, r3, #20
 80039e0:	fa48 f103 	asr.w	r1, r8, r3
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	4543      	cmp	r3, r8
 80039ea:	f040 8488 	bne.w	80042fe <__ieee754_pow+0x9ee>
 80039ee:	f001 0101 	and.w	r1, r1, #1
 80039f2:	f1c1 0302 	rsb	r3, r1, #2
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	4b5c      	ldr	r3, [pc, #368]	; (8003b6c <__ieee754_pow+0x25c>)
 80039fa:	4598      	cmp	r8, r3
 80039fc:	d132      	bne.n	8003a64 <__ieee754_pow+0x154>
 80039fe:	f1b9 0f00 	cmp.w	r9, #0
 8003a02:	f280 8478 	bge.w	80042f6 <__ieee754_pow+0x9e6>
 8003a06:	4959      	ldr	r1, [pc, #356]	; (8003b6c <__ieee754_pow+0x25c>)
 8003a08:	4632      	mov	r2, r6
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f7fc fee1 	bl	80007d4 <__aeabi_ddiv>
 8003a12:	e79c      	b.n	800394e <__ieee754_pow+0x3e>
 8003a14:	2300      	movs	r3, #0
 8003a16:	9304      	str	r3, [sp, #16]
 8003a18:	2a00      	cmp	r2, #0
 8003a1a:	d13d      	bne.n	8003a98 <__ieee754_pow+0x188>
 8003a1c:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <__ieee754_pow+0x254>)
 8003a1e:	4598      	cmp	r8, r3
 8003a20:	d1ea      	bne.n	80039f8 <__ieee754_pow+0xe8>
 8003a22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003a26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003a2a:	ea53 030a 	orrs.w	r3, r3, sl
 8003a2e:	f000 845a 	beq.w	80042e6 <__ieee754_pow+0x9d6>
 8003a32:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <__ieee754_pow+0x260>)
 8003a34:	429c      	cmp	r4, r3
 8003a36:	dd08      	ble.n	8003a4a <__ieee754_pow+0x13a>
 8003a38:	f1b9 0f00 	cmp.w	r9, #0
 8003a3c:	f2c0 8457 	blt.w	80042ee <__ieee754_pow+0x9de>
 8003a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a44:	e783      	b.n	800394e <__ieee754_pow+0x3e>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e7e5      	b.n	8003a16 <__ieee754_pow+0x106>
 8003a4a:	f1b9 0f00 	cmp.w	r9, #0
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	f6bf af7a 	bge.w	800394e <__ieee754_pow+0x3e>
 8003a5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003a5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003a62:	e774      	b.n	800394e <__ieee754_pow+0x3e>
 8003a64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003a68:	d106      	bne.n	8003a78 <__ieee754_pow+0x168>
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	4639      	mov	r1, r7
 8003a72:	f7fc fd85 	bl	8000580 <__aeabi_dmul>
 8003a76:	e76a      	b.n	800394e <__ieee754_pow+0x3e>
 8003a78:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <__ieee754_pow+0x264>)
 8003a7a:	4599      	cmp	r9, r3
 8003a7c:	d10c      	bne.n	8003a98 <__ieee754_pow+0x188>
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	db0a      	blt.n	8003a98 <__ieee754_pow+0x188>
 8003a82:	ec47 6b10 	vmov	d0, r6, r7
 8003a86:	b009      	add	sp, #36	; 0x24
 8003a88:	ecbd 8b06 	vpop	{d8-d10}
 8003a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	f000 bc6c 	b.w	800436c <__ieee754_sqrt>
 8003a94:	2300      	movs	r3, #0
 8003a96:	9304      	str	r3, [sp, #16]
 8003a98:	ec47 6b10 	vmov	d0, r6, r7
 8003a9c:	f000 fd48 	bl	8004530 <fabs>
 8003aa0:	ec51 0b10 	vmov	r0, r1, d0
 8003aa4:	f1ba 0f00 	cmp.w	sl, #0
 8003aa8:	d129      	bne.n	8003afe <__ieee754_pow+0x1ee>
 8003aaa:	b124      	cbz	r4, 8003ab6 <__ieee754_pow+0x1a6>
 8003aac:	4b2f      	ldr	r3, [pc, #188]	; (8003b6c <__ieee754_pow+0x25c>)
 8003aae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d123      	bne.n	8003afe <__ieee754_pow+0x1ee>
 8003ab6:	f1b9 0f00 	cmp.w	r9, #0
 8003aba:	da05      	bge.n	8003ac8 <__ieee754_pow+0x1b8>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	492a      	ldr	r1, [pc, #168]	; (8003b6c <__ieee754_pow+0x25c>)
 8003ac4:	f7fc fe86 	bl	80007d4 <__aeabi_ddiv>
 8003ac8:	2d00      	cmp	r5, #0
 8003aca:	f6bf af40 	bge.w	800394e <__ieee754_pow+0x3e>
 8003ace:	9b04      	ldr	r3, [sp, #16]
 8003ad0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ad4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ad8:	4323      	orrs	r3, r4
 8003ada:	d108      	bne.n	8003aee <__ieee754_pow+0x1de>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fc fb94 	bl	8000210 <__aeabi_dsub>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	e78f      	b.n	8003a0e <__ieee754_pow+0xfe>
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	f47f af2c 	bne.w	800394e <__ieee754_pow+0x3e>
 8003af6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003afa:	4619      	mov	r1, r3
 8003afc:	e727      	b.n	800394e <__ieee754_pow+0x3e>
 8003afe:	0feb      	lsrs	r3, r5, #31
 8003b00:	3b01      	subs	r3, #1
 8003b02:	9306      	str	r3, [sp, #24]
 8003b04:	9a06      	ldr	r2, [sp, #24]
 8003b06:	9b04      	ldr	r3, [sp, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d102      	bne.n	8003b12 <__ieee754_pow+0x202>
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	463b      	mov	r3, r7
 8003b10:	e7e6      	b.n	8003ae0 <__ieee754_pow+0x1d0>
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <__ieee754_pow+0x268>)
 8003b14:	4598      	cmp	r8, r3
 8003b16:	f340 80fb 	ble.w	8003d10 <__ieee754_pow+0x400>
 8003b1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003b1e:	4598      	cmp	r8, r3
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <__ieee754_pow+0x260>)
 8003b22:	dd0c      	ble.n	8003b3e <__ieee754_pow+0x22e>
 8003b24:	429c      	cmp	r4, r3
 8003b26:	dc0f      	bgt.n	8003b48 <__ieee754_pow+0x238>
 8003b28:	f1b9 0f00 	cmp.w	r9, #0
 8003b2c:	da0f      	bge.n	8003b4e <__ieee754_pow+0x23e>
 8003b2e:	2000      	movs	r0, #0
 8003b30:	b009      	add	sp, #36	; 0x24
 8003b32:	ecbd 8b06 	vpop	{d8-d10}
 8003b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3a:	f000 bcf0 	b.w	800451e <__math_oflow>
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	dbf2      	blt.n	8003b28 <__ieee754_pow+0x218>
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <__ieee754_pow+0x25c>)
 8003b44:	429c      	cmp	r4, r3
 8003b46:	dd19      	ble.n	8003b7c <__ieee754_pow+0x26c>
 8003b48:	f1b9 0f00 	cmp.w	r9, #0
 8003b4c:	dcef      	bgt.n	8003b2e <__ieee754_pow+0x21e>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	b009      	add	sp, #36	; 0x24
 8003b52:	ecbd 8b06 	vpop	{d8-d10}
 8003b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5a:	f000 bcd7 	b.w	800450c <__math_uflow>
 8003b5e:	bf00      	nop
 8003b60:	fff00000 	.word	0xfff00000
 8003b64:	7ff00000 	.word	0x7ff00000
 8003b68:	433fffff 	.word	0x433fffff
 8003b6c:	3ff00000 	.word	0x3ff00000
 8003b70:	3fefffff 	.word	0x3fefffff
 8003b74:	3fe00000 	.word	0x3fe00000
 8003b78:	41e00000 	.word	0x41e00000
 8003b7c:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <__ieee754_pow+0x3f0>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f7fc fb46 	bl	8000210 <__aeabi_dsub>
 8003b84:	a354      	add	r3, pc, #336	; (adr r3, 8003cd8 <__ieee754_pow+0x3c8>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	460d      	mov	r5, r1
 8003b8e:	f7fc fcf7 	bl	8000580 <__aeabi_dmul>
 8003b92:	a353      	add	r3, pc, #332	; (adr r3, 8003ce0 <__ieee754_pow+0x3d0>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	4606      	mov	r6, r0
 8003b9a:	460f      	mov	r7, r1
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	f7fc fcee 	bl	8000580 <__aeabi_dmul>
 8003ba4:	4b57      	ldr	r3, [pc, #348]	; (8003d04 <__ieee754_pow+0x3f4>)
 8003ba6:	4682      	mov	sl, r0
 8003ba8:	468b      	mov	fp, r1
 8003baa:	2200      	movs	r2, #0
 8003bac:	4620      	mov	r0, r4
 8003bae:	4629      	mov	r1, r5
 8003bb0:	f7fc fce6 	bl	8000580 <__aeabi_dmul>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	a14b      	add	r1, pc, #300	; (adr r1, 8003ce8 <__ieee754_pow+0x3d8>)
 8003bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bbe:	f7fc fb27 	bl	8000210 <__aeabi_dsub>
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	f7fc fcdb 	bl	8000580 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	2000      	movs	r0, #0
 8003bd0:	494d      	ldr	r1, [pc, #308]	; (8003d08 <__ieee754_pow+0x3f8>)
 8003bd2:	f7fc fb1d 	bl	8000210 <__aeabi_dsub>
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	4680      	mov	r8, r0
 8003bda:	4689      	mov	r9, r1
 8003bdc:	462b      	mov	r3, r5
 8003bde:	4620      	mov	r0, r4
 8003be0:	4629      	mov	r1, r5
 8003be2:	f7fc fccd 	bl	8000580 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4640      	mov	r0, r8
 8003bec:	4649      	mov	r1, r9
 8003bee:	f7fc fcc7 	bl	8000580 <__aeabi_dmul>
 8003bf2:	a33f      	add	r3, pc, #252	; (adr r3, 8003cf0 <__ieee754_pow+0x3e0>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f7fc fcc2 	bl	8000580 <__aeabi_dmul>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4650      	mov	r0, sl
 8003c02:	4659      	mov	r1, fp
 8003c04:	f7fc fb04 	bl	8000210 <__aeabi_dsub>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4680      	mov	r8, r0
 8003c0e:	4689      	mov	r9, r1
 8003c10:	4630      	mov	r0, r6
 8003c12:	4639      	mov	r1, r7
 8003c14:	f7fc fafe 	bl	8000214 <__adddf3>
 8003c18:	2000      	movs	r0, #0
 8003c1a:	4632      	mov	r2, r6
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460d      	mov	r5, r1
 8003c22:	f7fc faf5 	bl	8000210 <__aeabi_dsub>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	f7fc faef 	bl	8000210 <__aeabi_dsub>
 8003c32:	9b04      	ldr	r3, [sp, #16]
 8003c34:	9a06      	ldr	r2, [sp, #24]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	4682      	mov	sl, r0
 8003c3c:	468b      	mov	fp, r1
 8003c3e:	f040 81e7 	bne.w	8004010 <__ieee754_pow+0x700>
 8003c42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8003cf8 <__ieee754_pow+0x3e8>
 8003c46:	eeb0 8a47 	vmov.f32	s16, s14
 8003c4a:	eef0 8a67 	vmov.f32	s17, s15
 8003c4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003c52:	2600      	movs	r6, #0
 8003c54:	4632      	mov	r2, r6
 8003c56:	463b      	mov	r3, r7
 8003c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c5c:	f7fc fad8 	bl	8000210 <__aeabi_dsub>
 8003c60:	4622      	mov	r2, r4
 8003c62:	462b      	mov	r3, r5
 8003c64:	f7fc fc8c 	bl	8000580 <__aeabi_dmul>
 8003c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c6c:	4680      	mov	r8, r0
 8003c6e:	4689      	mov	r9, r1
 8003c70:	4650      	mov	r0, sl
 8003c72:	4659      	mov	r1, fp
 8003c74:	f7fc fc84 	bl	8000580 <__aeabi_dmul>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	4649      	mov	r1, r9
 8003c80:	f7fc fac8 	bl	8000214 <__adddf3>
 8003c84:	4632      	mov	r2, r6
 8003c86:	463b      	mov	r3, r7
 8003c88:	4680      	mov	r8, r0
 8003c8a:	4689      	mov	r9, r1
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fc fc76 	bl	8000580 <__aeabi_dmul>
 8003c94:	460b      	mov	r3, r1
 8003c96:	4604      	mov	r4, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f7fc fab8 	bl	8000214 <__adddf3>
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <__ieee754_pow+0x3fc>)
 8003ca6:	4299      	cmp	r1, r3
 8003ca8:	ec45 4b19 	vmov	d9, r4, r5
 8003cac:	4606      	mov	r6, r0
 8003cae:	460f      	mov	r7, r1
 8003cb0:	468b      	mov	fp, r1
 8003cb2:	f340 82f1 	ble.w	8004298 <__ieee754_pow+0x988>
 8003cb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003cba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003cbe:	4303      	orrs	r3, r0
 8003cc0:	f000 81e4 	beq.w	800408c <__ieee754_pow+0x77c>
 8003cc4:	ec51 0b18 	vmov	r0, r1, d8
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f7fc feca 	bl	8000a64 <__aeabi_dcmplt>
 8003cd0:	3800      	subs	r0, #0
 8003cd2:	bf18      	it	ne
 8003cd4:	2001      	movne	r0, #1
 8003cd6:	e72b      	b.n	8003b30 <__ieee754_pow+0x220>
 8003cd8:	60000000 	.word	0x60000000
 8003cdc:	3ff71547 	.word	0x3ff71547
 8003ce0:	f85ddf44 	.word	0xf85ddf44
 8003ce4:	3e54ae0b 	.word	0x3e54ae0b
 8003ce8:	55555555 	.word	0x55555555
 8003cec:	3fd55555 	.word	0x3fd55555
 8003cf0:	652b82fe 	.word	0x652b82fe
 8003cf4:	3ff71547 	.word	0x3ff71547
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	bff00000 	.word	0xbff00000
 8003d00:	3ff00000 	.word	0x3ff00000
 8003d04:	3fd00000 	.word	0x3fd00000
 8003d08:	3fe00000 	.word	0x3fe00000
 8003d0c:	408fffff 	.word	0x408fffff
 8003d10:	4bd5      	ldr	r3, [pc, #852]	; (8004068 <__ieee754_pow+0x758>)
 8003d12:	402b      	ands	r3, r5
 8003d14:	2200      	movs	r2, #0
 8003d16:	b92b      	cbnz	r3, 8003d24 <__ieee754_pow+0x414>
 8003d18:	4bd4      	ldr	r3, [pc, #848]	; (800406c <__ieee754_pow+0x75c>)
 8003d1a:	f7fc fc31 	bl	8000580 <__aeabi_dmul>
 8003d1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003d22:	460c      	mov	r4, r1
 8003d24:	1523      	asrs	r3, r4, #20
 8003d26:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003d2a:	4413      	add	r3, r2
 8003d2c:	9305      	str	r3, [sp, #20]
 8003d2e:	4bd0      	ldr	r3, [pc, #832]	; (8004070 <__ieee754_pow+0x760>)
 8003d30:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003d34:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003d3e:	dd08      	ble.n	8003d52 <__ieee754_pow+0x442>
 8003d40:	4bcc      	ldr	r3, [pc, #816]	; (8004074 <__ieee754_pow+0x764>)
 8003d42:	429c      	cmp	r4, r3
 8003d44:	f340 8162 	ble.w	800400c <__ieee754_pow+0x6fc>
 8003d48:	9b05      	ldr	r3, [sp, #20]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	9305      	str	r3, [sp, #20]
 8003d4e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003d52:	2400      	movs	r4, #0
 8003d54:	00e3      	lsls	r3, r4, #3
 8003d56:	9307      	str	r3, [sp, #28]
 8003d58:	4bc7      	ldr	r3, [pc, #796]	; (8004078 <__ieee754_pow+0x768>)
 8003d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d5e:	ed93 7b00 	vldr	d7, [r3]
 8003d62:	4629      	mov	r1, r5
 8003d64:	ec53 2b17 	vmov	r2, r3, d7
 8003d68:	eeb0 9a47 	vmov.f32	s18, s14
 8003d6c:	eef0 9a67 	vmov.f32	s19, s15
 8003d70:	4682      	mov	sl, r0
 8003d72:	f7fc fa4d 	bl	8000210 <__aeabi_dsub>
 8003d76:	4652      	mov	r2, sl
 8003d78:	4606      	mov	r6, r0
 8003d7a:	460f      	mov	r7, r1
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	ec51 0b19 	vmov	r0, r1, d9
 8003d82:	f7fc fa47 	bl	8000214 <__adddf3>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	49bb      	ldr	r1, [pc, #748]	; (800407c <__ieee754_pow+0x76c>)
 8003d8e:	f7fc fd21 	bl	80007d4 <__aeabi_ddiv>
 8003d92:	ec41 0b1a 	vmov	d10, r0, r1
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	f7fc fbef 	bl	8000580 <__aeabi_dmul>
 8003da2:	2300      	movs	r3, #0
 8003da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003da8:	9302      	str	r3, [sp, #8]
 8003daa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003dae:	46ab      	mov	fp, r5
 8003db0:	106d      	asrs	r5, r5, #1
 8003db2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003db6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003dba:	ec41 0b18 	vmov	d8, r0, r1
 8003dbe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	4614      	mov	r4, r2
 8003dca:	461d      	mov	r5, r3
 8003dcc:	f7fc fbd8 	bl	8000580 <__aeabi_dmul>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	f7fc fa1a 	bl	8000210 <__aeabi_dsub>
 8003ddc:	ec53 2b19 	vmov	r2, r3, d9
 8003de0:	4606      	mov	r6, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	4620      	mov	r0, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	f7fc fa12 	bl	8000210 <__aeabi_dsub>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4650      	mov	r0, sl
 8003df2:	4659      	mov	r1, fp
 8003df4:	f7fc fa0c 	bl	8000210 <__aeabi_dsub>
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	f7fc fbc0 	bl	8000580 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4630      	mov	r0, r6
 8003e06:	4639      	mov	r1, r7
 8003e08:	f7fc fa02 	bl	8000210 <__aeabi_dsub>
 8003e0c:	ec53 2b1a 	vmov	r2, r3, d10
 8003e10:	f7fc fbb6 	bl	8000580 <__aeabi_dmul>
 8003e14:	ec53 2b18 	vmov	r2, r3, d8
 8003e18:	ec41 0b19 	vmov	d9, r0, r1
 8003e1c:	ec51 0b18 	vmov	r0, r1, d8
 8003e20:	f7fc fbae 	bl	8000580 <__aeabi_dmul>
 8003e24:	a37c      	add	r3, pc, #496	; (adr r3, 8004018 <__ieee754_pow+0x708>)
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	460d      	mov	r5, r1
 8003e2e:	f7fc fba7 	bl	8000580 <__aeabi_dmul>
 8003e32:	a37b      	add	r3, pc, #492	; (adr r3, 8004020 <__ieee754_pow+0x710>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f7fc f9ec 	bl	8000214 <__adddf3>
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	462b      	mov	r3, r5
 8003e40:	f7fc fb9e 	bl	8000580 <__aeabi_dmul>
 8003e44:	a378      	add	r3, pc, #480	; (adr r3, 8004028 <__ieee754_pow+0x718>)
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f7fc f9e3 	bl	8000214 <__adddf3>
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	f7fc fb95 	bl	8000580 <__aeabi_dmul>
 8003e56:	a376      	add	r3, pc, #472	; (adr r3, 8004030 <__ieee754_pow+0x720>)
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f7fc f9da 	bl	8000214 <__adddf3>
 8003e60:	4622      	mov	r2, r4
 8003e62:	462b      	mov	r3, r5
 8003e64:	f7fc fb8c 	bl	8000580 <__aeabi_dmul>
 8003e68:	a373      	add	r3, pc, #460	; (adr r3, 8004038 <__ieee754_pow+0x728>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc f9d1 	bl	8000214 <__adddf3>
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	f7fc fb83 	bl	8000580 <__aeabi_dmul>
 8003e7a:	a371      	add	r3, pc, #452	; (adr r3, 8004040 <__ieee754_pow+0x730>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc f9c8 	bl	8000214 <__adddf3>
 8003e84:	4622      	mov	r2, r4
 8003e86:	4606      	mov	r6, r0
 8003e88:	460f      	mov	r7, r1
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7fc fb76 	bl	8000580 <__aeabi_dmul>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4630      	mov	r0, r6
 8003e9a:	4639      	mov	r1, r7
 8003e9c:	f7fc fb70 	bl	8000580 <__aeabi_dmul>
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	460d      	mov	r5, r1
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	ec51 0b18 	vmov	r0, r1, d8
 8003eac:	f7fc f9b2 	bl	8000214 <__adddf3>
 8003eb0:	ec53 2b19 	vmov	r2, r3, d9
 8003eb4:	f7fc fb64 	bl	8000580 <__aeabi_dmul>
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	f7fc f9aa 	bl	8000214 <__adddf3>
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	4682      	mov	sl, r0
 8003ec4:	468b      	mov	fp, r1
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	4640      	mov	r0, r8
 8003eca:	4649      	mov	r1, r9
 8003ecc:	f7fc fb58 	bl	8000580 <__aeabi_dmul>
 8003ed0:	4b6b      	ldr	r3, [pc, #428]	; (8004080 <__ieee754_pow+0x770>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	460f      	mov	r7, r1
 8003ed8:	f7fc f99c 	bl	8000214 <__adddf3>
 8003edc:	4652      	mov	r2, sl
 8003ede:	465b      	mov	r3, fp
 8003ee0:	f7fc f998 	bl	8000214 <__adddf3>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	460d      	mov	r5, r1
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4640      	mov	r0, r8
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	f7fc fb45 	bl	8000580 <__aeabi_dmul>
 8003ef6:	4b62      	ldr	r3, [pc, #392]	; (8004080 <__ieee754_pow+0x770>)
 8003ef8:	4680      	mov	r8, r0
 8003efa:	4689      	mov	r9, r1
 8003efc:	2200      	movs	r2, #0
 8003efe:	4620      	mov	r0, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	f7fc f985 	bl	8000210 <__aeabi_dsub>
 8003f06:	4632      	mov	r2, r6
 8003f08:	463b      	mov	r3, r7
 8003f0a:	f7fc f981 	bl	8000210 <__aeabi_dsub>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4650      	mov	r0, sl
 8003f14:	4659      	mov	r1, fp
 8003f16:	f7fc f97b 	bl	8000210 <__aeabi_dsub>
 8003f1a:	ec53 2b18 	vmov	r2, r3, d8
 8003f1e:	f7fc fb2f 	bl	8000580 <__aeabi_dmul>
 8003f22:	4622      	mov	r2, r4
 8003f24:	4606      	mov	r6, r0
 8003f26:	460f      	mov	r7, r1
 8003f28:	462b      	mov	r3, r5
 8003f2a:	ec51 0b19 	vmov	r0, r1, d9
 8003f2e:	f7fc fb27 	bl	8000580 <__aeabi_dmul>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4630      	mov	r0, r6
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f7fc f96b 	bl	8000214 <__adddf3>
 8003f3e:	4606      	mov	r6, r0
 8003f40:	460f      	mov	r7, r1
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4640      	mov	r0, r8
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f7fc f963 	bl	8000214 <__adddf3>
 8003f4e:	a33e      	add	r3, pc, #248	; (adr r3, 8004048 <__ieee754_pow+0x738>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	2000      	movs	r0, #0
 8003f56:	4604      	mov	r4, r0
 8003f58:	460d      	mov	r5, r1
 8003f5a:	f7fc fb11 	bl	8000580 <__aeabi_dmul>
 8003f5e:	4642      	mov	r2, r8
 8003f60:	ec41 0b18 	vmov	d8, r0, r1
 8003f64:	464b      	mov	r3, r9
 8003f66:	4620      	mov	r0, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7fc f951 	bl	8000210 <__aeabi_dsub>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4630      	mov	r0, r6
 8003f74:	4639      	mov	r1, r7
 8003f76:	f7fc f94b 	bl	8000210 <__aeabi_dsub>
 8003f7a:	a335      	add	r3, pc, #212	; (adr r3, 8004050 <__ieee754_pow+0x740>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f7fc fafe 	bl	8000580 <__aeabi_dmul>
 8003f84:	a334      	add	r3, pc, #208	; (adr r3, 8004058 <__ieee754_pow+0x748>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	4606      	mov	r6, r0
 8003f8c:	460f      	mov	r7, r1
 8003f8e:	4620      	mov	r0, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	f7fc faf5 	bl	8000580 <__aeabi_dmul>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	f7fc f939 	bl	8000214 <__adddf3>
 8003fa2:	9a07      	ldr	r2, [sp, #28]
 8003fa4:	4b37      	ldr	r3, [pc, #220]	; (8004084 <__ieee754_pow+0x774>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f7fc f932 	bl	8000214 <__adddf3>
 8003fb0:	4682      	mov	sl, r0
 8003fb2:	9805      	ldr	r0, [sp, #20]
 8003fb4:	468b      	mov	fp, r1
 8003fb6:	f7fc fa79 	bl	80004ac <__aeabi_i2d>
 8003fba:	9a07      	ldr	r2, [sp, #28]
 8003fbc:	4b32      	ldr	r3, [pc, #200]	; (8004088 <__ieee754_pow+0x778>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	460f      	mov	r7, r1
 8003fc8:	4652      	mov	r2, sl
 8003fca:	465b      	mov	r3, fp
 8003fcc:	ec51 0b18 	vmov	r0, r1, d8
 8003fd0:	f7fc f920 	bl	8000214 <__adddf3>
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	f7fc f91c 	bl	8000214 <__adddf3>
 8003fdc:	4632      	mov	r2, r6
 8003fde:	463b      	mov	r3, r7
 8003fe0:	f7fc f918 	bl	8000214 <__adddf3>
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	463b      	mov	r3, r7
 8003fea:	4604      	mov	r4, r0
 8003fec:	460d      	mov	r5, r1
 8003fee:	f7fc f90f 	bl	8000210 <__aeabi_dsub>
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	f7fc f90b 	bl	8000210 <__aeabi_dsub>
 8003ffa:	ec53 2b18 	vmov	r2, r3, d8
 8003ffe:	f7fc f907 	bl	8000210 <__aeabi_dsub>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4650      	mov	r0, sl
 8004008:	4659      	mov	r1, fp
 800400a:	e610      	b.n	8003c2e <__ieee754_pow+0x31e>
 800400c:	2401      	movs	r4, #1
 800400e:	e6a1      	b.n	8003d54 <__ieee754_pow+0x444>
 8004010:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004060 <__ieee754_pow+0x750>
 8004014:	e617      	b.n	8003c46 <__ieee754_pow+0x336>
 8004016:	bf00      	nop
 8004018:	4a454eef 	.word	0x4a454eef
 800401c:	3fca7e28 	.word	0x3fca7e28
 8004020:	93c9db65 	.word	0x93c9db65
 8004024:	3fcd864a 	.word	0x3fcd864a
 8004028:	a91d4101 	.word	0xa91d4101
 800402c:	3fd17460 	.word	0x3fd17460
 8004030:	518f264d 	.word	0x518f264d
 8004034:	3fd55555 	.word	0x3fd55555
 8004038:	db6fabff 	.word	0xdb6fabff
 800403c:	3fdb6db6 	.word	0x3fdb6db6
 8004040:	33333303 	.word	0x33333303
 8004044:	3fe33333 	.word	0x3fe33333
 8004048:	e0000000 	.word	0xe0000000
 800404c:	3feec709 	.word	0x3feec709
 8004050:	dc3a03fd 	.word	0xdc3a03fd
 8004054:	3feec709 	.word	0x3feec709
 8004058:	145b01f5 	.word	0x145b01f5
 800405c:	be3e2fe0 	.word	0xbe3e2fe0
 8004060:	00000000 	.word	0x00000000
 8004064:	3ff00000 	.word	0x3ff00000
 8004068:	7ff00000 	.word	0x7ff00000
 800406c:	43400000 	.word	0x43400000
 8004070:	0003988e 	.word	0x0003988e
 8004074:	000bb679 	.word	0x000bb679
 8004078:	08004698 	.word	0x08004698
 800407c:	3ff00000 	.word	0x3ff00000
 8004080:	40080000 	.word	0x40080000
 8004084:	080046b8 	.word	0x080046b8
 8004088:	080046a8 	.word	0x080046a8
 800408c:	a3b5      	add	r3, pc, #724	; (adr r3, 8004364 <__ieee754_pow+0xa54>)
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	4640      	mov	r0, r8
 8004094:	4649      	mov	r1, r9
 8004096:	f7fc f8bd 	bl	8000214 <__adddf3>
 800409a:	4622      	mov	r2, r4
 800409c:	ec41 0b1a 	vmov	d10, r0, r1
 80040a0:	462b      	mov	r3, r5
 80040a2:	4630      	mov	r0, r6
 80040a4:	4639      	mov	r1, r7
 80040a6:	f7fc f8b3 	bl	8000210 <__aeabi_dsub>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	ec51 0b1a 	vmov	r0, r1, d10
 80040b2:	f7fc fcf5 	bl	8000aa0 <__aeabi_dcmpgt>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f47f ae04 	bne.w	8003cc4 <__ieee754_pow+0x3b4>
 80040bc:	4aa4      	ldr	r2, [pc, #656]	; (8004350 <__ieee754_pow+0xa40>)
 80040be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80040c2:	4293      	cmp	r3, r2
 80040c4:	f340 8108 	ble.w	80042d8 <__ieee754_pow+0x9c8>
 80040c8:	151b      	asrs	r3, r3, #20
 80040ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80040ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80040d2:	fa4a f303 	asr.w	r3, sl, r3
 80040d6:	445b      	add	r3, fp
 80040d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80040dc:	4e9d      	ldr	r6, [pc, #628]	; (8004354 <__ieee754_pow+0xa44>)
 80040de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80040e2:	4116      	asrs	r6, r2
 80040e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80040e8:	2000      	movs	r0, #0
 80040ea:	ea23 0106 	bic.w	r1, r3, r6
 80040ee:	f1c2 0214 	rsb	r2, r2, #20
 80040f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80040f6:	fa4a fa02 	asr.w	sl, sl, r2
 80040fa:	f1bb 0f00 	cmp.w	fp, #0
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4620      	mov	r0, r4
 8004104:	4629      	mov	r1, r5
 8004106:	bfb8      	it	lt
 8004108:	f1ca 0a00 	rsblt	sl, sl, #0
 800410c:	f7fc f880 	bl	8000210 <__aeabi_dsub>
 8004110:	ec41 0b19 	vmov	d9, r0, r1
 8004114:	4642      	mov	r2, r8
 8004116:	464b      	mov	r3, r9
 8004118:	ec51 0b19 	vmov	r0, r1, d9
 800411c:	f7fc f87a 	bl	8000214 <__adddf3>
 8004120:	a37b      	add	r3, pc, #492	; (adr r3, 8004310 <__ieee754_pow+0xa00>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	2000      	movs	r0, #0
 8004128:	4604      	mov	r4, r0
 800412a:	460d      	mov	r5, r1
 800412c:	f7fc fa28 	bl	8000580 <__aeabi_dmul>
 8004130:	ec53 2b19 	vmov	r2, r3, d9
 8004134:	4606      	mov	r6, r0
 8004136:	460f      	mov	r7, r1
 8004138:	4620      	mov	r0, r4
 800413a:	4629      	mov	r1, r5
 800413c:	f7fc f868 	bl	8000210 <__aeabi_dsub>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4640      	mov	r0, r8
 8004146:	4649      	mov	r1, r9
 8004148:	f7fc f862 	bl	8000210 <__aeabi_dsub>
 800414c:	a372      	add	r3, pc, #456	; (adr r3, 8004318 <__ieee754_pow+0xa08>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc fa15 	bl	8000580 <__aeabi_dmul>
 8004156:	a372      	add	r3, pc, #456	; (adr r3, 8004320 <__ieee754_pow+0xa10>)
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	4680      	mov	r8, r0
 800415e:	4689      	mov	r9, r1
 8004160:	4620      	mov	r0, r4
 8004162:	4629      	mov	r1, r5
 8004164:	f7fc fa0c 	bl	8000580 <__aeabi_dmul>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4640      	mov	r0, r8
 800416e:	4649      	mov	r1, r9
 8004170:	f7fc f850 	bl	8000214 <__adddf3>
 8004174:	4604      	mov	r4, r0
 8004176:	460d      	mov	r5, r1
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4630      	mov	r0, r6
 800417e:	4639      	mov	r1, r7
 8004180:	f7fc f848 	bl	8000214 <__adddf3>
 8004184:	4632      	mov	r2, r6
 8004186:	463b      	mov	r3, r7
 8004188:	4680      	mov	r8, r0
 800418a:	4689      	mov	r9, r1
 800418c:	f7fc f840 	bl	8000210 <__aeabi_dsub>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4620      	mov	r0, r4
 8004196:	4629      	mov	r1, r5
 8004198:	f7fc f83a 	bl	8000210 <__aeabi_dsub>
 800419c:	4642      	mov	r2, r8
 800419e:	4606      	mov	r6, r0
 80041a0:	460f      	mov	r7, r1
 80041a2:	464b      	mov	r3, r9
 80041a4:	4640      	mov	r0, r8
 80041a6:	4649      	mov	r1, r9
 80041a8:	f7fc f9ea 	bl	8000580 <__aeabi_dmul>
 80041ac:	a35e      	add	r3, pc, #376	; (adr r3, 8004328 <__ieee754_pow+0xa18>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	4604      	mov	r4, r0
 80041b4:	460d      	mov	r5, r1
 80041b6:	f7fc f9e3 	bl	8000580 <__aeabi_dmul>
 80041ba:	a35d      	add	r3, pc, #372	; (adr r3, 8004330 <__ieee754_pow+0xa20>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc f826 	bl	8000210 <__aeabi_dsub>
 80041c4:	4622      	mov	r2, r4
 80041c6:	462b      	mov	r3, r5
 80041c8:	f7fc f9da 	bl	8000580 <__aeabi_dmul>
 80041cc:	a35a      	add	r3, pc, #360	; (adr r3, 8004338 <__ieee754_pow+0xa28>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc f81f 	bl	8000214 <__adddf3>
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	f7fc f9d1 	bl	8000580 <__aeabi_dmul>
 80041de:	a358      	add	r3, pc, #352	; (adr r3, 8004340 <__ieee754_pow+0xa30>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc f814 	bl	8000210 <__aeabi_dsub>
 80041e8:	4622      	mov	r2, r4
 80041ea:	462b      	mov	r3, r5
 80041ec:	f7fc f9c8 	bl	8000580 <__aeabi_dmul>
 80041f0:	a355      	add	r3, pc, #340	; (adr r3, 8004348 <__ieee754_pow+0xa38>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fc f80d 	bl	8000214 <__adddf3>
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	f7fc f9bf 	bl	8000580 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4640      	mov	r0, r8
 8004208:	4649      	mov	r1, r9
 800420a:	f7fc f801 	bl	8000210 <__aeabi_dsub>
 800420e:	4604      	mov	r4, r0
 8004210:	460d      	mov	r5, r1
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4640      	mov	r0, r8
 8004218:	4649      	mov	r1, r9
 800421a:	f7fc f9b1 	bl	8000580 <__aeabi_dmul>
 800421e:	2200      	movs	r2, #0
 8004220:	ec41 0b19 	vmov	d9, r0, r1
 8004224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004228:	4620      	mov	r0, r4
 800422a:	4629      	mov	r1, r5
 800422c:	f7fb fff0 	bl	8000210 <__aeabi_dsub>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	ec51 0b19 	vmov	r0, r1, d9
 8004238:	f7fc facc 	bl	80007d4 <__aeabi_ddiv>
 800423c:	4632      	mov	r2, r6
 800423e:	4604      	mov	r4, r0
 8004240:	460d      	mov	r5, r1
 8004242:	463b      	mov	r3, r7
 8004244:	4640      	mov	r0, r8
 8004246:	4649      	mov	r1, r9
 8004248:	f7fc f99a 	bl	8000580 <__aeabi_dmul>
 800424c:	4632      	mov	r2, r6
 800424e:	463b      	mov	r3, r7
 8004250:	f7fb ffe0 	bl	8000214 <__adddf3>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4620      	mov	r0, r4
 800425a:	4629      	mov	r1, r5
 800425c:	f7fb ffd8 	bl	8000210 <__aeabi_dsub>
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	f7fb ffd4 	bl	8000210 <__aeabi_dsub>
 8004268:	460b      	mov	r3, r1
 800426a:	4602      	mov	r2, r0
 800426c:	493a      	ldr	r1, [pc, #232]	; (8004358 <__ieee754_pow+0xa48>)
 800426e:	2000      	movs	r0, #0
 8004270:	f7fb ffce 	bl	8000210 <__aeabi_dsub>
 8004274:	ec41 0b10 	vmov	d0, r0, r1
 8004278:	ee10 3a90 	vmov	r3, s1
 800427c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004284:	da2b      	bge.n	80042de <__ieee754_pow+0x9ce>
 8004286:	4650      	mov	r0, sl
 8004288:	f000 f966 	bl	8004558 <scalbn>
 800428c:	ec51 0b10 	vmov	r0, r1, d0
 8004290:	ec53 2b18 	vmov	r2, r3, d8
 8004294:	f7ff bbed 	b.w	8003a72 <__ieee754_pow+0x162>
 8004298:	4b30      	ldr	r3, [pc, #192]	; (800435c <__ieee754_pow+0xa4c>)
 800429a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800429e:	429e      	cmp	r6, r3
 80042a0:	f77f af0c 	ble.w	80040bc <__ieee754_pow+0x7ac>
 80042a4:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <__ieee754_pow+0xa50>)
 80042a6:	440b      	add	r3, r1
 80042a8:	4303      	orrs	r3, r0
 80042aa:	d009      	beq.n	80042c0 <__ieee754_pow+0x9b0>
 80042ac:	ec51 0b18 	vmov	r0, r1, d8
 80042b0:	2200      	movs	r2, #0
 80042b2:	2300      	movs	r3, #0
 80042b4:	f7fc fbd6 	bl	8000a64 <__aeabi_dcmplt>
 80042b8:	3800      	subs	r0, #0
 80042ba:	bf18      	it	ne
 80042bc:	2001      	movne	r0, #1
 80042be:	e447      	b.n	8003b50 <__ieee754_pow+0x240>
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	f7fb ffa4 	bl	8000210 <__aeabi_dsub>
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	f7fc fbde 	bl	8000a8c <__aeabi_dcmpge>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	f43f aef3 	beq.w	80040bc <__ieee754_pow+0x7ac>
 80042d6:	e7e9      	b.n	80042ac <__ieee754_pow+0x99c>
 80042d8:	f04f 0a00 	mov.w	sl, #0
 80042dc:	e71a      	b.n	8004114 <__ieee754_pow+0x804>
 80042de:	ec51 0b10 	vmov	r0, r1, d0
 80042e2:	4619      	mov	r1, r3
 80042e4:	e7d4      	b.n	8004290 <__ieee754_pow+0x980>
 80042e6:	491c      	ldr	r1, [pc, #112]	; (8004358 <__ieee754_pow+0xa48>)
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7ff bb30 	b.w	800394e <__ieee754_pow+0x3e>
 80042ee:	2000      	movs	r0, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	f7ff bb2c 	b.w	800394e <__ieee754_pow+0x3e>
 80042f6:	4630      	mov	r0, r6
 80042f8:	4639      	mov	r1, r7
 80042fa:	f7ff bb28 	b.w	800394e <__ieee754_pow+0x3e>
 80042fe:	9204      	str	r2, [sp, #16]
 8004300:	f7ff bb7a 	b.w	80039f8 <__ieee754_pow+0xe8>
 8004304:	2300      	movs	r3, #0
 8004306:	f7ff bb64 	b.w	80039d2 <__ieee754_pow+0xc2>
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w
 8004310:	00000000 	.word	0x00000000
 8004314:	3fe62e43 	.word	0x3fe62e43
 8004318:	fefa39ef 	.word	0xfefa39ef
 800431c:	3fe62e42 	.word	0x3fe62e42
 8004320:	0ca86c39 	.word	0x0ca86c39
 8004324:	be205c61 	.word	0xbe205c61
 8004328:	72bea4d0 	.word	0x72bea4d0
 800432c:	3e663769 	.word	0x3e663769
 8004330:	c5d26bf1 	.word	0xc5d26bf1
 8004334:	3ebbbd41 	.word	0x3ebbbd41
 8004338:	af25de2c 	.word	0xaf25de2c
 800433c:	3f11566a 	.word	0x3f11566a
 8004340:	16bebd93 	.word	0x16bebd93
 8004344:	3f66c16c 	.word	0x3f66c16c
 8004348:	5555553e 	.word	0x5555553e
 800434c:	3fc55555 	.word	0x3fc55555
 8004350:	3fe00000 	.word	0x3fe00000
 8004354:	000fffff 	.word	0x000fffff
 8004358:	3ff00000 	.word	0x3ff00000
 800435c:	4090cbff 	.word	0x4090cbff
 8004360:	3f6f3400 	.word	0x3f6f3400
 8004364:	652b82fe 	.word	0x652b82fe
 8004368:	3c971547 	.word	0x3c971547

0800436c <__ieee754_sqrt>:
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	ec55 4b10 	vmov	r4, r5, d0
 8004374:	4e55      	ldr	r6, [pc, #340]	; (80044cc <__ieee754_sqrt+0x160>)
 8004376:	43ae      	bics	r6, r5
 8004378:	ee10 0a10 	vmov	r0, s0
 800437c:	ee10 3a10 	vmov	r3, s0
 8004380:	462a      	mov	r2, r5
 8004382:	4629      	mov	r1, r5
 8004384:	d110      	bne.n	80043a8 <__ieee754_sqrt+0x3c>
 8004386:	ee10 2a10 	vmov	r2, s0
 800438a:	462b      	mov	r3, r5
 800438c:	f7fc f8f8 	bl	8000580 <__aeabi_dmul>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4620      	mov	r0, r4
 8004396:	4629      	mov	r1, r5
 8004398:	f7fb ff3c 	bl	8000214 <__adddf3>
 800439c:	4604      	mov	r4, r0
 800439e:	460d      	mov	r5, r1
 80043a0:	ec45 4b10 	vmov	d0, r4, r5
 80043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	dc10      	bgt.n	80043ce <__ieee754_sqrt+0x62>
 80043ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80043b0:	4330      	orrs	r0, r6
 80043b2:	d0f5      	beq.n	80043a0 <__ieee754_sqrt+0x34>
 80043b4:	b15d      	cbz	r5, 80043ce <__ieee754_sqrt+0x62>
 80043b6:	ee10 2a10 	vmov	r2, s0
 80043ba:	462b      	mov	r3, r5
 80043bc:	ee10 0a10 	vmov	r0, s0
 80043c0:	f7fb ff26 	bl	8000210 <__aeabi_dsub>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	f7fc fa04 	bl	80007d4 <__aeabi_ddiv>
 80043cc:	e7e6      	b.n	800439c <__ieee754_sqrt+0x30>
 80043ce:	1512      	asrs	r2, r2, #20
 80043d0:	d074      	beq.n	80044bc <__ieee754_sqrt+0x150>
 80043d2:	07d4      	lsls	r4, r2, #31
 80043d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80043d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80043dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80043e0:	bf5e      	ittt	pl
 80043e2:	0fda      	lsrpl	r2, r3, #31
 80043e4:	005b      	lslpl	r3, r3, #1
 80043e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80043ea:	2400      	movs	r4, #0
 80043ec:	0fda      	lsrs	r2, r3, #31
 80043ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80043f2:	107f      	asrs	r7, r7, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	2516      	movs	r5, #22
 80043f8:	4620      	mov	r0, r4
 80043fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80043fe:	1886      	adds	r6, r0, r2
 8004400:	428e      	cmp	r6, r1
 8004402:	bfde      	ittt	le
 8004404:	1b89      	suble	r1, r1, r6
 8004406:	18b0      	addle	r0, r6, r2
 8004408:	18a4      	addle	r4, r4, r2
 800440a:	0049      	lsls	r1, r1, #1
 800440c:	3d01      	subs	r5, #1
 800440e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004412:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004416:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800441a:	d1f0      	bne.n	80043fe <__ieee754_sqrt+0x92>
 800441c:	462a      	mov	r2, r5
 800441e:	f04f 0e20 	mov.w	lr, #32
 8004422:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004426:	4281      	cmp	r1, r0
 8004428:	eb06 0c05 	add.w	ip, r6, r5
 800442c:	dc02      	bgt.n	8004434 <__ieee754_sqrt+0xc8>
 800442e:	d113      	bne.n	8004458 <__ieee754_sqrt+0xec>
 8004430:	459c      	cmp	ip, r3
 8004432:	d811      	bhi.n	8004458 <__ieee754_sqrt+0xec>
 8004434:	f1bc 0f00 	cmp.w	ip, #0
 8004438:	eb0c 0506 	add.w	r5, ip, r6
 800443c:	da43      	bge.n	80044c6 <__ieee754_sqrt+0x15a>
 800443e:	2d00      	cmp	r5, #0
 8004440:	db41      	blt.n	80044c6 <__ieee754_sqrt+0x15a>
 8004442:	f100 0801 	add.w	r8, r0, #1
 8004446:	1a09      	subs	r1, r1, r0
 8004448:	459c      	cmp	ip, r3
 800444a:	bf88      	it	hi
 800444c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004450:	eba3 030c 	sub.w	r3, r3, ip
 8004454:	4432      	add	r2, r6
 8004456:	4640      	mov	r0, r8
 8004458:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800445c:	f1be 0e01 	subs.w	lr, lr, #1
 8004460:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004468:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800446c:	d1db      	bne.n	8004426 <__ieee754_sqrt+0xba>
 800446e:	430b      	orrs	r3, r1
 8004470:	d006      	beq.n	8004480 <__ieee754_sqrt+0x114>
 8004472:	1c50      	adds	r0, r2, #1
 8004474:	bf13      	iteet	ne
 8004476:	3201      	addne	r2, #1
 8004478:	3401      	addeq	r4, #1
 800447a:	4672      	moveq	r2, lr
 800447c:	f022 0201 	bicne.w	r2, r2, #1
 8004480:	1063      	asrs	r3, r4, #1
 8004482:	0852      	lsrs	r2, r2, #1
 8004484:	07e1      	lsls	r1, r4, #31
 8004486:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800448a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800448e:	bf48      	it	mi
 8004490:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004494:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004498:	4614      	mov	r4, r2
 800449a:	e781      	b.n	80043a0 <__ieee754_sqrt+0x34>
 800449c:	0ad9      	lsrs	r1, r3, #11
 800449e:	3815      	subs	r0, #21
 80044a0:	055b      	lsls	r3, r3, #21
 80044a2:	2900      	cmp	r1, #0
 80044a4:	d0fa      	beq.n	800449c <__ieee754_sqrt+0x130>
 80044a6:	02cd      	lsls	r5, r1, #11
 80044a8:	d50a      	bpl.n	80044c0 <__ieee754_sqrt+0x154>
 80044aa:	f1c2 0420 	rsb	r4, r2, #32
 80044ae:	fa23 f404 	lsr.w	r4, r3, r4
 80044b2:	1e55      	subs	r5, r2, #1
 80044b4:	4093      	lsls	r3, r2
 80044b6:	4321      	orrs	r1, r4
 80044b8:	1b42      	subs	r2, r0, r5
 80044ba:	e78a      	b.n	80043d2 <__ieee754_sqrt+0x66>
 80044bc:	4610      	mov	r0, r2
 80044be:	e7f0      	b.n	80044a2 <__ieee754_sqrt+0x136>
 80044c0:	0049      	lsls	r1, r1, #1
 80044c2:	3201      	adds	r2, #1
 80044c4:	e7ef      	b.n	80044a6 <__ieee754_sqrt+0x13a>
 80044c6:	4680      	mov	r8, r0
 80044c8:	e7bd      	b.n	8004446 <__ieee754_sqrt+0xda>
 80044ca:	bf00      	nop
 80044cc:	7ff00000 	.word	0x7ff00000

080044d0 <with_errno>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	4604      	mov	r4, r0
 80044d4:	460d      	mov	r5, r1
 80044d6:	4616      	mov	r6, r2
 80044d8:	f7ff f978 	bl	80037cc <__errno>
 80044dc:	4629      	mov	r1, r5
 80044de:	6006      	str	r6, [r0, #0]
 80044e0:	4620      	mov	r0, r4
 80044e2:	bd70      	pop	{r4, r5, r6, pc}

080044e4 <xflow>:
 80044e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044e6:	4614      	mov	r4, r2
 80044e8:	461d      	mov	r5, r3
 80044ea:	b108      	cbz	r0, 80044f0 <xflow+0xc>
 80044ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80044f0:	e9cd 2300 	strd	r2, r3, [sp]
 80044f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	f7fc f840 	bl	8000580 <__aeabi_dmul>
 8004500:	2222      	movs	r2, #34	; 0x22
 8004502:	b003      	add	sp, #12
 8004504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004508:	f7ff bfe2 	b.w	80044d0 <with_errno>

0800450c <__math_uflow>:
 800450c:	b508      	push	{r3, lr}
 800450e:	2200      	movs	r2, #0
 8004510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004514:	f7ff ffe6 	bl	80044e4 <xflow>
 8004518:	ec41 0b10 	vmov	d0, r0, r1
 800451c:	bd08      	pop	{r3, pc}

0800451e <__math_oflow>:
 800451e:	b508      	push	{r3, lr}
 8004520:	2200      	movs	r2, #0
 8004522:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004526:	f7ff ffdd 	bl	80044e4 <xflow>
 800452a:	ec41 0b10 	vmov	d0, r0, r1
 800452e:	bd08      	pop	{r3, pc}

08004530 <fabs>:
 8004530:	ec51 0b10 	vmov	r0, r1, d0
 8004534:	ee10 2a10 	vmov	r2, s0
 8004538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800453c:	ec43 2b10 	vmov	d0, r2, r3
 8004540:	4770      	bx	lr

08004542 <finite>:
 8004542:	b082      	sub	sp, #8
 8004544:	ed8d 0b00 	vstr	d0, [sp]
 8004548:	9801      	ldr	r0, [sp, #4]
 800454a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800454e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004552:	0fc0      	lsrs	r0, r0, #31
 8004554:	b002      	add	sp, #8
 8004556:	4770      	bx	lr

08004558 <scalbn>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	ec55 4b10 	vmov	r4, r5, d0
 800455e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004562:	4606      	mov	r6, r0
 8004564:	462b      	mov	r3, r5
 8004566:	b99a      	cbnz	r2, 8004590 <scalbn+0x38>
 8004568:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800456c:	4323      	orrs	r3, r4
 800456e:	d036      	beq.n	80045de <scalbn+0x86>
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <scalbn+0x100>)
 8004572:	4629      	mov	r1, r5
 8004574:	ee10 0a10 	vmov	r0, s0
 8004578:	2200      	movs	r2, #0
 800457a:	f7fc f801 	bl	8000580 <__aeabi_dmul>
 800457e:	4b37      	ldr	r3, [pc, #220]	; (800465c <scalbn+0x104>)
 8004580:	429e      	cmp	r6, r3
 8004582:	4604      	mov	r4, r0
 8004584:	460d      	mov	r5, r1
 8004586:	da10      	bge.n	80045aa <scalbn+0x52>
 8004588:	a32b      	add	r3, pc, #172	; (adr r3, 8004638 <scalbn+0xe0>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	e03a      	b.n	8004606 <scalbn+0xae>
 8004590:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004594:	428a      	cmp	r2, r1
 8004596:	d10c      	bne.n	80045b2 <scalbn+0x5a>
 8004598:	ee10 2a10 	vmov	r2, s0
 800459c:	4620      	mov	r0, r4
 800459e:	4629      	mov	r1, r5
 80045a0:	f7fb fe38 	bl	8000214 <__adddf3>
 80045a4:	4604      	mov	r4, r0
 80045a6:	460d      	mov	r5, r1
 80045a8:	e019      	b.n	80045de <scalbn+0x86>
 80045aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80045ae:	460b      	mov	r3, r1
 80045b0:	3a36      	subs	r2, #54	; 0x36
 80045b2:	4432      	add	r2, r6
 80045b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80045b8:	428a      	cmp	r2, r1
 80045ba:	dd08      	ble.n	80045ce <scalbn+0x76>
 80045bc:	2d00      	cmp	r5, #0
 80045be:	a120      	add	r1, pc, #128	; (adr r1, 8004640 <scalbn+0xe8>)
 80045c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045c4:	da1c      	bge.n	8004600 <scalbn+0xa8>
 80045c6:	a120      	add	r1, pc, #128	; (adr r1, 8004648 <scalbn+0xf0>)
 80045c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045cc:	e018      	b.n	8004600 <scalbn+0xa8>
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	dd08      	ble.n	80045e4 <scalbn+0x8c>
 80045d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80045d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80045de:	ec45 4b10 	vmov	d0, r4, r5
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80045e8:	da19      	bge.n	800461e <scalbn+0xc6>
 80045ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80045ee:	429e      	cmp	r6, r3
 80045f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80045f4:	dd0a      	ble.n	800460c <scalbn+0xb4>
 80045f6:	a112      	add	r1, pc, #72	; (adr r1, 8004640 <scalbn+0xe8>)
 80045f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e2      	bne.n	80045c6 <scalbn+0x6e>
 8004600:	a30f      	add	r3, pc, #60	; (adr r3, 8004640 <scalbn+0xe8>)
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f7fb ffbb 	bl	8000580 <__aeabi_dmul>
 800460a:	e7cb      	b.n	80045a4 <scalbn+0x4c>
 800460c:	a10a      	add	r1, pc, #40	; (adr r1, 8004638 <scalbn+0xe0>)
 800460e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0b8      	beq.n	8004588 <scalbn+0x30>
 8004616:	a10e      	add	r1, pc, #56	; (adr r1, 8004650 <scalbn+0xf8>)
 8004618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800461c:	e7b4      	b.n	8004588 <scalbn+0x30>
 800461e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004622:	3236      	adds	r2, #54	; 0x36
 8004624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004628:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800462c:	4620      	mov	r0, r4
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <scalbn+0x108>)
 8004630:	2200      	movs	r2, #0
 8004632:	e7e8      	b.n	8004606 <scalbn+0xae>
 8004634:	f3af 8000 	nop.w
 8004638:	c2f8f359 	.word	0xc2f8f359
 800463c:	01a56e1f 	.word	0x01a56e1f
 8004640:	8800759c 	.word	0x8800759c
 8004644:	7e37e43c 	.word	0x7e37e43c
 8004648:	8800759c 	.word	0x8800759c
 800464c:	fe37e43c 	.word	0xfe37e43c
 8004650:	c2f8f359 	.word	0xc2f8f359
 8004654:	81a56e1f 	.word	0x81a56e1f
 8004658:	43500000 	.word	0x43500000
 800465c:	ffff3cb0 	.word	0xffff3cb0
 8004660:	3c900000 	.word	0x3c900000

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
