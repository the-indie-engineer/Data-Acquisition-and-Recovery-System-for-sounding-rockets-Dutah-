
recieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003684  08003684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08003698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003698  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f39  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a60  00000000  00000000  00029f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020453  00000000  00000000  0002c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0ed  00000000  00000000  0004ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c46ae  00000000  00000000  00056dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df4  00000000  00000000  0011b4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003644 	.word	0x08003644

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003644 	.word	0x08003644

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa72 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f816 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8d0 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8ae 	bl	8000678 <MX_DMA_Init>
  MX_UART5_Init();
 800051c:	f000 f882 	bl	8000624 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_DMA(&huart5, rx_data, 1);
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <main+0x30>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2201      	movs	r2, #1
 8000526:	4619      	mov	r1, r3
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x34>)
 800052a:	f001 ffa0 	bl	800246e <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f000 fad1 	bl	8000ad8 <HAL_Delay>
 8000536:	e7fa      	b.n	800052e <main+0x26>
 8000538:	200000cc 	.word	0x200000cc
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f870 	bl	8003634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <SystemClock_Config+0xdc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a2b      	ldr	r2, [pc, #172]	; (800061c <SystemClock_Config+0xdc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0xdc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <SystemClock_Config+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a25      	ldr	r2, [pc, #148]	; (8000620 <SystemClock_Config+0xe0>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <SystemClock_Config+0xe0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005b4:	23b4      	movs	r3, #180	; 0xb4
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fc65 	bl	8001e98 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d4:	f000 f8b4 	bl	8000740 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d8:	f001 f94a 	bl	8001870 <HAL_PWREx_EnableOverDrive>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e2:	f000 f8ad 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2105      	movs	r1, #5
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f983 	bl	8001910 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000610:	f000 f896 	bl	8000740 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_UART5_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_UART5_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_UART5_Init+0x4c>)
 8000630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000634:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_UART5_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_UART5_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_UART5_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_UART5_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_UART5_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_UART5_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_UART5_Init+0x4c>)
 800065c:	f001 feba 	bl	80023d4 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f86b 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028
 8000674:	40005000 	.word	0x40005000

08000678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_DMA_Init+0x3c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <MX_DMA_Init+0x3c>)
 8000688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_DMA_Init+0x3c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	202f      	movs	r0, #47	; 0x2f
 80006a0:	f000 fb19 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006a4:	202f      	movs	r0, #47	; 0x2f
 80006a6:	f000 fb32 	bl	8000d0e <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_GPIO_Init+0x84>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1d      	ldr	r2, [pc, #116]	; (800073c <MX_GPIO_Init+0x84>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_GPIO_Init+0x84>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <MX_GPIO_Init+0x84>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_GPIO_Init+0x84>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_GPIO_Init+0x84>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_GPIO_Init+0x84>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_GPIO_Init+0x84>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_GPIO_Init+0x84>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <MX_GPIO_Init+0x84>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_GPIO_Init+0x84>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <HAL_MspInit+0x58>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <HAL_MspInit+0x58>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <HAL_MspInit+0x58>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x58>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <HAL_MspInit+0x58>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x58>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2005      	movs	r0, #5
 8000790:	f000 faa1 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000794:	2005      	movs	r0, #5
 8000796:	f000 faba 	bl	8000d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a44      	ldr	r2, [pc, #272]	; (80008d8 <HAL_UART_MspInit+0x130>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	f040 8082 	bne.w	80008d0 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	4b42      	ldr	r3, [pc, #264]	; (80008dc <HAL_UART_MspInit+0x134>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a41      	ldr	r2, [pc, #260]	; (80008dc <HAL_UART_MspInit+0x134>)
 80007d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <HAL_UART_MspInit+0x134>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	4b3b      	ldr	r3, [pc, #236]	; (80008dc <HAL_UART_MspInit+0x134>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a3a      	ldr	r2, [pc, #232]	; (80008dc <HAL_UART_MspInit+0x134>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b38      	ldr	r3, [pc, #224]	; (80008dc <HAL_UART_MspInit+0x134>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b34      	ldr	r3, [pc, #208]	; (80008dc <HAL_UART_MspInit+0x134>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4a33      	ldr	r2, [pc, #204]	; (80008dc <HAL_UART_MspInit+0x134>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6313      	str	r3, [r2, #48]	; 0x30
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <HAL_UART_MspInit+0x134>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000832:	2308      	movs	r3, #8
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4828      	ldr	r0, [pc, #160]	; (80008e0 <HAL_UART_MspInit+0x138>)
 800083e:	f000 fe83 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000842:	2304      	movs	r3, #4
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000852:	2308      	movs	r3, #8
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4821      	ldr	r0, [pc, #132]	; (80008e4 <HAL_UART_MspInit+0x13c>)
 800085e:	f000 fe73 	bl	8001548 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <HAL_UART_MspInit+0x140>)
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <HAL_UART_MspInit+0x144>)
 8000866:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <HAL_UART_MspInit+0x140>)
 800086a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <HAL_UART_MspInit+0x140>)
 8000872:	2240      	movs	r2, #64	; 0x40
 8000874:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_UART_MspInit+0x140>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <HAL_UART_MspInit+0x140>)
 800087e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000882:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0x140>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0x140>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0x140>)
 8000892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000896:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_UART_MspInit+0x140>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0x140>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0x140>)
 80008a6:	f000 fa4d 	bl	8000d44 <HAL_DMA_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80008b0:	f7ff ff46 	bl	8000740 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <HAL_UART_MspInit+0x140>)
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <HAL_UART_MspInit+0x140>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2035      	movs	r0, #53	; 0x35
 80008c6:	f000 fa06 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80008ca:	2035      	movs	r0, #53	; 0x35
 80008cc:	f000 fa1f 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40005000 	.word	0x40005000
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	2000006c 	.word	0x2000006c
 80008ec:	400260b8 	.word	0x400260b8

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8ac 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <DMA1_Stream7_IRQHandler+0x10>)
 800095a:	f000 fb8b 	bl	8001074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000006c 	.word	0x2000006c

08000968 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <UART5_IRQHandler+0x10>)
 800096e:	f001 fdaf 	bl	80024d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000028 	.word	0x20000028

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a6:	490e      	ldr	r1, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009bc:	4c0b      	ldr	r4, [pc, #44]	; (80009ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ca:	f7ff ffd7 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f002 fe0d 	bl	80035ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff fd99 	bl	8000508 <main>
  bx  lr    
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e4:	0800368c 	.word	0x0800368c
  ldr r2, =_sbss
 80009e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ec:	200000d4 	.word	0x200000d4

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <HAL_Init+0x40>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_Init+0x40>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x40>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f94f 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fe90 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023c00 	.word	0x40023c00

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f967 	bl	8000d2a <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f92f 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000d0 	.word	0x200000d0

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000d0 	.word	0x200000d0

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffde 	bl	8000ac0 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff29 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff3e 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff31 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff feb6 	bl	8000ac0 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e099      	b.n	8000e94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2202      	movs	r2, #2
 8000d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d80:	e00f      	b.n	8000da2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d82:	f7ff fe9d 	bl	8000ac0 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d908      	bls.n	8000da2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2220      	movs	r2, #32
 8000d94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2203      	movs	r2, #3
 8000d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e078      	b.n	8000e94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e8      	bne.n	8000d82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <HAL_DMA_Init+0x158>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d107      	bne.n	8000e0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4313      	orrs	r3, r2
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f023 0307 	bic.w	r3, r3, #7
 8000e22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d117      	bne.n	8000e66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00e      	beq.n	8000e66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 fb01 	bl	8001450 <DMA_CheckFifoParam>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e62:	2301      	movs	r3, #1
 8000e64:	e016      	b.n	8000e94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 fab8 	bl	80013e4 <DMA_CalcBaseAndBitshift>
 8000e74:	4603      	mov	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e7c:	223f      	movs	r2, #63	; 0x3f
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	f010803f 	.word	0xf010803f

08000ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_DMA_Start_IT+0x26>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e040      	b.n	8000f48 <HAL_DMA_Start_IT+0xa8>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d12f      	bne.n	8000f3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2202      	movs	r2, #2
 8000ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 fa4a 	bl	8001388 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef8:	223f      	movs	r2, #63	; 0x3f
 8000efa:	409a      	lsls	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0216 	orr.w	r2, r2, #22
 8000f0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0208 	orr.w	r2, r2, #8
 8000f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0201 	orr.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e005      	b.n	8000f46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f42:	2302      	movs	r3, #2
 8000f44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f5e:	f7ff fdaf 	bl	8000ac0 <HAL_GetTick>
 8000f62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d008      	beq.n	8000f82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e052      	b.n	8001028 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0216 	bic.w	r2, r2, #22
 8000f90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d103      	bne.n	8000fb2 <HAL_DMA_Abort+0x62>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0208 	bic.w	r2, r2, #8
 8000fc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd2:	e013      	b.n	8000ffc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fd4:	f7ff fd74 	bl	8000ac0 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d90c      	bls.n	8000ffc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e015      	b.n	8001028 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1e4      	bne.n	8000fd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100e:	223f      	movs	r2, #63	; 0x3f
 8001010:	409a      	lsls	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d004      	beq.n	800104e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00c      	b.n	8001068 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2205      	movs	r2, #5
 8001052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0201 	bic.w	r2, r2, #1
 8001064:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001080:	4b8e      	ldr	r3, [pc, #568]	; (80012bc <HAL_DMA_IRQHandler+0x248>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a8e      	ldr	r2, [pc, #568]	; (80012c0 <HAL_DMA_IRQHandler+0x24c>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0a9b      	lsrs	r3, r3, #10
 800108c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109e:	2208      	movs	r2, #8
 80010a0:	409a      	lsls	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d01a      	beq.n	80010e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d013      	beq.n	80010e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0204 	bic.w	r2, r2, #4
 80010c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	2208      	movs	r2, #8
 80010ce:	409a      	lsls	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e4:	2201      	movs	r2, #1
 80010e6:	409a      	lsls	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d012      	beq.n	8001116 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001102:	2201      	movs	r2, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110e:	f043 0202 	orr.w	r2, r3, #2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	2204      	movs	r2, #4
 800111c:	409a      	lsls	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d012      	beq.n	800114c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00b      	beq.n	800114c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2204      	movs	r2, #4
 800113a:	409a      	lsls	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001144:	f043 0204 	orr.w	r2, r3, #4
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001150:	2210      	movs	r2, #16
 8001152:	409a      	lsls	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d043      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	2b00      	cmp	r3, #0
 8001168:	d03c      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116e:	2210      	movs	r2, #16
 8001170:	409a      	lsls	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d018      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d108      	bne.n	80011a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d024      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	4798      	blx	r3
 80011a2:	e01f      	b.n	80011e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d01b      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
 80011b4:	e016      	b.n	80011e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d107      	bne.n	80011d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0208 	bic.w	r2, r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	2220      	movs	r2, #32
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 808f 	beq.w	8001314 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8087 	beq.w	8001314 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120a:	2220      	movs	r2, #32
 800120c:	409a      	lsls	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b05      	cmp	r3, #5
 800121c:	d136      	bne.n	800128c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0216 	bic.w	r2, r2, #22
 800122c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800123c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <HAL_DMA_IRQHandler+0x1da>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0208 	bic.w	r2, r2, #8
 800125c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001262:	223f      	movs	r2, #63	; 0x3f
 8001264:	409a      	lsls	r2, r3
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800127e:	2b00      	cmp	r3, #0
 8001280:	d07e      	beq.n	8001380 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
        }
        return;
 800128a:	e079      	b.n	8001380 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d01d      	beq.n	80012d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10d      	bne.n	80012c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d031      	beq.n	8001314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	4798      	blx	r3
 80012b8:	e02c      	b.n	8001314 <HAL_DMA_IRQHandler+0x2a0>
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d023      	beq.n	8001314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
 80012d4:	e01e      	b.n	8001314 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10f      	bne.n	8001304 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0210 	bic.w	r2, r2, #16
 80012f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001318:	2b00      	cmp	r3, #0
 800131a:	d032      	beq.n	8001382 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d022      	beq.n	800136e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2205      	movs	r2, #5
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	3301      	adds	r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	d307      	bcc.n	800135c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f2      	bne.n	8001340 <HAL_DMA_IRQHandler+0x2cc>
 800135a:	e000      	b.n	800135e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800135c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	4798      	blx	r3
 800137e:	e000      	b.n	8001382 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001380:	bf00      	nop
    }
  }
}
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b40      	cmp	r3, #64	; 0x40
 80013b4:	d108      	bne.n	80013c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013c6:	e007      	b.n	80013d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	60da      	str	r2, [r3, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3b10      	subs	r3, #16
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <DMA_CalcBaseAndBitshift+0x64>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <DMA_CalcBaseAndBitshift+0x68>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d909      	bls.n	8001426 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800141a:	f023 0303 	bic.w	r3, r3, #3
 800141e:	1d1a      	adds	r2, r3, #4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	659a      	str	r2, [r3, #88]	; 0x58
 8001424:	e007      	b.n	8001436 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	aaaaaaab 	.word	0xaaaaaaab
 800144c:	08003674 	.word	0x08003674

08001450 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11f      	bne.n	80014aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d856      	bhi.n	800151e <DMA_CheckFifoParam+0xce>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <DMA_CheckFifoParam+0x28>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	08001489 	.word	0x08001489
 800147c:	0800149b 	.word	0x0800149b
 8001480:	08001489 	.word	0x08001489
 8001484:	0800151f 	.word	0x0800151f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d046      	beq.n	8001522 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001498:	e043      	b.n	8001522 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014a2:	d140      	bne.n	8001526 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a8:	e03d      	b.n	8001526 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014b2:	d121      	bne.n	80014f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d837      	bhi.n	800152a <DMA_CheckFifoParam+0xda>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <DMA_CheckFifoParam+0x70>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014d7 	.word	0x080014d7
 80014c8:	080014d1 	.word	0x080014d1
 80014cc:	080014e9 	.word	0x080014e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      break;
 80014d4:	e030      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d025      	beq.n	800152e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e6:	e022      	b.n	800152e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014f0:	d11f      	bne.n	8001532 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014f6:	e01c      	b.n	8001532 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d903      	bls.n	8001506 <DMA_CheckFifoParam+0xb6>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d003      	beq.n	800150c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001504:	e018      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
      break;
 800150a:	e015      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00e      	beq.n	8001536 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      break;
 800151c:	e00b      	b.n	8001536 <DMA_CheckFifoParam+0xe6>
      break;
 800151e:	bf00      	nop
 8001520:	e00a      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 8001522:	bf00      	nop
 8001524:	e008      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 8001526:	bf00      	nop
 8001528:	e006      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 800152a:	bf00      	nop
 800152c:	e004      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 800152e:	bf00      	nop
 8001530:	e002      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;   
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 8001536:	bf00      	nop
    }
  } 
  
  return status; 
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e165      	b.n	8001830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8154 	bne.w	800182a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80ae 	beq.w	800182a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_GPIO_Init+0x300>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a5c      	ldr	r2, [pc, #368]	; (8001848 <HAL_GPIO_Init+0x300>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <HAL_GPIO_Init+0x300>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_GPIO_Init+0x304>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <HAL_GPIO_Init+0x308>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d025      	beq.n	8001762 <HAL_GPIO_Init+0x21a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4e      	ldr	r2, [pc, #312]	; (8001854 <HAL_GPIO_Init+0x30c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01f      	beq.n	800175e <HAL_GPIO_Init+0x216>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <HAL_GPIO_Init+0x310>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x212>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4c      	ldr	r2, [pc, #304]	; (800185c <HAL_GPIO_Init+0x314>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x20e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_GPIO_Init+0x318>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x20a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x31c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x206>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a49      	ldr	r2, [pc, #292]	; (8001868 <HAL_GPIO_Init+0x320>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x202>
 8001746:	2306      	movs	r3, #6
 8001748:	e00c      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800174a:	2307      	movs	r3, #7
 800174c:	e00a      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800174e:	2305      	movs	r3, #5
 8001750:	e008      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 8001752:	2304      	movs	r3, #4
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 8001756:	2303      	movs	r3, #3
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 8001762:	2300      	movs	r3, #0
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_GPIO_Init+0x304>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_GPIO_Init+0x324>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a31      	ldr	r2, [pc, #196]	; (800186c <HAL_GPIO_Init+0x324>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_GPIO_Init+0x324>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_GPIO_Init+0x324>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_GPIO_Init+0x324>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_GPIO_Init+0x324>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_Init+0x324>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_GPIO_Init+0x324>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	f67f ae96 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40013800 	.word	0x40013800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40021400 	.word	0x40021400
 8001868:	40021800 	.word	0x40021800
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_PWREx_EnableOverDrive+0x90>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_PWREx_EnableOverDrive+0x90>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_PWREx_EnableOverDrive+0x90>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_PWREx_EnableOverDrive+0x94>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189c:	f7ff f910 	bl	8000ac0 <HAL_GetTick>
 80018a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018a2:	e009      	b.n	80018b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018a4:	f7ff f90c 	bl	8000ac0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b2:	d901      	bls.n	80018b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e01f      	b.n	80018f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_PWREx_EnableOverDrive+0x98>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d1ee      	bne.n	80018a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018cc:	f7ff f8f8 	bl	8000ac0 <HAL_GetTick>
 80018d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018d2:	e009      	b.n	80018e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018d4:	f7ff f8f4 	bl	8000ac0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018e2:	d901      	bls.n	80018e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e007      	b.n	80018f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_PWREx_EnableOverDrive+0x98>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018f4:	d1ee      	bne.n	80018d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	420e0040 	.word	0x420e0040
 8001908:	40007000 	.word	0x40007000
 800190c:	420e0044 	.word	0x420e0044

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cc      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d90c      	bls.n	800194c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d044      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d119      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e067      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4934      	ldr	r1, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff f85e 	bl	8000ac0 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff f85a 	bl	8000ac0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e04f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20c      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f855 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe ffbe 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	0800365c 	.word	0x0800365c
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000

08001af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001af8:	f7ff fff0 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	0a9b      	lsrs	r3, r3, #10
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	0800366c 	.word	0x0800366c

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b20:	f7ff ffdc 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0b5b      	lsrs	r3, r3, #13
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	0800366c 	.word	0x0800366c

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b48:	b0a6      	sub	sp, #152	; 0x98
 8001b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6a:	4bc8      	ldr	r3, [pc, #800]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	f200 817e 	bhi.w	8001e74 <HAL_RCC_GetSysClockFreq+0x330>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001bb5 	.word	0x08001bb5
 8001b84:	08001e75 	.word	0x08001e75
 8001b88:	08001e75 	.word	0x08001e75
 8001b8c:	08001e75 	.word	0x08001e75
 8001b90:	08001bbd 	.word	0x08001bbd
 8001b94:	08001e75 	.word	0x08001e75
 8001b98:	08001e75 	.word	0x08001e75
 8001b9c:	08001e75 	.word	0x08001e75
 8001ba0:	08001bc5 	.word	0x08001bc5
 8001ba4:	08001e75 	.word	0x08001e75
 8001ba8:	08001e75 	.word	0x08001e75
 8001bac:	08001e75 	.word	0x08001e75
 8001bb0:	08001d2f 	.word	0x08001d2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4bb6      	ldr	r3, [pc, #728]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001bba:	e15f      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbc:	4bb5      	ldr	r3, [pc, #724]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001bc2:	e15b      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4bb1      	ldr	r3, [pc, #708]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd0:	4bae      	ldr	r3, [pc, #696]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d031      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bdc:	4bab      	ldr	r3, [pc, #684]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	2200      	movs	r2, #0
 8001be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bee:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	667b      	str	r3, [r7, #100]	; 0x64
 8001bf4:	4ba7      	ldr	r3, [pc, #668]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bf6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bfa:	462a      	mov	r2, r5
 8001bfc:	fb03 f202 	mul.w	r2, r3, r2
 8001c00:	2300      	movs	r3, #0
 8001c02:	4621      	mov	r1, r4
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	4aa2      	ldr	r2, [pc, #648]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	fba1 1202 	umull	r1, r2, r1, r2
 8001c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001c14:	460a      	mov	r2, r1
 8001c16:	67ba      	str	r2, [r7, #120]	; 0x78
 8001c18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c1a:	4413      	add	r3, r2
 8001c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c22:	2200      	movs	r2, #0
 8001c24:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c30:	f7fe fae8 	bl	8000204 <__aeabi_uldivmod>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c3e:	e064      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	2200      	movs	r2, #0
 8001c48:	653b      	str	r3, [r7, #80]	; 0x50
 8001c4a:	657a      	str	r2, [r7, #84]	; 0x54
 8001c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c54:	2300      	movs	r3, #0
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c58:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001c5c:	4622      	mov	r2, r4
 8001c5e:	462b      	mov	r3, r5
 8001c60:	f04f 0000 	mov.w	r0, #0
 8001c64:	f04f 0100 	mov.w	r1, #0
 8001c68:	0159      	lsls	r1, r3, #5
 8001c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6e:	0150      	lsls	r0, r2, #5
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4621      	mov	r1, r4
 8001c76:	1a51      	subs	r1, r2, r1
 8001c78:	6139      	str	r1, [r7, #16]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c8e:	4659      	mov	r1, fp
 8001c90:	018b      	lsls	r3, r1, #6
 8001c92:	4651      	mov	r1, sl
 8001c94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c98:	4651      	mov	r1, sl
 8001c9a:	018a      	lsls	r2, r1, #6
 8001c9c:	4651      	mov	r1, sl
 8001c9e:	ebb2 0801 	subs.w	r8, r2, r1
 8001ca2:	4659      	mov	r1, fp
 8001ca4:	eb63 0901 	sbc.w	r9, r3, r1
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cbc:	4690      	mov	r8, r2
 8001cbe:	4699      	mov	r9, r3
 8001cc0:	4623      	mov	r3, r4
 8001cc2:	eb18 0303 	adds.w	r3, r8, r3
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	462b      	mov	r3, r5
 8001cca:	eb49 0303 	adc.w	r3, r9, r3
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cdc:	4629      	mov	r1, r5
 8001cde:	028b      	lsls	r3, r1, #10
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	028a      	lsls	r2, r1, #10
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8001cf6:	647a      	str	r2, [r7, #68]	; 0x44
 8001cf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cfc:	f7fe fa82 	bl	8000204 <__aeabi_uldivmod>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4613      	mov	r3, r2
 8001d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d0a:	4b60      	ldr	r3, [pc, #384]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	3301      	adds	r3, #1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001d1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d2c:	e0a6      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d2e:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3a:	4b54      	ldr	r3, [pc, #336]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d02a      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b51      	ldr	r3, [pc, #324]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d5c:	fb03 f201 	mul.w	r2, r3, r1
 8001d60:	2300      	movs	r3, #0
 8001d62:	fb00 f303 	mul.w	r3, r0, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d6e:	677a      	str	r2, [r7, #116]	; 0x74
 8001d70:	460a      	mov	r2, r1
 8001d72:	673a      	str	r2, [r7, #112]	; 0x70
 8001d74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d76:	4413      	add	r3, r2
 8001d78:	677b      	str	r3, [r7, #116]	; 0x74
 8001d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d7e:	2200      	movs	r2, #0
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
 8001d82:	637a      	str	r2, [r7, #52]	; 0x34
 8001d84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001d8c:	f7fe fa3a 	bl	8000204 <__aeabi_uldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4613      	mov	r3, r2
 8001d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d9a:	e05b      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	2200      	movs	r2, #0
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001db8:	4642      	mov	r2, r8
 8001dba:	464b      	mov	r3, r9
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	0159      	lsls	r1, r3, #5
 8001dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dca:	0150      	lsls	r0, r2, #5
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df0:	ebb2 040a 	subs.w	r4, r2, sl
 8001df4:	eb63 050b 	sbc.w	r5, r3, fp
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	00eb      	lsls	r3, r5, #3
 8001e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e06:	00e2      	lsls	r2, r4, #3
 8001e08:	4614      	mov	r4, r2
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	18e3      	adds	r3, r4, r3
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	464b      	mov	r3, r9
 8001e14:	eb45 0303 	adc.w	r3, r5, r3
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e26:	4629      	mov	r1, r5
 8001e28:	028b      	lsls	r3, r1, #10
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e30:	4621      	mov	r1, r4
 8001e32:	028a      	lsls	r2, r1, #10
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	61fa      	str	r2, [r7, #28]
 8001e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e46:	f7fe f9dd 	bl	8000204 <__aeabi_uldivmod>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4613      	mov	r3, r2
 8001e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0f1b      	lsrs	r3, r3, #28
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e72:	e003      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3798      	adds	r7, #152	; 0x98
 8001e84:	46bd      	mov	sp, r7
 8001e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	017d7840 	.word	0x017d7840

08001e98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e28d      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8083 	beq.w	8001fbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001eb8:	4b94      	ldr	r3, [pc, #592]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d019      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ec4:	4b91      	ldr	r3, [pc, #580]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed0:	4b8e      	ldr	r3, [pc, #568]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001edc:	d00c      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b8b      	ldr	r3, [pc, #556]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d112      	bne.n	8001f10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eea:	4b88      	ldr	r3, [pc, #544]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	4b84      	ldr	r3, [pc, #528]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d05b      	beq.n	8001fbc <HAL_RCC_OscConfig+0x124>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d157      	bne.n	8001fbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e25a      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d106      	bne.n	8001f28 <HAL_RCC_OscConfig+0x90>
 8001f1a:	4b7c      	ldr	r3, [pc, #496]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7b      	ldr	r2, [pc, #492]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e01d      	b.n	8001f64 <HAL_RCC_OscConfig+0xcc>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0xb4>
 8001f32:	4b76      	ldr	r3, [pc, #472]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a75      	ldr	r2, [pc, #468]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b73      	ldr	r3, [pc, #460]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a72      	ldr	r2, [pc, #456]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0xcc>
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6e      	ldr	r2, [pc, #440]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b6c      	ldr	r3, [pc, #432]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6b      	ldr	r2, [pc, #428]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fda8 	bl	8000ac0 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f74:	f7fe fda4 	bl	8000ac0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e21f      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0xdc>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe fd94 	bl	8000ac0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe fd90 	bl	8000ac0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e20b      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	4b57      	ldr	r3, [pc, #348]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x104>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d06f      	beq.n	80020aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fca:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d017      	beq.n	8002006 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fd6:	4b4d      	ldr	r3, [pc, #308]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d11c      	bne.n	8002034 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffa:	4b44      	ldr	r3, [pc, #272]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	4b41      	ldr	r3, [pc, #260]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x186>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1d3      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4937      	ldr	r1, [pc, #220]	; (800210c <HAL_RCC_OscConfig+0x274>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	e03a      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <HAL_RCC_OscConfig+0x278>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7fe fd3d 	bl	8000ac0 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204a:	f7fe fd39 	bl	8000ac0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e1b4      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCC_OscConfig+0x274>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <HAL_RCC_OscConfig+0x274>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4925      	ldr	r1, [pc, #148]	; (800210c <HAL_RCC_OscConfig+0x274>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_RCC_OscConfig+0x278>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fd1c 	bl	8000ac0 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe fd18 	bl	8000ac0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e193      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_RCC_OscConfig+0x274>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d036      	beq.n	8002124 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7fe fcfc 	bl	8000ac0 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020cc:	f7fe fcf8 	bl	8000ac0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e173      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x274>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x234>
 80020ea:	e01b      	b.n	8002124 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7fe fce5 	bl	8000ac0 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	e00e      	b.n	8002118 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fa:	f7fe fce1 	bl	8000ac0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d907      	bls.n	8002118 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e15c      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
 800210c:	40023800 	.word	0x40023800
 8002110:	42470000 	.word	0x42470000
 8002114:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002118:	4b8a      	ldr	r3, [pc, #552]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 800211a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ea      	bne.n	80020fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8097 	beq.w	8002260 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002136:	4b83      	ldr	r3, [pc, #524]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b7f      	ldr	r3, [pc, #508]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a7e      	ldr	r2, [pc, #504]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b7c      	ldr	r3, [pc, #496]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b79      	ldr	r3, [pc, #484]	; (8002348 <HAL_RCC_OscConfig+0x4b0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x4b0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x4b0>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7fe fca1 	bl	8000ac0 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7fe fc9d 	bl	8000ac0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e118      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x4b0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x31e>
 80021a8:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a65      	ldr	r2, [pc, #404]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x358>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x340>
 80021be:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a60      	ldr	r2, [pc, #384]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0x358>
 80021d8:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a59      	ldr	r2, [pc, #356]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80021ea:	f023 0304 	bic.w	r3, r3, #4
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe fc62 	bl	8000ac0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe fc5e 	bl	8000ac0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0d7      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0ee      	beq.n	8002200 <HAL_RCC_OscConfig+0x368>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe fc4c 	bl	8000ac0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7fe fc48 	bl	8000ac0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0c1      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ee      	bne.n	800222c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002254:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4a3a      	ldr	r2, [pc, #232]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80ad 	beq.w	80023c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226a:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b08      	cmp	r3, #8
 8002274:	d060      	beq.n	8002338 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d145      	bne.n	800230a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b33      	ldr	r3, [pc, #204]	; (800234c <HAL_RCC_OscConfig+0x4b4>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fc1c 	bl	8000ac0 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe fc18 	bl	8000ac0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e093      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	071b      	lsls	r3, r3, #28
 80022d6:	491b      	ldr	r1, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4b4>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7fe fbed 	bl	8000ac0 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fbe9 	bl	8000ac0 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e064      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x452>
 8002308:	e05c      	b.n	80023c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_RCC_OscConfig+0x4b4>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fbd6 	bl	8000ac0 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fbd2 	bl	8000ac0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e04d      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_OscConfig+0x4ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x480>
 8002336:	e045      	b.n	80023c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e040      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000
 800234c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <HAL_RCC_OscConfig+0x538>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d030      	beq.n	80023c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d129      	bne.n	80023c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d122      	bne.n	80023c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002388:	4293      	cmp	r3, r2
 800238a:	d119      	bne.n	80023c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	3b01      	subs	r3, #1
 800239a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d10f      	bne.n	80023c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e03f      	b.n	8002466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f9d4 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fe73 	bl	8003104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	d11d      	bne.n	80024c4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_UART_Receive_DMA+0x26>
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e016      	b.n	80024c6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Receive_DMA+0x38>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e00f      	b.n	80024c6 <HAL_UART_Receive_DMA+0x58>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fbc2 	bl	8002c44 <UART_Start_Receive_DMA>
 80024c0:	4603      	mov	r3, r0
 80024c2:	e000      	b.n	80024c6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0ba      	sub	sp, #232	; 0xe8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800250e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_UART_IRQHandler+0x66>
 8002522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fd2d 	bl	8002f8e <UART_Receive_IT>
      return;
 8002534:	e256      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80de 	beq.w	80026fc <HAL_UART_IRQHandler+0x22c>
 8002540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800254c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002550:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80d1 	beq.w	80026fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800255a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_UART_IRQHandler+0xae>
 8002566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_UART_IRQHandler+0xd2>
 800258a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0202 	orr.w	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_UART_IRQHandler+0xf6>
 80025ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <HAL_UART_IRQHandler+0x126>
 80025d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f043 0208 	orr.w	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 81ed 	beq.w	80029da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_UART_IRQHandler+0x14e>
 800260c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fcb8 	bl	8002f8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_UART_IRQHandler+0x17a>
 8002642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d04f      	beq.n	80026ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fbc0 	bl	8002dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d141      	bne.n	80026e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3314      	adds	r3, #20
 8002664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002674:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800268a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800268e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1d9      	bne.n	800265e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d013      	beq.n	80026da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	4a7d      	ldr	r2, [pc, #500]	; (80028ac <HAL_UART_IRQHandler+0x3dc>)
 80026b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fcb6 	bl	8001030 <HAL_DMA_Abort_IT>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d4:	4610      	mov	r0, r2
 80026d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e00e      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9a4 	bl	8002a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e00a      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9a0 	bl	8002a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e006      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f99c 	bl	8002a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026f6:	e170      	b.n	80029da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	bf00      	nop
    return;
 80026fa:	e16e      	b.n	80029da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 814a 	bne.w	800299a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8143 	beq.w	800299a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 813c 	beq.w	800299a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	f040 80b4 	bne.w	80028b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8140 	beq.w	80029de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002766:	429a      	cmp	r2, r3
 8002768:	f080 8139 	bcs.w	80029de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002772:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277e:	f000 8088 	beq.w	8002892 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800279c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1d9      	bne.n	8002782 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3314      	adds	r3, #20
 80027d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e1      	bne.n	80027ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800281a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3314      	adds	r3, #20
 800282a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800282e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002832:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800283c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e3      	bne.n	800280a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002862:	f023 0310 	bic.w	r3, r3, #16
 8002866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002874:	65ba      	str	r2, [r7, #88]	; 0x58
 8002876:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800287a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e3      	bne.n	8002850 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fb5f 	bl	8000f50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800289a:	b29b      	uxth	r3, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8ca 	bl	8002a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a8:	e099      	b.n	80029de <HAL_UART_IRQHandler+0x50e>
 80028aa:	bf00      	nop
 80028ac:	08002e97 	.word	0x08002e97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808b 	beq.w	80029e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8086 	beq.w	80029e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028fa:	647a      	str	r2, [r7, #68]	; 0x44
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e3      	bne.n	80028d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3314      	adds	r3, #20
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	623b      	str	r3, [r7, #32]
   return(result);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3314      	adds	r3, #20
 800292e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002932:	633a      	str	r2, [r7, #48]	; 0x30
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e3      	bne.n	800290e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	60fb      	str	r3, [r7, #12]
   return(result);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0310 	bic.w	r3, r3, #16
 800296a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	617b      	str	r3, [r7, #20]
   return(result);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e3      	bne.n	8002954 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f852 	bl	8002a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002998:	e023      	b.n	80029e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_UART_IRQHandler+0x4ea>
 80029a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa83 	bl	8002ebe <UART_Transmit_IT>
    return;
 80029b8:	e014      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00e      	beq.n	80029e4 <HAL_UART_IRQHandler+0x514>
 80029c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fac3 	bl	8002f5e <UART_EndTransmit_IT>
    return;
 80029d8:	e004      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
    return;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
      return;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
      return;
 80029e2:	bf00      	nop
  }
}
 80029e4:	37e8      	adds	r7, #232	; 0xe8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop

080029ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b09c      	sub	sp, #112	; 0x70
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d172      	bne.n	8002b56 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	2200      	movs	r2, #0
 8002a74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a96:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e5      	bne.n	8002a76 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3314      	adds	r3, #20
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	e853 3f00 	ldrex	r3, [r3]
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3314      	adds	r3, #20
 8002ac8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002aca:	647a      	str	r2, [r7, #68]	; 0x44
 8002acc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e5      	bne.n	8002aaa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	623b      	str	r3, [r7, #32]
   return(result);
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af4:	663b      	str	r3, [r7, #96]	; 0x60
 8002af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002afe:	633a      	str	r2, [r7, #48]	; 0x30
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e5      	bne.n	8002ade <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d119      	bne.n	8002b56 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f023 0310 	bic.w	r3, r3, #16
 8002b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b42:	61fa      	str	r2, [r7, #28]
 8002b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e5      	bne.n	8002b22 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d106      	bne.n	8002b6c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b62:	4619      	mov	r1, r3
 8002b64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b66:	f7ff ff69 	bl	8002a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b6a:	e002      	b.n	8002b72 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002b6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b6e:	f7ff ff47 	bl	8002a00 <HAL_UART_RxCpltCallback>
}
 8002b72:	bf00      	nop
 8002b74:	3770      	adds	r7, #112	; 0x70
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d108      	bne.n	8002ba2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7ff ff4e 	bl	8002a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ba0:	e002      	b.n	8002ba8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7ff ff36 	bl	8002a14 <HAL_UART_RxHalfCpltCallback>
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b21      	cmp	r3, #33	; 0x21
 8002be2:	d108      	bne.n	8002bf6 <UART_DMAError+0x46>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f8c5 	bl	8002d80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b22      	cmp	r3, #34	; 0x22
 8002c16:	d108      	bne.n	8002c2a <UART_DMAError+0x7a>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c24:	68b8      	ldr	r0, [r7, #8]
 8002c26:	f000 f8d3 	bl	8002dd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c36:	68b8      	ldr	r0, [r7, #8]
 8002c38:	f7ff fef6 	bl	8002a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b098      	sub	sp, #96	; 0x60
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2222      	movs	r2, #34	; 0x22
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <UART_Start_Receive_DMA+0x130>)
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	4a3f      	ldr	r2, [pc, #252]	; (8002d78 <UART_Start_Receive_DMA+0x134>)
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	4a3e      	ldr	r2, [pc, #248]	; (8002d7c <UART_Start_Receive_DMA+0x138>)
 8002c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	2200      	movs	r2, #0
 8002c8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	f7fe f8fc 	bl	8000ea0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d019      	beq.n	8002d02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e5      	bne.n	8002cce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	657b      	str	r3, [r7, #84]	; 0x54
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3314      	adds	r3, #20
 8002d20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d22:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	617b      	str	r3, [r7, #20]
   return(result);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d56:	627a      	str	r2, [r7, #36]	; 0x24
 8002d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	6a39      	ldr	r1, [r7, #32]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e5      	bne.n	8002d36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3760      	adds	r7, #96	; 0x60
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	08002a55 	.word	0x08002a55
 8002d78:	08002b7b 	.word	0x08002b7b
 8002d7c:	08002bb1 	.word	0x08002bb1

08002d80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	61ba      	str	r2, [r7, #24]
 8002daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	613b      	str	r3, [r7, #16]
   return(result);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002dc4:	bf00      	nop
 8002dc6:	3724      	adds	r7, #36	; 0x24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b095      	sub	sp, #84	; 0x54
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df8:	643a      	str	r2, [r7, #64]	; 0x40
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e5      	bne.n	8002dd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3314      	adds	r3, #20
 8002e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e5      	bne.n	8002e0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d119      	bne.n	8002e7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	e853 3f00 	ldrex	r3, [r3]
 8002e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f023 0310 	bic.w	r3, r3, #16
 8002e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	330c      	adds	r3, #12
 8002e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e68:	61ba      	str	r2, [r7, #24]
 8002e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	e841 2300 	strex	r3, r2, [r1]
 8002e74:	613b      	str	r3, [r7, #16]
   return(result);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e5      	bne.n	8002e48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e8a:	bf00      	nop
 8002e8c:	3754      	adds	r7, #84	; 0x54
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fdb9 	bl	8002a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b21      	cmp	r3, #33	; 0x21
 8002ed0:	d13e      	bne.n	8002f50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d114      	bne.n	8002f06 <UART_Transmit_IT+0x48>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d110      	bne.n	8002f06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	1c9a      	adds	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	621a      	str	r2, [r3, #32]
 8002f04:	e008      	b.n	8002f18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	1c59      	adds	r1, r3, #1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6211      	str	r1, [r2, #32]
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e000      	b.n	8002f52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
  }
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fd34 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b08c      	sub	sp, #48	; 0x30
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b22      	cmp	r3, #34	; 0x22
 8002fa0:	f040 80ab 	bne.w	80030fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fac:	d117      	bne.n	8002fde <UART_Receive_IT+0x50>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d113      	bne.n	8002fde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	1c9a      	adds	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
 8002fdc:	e026      	b.n	800302c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff0:	d007      	beq.n	8003002 <UART_Receive_IT+0x74>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <UART_Receive_IT+0x82>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e008      	b.n	8003022 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800301c:	b2da      	uxtb	r2, r3
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29b      	uxth	r3, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4619      	mov	r1, r3
 800303a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800303c:	2b00      	cmp	r3, #0
 800303e:	d15a      	bne.n	80030f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0220 	bic.w	r2, r2, #32
 800304e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	2b01      	cmp	r3, #1
 800307e:	d135      	bne.n	80030ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	613b      	str	r3, [r7, #16]
   return(result);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f023 0310 	bic.w	r3, r3, #16
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	623a      	str	r2, [r7, #32]
 80030a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	69f9      	ldr	r1, [r7, #28]
 80030ac:	6a3a      	ldr	r2, [r7, #32]
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d10a      	bne.n	80030de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fca9 	bl	8002a3c <HAL_UARTEx_RxEventCallback>
 80030ea:	e002      	b.n	80030f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fc87 	bl	8002a00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e002      	b.n	80030fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3730      	adds	r7, #48	; 0x30
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0c0      	sub	sp, #256	; 0x100
 800310a:	af00      	add	r7, sp, #0
 800310c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	68d9      	ldr	r1, [r3, #12]
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	ea40 0301 	orr.w	r3, r0, r1
 800312c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	431a      	orrs	r2, r3
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800315c:	f021 010c 	bic.w	r1, r1, #12
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316a:	430b      	orrs	r3, r1
 800316c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	ea40 0301 	orr.w	r3, r0, r1
 800318a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b8f      	ldr	r3, [pc, #572]	; (80033d0 <UART_SetConfig+0x2cc>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0xa0>
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <UART_SetConfig+0x2d0>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d104      	bne.n	80031ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a4:	f7fe fcba 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 80031a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031ac:	e003      	b.n	80031b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ae:	f7fe fca1 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 80031b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c0:	f040 810c 	bne.w	80033dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80031de:	415b      	adcs	r3, r3
 80031e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031e6:	4621      	mov	r1, r4
 80031e8:	eb12 0801 	adds.w	r8, r2, r1
 80031ec:	4629      	mov	r1, r5
 80031ee:	eb43 0901 	adc.w	r9, r3, r1
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003206:	4690      	mov	r8, r2
 8003208:	4699      	mov	r9, r3
 800320a:	4623      	mov	r3, r4
 800320c:	eb18 0303 	adds.w	r3, r8, r3
 8003210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003214:	462b      	mov	r3, r5
 8003216:	eb49 0303 	adc.w	r3, r9, r3
 800321a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800322a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800322e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003232:	460b      	mov	r3, r1
 8003234:	18db      	adds	r3, r3, r3
 8003236:	653b      	str	r3, [r7, #80]	; 0x50
 8003238:	4613      	mov	r3, r2
 800323a:	eb42 0303 	adc.w	r3, r2, r3
 800323e:	657b      	str	r3, [r7, #84]	; 0x54
 8003240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003248:	f7fc ffdc 	bl	8000204 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003252:	fba3 2302 	umull	r2, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011c      	lsls	r4, r3, #4
 800325a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	64b9      	str	r1, [r7, #72]	; 0x48
 8003274:	415b      	adcs	r3, r3
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800327c:	4641      	mov	r1, r8
 800327e:	eb12 0a01 	adds.w	sl, r2, r1
 8003282:	4649      	mov	r1, r9
 8003284:	eb43 0b01 	adc.w	fp, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	4692      	mov	sl, r2
 800329e:	469b      	mov	fp, r3
 80032a0:	4643      	mov	r3, r8
 80032a2:	eb1a 0303 	adds.w	r3, sl, r3
 80032a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032aa:	464b      	mov	r3, r9
 80032ac:	eb4b 0303 	adc.w	r3, fp, r3
 80032b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c8:	460b      	mov	r3, r1
 80032ca:	18db      	adds	r3, r3, r3
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
 80032ce:	4613      	mov	r3, r2
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	647b      	str	r3, [r7, #68]	; 0x44
 80032d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032de:	f7fc ff91 	bl	8000204 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <UART_SetConfig+0x2d4>)
 80032ea:	fba3 2301 	umull	r2, r3, r3, r1
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2264      	movs	r2, #100	; 0x64
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	1acb      	subs	r3, r1, r3
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003300:	fba3 2302 	umull	r2, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800330c:	441c      	add	r4, r3
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800331c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	1891      	adds	r1, r2, r2
 8003326:	63b9      	str	r1, [r7, #56]	; 0x38
 8003328:	415b      	adcs	r3, r3
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003330:	4641      	mov	r1, r8
 8003332:	1851      	adds	r1, r2, r1
 8003334:	6339      	str	r1, [r7, #48]	; 0x30
 8003336:	4649      	mov	r1, r9
 8003338:	414b      	adcs	r3, r1
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003348:	4659      	mov	r1, fp
 800334a:	00cb      	lsls	r3, r1, #3
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003352:	4651      	mov	r1, sl
 8003354:	00ca      	lsls	r2, r1, #3
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	4603      	mov	r3, r0
 800335c:	4642      	mov	r2, r8
 800335e:	189b      	adds	r3, r3, r2
 8003360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003364:	464b      	mov	r3, r9
 8003366:	460a      	mov	r2, r1
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800337c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003384:	460b      	mov	r3, r1
 8003386:	18db      	adds	r3, r3, r3
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	4613      	mov	r3, r2
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800339a:	f7fc ff33 	bl	8000204 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4422      	add	r2, r4
 80033ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033cc:	e105      	b.n	80035da <UART_SetConfig+0x4d6>
 80033ce:	bf00      	nop
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033ee:	4642      	mov	r2, r8
 80033f0:	464b      	mov	r3, r9
 80033f2:	1891      	adds	r1, r2, r2
 80033f4:	6239      	str	r1, [r7, #32]
 80033f6:	415b      	adcs	r3, r3
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fe:	4641      	mov	r1, r8
 8003400:	1854      	adds	r4, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb43 0501 	adc.w	r5, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003424:	464b      	mov	r3, r9
 8003426:	eb45 0303 	adc.w	r3, r5, r3
 800342a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800344a:	4629      	mov	r1, r5
 800344c:	008b      	lsls	r3, r1, #2
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003454:	4621      	mov	r1, r4
 8003456:	008a      	lsls	r2, r1, #2
 8003458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800345c:	f7fc fed2 	bl	8000204 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003466:	fba3 2302 	umull	r2, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	011c      	lsls	r4, r3, #4
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800347c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	61b9      	str	r1, [r7, #24]
 8003488:	415b      	adcs	r3, r3
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6139      	str	r1, [r7, #16]
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034e8:	4649      	mov	r1, r9
 80034ea:	008b      	lsls	r3, r1, #2
 80034ec:	4641      	mov	r1, r8
 80034ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f2:	4641      	mov	r1, r8
 80034f4:	008a      	lsls	r2, r1, #2
 80034f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034fa:	f7fc fe83 	bl	8000204 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003522:	441c      	add	r4, r3
 8003524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003528:	2200      	movs	r2, #0
 800352a:	673b      	str	r3, [r7, #112]	; 0x70
 800352c:	677a      	str	r2, [r7, #116]	; 0x74
 800352e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003532:	4642      	mov	r2, r8
 8003534:	464b      	mov	r3, r9
 8003536:	1891      	adds	r1, r2, r2
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	415b      	adcs	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003542:	4641      	mov	r1, r8
 8003544:	1851      	adds	r1, r2, r1
 8003546:	6039      	str	r1, [r7, #0]
 8003548:	4649      	mov	r1, r9
 800354a:	414b      	adcs	r3, r1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355a:	4659      	mov	r1, fp
 800355c:	00cb      	lsls	r3, r1, #3
 800355e:	4651      	mov	r1, sl
 8003560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003564:	4651      	mov	r1, sl
 8003566:	00ca      	lsls	r2, r1, #3
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	4603      	mov	r3, r0
 800356e:	4642      	mov	r2, r8
 8003570:	189b      	adds	r3, r3, r2
 8003572:	66bb      	str	r3, [r7, #104]	; 0x68
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	663b      	str	r3, [r7, #96]	; 0x60
 8003588:	667a      	str	r2, [r7, #100]	; 0x64
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003596:	4649      	mov	r1, r9
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	4641      	mov	r1, r8
 800359c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a0:	4641      	mov	r1, r8
 80035a2:	008a      	lsls	r2, r1, #2
 80035a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035a8:	f7fc fe2c 	bl	8000204 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 1302 	umull	r1, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2164      	movs	r1, #100	; 0x64
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	; 0x32
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4422      	add	r2, r4
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	bf00      	nop
 80035dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	51eb851f 	.word	0x51eb851f

080035ec <__libc_init_array>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4d0d      	ldr	r5, [pc, #52]	; (8003624 <__libc_init_array+0x38>)
 80035f0:	4c0d      	ldr	r4, [pc, #52]	; (8003628 <__libc_init_array+0x3c>)
 80035f2:	1b64      	subs	r4, r4, r5
 80035f4:	10a4      	asrs	r4, r4, #2
 80035f6:	2600      	movs	r6, #0
 80035f8:	42a6      	cmp	r6, r4
 80035fa:	d109      	bne.n	8003610 <__libc_init_array+0x24>
 80035fc:	4d0b      	ldr	r5, [pc, #44]	; (800362c <__libc_init_array+0x40>)
 80035fe:	4c0c      	ldr	r4, [pc, #48]	; (8003630 <__libc_init_array+0x44>)
 8003600:	f000 f820 	bl	8003644 <_init>
 8003604:	1b64      	subs	r4, r4, r5
 8003606:	10a4      	asrs	r4, r4, #2
 8003608:	2600      	movs	r6, #0
 800360a:	42a6      	cmp	r6, r4
 800360c:	d105      	bne.n	800361a <__libc_init_array+0x2e>
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	f855 3b04 	ldr.w	r3, [r5], #4
 8003614:	4798      	blx	r3
 8003616:	3601      	adds	r6, #1
 8003618:	e7ee      	b.n	80035f8 <__libc_init_array+0xc>
 800361a:	f855 3b04 	ldr.w	r3, [r5], #4
 800361e:	4798      	blx	r3
 8003620:	3601      	adds	r6, #1
 8003622:	e7f2      	b.n	800360a <__libc_init_array+0x1e>
 8003624:	08003684 	.word	0x08003684
 8003628:	08003684 	.word	0x08003684
 800362c:	08003684 	.word	0x08003684
 8003630:	08003688 	.word	0x08003688

08003634 <memset>:
 8003634:	4402      	add	r2, r0
 8003636:	4603      	mov	r3, r0
 8003638:	4293      	cmp	r3, r2
 800363a:	d100      	bne.n	800363e <memset+0xa>
 800363c:	4770      	bx	lr
 800363e:	f803 1b01 	strb.w	r1, [r3], #1
 8003642:	e7f9      	b.n	8003638 <memset+0x4>

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	bf00      	nop
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr
