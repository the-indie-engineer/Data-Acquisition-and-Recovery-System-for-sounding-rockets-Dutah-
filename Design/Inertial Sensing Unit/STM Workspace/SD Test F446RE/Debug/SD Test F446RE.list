
SD Test F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007394  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba4  08007ba4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c8  20000088  08007c34  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002450  08007c34  00022450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cab9  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002521  00000000  00000000  0002cb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002fc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a1f  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b87  00000000  00000000  0005409f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cad9e  00000000  00000000  00064c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f9c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  0012fa14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800754c 	.word	0x0800754c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800754c 	.word	0x0800754c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <SELECT+0x1c>)
 80005c0:	f001 fc16 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f001 f949 	bl	800185c <HAL_Delay>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400

080005d4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <DESELECT+0x1c>)
 80005e0:	f001 fc06 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 f939 	bl	800185c <HAL_Delay>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400

080005f4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005fe:	bf00      	nop
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <SPI_TxByte+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	2b02      	cmp	r3, #2
 800060c:	d1f8      	bne.n	8000600 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800060e:	1df9      	adds	r1, r7, #7
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <SPI_TxByte+0x30>)
 8000616:	f002 fa92 	bl	8002b3e <HAL_SPI_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000a8 	.word	0x200000a8

08000628 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000634:	bf00      	nop
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <SPI_TxBuffer+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f003 0302 	and.w	r3, r3, #2
 8000640:	2b02      	cmp	r3, #2
 8000642:	d1f8      	bne.n	8000636 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000644:	887a      	ldrh	r2, [r7, #2]
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <SPI_TxBuffer+0x30>)
 800064c:	f002 fa77 	bl	8002b3e <HAL_SPI_Transmit>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000a8 	.word	0x200000a8

0800065c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000662:	23ff      	movs	r3, #255	; 0xff
 8000664:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000666:	bf00      	nop
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <SPI_RxByte+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	2b02      	cmp	r3, #2
 8000674:	d1f8      	bne.n	8000668 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000676:	1dba      	adds	r2, r7, #6
 8000678:	1df9      	adds	r1, r7, #7
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <SPI_RxByte+0x34>)
 8000682:	f002 fb98 	bl	8002db6 <HAL_SPI_TransmitReceive>

	return data;
 8000686:	79bb      	ldrb	r3, [r7, #6]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000a8 	.word	0x200000a8

08000694 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800069c:	f7ff ffde 	bl	800065c <SPI_RxByte>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	701a      	strb	r2, [r3, #0]
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <SD_ReadyWait+0x30>)
 80006b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006bc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006be:	f7ff ffcd 	bl	800065c <SPI_RxByte>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2bff      	cmp	r3, #255	; 0xff
 80006ca:	d004      	beq.n	80006d6 <SD_ReadyWait+0x26>
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SD_ReadyWait+0x30>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f3      	bne.n	80006be <SD_ReadyWait+0xe>

	return res;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200021f8 	.word	0x200021f8

080006e4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006ee:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006f0:	f7ff ff70 	bl	80005d4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	e005      	b.n	8000706 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	f7ff ff7a 	bl	80005f4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b09      	cmp	r3, #9
 800070a:	ddf6      	ble.n	80006fa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800070c:	f7ff ff52 	bl	80005b4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000710:	2340      	movs	r3, #64	; 0x40
 8000712:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000724:	2395      	movs	r3, #149	; 0x95
 8000726:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000728:	463b      	mov	r3, r7
 800072a:	2106      	movs	r1, #6
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff7b 	bl	8000628 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000732:	e002      	b.n	800073a <SD_PowerOn+0x56>
	{
		cnt--;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3b01      	subs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800073a:	f7ff ff8f 	bl	800065c <SPI_RxByte>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d002      	beq.n	800074a <SD_PowerOn+0x66>
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f4      	bne.n	8000734 <SD_PowerOn+0x50>
	}

	DESELECT();
 800074a:	f7ff ff43 	bl	80005d4 <DESELECT>
	SPI_TxByte(0XFF);
 800074e:	20ff      	movs	r0, #255	; 0xff
 8000750:	f7ff ff50 	bl	80005f4 <SPI_TxByte>

	PowerFlag = 1;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <SD_PowerOn+0x80>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000a5 	.word	0x200000a5

08000768 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <SD_PowerOff+0x14>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	200000a5 	.word	0x200000a5

08000780 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <SD_CheckPower+0x14>)
 8000786:	781b      	ldrb	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200000a5 	.word	0x200000a5

08000798 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <SD_RxDataBlock+0x5c>)
 80007a4:	22c8      	movs	r2, #200	; 0xc8
 80007a6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007a8:	f7ff ff58 	bl	800065c <SPI_RxByte>
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2bff      	cmp	r3, #255	; 0xff
 80007b4:	d104      	bne.n	80007c0 <SD_RxDataBlock+0x28>
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <SD_RxDataBlock+0x5c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f3      	bne.n	80007a8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2bfe      	cmp	r3, #254	; 0xfe
 80007c4:	d001      	beq.n	80007ca <SD_RxDataBlock+0x32>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e00f      	b.n	80007ea <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5f 	bl	8000694 <SPI_RxBytePtr>
	} while(len--);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	603a      	str	r2, [r7, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f4      	bne.n	80007ca <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007e0:	f7ff ff3c 	bl	800065c <SPI_RxByte>
	SPI_RxByte();
 80007e4:	f7ff ff3a 	bl	800065c <SPI_RxByte>

	return TRUE;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200021f6 	.word	0x200021f6

080007f8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000808:	f7ff ff52 	bl	80006b0 <SD_ReadyWait>
 800080c:	4603      	mov	r3, r0
 800080e:	2bff      	cmp	r3, #255	; 0xff
 8000810:	d001      	beq.n	8000816 <SD_TxDataBlock+0x1e>
 8000812:	2300      	movs	r3, #0
 8000814:	e02f      	b.n	8000876 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff feeb 	bl	80005f4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	2bfd      	cmp	r3, #253	; 0xfd
 8000822:	d020      	beq.n	8000866 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fefd 	bl	8000628 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800082e:	f7ff ff15 	bl	800065c <SPI_RxByte>
		SPI_RxByte();
 8000832:	f7ff ff13 	bl	800065c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000836:	e00b      	b.n	8000850 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000838:	f7ff ff10 	bl	800065c <SPI_RxByte>
 800083c:	4603      	mov	r3, r0
 800083e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	2b05      	cmp	r3, #5
 8000848:	d006      	beq.n	8000858 <SD_TxDataBlock+0x60>
			i++;
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	3301      	adds	r3, #1
 800084e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	2b40      	cmp	r3, #64	; 0x40
 8000854:	d9f0      	bls.n	8000838 <SD_TxDataBlock+0x40>
 8000856:	e000      	b.n	800085a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000858:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800085a:	bf00      	nop
 800085c:	f7ff fefe 	bl	800065c <SPI_RxByte>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0fa      	beq.n	800085c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	f003 031f 	and.w	r3, r3, #31
 800086c:	2b05      	cmp	r3, #5
 800086e:	d101      	bne.n	8000874 <SD_TxDataBlock+0x7c>
 8000870:	2301      	movs	r3, #1
 8000872:	e000      	b.n	8000876 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	6039      	str	r1, [r7, #0]
 8000888:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800088a:	f7ff ff11 	bl	80006b0 <SD_ReadyWait>
 800088e:	4603      	mov	r3, r0
 8000890:	2bff      	cmp	r3, #255	; 0xff
 8000892:	d001      	beq.n	8000898 <SD_SendCmd+0x1a>
 8000894:	23ff      	movs	r3, #255	; 0xff
 8000896:	e042      	b.n	800091e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff feaa 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	0e1b      	lsrs	r3, r3, #24
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fea4 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	0c1b      	lsrs	r3, r3, #16
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe9e 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe98 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe93 	bl	80005f4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	d102      	bne.n	80008da <SD_SendCmd+0x5c>
 80008d4:	2395      	movs	r3, #149	; 0x95
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e007      	b.n	80008ea <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b48      	cmp	r3, #72	; 0x48
 80008de:	d102      	bne.n	80008e6 <SD_SendCmd+0x68>
 80008e0:	2387      	movs	r3, #135	; 0x87
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e001      	b.n	80008ea <SD_SendCmd+0x6c>
	else crc = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe81 	bl	80005f4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b4c      	cmp	r3, #76	; 0x4c
 80008f6:	d101      	bne.n	80008fc <SD_SendCmd+0x7e>
 80008f8:	f7ff feb0 	bl	800065c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008fc:	230a      	movs	r3, #10
 80008fe:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000900:	f7ff feac 	bl	800065c <SPI_RxByte>
 8000904:	4603      	mov	r3, r0
 8000906:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da05      	bge.n	800091c <SD_SendCmd+0x9e>
 8000910:	7bbb      	ldrb	r3, [r7, #14]
 8000912:	3b01      	subs	r3, #1
 8000914:	73bb      	strb	r3, [r7, #14]
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1f1      	bne.n	8000900 <SD_SendCmd+0x82>

	return res;
 800091c:	7b7b      	ldrb	r3, [r7, #13]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SD_disk_initialize+0x14>
 8000938:	2301      	movs	r3, #1
 800093a:	e0d6      	b.n	8000aea <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800093c:	4b6d      	ldr	r3, [pc, #436]	; (8000af4 <SD_disk_initialize+0x1cc>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <SD_disk_initialize+0x2a>
 800094a:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <SD_disk_initialize+0x1cc>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	e0cb      	b.n	8000aea <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000952:	f7ff fec7 	bl	80006e4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000956:	f7ff fe2d 	bl	80005b4 <SELECT>

	/* check disk type */
	type = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800095e:	2100      	movs	r1, #0
 8000960:	2040      	movs	r0, #64	; 0x40
 8000962:	f7ff ff8c 	bl	800087e <SD_SendCmd>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	f040 80a6 	bne.w	8000aba <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800096e:	4b62      	ldr	r3, [pc, #392]	; (8000af8 <SD_disk_initialize+0x1d0>)
 8000970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000974:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000976:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800097a:	2048      	movs	r0, #72	; 0x48
 800097c:	f7ff ff7f 	bl	800087e <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d158      	bne.n	8000a38 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	e00c      	b.n	80009a6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800098c:	7bfc      	ldrb	r4, [r7, #15]
 800098e:	f7ff fe65 	bl	800065c <SPI_RxByte>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	f104 0310 	add.w	r3, r4, #16
 800099a:	443b      	add	r3, r7
 800099c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d9ef      	bls.n	800098c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009ac:	7abb      	ldrb	r3, [r7, #10]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	f040 8083 	bne.w	8000aba <SD_disk_initialize+0x192>
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	2baa      	cmp	r3, #170	; 0xaa
 80009b8:	d17f      	bne.n	8000aba <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009ba:	2100      	movs	r1, #0
 80009bc:	2077      	movs	r0, #119	; 0x77
 80009be:	f7ff ff5e 	bl	800087e <SD_SendCmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d807      	bhi.n	80009d8 <SD_disk_initialize+0xb0>
 80009c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009cc:	2069      	movs	r0, #105	; 0x69
 80009ce:	f7ff ff56 	bl	800087e <SD_SendCmd>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <SD_disk_initialize+0x1d0>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1eb      	bne.n	80009ba <SD_disk_initialize+0x92>
 80009e2:	e000      	b.n	80009e6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009e6:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <SD_disk_initialize+0x1d0>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d064      	beq.n	8000aba <SD_disk_initialize+0x192>
 80009f0:	2100      	movs	r1, #0
 80009f2:	207a      	movs	r0, #122	; 0x7a
 80009f4:	f7ff ff43 	bl	800087e <SD_SendCmd>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d15d      	bne.n	8000aba <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e00c      	b.n	8000a1e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000a04:	7bfc      	ldrb	r4, [r7, #15]
 8000a06:	f7ff fe29 	bl	800065c <SPI_RxByte>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f104 0310 	add.w	r3, r4, #16
 8000a12:	443b      	add	r3, r7
 8000a14:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d9ef      	bls.n	8000a04 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SD_disk_initialize+0x10a>
 8000a2e:	230c      	movs	r3, #12
 8000a30:	e000      	b.n	8000a34 <SD_disk_initialize+0x10c>
 8000a32:	2304      	movs	r3, #4
 8000a34:	73bb      	strb	r3, [r7, #14]
 8000a36:	e040      	b.n	8000aba <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2077      	movs	r0, #119	; 0x77
 8000a3c:	f7ff ff1f 	bl	800087e <SD_SendCmd>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d808      	bhi.n	8000a58 <SD_disk_initialize+0x130>
 8000a46:	2100      	movs	r1, #0
 8000a48:	2069      	movs	r0, #105	; 0x69
 8000a4a:	f7ff ff18 	bl	800087e <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d801      	bhi.n	8000a58 <SD_disk_initialize+0x130>
 8000a54:	2302      	movs	r3, #2
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x132>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d10e      	bne.n	8000a80 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a62:	2100      	movs	r1, #0
 8000a64:	2077      	movs	r0, #119	; 0x77
 8000a66:	f7ff ff0a 	bl	800087e <SD_SendCmd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d80e      	bhi.n	8000a8e <SD_disk_initialize+0x166>
 8000a70:	2100      	movs	r1, #0
 8000a72:	2069      	movs	r0, #105	; 0x69
 8000a74:	f7ff ff03 	bl	800087e <SD_SendCmd>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <SD_disk_initialize+0x166>
 8000a7e:	e00d      	b.n	8000a9c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a80:	2100      	movs	r1, #0
 8000a82:	2041      	movs	r0, #65	; 0x41
 8000a84:	f7ff fefb 	bl	800087e <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d005      	beq.n	8000a9a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <SD_disk_initialize+0x1d0>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1e1      	bne.n	8000a5c <SD_disk_initialize+0x134>
 8000a98:	e000      	b.n	8000a9c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a9a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <SD_disk_initialize+0x1d0>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <SD_disk_initialize+0x18e>
 8000aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aaa:	2050      	movs	r0, #80	; 0x50
 8000aac:	f7ff fee7 	bl	800087e <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SD_disk_initialize+0x192>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <SD_disk_initialize+0x1d4>)
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ac0:	f7ff fd88 	bl	80005d4 <DESELECT>
	SPI_RxByte();
 8000ac4:	f7ff fdca 	bl	800065c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <SD_disk_initialize+0x1cc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SD_disk_initialize+0x1cc>)
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e001      	b.n	8000ae4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ae0:	f7ff fe42 	bl	8000768 <SD_PowerOff>
	}

	return Stat;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <SD_disk_initialize+0x1cc>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000
 8000af8:	200021f6 	.word	0x200021f6
 8000afc:	200000a4 	.word	0x200000a4

08000b00 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SD_disk_status+0x14>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e002      	b.n	8000b1a <SD_disk_status+0x1a>
	return Stat;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SD_disk_status+0x28>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000000 	.word	0x20000000

08000b2c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	4603      	mov	r3, r0
 8000b3a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <SD_disk_read+0x1c>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <SD_disk_read+0x20>
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e051      	b.n	8000bf0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <SD_disk_read+0xcc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SD_disk_read+0x32>
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e048      	b.n	8000bf0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <SD_disk_read+0xd0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <SD_disk_read+0x44>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b70:	f7ff fd20 	bl	80005b4 <SELECT>

	if (count == 1)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d111      	bne.n	8000b9e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	2051      	movs	r0, #81	; 0x51
 8000b7e:	f7ff fe7e 	bl	800087e <SD_SendCmd>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d129      	bne.n	8000bdc <SD_disk_read+0xb0>
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	68b8      	ldr	r0, [r7, #8]
 8000b8e:	f7ff fe03 	bl	8000798 <SD_RxDataBlock>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d021      	beq.n	8000bdc <SD_disk_read+0xb0>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	e01e      	b.n	8000bdc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2052      	movs	r0, #82	; 0x52
 8000ba2:	f7ff fe6c 	bl	800087e <SD_SendCmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d117      	bne.n	8000bdc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	68b8      	ldr	r0, [r7, #8]
 8000bb2:	f7ff fdf1 	bl	8000798 <SD_RxDataBlock>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00a      	beq.n	8000bd2 <SD_disk_read+0xa6>
				buff += 512;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1ed      	bne.n	8000bac <SD_disk_read+0x80>
 8000bd0:	e000      	b.n	8000bd4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bd2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	204c      	movs	r0, #76	; 0x4c
 8000bd8:	f7ff fe51 	bl	800087e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bdc:	f7ff fcfa 	bl	80005d4 <DESELECT>
	SPI_RxByte();
 8000be0:	f7ff fd3c 	bl	800065c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	200000a4 	.word	0x200000a4

08000c00 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <SD_disk_write+0x1c>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <SD_disk_write+0x20>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	e06b      	b.n	8000cf8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <SD_disk_write+0x100>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SD_disk_write+0x32>
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e062      	b.n	8000cf8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <SD_disk_write+0x100>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SD_disk_write+0x44>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e059      	b.n	8000cf8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c44:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <SD_disk_write+0x104>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <SD_disk_write+0x56>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c56:	f7ff fcad 	bl	80005b4 <SELECT>

	if (count == 1)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d110      	bne.n	8000c82 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	2058      	movs	r0, #88	; 0x58
 8000c64:	f7ff fe0b 	bl	800087e <SD_SendCmd>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d13a      	bne.n	8000ce4 <SD_disk_write+0xe4>
 8000c6e:	21fe      	movs	r1, #254	; 0xfe
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f7ff fdc1 	bl	80007f8 <SD_TxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d033      	beq.n	8000ce4 <SD_disk_write+0xe4>
			count = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	e030      	b.n	8000ce4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <SD_disk_write+0x104>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2077      	movs	r0, #119	; 0x77
 8000c92:	f7ff fdf4 	bl	800087e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c96:	6839      	ldr	r1, [r7, #0]
 8000c98:	2057      	movs	r0, #87	; 0x57
 8000c9a:	f7ff fdf0 	bl	800087e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2059      	movs	r0, #89	; 0x59
 8000ca2:	f7ff fdec 	bl	800087e <SD_SendCmd>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d11b      	bne.n	8000ce4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cac:	21fc      	movs	r1, #252	; 0xfc
 8000cae:	68b8      	ldr	r0, [r7, #8]
 8000cb0:	f7ff fda2 	bl	80007f8 <SD_TxDataBlock>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00a      	beq.n	8000cd0 <SD_disk_write+0xd0>
				buff += 512;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cc0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1ee      	bne.n	8000cac <SD_disk_write+0xac>
 8000cce:	e000      	b.n	8000cd2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cd0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cd2:	21fd      	movs	r1, #253	; 0xfd
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff fd8f 	bl	80007f8 <SD_TxDataBlock>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000ce4:	f7ff fc76 	bl	80005d4 <DESELECT>
	SPI_RxByte();
 8000ce8:	f7ff fcb8 	bl	800065c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000000 	.word	0x20000000
 8000d04:	200000a4 	.word	0x200000a4

08000d08 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b08b      	sub	sp, #44	; 0x2c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	603a      	str	r2, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	460b      	mov	r3, r1
 8000d16:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SD_disk_ioctl+0x1e>
 8000d22:	2304      	movs	r3, #4
 8000d24:	e115      	b.n	8000f52 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d124      	bne.n	8000d7c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d012      	beq.n	8000d60 <SD_disk_ioctl+0x58>
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	dc1a      	bgt.n	8000d74 <SD_disk_ioctl+0x6c>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <SD_disk_ioctl+0x40>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d006      	beq.n	8000d54 <SD_disk_ioctl+0x4c>
 8000d46:	e015      	b.n	8000d74 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d48:	f7ff fd0e 	bl	8000768 <SD_PowerOff>
			res = RES_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d52:	e0fc      	b.n	8000f4e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d54:	f7ff fcc6 	bl	80006e4 <SD_PowerOn>
			res = RES_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d5e:	e0f6      	b.n	8000f4e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	1c5c      	adds	r4, r3, #1
 8000d64:	f7ff fd0c 	bl	8000780 <SD_CheckPower>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d72:	e0ec      	b.n	8000f4e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d74:	2304      	movs	r3, #4
 8000d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d7a:	e0e8      	b.n	8000f4e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d7c:	4b77      	ldr	r3, [pc, #476]	; (8000f5c <SD_disk_ioctl+0x254>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SD_disk_ioctl+0x86>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e0e1      	b.n	8000f52 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d8e:	f7ff fc11 	bl	80005b4 <SELECT>

		switch (ctrl)
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	2b0d      	cmp	r3, #13
 8000d96:	f200 80cb 	bhi.w	8000f30 <SD_disk_ioctl+0x228>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <SD_disk_ioctl+0x98>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000e9b 	.word	0x08000e9b
 8000da4:	08000dd9 	.word	0x08000dd9
 8000da8:	08000e8b 	.word	0x08000e8b
 8000dac:	08000f31 	.word	0x08000f31
 8000db0:	08000f31 	.word	0x08000f31
 8000db4:	08000f31 	.word	0x08000f31
 8000db8:	08000f31 	.word	0x08000f31
 8000dbc:	08000f31 	.word	0x08000f31
 8000dc0:	08000f31 	.word	0x08000f31
 8000dc4:	08000f31 	.word	0x08000f31
 8000dc8:	08000f31 	.word	0x08000f31
 8000dcc:	08000ead 	.word	0x08000ead
 8000dd0:	08000ed1 	.word	0x08000ed1
 8000dd4:	08000ef5 	.word	0x08000ef5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2049      	movs	r0, #73	; 0x49
 8000ddc:	f7ff fd4f 	bl	800087e <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 80a8 	bne.w	8000f38 <SD_disk_ioctl+0x230>
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2110      	movs	r1, #16
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fcd2 	bl	8000798 <SD_RxDataBlock>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 809e 	beq.w	8000f38 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	099b      	lsrs	r3, r3, #6
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10e      	bne.n	8000e24 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	7d3b      	ldrb	r3, [r7, #20]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	3301      	adds	r3, #1
 8000e18:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e1a:	8bfb      	ldrh	r3, [r7, #30]
 8000e1c:	029a      	lsls	r2, r3, #10
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e02e      	b.n	8000e82 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e24:	7c7b      	ldrb	r3, [r7, #17]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	7dbb      	ldrb	r3, [r7, #22]
 8000e2e:	09db      	lsrs	r3, r3, #7
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	7d7b      	ldrb	r3, [r7, #21]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f003 0306 	and.w	r3, r3, #6
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3302      	adds	r3, #2
 8000e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e4c:	7d3b      	ldrb	r3, [r7, #20]
 8000e4e:	099b      	lsrs	r3, r3, #6
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	7cbb      	ldrb	r3, [r7, #18]
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e74:	8bfa      	ldrh	r2, [r7, #30]
 8000e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e7a:	3b09      	subs	r3, #9
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e88:	e056      	b.n	8000f38 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e98:	e055      	b.n	8000f46 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e9a:	f7ff fc09 	bl	80006b0 <SD_ReadyWait>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2bff      	cmp	r3, #255	; 0xff
 8000ea2:	d14b      	bne.n	8000f3c <SD_disk_ioctl+0x234>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eaa:	e047      	b.n	8000f3c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eac:	2100      	movs	r1, #0
 8000eae:	2049      	movs	r0, #73	; 0x49
 8000eb0:	f7ff fce5 	bl	800087e <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d142      	bne.n	8000f40 <SD_disk_ioctl+0x238>
 8000eba:	2110      	movs	r1, #16
 8000ebc:	6a38      	ldr	r0, [r7, #32]
 8000ebe:	f7ff fc6b 	bl	8000798 <SD_RxDataBlock>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d03b      	beq.n	8000f40 <SD_disk_ioctl+0x238>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ece:	e037      	b.n	8000f40 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	204a      	movs	r0, #74	; 0x4a
 8000ed4:	f7ff fcd3 	bl	800087e <SD_SendCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d132      	bne.n	8000f44 <SD_disk_ioctl+0x23c>
 8000ede:	2110      	movs	r1, #16
 8000ee0:	6a38      	ldr	r0, [r7, #32]
 8000ee2:	f7ff fc59 	bl	8000798 <SD_RxDataBlock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d02b      	beq.n	8000f44 <SD_disk_ioctl+0x23c>
 8000eec:	2300      	movs	r3, #0
 8000eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ef2:	e027      	b.n	8000f44 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	207a      	movs	r0, #122	; 0x7a
 8000ef8:	f7ff fcc1 	bl	800087e <SD_SendCmd>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d116      	bne.n	8000f30 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f08:	e00b      	b.n	8000f22 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000f0a:	6a3c      	ldr	r4, [r7, #32]
 8000f0c:	1c63      	adds	r3, r4, #1
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	f7ff fba4 	bl	800065c <SPI_RxByte>
 8000f14:	4603      	mov	r3, r0
 8000f16:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d9ef      	bls.n	8000f0a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f30:	2304      	movs	r3, #4
 8000f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f36:	e006      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f38:	bf00      	nop
 8000f3a:	e004      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f44:	bf00      	nop
		}

		DESELECT();
 8000f46:	f7ff fb45 	bl	80005d4 <DESELECT>
		SPI_RxByte();
 8000f4a:	f7ff fb87 	bl	800065c <SPI_RxByte>
	}

	return res;
 8000f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	372c      	adds	r7, #44	; 0x2c
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000000 	.word	0x20000000

08000f60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f88:	e000      	b.n	8000f8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	int i=0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000fba:	e002      	b.n	8000fc2 <bufsize+0x14>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f6      	bne.n	8000fbc <bufsize+0xe>
	return i;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <clear_buffer>:

void clear_buffer (void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	e007      	b.n	8000ff8 <clear_buffer+0x1c>
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <clear_buffer+0x30>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffc:	ddf4      	ble.n	8000fe8 <clear_buffer+0xc>
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20002174 	.word	0x20002174

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 fbb0 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f89c 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f942 	bl	80012a4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001020:	f000 f90a 	bl	8001238 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001024:	f002 f934 	bl	8003290 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //	 HAL_Delay (500);

  	    fresult = f_mount(&fs, "/", 1);
 8001028:	2201      	movs	r2, #1
 800102a:	493b      	ldr	r1, [pc, #236]	; (8001118 <main+0x108>)
 800102c:	483b      	ldr	r0, [pc, #236]	; (800111c <main+0x10c>)
 800102e:	f004 fb79 	bl	8005724 <f_mount>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <main+0x110>)
 8001038:	701a      	strb	r2, [r3, #0]
  	    	if (fresult != FR_OK) printf ("ERROR!!! in mounting SD CARD...\n\n");
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <main+0x110>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <main+0x3a>
 8001042:	4838      	ldr	r0, [pc, #224]	; (8001124 <main+0x114>)
 8001044:	f005 fb04 	bl	8006650 <puts>
 8001048:	e002      	b.n	8001050 <main+0x40>
  	    	else printf("SD CARD mounted successfully...\n\n");
 800104a:	4837      	ldr	r0, [pc, #220]	; (8001128 <main+0x118>)
 800104c:	f005 fb00 	bl	8006650 <puts>

  	    	/* Create second file with read write access and open it */
  	    	  	fresult = f_open(&fil, "filetest251.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001050:	220a      	movs	r2, #10
 8001052:	4936      	ldr	r1, [pc, #216]	; (800112c <main+0x11c>)
 8001054:	4836      	ldr	r0, [pc, #216]	; (8001130 <main+0x120>)
 8001056:	f004 fbab 	bl	80057b0 <f_open>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <main+0x110>)
 8001060:	701a      	strb	r2, [r3, #0]

  	    	  	/* Writing text */
  	    	  	strcpy (buffer, "This is TestFile.txt, written using ...f_write... and it says Hello from Dutah\n");
 8001062:	4a34      	ldr	r2, [pc, #208]	; (8001134 <main+0x124>)
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <main+0x128>)
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	2350      	movs	r3, #80	; 0x50
 800106c:	461a      	mov	r2, r3
 800106e:	f005 fa53 	bl	8006518 <memcpy>

  	    	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001072:	4830      	ldr	r0, [pc, #192]	; (8001134 <main+0x124>)
 8001074:	f7ff ff9b 	bl	8000fae <bufsize>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <main+0x12c>)
 800107e:	492d      	ldr	r1, [pc, #180]	; (8001134 <main+0x124>)
 8001080:	482b      	ldr	r0, [pc, #172]	; (8001130 <main+0x120>)
 8001082:	f004 fec0 	bl	8005e06 <f_write>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <main+0x110>)
 800108c:	701a      	strb	r2, [r3, #0]

  	    	  	printf ("File5.txt created and data is written\n");
 800108e:	482c      	ldr	r0, [pc, #176]	; (8001140 <main+0x130>)
 8001090:	f005 fade 	bl	8006650 <puts>

  	    	  	/* Close file */
  	    	  	f_close(&fil);
 8001094:	4826      	ldr	r0, [pc, #152]	; (8001130 <main+0x120>)
 8001096:	f005 f8c8 	bl	800622a <f_close>


  	    	  	// clearing buffer to show that result obtained is from the file
  	    	  	clear_buffer();
 800109a:	f7ff ff9f 	bl	8000fdc <clear_buffer>

  	    	  	/* Open second file to read */
  	    	  	fresult = f_open(&fil, "filetest251.txt", FA_READ);
 800109e:	2201      	movs	r2, #1
 80010a0:	4922      	ldr	r1, [pc, #136]	; (800112c <main+0x11c>)
 80010a2:	4823      	ldr	r0, [pc, #140]	; (8001130 <main+0x120>)
 80010a4:	f004 fb84 	bl	80057b0 <f_open>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <main+0x110>)
 80010ae:	701a      	strb	r2, [r3, #0]
  	    	  	if (fresult == FR_OK)printf ("file2.txt is open and the data is shown below\n");
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0x110>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <main+0xae>
 80010b8:	4822      	ldr	r0, [pc, #136]	; (8001144 <main+0x134>)
 80010ba:	f005 fac9 	bl	8006650 <puts>

  	    	  	/* Read data from the file
  	    	  	 * Please see the function details for the arguments */
  	    	  	f_read (&fil, buffer, f_size(&fil), &br);
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <main+0x120>)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <main+0x138>)
 80010c4:	491b      	ldr	r1, [pc, #108]	; (8001134 <main+0x124>)
 80010c6:	481a      	ldr	r0, [pc, #104]	; (8001130 <main+0x120>)
 80010c8:	f004 fd3e 	bl	8005b48 <f_read>
  	    	  	printf(buffer);
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <main+0x124>)
 80010ce:	f005 fa39 	bl	8006544 <iprintf>
  	    	  	printf("\n\n");
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <main+0x13c>)
 80010d4:	f005 fabc 	bl	8006650 <puts>

  	    	  	/* Close file */
  	    	  	f_close(&fil);
 80010d8:	4815      	ldr	r0, [pc, #84]	; (8001130 <main+0x120>)
 80010da:	f005 f8a6 	bl	800622a <f_close>

  	    	  fresult = f_mount(NULL, "/", 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	490d      	ldr	r1, [pc, #52]	; (8001118 <main+0x108>)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f004 fb1e 	bl	8005724 <f_mount>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <main+0x110>)
 80010ee:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2108      	movs	r1, #8
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <main+0x140>)
 80010f6:	f000 fe7b 	bl	8001df0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fe:	f000 fbad 	bl	800185c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8001102:	2200      	movs	r2, #0
 8001104:	2108      	movs	r1, #8
 8001106:	4812      	ldr	r0, [pc, #72]	; (8001150 <main+0x140>)
 8001108:	f000 fe72 	bl	8001df0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001110:	f000 fba4 	bl	800185c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8001114:	e7ec      	b.n	80010f0 <main+0xe0>
 8001116:	bf00      	nop
 8001118:	08007564 	.word	0x08007564
 800111c:	20000100 	.word	0x20000100
 8001120:	20002168 	.word	0x20002168
 8001124:	08007568 	.word	0x08007568
 8001128:	0800758c 	.word	0x0800758c
 800112c:	080075b0 	.word	0x080075b0
 8001130:	20001138 	.word	0x20001138
 8001134:	20002174 	.word	0x20002174
 8001138:	080075c0 	.word	0x080075c0
 800113c:	20002170 	.word	0x20002170
 8001140:	08007610 	.word	0x08007610
 8001144:	08007638 	.word	0x08007638
 8001148:	2000216c 	.word	0x2000216c
 800114c:	08007668 	.word	0x08007668
 8001150:	40020000 	.word	0x40020000

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	; 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2234      	movs	r2, #52	; 0x34
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f005 f9e6 	bl	8006534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <SystemClock_Config+0xdc>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a2b      	ldr	r2, [pc, #172]	; (8001230 <SystemClock_Config+0xdc>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <SystemClock_Config+0xdc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <SystemClock_Config+0xe0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a25      	ldr	r2, [pc, #148]	; (8001234 <SystemClock_Config+0xe0>)
 800119e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <SystemClock_Config+0xe0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011c4:	2308      	movs	r3, #8
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011c8:	23b4      	movs	r3, #180	; 0xb4
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f987 	bl	80024f0 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011e8:	f000 f8ee 	bl	80013c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011ec:	f000 fe1a 	bl	8001e24 <HAL_PWREx_EnableOverDrive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011f6:	f000 f8e7 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001206:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800120a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2105      	movs	r1, #5
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fe53 	bl	8001ec4 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001224:	f000 f8d0 	bl	80013c8 <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	; 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_SPI2_Init+0x64>)
 800123e:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <MX_SPI2_Init+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_SPI2_Init+0x64>)
 8001244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_SPI2_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_SPI2_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_SPI2_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_SPI2_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_SPI2_Init+0x64>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_SPI2_Init+0x64>)
 800126c:	2238      	movs	r2, #56	; 0x38
 800126e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_SPI2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_SPI2_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_SPI2_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_SPI2_Init+0x64>)
 8001284:	220a      	movs	r2, #10
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_SPI2_Init+0x64>)
 800128a:	f001 fbcf 	bl	8002a2c <HAL_SPI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001294:	f000 f898 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000a8 	.word	0x200000a8
 80012a0:	40003800 	.word	0x40003800

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a30      	ldr	r2, [pc, #192]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a29      	ldr	r2, [pc, #164]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <MX_GPIO_Init+0xe0>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_GPIO_Init+0xe0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_GPIO_Init+0xe0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <MX_GPIO_Init+0xe0>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_GPIO_Init+0xe0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2108      	movs	r1, #8
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_GPIO_Init+0xe4>)
 8001330:	f000 fd5e 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SD_CS_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f241 0102 	movw	r1, #4098	; 0x1002
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_GPIO_Init+0xe8>)
 800133c:	f000 fd58 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001340:	2308      	movs	r3, #8
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_GPIO_Init+0xe4>)
 8001358:	f000 fbb6 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SD_CS_Pin;
 800135c:	f241 0302 	movw	r3, #4098	; 0x1002
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_GPIO_Init+0xe8>)
 8001376:	f000 fba7 	bl	8001ac8 <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400

08001390 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e009      	b.n	80013b6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fdd8 	bl	8000f60 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbf1      	blt.n	80013a2 <_write+0x12>
	}
	return len;
 80013be:	687b      	ldr	r3, [r7, #4]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_MspInit+0x58>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <HAL_MspInit+0x58>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_MspInit+0x58>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_MspInit+0x58>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_MspInit+0x58>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_MspInit+0x58>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2005      	movs	r0, #5
 8001418:	f000 fb1f 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800141c:	2005      	movs	r0, #5
 800141e:	f000 fb38 	bl	8001a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <HAL_SPI_MspInit+0xe0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d15a      	bne.n	8001508 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014a6:	2302      	movs	r3, #2
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80014b6:	2307      	movs	r3, #7
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4815      	ldr	r0, [pc, #84]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014c2:	f000 fb01 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014c6:	2304      	movs	r3, #4
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d6:	2305      	movs	r3, #5
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014e2:	f000 faf1 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f8:	2305      	movs	r3, #5
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <HAL_SPI_MspInit+0xec>)
 8001504:	f000 fae0 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40003800 	.word	0x40003800
 8001514:	40023800 	.word	0x40023800
 8001518:	40020800 	.word	0x40020800
 800151c:	40020400 	.word	0x40020400

08001520 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <SDTimer_Handler+0x40>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <SDTimer_Handler+0x1c>
    Timer1--;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <SDTimer_Handler+0x40>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <SDTimer_Handler+0x40>)
 800153a:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <SDTimer_Handler+0x44>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <SDTimer_Handler+0x34>
    Timer2--;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <SDTimer_Handler+0x44>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b01      	subs	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SDTimer_Handler+0x44>)
 8001552:	801a      	strh	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200021f6 	.word	0x200021f6
 8001564:	200021f8 	.word	0x200021f8

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <SysTick_Handler+0x30>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <SysTick_Handler+0x30>)
 80015c0:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <SysTick_Handler+0x30>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d904      	bls.n	80015d6 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Handler+0x30>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 80015d2:	f7ff ffa5 	bl	8001520 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f921 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200021f4 	.word	0x200021f4

080015e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e00a      	b.n	800161a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001604:	f3af 8000 	nop.w
 8001608:	4601      	mov	r1, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	60ba      	str	r2, [r7, #8]
 8001610:	b2ca      	uxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf0      	blt.n	8001604 <_read+0x12>
	}

return len;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_close>:
	}
	return len;
}

int _close(int file)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001654:	605a      	str	r2, [r3, #4]
	return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_isatty>:

int _isatty(int file)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
	return 0;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f004 fefe 	bl	80064c4 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20020000 	.word	0x20020000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	200021fc 	.word	0x200021fc
 80016fc:	20002450 	.word	0x20002450

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800174e:	f7ff ffd7 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f004 febd 	bl	80064d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7ff fc5b 	bl	8001010 <main>
  bx  lr    
 800175a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001768:	08007bac 	.word	0x08007bac
  ldr r2, =_sbss
 800176c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001770:	20002450 	.word	0x20002450

08001774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC_IRQHandler>
	...

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_Init+0x40>)
 8001782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_Init+0x40>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x40>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f94f 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fe12 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f967 	bl	8001aae <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f92f 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000004 	.word	0x20000004
 8001814:	2000000c 	.word	0x2000000c
 8001818:	20000008 	.word	0x20000008

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c
 8001840:	20002200 	.word	0x20002200

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20002200 	.word	0x20002200

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff ffee 	bl	8001844 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffde 	bl	8001844 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000000c 	.word	0x2000000c

080018a4 <__NVIC_SetPriorityGrouping>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4907      	ldr	r1, [pc, #28]	; (8001940 <__NVIC_EnableIRQ+0x38>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff29 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff3e 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff8e 	bl	8001998 <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff31 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa2 	bl	8001a00 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e165      	b.n	8001db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8154 	bne.w	8001daa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d005      	beq.n	8001b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d017      	beq.n	8001bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80ae 	beq.w	8001daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_GPIO_Init+0x300>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a5c      	ldr	r2, [pc, #368]	; (8001dc8 <HAL_GPIO_Init+0x300>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <HAL_GPIO_Init+0x300>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6a:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <HAL_GPIO_Init+0x304>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4f      	ldr	r2, [pc, #316]	; (8001dd0 <HAL_GPIO_Init+0x308>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x21a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <HAL_GPIO_Init+0x30c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x216>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <HAL_GPIO_Init+0x310>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x212>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_GPIO_Init+0x314>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x20e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	; (8001de0 <HAL_GPIO_Init+0x318>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x20a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4a      	ldr	r2, [pc, #296]	; (8001de4 <HAL_GPIO_Init+0x31c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x206>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a49      	ldr	r2, [pc, #292]	; (8001de8 <HAL_GPIO_Init+0x320>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x202>
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x21c>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x21c>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x21c>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x21c>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x21c>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x21c>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x21c>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf4:	4935      	ldr	r1, [pc, #212]	; (8001dcc <HAL_GPIO_Init+0x304>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d26:	4a31      	ldr	r2, [pc, #196]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	f67f ae96 	bls.w	8001ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021400 	.word	0x40021400
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e50:	f7ff fcf8 	bl	8001844 <HAL_GetTick>
 8001e54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e56:	e009      	b.n	8001e6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e58:	f7ff fcf4 	bl	8001844 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e66:	d901      	bls.n	8001e6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e01f      	b.n	8001eac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d1ee      	bne.n	8001e58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e80:	f7ff fce0 	bl	8001844 <HAL_GetTick>
 8001e84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e86:	e009      	b.n	8001e9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e88:	f7ff fcdc 	bl	8001844 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e96:	d901      	bls.n	8001e9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e007      	b.n	8001eac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ea8:	d1ee      	bne.n	8001e88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	420e0040 	.word	0x420e0040
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	420e0044 	.word	0x420e0044

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cc      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d90c      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b65      	ldr	r3, [pc, #404]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b8      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	494d      	ldr	r1, [pc, #308]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d044      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e067      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4934      	ldr	r1, [pc, #208]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff fc46 	bl	8001844 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7ff fc42 	bl	8001844 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e04f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d20c      	bcs.n	800200c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4916      	ldr	r1, [pc, #88]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800204a:	f000 f821 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	490a      	ldr	r1, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fba6 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00
 8002080:	40023800 	.word	0x40023800
 8002084:	080076b4 	.word	0x080076b4
 8002088:	20000004 	.word	0x20000004
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b0ae      	sub	sp, #184	; 0xb8
 8002096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b6:	4bcb      	ldr	r3, [pc, #812]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	f200 8206 	bhi.w	80024d0 <HAL_RCC_GetSysClockFreq+0x440>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	08002101 	.word	0x08002101
 80020d0:	080024d1 	.word	0x080024d1
 80020d4:	080024d1 	.word	0x080024d1
 80020d8:	080024d1 	.word	0x080024d1
 80020dc:	08002109 	.word	0x08002109
 80020e0:	080024d1 	.word	0x080024d1
 80020e4:	080024d1 	.word	0x080024d1
 80020e8:	080024d1 	.word	0x080024d1
 80020ec:	08002111 	.word	0x08002111
 80020f0:	080024d1 	.word	0x080024d1
 80020f4:	080024d1 	.word	0x080024d1
 80020f8:	080024d1 	.word	0x080024d1
 80020fc:	08002301 	.word	0x08002301
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4bb9      	ldr	r3, [pc, #740]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002106:	e1e7      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4bb8      	ldr	r3, [pc, #736]	; (80023ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800210a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800210e:	e1e3      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002110:	4bb4      	ldr	r3, [pc, #720]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800211c:	4bb1      	ldr	r3, [pc, #708]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d071      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002128:	4bae      	ldr	r3, [pc, #696]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	2200      	movs	r2, #0
 8002130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002134:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002140:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800214a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800214e:	4622      	mov	r2, r4
 8002150:	462b      	mov	r3, r5
 8002152:	f04f 0000 	mov.w	r0, #0
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	0159      	lsls	r1, r3, #5
 800215c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002160:	0150      	lsls	r0, r2, #5
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4621      	mov	r1, r4
 8002168:	1a51      	subs	r1, r2, r1
 800216a:	6439      	str	r1, [r7, #64]	; 0x40
 800216c:	4629      	mov	r1, r5
 800216e:	eb63 0301 	sbc.w	r3, r3, r1
 8002172:	647b      	str	r3, [r7, #68]	; 0x44
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002180:	4649      	mov	r1, r9
 8002182:	018b      	lsls	r3, r1, #6
 8002184:	4641      	mov	r1, r8
 8002186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800218a:	4641      	mov	r1, r8
 800218c:	018a      	lsls	r2, r1, #6
 800218e:	4641      	mov	r1, r8
 8002190:	1a51      	subs	r1, r2, r1
 8002192:	63b9      	str	r1, [r7, #56]	; 0x38
 8002194:	4649      	mov	r1, r9
 8002196:	eb63 0301 	sbc.w	r3, r3, r1
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80021a8:	4649      	mov	r1, r9
 80021aa:	00cb      	lsls	r3, r1, #3
 80021ac:	4641      	mov	r1, r8
 80021ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021b2:	4641      	mov	r1, r8
 80021b4:	00ca      	lsls	r2, r1, #3
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	4622      	mov	r2, r4
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
 80021c2:	462b      	mov	r3, r5
 80021c4:	460a      	mov	r2, r1
 80021c6:	eb42 0303 	adc.w	r3, r2, r3
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021d8:	4629      	mov	r1, r5
 80021da:	024b      	lsls	r3, r1, #9
 80021dc:	4621      	mov	r1, r4
 80021de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021e2:	4621      	mov	r1, r4
 80021e4:	024a      	lsls	r2, r1, #9
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80021fc:	f7fe f858 	bl	80002b0 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800220a:	e067      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220c:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	2200      	movs	r2, #0
 8002214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002218:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800221c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002224:	67bb      	str	r3, [r7, #120]	; 0x78
 8002226:	2300      	movs	r3, #0
 8002228:	67fb      	str	r3, [r7, #124]	; 0x7c
 800222a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0159      	lsls	r1, r3, #5
 800223c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002240:	0150      	lsls	r0, r2, #5
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4621      	mov	r1, r4
 8002248:	1a51      	subs	r1, r2, r1
 800224a:	62b9      	str	r1, [r7, #40]	; 0x28
 800224c:	4629      	mov	r1, r5
 800224e:	eb63 0301 	sbc.w	r3, r3, r1
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002260:	4649      	mov	r1, r9
 8002262:	018b      	lsls	r3, r1, #6
 8002264:	4641      	mov	r1, r8
 8002266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226a:	4641      	mov	r1, r8
 800226c:	018a      	lsls	r2, r1, #6
 800226e:	4641      	mov	r1, r8
 8002270:	ebb2 0a01 	subs.w	sl, r2, r1
 8002274:	4649      	mov	r1, r9
 8002276:	eb63 0b01 	sbc.w	fp, r3, r1
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002286:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800228a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800228e:	4692      	mov	sl, r2
 8002290:	469b      	mov	fp, r3
 8002292:	4623      	mov	r3, r4
 8002294:	eb1a 0303 	adds.w	r3, sl, r3
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	462b      	mov	r3, r5
 800229c:	eb4b 0303 	adc.w	r3, fp, r3
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022ae:	4629      	mov	r1, r5
 80022b0:	028b      	lsls	r3, r1, #10
 80022b2:	4621      	mov	r1, r4
 80022b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b8:	4621      	mov	r1, r4
 80022ba:	028a      	lsls	r2, r1, #10
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022c4:	2200      	movs	r2, #0
 80022c6:	673b      	str	r3, [r7, #112]	; 0x70
 80022c8:	677a      	str	r2, [r7, #116]	; 0x74
 80022ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80022ce:	f7fd ffef 	bl	80002b0 <__aeabi_uldivmod>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4613      	mov	r3, r2
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80022ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022fe:	e0eb      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230c:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d06b      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	2200      	movs	r2, #0
 8002320:	66bb      	str	r3, [r7, #104]	; 0x68
 8002322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232a:	663b      	str	r3, [r7, #96]	; 0x60
 800232c:	2300      	movs	r3, #0
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
 8002330:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002334:	4622      	mov	r2, r4
 8002336:	462b      	mov	r3, r5
 8002338:	f04f 0000 	mov.w	r0, #0
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	0159      	lsls	r1, r3, #5
 8002342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002346:	0150      	lsls	r0, r2, #5
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4621      	mov	r1, r4
 800234e:	1a51      	subs	r1, r2, r1
 8002350:	61b9      	str	r1, [r7, #24]
 8002352:	4629      	mov	r1, r5
 8002354:	eb63 0301 	sbc.w	r3, r3, r1
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002366:	4659      	mov	r1, fp
 8002368:	018b      	lsls	r3, r1, #6
 800236a:	4651      	mov	r1, sl
 800236c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002370:	4651      	mov	r1, sl
 8002372:	018a      	lsls	r2, r1, #6
 8002374:	4651      	mov	r1, sl
 8002376:	ebb2 0801 	subs.w	r8, r2, r1
 800237a:	4659      	mov	r1, fp
 800237c:	eb63 0901 	sbc.w	r9, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002390:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002394:	4690      	mov	r8, r2
 8002396:	4699      	mov	r9, r3
 8002398:	4623      	mov	r3, r4
 800239a:	eb18 0303 	adds.w	r3, r8, r3
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	462b      	mov	r3, r5
 80023a2:	eb49 0303 	adc.w	r3, r9, r3
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023b4:	4629      	mov	r1, r5
 80023b6:	024b      	lsls	r3, r1, #9
 80023b8:	4621      	mov	r1, r4
 80023ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023be:	4621      	mov	r1, r4
 80023c0:	024a      	lsls	r2, r1, #9
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023ca:	2200      	movs	r2, #0
 80023cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80023ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023d4:	f7fd ff6c 	bl	80002b0 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4613      	mov	r3, r2
 80023de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023e2:	e065      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x420>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f0:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	2200      	movs	r2, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	4611      	mov	r1, r2
 80023fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002400:	653b      	str	r3, [r7, #80]	; 0x50
 8002402:	2300      	movs	r3, #0
 8002404:	657b      	str	r3, [r7, #84]	; 0x54
 8002406:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800240a:	4642      	mov	r2, r8
 800240c:	464b      	mov	r3, r9
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	0159      	lsls	r1, r3, #5
 8002418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241c:	0150      	lsls	r0, r2, #5
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4641      	mov	r1, r8
 8002424:	1a51      	subs	r1, r2, r1
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	4649      	mov	r1, r9
 800242a:	eb63 0301 	sbc.w	r3, r3, r1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800243c:	4659      	mov	r1, fp
 800243e:	018b      	lsls	r3, r1, #6
 8002440:	4651      	mov	r1, sl
 8002442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002446:	4651      	mov	r1, sl
 8002448:	018a      	lsls	r2, r1, #6
 800244a:	4651      	mov	r1, sl
 800244c:	1a54      	subs	r4, r2, r1
 800244e:	4659      	mov	r1, fp
 8002450:	eb63 0501 	sbc.w	r5, r3, r1
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	00eb      	lsls	r3, r5, #3
 800245e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002462:	00e2      	lsls	r2, r4, #3
 8002464:	4614      	mov	r4, r2
 8002466:	461d      	mov	r5, r3
 8002468:	4643      	mov	r3, r8
 800246a:	18e3      	adds	r3, r4, r3
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	464b      	mov	r3, r9
 8002470:	eb45 0303 	adc.w	r3, r5, r3
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002482:	4629      	mov	r1, r5
 8002484:	028b      	lsls	r3, r1, #10
 8002486:	4621      	mov	r1, r4
 8002488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800248c:	4621      	mov	r1, r4
 800248e:	028a      	lsls	r2, r1, #10
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002498:	2200      	movs	r2, #0
 800249a:	64bb      	str	r3, [r7, #72]	; 0x48
 800249c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800249e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024a2:	f7fd ff05 	bl	80002b0 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4613      	mov	r3, r2
 80024ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0f1b      	lsrs	r3, r3, #28
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80024be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024ce:	e003      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80024d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	37b8      	adds	r7, #184	; 0xb8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	00f42400 	.word	0x00f42400

080024f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e28d      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8083 	beq.w	8002616 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002510:	4b94      	ldr	r3, [pc, #592]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b04      	cmp	r3, #4
 800251a:	d019      	beq.n	8002550 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800251c:	4b91      	ldr	r3, [pc, #580]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002524:	2b08      	cmp	r3, #8
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002528:	4b8e      	ldr	r3, [pc, #568]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002534:	d00c      	beq.n	8002550 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b8b      	ldr	r3, [pc, #556]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d112      	bne.n	8002568 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002542:	4b88      	ldr	r3, [pc, #544]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254e:	d10b      	bne.n	8002568 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	4b84      	ldr	r3, [pc, #528]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05b      	beq.n	8002614 <HAL_RCC_OscConfig+0x124>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d157      	bne.n	8002614 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e25a      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x90>
 8002572:	4b7c      	ldr	r3, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7b      	ldr	r2, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xcc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0xb4>
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a75      	ldr	r2, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xcc>
 80025a4:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6b      	ldr	r2, [pc, #428]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff f93e 	bl	8001844 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f93a 	bl	8001844 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e21f      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xdc>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff f92a 	bl	8001844 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff f926 	bl	8001844 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e20b      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x104>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d06f      	beq.n	8002702 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002622:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d017      	beq.n	800265e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800262e:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002636:	2b08      	cmp	r3, #8
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d11c      	bne.n	800268c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002652:	4b44      	ldr	r3, [pc, #272]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x186>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e1d3      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4937      	ldr	r1, [pc, #220]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	e03a      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <HAL_RCC_OscConfig+0x278>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff f8d3 	bl	8001844 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff f8cf 	bl	8001844 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1b4      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4925      	ldr	r1, [pc, #148]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_RCC_OscConfig+0x278>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff f8b2 	bl	8001844 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e4:	f7ff f8ae 	bl	8001844 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e193      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d036      	beq.n	800277c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_RCC_OscConfig+0x27c>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7ff f892 	bl	8001844 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002724:	f7ff f88e 	bl	8001844 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e173      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x274>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x234>
 8002742:	e01b      	b.n	800277c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_OscConfig+0x27c>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7ff f87b 	bl	8001844 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	e00e      	b.n	8002770 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002752:	f7ff f877 	bl	8001844 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d907      	bls.n	8002770 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e15c      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
 8002764:	40023800 	.word	0x40023800
 8002768:	42470000 	.word	0x42470000
 800276c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	4b8a      	ldr	r3, [pc, #552]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ea      	bne.n	8002752 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8097 	beq.w	80028b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b83      	ldr	r3, [pc, #524]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	4b79      	ldr	r3, [pc, #484]	; (80029a0 <HAL_RCC_OscConfig+0x4b0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCC_OscConfig+0x4b0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a75      	ldr	r2, [pc, #468]	; (80029a0 <HAL_RCC_OscConfig+0x4b0>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d2:	f7ff f837 	bl	8001844 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7ff f833 	bl	8001844 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e118      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b6c      	ldr	r3, [pc, #432]	; (80029a0 <HAL_RCC_OscConfig+0x4b0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x31e>
 8002800:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a65      	ldr	r2, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x358>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x340>
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a60      	ldr	r2, [pc, #384]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a5d      	ldr	r2, [pc, #372]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0x358>
 8002830:	4b5a      	ldr	r3, [pc, #360]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	4a59      	ldr	r2, [pc, #356]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	; 0x70
 800283c:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fff8 	bl	8001844 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fff4 	bl	8001844 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0d7      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ee      	beq.n	8002858 <HAL_RCC_OscConfig+0x368>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe ffe2 	bl	8001844 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe ffde 	bl	8001844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0c1      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ee      	bne.n	8002884 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80ad 	beq.w	8002a1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d060      	beq.n	8002990 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d145      	bne.n	8002962 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCC_OscConfig+0x4b4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe ffb2 	bl	8001844 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe ffae 	bl	8001844 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e093      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	019b      	lsls	r3, r3, #6
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	3b01      	subs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	071b      	lsls	r3, r3, #28
 800292e:	491b      	ldr	r1, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x4b4>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe ff83 	bl	8001844 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe ff7f 	bl	8001844 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e064      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x452>
 8002960:	e05c      	b.n	8002a1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_OscConfig+0x4b4>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe ff6c 	bl	8001844 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe ff68 	bl	8001844 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e04d      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x4ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x480>
 800298e:	e045      	b.n	8002a1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e040      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCC_OscConfig+0x538>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d030      	beq.n	8002a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d129      	bne.n	8002a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d122      	bne.n	8002a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d119      	bne.n	8002a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10f      	bne.n	8002a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07b      	b.n	8002b36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4e:	d009      	beq.n	8002a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
 8002a56:	e005      	b.n	8002a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe fcd6 	bl	8001430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	ea42 0103 	orr.w	r1, r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	f003 0104 	and.w	r1, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	f003 0210 	and.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b088      	sub	sp, #32
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_SPI_Transmit+0x22>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e126      	b.n	8002dae <HAL_SPI_Transmit+0x270>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b68:	f7fe fe6c 	bl	8001844 <HAL_GetTick>
 8002b6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d002      	beq.n	8002b84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b82:	e10b      	b.n	8002d9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_SPI_Transmit+0x52>
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b94:	e102      	b.n	8002d9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	88fa      	ldrh	r2, [r7, #6]
 8002bae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	d10f      	bne.n	8002bfe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d007      	beq.n	8002c1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c24:	d14b      	bne.n	8002cbe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_SPI_Transmit+0xf6>
 8002c2e:	8afb      	ldrh	r3, [r7, #22]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d13e      	bne.n	8002cb2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	881a      	ldrh	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	1c9a      	adds	r2, r3, #2
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c58:	e02b      	b.n	8002cb2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d112      	bne.n	8002c8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c8c:	e011      	b.n	8002cb2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c8e:	f7fe fdd9 	bl	8001844 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d803      	bhi.n	8002ca6 <HAL_SPI_Transmit+0x168>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d102      	bne.n	8002cac <HAL_SPI_Transmit+0x16e>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cb0:	e074      	b.n	8002d9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ce      	bne.n	8002c5a <HAL_SPI_Transmit+0x11c>
 8002cbc:	e04c      	b.n	8002d58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_SPI_Transmit+0x18e>
 8002cc6:	8afb      	ldrh	r3, [r7, #22]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d140      	bne.n	8002d4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cf2:	e02c      	b.n	8002d4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d113      	bne.n	8002d2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d28:	e011      	b.n	8002d4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2a:	f7fe fd8b 	bl	8001844 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d803      	bhi.n	8002d42 <HAL_SPI_Transmit+0x204>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d102      	bne.n	8002d48 <HAL_SPI_Transmit+0x20a>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d4c:	e026      	b.n	8002d9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1cd      	bne.n	8002cf4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa55 	bl	800320c <SPI_EndRxTxTransaction>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e000      	b.n	8002d9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b08c      	sub	sp, #48	; 0x30
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x26>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e18a      	b.n	80030f2 <HAL_SPI_TransmitReceive+0x33c>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de4:	f7fe fd2e 	bl	8001844 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d00f      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x70>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e0c:	d107      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x68>
 8002e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d003      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e24:	e15b      	b.n	80030de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_SPI_TransmitReceive+0x82>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_SPI_TransmitReceive+0x82>
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e3e:	e14e      	b.n	80030de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d003      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2205      	movs	r2, #5
 8002e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	887a      	ldrh	r2, [r7, #2]
 8002e76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d007      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb0:	d178      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x10a>
 8002eba:	8b7b      	ldrh	r3, [r7, #26]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d166      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee4:	e053      	b.n	8002f8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d11b      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x176>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <HAL_SPI_TransmitReceive+0x176>
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d113      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d119      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x1b8>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d014      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f6e:	f7fe fc69 	bl	8001844 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d807      	bhi.n	8002f8e <HAL_SPI_TransmitReceive+0x1d8>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d003      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f8c:	e0a7      	b.n	80030de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1a6      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x130>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1a1      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x130>
 8002fa2:	e07c      	b.n	800309e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x1fc>
 8002fac:	8b7b      	ldrh	r3, [r7, #26]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d16b      	bne.n	800308a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd8:	e057      	b.n	800308a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11c      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x26c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d017      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x26c>
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d114      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d119      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x2ae>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d014      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003060:	2301      	movs	r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003064:	f7fe fbee 	bl	8001844 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003070:	429a      	cmp	r2, r3
 8003072:	d803      	bhi.n	800307c <HAL_SPI_TransmitReceive+0x2c6>
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d102      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x2cc>
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003088:	e029      	b.n	80030de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1a2      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x224>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d19d      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8b2 	bl	800320c <SPI_EndRxTxTransaction>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030ba:	e010      	b.n	80030de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	e000      	b.n	80030de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3730      	adds	r7, #48	; 0x30
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800310c:	f7fe fb9a 	bl	8001844 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	4413      	add	r3, r2
 800311a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800311c:	f7fe fb92 	bl	8001844 <HAL_GetTick>
 8003120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	015b      	lsls	r3, r3, #5
 8003128:	0d1b      	lsrs	r3, r3, #20
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003132:	e054      	b.n	80031de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d050      	beq.n	80031de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800313c:	f7fe fb82 	bl	8001844 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	429a      	cmp	r2, r3
 800314a:	d902      	bls.n	8003152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d13d      	bne.n	80031ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316a:	d111      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003174:	d004      	beq.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	d107      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003198:	d10f      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e017      	b.n	80031fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3b01      	subs	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4013      	ands	r3, r2
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d19b      	bne.n	8003134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000004 	.word	0x20000004

0800320c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <SPI_EndRxTxTransaction+0x7c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <SPI_EndRxTxTransaction+0x80>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0d5b      	lsrs	r3, r3, #21
 8003224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003236:	d112      	bne.n	800325e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff ff5a 	bl	80030fc <SPI_WaitFlagStateUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e00f      	b.n	800327e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3b01      	subs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d0f2      	beq.n	800325e <SPI_EndRxTxTransaction+0x52>
 8003278:	e000      	b.n	800327c <SPI_EndRxTxTransaction+0x70>
        break;
 800327a:	bf00      	nop
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000004 	.word	0x20000004
 800328c:	165e9f81 	.word	0x165e9f81

08003290 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <MX_FATFS_Init+0x18>)
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_FATFS_Init+0x1c>)
 8003298:	f003 f83e 	bl	8006318 <FATFS_LinkDriver>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <MX_FATFS_Init+0x20>)
 80032a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20002208 	.word	0x20002208
 80032ac:	20000010 	.word	0x20000010
 80032b0:	20002204 	.word	0x20002204

080032b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80032b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fb29 	bl	8000928 <SD_disk_initialize>
 80032d6:	4603      	mov	r3, r0

  /* USER CODE END INIT */
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fc07 	bl	8000b00 <SD_disk_status>
 80032f2:	4603      	mov	r3, r0

  /* USER CODE END STATUS */
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800330c:	7bf8      	ldrb	r0, [r7, #15]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	f7fd fc0a 	bl	8000b2c <SD_disk_read>
 8003318:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4603      	mov	r3, r0
 8003330:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8003332:	7bf8      	ldrb	r0, [r7, #15]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	f7fd fc61 	bl	8000c00 <SD_disk_write>
 800333e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	603a      	str	r2, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
 8003354:	460b      	mov	r3, r1
 8003356:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8003358:	79b9      	ldrb	r1, [r7, #6]
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fcd2 	bl	8000d08 <SD_disk_ioctl>
 8003364:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <disk_status+0x30>)
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	79fa      	ldrb	r2, [r7, #7]
 8003388:	4905      	ldr	r1, [pc, #20]	; (80033a0 <disk_status+0x30>)
 800338a:	440a      	add	r2, r1
 800338c:	7a12      	ldrb	r2, [r2, #8]
 800338e:	4610      	mov	r0, r2
 8003390:	4798      	blx	r3
 8003392:	4603      	mov	r3, r0
 8003394:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20002434 	.word	0x20002434

080033a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <disk_initialize+0x48>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <disk_initialize+0x48>)
 80033c0:	2101      	movs	r1, #1
 80033c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <disk_initialize+0x48>)
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	79fa      	ldrb	r2, [r7, #7]
 80033d2:	4906      	ldr	r1, [pc, #24]	; (80033ec <disk_initialize+0x48>)
 80033d4:	440a      	add	r2, r1
 80033d6:	7a12      	ldrb	r2, [r2, #8]
 80033d8:	4610      	mov	r0, r2
 80033da:	4798      	blx	r3
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20002434 	.word	0x20002434

080033f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <disk_read+0x3c>)
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	689c      	ldr	r4, [r3, #8]
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	4a07      	ldr	r2, [pc, #28]	; (800342c <disk_read+0x3c>)
 8003410:	4413      	add	r3, r2
 8003412:	7a18      	ldrb	r0, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	47a0      	blx	r4
 800341c:	4603      	mov	r3, r0
 800341e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd90      	pop	{r4, r7, pc}
 800342a:	bf00      	nop
 800342c:	20002434 	.word	0x20002434

08003430 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <disk_write+0x3c>)
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	68dc      	ldr	r4, [r3, #12]
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	4a07      	ldr	r2, [pc, #28]	; (800346c <disk_write+0x3c>)
 8003450:	4413      	add	r3, r2
 8003452:	7a18      	ldrb	r0, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	47a0      	blx	r4
 800345c:	4603      	mov	r3, r0
 800345e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	20002434 	.word	0x20002434

08003470 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	603a      	str	r2, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
 800347c:	460b      	mov	r3, r1
 800347e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <disk_ioctl+0x38>)
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	79fa      	ldrb	r2, [r7, #7]
 800348e:	4906      	ldr	r1, [pc, #24]	; (80034a8 <disk_ioctl+0x38>)
 8003490:	440a      	add	r2, r1
 8003492:	7a10      	ldrb	r0, [r2, #8]
 8003494:	79b9      	ldrb	r1, [r7, #6]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	4798      	blx	r3
 800349a:	4603      	mov	r3, r0
 800349c:	73fb      	strb	r3, [r7, #15]
  return res;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20002434 	.word	0x20002434

080034ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80034bc:	89fb      	ldrh	r3, [r7, #14]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80034ce:	89fb      	ldrh	r3, [r7, #14]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3303      	adds	r3, #3
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	3202      	adds	r2, #2
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	3201      	adds	r2, #1
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
	return rv;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	887a      	ldrh	r2, [r7, #2]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	1c53      	adds	r3, r2, #1
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	6179      	str	r1, [r7, #20]
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3b01      	subs	r3, #1
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f1      	bne.n	80035ca <mem_cpy+0x1a>
	}
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80035f2:	b480      	push	{r7}
 80035f4:	b087      	sub	sp, #28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	617a      	str	r2, [r7, #20]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3b01      	subs	r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f3      	bne.n	8003602 <mem_set+0x10>
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	61ba      	str	r2, [r7, #24]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	1acb      	subs	r3, r1, r3
 8003654:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3b01      	subs	r3, #1
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <mem_cmp+0x40>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0eb      	beq.n	8003640 <mem_cmp+0x18>

	return r;
 8003668:	697b      	ldr	r3, [r7, #20]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003680:	e002      	b.n	8003688 <chk_chr+0x12>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3301      	adds	r3, #1
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <chk_chr+0x26>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	4293      	cmp	r3, r2
 800369a:	d1f2      	bne.n	8003682 <chk_chr+0xc>
	return *str;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	781b      	ldrb	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e029      	b.n	8003714 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80036c0:	4a27      	ldr	r2, [pc, #156]	; (8003760 <chk_lock+0xb4>)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01d      	beq.n	800370a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036ce:	4a24      	ldr	r2, [pc, #144]	; (8003760 <chk_lock+0xb4>)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	4413      	add	r3, r2
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d116      	bne.n	800370e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <chk_lock+0xb4>)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d10c      	bne.n	800370e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <chk_lock+0xb4>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4413      	add	r3, r2
 80036fc:	3308      	adds	r3, #8
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003704:	429a      	cmp	r2, r3
 8003706:	d102      	bne.n	800370e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003708:	e007      	b.n	800371a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3301      	adds	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d9d2      	bls.n	80036c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d109      	bne.n	8003734 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <chk_lock+0x80>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d101      	bne.n	8003730 <chk_lock+0x84>
 800372c:	2300      	movs	r3, #0
 800372e:	e010      	b.n	8003752 <chk_lock+0xa6>
 8003730:	2312      	movs	r3, #18
 8003732:	e00e      	b.n	8003752 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d108      	bne.n	800374c <chk_lock+0xa0>
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <chk_lock+0xb4>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	4413      	add	r3, r2
 8003742:	330c      	adds	r3, #12
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374a:	d101      	bne.n	8003750 <chk_lock+0xa4>
 800374c:	2310      	movs	r3, #16
 800374e:	e000      	b.n	8003752 <chk_lock+0xa6>
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20002214 	.word	0x20002214

08003764 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	e002      	b.n	8003776 <enq_lock+0x12>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d806      	bhi.n	800378a <enq_lock+0x26>
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <enq_lock+0x40>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4413      	add	r3, r2
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f2      	bne.n	8003770 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b02      	cmp	r3, #2
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20002214 	.word	0x20002214

080037a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e01f      	b.n	80037f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80037b8:	4a41      	ldr	r2, [pc, #260]	; (80038c0 <inc_lock+0x118>)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d113      	bne.n	80037f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80037ca:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <inc_lock+0x118>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80037da:	429a      	cmp	r2, r3
 80037dc:	d109      	bne.n	80037f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80037de:	4a38      	ldr	r2, [pc, #224]	; (80038c0 <inc_lock+0x118>)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4413      	add	r3, r2
 80037e6:	3308      	adds	r3, #8
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d006      	beq.n	8003800 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d9dc      	bls.n	80037b8 <inc_lock+0x10>
 80037fe:	e000      	b.n	8003802 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003800:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d132      	bne.n	800386e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e002      	b.n	8003814 <inc_lock+0x6c>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d806      	bhi.n	8003828 <inc_lock+0x80>
 800381a:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <inc_lock+0x118>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4413      	add	r3, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f2      	bne.n	800380e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d101      	bne.n	8003832 <inc_lock+0x8a>
 800382e:	2300      	movs	r3, #0
 8003830:	e040      	b.n	80038b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4922      	ldr	r1, [pc, #136]	; (80038c0 <inc_lock+0x118>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	440b      	add	r3, r1
 800383e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	491e      	ldr	r1, [pc, #120]	; (80038c0 <inc_lock+0x118>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	440b      	add	r3, r1
 800384c:	3304      	adds	r3, #4
 800384e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	491a      	ldr	r1, [pc, #104]	; (80038c0 <inc_lock+0x118>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	440b      	add	r3, r1
 800385c:	3308      	adds	r3, #8
 800385e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <inc_lock+0x118>)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	4413      	add	r3, r2
 8003868:	330c      	adds	r3, #12
 800386a:	2200      	movs	r2, #0
 800386c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <inc_lock+0xe0>
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <inc_lock+0x118>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	4413      	add	r3, r2
 800387c:	330c      	adds	r3, #12
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <inc_lock+0xe0>
 8003884:	2300      	movs	r3, #0
 8003886:	e015      	b.n	80038b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <inc_lock+0xf8>
 800388e:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <inc_lock+0x118>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	4413      	add	r3, r2
 8003896:	330c      	adds	r3, #12
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	e001      	b.n	80038a4 <inc_lock+0xfc>
 80038a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038a4:	4906      	ldr	r1, [pc, #24]	; (80038c0 <inc_lock+0x118>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	440b      	add	r3, r1
 80038ac:	330c      	adds	r3, #12
 80038ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3301      	adds	r3, #1
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	20002214 	.word	0x20002214

080038c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d825      	bhi.n	8003924 <dec_lock+0x60>
		n = Files[i].ctr;
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <dec_lock+0x74>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	4413      	add	r3, r2
 80038e0:	330c      	adds	r3, #12
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ec:	d101      	bne.n	80038f2 <dec_lock+0x2e>
 80038ee:	2300      	movs	r3, #0
 80038f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80038f2:	89fb      	ldrh	r3, [r7, #14]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <dec_lock+0x3a>
 80038f8:	89fb      	ldrh	r3, [r7, #14]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <dec_lock+0x74>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	4413      	add	r3, r2
 8003906:	330c      	adds	r3, #12
 8003908:	89fa      	ldrh	r2, [r7, #14]
 800390a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <dec_lock+0x5a>
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <dec_lock+0x74>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	4413      	add	r3, r2
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	737b      	strb	r3, [r7, #13]
 8003922:	e001      	b.n	8003928 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003924:	2302      	movs	r3, #2
 8003926:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003928:	7b7b      	ldrb	r3, [r7, #13]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20002214 	.word	0x20002214

0800393c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e010      	b.n	800396c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800394a:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <clear_lock+0x44>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4413      	add	r3, r2
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d105      	bne.n	8003966 <clear_lock+0x2a>
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <clear_lock+0x44>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4413      	add	r3, r2
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3301      	adds	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d9eb      	bls.n	800394a <clear_lock+0xe>
	}
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	20002214 	.word	0x20002214

08003984 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	78db      	ldrb	r3, [r3, #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d034      	beq.n	8003a02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7858      	ldrb	r0, [r3, #1]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039a8:	2301      	movs	r3, #1
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	f7ff fd40 	bl	8003430 <disk_write>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	e022      	b.n	8003a02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	1ad2      	subs	r2, r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d217      	bcs.n	8003a02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	789b      	ldrb	r3, [r3, #2]
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e010      	b.n	80039fc <sync_window+0x78>
					wsect += fs->fsize;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4413      	add	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7858      	ldrb	r0, [r3, #1]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039ee:	2301      	movs	r3, #1
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	f7ff fd1d 	bl	8003430 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d8eb      	bhi.n	80039da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d01b      	beq.n	8003a5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ffad 	bl	8003984 <sync_window>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d113      	bne.n	8003a5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7858      	ldrb	r0, [r3, #1]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a3e:	2301      	movs	r3, #1
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	f7ff fcd5 	bl	80033f0 <disk_read>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff87 	bl	8003984 <sync_window>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d159      	bne.n	8003b34 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d149      	bne.n	8003b1c <sync_fs+0xb4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	791b      	ldrb	r3, [r3, #4]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d145      	bne.n	8003b1c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	899b      	ldrh	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f7ff fda8 	bl	80035f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3338      	adds	r3, #56	; 0x38
 8003aa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003aaa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fd37 	bl	8003522 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3338      	adds	r3, #56	; 0x38
 8003ab8:	4921      	ldr	r1, [pc, #132]	; (8003b40 <sync_fs+0xd8>)
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fd4c 	bl	8003558 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3338      	adds	r3, #56	; 0x38
 8003ac4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003ac8:	491e      	ldr	r1, [pc, #120]	; (8003b44 <sync_fs+0xdc>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fd44 	bl	8003558 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3338      	adds	r3, #56	; 0x38
 8003ad4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f7ff fd3a 	bl	8003558 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3338      	adds	r3, #56	; 0x38
 8003ae8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7ff fd30 	bl	8003558 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7858      	ldrb	r0, [r3, #1]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b10:	2301      	movs	r3, #1
 8003b12:	f7ff fc8d 	bl	8003430 <disk_write>
			fs->fsi_flag = 0;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fca3 	bl	8003470 <disk_ioctl>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <sync_fs+0xcc>
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	41615252 	.word	0x41615252
 8003b44:	61417272 	.word	0x61417272

08003b48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	3b02      	subs	r3, #2
 8003b56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	3b02      	subs	r3, #2
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d301      	bcc.n	8003b68 <clust2sect+0x20>
 8003b64:	2300      	movs	r3, #0
 8003b66:	e008      	b.n	8003b7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	895b      	ldrh	r3, [r3, #10]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	fb03 f202 	mul.w	r2, r3, r2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	4413      	add	r3, r2
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d904      	bls.n	8003ba6 <get_fat+0x20>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <get_fat+0x26>
		val = 1;	/* Internal error */
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e0bb      	b.n	8003d24 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	f000 8083 	beq.w	8003cc2 <get_fat+0x13c>
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	f300 80a7 	bgt.w	8003d10 <get_fat+0x18a>
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d002      	beq.n	8003bcc <get_fat+0x46>
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d056      	beq.n	8003c78 <get_fat+0xf2>
 8003bca:	e0a1      	b.n	8003d10 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	899b      	ldrh	r3, [r3, #12]
 8003be2:	4619      	mov	r1, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bea:	4413      	add	r3, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	6938      	ldr	r0, [r7, #16]
 8003bf0:	f7ff ff0c 	bl	8003a0c <move_window>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 808d 	bne.w	8003d16 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	60fa      	str	r2, [r7, #12]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	8992      	ldrh	r2, [r2, #12]
 8003c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c0a:	fb01 f202 	mul.w	r2, r1, r2
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	899b      	ldrh	r3, [r3, #12]
 8003c22:	4619      	mov	r1, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6938      	ldr	r0, [r7, #16]
 8003c30:	f7ff feec 	bl	8003a0c <move_window>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d16f      	bne.n	8003d1a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	899b      	ldrh	r3, [r3, #12]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c46:	fb01 f202 	mul.w	r2, r1, r2
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <get_fat+0xe8>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	e002      	b.n	8003c74 <get_fat+0xee>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	617b      	str	r3, [r7, #20]
			break;
 8003c76:	e055      	b.n	8003d24 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	899b      	ldrh	r3, [r3, #12]
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	4619      	mov	r1, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6938      	ldr	r0, [r7, #16]
 8003c92:	f7ff febb 	bl	8003a0c <move_window>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d140      	bne.n	8003d1e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	8992      	ldrh	r2, [r2, #12]
 8003caa:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cae:	fb00 f202 	mul.w	r2, r0, r2
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fbf8 	bl	80034ac <ld_word>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	617b      	str	r3, [r7, #20]
			break;
 8003cc0:	e030      	b.n	8003d24 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	899b      	ldrh	r3, [r3, #12]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4619      	mov	r1, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6938      	ldr	r0, [r7, #16]
 8003cdc:	f7ff fe96 	bl	8003a0c <move_window>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11d      	bne.n	8003d22 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	8992      	ldrh	r2, [r2, #12]
 8003cf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cf8:	fb00 f202 	mul.w	r2, r0, r2
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	440b      	add	r3, r1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fbeb 	bl	80034dc <ld_dword>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d0c:	617b      	str	r3, [r7, #20]
			break;
 8003d0e:	e009      	b.n	8003d24 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e006      	b.n	8003d24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d16:	bf00      	nop
 8003d18:	e004      	b.n	8003d24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d22:	bf00      	nop
		}
	}

	return val;
 8003d24:	697b      	ldr	r3, [r7, #20]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003d2e:	b590      	push	{r4, r7, lr}
 8003d30:	b089      	sub	sp, #36	; 0x24
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f240 8102 	bls.w	8003f4a <put_fat+0x21c>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	f080 80fc 	bcs.w	8003f4a <put_fat+0x21c>
		switch (fs->fs_type) {
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	f000 80b6 	beq.w	8003ec8 <put_fat+0x19a>
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	f300 80fd 	bgt.w	8003f5c <put_fat+0x22e>
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d003      	beq.n	8003d6e <put_fat+0x40>
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	f000 8083 	beq.w	8003e72 <put_fat+0x144>
 8003d6c:	e0f6      	b.n	8003f5c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4413      	add	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	899b      	ldrh	r3, [r3, #12]
 8003d84:	4619      	mov	r1, r3
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff fe3b 	bl	8003a0c <move_window>
 8003d96:	4603      	mov	r3, r0
 8003d98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 80d6 	bne.w	8003f4e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	61ba      	str	r2, [r7, #24]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	8992      	ldrh	r2, [r2, #12]
 8003db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8003db6:	fb00 f202 	mul.w	r2, r0, r2
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <put_fat+0xb8>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	b25a      	sxtb	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e001      	b.n	8003dea <put_fat+0xbc>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	899b      	ldrh	r3, [r3, #12]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e04:	4413      	add	r3, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff fdff 	bl	8003a0c <move_window>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e12:	7ffb      	ldrb	r3, [r7, #31]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 809c 	bne.w	8003f52 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	899b      	ldrh	r3, [r3, #12]
 8003e24:	461a      	mov	r2, r3
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e2c:	fb00 f202 	mul.w	r2, r0, r2
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	440b      	add	r3, r1
 8003e34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <put_fat+0x11a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e00e      	b.n	8003e66 <put_fat+0x138>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	f023 030f 	bic.w	r3, r3, #15
 8003e52:	b25a      	sxtb	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	70da      	strb	r2, [r3, #3]
			break;
 8003e70:	e074      	b.n	8003f5c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	899b      	ldrh	r3, [r3, #12]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e86:	4413      	add	r3, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff fdbe 	bl	8003a0c <move_window>
 8003e90:	4603      	mov	r3, r0
 8003e92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d15d      	bne.n	8003f56 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	8992      	ldrh	r2, [r2, #12]
 8003ea8:	fbb3 f0f2 	udiv	r0, r3, r2
 8003eac:	fb00 f202 	mul.w	r2, r0, r2
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fb31 	bl	8003522 <st_word>
			fs->wflag = 1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	70da      	strb	r2, [r3, #3]
			break;
 8003ec6:	e049      	b.n	8003f5c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	899b      	ldrh	r3, [r3, #12]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003edc:	4413      	add	r3, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff fd93 	bl	8003a0c <move_window>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d134      	bne.n	8003f5a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	8992      	ldrh	r2, [r2, #12]
 8003f04:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f08:	fb00 f202 	mul.w	r2, r0, r2
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	440b      	add	r3, r1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fae3 	bl	80034dc <ld_dword>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f1c:	4323      	orrs	r3, r4
 8003f1e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	8992      	ldrh	r2, [r2, #12]
 8003f2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f32:	fb00 f202 	mul.w	r2, r0, r2
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	440b      	add	r3, r1
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fb0b 	bl	8003558 <st_dword>
			fs->wflag = 1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	70da      	strb	r2, [r3, #3]
			break;
 8003f48:	e008      	b.n	8003f5c <put_fat+0x22e>
		}
	}
 8003f4a:	bf00      	nop
 8003f4c:	e006      	b.n	8003f5c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f4e:	bf00      	nop
 8003f50:	e004      	b.n	8003f5c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f52:	bf00      	nop
 8003f54:	e002      	b.n	8003f5c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f56:	bf00      	nop
 8003f58:	e000      	b.n	8003f5c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f5a:	bf00      	nop
	return res;
 8003f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	; 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd90      	pop	{r4, r7, pc}

08003f66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d904      	bls.n	8003f8c <remove_chain+0x26>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d301      	bcc.n	8003f90 <remove_chain+0x2a>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e04b      	b.n	8004028 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00c      	beq.n	8003fb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003f96:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	69b8      	ldr	r0, [r7, #24]
 8003f9e:	f7ff fec6 	bl	8003d2e <put_fat>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <remove_chain+0x4a>
 8003fac:	7ffb      	ldrb	r3, [r7, #31]
 8003fae:	e03b      	b.n	8004028 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fde7 	bl	8003b86 <get_fat>
 8003fb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d031      	beq.n	8004024 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <remove_chain+0x64>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e02e      	b.n	8004028 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d101      	bne.n	8003fd6 <remove_chain+0x70>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e028      	b.n	8004028 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	69b8      	ldr	r0, [r7, #24]
 8003fdc:	f7ff fea7 	bl	8003d2e <put_fat>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <remove_chain+0x88>
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	e01c      	b.n	8004028 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	3b02      	subs	r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d20b      	bcs.n	8004014 <remove_chain+0xae>
			fs->free_clst++;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	791b      	ldrb	r3, [r3, #4]
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	d3c6      	bcc.n	8003fb0 <remove_chain+0x4a>
 8004022:	e000      	b.n	8004026 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004024:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <create_chain+0x2c>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	d31b      	bcc.n	8004094 <create_chain+0x64>
 800405c:	2301      	movs	r3, #1
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e018      	b.n	8004094 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fd8e 	bl	8003b86 <get_fat>
 800406a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d801      	bhi.n	8004076 <create_chain+0x46>
 8004072:	2301      	movs	r3, #1
 8004074:	e070      	b.n	8004158 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d101      	bne.n	8004082 <create_chain+0x52>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	e06a      	b.n	8004158 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	429a      	cmp	r2, r3
 800408a:	d201      	bcs.n	8004090 <create_chain+0x60>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	e063      	b.n	8004158 <create_chain+0x128>
		scl = clst;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3301      	adds	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d307      	bcc.n	80040b8 <create_chain+0x88>
				ncl = 2;
 80040a8:	2302      	movs	r3, #2
 80040aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d901      	bls.n	80040b8 <create_chain+0x88>
 80040b4:	2300      	movs	r3, #0
 80040b6:	e04f      	b.n	8004158 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80040b8:	69f9      	ldr	r1, [r7, #28]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fd63 	bl	8003b86 <get_fat>
 80040c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d003      	beq.n	80040d6 <create_chain+0xa6>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d101      	bne.n	80040da <create_chain+0xaa>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	e03e      	b.n	8004158 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d1da      	bne.n	8004098 <create_chain+0x68>
 80040e2:	2300      	movs	r3, #0
 80040e4:	e038      	b.n	8004158 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80040e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	6938      	ldr	r0, [r7, #16]
 80040f0:	f7ff fe1d 	bl	8003d2e <put_fat>
 80040f4:	4603      	mov	r3, r0
 80040f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <create_chain+0xe2>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	6938      	ldr	r0, [r7, #16]
 800410a:	f7ff fe10 	bl	8003d2e <put_fat>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d116      	bne.n	8004146 <create_chain+0x116>
		fs->last_clst = ncl;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	3b02      	subs	r3, #2
 8004128:	429a      	cmp	r2, r3
 800412a:	d804      	bhi.n	8004136 <create_chain+0x106>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	1e5a      	subs	r2, r3, #1
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	791b      	ldrb	r3, [r3, #4]
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	711a      	strb	r2, [r3, #4]
 8004144:	e007      	b.n	8004156 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004146:	7dfb      	ldrb	r3, [r7, #23]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <create_chain+0x122>
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
 8004150:	e000      	b.n	8004154 <create_chain+0x124>
 8004152:	2301      	movs	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004156:	69fb      	ldr	r3, [r7, #28]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	3304      	adds	r3, #4
 8004176:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	899b      	ldrh	r3, [r3, #12]
 800417c:	461a      	mov	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	fbb3 f3f2 	udiv	r3, r3, r2
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	8952      	ldrh	r2, [r2, #10]
 8004188:	fbb3 f3f2 	udiv	r3, r3, r2
 800418c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1d1a      	adds	r2, r3, #4
 8004192:	613a      	str	r2, [r7, #16]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <clmt_clust+0x42>
 800419e:	2300      	movs	r3, #0
 80041a0:	e010      	b.n	80041c4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d307      	bcc.n	80041ba <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3304      	adds	r3, #4
 80041b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80041b8:	e7e9      	b.n	800418e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80041ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4413      	add	r3, r2
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e6:	d204      	bcs.n	80041f2 <dir_sdi+0x22>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80041f2:	2302      	movs	r3, #2
 80041f4:	e071      	b.n	80042da <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <dir_sdi+0x46>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d902      	bls.n	8004216 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10c      	bne.n	8004236 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	8912      	ldrh	r2, [r2, #8]
 8004224:	4293      	cmp	r3, r2
 8004226:	d301      	bcc.n	800422c <dir_sdi+0x5c>
 8004228:	2302      	movs	r3, #2
 800422a:	e056      	b.n	80042da <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	61da      	str	r2, [r3, #28]
 8004234:	e02d      	b.n	8004292 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	895b      	ldrh	r3, [r3, #10]
 800423a:	461a      	mov	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	899b      	ldrh	r3, [r3, #12]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004246:	e019      	b.n	800427c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fc9a 	bl	8003b86 <get_fat>
 8004252:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d101      	bne.n	8004260 <dir_sdi+0x90>
 800425c:	2301      	movs	r3, #1
 800425e:	e03c      	b.n	80042da <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d904      	bls.n	8004270 <dir_sdi+0xa0>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d301      	bcc.n	8004274 <dir_sdi+0xa4>
 8004270:	2302      	movs	r3, #2
 8004272:	e032      	b.n	80042da <dir_sdi+0x10a>
			ofs -= csz;
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	429a      	cmp	r2, r3
 8004282:	d2e1      	bcs.n	8004248 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004284:	6979      	ldr	r1, [r7, #20]
 8004286:	6938      	ldr	r0, [r7, #16]
 8004288:	f7ff fc5e 	bl	8003b48 <clust2sect>
 800428c:	4602      	mov	r2, r0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <dir_sdi+0xd4>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e01a      	b.n	80042da <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	899b      	ldrh	r3, [r3, #12]
 80042ac:	4619      	mov	r1, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	899b      	ldrh	r3, [r3, #12]
 80042c4:	461a      	mov	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80042cc:	fb00 f202 	mul.w	r2, r0, r2
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	18ca      	adds	r2, r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	3320      	adds	r3, #32
 80042f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <dir_next+0x28>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004308:	d301      	bcc.n	800430e <dir_next+0x2c>
 800430a:	2304      	movs	r3, #4
 800430c:	e0bb      	b.n	8004486 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	899b      	ldrh	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	fbb3 f1f2 	udiv	r1, r3, r2
 800431a:	fb01 f202 	mul.w	r2, r1, r2
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 809d 	bne.w	8004460 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	8912      	ldrh	r2, [r2, #8]
 8004340:	4293      	cmp	r3, r2
 8004342:	f0c0 808d 	bcc.w	8004460 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	61da      	str	r2, [r3, #28]
 800434c:	2304      	movs	r3, #4
 800434e:	e09a      	b.n	8004486 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	899b      	ldrh	r3, [r3, #12]
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	fbb3 f3f2 	udiv	r3, r3, r2
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	8952      	ldrh	r2, [r2, #10]
 8004360:	3a01      	subs	r2, #1
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d17b      	bne.n	8004460 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f7ff fc08 	bl	8003b86 <get_fat>
 8004376:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d801      	bhi.n	8004382 <dir_next+0xa0>
 800437e:	2302      	movs	r3, #2
 8004380:	e081      	b.n	8004486 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d101      	bne.n	800438e <dir_next+0xac>
 800438a:	2301      	movs	r3, #1
 800438c:	e07b      	b.n	8004486 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	d359      	bcc.n	800444c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	61da      	str	r2, [r3, #28]
 80043a4:	2304      	movs	r3, #4
 80043a6:	e06e      	b.n	8004486 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7ff fe3d 	bl	8004030 <create_chain>
 80043b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <dir_next+0xe0>
 80043be:	2307      	movs	r3, #7
 80043c0:	e061      	b.n	8004486 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <dir_next+0xea>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e05c      	b.n	8004486 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d101      	bne.n	80043d8 <dir_next+0xf6>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e056      	b.n	8004486 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff fad3 	bl	8003984 <sync_window>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <dir_next+0x106>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e04e      	b.n	8004486 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	899b      	ldrh	r3, [r3, #12]
 80043f2:	461a      	mov	r2, r3
 80043f4:	2100      	movs	r1, #0
 80043f6:	f7ff f8fc 	bl	80035f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	6979      	ldr	r1, [r7, #20]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fba1 	bl	8003b48 <clust2sect>
 8004406:	4602      	mov	r2, r0
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	635a      	str	r2, [r3, #52]	; 0x34
 800440c:	e012      	b.n	8004434 <dir_next+0x152>
						fs->wflag = 1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fab5 	bl	8003984 <sync_window>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <dir_next+0x142>
 8004420:	2301      	movs	r3, #1
 8004422:	e030      	b.n	8004486 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	3301      	adds	r3, #1
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	635a      	str	r2, [r3, #52]	; 0x34
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	895b      	ldrh	r3, [r3, #10]
 8004438:	461a      	mov	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4293      	cmp	r3, r2
 800443e:	d3e6      	bcc.n	800440e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad2      	subs	r2, r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fb77 	bl	8003b48 <clust2sect>
 800445a:	4602      	mov	r2, r0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	899b      	ldrh	r3, [r3, #12]
 8004470:	461a      	mov	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	fbb3 f0f2 	udiv	r0, r3, r2
 8004478:	fb00 f202 	mul.w	r2, r0, r2
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	18ca      	adds	r2, r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b086      	sub	sp, #24
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800449e:	2100      	movs	r1, #0
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe95 	bl	80041d0 <dir_sdi>
 80044a6:	4603      	mov	r3, r0
 80044a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d12b      	bne.n	8004508 <dir_alloc+0x7a>
		n = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	4619      	mov	r1, r3
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff faa6 	bl	8003a0c <move_window>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11d      	bne.n	8004506 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2be5      	cmp	r3, #229	; 0xe5
 80044d2:	d004      	beq.n	80044de <dir_alloc+0x50>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d107      	bne.n	80044ee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3301      	adds	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d102      	bne.n	80044f2 <dir_alloc+0x64>
 80044ec:	e00c      	b.n	8004508 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80044f2:	2101      	movs	r1, #1
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fef4 	bl	80042e2 <dir_next>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0d7      	beq.n	80044b4 <dir_alloc+0x26>
 8004504:	e000      	b.n	8004508 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004506:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b04      	cmp	r3, #4
 800450c:	d101      	bne.n	8004512 <dir_alloc+0x84>
 800450e:	2307      	movs	r3, #7
 8004510:	75fb      	strb	r3, [r7, #23]
	return res;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	331a      	adds	r3, #26
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe ffbe 	bl	80034ac <ld_word>
 8004530:	4603      	mov	r3, r0
 8004532:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d109      	bne.n	8004550 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe ffb3 	bl	80034ac <ld_word>
 8004546:	4603      	mov	r3, r0
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004550:	68fb      	ldr	r3, [r7, #12]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	331a      	adds	r3, #26
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	b292      	uxth	r2, r2
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ffd6 	bl	8003522 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d109      	bne.n	8004592 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f103 0214 	add.w	r2, r3, #20
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b29b      	uxth	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7fe ffc8 	bl	8003522 <st_word>
	}
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	331a      	adds	r3, #26
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe ff7e 	bl	80034ac <ld_word>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <cmp_lfn+0x1e>
 80045b6:	2300      	movs	r3, #0
 80045b8:	e059      	b.n	800466e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80045d0:	2301      	movs	r3, #1
 80045d2:	81fb      	strh	r3, [r7, #14]
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e033      	b.n	8004642 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80045da:	4a27      	ldr	r2, [pc, #156]	; (8004678 <cmp_lfn+0xdc>)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe ff5f 	bl	80034ac <ld_word>
 80045ee:	4603      	mov	r3, r0
 80045f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01a      	beq.n	800462e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2bfe      	cmp	r3, #254	; 0xfe
 80045fc:	d812      	bhi.n	8004624 <cmp_lfn+0x88>
 80045fe:	89bb      	ldrh	r3, [r7, #12]
 8004600:	4618      	mov	r0, r3
 8004602:	f001 fed5 	bl	80063b0 <ff_wtoupper>
 8004606:	4603      	mov	r3, r0
 8004608:	461c      	mov	r4, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	617a      	str	r2, [r7, #20]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fec9 	bl	80063b0 <ff_wtoupper>
 800461e:	4603      	mov	r3, r0
 8004620:	429c      	cmp	r4, r3
 8004622:	d001      	beq.n	8004628 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004624:	2300      	movs	r3, #0
 8004626:	e022      	b.n	800466e <cmp_lfn+0xd2>
			}
			wc = uc;
 8004628:	89bb      	ldrh	r3, [r7, #12]
 800462a:	81fb      	strh	r3, [r7, #14]
 800462c:	e006      	b.n	800463c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800462e:	89bb      	ldrh	r3, [r7, #12]
 8004630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004634:	4293      	cmp	r3, r2
 8004636:	d001      	beq.n	800463c <cmp_lfn+0xa0>
 8004638:	2300      	movs	r3, #0
 800463a:	e018      	b.n	800466e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	3301      	adds	r3, #1
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b0c      	cmp	r3, #12
 8004646:	d9c8      	bls.n	80045da <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <cmp_lfn+0xd0>
 8004654:	89fb      	ldrh	r3, [r7, #14]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <cmp_lfn+0xd0>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <cmp_lfn+0xd0>
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800466c:	2301      	movs	r3, #1
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	bf00      	nop
 8004678:	08007744 	.word	0x08007744

0800467c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	460b      	mov	r3, r1
 800468c:	71fb      	strb	r3, [r7, #7]
 800468e:	4613      	mov	r3, r2
 8004690:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	330d      	adds	r3, #13
 8004696:	79ba      	ldrb	r2, [r7, #6]
 8004698:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	330b      	adds	r3, #11
 800469e:	220f      	movs	r2, #15
 80046a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	330c      	adds	r3, #12
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	331a      	adds	r3, #26
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe ff36 	bl	8003522 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	82fb      	strh	r3, [r7, #22]
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80046ce:	8afb      	ldrh	r3, [r7, #22]
 80046d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <put_lfn+0x6c>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80046e8:	4a17      	ldr	r2, [pc, #92]	; (8004748 <put_lfn+0xcc>)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4413      	add	r3, r2
 80046f6:	8afa      	ldrh	r2, [r7, #22]
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe ff11 	bl	8003522 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004700:	8afb      	ldrh	r3, [r7, #22]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <put_lfn+0x90>
 8004706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800470a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	3301      	adds	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d9da      	bls.n	80046ce <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004718:	8afb      	ldrh	r3, [r7, #22]
 800471a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471e:	4293      	cmp	r3, r2
 8004720:	d006      	beq.n	8004730 <put_lfn+0xb4>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <put_lfn+0xbc>
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004736:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	79fa      	ldrb	r2, [r7, #7]
 800473c:	701a      	strb	r2, [r3, #0]
}
 800473e:	bf00      	nop
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	08007744 	.word	0x08007744

0800474c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	; 0x30
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800475a:	220b      	movs	r2, #11
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7fe ff26 	bl	80035b0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b05      	cmp	r3, #5
 8004768:	d92b      	bls.n	80047c2 <gen_numname+0x76>
		sr = seq;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800476e:	e022      	b.n	80047b6 <gen_numname+0x6a>
			wc = *lfn++;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1c9a      	adds	r2, r3, #2
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800477a:	2300      	movs	r3, #0
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	e017      	b.n	80047b0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	005a      	lsls	r2, r3, #1
 8004784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800478e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <gen_numname+0x5e>
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80047a4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80047a8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	3301      	adds	r3, #1
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	d9e4      	bls.n	8004780 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1d8      	bne.n	8004770 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80047c2:	2307      	movs	r3, #7
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	3330      	adds	r3, #48	; 0x30
 80047d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80047d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047da:	2b39      	cmp	r3, #57	; 0x39
 80047dc:	d904      	bls.n	80047e8 <gen_numname+0x9c>
 80047de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047e2:	3307      	adds	r3, #7
 80047e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	1e5a      	subs	r2, r3, #1
 80047ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80047ee:	3330      	adds	r3, #48	; 0x30
 80047f0:	443b      	add	r3, r7
 80047f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80047f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1df      	bne.n	80047c6 <gen_numname+0x7a>
	ns[i] = '~';
 8004806:	f107 0214 	add.w	r2, r7, #20
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	4413      	add	r3, r2
 800480e:	227e      	movs	r2, #126	; 0x7e
 8004810:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	e002      	b.n	800481e <gen_numname+0xd2>
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	3301      	adds	r3, #1
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	429a      	cmp	r2, r3
 8004824:	d205      	bcs.n	8004832 <gen_numname+0xe6>
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b20      	cmp	r3, #32
 8004830:	d1f2      	bne.n	8004818 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	2b07      	cmp	r3, #7
 8004836:	d807      	bhi.n	8004848 <gen_numname+0xfc>
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	62ba      	str	r2, [r7, #40]	; 0x28
 800483e:	3330      	adds	r3, #48	; 0x30
 8004840:	443b      	add	r3, r7
 8004842:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004846:	e000      	b.n	800484a <gen_numname+0xfe>
 8004848:	2120      	movs	r1, #32
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	627a      	str	r2, [r7, #36]	; 0x24
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	460a      	mov	r2, r1
 8004856:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	2b07      	cmp	r3, #7
 800485c:	d9e9      	bls.n	8004832 <gen_numname+0xe6>
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	3730      	adds	r7, #48	; 0x30
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004874:	230b      	movs	r3, #11
 8004876:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	0852      	lsrs	r2, r2, #1
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	4313      	orrs	r3, r2
 8004882:	b2da      	uxtb	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	1c59      	adds	r1, r3, #1
 8004888:	6079      	str	r1, [r7, #4]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4413      	add	r3, r2
 800488e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3b01      	subs	r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ed      	bne.n	8004878 <sum_sfn+0x10>
	return sum;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80048b8:	2100      	movs	r1, #0
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fc88 	bl	80041d0 <dir_sdi>
 80048c0:	4603      	mov	r3, r0
 80048c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <dir_find+0x24>
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
 80048cc:	e0a9      	b.n	8004a22 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80048ce:	23ff      	movs	r3, #255	; 0xff
 80048d0:	753b      	strb	r3, [r7, #20]
 80048d2:	7d3b      	ldrb	r3, [r7, #20]
 80048d4:	757b      	strb	r3, [r7, #21]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4619      	mov	r1, r3
 80048e4:	6938      	ldr	r0, [r7, #16]
 80048e6:	f7ff f891 	bl	8003a0c <move_window>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f040 8090 	bne.w	8004a16 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80048fe:	7dbb      	ldrb	r3, [r7, #22]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <dir_find+0x60>
 8004904:	2304      	movs	r3, #4
 8004906:	75fb      	strb	r3, [r7, #23]
 8004908:	e08a      	b.n	8004a20 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	330b      	adds	r3, #11
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800491e:	7dbb      	ldrb	r3, [r7, #22]
 8004920:	2be5      	cmp	r3, #229	; 0xe5
 8004922:	d007      	beq.n	8004934 <dir_find+0x8a>
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <dir_find+0x98>
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b0f      	cmp	r3, #15
 8004932:	d006      	beq.n	8004942 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004934:	23ff      	movs	r3, #255	; 0xff
 8004936:	757b      	strb	r3, [r7, #21]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f04f 32ff 	mov.w	r2, #4294967295
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
 8004940:	e05e      	b.n	8004a00 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b0f      	cmp	r3, #15
 8004946:	d136      	bne.n	80049b6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d154      	bne.n	8004a00 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004956:	7dbb      	ldrb	r3, [r7, #22]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00d      	beq.n	800497c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	7b5b      	ldrb	r3, [r3, #13]
 8004966:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004968:	7dbb      	ldrb	r3, [r7, #22]
 800496a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496e:	75bb      	strb	r3, [r7, #22]
 8004970:	7dbb      	ldrb	r3, [r7, #22]
 8004972:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800497c:	7dba      	ldrb	r2, [r7, #22]
 800497e:	7d7b      	ldrb	r3, [r7, #21]
 8004980:	429a      	cmp	r2, r3
 8004982:	d115      	bne.n	80049b0 <dir_find+0x106>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	330d      	adds	r3, #13
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	7d3a      	ldrb	r2, [r7, #20]
 800498e:	429a      	cmp	r2, r3
 8004990:	d10e      	bne.n	80049b0 <dir_find+0x106>
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7ff fdfd 	bl	800459c <cmp_lfn>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <dir_find+0x106>
 80049a8:	7d7b      	ldrb	r3, [r7, #21]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e000      	b.n	80049b2 <dir_find+0x108>
 80049b0:	23ff      	movs	r3, #255	; 0xff
 80049b2:	757b      	strb	r3, [r7, #21]
 80049b4:	e024      	b.n	8004a00 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80049b6:	7d7b      	ldrb	r3, [r7, #21]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <dir_find+0x126>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff51 	bl	8004868 <sum_sfn>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	7d3b      	ldrb	r3, [r7, #20]
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d024      	beq.n	8004a1a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <dir_find+0x14a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a18      	ldr	r0, [r3, #32]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3324      	adds	r3, #36	; 0x24
 80049e6:	220b      	movs	r2, #11
 80049e8:	4619      	mov	r1, r3
 80049ea:	f7fe fe1d 	bl	8003628 <mem_cmp>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d014      	beq.n	8004a1e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80049f4:	23ff      	movs	r3, #255	; 0xff
 80049f6:	757b      	strb	r3, [r7, #21]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004a00:	2100      	movs	r1, #0
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fc6d 	bl	80042e2 <dir_next>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f43f af65 	beq.w	80048de <dir_find+0x34>
 8004a14:	e004      	b.n	8004a20 <dir_find+0x176>
		if (res != FR_OK) break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004a1e:	bf00      	nop

	return res;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004a40:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <dir_register+0x20>
 8004a48:	2306      	movs	r3, #6
 8004a4a:	e0e0      	b.n	8004c0e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a50:	e002      	b.n	8004a58 <dir_register+0x2c>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	3301      	adds	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f4      	bne.n	8004a52 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004a6e:	f107 030c 	add.w	r3, r7, #12
 8004a72:	220c      	movs	r2, #12
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fd9b 	bl	80035b0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d032      	beq.n	8004aea <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2240      	movs	r2, #64	; 0x40
 8004a88:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a90:	e016      	b.n	8004ac0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	f107 010c 	add.w	r1, r7, #12
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	f7ff fe53 	bl	800474c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff feff 	bl	80048aa <dir_find>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	3301      	adds	r3, #1
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	2b63      	cmp	r3, #99	; 0x63
 8004ac4:	d9e5      	bls.n	8004a92 <dir_register+0x66>
 8004ac6:	e000      	b.n	8004aca <dir_register+0x9e>
			if (res != FR_OK) break;
 8004ac8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	2b64      	cmp	r3, #100	; 0x64
 8004ace:	d101      	bne.n	8004ad4 <dir_register+0xa8>
 8004ad0:	2307      	movs	r3, #7
 8004ad2:	e09c      	b.n	8004c0e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d002      	beq.n	8004ae2 <dir_register+0xb6>
 8004adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ae0:	e095      	b.n	8004c0e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004ae2:	7dfa      	ldrb	r2, [r7, #23]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <dir_register+0xd8>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	330c      	adds	r3, #12
 8004af8:	4a47      	ldr	r2, [pc, #284]	; (8004c18 <dir_register+0x1ec>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	3301      	adds	r3, #1
 8004b02:	e000      	b.n	8004b06 <dir_register+0xda>
 8004b04:	2301      	movs	r3, #1
 8004b06:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004b08:	6a39      	ldr	r1, [r7, #32]
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fcbf 	bl	800448e <dir_alloc>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d148      	bne.n	8004bb0 <dir_register+0x184>
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d042      	beq.n	8004bb0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	015b      	lsls	r3, r3, #5
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fb4a 	bl	80041d0 <dir_sdi>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d132      	bne.n	8004bb0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3324      	adds	r3, #36	; 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fe8a 	bl	8004868 <sum_sfn>
 8004b54:	4603      	mov	r3, r0
 8004b56:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	69f8      	ldr	r0, [r7, #28]
 8004b60:	f7fe ff54 	bl	8003a0c <move_window>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11d      	bne.n	8004bae <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	6918      	ldr	r0, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a19      	ldr	r1, [r3, #32]
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	7efb      	ldrb	r3, [r7, #27]
 8004b80:	f7ff fd7c 	bl	800467c <put_lfn>
				fs->wflag = 1;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2201      	movs	r2, #1
 8004b88:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff fba8 	bl	80042e2 <dir_next>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d107      	bne.n	8004bb0 <dir_register+0x184>
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1d5      	bne.n	8004b58 <dir_register+0x12c>
 8004bac:	e000      	b.n	8004bb0 <dir_register+0x184>
				if (res != FR_OK) break;
 8004bae:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d128      	bne.n	8004c0a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	69f8      	ldr	r0, [r7, #28]
 8004bc0:	f7fe ff24 	bl	8003a0c <move_window>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d11b      	bne.n	8004c0a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fd09 	bl	80035f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a18      	ldr	r0, [r3, #32]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3324      	adds	r3, #36	; 0x24
 8004be8:	220b      	movs	r2, #11
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7fe fce0 	bl	80035b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	f002 0218 	and.w	r2, r2, #24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2201      	movs	r2, #1
 8004c08:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3730      	adds	r7, #48	; 0x30
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	4ec4ec4f 	.word	0x4ec4ec4f

08004c1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	61ba      	str	r2, [r7, #24]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c4c:	2b1f      	cmp	r3, #31
 8004c4e:	d940      	bls.n	8004cd2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c52:	2b2f      	cmp	r3, #47	; 0x2f
 8004c54:	d006      	beq.n	8004c64 <create_name+0x48>
 8004c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c58:	2b5c      	cmp	r3, #92	; 0x5c
 8004c5a:	d110      	bne.n	8004c7e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004c5c:	e002      	b.n	8004c64 <create_name+0x48>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	4413      	add	r3, r2
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b2f      	cmp	r3, #47	; 0x2f
 8004c6e:	d0f6      	beq.n	8004c5e <create_name+0x42>
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	4413      	add	r3, r2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b5c      	cmp	r3, #92	; 0x5c
 8004c7a:	d0f0      	beq.n	8004c5e <create_name+0x42>
			break;
 8004c7c:	e02a      	b.n	8004cd4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2bfe      	cmp	r3, #254	; 0xfe
 8004c82:	d901      	bls.n	8004c88 <create_name+0x6c>
 8004c84:	2306      	movs	r3, #6
 8004c86:	e17d      	b.n	8004f84 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fb50 	bl	8006338 <ff_convert>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <create_name+0x8a>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e16e      	b.n	8004f84 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8004caa:	d809      	bhi.n	8004cc0 <create_name+0xa4>
 8004cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cae:	4619      	mov	r1, r3
 8004cb0:	488d      	ldr	r0, [pc, #564]	; (8004ee8 <create_name+0x2cc>)
 8004cb2:	f7fe fce0 	bl	8003676 <chk_chr>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <create_name+0xa4>
 8004cbc:	2306      	movs	r3, #6
 8004cbe:	e161      	b.n	8004f84 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	617a      	str	r2, [r7, #20]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004cd0:	e7b4      	b.n	8004c3c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004cd2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	441a      	add	r2, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce0:	2b1f      	cmp	r3, #31
 8004ce2:	d801      	bhi.n	8004ce8 <create_name+0xcc>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	e000      	b.n	8004cea <create_name+0xce>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004cee:	e011      	b.n	8004d14 <create_name+0xf8>
		w = lfn[di - 1];
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d002      	beq.n	8004d0e <create_name+0xf2>
 8004d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d0c:	d106      	bne.n	8004d1c <create_name+0x100>
		di--;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ea      	bne.n	8004cf0 <create_name+0xd4>
 8004d1a:	e000      	b.n	8004d1e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004d1c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <create_name+0x118>
 8004d30:	2306      	movs	r3, #6
 8004d32:	e127      	b.n	8004f84 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	220b      	movs	r2, #11
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fc58 	bl	80035f2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e002      	b.n	8004d4e <create_name+0x132>
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d0f5      	beq.n	8004d48 <create_name+0x12c>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	2b2e      	cmp	r3, #46	; 0x2e
 8004d68:	d0ee      	beq.n	8004d48 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <create_name+0x168>
 8004d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d74:	f043 0303 	orr.w	r3, r3, #3
 8004d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004d7c:	e002      	b.n	8004d84 <create_name+0x168>
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <create_name+0x182>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d90:	3b01      	subs	r3, #1
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d9c:	d1ef      	bne.n	8004d7e <create_name+0x162>

	i = b = 0; ni = 8;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004da4:	2300      	movs	r3, #0
 8004da6:	623b      	str	r3, [r7, #32]
 8004da8:	2308      	movs	r3, #8
 8004daa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	61ba      	str	r2, [r7, #24]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8090 	beq.w	8004ee4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d006      	beq.n	8004dd8 <create_name+0x1bc>
 8004dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8004dce:	d10a      	bne.n	8004de6 <create_name+0x1ca>
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d006      	beq.n	8004de6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ddc:	f043 0303 	orr.w	r3, r3, #3
 8004de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004de4:	e07d      	b.n	8004ee2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d203      	bcs.n	8004df6 <create_name+0x1da>
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d123      	bne.n	8004e3e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	2b0b      	cmp	r3, #11
 8004dfa:	d106      	bne.n	8004e0a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e00:	f043 0303 	orr.w	r3, r3, #3
 8004e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e08:	e075      	b.n	8004ef6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d005      	beq.n	8004e1e <create_name+0x202>
 8004e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e16:	f043 0303 	orr.w	r3, r3, #3
 8004e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d866      	bhi.n	8004ef4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	623b      	str	r3, [r7, #32]
 8004e2e:	230b      	movs	r3, #11
 8004e30:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e3c:	e051      	b.n	8004ee2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e40:	2b7f      	cmp	r3, #127	; 0x7f
 8004e42:	d914      	bls.n	8004e6e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 fa75 	bl	8006338 <ff_convert>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <create_name+0x246>
 8004e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e5a:	3b80      	subs	r3, #128	; 0x80
 8004e5c:	4a23      	ldr	r2, [pc, #140]	; (8004eec <create_name+0x2d0>)
 8004e5e:	5cd3      	ldrb	r3, [r2, r3]
 8004e60:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e66:	f043 0302 	orr.w	r3, r3, #2
 8004e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <create_name+0x268>
 8004e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e76:	4619      	mov	r1, r3
 8004e78:	481d      	ldr	r0, [pc, #116]	; (8004ef0 <create_name+0x2d4>)
 8004e7a:	f7fe fbfc 	bl	8003676 <chk_chr>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004e84:	235f      	movs	r3, #95	; 0x5f
 8004e86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8c:	f043 0303 	orr.w	r3, r3, #3
 8004e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e94:	e01b      	b.n	8004ece <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d909      	bls.n	8004eb0 <create_name+0x294>
 8004e9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e9e:	2b5a      	cmp	r3, #90	; 0x5a
 8004ea0:	d806      	bhi.n	8004eb0 <create_name+0x294>
					b |= 2;
 8004ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ea6:	f043 0302 	orr.w	r3, r3, #2
 8004eaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004eae:	e00e      	b.n	8004ece <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb2:	2b60      	cmp	r3, #96	; 0x60
 8004eb4:	d90b      	bls.n	8004ece <create_name+0x2b2>
 8004eb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb8:	2b7a      	cmp	r3, #122	; 0x7a
 8004eba:	d808      	bhi.n	8004ece <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eca:	3b20      	subs	r3, #32
 8004ecc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	623a      	str	r2, [r7, #32]
 8004ed4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ed6:	b2d1      	uxtb	r1, r2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	4413      	add	r3, r2
 8004edc:	460a      	mov	r2, r1
 8004ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004ee2:	e763      	b.n	8004dac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004ee4:	bf00      	nop
 8004ee6:	e006      	b.n	8004ef6 <create_name+0x2da>
 8004ee8:	0800766c 	.word	0x0800766c
 8004eec:	080076c4 	.word	0x080076c4
 8004ef0:	08007678 	.word	0x08007678
			if (si > di) break;			/* No extension */
 8004ef4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004efc:	2be5      	cmp	r3, #229	; 0xe5
 8004efe:	d103      	bne.n	8004f08 <create_name+0x2ec>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2205      	movs	r2, #5
 8004f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d104      	bne.n	8004f18 <create_name+0x2fc>
 8004f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d005      	beq.n	8004f30 <create_name+0x314>
 8004f24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d105      	bne.n	8004f3c <create_name+0x320>
 8004f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d117      	bne.n	8004f78 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d105      	bne.n	8004f60 <create_name+0x344>
 8004f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f58:	f043 0310 	orr.w	r3, r3, #16
 8004f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d105      	bne.n	8004f78 <create_name+0x35c>
 8004f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f70:	f043 0308 	orr.w	r3, r3, #8
 8004f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004f82:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004fa0:	e002      	b.n	8004fa8 <follow_path+0x1c>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b2f      	cmp	r3, #47	; 0x2f
 8004fae:	d0f8      	beq.n	8004fa2 <follow_path+0x16>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b5c      	cmp	r3, #92	; 0x5c
 8004fb6:	d0f4      	beq.n	8004fa2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b1f      	cmp	r3, #31
 8004fc4:	d80a      	bhi.n	8004fdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2280      	movs	r2, #128	; 0x80
 8004fca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff f8fd 	bl	80041d0 <dir_sdi>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]
 8004fda:	e048      	b.n	800506e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fdc:	463b      	mov	r3, r7
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fe1b 	bl	8004c1c <create_name>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d139      	bne.n	8005064 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fc5a 	bl	80048aa <dir_find>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005000:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d12c      	bne.n	8005068 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800500e:	7afb      	ldrb	r3, [r7, #11]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d127      	bne.n	8005068 <follow_path+0xdc>
 8005018:	2305      	movs	r3, #5
 800501a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800501c:	e024      	b.n	8005068 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800501e:	7afb      	ldrb	r3, [r7, #11]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d121      	bne.n	800506c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	799b      	ldrb	r3, [r3, #6]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005034:	2305      	movs	r3, #5
 8005036:	75fb      	strb	r3, [r7, #23]
 8005038:	e019      	b.n	800506e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	8992      	ldrh	r2, [r2, #12]
 8005048:	fbb3 f0f2 	udiv	r0, r3, r2
 800504c:	fb00 f202 	mul.w	r2, r0, r2
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	440b      	add	r3, r1
 8005054:	4619      	mov	r1, r3
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fa60 	bl	800451c <ld_clust>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005062:	e7bb      	b.n	8004fdc <follow_path+0x50>
			if (res != FR_OK) break;
 8005064:	bf00      	nop
 8005066:	e002      	b.n	800506e <follow_path+0xe2>
				break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800506c:	bf00      	nop
			}
		}
	}

	return res;
 800506e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005080:	f04f 33ff 	mov.w	r3, #4294967295
 8005084:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d031      	beq.n	80050f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e002      	b.n	800509c <get_ldnumber+0x24>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3301      	adds	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b1f      	cmp	r3, #31
 80050a2:	d903      	bls.n	80050ac <get_ldnumber+0x34>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b3a      	cmp	r3, #58	; 0x3a
 80050aa:	d1f4      	bne.n	8005096 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b3a      	cmp	r3, #58	; 0x3a
 80050b2:	d11c      	bne.n	80050ee <get_ldnumber+0x76>
			tp = *path;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	60fa      	str	r2, [r7, #12]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	3b30      	subs	r3, #48	; 0x30
 80050c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b09      	cmp	r3, #9
 80050ca:	d80e      	bhi.n	80050ea <get_ldnumber+0x72>
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d10a      	bne.n	80050ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <get_ldnumber+0x72>
					vol = (int)i;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	3301      	adds	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	e002      	b.n	80050f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80050f2:	693b      	ldr	r3, [r7, #16]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	70da      	strb	r2, [r3, #3]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f04f 32ff 	mov.w	r2, #4294967295
 8005116:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fe fc76 	bl	8003a0c <move_window>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <check_fs+0x2a>
 8005126:	2304      	movs	r3, #4
 8005128:	e038      	b.n	800519c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3338      	adds	r3, #56	; 0x38
 800512e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe f9ba 	bl	80034ac <ld_word>
 8005138:	4603      	mov	r3, r0
 800513a:	461a      	mov	r2, r3
 800513c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <check_fs+0x48>
 8005144:	2303      	movs	r3, #3
 8005146:	e029      	b.n	800519c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800514e:	2be9      	cmp	r3, #233	; 0xe9
 8005150:	d009      	beq.n	8005166 <check_fs+0x66>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005158:	2beb      	cmp	r3, #235	; 0xeb
 800515a:	d11e      	bne.n	800519a <check_fs+0x9a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005162:	2b90      	cmp	r3, #144	; 0x90
 8005164:	d119      	bne.n	800519a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3338      	adds	r3, #56	; 0x38
 800516a:	3336      	adds	r3, #54	; 0x36
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe f9b5 	bl	80034dc <ld_dword>
 8005172:	4603      	mov	r3, r0
 8005174:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005178:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <check_fs+0xa4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <check_fs+0x82>
 800517e:	2300      	movs	r3, #0
 8005180:	e00c      	b.n	800519c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3338      	adds	r3, #56	; 0x38
 8005186:	3352      	adds	r3, #82	; 0x52
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe f9a7 	bl	80034dc <ld_dword>
 800518e:	4603      	mov	r3, r0
 8005190:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <check_fs+0xa8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d101      	bne.n	800519a <check_fs+0x9a>
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800519a:	2302      	movs	r3, #2
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	00544146 	.word	0x00544146
 80051a8:	33544146 	.word	0x33544146

080051ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b096      	sub	sp, #88	; 0x58
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff ff59 	bl	8005078 <get_ldnumber>
 80051c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da01      	bge.n	80051d2 <find_volume+0x26>
 80051ce:	230b      	movs	r3, #11
 80051d0:	e265      	b.n	800569e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80051d2:	4a9f      	ldr	r2, [pc, #636]	; (8005450 <find_volume+0x2a4>)
 80051d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <find_volume+0x3a>
 80051e2:	230c      	movs	r3, #12
 80051e4:	e25b      	b.n	800569e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe f8b5 	bl	8003370 <disk_status>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800520c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10c      	bne.n	8005232 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <find_volume+0x82>
 800521e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800522a:	230a      	movs	r3, #10
 800522c:	e237      	b.n	800569e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800522e:	2300      	movs	r3, #0
 8005230:	e235      	b.n	800569e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	b2da      	uxtb	r2, r3
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe f8ad 	bl	80033a4 <disk_initialize>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005250:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800525c:	2303      	movs	r3, #3
 800525e:	e21e      	b.n	800569e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <find_volume+0xca>
 8005266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005272:	230a      	movs	r3, #10
 8005274:	e213      	b.n	800569e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	7858      	ldrb	r0, [r3, #1]
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	330c      	adds	r3, #12
 800527e:	461a      	mov	r2, r3
 8005280:	2102      	movs	r1, #2
 8005282:	f7fe f8f5 	bl	8003470 <disk_ioctl>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <find_volume+0xe4>
 800528c:	2301      	movs	r3, #1
 800528e:	e206      	b.n	800569e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	899b      	ldrh	r3, [r3, #12]
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005298:	d80d      	bhi.n	80052b6 <find_volume+0x10a>
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	899b      	ldrh	r3, [r3, #12]
 800529e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a2:	d308      	bcc.n	80052b6 <find_volume+0x10a>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	899b      	ldrh	r3, [r3, #12]
 80052a8:	461a      	mov	r2, r3
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	899b      	ldrh	r3, [r3, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <find_volume+0x10e>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e1f1      	b.n	800569e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80052be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052c2:	f7ff ff1d 	bl	8005100 <check_fs>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80052cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d149      	bne.n	8005368 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052d4:	2300      	movs	r3, #0
 80052d6:	643b      	str	r3, [r7, #64]	; 0x40
 80052d8:	e01e      	b.n	8005318 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80052e8:	4413      	add	r3, r2
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	3304      	adds	r3, #4
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <find_volume+0x158>
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	3308      	adds	r3, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe f8ee 	bl	80034dc <ld_dword>
 8005300:	4602      	mov	r2, r0
 8005302:	e000      	b.n	8005306 <find_volume+0x15a>
 8005304:	2200      	movs	r2, #0
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	3358      	adds	r3, #88	; 0x58
 800530c:	443b      	add	r3, r7
 800530e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	3301      	adds	r3, #1
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
 8005318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531a:	2b03      	cmp	r3, #3
 800531c:	d9dd      	bls.n	80052da <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800531e:	2300      	movs	r3, #0
 8005320:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <find_volume+0x182>
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	3b01      	subs	r3, #1
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800532e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	3358      	adds	r3, #88	; 0x58
 8005334:	443b      	add	r3, r7
 8005336:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800533a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800533c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <find_volume+0x1a2>
 8005342:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005346:	f7ff fedb 	bl	8005100 <check_fs>
 800534a:	4603      	mov	r3, r0
 800534c:	e000      	b.n	8005350 <find_volume+0x1a4>
 800534e:	2303      	movs	r3, #3
 8005350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005358:	2b01      	cmp	r3, #1
 800535a:	d905      	bls.n	8005368 <find_volume+0x1bc>
 800535c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535e:	3301      	adds	r3, #1
 8005360:	643b      	str	r3, [r7, #64]	; 0x40
 8005362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005364:	2b03      	cmp	r3, #3
 8005366:	d9e2      	bls.n	800532e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800536c:	2b04      	cmp	r3, #4
 800536e:	d101      	bne.n	8005374 <find_volume+0x1c8>
 8005370:	2301      	movs	r3, #1
 8005372:	e194      	b.n	800569e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005378:	2b01      	cmp	r3, #1
 800537a:	d901      	bls.n	8005380 <find_volume+0x1d4>
 800537c:	230d      	movs	r3, #13
 800537e:	e18e      	b.n	800569e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	3338      	adds	r3, #56	; 0x38
 8005384:	330b      	adds	r3, #11
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe f890 	bl	80034ac <ld_word>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	899b      	ldrh	r3, [r3, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <find_volume+0x1f0>
 8005398:	230d      	movs	r3, #13
 800539a:	e180      	b.n	800569e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	3338      	adds	r3, #56	; 0x38
 80053a0:	3316      	adds	r3, #22
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe f882 	bl	80034ac <ld_word>
 80053a8:	4603      	mov	r3, r0
 80053aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <find_volume+0x214>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	3338      	adds	r3, #56	; 0x38
 80053b6:	3324      	adds	r3, #36	; 0x24
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe f88f 	bl	80034dc <ld_dword>
 80053be:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	789b      	ldrb	r3, [r3, #2]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d005      	beq.n	80053e4 <find_volume+0x238>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	789b      	ldrb	r3, [r3, #2]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d001      	beq.n	80053e4 <find_volume+0x238>
 80053e0:	230d      	movs	r3, #13
 80053e2:	e15c      	b.n	800569e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	789b      	ldrb	r3, [r3, #2]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	895b      	ldrh	r3, [r3, #10]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <find_volume+0x26c>
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	895b      	ldrh	r3, [r3, #10]
 800540a:	461a      	mov	r2, r3
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	895b      	ldrh	r3, [r3, #10]
 8005410:	3b01      	subs	r3, #1
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <find_volume+0x270>
 8005418:	230d      	movs	r3, #13
 800541a:	e140      	b.n	800569e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	3338      	adds	r3, #56	; 0x38
 8005420:	3311      	adds	r3, #17
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe f842 	bl	80034ac <ld_word>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	891b      	ldrh	r3, [r3, #8]
 8005434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005436:	8992      	ldrh	r2, [r2, #12]
 8005438:	0952      	lsrs	r2, r2, #5
 800543a:	b292      	uxth	r2, r2
 800543c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005440:	fb01 f202 	mul.w	r2, r1, r2
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <find_volume+0x2a8>
 800544c:	230d      	movs	r3, #13
 800544e:	e126      	b.n	800569e <find_volume+0x4f2>
 8005450:	2000220c 	.word	0x2000220c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	3338      	adds	r3, #56	; 0x38
 8005458:	3313      	adds	r3, #19
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe f826 	bl	80034ac <ld_word>
 8005460:	4603      	mov	r3, r0
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <find_volume+0x2cc>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	3338      	adds	r3, #56	; 0x38
 800546e:	3320      	adds	r3, #32
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe f833 	bl	80034dc <ld_dword>
 8005476:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	3338      	adds	r3, #56	; 0x38
 800547c:	330e      	adds	r3, #14
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe f814 	bl	80034ac <ld_word>
 8005484:	4603      	mov	r3, r0
 8005486:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005488:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <find_volume+0x2e6>
 800548e:	230d      	movs	r3, #13
 8005490:	e105      	b.n	800569e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005492:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	4413      	add	r3, r2
 8005498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800549a:	8911      	ldrh	r1, [r2, #8]
 800549c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800549e:	8992      	ldrh	r2, [r2, #12]
 80054a0:	0952      	lsrs	r2, r2, #5
 80054a2:	b292      	uxth	r2, r2
 80054a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80054a8:	b292      	uxth	r2, r2
 80054aa:	4413      	add	r3, r2
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80054ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d201      	bcs.n	80054ba <find_volume+0x30e>
 80054b6:	230d      	movs	r3, #13
 80054b8:	e0f1      	b.n	800569e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80054ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054c2:	8952      	ldrh	r2, [r2, #10]
 80054c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <find_volume+0x328>
 80054d0:	230d      	movs	r3, #13
 80054d2:	e0e4      	b.n	800569e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80054d4:	2303      	movs	r3, #3
 80054d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d802      	bhi.n	80054ea <find_volume+0x33e>
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d802      	bhi.n	80054fa <find_volume+0x34e>
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	1c9a      	adds	r2, r3, #2
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005506:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005508:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800550a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550c:	441a      	add	r2, r3
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005512:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	441a      	add	r2, r3
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800551c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005520:	2b03      	cmp	r3, #3
 8005522:	d11e      	bne.n	8005562 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	3338      	adds	r3, #56	; 0x38
 8005528:	332a      	adds	r3, #42	; 0x2a
 800552a:	4618      	mov	r0, r3
 800552c:	f7fd ffbe 	bl	80034ac <ld_word>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <find_volume+0x38e>
 8005536:	230d      	movs	r3, #13
 8005538:	e0b1      	b.n	800569e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	891b      	ldrh	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <find_volume+0x39a>
 8005542:	230d      	movs	r3, #13
 8005544:	e0ab      	b.n	800569e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	3338      	adds	r3, #56	; 0x38
 800554a:	332c      	adds	r3, #44	; 0x2c
 800554c:	4618      	mov	r0, r3
 800554e:	f7fd ffc5 	bl	80034dc <ld_dword>
 8005552:	4602      	mov	r2, r0
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	647b      	str	r3, [r7, #68]	; 0x44
 8005560:	e01f      	b.n	80055a2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	891b      	ldrh	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <find_volume+0x3c2>
 800556a:	230d      	movs	r3, #13
 800556c:	e097      	b.n	800569e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005574:	441a      	add	r2, r3
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800557a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800557e:	2b02      	cmp	r3, #2
 8005580:	d103      	bne.n	800558a <find_volume+0x3de>
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	e00a      	b.n	80055a0 <find_volume+0x3f4>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	4613      	mov	r3, r2
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	4413      	add	r3, r2
 8005594:	085a      	lsrs	r2, r3, #1
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80055a0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	6a1a      	ldr	r2, [r3, #32]
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	899b      	ldrh	r3, [r3, #12]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ae:	440b      	add	r3, r1
 80055b0:	3b01      	subs	r3, #1
 80055b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055b4:	8989      	ldrh	r1, [r1, #12]
 80055b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d201      	bcs.n	80055c2 <find_volume+0x416>
 80055be:	230d      	movs	r3, #13
 80055c0:	e06d      	b.n	800569e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295
 80055c8:	619a      	str	r2, [r3, #24]
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	2280      	movs	r2, #128	; 0x80
 80055d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80055d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d149      	bne.n	8005674 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	3338      	adds	r3, #56	; 0x38
 80055e4:	3330      	adds	r3, #48	; 0x30
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd ff60 	bl	80034ac <ld_word>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d140      	bne.n	8005674 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80055f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f4:	3301      	adds	r3, #1
 80055f6:	4619      	mov	r1, r3
 80055f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055fa:	f7fe fa07 	bl	8003a0c <move_window>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d137      	bne.n	8005674 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	2200      	movs	r2, #0
 8005608:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	3338      	adds	r3, #56	; 0x38
 800560e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd ff4a 	bl	80034ac <ld_word>
 8005618:	4603      	mov	r3, r0
 800561a:	461a      	mov	r2, r3
 800561c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005620:	429a      	cmp	r2, r3
 8005622:	d127      	bne.n	8005674 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	4618      	mov	r0, r3
 800562a:	f7fd ff57 	bl	80034dc <ld_dword>
 800562e:	4603      	mov	r3, r0
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <find_volume+0x4fc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d11e      	bne.n	8005674 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	3338      	adds	r3, #56	; 0x38
 800563a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800563e:	4618      	mov	r0, r3
 8005640:	f7fd ff4c 	bl	80034dc <ld_dword>
 8005644:	4603      	mov	r3, r0
 8005646:	4a19      	ldr	r2, [pc, #100]	; (80056ac <find_volume+0x500>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d113      	bne.n	8005674 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	3338      	adds	r3, #56	; 0x38
 8005650:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005654:	4618      	mov	r0, r3
 8005656:	f7fd ff41 	bl	80034dc <ld_dword>
 800565a:	4602      	mov	r2, r0
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	3338      	adds	r3, #56	; 0x38
 8005664:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005668:	4618      	mov	r0, r3
 800566a:	f7fd ff37 	bl	80034dc <ld_dword>
 800566e:	4602      	mov	r2, r0
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800567a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <find_volume+0x504>)
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <find_volume+0x504>)
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <find_volume+0x504>)
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	4a08      	ldr	r2, [pc, #32]	; (80056b4 <find_volume+0x508>)
 8005694:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005696:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005698:	f7fe f950 	bl	800393c <clear_lock>
#endif
	return FR_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3758      	adds	r7, #88	; 0x58
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	41615252 	.word	0x41615252
 80056ac:	61417272 	.word	0x61417272
 80056b0:	20002210 	.word	0x20002210
 80056b4:	20002234 	.word	0x20002234

080056b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80056c2:	2309      	movs	r3, #9
 80056c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01c      	beq.n	8005706 <validate+0x4e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d018      	beq.n	8005706 <validate+0x4e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d013      	beq.n	8005706 <validate+0x4e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	889a      	ldrh	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	88db      	ldrh	r3, [r3, #6]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d10c      	bne.n	8005706 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fd fe3c 	bl	8003370 <disk_status>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <validate+0x4e>
			res = FR_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <validate+0x5a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	e000      	b.n	8005714 <validate+0x5c>
 8005712:	2300      	movs	r3, #0
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	6013      	str	r3, [r2, #0]
	return res;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005736:	f107 0310 	add.w	r3, r7, #16
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff fc9c 	bl	8005078 <get_ldnumber>
 8005740:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	da01      	bge.n	800574c <f_mount+0x28>
 8005748:	230b      	movs	r3, #11
 800574a:	e02b      	b.n	80057a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800574c:	4a17      	ldr	r2, [pc, #92]	; (80057ac <f_mount+0x88>)
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005754:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800575c:	69b8      	ldr	r0, [r7, #24]
 800575e:	f7fe f8ed 	bl	800393c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	490d      	ldr	r1, [pc, #52]	; (80057ac <f_mount+0x88>)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <f_mount+0x66>
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <f_mount+0x6a>
 800578a:	2300      	movs	r3, #0
 800578c:	e00a      	b.n	80057a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800578e:	f107 010c 	add.w	r1, r7, #12
 8005792:	f107 0308 	add.w	r3, r7, #8
 8005796:	2200      	movs	r2, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fd07 	bl	80051ac <find_volume>
 800579e:	4603      	mov	r3, r0
 80057a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	2000220c 	.word	0x2000220c

080057b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b09a      	sub	sp, #104	; 0x68
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <f_open+0x18>
 80057c4:	2309      	movs	r3, #9
 80057c6:	e1bb      	b.n	8005b40 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80057d0:	79fa      	ldrb	r2, [r7, #7]
 80057d2:	f107 0114 	add.w	r1, r7, #20
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fce6 	bl	80051ac <find_volume>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80057e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f040 819f 	bne.w	8005b2e <f_open+0x37e>
		dj.obj.fs = fs;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	f107 0318 	add.w	r3, r7, #24
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff fbc5 	bl	8004f8c <follow_path>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005808:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11a      	bne.n	8005846 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005810:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005814:	b25b      	sxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	da03      	bge.n	8005822 <f_open+0x72>
				res = FR_INVALID_NAME;
 800581a:	2306      	movs	r3, #6
 800581c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005820:	e011      	b.n	8005846 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	f107 0318 	add.w	r3, r7, #24
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd ff36 	bl	80036ac <chk_lock>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	f003 031c 	and.w	r3, r3, #28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d07f      	beq.n	8005950 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005850:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005854:	2b00      	cmp	r3, #0
 8005856:	d017      	beq.n	8005888 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005858:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800585c:	2b04      	cmp	r3, #4
 800585e:	d10e      	bne.n	800587e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005860:	f7fd ff80 	bl	8003764 <enq_lock>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <f_open+0xc8>
 800586a:	f107 0318 	add.w	r3, r7, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f8dc 	bl	8004a2c <dir_register>
 8005874:	4603      	mov	r3, r0
 8005876:	e000      	b.n	800587a <f_open+0xca>
 8005878:	2312      	movs	r3, #18
 800587a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	f043 0308 	orr.w	r3, r3, #8
 8005884:	71fb      	strb	r3, [r7, #7]
 8005886:	e010      	b.n	80058aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005888:	7fbb      	ldrb	r3, [r7, #30]
 800588a:	f003 0311 	and.w	r3, r3, #17
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <f_open+0xea>
					res = FR_DENIED;
 8005892:	2307      	movs	r3, #7
 8005894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005898:	e007      	b.n	80058aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <f_open+0xfa>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80058aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d168      	bne.n	8005984 <f_open+0x1d4>
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d063      	beq.n	8005984 <f_open+0x1d4>
				dw = GET_FATTIME();
 80058bc:	f7fd fcfa 	bl	80032b4 <get_fattime>
 80058c0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	330e      	adds	r3, #14
 80058c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fd fe45 	bl	8003558 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	3316      	adds	r3, #22
 80058d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fd fe3f 	bl	8003558 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	330b      	adds	r3, #11
 80058de:	2220      	movs	r2, #32
 80058e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe fe17 	bl	800451c <ld_clust>
 80058ee:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058f4:	2200      	movs	r2, #0
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe fe2f 	bl	800455a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	331c      	adds	r3, #28
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd fe28 	bl	8003558 <st_dword>
					fs->wflag = 1;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2201      	movs	r2, #1
 800590c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800590e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005910:	2b00      	cmp	r3, #0
 8005912:	d037      	beq.n	8005984 <f_open+0x1d4>
						dw = fs->winsect;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800591a:	f107 0318 	add.w	r3, r7, #24
 800591e:	2200      	movs	r2, #0
 8005920:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe fb1f 	bl	8003f66 <remove_chain>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800592e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005932:	2b00      	cmp	r3, #0
 8005934:	d126      	bne.n	8005984 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe f866 	bl	8003a0c <move_window>
 8005940:	4603      	mov	r3, r0
 8005942:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800594a:	3a01      	subs	r2, #1
 800594c:	615a      	str	r2, [r3, #20]
 800594e:	e019      	b.n	8005984 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005950:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005954:	2b00      	cmp	r3, #0
 8005956:	d115      	bne.n	8005984 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005958:	7fbb      	ldrb	r3, [r7, #30]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <f_open+0x1ba>
					res = FR_NO_FILE;
 8005962:	2304      	movs	r3, #4
 8005964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005968:	e00c      	b.n	8005984 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <f_open+0x1d4>
 8005974:	7fbb      	ldrb	r3, [r7, #30]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <f_open+0x1d4>
						res = FR_DENIED;
 800597e:	2307      	movs	r3, #7
 8005980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005984:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005988:	2b00      	cmp	r3, #0
 800598a:	d128      	bne.n	80059de <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80059a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf14      	ite	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	2300      	moveq	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	f107 0318 	add.w	r3, r7, #24
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fd feef 	bl	80037a8 <inc_lock>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <f_open+0x22e>
 80059d8:	2302      	movs	r3, #2
 80059da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80059de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 80a3 	bne.w	8005b2e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ec:	4611      	mov	r1, r2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fd94 	bl	800451c <ld_clust>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	331c      	adds	r3, #28
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fd fd6c 	bl	80034dc <ld_dword>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	88da      	ldrh	r2, [r3, #6]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	79fa      	ldrb	r2, [r7, #7]
 8005a22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3330      	adds	r3, #48	; 0x30
 8005a3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fd fdd6 	bl	80035f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d06e      	beq.n	8005b2e <f_open+0x37e>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d06a      	beq.n	8005b2e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	895b      	ldrh	r3, [r3, #10]
 8005a64:	461a      	mov	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	899b      	ldrh	r3, [r3, #12]
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a7c:	e016      	b.n	8005aac <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe f87f 	bl	8003b86 <get_fat>
 8005a88:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d802      	bhi.n	8005a96 <f_open+0x2e6>
 8005a90:	2302      	movs	r3, #2
 8005a92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d102      	bne.n	8005aa4 <f_open+0x2f4>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005aa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d103      	bne.n	8005abc <f_open+0x30c>
 8005ab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d8e0      	bhi.n	8005a7e <f_open+0x2ce>
				}
				fp->clust = clst;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ac0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005ac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d131      	bne.n	8005b2e <f_open+0x37e>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	899b      	ldrh	r3, [r3, #12]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ad6:	fb01 f202 	mul.w	r2, r1, r2
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d026      	beq.n	8005b2e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe f82f 	bl	8003b48 <clust2sect>
 8005aea:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <f_open+0x34a>
						res = FR_INT_ERR;
 8005af2:	2302      	movs	r3, #2
 8005af4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005af8:	e019      	b.n	8005b2e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	899b      	ldrh	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b02:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	441a      	add	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	7858      	ldrb	r0, [r3, #1]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f7fd fc67 	bl	80033f0 <disk_read>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <f_open+0x37e>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005b2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <f_open+0x38c>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005b3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3768      	adds	r7, #104	; 0x68
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08e      	sub	sp, #56	; 0x38
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f107 0214 	add.w	r2, r7, #20
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fda5 	bl	80056b8 <validate>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <f_read+0x44>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	7d5b      	ldrb	r3, [r3, #21]
 8005b80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <f_read+0x4a>
 8005b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b90:	e135      	b.n	8005dfe <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	7d1b      	ldrb	r3, [r3, #20]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <f_read+0x5a>
 8005b9e:	2307      	movs	r3, #7
 8005ba0:	e12d      	b.n	8005dfe <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	f240 811e 	bls.w	8005df4 <f_read+0x2ac>
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005bbc:	e11a      	b.n	8005df4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	8992      	ldrh	r2, [r2, #12]
 8005bc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bca:	fb01 f202 	mul.w	r2, r1, r2
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f040 80d5 	bne.w	8005d80 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	8992      	ldrh	r2, [r2, #12]
 8005bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	8952      	ldrh	r2, [r2, #10]
 8005be6:	3a01      	subs	r2, #1
 8005be8:	4013      	ands	r3, r2
 8005bea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d12f      	bne.n	8005c52 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8005c00:	e013      	b.n	8005c2a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7fe faa5 	bl	8004160 <clmt_clust>
 8005c16:	6338      	str	r0, [r7, #48]	; 0x30
 8005c18:	e007      	b.n	8005c2a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7fd ffaf 	bl	8003b86 <get_fat>
 8005c28:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d804      	bhi.n	8005c3a <f_read+0xf2>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2202      	movs	r2, #2
 8005c34:	755a      	strb	r2, [r3, #21]
 8005c36:	2302      	movs	r3, #2
 8005c38:	e0e1      	b.n	8005dfe <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d104      	bne.n	8005c4c <f_read+0x104>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	755a      	strb	r2, [r3, #21]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0d8      	b.n	8005dfe <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c50:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7fd ff74 	bl	8003b48 <clust2sect>
 8005c60:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d104      	bne.n	8005c72 <f_read+0x12a>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	755a      	strb	r2, [r3, #21]
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e0c5      	b.n	8005dfe <f_read+0x2b6>
			sect += csect;
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	899b      	ldrh	r3, [r3, #12]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d041      	beq.n	8005d12 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	4413      	add	r3, r2
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	8952      	ldrh	r2, [r2, #10]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d905      	bls.n	8005ca8 <f_read+0x160>
					cc = fs->csize - csect;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	895b      	ldrh	r3, [r3, #10]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	7858      	ldrb	r0, [r3, #1]
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cb2:	f7fd fb9d 	bl	80033f0 <disk_read>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <f_read+0x17e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	755a      	strb	r2, [r3, #21]
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e09b      	b.n	8005dfe <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	7d1b      	ldrb	r3, [r3, #20]
 8005cca:	b25b      	sxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	da18      	bge.n	8005d02 <f_read+0x1ba>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d911      	bls.n	8005d02 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1a      	ldr	r2, [r3, #32]
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	8992      	ldrh	r2, [r2, #12]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	18d0      	adds	r0, r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	899b      	ldrh	r3, [r3, #12]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f7fd fc57 	bl	80035b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	899b      	ldrh	r3, [r3, #12]
 8005d06:	461a      	mov	r2, r3
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005d10:	e05c      	b.n	8005dcc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d02e      	beq.n	8005d7a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	7d1b      	ldrb	r3, [r3, #20]
 8005d20:	b25b      	sxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	da18      	bge.n	8005d58 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	7858      	ldrb	r0, [r3, #1]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	2301      	movs	r3, #1
 8005d36:	f7fd fb7b 	bl	8003430 <disk_write>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <f_read+0x202>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	755a      	strb	r2, [r3, #21]
 8005d46:	2301      	movs	r3, #1
 8005d48:	e059      	b.n	8005dfe <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	7d1b      	ldrb	r3, [r3, #20]
 8005d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	7858      	ldrb	r0, [r3, #1]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d62:	2301      	movs	r3, #1
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	f7fd fb43 	bl	80033f0 <disk_read>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <f_read+0x232>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	755a      	strb	r2, [r3, #21]
 8005d76:	2301      	movs	r3, #1
 8005d78:	e041      	b.n	8005dfe <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	899b      	ldrh	r3, [r3, #12]
 8005d84:	4618      	mov	r0, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	8992      	ldrh	r2, [r2, #12]
 8005d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d92:	fb01 f202 	mul.w	r2, r1, r2
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	1ac3      	subs	r3, r0, r3
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d901      	bls.n	8005da8 <f_read+0x260>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	8992      	ldrh	r2, [r2, #12]
 8005db6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dba:	fb00 f202 	mul.w	r2, r0, r2
 8005dbe:	1a9b      	subs	r3, r3, r2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dc8:	f7fd fbf2 	bl	80035b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	4413      	add	r3, r2
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	619a      	str	r2, [r3, #24]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	441a      	add	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f47f aee1 	bne.w	8005bbe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3738      	adds	r7, #56	; 0x38
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b08c      	sub	sp, #48	; 0x30
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f107 0210 	add.w	r2, r7, #16
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fc46 	bl	80056b8 <validate>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005e32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d107      	bne.n	8005e4a <f_write+0x44>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	7d5b      	ldrb	r3, [r3, #21]
 8005e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <f_write+0x4a>
 8005e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e4e:	e16a      	b.n	8006126 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	7d1b      	ldrb	r3, [r3, #20]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <f_write+0x5a>
 8005e5c:	2307      	movs	r3, #7
 8005e5e:	e162      	b.n	8006126 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	441a      	add	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	f080 814c 	bcs.w	800610a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005e7a:	e146      	b.n	800610a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	8992      	ldrh	r2, [r2, #12]
 8005e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e88:	fb01 f202 	mul.w	r2, r1, r2
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 80f1 	bne.w	8006076 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	8992      	ldrh	r2, [r2, #12]
 8005e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	8952      	ldrh	r2, [r2, #10]
 8005ea4:	3a01      	subs	r2, #1
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d143      	bne.n	8005f38 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10c      	bne.n	8005ed2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11a      	bne.n	8005efa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe f8b1 	bl	8004030 <create_chain>
 8005ece:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ed0:	e013      	b.n	8005efa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f7fe f93d 	bl	8004160 <clmt_clust>
 8005ee6:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ee8:	e007      	b.n	8005efa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7fe f89c 	bl	8004030 <create_chain>
 8005ef8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8109 	beq.w	8006114 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d104      	bne.n	8005f12 <f_write+0x10c>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	755a      	strb	r2, [r3, #21]
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e109      	b.n	8006126 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d104      	bne.n	8005f24 <f_write+0x11e>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	755a      	strb	r2, [r3, #21]
 8005f20:	2301      	movs	r3, #1
 8005f22:	e100      	b.n	8006126 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <f_write+0x132>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	7d1b      	ldrb	r3, [r3, #20]
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da18      	bge.n	8005f74 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	7858      	ldrb	r0, [r3, #1]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	2301      	movs	r3, #1
 8005f52:	f7fd fa6d 	bl	8003430 <disk_write>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <f_write+0x160>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	755a      	strb	r2, [r3, #21]
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0df      	b.n	8006126 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	7d1b      	ldrb	r3, [r3, #20]
 8005f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7fd fde3 	bl	8003b48 <clust2sect>
 8005f82:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <f_write+0x18e>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	755a      	strb	r2, [r3, #21]
 8005f90:	2302      	movs	r3, #2
 8005f92:	e0c8      	b.n	8006126 <f_write+0x320>
			sect += csect;
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	4413      	add	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	899b      	ldrh	r3, [r3, #12]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d043      	beq.n	8006038 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	8952      	ldrh	r2, [r2, #10]
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d905      	bls.n	8005fca <f_write+0x1c4>
					cc = fs->csize - csect;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	895b      	ldrh	r3, [r3, #10]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	7858      	ldrb	r0, [r3, #1]
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	69f9      	ldr	r1, [r7, #28]
 8005fd4:	f7fd fa2c 	bl	8003430 <disk_write>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <f_write+0x1e2>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	755a      	strb	r2, [r3, #21]
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e09e      	b.n	8006126 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d918      	bls.n	8006028 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	8992      	ldrh	r2, [r2, #12]
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	18d1      	adds	r1, r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	899b      	ldrh	r3, [r3, #12]
 8006014:	461a      	mov	r2, r3
 8006016:	f7fd facb 	bl	80035b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	7d1b      	ldrb	r3, [r3, #20]
 800601e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	899b      	ldrh	r3, [r3, #12]
 800602c:	461a      	mov	r2, r3
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006036:	e04b      	b.n	80060d0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	429a      	cmp	r2, r3
 8006040:	d016      	beq.n	8006070 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800604a:	429a      	cmp	r2, r3
 800604c:	d210      	bcs.n	8006070 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	7858      	ldrb	r0, [r3, #1]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006058:	2301      	movs	r3, #1
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	f7fd f9c8 	bl	80033f0 <disk_read>
 8006060:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	755a      	strb	r2, [r3, #21]
 800606c:	2301      	movs	r3, #1
 800606e:	e05a      	b.n	8006126 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	899b      	ldrh	r3, [r3, #12]
 800607a:	4618      	mov	r0, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	8992      	ldrh	r2, [r2, #12]
 8006084:	fbb3 f1f2 	udiv	r1, r3, r2
 8006088:	fb01 f202 	mul.w	r2, r1, r2
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	1ac3      	subs	r3, r0, r3
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d901      	bls.n	800609e <f_write+0x298>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	8992      	ldrh	r2, [r2, #12]
 80060ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80060b0:	fb00 f202 	mul.w	r2, r0, r2
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	440b      	add	r3, r1
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fd fa77 	bl	80035b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	7d1b      	ldrb	r3, [r3, #20]
 80060c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	4413      	add	r3, r2
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	441a      	add	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	619a      	str	r2, [r3, #24]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	bf38      	it	cc
 80060f0:	461a      	movcc	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	441a      	add	r2, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f47f aeb5 	bne.w	8005e7c <f_write+0x76>
 8006112:	e000      	b.n	8006116 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006114:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	7d1b      	ldrb	r3, [r3, #20]
 800611a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800611e:	b2da      	uxtb	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b086      	sub	sp, #24
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f107 0208 	add.w	r2, r7, #8
 800613c:	4611      	mov	r1, r2
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff faba 	bl	80056b8 <validate>
 8006144:	4603      	mov	r3, r0
 8006146:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d168      	bne.n	8006220 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7d1b      	ldrb	r3, [r3, #20]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d062      	beq.n	8006220 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7d1b      	ldrb	r3, [r3, #20]
 800615e:	b25b      	sxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	da15      	bge.n	8006190 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	7858      	ldrb	r0, [r3, #1]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	2301      	movs	r3, #1
 8006174:	f7fd f95c 	bl	8003430 <disk_write>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <f_sync+0x54>
 800617e:	2301      	movs	r3, #1
 8006180:	e04f      	b.n	8006222 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	7d1b      	ldrb	r3, [r3, #20]
 8006186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618a:	b2da      	uxtb	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006190:	f7fd f890 	bl	80032b4 <get_fattime>
 8006194:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fd fc34 	bl	8003a0c <move_window>
 80061a4:	4603      	mov	r3, r0
 80061a6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d138      	bne.n	8006220 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	330b      	adds	r3, #11
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	330b      	adds	r3, #11
 80061be:	f042 0220 	orr.w	r2, r2, #32
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	f7fe f9c2 	bl	800455a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f103 021c 	add.w	r2, r3, #28
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7fd f9b8 	bl	8003558 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3316      	adds	r3, #22
 80061ec:	6939      	ldr	r1, [r7, #16]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd f9b2 	bl	8003558 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3312      	adds	r3, #18
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fd f991 	bl	8003522 <st_word>
					fs->wflag = 1;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2201      	movs	r2, #1
 8006204:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fd fc2d 	bl	8003a68 <sync_fs>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	7d1b      	ldrb	r3, [r3, #20]
 8006216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621a:	b2da      	uxtb	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006220:	7dfb      	ldrb	r3, [r7, #23]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff ff7b 	bl	800612e <f_sync>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d118      	bne.n	8006274 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f107 0208 	add.w	r2, r7, #8
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fa34 	bl	80056b8 <validate>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10c      	bne.n	8006274 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fd fb30 	bl	80038c4 <dec_lock>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800628e:	2301      	movs	r3, #1
 8006290:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006296:	4b1f      	ldr	r3, [pc, #124]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 8006298:	7a5b      	ldrb	r3, [r3, #9]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d131      	bne.n	8006304 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80062a0:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062a2:	7a5b      	ldrb	r3, [r3, #9]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062aa:	2100      	movs	r1, #0
 80062ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80062ae:	4b19      	ldr	r3, [pc, #100]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062b0:	7a5b      	ldrb	r3, [r3, #9]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4a17      	ldr	r2, [pc, #92]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80062be:	4b15      	ldr	r3, [pc, #84]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062c0:	7a5b      	ldrb	r3, [r3, #9]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062c8:	4413      	add	r3, r2
 80062ca:	79fa      	ldrb	r2, [r7, #7]
 80062cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062d0:	7a5b      	ldrb	r3, [r3, #9]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	b2d1      	uxtb	r1, r2
 80062d8:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <FATFS_LinkDriverEx+0x94>)
 80062da:	7251      	strb	r1, [r2, #9]
 80062dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80062de:	7dbb      	ldrb	r3, [r7, #22]
 80062e0:	3330      	adds	r3, #48	; 0x30
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	3301      	adds	r3, #1
 80062ec:	223a      	movs	r2, #58	; 0x3a
 80062ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	3302      	adds	r3, #2
 80062f4:	222f      	movs	r2, #47	; 0x2f
 80062f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	3303      	adds	r3, #3
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20002434 	.word	0x20002434

08006318 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006322:	2200      	movs	r2, #0
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff ffaa 	bl	8006280 <FATFS_LinkDriverEx>
 800632c:	4603      	mov	r3, r0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	6039      	str	r1, [r7, #0]
 8006342:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	2b7f      	cmp	r3, #127	; 0x7f
 8006348:	d802      	bhi.n	8006350 <ff_convert+0x18>
		c = chr;
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	81fb      	strh	r3, [r7, #14]
 800634e:	e025      	b.n	800639c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	2bff      	cmp	r3, #255	; 0xff
 800635a:	d805      	bhi.n	8006368 <ff_convert+0x30>
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	3b80      	subs	r3, #128	; 0x80
 8006360:	4a12      	ldr	r2, [pc, #72]	; (80063ac <ff_convert+0x74>)
 8006362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006366:	e000      	b.n	800636a <ff_convert+0x32>
 8006368:	2300      	movs	r3, #0
 800636a:	81fb      	strh	r3, [r7, #14]
 800636c:	e016      	b.n	800639c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800636e:	2300      	movs	r3, #0
 8006370:	81fb      	strh	r3, [r7, #14]
 8006372:	e009      	b.n	8006388 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <ff_convert+0x74>)
 8006378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	429a      	cmp	r2, r3
 8006380:	d006      	beq.n	8006390 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006382:	89fb      	ldrh	r3, [r7, #14]
 8006384:	3301      	adds	r3, #1
 8006386:	81fb      	strh	r3, [r7, #14]
 8006388:	89fb      	ldrh	r3, [r7, #14]
 800638a:	2b7f      	cmp	r3, #127	; 0x7f
 800638c:	d9f2      	bls.n	8006374 <ff_convert+0x3c>
 800638e:	e000      	b.n	8006392 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006390:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006392:	89fb      	ldrh	r3, [r7, #14]
 8006394:	3380      	adds	r3, #128	; 0x80
 8006396:	b29b      	uxth	r3, r3
 8006398:	b2db      	uxtb	r3, r3
 800639a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800639c:	89fb      	ldrh	r3, [r7, #14]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	08007754 	.word	0x08007754

080063b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c0:	d201      	bcs.n	80063c6 <ff_wtoupper+0x16>
 80063c2:	4b3e      	ldr	r3, [pc, #248]	; (80064bc <ff_wtoupper+0x10c>)
 80063c4:	e000      	b.n	80063c8 <ff_wtoupper+0x18>
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <ff_wtoupper+0x110>)
 80063c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	1c9a      	adds	r2, r3, #2
 80063ce:	617a      	str	r2, [r7, #20]
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80063d4:	8a7b      	ldrh	r3, [r7, #18]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d068      	beq.n	80064ac <ff_wtoupper+0xfc>
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	8a7b      	ldrh	r3, [r7, #18]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d364      	bcc.n	80064ac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	617a      	str	r2, [r7, #20]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	823b      	strh	r3, [r7, #16]
 80063ec:	8a3b      	ldrh	r3, [r7, #16]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	81fb      	strh	r3, [r7, #14]
 80063f2:	8a3b      	ldrh	r3, [r7, #16]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80063f8:	88fa      	ldrh	r2, [r7, #6]
 80063fa:	8a79      	ldrh	r1, [r7, #18]
 80063fc:	8a3b      	ldrh	r3, [r7, #16]
 80063fe:	440b      	add	r3, r1
 8006400:	429a      	cmp	r2, r3
 8006402:	da49      	bge.n	8006498 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006404:	89fb      	ldrh	r3, [r7, #14]
 8006406:	2b08      	cmp	r3, #8
 8006408:	d84f      	bhi.n	80064aa <ff_wtoupper+0xfa>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <ff_wtoupper+0x60>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006435 	.word	0x08006435
 8006414:	08006447 	.word	0x08006447
 8006418:	0800645d 	.word	0x0800645d
 800641c:	08006465 	.word	0x08006465
 8006420:	0800646d 	.word	0x0800646d
 8006424:	08006475 	.word	0x08006475
 8006428:	0800647d 	.word	0x0800647d
 800642c:	08006485 	.word	0x08006485
 8006430:	0800648d 	.word	0x0800648d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	8a7b      	ldrh	r3, [r7, #18]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	80fb      	strh	r3, [r7, #6]
 8006444:	e027      	b.n	8006496 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	8a7b      	ldrh	r3, [r7, #18]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	b29b      	uxth	r3, r3
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	80fb      	strh	r3, [r7, #6]
 800645a:	e01c      	b.n	8006496 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	3b10      	subs	r3, #16
 8006460:	80fb      	strh	r3, [r7, #6]
 8006462:	e018      	b.n	8006496 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	3b20      	subs	r3, #32
 8006468:	80fb      	strh	r3, [r7, #6]
 800646a:	e014      	b.n	8006496 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	3b30      	subs	r3, #48	; 0x30
 8006470:	80fb      	strh	r3, [r7, #6]
 8006472:	e010      	b.n	8006496 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	3b1a      	subs	r3, #26
 8006478:	80fb      	strh	r3, [r7, #6]
 800647a:	e00c      	b.n	8006496 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	3308      	adds	r3, #8
 8006480:	80fb      	strh	r3, [r7, #6]
 8006482:	e008      	b.n	8006496 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	3b50      	subs	r3, #80	; 0x50
 8006488:	80fb      	strh	r3, [r7, #6]
 800648a:	e004      	b.n	8006496 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006492:	80fb      	strh	r3, [r7, #6]
 8006494:	bf00      	nop
			}
			break;
 8006496:	e008      	b.n	80064aa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006498:	89fb      	ldrh	r3, [r7, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d195      	bne.n	80063ca <ff_wtoupper+0x1a>
 800649e:	8a3b      	ldrh	r3, [r7, #16]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80064a8:	e78f      	b.n	80063ca <ff_wtoupper+0x1a>
			break;
 80064aa:	bf00      	nop
	}

	return chr;
 80064ac:	88fb      	ldrh	r3, [r7, #6]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	08007854 	.word	0x08007854
 80064c0:	08007a48 	.word	0x08007a48

080064c4 <__errno>:
 80064c4:	4b01      	ldr	r3, [pc, #4]	; (80064cc <__errno+0x8>)
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000024 	.word	0x20000024

080064d0 <__libc_init_array>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4d0d      	ldr	r5, [pc, #52]	; (8006508 <__libc_init_array+0x38>)
 80064d4:	4c0d      	ldr	r4, [pc, #52]	; (800650c <__libc_init_array+0x3c>)
 80064d6:	1b64      	subs	r4, r4, r5
 80064d8:	10a4      	asrs	r4, r4, #2
 80064da:	2600      	movs	r6, #0
 80064dc:	42a6      	cmp	r6, r4
 80064de:	d109      	bne.n	80064f4 <__libc_init_array+0x24>
 80064e0:	4d0b      	ldr	r5, [pc, #44]	; (8006510 <__libc_init_array+0x40>)
 80064e2:	4c0c      	ldr	r4, [pc, #48]	; (8006514 <__libc_init_array+0x44>)
 80064e4:	f001 f832 	bl	800754c <_init>
 80064e8:	1b64      	subs	r4, r4, r5
 80064ea:	10a4      	asrs	r4, r4, #2
 80064ec:	2600      	movs	r6, #0
 80064ee:	42a6      	cmp	r6, r4
 80064f0:	d105      	bne.n	80064fe <__libc_init_array+0x2e>
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f8:	4798      	blx	r3
 80064fa:	3601      	adds	r6, #1
 80064fc:	e7ee      	b.n	80064dc <__libc_init_array+0xc>
 80064fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006502:	4798      	blx	r3
 8006504:	3601      	adds	r6, #1
 8006506:	e7f2      	b.n	80064ee <__libc_init_array+0x1e>
 8006508:	08007ba4 	.word	0x08007ba4
 800650c:	08007ba4 	.word	0x08007ba4
 8006510:	08007ba4 	.word	0x08007ba4
 8006514:	08007ba8 	.word	0x08007ba8

08006518 <memcpy>:
 8006518:	440a      	add	r2, r1
 800651a:	4291      	cmp	r1, r2
 800651c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006520:	d100      	bne.n	8006524 <memcpy+0xc>
 8006522:	4770      	bx	lr
 8006524:	b510      	push	{r4, lr}
 8006526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800652e:	4291      	cmp	r1, r2
 8006530:	d1f9      	bne.n	8006526 <memcpy+0xe>
 8006532:	bd10      	pop	{r4, pc}

08006534 <memset>:
 8006534:	4402      	add	r2, r0
 8006536:	4603      	mov	r3, r0
 8006538:	4293      	cmp	r3, r2
 800653a:	d100      	bne.n	800653e <memset+0xa>
 800653c:	4770      	bx	lr
 800653e:	f803 1b01 	strb.w	r1, [r3], #1
 8006542:	e7f9      	b.n	8006538 <memset+0x4>

08006544 <iprintf>:
 8006544:	b40f      	push	{r0, r1, r2, r3}
 8006546:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <iprintf+0x2c>)
 8006548:	b513      	push	{r0, r1, r4, lr}
 800654a:	681c      	ldr	r4, [r3, #0]
 800654c:	b124      	cbz	r4, 8006558 <iprintf+0x14>
 800654e:	69a3      	ldr	r3, [r4, #24]
 8006550:	b913      	cbnz	r3, 8006558 <iprintf+0x14>
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fa5e 	bl	8006a14 <__sinit>
 8006558:	ab05      	add	r3, sp, #20
 800655a:	9a04      	ldr	r2, [sp, #16]
 800655c:	68a1      	ldr	r1, [r4, #8]
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fc67 	bl	8006e34 <_vfiprintf_r>
 8006566:	b002      	add	sp, #8
 8006568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656c:	b004      	add	sp, #16
 800656e:	4770      	bx	lr
 8006570:	20000024 	.word	0x20000024

08006574 <_puts_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	460e      	mov	r6, r1
 8006578:	4605      	mov	r5, r0
 800657a:	b118      	cbz	r0, 8006584 <_puts_r+0x10>
 800657c:	6983      	ldr	r3, [r0, #24]
 800657e:	b90b      	cbnz	r3, 8006584 <_puts_r+0x10>
 8006580:	f000 fa48 	bl	8006a14 <__sinit>
 8006584:	69ab      	ldr	r3, [r5, #24]
 8006586:	68ac      	ldr	r4, [r5, #8]
 8006588:	b913      	cbnz	r3, 8006590 <_puts_r+0x1c>
 800658a:	4628      	mov	r0, r5
 800658c:	f000 fa42 	bl	8006a14 <__sinit>
 8006590:	4b2c      	ldr	r3, [pc, #176]	; (8006644 <_puts_r+0xd0>)
 8006592:	429c      	cmp	r4, r3
 8006594:	d120      	bne.n	80065d8 <_puts_r+0x64>
 8006596:	686c      	ldr	r4, [r5, #4]
 8006598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800659a:	07db      	lsls	r3, r3, #31
 800659c:	d405      	bmi.n	80065aa <_puts_r+0x36>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	0598      	lsls	r0, r3, #22
 80065a2:	d402      	bmi.n	80065aa <_puts_r+0x36>
 80065a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a6:	f000 fad3 	bl	8006b50 <__retarget_lock_acquire_recursive>
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	0719      	lsls	r1, r3, #28
 80065ae:	d51d      	bpl.n	80065ec <_puts_r+0x78>
 80065b0:	6923      	ldr	r3, [r4, #16]
 80065b2:	b1db      	cbz	r3, 80065ec <_puts_r+0x78>
 80065b4:	3e01      	subs	r6, #1
 80065b6:	68a3      	ldr	r3, [r4, #8]
 80065b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065bc:	3b01      	subs	r3, #1
 80065be:	60a3      	str	r3, [r4, #8]
 80065c0:	bb39      	cbnz	r1, 8006612 <_puts_r+0x9e>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da38      	bge.n	8006638 <_puts_r+0xc4>
 80065c6:	4622      	mov	r2, r4
 80065c8:	210a      	movs	r1, #10
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f848 	bl	8006660 <__swbuf_r>
 80065d0:	3001      	adds	r0, #1
 80065d2:	d011      	beq.n	80065f8 <_puts_r+0x84>
 80065d4:	250a      	movs	r5, #10
 80065d6:	e011      	b.n	80065fc <_puts_r+0x88>
 80065d8:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <_puts_r+0xd4>)
 80065da:	429c      	cmp	r4, r3
 80065dc:	d101      	bne.n	80065e2 <_puts_r+0x6e>
 80065de:	68ac      	ldr	r4, [r5, #8]
 80065e0:	e7da      	b.n	8006598 <_puts_r+0x24>
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <_puts_r+0xd8>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	bf08      	it	eq
 80065e8:	68ec      	ldreq	r4, [r5, #12]
 80065ea:	e7d5      	b.n	8006598 <_puts_r+0x24>
 80065ec:	4621      	mov	r1, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 f888 	bl	8006704 <__swsetup_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d0dd      	beq.n	80065b4 <_puts_r+0x40>
 80065f8:	f04f 35ff 	mov.w	r5, #4294967295
 80065fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fe:	07da      	lsls	r2, r3, #31
 8006600:	d405      	bmi.n	800660e <_puts_r+0x9a>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	059b      	lsls	r3, r3, #22
 8006606:	d402      	bmi.n	800660e <_puts_r+0x9a>
 8006608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660a:	f000 faa2 	bl	8006b52 <__retarget_lock_release_recursive>
 800660e:	4628      	mov	r0, r5
 8006610:	bd70      	pop	{r4, r5, r6, pc}
 8006612:	2b00      	cmp	r3, #0
 8006614:	da04      	bge.n	8006620 <_puts_r+0xac>
 8006616:	69a2      	ldr	r2, [r4, #24]
 8006618:	429a      	cmp	r2, r3
 800661a:	dc06      	bgt.n	800662a <_puts_r+0xb6>
 800661c:	290a      	cmp	r1, #10
 800661e:	d004      	beq.n	800662a <_puts_r+0xb6>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	6022      	str	r2, [r4, #0]
 8006626:	7019      	strb	r1, [r3, #0]
 8006628:	e7c5      	b.n	80065b6 <_puts_r+0x42>
 800662a:	4622      	mov	r2, r4
 800662c:	4628      	mov	r0, r5
 800662e:	f000 f817 	bl	8006660 <__swbuf_r>
 8006632:	3001      	adds	r0, #1
 8006634:	d1bf      	bne.n	80065b6 <_puts_r+0x42>
 8006636:	e7df      	b.n	80065f8 <_puts_r+0x84>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	250a      	movs	r5, #10
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	6022      	str	r2, [r4, #0]
 8006640:	701d      	strb	r5, [r3, #0]
 8006642:	e7db      	b.n	80065fc <_puts_r+0x88>
 8006644:	08007b28 	.word	0x08007b28
 8006648:	08007b48 	.word	0x08007b48
 800664c:	08007b08 	.word	0x08007b08

08006650 <puts>:
 8006650:	4b02      	ldr	r3, [pc, #8]	; (800665c <puts+0xc>)
 8006652:	4601      	mov	r1, r0
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	f7ff bf8d 	b.w	8006574 <_puts_r>
 800665a:	bf00      	nop
 800665c:	20000024 	.word	0x20000024

08006660 <__swbuf_r>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	460e      	mov	r6, r1
 8006664:	4614      	mov	r4, r2
 8006666:	4605      	mov	r5, r0
 8006668:	b118      	cbz	r0, 8006672 <__swbuf_r+0x12>
 800666a:	6983      	ldr	r3, [r0, #24]
 800666c:	b90b      	cbnz	r3, 8006672 <__swbuf_r+0x12>
 800666e:	f000 f9d1 	bl	8006a14 <__sinit>
 8006672:	4b21      	ldr	r3, [pc, #132]	; (80066f8 <__swbuf_r+0x98>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d12b      	bne.n	80066d0 <__swbuf_r+0x70>
 8006678:	686c      	ldr	r4, [r5, #4]
 800667a:	69a3      	ldr	r3, [r4, #24]
 800667c:	60a3      	str	r3, [r4, #8]
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	071a      	lsls	r2, r3, #28
 8006682:	d52f      	bpl.n	80066e4 <__swbuf_r+0x84>
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	b36b      	cbz	r3, 80066e4 <__swbuf_r+0x84>
 8006688:	6923      	ldr	r3, [r4, #16]
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	1ac0      	subs	r0, r0, r3
 800668e:	6963      	ldr	r3, [r4, #20]
 8006690:	b2f6      	uxtb	r6, r6
 8006692:	4283      	cmp	r3, r0
 8006694:	4637      	mov	r7, r6
 8006696:	dc04      	bgt.n	80066a2 <__swbuf_r+0x42>
 8006698:	4621      	mov	r1, r4
 800669a:	4628      	mov	r0, r5
 800669c:	f000 f926 	bl	80068ec <_fflush_r>
 80066a0:	bb30      	cbnz	r0, 80066f0 <__swbuf_r+0x90>
 80066a2:	68a3      	ldr	r3, [r4, #8]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	60a3      	str	r3, [r4, #8]
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	6022      	str	r2, [r4, #0]
 80066ae:	701e      	strb	r6, [r3, #0]
 80066b0:	6963      	ldr	r3, [r4, #20]
 80066b2:	3001      	adds	r0, #1
 80066b4:	4283      	cmp	r3, r0
 80066b6:	d004      	beq.n	80066c2 <__swbuf_r+0x62>
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	07db      	lsls	r3, r3, #31
 80066bc:	d506      	bpl.n	80066cc <__swbuf_r+0x6c>
 80066be:	2e0a      	cmp	r6, #10
 80066c0:	d104      	bne.n	80066cc <__swbuf_r+0x6c>
 80066c2:	4621      	mov	r1, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 f911 	bl	80068ec <_fflush_r>
 80066ca:	b988      	cbnz	r0, 80066f0 <__swbuf_r+0x90>
 80066cc:	4638      	mov	r0, r7
 80066ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <__swbuf_r+0x9c>)
 80066d2:	429c      	cmp	r4, r3
 80066d4:	d101      	bne.n	80066da <__swbuf_r+0x7a>
 80066d6:	68ac      	ldr	r4, [r5, #8]
 80066d8:	e7cf      	b.n	800667a <__swbuf_r+0x1a>
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <__swbuf_r+0xa0>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	bf08      	it	eq
 80066e0:	68ec      	ldreq	r4, [r5, #12]
 80066e2:	e7ca      	b.n	800667a <__swbuf_r+0x1a>
 80066e4:	4621      	mov	r1, r4
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 f80c 	bl	8006704 <__swsetup_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d0cb      	beq.n	8006688 <__swbuf_r+0x28>
 80066f0:	f04f 37ff 	mov.w	r7, #4294967295
 80066f4:	e7ea      	b.n	80066cc <__swbuf_r+0x6c>
 80066f6:	bf00      	nop
 80066f8:	08007b28 	.word	0x08007b28
 80066fc:	08007b48 	.word	0x08007b48
 8006700:	08007b08 	.word	0x08007b08

08006704 <__swsetup_r>:
 8006704:	4b32      	ldr	r3, [pc, #200]	; (80067d0 <__swsetup_r+0xcc>)
 8006706:	b570      	push	{r4, r5, r6, lr}
 8006708:	681d      	ldr	r5, [r3, #0]
 800670a:	4606      	mov	r6, r0
 800670c:	460c      	mov	r4, r1
 800670e:	b125      	cbz	r5, 800671a <__swsetup_r+0x16>
 8006710:	69ab      	ldr	r3, [r5, #24]
 8006712:	b913      	cbnz	r3, 800671a <__swsetup_r+0x16>
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f97d 	bl	8006a14 <__sinit>
 800671a:	4b2e      	ldr	r3, [pc, #184]	; (80067d4 <__swsetup_r+0xd0>)
 800671c:	429c      	cmp	r4, r3
 800671e:	d10f      	bne.n	8006740 <__swsetup_r+0x3c>
 8006720:	686c      	ldr	r4, [r5, #4]
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006728:	0719      	lsls	r1, r3, #28
 800672a:	d42c      	bmi.n	8006786 <__swsetup_r+0x82>
 800672c:	06dd      	lsls	r5, r3, #27
 800672e:	d411      	bmi.n	8006754 <__swsetup_r+0x50>
 8006730:	2309      	movs	r3, #9
 8006732:	6033      	str	r3, [r6, #0]
 8006734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	f04f 30ff 	mov.w	r0, #4294967295
 800673e:	e03e      	b.n	80067be <__swsetup_r+0xba>
 8006740:	4b25      	ldr	r3, [pc, #148]	; (80067d8 <__swsetup_r+0xd4>)
 8006742:	429c      	cmp	r4, r3
 8006744:	d101      	bne.n	800674a <__swsetup_r+0x46>
 8006746:	68ac      	ldr	r4, [r5, #8]
 8006748:	e7eb      	b.n	8006722 <__swsetup_r+0x1e>
 800674a:	4b24      	ldr	r3, [pc, #144]	; (80067dc <__swsetup_r+0xd8>)
 800674c:	429c      	cmp	r4, r3
 800674e:	bf08      	it	eq
 8006750:	68ec      	ldreq	r4, [r5, #12]
 8006752:	e7e6      	b.n	8006722 <__swsetup_r+0x1e>
 8006754:	0758      	lsls	r0, r3, #29
 8006756:	d512      	bpl.n	800677e <__swsetup_r+0x7a>
 8006758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800675a:	b141      	cbz	r1, 800676e <__swsetup_r+0x6a>
 800675c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006760:	4299      	cmp	r1, r3
 8006762:	d002      	beq.n	800676a <__swsetup_r+0x66>
 8006764:	4630      	mov	r0, r6
 8006766:	f000 fa5b 	bl	8006c20 <_free_r>
 800676a:	2300      	movs	r3, #0
 800676c:	6363      	str	r3, [r4, #52]	; 0x34
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	2300      	movs	r3, #0
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f043 0308 	orr.w	r3, r3, #8
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	b94b      	cbnz	r3, 800679e <__swsetup_r+0x9a>
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	d003      	beq.n	800679e <__swsetup_r+0x9a>
 8006796:	4621      	mov	r1, r4
 8006798:	4630      	mov	r0, r6
 800679a:	f000 fa01 	bl	8006ba0 <__smakebuf_r>
 800679e:	89a0      	ldrh	r0, [r4, #12]
 80067a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067a4:	f010 0301 	ands.w	r3, r0, #1
 80067a8:	d00a      	beq.n	80067c0 <__swsetup_r+0xbc>
 80067aa:	2300      	movs	r3, #0
 80067ac:	60a3      	str	r3, [r4, #8]
 80067ae:	6963      	ldr	r3, [r4, #20]
 80067b0:	425b      	negs	r3, r3
 80067b2:	61a3      	str	r3, [r4, #24]
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	b943      	cbnz	r3, 80067ca <__swsetup_r+0xc6>
 80067b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067bc:	d1ba      	bne.n	8006734 <__swsetup_r+0x30>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	0781      	lsls	r1, r0, #30
 80067c2:	bf58      	it	pl
 80067c4:	6963      	ldrpl	r3, [r4, #20]
 80067c6:	60a3      	str	r3, [r4, #8]
 80067c8:	e7f4      	b.n	80067b4 <__swsetup_r+0xb0>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e7f7      	b.n	80067be <__swsetup_r+0xba>
 80067ce:	bf00      	nop
 80067d0:	20000024 	.word	0x20000024
 80067d4:	08007b28 	.word	0x08007b28
 80067d8:	08007b48 	.word	0x08007b48
 80067dc:	08007b08 	.word	0x08007b08

080067e0 <__sflush_r>:
 80067e0:	898a      	ldrh	r2, [r1, #12]
 80067e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e6:	4605      	mov	r5, r0
 80067e8:	0710      	lsls	r0, r2, #28
 80067ea:	460c      	mov	r4, r1
 80067ec:	d458      	bmi.n	80068a0 <__sflush_r+0xc0>
 80067ee:	684b      	ldr	r3, [r1, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc05      	bgt.n	8006800 <__sflush_r+0x20>
 80067f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dc02      	bgt.n	8006800 <__sflush_r+0x20>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006802:	2e00      	cmp	r6, #0
 8006804:	d0f9      	beq.n	80067fa <__sflush_r+0x1a>
 8006806:	2300      	movs	r3, #0
 8006808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800680c:	682f      	ldr	r7, [r5, #0]
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	d032      	beq.n	8006878 <__sflush_r+0x98>
 8006812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	075a      	lsls	r2, r3, #29
 8006818:	d505      	bpl.n	8006826 <__sflush_r+0x46>
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	1ac0      	subs	r0, r0, r3
 800681e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006820:	b10b      	cbz	r3, 8006826 <__sflush_r+0x46>
 8006822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006824:	1ac0      	subs	r0, r0, r3
 8006826:	2300      	movs	r3, #0
 8006828:	4602      	mov	r2, r0
 800682a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800682c:	6a21      	ldr	r1, [r4, #32]
 800682e:	4628      	mov	r0, r5
 8006830:	47b0      	blx	r6
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	d106      	bne.n	8006846 <__sflush_r+0x66>
 8006838:	6829      	ldr	r1, [r5, #0]
 800683a:	291d      	cmp	r1, #29
 800683c:	d82c      	bhi.n	8006898 <__sflush_r+0xb8>
 800683e:	4a2a      	ldr	r2, [pc, #168]	; (80068e8 <__sflush_r+0x108>)
 8006840:	40ca      	lsrs	r2, r1
 8006842:	07d6      	lsls	r6, r2, #31
 8006844:	d528      	bpl.n	8006898 <__sflush_r+0xb8>
 8006846:	2200      	movs	r2, #0
 8006848:	6062      	str	r2, [r4, #4]
 800684a:	04d9      	lsls	r1, r3, #19
 800684c:	6922      	ldr	r2, [r4, #16]
 800684e:	6022      	str	r2, [r4, #0]
 8006850:	d504      	bpl.n	800685c <__sflush_r+0x7c>
 8006852:	1c42      	adds	r2, r0, #1
 8006854:	d101      	bne.n	800685a <__sflush_r+0x7a>
 8006856:	682b      	ldr	r3, [r5, #0]
 8006858:	b903      	cbnz	r3, 800685c <__sflush_r+0x7c>
 800685a:	6560      	str	r0, [r4, #84]	; 0x54
 800685c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800685e:	602f      	str	r7, [r5, #0]
 8006860:	2900      	cmp	r1, #0
 8006862:	d0ca      	beq.n	80067fa <__sflush_r+0x1a>
 8006864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006868:	4299      	cmp	r1, r3
 800686a:	d002      	beq.n	8006872 <__sflush_r+0x92>
 800686c:	4628      	mov	r0, r5
 800686e:	f000 f9d7 	bl	8006c20 <_free_r>
 8006872:	2000      	movs	r0, #0
 8006874:	6360      	str	r0, [r4, #52]	; 0x34
 8006876:	e7c1      	b.n	80067fc <__sflush_r+0x1c>
 8006878:	6a21      	ldr	r1, [r4, #32]
 800687a:	2301      	movs	r3, #1
 800687c:	4628      	mov	r0, r5
 800687e:	47b0      	blx	r6
 8006880:	1c41      	adds	r1, r0, #1
 8006882:	d1c7      	bne.n	8006814 <__sflush_r+0x34>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0c4      	beq.n	8006814 <__sflush_r+0x34>
 800688a:	2b1d      	cmp	r3, #29
 800688c:	d001      	beq.n	8006892 <__sflush_r+0xb2>
 800688e:	2b16      	cmp	r3, #22
 8006890:	d101      	bne.n	8006896 <__sflush_r+0xb6>
 8006892:	602f      	str	r7, [r5, #0]
 8006894:	e7b1      	b.n	80067fa <__sflush_r+0x1a>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	e7ad      	b.n	80067fc <__sflush_r+0x1c>
 80068a0:	690f      	ldr	r7, [r1, #16]
 80068a2:	2f00      	cmp	r7, #0
 80068a4:	d0a9      	beq.n	80067fa <__sflush_r+0x1a>
 80068a6:	0793      	lsls	r3, r2, #30
 80068a8:	680e      	ldr	r6, [r1, #0]
 80068aa:	bf08      	it	eq
 80068ac:	694b      	ldreq	r3, [r1, #20]
 80068ae:	600f      	str	r7, [r1, #0]
 80068b0:	bf18      	it	ne
 80068b2:	2300      	movne	r3, #0
 80068b4:	eba6 0807 	sub.w	r8, r6, r7
 80068b8:	608b      	str	r3, [r1, #8]
 80068ba:	f1b8 0f00 	cmp.w	r8, #0
 80068be:	dd9c      	ble.n	80067fa <__sflush_r+0x1a>
 80068c0:	6a21      	ldr	r1, [r4, #32]
 80068c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068c4:	4643      	mov	r3, r8
 80068c6:	463a      	mov	r2, r7
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b0      	blx	r6
 80068cc:	2800      	cmp	r0, #0
 80068ce:	dc06      	bgt.n	80068de <__sflush_r+0xfe>
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	e78e      	b.n	80067fc <__sflush_r+0x1c>
 80068de:	4407      	add	r7, r0
 80068e0:	eba8 0800 	sub.w	r8, r8, r0
 80068e4:	e7e9      	b.n	80068ba <__sflush_r+0xda>
 80068e6:	bf00      	nop
 80068e8:	20400001 	.word	0x20400001

080068ec <_fflush_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	690b      	ldr	r3, [r1, #16]
 80068f0:	4605      	mov	r5, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	b913      	cbnz	r3, 80068fc <_fflush_r+0x10>
 80068f6:	2500      	movs	r5, #0
 80068f8:	4628      	mov	r0, r5
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	b118      	cbz	r0, 8006906 <_fflush_r+0x1a>
 80068fe:	6983      	ldr	r3, [r0, #24]
 8006900:	b90b      	cbnz	r3, 8006906 <_fflush_r+0x1a>
 8006902:	f000 f887 	bl	8006a14 <__sinit>
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <_fflush_r+0x6c>)
 8006908:	429c      	cmp	r4, r3
 800690a:	d11b      	bne.n	8006944 <_fflush_r+0x58>
 800690c:	686c      	ldr	r4, [r5, #4]
 800690e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0ef      	beq.n	80068f6 <_fflush_r+0xa>
 8006916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006918:	07d0      	lsls	r0, r2, #31
 800691a:	d404      	bmi.n	8006926 <_fflush_r+0x3a>
 800691c:	0599      	lsls	r1, r3, #22
 800691e:	d402      	bmi.n	8006926 <_fflush_r+0x3a>
 8006920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006922:	f000 f915 	bl	8006b50 <__retarget_lock_acquire_recursive>
 8006926:	4628      	mov	r0, r5
 8006928:	4621      	mov	r1, r4
 800692a:	f7ff ff59 	bl	80067e0 <__sflush_r>
 800692e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006930:	07da      	lsls	r2, r3, #31
 8006932:	4605      	mov	r5, r0
 8006934:	d4e0      	bmi.n	80068f8 <_fflush_r+0xc>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	059b      	lsls	r3, r3, #22
 800693a:	d4dd      	bmi.n	80068f8 <_fflush_r+0xc>
 800693c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800693e:	f000 f908 	bl	8006b52 <__retarget_lock_release_recursive>
 8006942:	e7d9      	b.n	80068f8 <_fflush_r+0xc>
 8006944:	4b05      	ldr	r3, [pc, #20]	; (800695c <_fflush_r+0x70>)
 8006946:	429c      	cmp	r4, r3
 8006948:	d101      	bne.n	800694e <_fflush_r+0x62>
 800694a:	68ac      	ldr	r4, [r5, #8]
 800694c:	e7df      	b.n	800690e <_fflush_r+0x22>
 800694e:	4b04      	ldr	r3, [pc, #16]	; (8006960 <_fflush_r+0x74>)
 8006950:	429c      	cmp	r4, r3
 8006952:	bf08      	it	eq
 8006954:	68ec      	ldreq	r4, [r5, #12]
 8006956:	e7da      	b.n	800690e <_fflush_r+0x22>
 8006958:	08007b28 	.word	0x08007b28
 800695c:	08007b48 	.word	0x08007b48
 8006960:	08007b08 	.word	0x08007b08

08006964 <std>:
 8006964:	2300      	movs	r3, #0
 8006966:	b510      	push	{r4, lr}
 8006968:	4604      	mov	r4, r0
 800696a:	e9c0 3300 	strd	r3, r3, [r0]
 800696e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006972:	6083      	str	r3, [r0, #8]
 8006974:	8181      	strh	r1, [r0, #12]
 8006976:	6643      	str	r3, [r0, #100]	; 0x64
 8006978:	81c2      	strh	r2, [r0, #14]
 800697a:	6183      	str	r3, [r0, #24]
 800697c:	4619      	mov	r1, r3
 800697e:	2208      	movs	r2, #8
 8006980:	305c      	adds	r0, #92	; 0x5c
 8006982:	f7ff fdd7 	bl	8006534 <memset>
 8006986:	4b05      	ldr	r3, [pc, #20]	; (800699c <std+0x38>)
 8006988:	6263      	str	r3, [r4, #36]	; 0x24
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <std+0x3c>)
 800698c:	62a3      	str	r3, [r4, #40]	; 0x28
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <std+0x40>)
 8006990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <std+0x44>)
 8006994:	6224      	str	r4, [r4, #32]
 8006996:	6323      	str	r3, [r4, #48]	; 0x30
 8006998:	bd10      	pop	{r4, pc}
 800699a:	bf00      	nop
 800699c:	080073dd 	.word	0x080073dd
 80069a0:	080073ff 	.word	0x080073ff
 80069a4:	08007437 	.word	0x08007437
 80069a8:	0800745b 	.word	0x0800745b

080069ac <_cleanup_r>:
 80069ac:	4901      	ldr	r1, [pc, #4]	; (80069b4 <_cleanup_r+0x8>)
 80069ae:	f000 b8af 	b.w	8006b10 <_fwalk_reent>
 80069b2:	bf00      	nop
 80069b4:	080068ed 	.word	0x080068ed

080069b8 <__sfmoreglue>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	2268      	movs	r2, #104	; 0x68
 80069bc:	1e4d      	subs	r5, r1, #1
 80069be:	4355      	muls	r5, r2
 80069c0:	460e      	mov	r6, r1
 80069c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069c6:	f000 f997 	bl	8006cf8 <_malloc_r>
 80069ca:	4604      	mov	r4, r0
 80069cc:	b140      	cbz	r0, 80069e0 <__sfmoreglue+0x28>
 80069ce:	2100      	movs	r1, #0
 80069d0:	e9c0 1600 	strd	r1, r6, [r0]
 80069d4:	300c      	adds	r0, #12
 80069d6:	60a0      	str	r0, [r4, #8]
 80069d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069dc:	f7ff fdaa 	bl	8006534 <memset>
 80069e0:	4620      	mov	r0, r4
 80069e2:	bd70      	pop	{r4, r5, r6, pc}

080069e4 <__sfp_lock_acquire>:
 80069e4:	4801      	ldr	r0, [pc, #4]	; (80069ec <__sfp_lock_acquire+0x8>)
 80069e6:	f000 b8b3 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 80069ea:	bf00      	nop
 80069ec:	20002441 	.word	0x20002441

080069f0 <__sfp_lock_release>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__sfp_lock_release+0x8>)
 80069f2:	f000 b8ae 	b.w	8006b52 <__retarget_lock_release_recursive>
 80069f6:	bf00      	nop
 80069f8:	20002441 	.word	0x20002441

080069fc <__sinit_lock_acquire>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__sinit_lock_acquire+0x8>)
 80069fe:	f000 b8a7 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	20002442 	.word	0x20002442

08006a08 <__sinit_lock_release>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__sinit_lock_release+0x8>)
 8006a0a:	f000 b8a2 	b.w	8006b52 <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	20002442 	.word	0x20002442

08006a14 <__sinit>:
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4604      	mov	r4, r0
 8006a18:	f7ff fff0 	bl	80069fc <__sinit_lock_acquire>
 8006a1c:	69a3      	ldr	r3, [r4, #24]
 8006a1e:	b11b      	cbz	r3, 8006a28 <__sinit+0x14>
 8006a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a24:	f7ff bff0 	b.w	8006a08 <__sinit_lock_release>
 8006a28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a2c:	6523      	str	r3, [r4, #80]	; 0x50
 8006a2e:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <__sinit+0x68>)
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <__sinit+0x6c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	bf04      	itt	eq
 8006a3a:	2301      	moveq	r3, #1
 8006a3c:	61a3      	streq	r3, [r4, #24]
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f820 	bl	8006a84 <__sfp>
 8006a44:	6060      	str	r0, [r4, #4]
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f81c 	bl	8006a84 <__sfp>
 8006a4c:	60a0      	str	r0, [r4, #8]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 f818 	bl	8006a84 <__sfp>
 8006a54:	2200      	movs	r2, #0
 8006a56:	60e0      	str	r0, [r4, #12]
 8006a58:	2104      	movs	r1, #4
 8006a5a:	6860      	ldr	r0, [r4, #4]
 8006a5c:	f7ff ff82 	bl	8006964 <std>
 8006a60:	68a0      	ldr	r0, [r4, #8]
 8006a62:	2201      	movs	r2, #1
 8006a64:	2109      	movs	r1, #9
 8006a66:	f7ff ff7d 	bl	8006964 <std>
 8006a6a:	68e0      	ldr	r0, [r4, #12]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	2112      	movs	r1, #18
 8006a70:	f7ff ff78 	bl	8006964 <std>
 8006a74:	2301      	movs	r3, #1
 8006a76:	61a3      	str	r3, [r4, #24]
 8006a78:	e7d2      	b.n	8006a20 <__sinit+0xc>
 8006a7a:	bf00      	nop
 8006a7c:	08007b04 	.word	0x08007b04
 8006a80:	080069ad 	.word	0x080069ad

08006a84 <__sfp>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	4607      	mov	r7, r0
 8006a88:	f7ff ffac 	bl	80069e4 <__sfp_lock_acquire>
 8006a8c:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <__sfp+0x84>)
 8006a8e:	681e      	ldr	r6, [r3, #0]
 8006a90:	69b3      	ldr	r3, [r6, #24]
 8006a92:	b913      	cbnz	r3, 8006a9a <__sfp+0x16>
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff ffbd 	bl	8006a14 <__sinit>
 8006a9a:	3648      	adds	r6, #72	; 0x48
 8006a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	d503      	bpl.n	8006aac <__sfp+0x28>
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	b30b      	cbz	r3, 8006aec <__sfp+0x68>
 8006aa8:	6836      	ldr	r6, [r6, #0]
 8006aaa:	e7f7      	b.n	8006a9c <__sfp+0x18>
 8006aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ab0:	b9d5      	cbnz	r5, 8006ae8 <__sfp+0x64>
 8006ab2:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <__sfp+0x88>)
 8006ab4:	60e3      	str	r3, [r4, #12]
 8006ab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006aba:	6665      	str	r5, [r4, #100]	; 0x64
 8006abc:	f000 f847 	bl	8006b4e <__retarget_lock_init_recursive>
 8006ac0:	f7ff ff96 	bl	80069f0 <__sfp_lock_release>
 8006ac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006acc:	6025      	str	r5, [r4, #0]
 8006ace:	61a5      	str	r5, [r4, #24]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ad8:	f7ff fd2c 	bl	8006534 <memset>
 8006adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae8:	3468      	adds	r4, #104	; 0x68
 8006aea:	e7d9      	b.n	8006aa0 <__sfp+0x1c>
 8006aec:	2104      	movs	r1, #4
 8006aee:	4638      	mov	r0, r7
 8006af0:	f7ff ff62 	bl	80069b8 <__sfmoreglue>
 8006af4:	4604      	mov	r4, r0
 8006af6:	6030      	str	r0, [r6, #0]
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d1d5      	bne.n	8006aa8 <__sfp+0x24>
 8006afc:	f7ff ff78 	bl	80069f0 <__sfp_lock_release>
 8006b00:	230c      	movs	r3, #12
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	e7ee      	b.n	8006ae4 <__sfp+0x60>
 8006b06:	bf00      	nop
 8006b08:	08007b04 	.word	0x08007b04
 8006b0c:	ffff0001 	.word	0xffff0001

08006b10 <_fwalk_reent>:
 8006b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b14:	4606      	mov	r6, r0
 8006b16:	4688      	mov	r8, r1
 8006b18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b1c:	2700      	movs	r7, #0
 8006b1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b22:	f1b9 0901 	subs.w	r9, r9, #1
 8006b26:	d505      	bpl.n	8006b34 <_fwalk_reent+0x24>
 8006b28:	6824      	ldr	r4, [r4, #0]
 8006b2a:	2c00      	cmp	r4, #0
 8006b2c:	d1f7      	bne.n	8006b1e <_fwalk_reent+0xe>
 8006b2e:	4638      	mov	r0, r7
 8006b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b34:	89ab      	ldrh	r3, [r5, #12]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d907      	bls.n	8006b4a <_fwalk_reent+0x3a>
 8006b3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	d003      	beq.n	8006b4a <_fwalk_reent+0x3a>
 8006b42:	4629      	mov	r1, r5
 8006b44:	4630      	mov	r0, r6
 8006b46:	47c0      	blx	r8
 8006b48:	4307      	orrs	r7, r0
 8006b4a:	3568      	adds	r5, #104	; 0x68
 8006b4c:	e7e9      	b.n	8006b22 <_fwalk_reent+0x12>

08006b4e <__retarget_lock_init_recursive>:
 8006b4e:	4770      	bx	lr

08006b50 <__retarget_lock_acquire_recursive>:
 8006b50:	4770      	bx	lr

08006b52 <__retarget_lock_release_recursive>:
 8006b52:	4770      	bx	lr

08006b54 <__swhatbuf_r>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	460e      	mov	r6, r1
 8006b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	b096      	sub	sp, #88	; 0x58
 8006b60:	4614      	mov	r4, r2
 8006b62:	461d      	mov	r5, r3
 8006b64:	da08      	bge.n	8006b78 <__swhatbuf_r+0x24>
 8006b66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	602a      	str	r2, [r5, #0]
 8006b6e:	061a      	lsls	r2, r3, #24
 8006b70:	d410      	bmi.n	8006b94 <__swhatbuf_r+0x40>
 8006b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b76:	e00e      	b.n	8006b96 <__swhatbuf_r+0x42>
 8006b78:	466a      	mov	r2, sp
 8006b7a:	f000 fc95 	bl	80074a8 <_fstat_r>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	dbf1      	blt.n	8006b66 <__swhatbuf_r+0x12>
 8006b82:	9a01      	ldr	r2, [sp, #4]
 8006b84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b8c:	425a      	negs	r2, r3
 8006b8e:	415a      	adcs	r2, r3
 8006b90:	602a      	str	r2, [r5, #0]
 8006b92:	e7ee      	b.n	8006b72 <__swhatbuf_r+0x1e>
 8006b94:	2340      	movs	r3, #64	; 0x40
 8006b96:	2000      	movs	r0, #0
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	b016      	add	sp, #88	; 0x58
 8006b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ba0 <__smakebuf_r>:
 8006ba0:	898b      	ldrh	r3, [r1, #12]
 8006ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ba4:	079d      	lsls	r5, r3, #30
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	d507      	bpl.n	8006bbc <__smakebuf_r+0x1c>
 8006bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	6163      	str	r3, [r4, #20]
 8006bb8:	b002      	add	sp, #8
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	ab01      	add	r3, sp, #4
 8006bbe:	466a      	mov	r2, sp
 8006bc0:	f7ff ffc8 	bl	8006b54 <__swhatbuf_r>
 8006bc4:	9900      	ldr	r1, [sp, #0]
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 f895 	bl	8006cf8 <_malloc_r>
 8006bce:	b948      	cbnz	r0, 8006be4 <__smakebuf_r+0x44>
 8006bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d4ef      	bmi.n	8006bb8 <__smakebuf_r+0x18>
 8006bd8:	f023 0303 	bic.w	r3, r3, #3
 8006bdc:	f043 0302 	orr.w	r3, r3, #2
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	e7e3      	b.n	8006bac <__smakebuf_r+0xc>
 8006be4:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <__smakebuf_r+0x7c>)
 8006be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	6020      	str	r0, [r4, #0]
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	9b00      	ldr	r3, [sp, #0]
 8006bf4:	6163      	str	r3, [r4, #20]
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	6120      	str	r0, [r4, #16]
 8006bfa:	b15b      	cbz	r3, 8006c14 <__smakebuf_r+0x74>
 8006bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 fc63 	bl	80074cc <_isatty_r>
 8006c06:	b128      	cbz	r0, 8006c14 <__smakebuf_r+0x74>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	89a0      	ldrh	r0, [r4, #12]
 8006c16:	4305      	orrs	r5, r0
 8006c18:	81a5      	strh	r5, [r4, #12]
 8006c1a:	e7cd      	b.n	8006bb8 <__smakebuf_r+0x18>
 8006c1c:	080069ad 	.word	0x080069ad

08006c20 <_free_r>:
 8006c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d044      	beq.n	8006cb0 <_free_r+0x90>
 8006c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2a:	9001      	str	r0, [sp, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c32:	bfb8      	it	lt
 8006c34:	18e4      	addlt	r4, r4, r3
 8006c36:	f000 fc6b 	bl	8007510 <__malloc_lock>
 8006c3a:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <_free_r+0x94>)
 8006c3c:	9801      	ldr	r0, [sp, #4]
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	b933      	cbnz	r3, 8006c50 <_free_r+0x30>
 8006c42:	6063      	str	r3, [r4, #4]
 8006c44:	6014      	str	r4, [r2, #0]
 8006c46:	b003      	add	sp, #12
 8006c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c4c:	f000 bc66 	b.w	800751c <__malloc_unlock>
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	d908      	bls.n	8006c66 <_free_r+0x46>
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	1961      	adds	r1, r4, r5
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	bf01      	itttt	eq
 8006c5c:	6819      	ldreq	r1, [r3, #0]
 8006c5e:	685b      	ldreq	r3, [r3, #4]
 8006c60:	1949      	addeq	r1, r1, r5
 8006c62:	6021      	streq	r1, [r4, #0]
 8006c64:	e7ed      	b.n	8006c42 <_free_r+0x22>
 8006c66:	461a      	mov	r2, r3
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	b10b      	cbz	r3, 8006c70 <_free_r+0x50>
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	d9fa      	bls.n	8006c66 <_free_r+0x46>
 8006c70:	6811      	ldr	r1, [r2, #0]
 8006c72:	1855      	adds	r5, r2, r1
 8006c74:	42a5      	cmp	r5, r4
 8006c76:	d10b      	bne.n	8006c90 <_free_r+0x70>
 8006c78:	6824      	ldr	r4, [r4, #0]
 8006c7a:	4421      	add	r1, r4
 8006c7c:	1854      	adds	r4, r2, r1
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	6011      	str	r1, [r2, #0]
 8006c82:	d1e0      	bne.n	8006c46 <_free_r+0x26>
 8006c84:	681c      	ldr	r4, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	6053      	str	r3, [r2, #4]
 8006c8a:	4421      	add	r1, r4
 8006c8c:	6011      	str	r1, [r2, #0]
 8006c8e:	e7da      	b.n	8006c46 <_free_r+0x26>
 8006c90:	d902      	bls.n	8006c98 <_free_r+0x78>
 8006c92:	230c      	movs	r3, #12
 8006c94:	6003      	str	r3, [r0, #0]
 8006c96:	e7d6      	b.n	8006c46 <_free_r+0x26>
 8006c98:	6825      	ldr	r5, [r4, #0]
 8006c9a:	1961      	adds	r1, r4, r5
 8006c9c:	428b      	cmp	r3, r1
 8006c9e:	bf04      	itt	eq
 8006ca0:	6819      	ldreq	r1, [r3, #0]
 8006ca2:	685b      	ldreq	r3, [r3, #4]
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	bf04      	itt	eq
 8006ca8:	1949      	addeq	r1, r1, r5
 8006caa:	6021      	streq	r1, [r4, #0]
 8006cac:	6054      	str	r4, [r2, #4]
 8006cae:	e7ca      	b.n	8006c46 <_free_r+0x26>
 8006cb0:	b003      	add	sp, #12
 8006cb2:	bd30      	pop	{r4, r5, pc}
 8006cb4:	20002444 	.word	0x20002444

08006cb8 <sbrk_aligned>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4e0e      	ldr	r6, [pc, #56]	; (8006cf4 <sbrk_aligned+0x3c>)
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	6831      	ldr	r1, [r6, #0]
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	b911      	cbnz	r1, 8006cca <sbrk_aligned+0x12>
 8006cc4:	f000 fb7a 	bl	80073bc <_sbrk_r>
 8006cc8:	6030      	str	r0, [r6, #0]
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 fb75 	bl	80073bc <_sbrk_r>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d00a      	beq.n	8006cec <sbrk_aligned+0x34>
 8006cd6:	1cc4      	adds	r4, r0, #3
 8006cd8:	f024 0403 	bic.w	r4, r4, #3
 8006cdc:	42a0      	cmp	r0, r4
 8006cde:	d007      	beq.n	8006cf0 <sbrk_aligned+0x38>
 8006ce0:	1a21      	subs	r1, r4, r0
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 fb6a 	bl	80073bc <_sbrk_r>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d101      	bne.n	8006cf0 <sbrk_aligned+0x38>
 8006cec:	f04f 34ff 	mov.w	r4, #4294967295
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	20002448 	.word	0x20002448

08006cf8 <_malloc_r>:
 8006cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfc:	1ccd      	adds	r5, r1, #3
 8006cfe:	f025 0503 	bic.w	r5, r5, #3
 8006d02:	3508      	adds	r5, #8
 8006d04:	2d0c      	cmp	r5, #12
 8006d06:	bf38      	it	cc
 8006d08:	250c      	movcc	r5, #12
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	db01      	blt.n	8006d14 <_malloc_r+0x1c>
 8006d10:	42a9      	cmp	r1, r5
 8006d12:	d905      	bls.n	8006d20 <_malloc_r+0x28>
 8006d14:	230c      	movs	r3, #12
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	2600      	movs	r6, #0
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	4e2e      	ldr	r6, [pc, #184]	; (8006ddc <_malloc_r+0xe4>)
 8006d22:	f000 fbf5 	bl	8007510 <__malloc_lock>
 8006d26:	6833      	ldr	r3, [r6, #0]
 8006d28:	461c      	mov	r4, r3
 8006d2a:	bb34      	cbnz	r4, 8006d7a <_malloc_r+0x82>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4638      	mov	r0, r7
 8006d30:	f7ff ffc2 	bl	8006cb8 <sbrk_aligned>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	4604      	mov	r4, r0
 8006d38:	d14d      	bne.n	8006dd6 <_malloc_r+0xde>
 8006d3a:	6834      	ldr	r4, [r6, #0]
 8006d3c:	4626      	mov	r6, r4
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	d140      	bne.n	8006dc4 <_malloc_r+0xcc>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	4631      	mov	r1, r6
 8006d46:	4638      	mov	r0, r7
 8006d48:	eb04 0803 	add.w	r8, r4, r3
 8006d4c:	f000 fb36 	bl	80073bc <_sbrk_r>
 8006d50:	4580      	cmp	r8, r0
 8006d52:	d13a      	bne.n	8006dca <_malloc_r+0xd2>
 8006d54:	6821      	ldr	r1, [r4, #0]
 8006d56:	3503      	adds	r5, #3
 8006d58:	1a6d      	subs	r5, r5, r1
 8006d5a:	f025 0503 	bic.w	r5, r5, #3
 8006d5e:	3508      	adds	r5, #8
 8006d60:	2d0c      	cmp	r5, #12
 8006d62:	bf38      	it	cc
 8006d64:	250c      	movcc	r5, #12
 8006d66:	4629      	mov	r1, r5
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff ffa5 	bl	8006cb8 <sbrk_aligned>
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d02b      	beq.n	8006dca <_malloc_r+0xd2>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	442b      	add	r3, r5
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	e00e      	b.n	8006d98 <_malloc_r+0xa0>
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	1b52      	subs	r2, r2, r5
 8006d7e:	d41e      	bmi.n	8006dbe <_malloc_r+0xc6>
 8006d80:	2a0b      	cmp	r2, #11
 8006d82:	d916      	bls.n	8006db2 <_malloc_r+0xba>
 8006d84:	1961      	adds	r1, r4, r5
 8006d86:	42a3      	cmp	r3, r4
 8006d88:	6025      	str	r5, [r4, #0]
 8006d8a:	bf18      	it	ne
 8006d8c:	6059      	strne	r1, [r3, #4]
 8006d8e:	6863      	ldr	r3, [r4, #4]
 8006d90:	bf08      	it	eq
 8006d92:	6031      	streq	r1, [r6, #0]
 8006d94:	5162      	str	r2, [r4, r5]
 8006d96:	604b      	str	r3, [r1, #4]
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f104 060b 	add.w	r6, r4, #11
 8006d9e:	f000 fbbd 	bl	800751c <__malloc_unlock>
 8006da2:	f026 0607 	bic.w	r6, r6, #7
 8006da6:	1d23      	adds	r3, r4, #4
 8006da8:	1af2      	subs	r2, r6, r3
 8006daa:	d0b6      	beq.n	8006d1a <_malloc_r+0x22>
 8006dac:	1b9b      	subs	r3, r3, r6
 8006dae:	50a3      	str	r3, [r4, r2]
 8006db0:	e7b3      	b.n	8006d1a <_malloc_r+0x22>
 8006db2:	6862      	ldr	r2, [r4, #4]
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	bf0c      	ite	eq
 8006db8:	6032      	streq	r2, [r6, #0]
 8006dba:	605a      	strne	r2, [r3, #4]
 8006dbc:	e7ec      	b.n	8006d98 <_malloc_r+0xa0>
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	6864      	ldr	r4, [r4, #4]
 8006dc2:	e7b2      	b.n	8006d2a <_malloc_r+0x32>
 8006dc4:	4634      	mov	r4, r6
 8006dc6:	6876      	ldr	r6, [r6, #4]
 8006dc8:	e7b9      	b.n	8006d3e <_malloc_r+0x46>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f000 fba4 	bl	800751c <__malloc_unlock>
 8006dd4:	e7a1      	b.n	8006d1a <_malloc_r+0x22>
 8006dd6:	6025      	str	r5, [r4, #0]
 8006dd8:	e7de      	b.n	8006d98 <_malloc_r+0xa0>
 8006dda:	bf00      	nop
 8006ddc:	20002444 	.word	0x20002444

08006de0 <__sfputc_r>:
 8006de0:	6893      	ldr	r3, [r2, #8]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	b410      	push	{r4}
 8006de8:	6093      	str	r3, [r2, #8]
 8006dea:	da08      	bge.n	8006dfe <__sfputc_r+0x1e>
 8006dec:	6994      	ldr	r4, [r2, #24]
 8006dee:	42a3      	cmp	r3, r4
 8006df0:	db01      	blt.n	8006df6 <__sfputc_r+0x16>
 8006df2:	290a      	cmp	r1, #10
 8006df4:	d103      	bne.n	8006dfe <__sfputc_r+0x1e>
 8006df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dfa:	f7ff bc31 	b.w	8006660 <__swbuf_r>
 8006dfe:	6813      	ldr	r3, [r2, #0]
 8006e00:	1c58      	adds	r0, r3, #1
 8006e02:	6010      	str	r0, [r2, #0]
 8006e04:	7019      	strb	r1, [r3, #0]
 8006e06:	4608      	mov	r0, r1
 8006e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <__sfputs_r>:
 8006e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e10:	4606      	mov	r6, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	4614      	mov	r4, r2
 8006e16:	18d5      	adds	r5, r2, r3
 8006e18:	42ac      	cmp	r4, r5
 8006e1a:	d101      	bne.n	8006e20 <__sfputs_r+0x12>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e007      	b.n	8006e30 <__sfputs_r+0x22>
 8006e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e24:	463a      	mov	r2, r7
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7ff ffda 	bl	8006de0 <__sfputc_r>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d1f3      	bne.n	8006e18 <__sfputs_r+0xa>
 8006e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e34 <_vfiprintf_r>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	460d      	mov	r5, r1
 8006e3a:	b09d      	sub	sp, #116	; 0x74
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	4698      	mov	r8, r3
 8006e40:	4606      	mov	r6, r0
 8006e42:	b118      	cbz	r0, 8006e4c <_vfiprintf_r+0x18>
 8006e44:	6983      	ldr	r3, [r0, #24]
 8006e46:	b90b      	cbnz	r3, 8006e4c <_vfiprintf_r+0x18>
 8006e48:	f7ff fde4 	bl	8006a14 <__sinit>
 8006e4c:	4b89      	ldr	r3, [pc, #548]	; (8007074 <_vfiprintf_r+0x240>)
 8006e4e:	429d      	cmp	r5, r3
 8006e50:	d11b      	bne.n	8006e8a <_vfiprintf_r+0x56>
 8006e52:	6875      	ldr	r5, [r6, #4]
 8006e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e56:	07d9      	lsls	r1, r3, #31
 8006e58:	d405      	bmi.n	8006e66 <_vfiprintf_r+0x32>
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	059a      	lsls	r2, r3, #22
 8006e5e:	d402      	bmi.n	8006e66 <_vfiprintf_r+0x32>
 8006e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e62:	f7ff fe75 	bl	8006b50 <__retarget_lock_acquire_recursive>
 8006e66:	89ab      	ldrh	r3, [r5, #12]
 8006e68:	071b      	lsls	r3, r3, #28
 8006e6a:	d501      	bpl.n	8006e70 <_vfiprintf_r+0x3c>
 8006e6c:	692b      	ldr	r3, [r5, #16]
 8006e6e:	b9eb      	cbnz	r3, 8006eac <_vfiprintf_r+0x78>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff fc46 	bl	8006704 <__swsetup_r>
 8006e78:	b1c0      	cbz	r0, 8006eac <_vfiprintf_r+0x78>
 8006e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e7c:	07dc      	lsls	r4, r3, #31
 8006e7e:	d50e      	bpl.n	8006e9e <_vfiprintf_r+0x6a>
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295
 8006e84:	b01d      	add	sp, #116	; 0x74
 8006e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	; (8007078 <_vfiprintf_r+0x244>)
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	d101      	bne.n	8006e94 <_vfiprintf_r+0x60>
 8006e90:	68b5      	ldr	r5, [r6, #8]
 8006e92:	e7df      	b.n	8006e54 <_vfiprintf_r+0x20>
 8006e94:	4b79      	ldr	r3, [pc, #484]	; (800707c <_vfiprintf_r+0x248>)
 8006e96:	429d      	cmp	r5, r3
 8006e98:	bf08      	it	eq
 8006e9a:	68f5      	ldreq	r5, [r6, #12]
 8006e9c:	e7da      	b.n	8006e54 <_vfiprintf_r+0x20>
 8006e9e:	89ab      	ldrh	r3, [r5, #12]
 8006ea0:	0598      	lsls	r0, r3, #22
 8006ea2:	d4ed      	bmi.n	8006e80 <_vfiprintf_r+0x4c>
 8006ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea6:	f7ff fe54 	bl	8006b52 <__retarget_lock_release_recursive>
 8006eaa:	e7e9      	b.n	8006e80 <_vfiprintf_r+0x4c>
 8006eac:	2300      	movs	r3, #0
 8006eae:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb0:	2320      	movs	r3, #32
 8006eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eba:	2330      	movs	r3, #48	; 0x30
 8006ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007080 <_vfiprintf_r+0x24c>
 8006ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ec4:	f04f 0901 	mov.w	r9, #1
 8006ec8:	4623      	mov	r3, r4
 8006eca:	469a      	mov	sl, r3
 8006ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed0:	b10a      	cbz	r2, 8006ed6 <_vfiprintf_r+0xa2>
 8006ed2:	2a25      	cmp	r2, #37	; 0x25
 8006ed4:	d1f9      	bne.n	8006eca <_vfiprintf_r+0x96>
 8006ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8006eda:	d00b      	beq.n	8006ef4 <_vfiprintf_r+0xc0>
 8006edc:	465b      	mov	r3, fp
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff ff93 	bl	8006e0e <__sfputs_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f000 80aa 	beq.w	8007042 <_vfiprintf_r+0x20e>
 8006eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ef0:	445a      	add	r2, fp
 8006ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80a2 	beq.w	8007042 <_vfiprintf_r+0x20e>
 8006efe:	2300      	movs	r3, #0
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295
 8006f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f08:	f10a 0a01 	add.w	sl, sl, #1
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	9307      	str	r3, [sp, #28]
 8006f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f14:	931a      	str	r3, [sp, #104]	; 0x68
 8006f16:	4654      	mov	r4, sl
 8006f18:	2205      	movs	r2, #5
 8006f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1e:	4858      	ldr	r0, [pc, #352]	; (8007080 <_vfiprintf_r+0x24c>)
 8006f20:	f7f9 f976 	bl	8000210 <memchr>
 8006f24:	9a04      	ldr	r2, [sp, #16]
 8006f26:	b9d8      	cbnz	r0, 8006f60 <_vfiprintf_r+0x12c>
 8006f28:	06d1      	lsls	r1, r2, #27
 8006f2a:	bf44      	itt	mi
 8006f2c:	2320      	movmi	r3, #32
 8006f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f32:	0713      	lsls	r3, r2, #28
 8006f34:	bf44      	itt	mi
 8006f36:	232b      	movmi	r3, #43	; 0x2b
 8006f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f40:	2b2a      	cmp	r3, #42	; 0x2a
 8006f42:	d015      	beq.n	8006f70 <_vfiprintf_r+0x13c>
 8006f44:	9a07      	ldr	r2, [sp, #28]
 8006f46:	4654      	mov	r4, sl
 8006f48:	2000      	movs	r0, #0
 8006f4a:	f04f 0c0a 	mov.w	ip, #10
 8006f4e:	4621      	mov	r1, r4
 8006f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f54:	3b30      	subs	r3, #48	; 0x30
 8006f56:	2b09      	cmp	r3, #9
 8006f58:	d94e      	bls.n	8006ff8 <_vfiprintf_r+0x1c4>
 8006f5a:	b1b0      	cbz	r0, 8006f8a <_vfiprintf_r+0x156>
 8006f5c:	9207      	str	r2, [sp, #28]
 8006f5e:	e014      	b.n	8006f8a <_vfiprintf_r+0x156>
 8006f60:	eba0 0308 	sub.w	r3, r0, r8
 8006f64:	fa09 f303 	lsl.w	r3, r9, r3
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	46a2      	mov	sl, r4
 8006f6e:	e7d2      	b.n	8006f16 <_vfiprintf_r+0xe2>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	1d19      	adds	r1, r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	9103      	str	r1, [sp, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bfbb      	ittet	lt
 8006f7c:	425b      	neglt	r3, r3
 8006f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f82:	9307      	strge	r3, [sp, #28]
 8006f84:	9307      	strlt	r3, [sp, #28]
 8006f86:	bfb8      	it	lt
 8006f88:	9204      	strlt	r2, [sp, #16]
 8006f8a:	7823      	ldrb	r3, [r4, #0]
 8006f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8e:	d10c      	bne.n	8006faa <_vfiprintf_r+0x176>
 8006f90:	7863      	ldrb	r3, [r4, #1]
 8006f92:	2b2a      	cmp	r3, #42	; 0x2a
 8006f94:	d135      	bne.n	8007002 <_vfiprintf_r+0x1ce>
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	1d1a      	adds	r2, r3, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	9203      	str	r2, [sp, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bfb8      	it	lt
 8006fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa6:	3402      	adds	r4, #2
 8006fa8:	9305      	str	r3, [sp, #20]
 8006faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007090 <_vfiprintf_r+0x25c>
 8006fae:	7821      	ldrb	r1, [r4, #0]
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	4650      	mov	r0, sl
 8006fb4:	f7f9 f92c 	bl	8000210 <memchr>
 8006fb8:	b140      	cbz	r0, 8006fcc <_vfiprintf_r+0x198>
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	eba0 000a 	sub.w	r0, r0, sl
 8006fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc4:	9b04      	ldr	r3, [sp, #16]
 8006fc6:	4303      	orrs	r3, r0
 8006fc8:	3401      	adds	r4, #1
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd0:	482c      	ldr	r0, [pc, #176]	; (8007084 <_vfiprintf_r+0x250>)
 8006fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	f7f9 f91a 	bl	8000210 <memchr>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d03f      	beq.n	8007060 <_vfiprintf_r+0x22c>
 8006fe0:	4b29      	ldr	r3, [pc, #164]	; (8007088 <_vfiprintf_r+0x254>)
 8006fe2:	bb1b      	cbnz	r3, 800702c <_vfiprintf_r+0x1f8>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	3307      	adds	r3, #7
 8006fe8:	f023 0307 	bic.w	r3, r3, #7
 8006fec:	3308      	adds	r3, #8
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff2:	443b      	add	r3, r7
 8006ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff6:	e767      	b.n	8006ec8 <_vfiprintf_r+0x94>
 8006ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	2001      	movs	r0, #1
 8007000:	e7a5      	b.n	8006f4e <_vfiprintf_r+0x11a>
 8007002:	2300      	movs	r3, #0
 8007004:	3401      	adds	r4, #1
 8007006:	9305      	str	r3, [sp, #20]
 8007008:	4619      	mov	r1, r3
 800700a:	f04f 0c0a 	mov.w	ip, #10
 800700e:	4620      	mov	r0, r4
 8007010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007014:	3a30      	subs	r2, #48	; 0x30
 8007016:	2a09      	cmp	r2, #9
 8007018:	d903      	bls.n	8007022 <_vfiprintf_r+0x1ee>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0c5      	beq.n	8006faa <_vfiprintf_r+0x176>
 800701e:	9105      	str	r1, [sp, #20]
 8007020:	e7c3      	b.n	8006faa <_vfiprintf_r+0x176>
 8007022:	fb0c 2101 	mla	r1, ip, r1, r2
 8007026:	4604      	mov	r4, r0
 8007028:	2301      	movs	r3, #1
 800702a:	e7f0      	b.n	800700e <_vfiprintf_r+0x1da>
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	462a      	mov	r2, r5
 8007032:	4b16      	ldr	r3, [pc, #88]	; (800708c <_vfiprintf_r+0x258>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4630      	mov	r0, r6
 8007038:	f3af 8000 	nop.w
 800703c:	4607      	mov	r7, r0
 800703e:	1c78      	adds	r0, r7, #1
 8007040:	d1d6      	bne.n	8006ff0 <_vfiprintf_r+0x1bc>
 8007042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007044:	07d9      	lsls	r1, r3, #31
 8007046:	d405      	bmi.n	8007054 <_vfiprintf_r+0x220>
 8007048:	89ab      	ldrh	r3, [r5, #12]
 800704a:	059a      	lsls	r2, r3, #22
 800704c:	d402      	bmi.n	8007054 <_vfiprintf_r+0x220>
 800704e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007050:	f7ff fd7f 	bl	8006b52 <__retarget_lock_release_recursive>
 8007054:	89ab      	ldrh	r3, [r5, #12]
 8007056:	065b      	lsls	r3, r3, #25
 8007058:	f53f af12 	bmi.w	8006e80 <_vfiprintf_r+0x4c>
 800705c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800705e:	e711      	b.n	8006e84 <_vfiprintf_r+0x50>
 8007060:	ab03      	add	r3, sp, #12
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	462a      	mov	r2, r5
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <_vfiprintf_r+0x258>)
 8007068:	a904      	add	r1, sp, #16
 800706a:	4630      	mov	r0, r6
 800706c:	f000 f880 	bl	8007170 <_printf_i>
 8007070:	e7e4      	b.n	800703c <_vfiprintf_r+0x208>
 8007072:	bf00      	nop
 8007074:	08007b28 	.word	0x08007b28
 8007078:	08007b48 	.word	0x08007b48
 800707c:	08007b08 	.word	0x08007b08
 8007080:	08007b68 	.word	0x08007b68
 8007084:	08007b72 	.word	0x08007b72
 8007088:	00000000 	.word	0x00000000
 800708c:	08006e0f 	.word	0x08006e0f
 8007090:	08007b6e 	.word	0x08007b6e

08007094 <_printf_common>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	4616      	mov	r6, r2
 800709a:	4699      	mov	r9, r3
 800709c:	688a      	ldr	r2, [r1, #8]
 800709e:	690b      	ldr	r3, [r1, #16]
 80070a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070a4:	4293      	cmp	r3, r2
 80070a6:	bfb8      	it	lt
 80070a8:	4613      	movlt	r3, r2
 80070aa:	6033      	str	r3, [r6, #0]
 80070ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070b0:	4607      	mov	r7, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	b10a      	cbz	r2, 80070ba <_printf_common+0x26>
 80070b6:	3301      	adds	r3, #1
 80070b8:	6033      	str	r3, [r6, #0]
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	0699      	lsls	r1, r3, #26
 80070be:	bf42      	ittt	mi
 80070c0:	6833      	ldrmi	r3, [r6, #0]
 80070c2:	3302      	addmi	r3, #2
 80070c4:	6033      	strmi	r3, [r6, #0]
 80070c6:	6825      	ldr	r5, [r4, #0]
 80070c8:	f015 0506 	ands.w	r5, r5, #6
 80070cc:	d106      	bne.n	80070dc <_printf_common+0x48>
 80070ce:	f104 0a19 	add.w	sl, r4, #25
 80070d2:	68e3      	ldr	r3, [r4, #12]
 80070d4:	6832      	ldr	r2, [r6, #0]
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	42ab      	cmp	r3, r5
 80070da:	dc26      	bgt.n	800712a <_printf_common+0x96>
 80070dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070e0:	1e13      	subs	r3, r2, #0
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	bf18      	it	ne
 80070e6:	2301      	movne	r3, #1
 80070e8:	0692      	lsls	r2, r2, #26
 80070ea:	d42b      	bmi.n	8007144 <_printf_common+0xb0>
 80070ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070f0:	4649      	mov	r1, r9
 80070f2:	4638      	mov	r0, r7
 80070f4:	47c0      	blx	r8
 80070f6:	3001      	adds	r0, #1
 80070f8:	d01e      	beq.n	8007138 <_printf_common+0xa4>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	68e5      	ldr	r5, [r4, #12]
 80070fe:	6832      	ldr	r2, [r6, #0]
 8007100:	f003 0306 	and.w	r3, r3, #6
 8007104:	2b04      	cmp	r3, #4
 8007106:	bf08      	it	eq
 8007108:	1aad      	subeq	r5, r5, r2
 800710a:	68a3      	ldr	r3, [r4, #8]
 800710c:	6922      	ldr	r2, [r4, #16]
 800710e:	bf0c      	ite	eq
 8007110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007114:	2500      	movne	r5, #0
 8007116:	4293      	cmp	r3, r2
 8007118:	bfc4      	itt	gt
 800711a:	1a9b      	subgt	r3, r3, r2
 800711c:	18ed      	addgt	r5, r5, r3
 800711e:	2600      	movs	r6, #0
 8007120:	341a      	adds	r4, #26
 8007122:	42b5      	cmp	r5, r6
 8007124:	d11a      	bne.n	800715c <_printf_common+0xc8>
 8007126:	2000      	movs	r0, #0
 8007128:	e008      	b.n	800713c <_printf_common+0xa8>
 800712a:	2301      	movs	r3, #1
 800712c:	4652      	mov	r2, sl
 800712e:	4649      	mov	r1, r9
 8007130:	4638      	mov	r0, r7
 8007132:	47c0      	blx	r8
 8007134:	3001      	adds	r0, #1
 8007136:	d103      	bne.n	8007140 <_printf_common+0xac>
 8007138:	f04f 30ff 	mov.w	r0, #4294967295
 800713c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007140:	3501      	adds	r5, #1
 8007142:	e7c6      	b.n	80070d2 <_printf_common+0x3e>
 8007144:	18e1      	adds	r1, r4, r3
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	2030      	movs	r0, #48	; 0x30
 800714a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800714e:	4422      	add	r2, r4
 8007150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007158:	3302      	adds	r3, #2
 800715a:	e7c7      	b.n	80070ec <_printf_common+0x58>
 800715c:	2301      	movs	r3, #1
 800715e:	4622      	mov	r2, r4
 8007160:	4649      	mov	r1, r9
 8007162:	4638      	mov	r0, r7
 8007164:	47c0      	blx	r8
 8007166:	3001      	adds	r0, #1
 8007168:	d0e6      	beq.n	8007138 <_printf_common+0xa4>
 800716a:	3601      	adds	r6, #1
 800716c:	e7d9      	b.n	8007122 <_printf_common+0x8e>
	...

08007170 <_printf_i>:
 8007170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	7e0f      	ldrb	r7, [r1, #24]
 8007176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007178:	2f78      	cmp	r7, #120	; 0x78
 800717a:	4691      	mov	r9, r2
 800717c:	4680      	mov	r8, r0
 800717e:	460c      	mov	r4, r1
 8007180:	469a      	mov	sl, r3
 8007182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007186:	d807      	bhi.n	8007198 <_printf_i+0x28>
 8007188:	2f62      	cmp	r7, #98	; 0x62
 800718a:	d80a      	bhi.n	80071a2 <_printf_i+0x32>
 800718c:	2f00      	cmp	r7, #0
 800718e:	f000 80d8 	beq.w	8007342 <_printf_i+0x1d2>
 8007192:	2f58      	cmp	r7, #88	; 0x58
 8007194:	f000 80a3 	beq.w	80072de <_printf_i+0x16e>
 8007198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800719c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071a0:	e03a      	b.n	8007218 <_printf_i+0xa8>
 80071a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071a6:	2b15      	cmp	r3, #21
 80071a8:	d8f6      	bhi.n	8007198 <_printf_i+0x28>
 80071aa:	a101      	add	r1, pc, #4	; (adr r1, 80071b0 <_printf_i+0x40>)
 80071ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071b0:	08007209 	.word	0x08007209
 80071b4:	0800721d 	.word	0x0800721d
 80071b8:	08007199 	.word	0x08007199
 80071bc:	08007199 	.word	0x08007199
 80071c0:	08007199 	.word	0x08007199
 80071c4:	08007199 	.word	0x08007199
 80071c8:	0800721d 	.word	0x0800721d
 80071cc:	08007199 	.word	0x08007199
 80071d0:	08007199 	.word	0x08007199
 80071d4:	08007199 	.word	0x08007199
 80071d8:	08007199 	.word	0x08007199
 80071dc:	08007329 	.word	0x08007329
 80071e0:	0800724d 	.word	0x0800724d
 80071e4:	0800730b 	.word	0x0800730b
 80071e8:	08007199 	.word	0x08007199
 80071ec:	08007199 	.word	0x08007199
 80071f0:	0800734b 	.word	0x0800734b
 80071f4:	08007199 	.word	0x08007199
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	08007199 	.word	0x08007199
 8007200:	08007199 	.word	0x08007199
 8007204:	08007313 	.word	0x08007313
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	1d1a      	adds	r2, r3, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007218:	2301      	movs	r3, #1
 800721a:	e0a3      	b.n	8007364 <_printf_i+0x1f4>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	6829      	ldr	r1, [r5, #0]
 8007220:	0606      	lsls	r6, r0, #24
 8007222:	f101 0304 	add.w	r3, r1, #4
 8007226:	d50a      	bpl.n	800723e <_printf_i+0xce>
 8007228:	680e      	ldr	r6, [r1, #0]
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	2e00      	cmp	r6, #0
 800722e:	da03      	bge.n	8007238 <_printf_i+0xc8>
 8007230:	232d      	movs	r3, #45	; 0x2d
 8007232:	4276      	negs	r6, r6
 8007234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007238:	485e      	ldr	r0, [pc, #376]	; (80073b4 <_printf_i+0x244>)
 800723a:	230a      	movs	r3, #10
 800723c:	e019      	b.n	8007272 <_printf_i+0x102>
 800723e:	680e      	ldr	r6, [r1, #0]
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007246:	bf18      	it	ne
 8007248:	b236      	sxthne	r6, r6
 800724a:	e7ef      	b.n	800722c <_printf_i+0xbc>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	6820      	ldr	r0, [r4, #0]
 8007250:	1d19      	adds	r1, r3, #4
 8007252:	6029      	str	r1, [r5, #0]
 8007254:	0601      	lsls	r1, r0, #24
 8007256:	d501      	bpl.n	800725c <_printf_i+0xec>
 8007258:	681e      	ldr	r6, [r3, #0]
 800725a:	e002      	b.n	8007262 <_printf_i+0xf2>
 800725c:	0646      	lsls	r6, r0, #25
 800725e:	d5fb      	bpl.n	8007258 <_printf_i+0xe8>
 8007260:	881e      	ldrh	r6, [r3, #0]
 8007262:	4854      	ldr	r0, [pc, #336]	; (80073b4 <_printf_i+0x244>)
 8007264:	2f6f      	cmp	r7, #111	; 0x6f
 8007266:	bf0c      	ite	eq
 8007268:	2308      	moveq	r3, #8
 800726a:	230a      	movne	r3, #10
 800726c:	2100      	movs	r1, #0
 800726e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007272:	6865      	ldr	r5, [r4, #4]
 8007274:	60a5      	str	r5, [r4, #8]
 8007276:	2d00      	cmp	r5, #0
 8007278:	bfa2      	ittt	ge
 800727a:	6821      	ldrge	r1, [r4, #0]
 800727c:	f021 0104 	bicge.w	r1, r1, #4
 8007280:	6021      	strge	r1, [r4, #0]
 8007282:	b90e      	cbnz	r6, 8007288 <_printf_i+0x118>
 8007284:	2d00      	cmp	r5, #0
 8007286:	d04d      	beq.n	8007324 <_printf_i+0x1b4>
 8007288:	4615      	mov	r5, r2
 800728a:	fbb6 f1f3 	udiv	r1, r6, r3
 800728e:	fb03 6711 	mls	r7, r3, r1, r6
 8007292:	5dc7      	ldrb	r7, [r0, r7]
 8007294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007298:	4637      	mov	r7, r6
 800729a:	42bb      	cmp	r3, r7
 800729c:	460e      	mov	r6, r1
 800729e:	d9f4      	bls.n	800728a <_printf_i+0x11a>
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d10b      	bne.n	80072bc <_printf_i+0x14c>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	07de      	lsls	r6, r3, #31
 80072a8:	d508      	bpl.n	80072bc <_printf_i+0x14c>
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	6861      	ldr	r1, [r4, #4]
 80072ae:	4299      	cmp	r1, r3
 80072b0:	bfde      	ittt	le
 80072b2:	2330      	movle	r3, #48	; 0x30
 80072b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072bc:	1b52      	subs	r2, r2, r5
 80072be:	6122      	str	r2, [r4, #16]
 80072c0:	f8cd a000 	str.w	sl, [sp]
 80072c4:	464b      	mov	r3, r9
 80072c6:	aa03      	add	r2, sp, #12
 80072c8:	4621      	mov	r1, r4
 80072ca:	4640      	mov	r0, r8
 80072cc:	f7ff fee2 	bl	8007094 <_printf_common>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d14c      	bne.n	800736e <_printf_i+0x1fe>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	b004      	add	sp, #16
 80072da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072de:	4835      	ldr	r0, [pc, #212]	; (80073b4 <_printf_i+0x244>)
 80072e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072e4:	6829      	ldr	r1, [r5, #0]
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80072ec:	6029      	str	r1, [r5, #0]
 80072ee:	061d      	lsls	r5, r3, #24
 80072f0:	d514      	bpl.n	800731c <_printf_i+0x1ac>
 80072f2:	07df      	lsls	r7, r3, #31
 80072f4:	bf44      	itt	mi
 80072f6:	f043 0320 	orrmi.w	r3, r3, #32
 80072fa:	6023      	strmi	r3, [r4, #0]
 80072fc:	b91e      	cbnz	r6, 8007306 <_printf_i+0x196>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	f023 0320 	bic.w	r3, r3, #32
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	2310      	movs	r3, #16
 8007308:	e7b0      	b.n	800726c <_printf_i+0xfc>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	f043 0320 	orr.w	r3, r3, #32
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	2378      	movs	r3, #120	; 0x78
 8007314:	4828      	ldr	r0, [pc, #160]	; (80073b8 <_printf_i+0x248>)
 8007316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800731a:	e7e3      	b.n	80072e4 <_printf_i+0x174>
 800731c:	0659      	lsls	r1, r3, #25
 800731e:	bf48      	it	mi
 8007320:	b2b6      	uxthmi	r6, r6
 8007322:	e7e6      	b.n	80072f2 <_printf_i+0x182>
 8007324:	4615      	mov	r5, r2
 8007326:	e7bb      	b.n	80072a0 <_printf_i+0x130>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	6826      	ldr	r6, [r4, #0]
 800732c:	6961      	ldr	r1, [r4, #20]
 800732e:	1d18      	adds	r0, r3, #4
 8007330:	6028      	str	r0, [r5, #0]
 8007332:	0635      	lsls	r5, r6, #24
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	d501      	bpl.n	800733c <_printf_i+0x1cc>
 8007338:	6019      	str	r1, [r3, #0]
 800733a:	e002      	b.n	8007342 <_printf_i+0x1d2>
 800733c:	0670      	lsls	r0, r6, #25
 800733e:	d5fb      	bpl.n	8007338 <_printf_i+0x1c8>
 8007340:	8019      	strh	r1, [r3, #0]
 8007342:	2300      	movs	r3, #0
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	4615      	mov	r5, r2
 8007348:	e7ba      	b.n	80072c0 <_printf_i+0x150>
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	1d1a      	adds	r2, r3, #4
 800734e:	602a      	str	r2, [r5, #0]
 8007350:	681d      	ldr	r5, [r3, #0]
 8007352:	6862      	ldr	r2, [r4, #4]
 8007354:	2100      	movs	r1, #0
 8007356:	4628      	mov	r0, r5
 8007358:	f7f8 ff5a 	bl	8000210 <memchr>
 800735c:	b108      	cbz	r0, 8007362 <_printf_i+0x1f2>
 800735e:	1b40      	subs	r0, r0, r5
 8007360:	6060      	str	r0, [r4, #4]
 8007362:	6863      	ldr	r3, [r4, #4]
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	2300      	movs	r3, #0
 8007368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800736c:	e7a8      	b.n	80072c0 <_printf_i+0x150>
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	462a      	mov	r2, r5
 8007372:	4649      	mov	r1, r9
 8007374:	4640      	mov	r0, r8
 8007376:	47d0      	blx	sl
 8007378:	3001      	adds	r0, #1
 800737a:	d0ab      	beq.n	80072d4 <_printf_i+0x164>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	079b      	lsls	r3, r3, #30
 8007380:	d413      	bmi.n	80073aa <_printf_i+0x23a>
 8007382:	68e0      	ldr	r0, [r4, #12]
 8007384:	9b03      	ldr	r3, [sp, #12]
 8007386:	4298      	cmp	r0, r3
 8007388:	bfb8      	it	lt
 800738a:	4618      	movlt	r0, r3
 800738c:	e7a4      	b.n	80072d8 <_printf_i+0x168>
 800738e:	2301      	movs	r3, #1
 8007390:	4632      	mov	r2, r6
 8007392:	4649      	mov	r1, r9
 8007394:	4640      	mov	r0, r8
 8007396:	47d0      	blx	sl
 8007398:	3001      	adds	r0, #1
 800739a:	d09b      	beq.n	80072d4 <_printf_i+0x164>
 800739c:	3501      	adds	r5, #1
 800739e:	68e3      	ldr	r3, [r4, #12]
 80073a0:	9903      	ldr	r1, [sp, #12]
 80073a2:	1a5b      	subs	r3, r3, r1
 80073a4:	42ab      	cmp	r3, r5
 80073a6:	dcf2      	bgt.n	800738e <_printf_i+0x21e>
 80073a8:	e7eb      	b.n	8007382 <_printf_i+0x212>
 80073aa:	2500      	movs	r5, #0
 80073ac:	f104 0619 	add.w	r6, r4, #25
 80073b0:	e7f5      	b.n	800739e <_printf_i+0x22e>
 80073b2:	bf00      	nop
 80073b4:	08007b79 	.word	0x08007b79
 80073b8:	08007b8a 	.word	0x08007b8a

080073bc <_sbrk_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_sbrk_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa f964 	bl	8001694 <_sbrk>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_sbrk_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_sbrk_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	2000244c 	.word	0x2000244c

080073dc <__sread>:
 80073dc:	b510      	push	{r4, lr}
 80073de:	460c      	mov	r4, r1
 80073e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e4:	f000 f8a0 	bl	8007528 <_read_r>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	bfab      	itete	ge
 80073ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ee:	89a3      	ldrhlt	r3, [r4, #12]
 80073f0:	181b      	addge	r3, r3, r0
 80073f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073f6:	bfac      	ite	ge
 80073f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073fa:	81a3      	strhlt	r3, [r4, #12]
 80073fc:	bd10      	pop	{r4, pc}

080073fe <__swrite>:
 80073fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007402:	461f      	mov	r7, r3
 8007404:	898b      	ldrh	r3, [r1, #12]
 8007406:	05db      	lsls	r3, r3, #23
 8007408:	4605      	mov	r5, r0
 800740a:	460c      	mov	r4, r1
 800740c:	4616      	mov	r6, r2
 800740e:	d505      	bpl.n	800741c <__swrite+0x1e>
 8007410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007414:	2302      	movs	r3, #2
 8007416:	2200      	movs	r2, #0
 8007418:	f000 f868 	bl	80074ec <_lseek_r>
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	4632      	mov	r2, r6
 800742a:	463b      	mov	r3, r7
 800742c:	4628      	mov	r0, r5
 800742e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007432:	f000 b817 	b.w	8007464 <_write_r>

08007436 <__sseek>:
 8007436:	b510      	push	{r4, lr}
 8007438:	460c      	mov	r4, r1
 800743a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743e:	f000 f855 	bl	80074ec <_lseek_r>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	bf15      	itete	ne
 8007448:	6560      	strne	r0, [r4, #84]	; 0x54
 800744a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800744e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007452:	81a3      	strheq	r3, [r4, #12]
 8007454:	bf18      	it	ne
 8007456:	81a3      	strhne	r3, [r4, #12]
 8007458:	bd10      	pop	{r4, pc}

0800745a <__sclose>:
 800745a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745e:	f000 b813 	b.w	8007488 <_close_r>
	...

08007464 <_write_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_write_r+0x20>)
 8007468:	4604      	mov	r4, r0
 800746a:	4608      	mov	r0, r1
 800746c:	4611      	mov	r1, r2
 800746e:	2200      	movs	r2, #0
 8007470:	602a      	str	r2, [r5, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f7f9 ff8c 	bl	8001390 <_write>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_write_r+0x1e>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_write_r+0x1e>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	2000244c 	.word	0x2000244c

08007488 <_close_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d06      	ldr	r5, [pc, #24]	; (80074a4 <_close_r+0x1c>)
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fa f8ca 	bl	800162c <_close>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_close_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_close_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	2000244c 	.word	0x2000244c

080074a8 <_fstat_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4d07      	ldr	r5, [pc, #28]	; (80074c8 <_fstat_r+0x20>)
 80074ac:	2300      	movs	r3, #0
 80074ae:	4604      	mov	r4, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	4611      	mov	r1, r2
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	f7fa f8c5 	bl	8001644 <_fstat>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d102      	bne.n	80074c4 <_fstat_r+0x1c>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	b103      	cbz	r3, 80074c4 <_fstat_r+0x1c>
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	bd38      	pop	{r3, r4, r5, pc}
 80074c6:	bf00      	nop
 80074c8:	2000244c 	.word	0x2000244c

080074cc <_isatty_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d06      	ldr	r5, [pc, #24]	; (80074e8 <_isatty_r+0x1c>)
 80074d0:	2300      	movs	r3, #0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7fa f8c4 	bl	8001664 <_isatty>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_isatty_r+0x1a>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_isatty_r+0x1a>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	2000244c 	.word	0x2000244c

080074ec <_lseek_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_lseek_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7fa f8bd 	bl	800167a <_lseek>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_lseek_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_lseek_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	2000244c 	.word	0x2000244c

08007510 <__malloc_lock>:
 8007510:	4801      	ldr	r0, [pc, #4]	; (8007518 <__malloc_lock+0x8>)
 8007512:	f7ff bb1d 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 8007516:	bf00      	nop
 8007518:	20002440 	.word	0x20002440

0800751c <__malloc_unlock>:
 800751c:	4801      	ldr	r0, [pc, #4]	; (8007524 <__malloc_unlock+0x8>)
 800751e:	f7ff bb18 	b.w	8006b52 <__retarget_lock_release_recursive>
 8007522:	bf00      	nop
 8007524:	20002440 	.word	0x20002440

08007528 <_read_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_read_r+0x20>)
 800752c:	4604      	mov	r4, r0
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fa f85b 	bl	80015f2 <_read>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_read_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_read_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	2000244c 	.word	0x2000244c

0800754c <_init>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr

08007558 <_fini>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr
